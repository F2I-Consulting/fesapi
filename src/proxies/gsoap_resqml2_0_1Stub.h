/* gsoap_resqml2_0_1Stub.h
   Generated by gSOAP 2.8.117E for resqml2_0_1ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool is licensed for commercial use and protected by law.
**  REDISTRIBUTION, RESALE OR ANY OTHER FORM OF SHARING IS STRICTLY PROHIBITED.
--------------------------------------------------------------------------------
Product and source code licensed by Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_resqml20	"http://www.energistics.org/energyml/data/resqmlv2"
#define SOAP_NAMESPACE_OF_eml20	"http://www.energistics.org/energyml/data/commonv2"
#define SOAP_NAMESPACE_OF_ptm	"http://www.f2i-consulting.com/PropertyTypeMapping"
#include <time.h>

#ifndef gsoap_resqml2_0_1Stub_H
#define gsoap_resqml2_0_1Stub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 208117
# error "GSOAP VERSION 208117 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace gsoap_resqml2_0_1 {

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* resqml2_0_1ForGsoap.h:1081 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSetKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSetKind (-459)

/* resqml20:TimeSetKind */
enum class resqml20__TimeSetKind {
	single_x0020time = 0,
	equivalent_x0020times = 1,
	not_x0020a_x0020time_x0020set = 2
};
#endif

/* resqml2_0_1ForGsoap.h:1106 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Facet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Facet (-460)

/* resqml20:Facet */
enum class resqml20__Facet {
	conditions = 0,
	direction = 1,
	netgross = 2,
	qualifier = 3,
	statistics = 4,
	what = 5
};
#endif

/* resqml2_0_1ForGsoap.h:1142 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlUom
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlUom (-461)

/* resqml20:ResqmlUom */
enum class resqml20__ResqmlUom {
	A = 'A',
	a = 'a',
	b = 'b',
	B = 'B',
	C = 'C',
	d = 'd',
	D = 'D',
	F = 'F',
	g = 'g',
	H = 'H',
	h = 'h',
	J = 'J',
	K = 'K',
	L = 'L',
	m = 'm',
	N = 'N',
	O = 'O',
	P = 'P',
	S = 'S',
	s = 's',
	t = 't',
	T = 'T',
	V = 'V',
	W = 'W',
	_x0025 = 'u',
	_x0025_x005barea_x005d = 'v',
	_x0025_x005bmass_x005d = 'w',
	_x0025_x005bmolar_x005d = 'x',
	_x0025_x005bvol_x005d = 'y',
	_x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 'z',
	_x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 123,
	_x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 124,
	_0_x002e001_x0020bbl_x002fft3 = 125,
	_0_x002e001_x0020bbl_x002fm3 = 126,
	_0_x002e001_x0020d_x002fft3 = 127,
	_0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 128,
	_0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 129,
	_0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 130,
	_0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 131,
	_0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 132,
	_0_x002e001_x0020h_x002fft = 133,
	_0_x002e001_x0020kPa2_x002fcP = 134,
	_0_x002e001_x0020lbm_x002fbbl = 135,
	_0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 136,
	_0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 137,
	_0_x002e001_x0020psi_x002fft = 138,
	_0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 139,
	_0_x002e001_x0020seca = 140,
	_0_x002e01_x0020bbl_x002fbbl = 141,
	_0_x002e01_x0020dega_x002fft = 142,
	_0_x002e01_x0020degF_x002fft = 143,
	_0_x002e01_x0020dm3_x002fkm = 144,
	_0_x002e01_x0020ft_x002fft = 145,
	_0_x002e01_x0020grain_x002fft3 = 146,
	_0_x002e01_x0020L_x002fkg = 147,
	_0_x002e01_x0020L_x002fkm = 148,
	_0_x002e01_x0020lbf_x002fft = 149,
	_0_x002e01_x0020lbf_x002fft2 = 150,
	_0_x002e01_x0020lbm_x002fft2 = 151,
	_0_x002e01_x0020psi_x002fft = 152,
	_0_x002e1_x0020ft = 153,
	_0_x002e1_x0020ft_x005bUS_x005d = 154,
	_0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 155,
	_0_x002e1_x0020in = 156,
	_0_x002e1_x0020L_x002fbbl = 157,
	_0_x002e1_x0020lbm_x002fbbl = 158,
	_0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 159,
	_0_x002e1_x0020yd = 160,
	_1_x002f_x0028kg_x002es_x0029 = 161,
	_1_x002f16_x0020in = 162,
	_1_x002f2_x0020ft = 163,
	_1_x002f2_x0020ms = 164,
	_1_x002f30_x0020cm3_x002fmin = 165,
	_1_x002f30_x0020dega_x002fft = 166,
	_1_x002f30_x0020dega_x002fm = 167,
	_1_x002f30_x0020lbf_x002fm = 168,
	_1_x002f30_x0020m_x002fm = 169,
	_1_x002f30_x0020N_x002fm = 170,
	_1_x002f32_x0020in = 171,
	_1_x002f64_x0020in = 172,
	_1_x002fa = 173,
	_1_x002fangstrom = 174,
	_1_x002fbar = 175,
	_1_x002fbbl = 176,
	_1_x002fcm = 177,
	_1_x002fd = 178,
	_1_x002fdegC = 179,
	_1_x002fdegF = 180,
	_1_x002fdegR = 181,
	_1_x002fft = 182,
	_1_x002fft2 = 183,
	_1_x002fft3 = 184,
	_1_x002fg = 185,
	_1_x002fgal_x005bUK_x005d = 186,
	_1_x002fgal_x005bUS_x005d = 187,
	_1_x002fH = 188,
	_1_x002fh = 189,
	_1_x002fin = 190,
	_1_x002fK = 191,
	_1_x002fkg = 192,
	_1_x002fkm2 = 193,
	_1_x002fkPa = 194,
	_1_x002fL = 195,
	_1_x002flbf = 196,
	_1_x002flbm = 197,
	_1_x002fm = 198,
	_1_x002fm2 = 199,
	_1_x002fm3 = 200,
	_1_x002fmi = 201,
	_1_x002fmi2 = 202,
	_1_x002fmin = 203,
	_1_x002fmm = 204,
	_1_x002fms = 205,
	_1_x002fN = 206,
	_1_x002fnm = 207,
	_1_x002fPa = 208,
	_1_x002fpPa = 209,
	_1_x002fpsi = 210,
	_1_x002fs = 211,
	_1_x002fupsi = 212,
	_1_x002fus = 213,
	_1_x002fuV = 214,
	_1_x002fV = 215,
	_1_x002fwk = 216,
	_1_x002fyd = 217,
	_10_x0020ft = 218,
	_10_x0020in = 219,
	_10_x0020km = 220,
	_10_x0020kN = 221,
	_10_x0020Mg_x002fm3 = 222,
	_100_x0020ft = 223,
	_100_x0020ka_x005bt_x005d = 224,
	_100_x0020km = 225,
	_1000_x0020bbl = 226,
	_1000_x0020bbl_x002eft_x002fd = 227,
	_1000_x0020bbl_x002fd = 228,
	_1000_x0020ft = 229,
	_1000_x0020ft_x002fh = 230,
	_1000_x0020ft_x002fs = 231,
	_1000_x0020ft3 = 232,
	_1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 233,
	_1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 234,
	_1000_x0020ft3_x002fbbl = 235,
	_1000_x0020ft3_x002fd = 236,
	_1000_x0020gal_x005bUK_x005d = 237,
	_1000_x0020gal_x005bUS_x005d = 238,
	_1000_x0020lbf_x002eft = 239,
	_1000_x0020m3 = 240,
	_1000_x0020m3_x002f_x0028d_x002em_x0029 = 241,
	_1000_x0020m3_x002f_x0028h_x002em_x0029 = 242,
	_1000_x0020m3_x002fd = 243,
	_1000_x0020m3_x002fh = 244,
	_1000_x0020m3_x002fm3 = 245,
	_1000_x0020m4_x002fd = 246,
	_1E_6_x0020acre_x002eft_x002fbbl = 247,
	_1E_6_x0020bbl_x002fft3 = 248,
	_1E_6_x0020bbl_x002fm3 = 249,
	_1E_6_x0020gal_x005bUS_x005d = 250,
	_1E_6_x0020m3_x002f_x0028m3_x002edegC_x0029 = 251,
	_1E_6_x0020m3_x002f_x0028m3_x002edegF_x0029 = 252,
	_1E_9_x00201_x002fft = 253,
	_1E12_x0020ft3 = 254,
	_1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 255,
	_1E6_x0020bbl = 256,
	_1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 257,
	_1E6_x0020bbl_x002facre = 258,
	_1E6_x0020bbl_x002fd = 259,
	_1E6_x0020Btu_x005bIT_x005d = 260,
	_1E6_x0020Btu_x005bIT_x005d_x002fh = 261,
	_1E6_x0020ft3 = 262,
	_1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 263,
	_1E6_x0020ft3_x002fbbl = 264,
	_1E6_x0020ft3_x002fd = 265,
	_1E6_x0020lbm_x002fa = 266,
	_1E6_x0020m3 = 267,
	_1E6_x0020m3_x002fd = 268,
	_1E9_x0020bbl = 269,
	_1E9_x0020ft3 = 270,
	_30_x0020ft = 271,
	_30_x0020m = 272,
	A_x002eh = 273,
	A_x002em2 = 274,
	A_x002es = 275,
	A_x002es_x002fkg = 276,
	A_x002es_x002fm3 = 277,
	A_x002fcm2 = 278,
	A_x002fft2 = 279,
	A_x002fm = 280,
	A_x002fm2 = 281,
	A_x002fmm = 282,
	A_x002fmm2 = 283,
	a_x005bt_x005d = 284,
	acre = 285,
	acre_x002eft = 286,
	ag = 287,
	aJ = 288,
	angstrom = 289,
	at = 290,
	atm = 291,
	atm_x002fft = 292,
	atm_x002fh = 293,
	atm_x002fhm = 294,
	atm_x002fm = 295,
	B_x002eW = 296,
	b_x002fcm3 = 297,
	B_x002fm = 298,
	B_x002fO = 299,
	bar = 300,
	bar_x002fh = 301,
	bar_x002fkm = 302,
	bar_x002fm = 303,
	bar2 = 304,
	bar2_x002fcP = 305,
	bbl = 306,
	bbl_x002f_x0028acre_x002eft_x0029 = 307,
	bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 308,
	bbl_x002f_x0028d_x002eft_x0029 = 309,
	bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 310,
	bbl_x002f_x0028kPa_x002ed_x0029 = 311,
	bbl_x002f_x0028psi_x002ed_x0029 = 312,
	bbl_x002facre = 313,
	bbl_x002fbbl = 314,
	bbl_x002fd = 315,
	bbl_x002fd2 = 316,
	bbl_x002fft = 317,
	bbl_x002fft3 = 318,
	bbl_x002fh = 319,
	bbl_x002fh2 = 320,
	bbl_x002fin = 321,
	bbl_x002fm3 = 322,
	bbl_x002fmi = 323,
	bbl_x002fmin = 324,
	bbl_x002fpsi = 325,
	bbl_x002fton_x005bUK_x005d = 326,
	bbl_x002fton_x005bUS_x005d = 327,
	Bd = 328,
	bit = 329,
	bit_x002fs = 330,
	Bq = 331,
	Bq_x002fkg = 332,
	Btu_x005bIT_x005d = 333,
	Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edegF_x0029 = 334,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edegF_x0029 = 335,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 336,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegF_x0029 = 337,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegR_x0029 = 338,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 339,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edegF_x0029 = 340,
	Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 341,
	Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 342,
	Btu_x005bIT_x005d_x002f_x0028lbm_x002edegF_x0029 = 343,
	Btu_x005bIT_x005d_x002f_x0028lbm_x002edegR_x0029 = 344,
	Btu_x005bIT_x005d_x002f_x0028lbmol_x002edegF_x0029 = 345,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 346,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edegF_x0029 = 347,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 348,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edegF_x0029 = 349,
	Btu_x005bIT_x005d_x002fbbl = 350,
	Btu_x005bIT_x005d_x002fft3 = 351,
	Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 352,
	Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 353,
	Btu_x005bIT_x005d_x002fh = 354,
	Btu_x005bIT_x005d_x002flbm = 355,
	Btu_x005bIT_x005d_x002flbmol = 356,
	Btu_x005bIT_x005d_x002fmin = 357,
	Btu_x005bIT_x005d_x002fs = 358,
	Btu_x005bth_x005d = 359,
	Btu_x005bUK_x005d = 360,
	byte = 361,
	byte_x002fs = 362,
	C_x002em = 363,
	C_x002fcm2 = 364,
	C_x002fcm3 = 365,
	C_x002fg = 366,
	C_x002fkg = 367,
	C_x002fm2 = 368,
	C_x002fm3 = 369,
	C_x002fmm2 = 370,
	C_x002fmm3 = 371,
	ca = 372,
	cA = 373,
	cal_x005bIT_x005d = 374,
	cal_x005bth_x005d = 375,
	cal_x005bth_x005d_x002f_x0028g_x002eK_x0029 = 376,
	cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edegC_x0029 = 377,
	cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 378,
	cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edegC_x0029 = 379,
	cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 380,
	cal_x005bth_x005d_x002f_x0028mol_x002edegC_x0029 = 381,
	cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edegC_x0029 = 382,
	cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edegC_x0029 = 383,
	cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 384,
	cal_x005bth_x005d_x002fcm3 = 385,
	cal_x005bth_x005d_x002fg = 386,
	cal_x005bth_x005d_x002fh = 387,
	cal_x005bth_x005d_x002fkg = 388,
	cal_x005bth_x005d_x002flbm = 389,
	cal_x005bth_x005d_x002fmL = 390,
	cal_x005bth_x005d_x002fmm3 = 391,
	cC = 392,
	ccal_x005bth_x005d = 393,
	ccgr = 394,
	cd = 395,
	cd_x002fm2 = 396,
	cEuc = 397,
	ceV = 398,
	cF = 399,
	cg = 400,
	cgauss = 401,
	cgr = 402,
	cGy = 403,
	cH = 404,
	chain = 405,
	chain_x005bBnA_x005d = 406,
	chain_x005bBnB_x005d = 407,
	chain_x005bCla_x005d = 408,
	chain_x005bInd37_x005d = 409,
	chain_x005bSe_x005d = 410,
	chain_x005bSeT_x005d = 411,
	chain_x005bUS_x005d = 412,
	cHz = 413,
	Ci = 414,
	cJ = 415,
	cm = 416,
	cm_x002fa = 417,
	cm_x002fs = 418,
	cm_x002fs2 = 419,
	cm2 = 420,
	cm2_x002fg = 421,
	cm2_x002fs = 422,
	cm3 = 423,
	cm3_x002fcm3 = 424,
	cm3_x002fg = 425,
	cm3_x002fh = 426,
	cm3_x002fL = 427,
	cm3_x002fm3 = 428,
	cm3_x002fmin = 429,
	cm3_x002fs = 430,
	cm4 = 431,
	cmH2O_x005b4degC_x005d = 432,
	cN = 433,
	cohm = 434,
	cP = 435,
	cPa = 436,
	crd = 437,
	cS = 438,
	cs = 439,
	cSt = 440,
	ct = 441,
	cT = 442,
	cu = 443,
	cV = 444,
	cW = 445,
	cWb = 446,
	cwt_x005bUK_x005d = 447,
	cwt_x005bUS_x005d = 448,
	D_x002eft = 449,
	D_x002em = 450,
	D_x002f_x0028Pa_x002es_x0029 = 451,
	d_x002fbbl = 452,
	D_x002fcP = 453,
	d_x002fft3 = 454,
	d_x002fm3 = 455,
	D_x005bAPI_x005d = 456,
	dA = 457,
	dam = 458,
	daN = 459,
	daN_x002em = 460,
	dAPI = 461,
	dB = 462,
	dB_x002eMW = 463,
	dB_x002emW = 464,
	dB_x002eW = 465,
	dB_x002fft = 466,
	dB_x002fkm = 467,
	dB_x002fm = 468,
	dB_x002fO = 469,
	dC = 470,
	dcal_x005bth_x005d = 471,
	dega = 472,
	dega_x002fft = 473,
	dega_x002fh = 474,
	dega_x002fm = 475,
	dega_x002fmin = 476,
	dega_x002fs = 477,
	degC = 478,
	degC_x002em2_x002eh_x002fkcal_x005bth_x005d = 479,
	degC_x002fft = 480,
	degC_x002fh = 481,
	degC_x002fhm = 482,
	degC_x002fkm = 483,
	degC_x002fkPa = 484,
	degC_x002fm = 485,
	degC_x002fmin = 486,
	degC_x002fs = 487,
	degF = 488,
	degF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 489,
	degF_x002fft = 490,
	degF_x002fh = 491,
	degF_x002fm = 492,
	degF_x002fmin = 493,
	degF_x002fpsi = 494,
	degF_x002fs = 495,
	degR = 496,
	dEuc = 497,
	deV = 498,
	dF = 499,
	dgauss = 500,
	dGy = 501,
	dH = 502,
	dHz = 503,
	dJ = 504,
	dm = 505,
	dm_x002fs = 506,
	dm3 = 507,
	dm3_x002f_x0028kW_x002eh_x0029 = 508,
	dm3_x002fkg = 509,
	dm3_x002fkmol = 510,
	dm3_x002fm = 511,
	dm3_x002fm3 = 512,
	dm3_x002fMJ = 513,
	dm3_x002fs = 514,
	dm3_x002fs2 = 515,
	dm3_x002ft = 516,
	dN = 517,
	dN_x002em = 518,
	dohm = 519,
	dP = 520,
	dPa = 521,
	drd = 522,
	ds = 523,
	dS = 524,
	dT = 525,
	dV = 526,
	dW = 527,
	dWb = 528,
	dyne = 529,
	dyne_x002ecm2 = 530,
	dyne_x002es_x002fcm2 = 531,
	dyne_x002fcm = 532,
	dyne_x002fcm2 = 533,
	EA = 534,
	Ea_x005bt_x005d = 535,
	EC = 536,
	Ecal_x005bth_x005d = 537,
	EEuc = 538,
	EeV = 539,
	EF = 540,
	Eg = 541,
	Egauss = 542,
	EGy = 543,
	EH = 544,
	EHz = 545,
	EJ = 546,
	EJ_x002fa = 547,
	Em = 548,
	EN = 549,
	Eohm = 550,
	EP = 551,
	EPa = 552,
	Erd = 553,
	erg = 554,
	erg_x002fa = 555,
	erg_x002fcm2 = 556,
	erg_x002fcm3 = 557,
	erg_x002fg = 558,
	erg_x002fkg = 559,
	erg_x002fm3 = 560,
	ES = 561,
	ET = 562,
	Euc = 563,
	eV = 564,
	EW = 565,
	EWb = 566,
	F_x002fm = 567,
	fa = 568,
	fA = 569,
	fathom = 570,
	fC = 571,
	fcal_x005bth_x005d = 572,
	fEuc = 573,
	feV = 574,
	fF = 575,
	fg = 576,
	fgauss = 577,
	fGy = 578,
	fH = 579,
	fHz = 580,
	fJ = 581,
	floz_x005bUK_x005d = 582,
	floz_x005bUS_x005d = 583,
	fm = 584,
	fN = 585,
	fohm = 586,
	footcandle = 587,
	footcandle_x002es = 588,
	fP = 589,
	fPa = 590,
	frd = 591,
	fS = 592,
	ft = 593,
	fT = 594,
	ft_x002fbbl = 595,
	ft_x002fd = 596,
	ft_x002fdegF = 597,
	ft_x002fft = 598,
	ft_x002fft3 = 599,
	ft_x002fgal_x005bUS_x005d = 600,
	ft_x002fh = 601,
	ft_x002fin = 602,
	ft_x002flbm = 603,
	ft_x002fm = 604,
	ft_x002fmi = 605,
	ft_x002fmin = 606,
	ft_x002fms = 607,
	ft_x002fpsi = 608,
	ft_x002fs = 609,
	ft_x002fs2 = 610,
	ft_x002fus = 611,
	ft_x005bBnA_x005d = 612,
	ft_x005bBnB_x005d = 613,
	ft_x005bBr36_x005d = 614,
	ft_x005bBr65_x005d = 615,
	ft_x005bCla_x005d = 616,
	ft_x005bGC_x005d = 617,
	ft_x005bInd_x005d = 618,
	ft_x005bInd37_x005d = 619,
	ft_x005bInd62_x005d = 620,
	ft_x005bInd75_x005d = 621,
	ft_x005bSe_x005d = 622,
	ft_x005bSeT_x005d = 623,
	ft_x005bUS_x005d = 624,
	ft2 = 625,
	ft2_x002fh = 626,
	ft2_x002fin3 = 627,
	ft2_x002flbm = 628,
	ft2_x002fs = 629,
	ft3 = 630,
	ft3_x002f_x0028d_x002eft_x0029 = 631,
	ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 632,
	ft3_x002f_x0028min_x002eft2_x0029 = 633,
	ft3_x002f_x0028s_x002eft2_x0029 = 634,
	ft3_x002fbbl = 635,
	ft3_x002fd = 636,
	ft3_x002fd2 = 637,
	ft3_x002fft = 638,
	ft3_x002fft2 = 639,
	ft3_x002fft3 = 640,
	ft3_x002fh = 641,
	ft3_x002fh2 = 642,
	ft3_x002fkg = 643,
	ft3_x002flbm = 644,
	ft3_x002flbmol = 645,
	ft3_x002fmin = 646,
	ft3_x002fmin2 = 647,
	ft3_x002frad = 648,
	ft3_x002fs = 649,
	ft3_x002fs2 = 650,
	ft3_x002fsack_x005b94lbm_x005d = 651,
	fur_x005bUS_x005d = 652,
	fV = 653,
	fW = 654,
	fWb = 655,
	g_x002eft_x002f_x0028cm3_x002es_x0029 = 656,
	g_x002em_x002f_x0028cm3_x002es_x0029 = 657,
	g_x002fcm3 = 658,
	g_x002fcm4 = 659,
	g_x002fdm3 = 660,
	g_x002fgal_x005bUK_x005d = 661,
	g_x002fgal_x005bUS_x005d = 662,
	g_x002fkg = 663,
	g_x002fL = 664,
	g_x002fm3 = 665,
	g_x002fmol = 666,
	g_x002fs = 667,
	g_x002ft = 668,
	GA = 669,
	Ga_x005bt_x005d = 670,
	Gal = 671,
	gal_x005bUK_x005d = 672,
	gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 673,
	gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 674,
	gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 675,
	gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 676,
	gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 677,
	gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 678,
	gal_x005bUK_x005d_x002fd = 679,
	gal_x005bUK_x005d_x002fft3 = 680,
	gal_x005bUK_x005d_x002fh = 681,
	gal_x005bUK_x005d_x002fh2 = 682,
	gal_x005bUK_x005d_x002flbm = 683,
	gal_x005bUK_x005d_x002fmi = 684,
	gal_x005bUK_x005d_x002fmin = 685,
	gal_x005bUK_x005d_x002fmin2 = 686,
	gal_x005bUS_x005d = 687,
	gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 688,
	gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 689,
	gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 690,
	gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 691,
	gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 692,
	gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 693,
	gal_x005bUS_x005d_x002fbbl = 694,
	gal_x005bUS_x005d_x002fd = 695,
	gal_x005bUS_x005d_x002fft = 696,
	gal_x005bUS_x005d_x002fft3 = 697,
	gal_x005bUS_x005d_x002fh = 698,
	gal_x005bUS_x005d_x002fh2 = 699,
	gal_x005bUS_x005d_x002flbm = 700,
	gal_x005bUS_x005d_x002fmi = 701,
	gal_x005bUS_x005d_x002fmin = 702,
	gal_x005bUS_x005d_x002fmin2 = 703,
	gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 704,
	gal_x005bUS_x005d_x002fton_x005bUK_x005d = 705,
	gal_x005bUS_x005d_x002fton_x005bUS_x005d = 706,
	gAPI = 707,
	gauss = 708,
	gauss_x002fcm = 709,
	GBq = 710,
	GC = 711,
	Gcal_x005bth_x005d = 712,
	GEuc = 713,
	GeV = 714,
	gf = 715,
	GF = 716,
	Gg = 717,
	Ggauss = 718,
	GGy = 719,
	GH = 720,
	GHz = 721,
	GJ = 722,
	Gm = 723,
	gn = 724,
	GN = 725,
	Gohm = 726,
	gon = 727,
	GP = 728,
	GPa = 729,
	GPa_x002fcm = 730,
	GPa2 = 731,
	grain = 732,
	grain_x002fft3 = 733,
	grain_x002fgal_x005bUS_x005d = 734,
	Grd = 735,
	GS = 736,
	GT = 737,
	GV = 738,
	GW = 739,
	GW_x002eh = 740,
	GWb = 741,
	Gy = 742,
	h_x002fft3 = 743,
	h_x002fkm = 744,
	H_x002fm = 745,
	h_x002fm3 = 746,
	ha = 747,
	ha_x002em = 748,
	hbar = 749,
	hg = 750,
	hL = 751,
	hm = 752,
	hN = 753,
	hp = 754,
	hp_x002eh = 755,
	hp_x002eh_x002fbbl = 756,
	hp_x002eh_x002flbm = 757,
	hp_x002fft3 = 758,
	hp_x002fin2 = 759,
	hp_x005belec_x005d = 760,
	hp_x005bhyd_x005d = 761,
	hp_x005bhyd_x005d_x002fin2 = 762,
	hp_x005bmetric_x005d = 763,
	hp_x005bmetric_x005d_x002eh = 764,
	hs = 765,
	Hz = 766,
	in = 767,
	in_x002f_x0028in_x002edegF_x0029 = 768,
	in_x002fa = 769,
	in_x002fmin = 770,
	in_x002fs = 771,
	in_x002fs2 = 772,
	in_x005bUS_x005d = 773,
	in2 = 774,
	in2_x002fft2 = 775,
	in2_x002fin2 = 776,
	in2_x002fs = 777,
	in3 = 778,
	in3_x002fft = 779,
	in4 = 780,
	inH2O_x005b39degF_x005d = 781,
	inH2O_x005b60degF_x005d = 782,
	inHg_x005b32degF_x005d = 783,
	inHg_x005b60degF_x005d = 784,
	J_x002em_x002f_x0028s_x002em2_x002eK_x0029 = 785,
	J_x002em_x002fm2 = 786,
	J_x002f_x0028g_x002eK_x0029 = 787,
	J_x002f_x0028kg_x002eK_x0029 = 788,
	J_x002f_x0028mol_x002eK_x0029 = 789,
	J_x002f_x0028s_x002em2_x002edegC_x0029 = 790,
	J_x002fcm2 = 791,
	J_x002fdm3 = 792,
	J_x002fg = 793,
	J_x002fK = 794,
	J_x002fkg = 795,
	J_x002fm = 796,
	J_x002fm2 = 797,
	J_x002fm3 = 798,
	J_x002fmol = 799,
	J_x002fs = 800,
	K_x002em2_x002fkW = 801,
	K_x002em2_x002fW = 802,
	K_x002fkm = 803,
	K_x002fm = 804,
	K_x002fPa = 805,
	K_x002fs = 806,
	K_x002fW = 807,
	kA = 808,
	ka_x005bt_x005d = 809,
	kC = 810,
	kcal_x005bth_x005d = 811,
	kcal_x005bth_x005d_x002em_x002fcm2 = 812,
	kcal_x005bth_x005d_x002f_x0028h_x002em_x002edegC_x0029 = 813,
	kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 814,
	kcal_x005bth_x005d_x002f_x0028kg_x002edegC_x0029 = 815,
	kcal_x005bth_x005d_x002fcm3 = 816,
	kcal_x005bth_x005d_x002fg = 817,
	kcal_x005bth_x005d_x002fh = 818,
	kcal_x005bth_x005d_x002fkg = 819,
	kcal_x005bth_x005d_x002fm3 = 820,
	kcal_x005bth_x005d_x002fmol = 821,
	kcd = 822,
	kdyne = 823,
	kEuc = 824,
	keV = 825,
	kF = 826,
	kg = 827,
	kg_x002em = 828,
	kg_x002em_x002fcm2 = 829,
	kg_x002em_x002fs = 830,
	kg_x002em2 = 831,
	kg_x002f_x0028kW_x002eh_x0029 = 832,
	kg_x002f_x0028m_x002es_x0029 = 833,
	kg_x002f_x0028m2_x002es_x0029 = 834,
	kg_x002fd = 835,
	kg_x002fdm3 = 836,
	kg_x002fdm4 = 837,
	kg_x002fh = 838,
	kg_x002fJ = 839,
	kg_x002fkg = 840,
	kg_x002fL = 841,
	kg_x002fm = 842,
	kg_x002fm2 = 843,
	kg_x002fm3 = 844,
	kg_x002fm4 = 845,
	kg_x002fmin = 846,
	kg_x002fMJ = 847,
	kg_x002fmol = 848,
	kg_x002fs = 849,
	kg_x002fsack_x005b94lbm_x005d = 850,
	kg_x002ft = 851,
	kgauss = 852,
	kgf = 853,
	kgf_x002em = 854,
	kgf_x002em_x002fcm2 = 855,
	kgf_x002em_x002fm = 856,
	kgf_x002em2 = 857,
	kgf_x002es_x002fm2 = 858,
	kgf_x002fcm = 859,
	kgf_x002fcm2 = 860,
	kgf_x002fkgf = 861,
	kgf_x002fm2 = 862,
	kgf_x002fmm2 = 863,
	kGy = 864,
	kH = 865,
	kHz = 866,
	Kibyte = 867,
	kJ = 868,
	kJ_x002em_x002f_x0028h_x002em2_x002eK_x0029 = 869,
	kJ_x002f_x0028h_x002em2_x002eK_x0029 = 870,
	kJ_x002f_x0028kg_x002eK_x0029 = 871,
	kJ_x002f_x0028kmol_x002eK_x0029 = 872,
	kJ_x002fdm3 = 873,
	kJ_x002fkg = 874,
	kJ_x002fkmol = 875,
	kJ_x002fm3 = 876,
	klbf = 877,
	klbm = 878,
	klbm_x002fin = 879,
	klx = 880,
	km = 881,
	km_x002fcm = 882,
	km_x002fdm3 = 883,
	km_x002fh = 884,
	km_x002fL = 885,
	km_x002fs = 886,
	km2 = 887,
	km3 = 888,
	kmol = 889,
	kmol_x002fh = 890,
	kmol_x002fm3 = 891,
	kmol_x002fs = 892,
	kN = 893,
	kN_x002em = 894,
	kN_x002em2 = 895,
	kN_x002fm = 896,
	kN_x002fm2 = 897,
	knot = 898,
	kohm = 899,
	kohm_x002em = 900,
	kP = 901,
	kPa = 902,
	kPa_x002es_x002fm = 903,
	kPa_x002fh = 904,
	kPa_x002fhm = 905,
	kPa_x002fm = 906,
	kPa_x002fmin = 907,
	kPa2 = 908,
	kPa2_x002fcP = 909,
	kpsi = 910,
	kpsi2 = 911,
	krad = 912,
	krd = 913,
	kS = 914,
	kS_x002fm = 915,
	kT = 916,
	kV = 917,
	kW = 918,
	kW_x002eh = 919,
	kW_x002eh_x002f_x0028kg_x002edegC_x0029 = 920,
	kW_x002eh_x002fdm3 = 921,
	kW_x002eh_x002fkg = 922,
	kW_x002eh_x002fm3 = 923,
	kW_x002f_x0028m2_x002eK_x0029 = 924,
	kW_x002f_x0028m3_x002eK_x0029 = 925,
	kW_x002fcm2 = 926,
	kW_x002fm2 = 927,
	kW_x002fm3 = 928,
	kWb = 929,
	L_x002f_x0028bar_x002emin_x0029 = 930,
	L_x002fh = 931,
	L_x002fkg = 932,
	L_x002fkmol = 933,
	L_x002fm = 934,
	L_x002fm3 = 935,
	L_x002fmin = 936,
	L_x002fmol = 937,
	L_x002fs = 938,
	L_x002fs2 = 939,
	L_x002ft = 940,
	L_x002fton_x005bUK_x005d = 941,
	lbf = 942,
	lbf_x002eft = 943,
	lbf_x002eft_x002fbbl = 944,
	lbf_x002eft_x002fgal_x005bUS_x005d = 945,
	lbf_x002eft_x002fin = 946,
	lbf_x002eft_x002fin2 = 947,
	lbf_x002eft_x002flbm = 948,
	lbf_x002eft_x002fmin = 949,
	lbf_x002eft_x002fs = 950,
	lbf_x002ein = 951,
	lbf_x002ein_x002fin = 952,
	lbf_x002ein2 = 953,
	lbf_x002es_x002fft2 = 954,
	lbf_x002es_x002fin2 = 955,
	lbf_x002fft = 956,
	lbf_x002fft2 = 957,
	lbf_x002fft3 = 958,
	lbf_x002fgal_x005bUS_x005d = 959,
	lbf_x002fin = 960,
	lbf_x002flbf = 961,
	lbm = 962,
	lbm_x002eft = 963,
	lbm_x002eft_x002fs = 964,
	lbm_x002eft2 = 965,
	lbm_x002eft2_x002fs2 = 966,
	lbm_x002f_x0028ft_x002eh_x0029 = 967,
	lbm_x002f_x0028ft_x002es_x0029 = 968,
	lbm_x002f_x0028ft2_x002eh_x0029 = 969,
	lbm_x002f_x0028ft2_x002es_x0029 = 970,
	lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 971,
	lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 972,
	lbm_x002f_x0028hp_x002eh_x0029 = 973,
	lbm_x002fbbl = 974,
	lbm_x002fd = 975,
	lbm_x002fft = 976,
	lbm_x002fft2 = 977,
	lbm_x002fft3 = 978,
	lbm_x002fft4 = 979,
	lbm_x002fgal_x005bUK_x005d = 980,
	lbm_x002fgal_x005bUS_x005d = 981,
	lbm_x002fh = 982,
	lbm_x002fin3 = 983,
	lbm_x002flbmol = 984,
	lbm_x002fmin = 985,
	lbm_x002fs = 986,
	lbmol = 987,
	lbmol_x002f_x0028h_x002eft2_x0029 = 988,
	lbmol_x002f_x0028s_x002eft2_x0029 = 989,
	lbmol_x002fft3 = 990,
	lbmol_x002fgal_x005bUK_x005d = 991,
	lbmol_x002fgal_x005bUS_x005d = 992,
	lbmol_x002fh = 993,
	lbmol_x002fs = 994,
	link = 995,
	link_x005bBnA_x005d = 996,
	link_x005bBnB_x005d = 997,
	link_x005bCla_x005d = 998,
	link_x005bSe_x005d = 999,
	link_x005bSeT_x005d = 1000,
	link_x005bUS_x005d = 1001,
	lm = 1002,
	lm_x002es = 1003,
	lm_x002fm2 = 1004,
	lm_x002fW = 1005,
	lx = 1006,
	lx_x002es = 1007,
	m_x002f_x0028m_x002eK_x0029 = 1008,
	m_x002fcm = 1009,
	m_x002fd = 1010,
	m_x002fh = 1011,
	m_x002fK = 1012,
	m_x002fkg = 1013,
	m_x002fkm = 1014,
	m_x002fkPa = 1015,
	m_x002fm = 1016,
	m_x002fm3 = 1017,
	m_x002fmin = 1018,
	m_x002fms = 1019,
	m_x002fPa = 1020,
	m_x002fs = 1021,
	m_x002fs2 = 1022,
	m_x005bGer_x005d = 1023,
	m2 = 1024,
	m2_x002f_x0028kPa_x002ed_x0029 = 1025,
	m2_x002f_x0028Pa_x002es_x0029 = 1026,
	m2_x002fcm3 = 1027,
	m2_x002fd = 1028,
	m2_x002fg = 1029,
	m2_x002fh = 1030,
	m2_x002fkg = 1031,
	m2_x002fm2 = 1032,
	m2_x002fm3 = 1033,
	m2_x002fmol = 1034,
	m2_x002fs = 1035,
	m3 = 1036,
	m3_x002f_x0028bar_x002ed_x0029 = 1037,
	m3_x002f_x0028bar_x002eh_x0029 = 1038,
	m3_x002f_x0028bar_x002emin_x0029 = 1039,
	m3_x002f_x0028d_x002em_x0029 = 1040,
	m3_x002f_x0028h_x002em_x0029 = 1041,
	m3_x002f_x0028ha_x002em_x0029 = 1042,
	m3_x002f_x0028kPa_x002ed_x0029 = 1043,
	m3_x002f_x0028kPa_x002eh_x0029 = 1044,
	m3_x002f_x0028kW_x002eh_x0029 = 1045,
	m3_x002f_x0028m3_x002eK_x0029 = 1046,
	m3_x002f_x0028Pa_x002es_x0029 = 1047,
	m3_x002f_x0028psi_x002ed_x0029 = 1048,
	m3_x002f_x0028s_x002eft_x0029 = 1049,
	m3_x002f_x0028s_x002em_x0029 = 1050,
	m3_x002f_x0028s_x002em2_x0029 = 1051,
	m3_x002f_x0028s_x002em3_x0029 = 1052,
	m3_x002fbbl = 1053,
	m3_x002fd = 1054,
	m3_x002fd2 = 1055,
	m3_x002fg = 1056,
	m3_x002fh = 1057,
	m3_x002fJ = 1058,
	m3_x002fkg = 1059,
	m3_x002fkm = 1060,
	m3_x002fkmol = 1061,
	m3_x002fkPa = 1062,
	m3_x002fm = 1063,
	m3_x002fm2 = 1064,
	m3_x002fm3 = 1065,
	m3_x002fmin = 1066,
	m3_x002fmol = 1067,
	m3_x002fPa = 1068,
	m3_x002frad = 1069,
	m3_x002frev = 1070,
	m3_x002fs = 1071,
	m3_x002fs2 = 1072,
	m3_x002ft = 1073,
	m3_x002fton_x005bUK_x005d = 1074,
	m3_x002fton_x005bUS_x005d = 1075,
	m4 = 1076,
	m4_x002fs = 1077,
	mA = 1078,
	MA = 1079,
	mA_x002fcm2 = 1080,
	mA_x002fft2 = 1081,
	Ma_x005bt_x005d = 1082,
	mbar = 1083,
	MBq = 1084,
	mC = 1085,
	MC = 1086,
	mC_x002fm2 = 1087,
	Mcal_x005bth_x005d = 1088,
	mcal_x005bth_x005d = 1089,
	mCi = 1090,
	mD = 1091,
	mD_x002eft = 1092,
	mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 1093,
	mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 1094,
	mD_x002em = 1095,
	mD_x002f_x0028Pa_x002es_x0029 = 1096,
	mD_x002fcP = 1097,
	MEuc = 1098,
	mEuc = 1099,
	meV = 1100,
	MeV = 1101,
	mF = 1102,
	MF = 1103,
	Mg = 1104,
	mg = 1105,
	Mg_x002fa = 1106,
	Mg_x002fd = 1107,
	mg_x002fdm3 = 1108,
	mg_x002fg = 1109,
	mg_x002fgal_x005bUS_x005d = 1110,
	Mg_x002fh = 1111,
	Mg_x002fin = 1112,
	mg_x002fJ = 1113,
	mg_x002fkg = 1114,
	mg_x002fL = 1115,
	Mg_x002fm2 = 1116,
	Mg_x002fm3 = 1117,
	mg_x002fm3 = 1118,
	Mg_x002fmin = 1119,
	mGal = 1120,
	Mgauss = 1121,
	mgauss = 1122,
	Mgf = 1123,
	mgn = 1124,
	MGy = 1125,
	mGy = 1126,
	MH = 1127,
	mH = 1128,
	mHz = 1129,
	MHz = 1130,
	mi = 1131,
	mi_x002fgal_x005bUK_x005d = 1132,
	mi_x002fgal_x005bUS_x005d = 1133,
	mi_x002fh = 1134,
	mi_x002fin = 1135,
	mi_x005bnaut_x005d = 1136,
	mi_x005bnautUK_x005d = 1137,
	mi_x005bUS_x005d = 1138,
	mi_x005bUS_x005d2 = 1139,
	mi2 = 1140,
	mi3 = 1141,
	Mibyte = 1142,
	mil = 1143,
	mil_x002fa = 1144,
	mila = 1145,
	min_ = 1146,
	min_x002fft = 1147,
	min_x002fm = 1148,
	mina = 1149,
	mJ = 1150,
	MJ = 1151,
	MJ_x002fa = 1152,
	mJ_x002fcm2 = 1153,
	MJ_x002fkg = 1154,
	MJ_x002fkmol = 1155,
	MJ_x002fm = 1156,
	mJ_x002fm2 = 1157,
	MJ_x002fm3 = 1158,
	mL = 1159,
	mL_x002fgal_x005bUK_x005d = 1160,
	mL_x002fgal_x005bUS_x005d = 1161,
	mL_x002fmL = 1162,
	Mm = 1163,
	mm = 1164,
	mm_x002f_x0028mm_x002eK_x0029 = 1165,
	mm_x002fa = 1166,
	mm_x002fs = 1167,
	mm2 = 1168,
	mm2_x002fmm2 = 1169,
	mm2_x002fs = 1170,
	mm3 = 1171,
	mm3_x002fJ = 1172,
	mmHg_x005b0degC_x005d = 1173,
	mmol = 1174,
	mN = 1175,
	MN = 1176,
	mN_x002em2 = 1177,
	mN_x002fkm = 1178,
	mN_x002fm = 1179,
	mohm = 1180,
	Mohm = 1181,
	mol = 1182,
	mol_x002em2_x002f_x0028mol_x002es_x0029 = 1183,
	mol_x002f_x0028s_x002em2_x0029 = 1184,
	mol_x002fm2 = 1185,
	mol_x002fm3 = 1186,
	mol_x002fmol = 1187,
	mol_x002fs = 1188,
	mP = 1189,
	MP = 1190,
	MPa = 1191,
	mPa = 1192,
	mPa_x002es = 1193,
	MPa_x002es_x002fm = 1194,
	MPa_x002fh = 1195,
	MPa_x002fm = 1196,
	Mpsi = 1197,
	mrad = 1198,
	Mrad = 1199,
	Mrd = 1200,
	mrd = 1201,
	mrem = 1202,
	mrem_x002fh = 1203,
	MS = 1204,
	mS = 1205,
	ms = 1206,
	ms_x002fcm = 1207,
	mS_x002fcm = 1208,
	ms_x002fft = 1209,
	ms_x002fin = 1210,
	mS_x002fm = 1211,
	ms_x002fm = 1212,
	ms_x002fs = 1213,
	mSv = 1214,
	mSv_x002fh = 1215,
	mT = 1216,
	mT_x002fdm = 1217,
	MV = 1218,
	mV = 1219,
	mV_x002fft = 1220,
	mV_x002fm = 1221,
	MW = 1222,
	mW = 1223,
	MW_x002eh = 1224,
	MW_x002eh_x002fkg = 1225,
	MW_x002eh_x002fm3 = 1226,
	mW_x002fm2 = 1227,
	mWb = 1228,
	MWb = 1229,
	N_x002em = 1230,
	N_x002em_x002fm = 1231,
	N_x002em2 = 1232,
	N_x002es_x002fm2 = 1233,
	N_x002fm = 1234,
	N_x002fm2 = 1235,
	N_x002fm3 = 1236,
	N_x002fmm2 = 1237,
	N_x002fN = 1238,
	nA = 1239,
	na = 1240,
	nAPI = 1241,
	nC = 1242,
	ncal_x005bth_x005d = 1243,
	nCi = 1244,
	nEuc = 1245,
	neV = 1246,
	nF = 1247,
	ng = 1248,
	ng_x002fg = 1249,
	ng_x002fmg = 1250,
	ngauss = 1251,
	nGy = 1252,
	nH = 1253,
	nHz = 1254,
	nJ = 1255,
	nm = 1256,
	nm_x002fs = 1257,
	nN = 1258,
	nohm = 1259,
	nohm_x002emil2_x002fft = 1260,
	nohm_x002emm2_x002fm = 1261,
	nP = 1262,
	nPa = 1263,
	nrd = 1264,
	nS = 1265,
	ns = 1266,
	ns_x002fft = 1267,
	ns_x002fm = 1268,
	nT = 1269,
	nV = 1270,
	nW = 1271,
	nWb = 1272,
	Oe = 1273,
	ohm = 1274,
	ohm_x002ecm = 1275,
	ohm_x002em = 1276,
	ohm_x002em2_x002fm = 1277,
	ohm_x002fm = 1278,
	ozf = 1279,
	ozm = 1280,
	ozm_x005btroy_x005d = 1281,
	pA = 1282,
	Pa = 1283,
	Pa_x002es = 1284,
	Pa_x002es_x002em3_x002fkg = 1285,
	Pa_x002es_x002fm3 = 1286,
	Pa_x002es2_x002fm3 = 1287,
	Pa_x002fh = 1288,
	Pa_x002fm = 1289,
	Pa_x002fm3 = 1290,
	Pa_x002fs = 1291,
	Pa2 = 1292,
	Pa2_x002f_x0028Pa_x002es_x0029 = 1293,
	pC = 1294,
	pcal_x005bth_x005d = 1295,
	pCi = 1296,
	pCi_x002fg = 1297,
	pdl = 1298,
	pdl_x002ecm2 = 1299,
	pdl_x002eft = 1300,
	pdl_x002fcm = 1301,
	pEuc = 1302,
	peV = 1303,
	pF = 1304,
	pg = 1305,
	pgauss = 1306,
	pGy = 1307,
	pHz = 1308,
	pJ = 1309,
	pm = 1310,
	pN = 1311,
	pohm = 1312,
	pP = 1313,
	pPa = 1314,
	ppk = 1315,
	ppm = 1316,
	ppm_x005bmass_x005d = 1317,
	ppm_x005bvol_x005d = 1318,
	ppm_x005bvol_x005d_x002fdegC = 1319,
	ppm_x005bvol_x005d_x002fdegF = 1320,
	prd = 1321,
	ps = 1322,
	pS = 1323,
	psi = 1324,
	psi_x002ed_x002fbbl = 1325,
	psi_x002es = 1326,
	psi_x002fft = 1327,
	psi_x002fh = 1328,
	psi_x002fm = 1329,
	psi_x002fmin = 1330,
	psi2 = 1331,
	psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1332,
	psi2_x002fcP = 1333,
	pT = 1334,
	pt_x005bUK_x005d = 1335,
	pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 1336,
	pt_x005bUS_x005d = 1337,
	pV = 1338,
	pW = 1339,
	pWb = 1340,
	qt_x005bUK_x005d = 1341,
	qt_x005bUS_x005d = 1342,
	quad = 1343,
	quad_x002fa = 1344,
	rad = 1345,
	rad_x002fft = 1346,
	rad_x002fft3 = 1347,
	rad_x002fm = 1348,
	rad_x002fm3 = 1349,
	rad_x002fs = 1350,
	rad_x002fs2 = 1351,
	rd = 1352,
	rem = 1353,
	rem_x002fh = 1354,
	rev = 1355,
	rev_x002fft = 1356,
	rev_x002fm = 1357,
	rev_x002fs = 1358,
	rod_x005bUS_x005d = 1359,
	rpm = 1360,
	rpm_x002fs = 1361,
	s_x002fcm = 1362,
	s_x002fft = 1363,
	s_x002fft3 = 1364,
	s_x002fin = 1365,
	s_x002fkg = 1366,
	s_x002fL = 1367,
	S_x002fm = 1368,
	s_x002fm = 1369,
	s_x002fm3 = 1370,
	s_x002fqt_x005bUK_x005d = 1371,
	s_x002fqt_x005bUS_x005d = 1372,
	s_x002fs = 1373,
	sack_x005b94lbm_x005d = 1374,
	seca = 1375,
	section = 1376,
	sr = 1377,
	St = 1378,
	Sv = 1379,
	Sv_x002fh = 1380,
	Sv_x002fs = 1381,
	t_x002fa = 1382,
	t_x002fd = 1383,
	t_x002fh = 1384,
	T_x002fm = 1385,
	t_x002fm3 = 1386,
	t_x002fmin = 1387,
	TA = 1388,
	Ta_x005bt_x005d = 1389,
	TBq = 1390,
	TC = 1391,
	Tcal_x005bth_x005d = 1392,
	TD_x005bAPI_x005d = 1393,
	TD_x005bAPI_x005d_x002em = 1394,
	TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 1395,
	TEuc = 1396,
	TeV = 1397,
	TF = 1398,
	Tg = 1399,
	Tgauss = 1400,
	TGy = 1401,
	TH = 1402,
	therm_x005bEC_x005d = 1403,
	therm_x005bUK_x005d = 1404,
	therm_x005bUS_x005d = 1405,
	THz = 1406,
	TJ = 1407,
	TJ_x002fa = 1408,
	Tm = 1409,
	TN = 1410,
	Tohm = 1411,
	ton_x005bUK_x005d = 1412,
	ton_x005bUK_x005d_x002fa = 1413,
	ton_x005bUK_x005d_x002fd = 1414,
	ton_x005bUK_x005d_x002fh = 1415,
	ton_x005bUK_x005d_x002fmin = 1416,
	ton_x005bUS_x005d = 1417,
	ton_x005bUS_x005d_x002fa = 1418,
	ton_x005bUS_x005d_x002fd = 1419,
	ton_x005bUS_x005d_x002fft2 = 1420,
	ton_x005bUS_x005d_x002fh = 1421,
	ton_x005bUS_x005d_x002fmin = 1422,
	tonf_x005bUK_x005d = 1423,
	tonf_x005bUK_x005d_x002eft2 = 1424,
	tonf_x005bUK_x005d_x002fft = 1425,
	tonf_x005bUK_x005d_x002fft2 = 1426,
	tonf_x005bUS_x005d = 1427,
	tonf_x005bUS_x005d_x002eft = 1428,
	tonf_x005bUS_x005d_x002eft2 = 1429,
	tonf_x005bUS_x005d_x002emi = 1430,
	tonf_x005bUS_x005d_x002emi_x002fbbl = 1431,
	tonf_x005bUS_x005d_x002emi_x002fft = 1432,
	tonf_x005bUS_x005d_x002fft = 1433,
	tonf_x005bUS_x005d_x002fft2 = 1434,
	tonf_x005bUS_x005d_x002fin2 = 1435,
	tonRefrig = 1436,
	torr = 1437,
	TP = 1438,
	TPa = 1439,
	Trd = 1440,
	TS = 1441,
	TT = 1442,
	TV = 1443,
	TW = 1444,
	TW_x002eh = 1445,
	TWb = 1446,
	uA = 1447,
	uA_x002fcm2 = 1448,
	uA_x002fin2 = 1449,
	ubar = 1450,
	uC = 1451,
	ucal_x005bth_x005d = 1452,
	ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 1453,
	ucal_x005bth_x005d_x002fs = 1454,
	uCi = 1455,
	uEuc = 1456,
	ueV = 1457,
	uF = 1458,
	uF_x002fm = 1459,
	ug = 1460,
	ug_x002fcm3 = 1461,
	ug_x002fg = 1462,
	ug_x002fmg = 1463,
	ugauss = 1464,
	uGy = 1465,
	uH = 1466,
	uH_x002fm = 1467,
	uHz = 1468,
	uJ = 1469,
	um = 1470,
	um_x002fs = 1471,
	um2 = 1472,
	um2_x002em = 1473,
	umHg_x005b0degC_x005d = 1474,
	umol = 1475,
	uN = 1476,
	uohm = 1477,
	uohm_x002fft = 1478,
	uohm_x002fm = 1479,
	uP = 1480,
	uPa = 1481,
	upsi = 1482,
	urad = 1483,
	urd = 1484,
	us = 1485,
	uS = 1486,
	us_x002fft = 1487,
	us_x002fin = 1488,
	us_x002fm = 1489,
	uT = 1490,
	uV = 1491,
	uV_x002fft = 1492,
	uV_x002fm = 1493,
	uW = 1494,
	uW_x002fm3 = 1495,
	uWb = 1496,
	V_x002fB = 1497,
	V_x002fdB = 1498,
	V_x002fm = 1499,
	W_x002em2_x002eK_x002f_x0028J_x002eK_x0029 = 1500,
	W_x002f_x0028m_x002eK_x0029 = 1501,
	W_x002f_x0028m2_x002eK_x0029 = 1502,
	W_x002f_x0028m2_x002esr_x0029 = 1503,
	W_x002f_x0028m3_x002eK_x0029 = 1504,
	W_x002fcm2 = 1505,
	W_x002fK = 1506,
	W_x002fkW = 1507,
	W_x002fm2 = 1508,
	W_x002fm3 = 1509,
	W_x002fmm2 = 1510,
	W_x002fsr = 1511,
	W_x002fW = 1512,
	Wb = 1513,
	Wb_x002em = 1514,
	Wb_x002fm = 1515,
	Wb_x002fmm = 1516,
	wk = 1517,
	yd = 1518,
	yd_x005bBnA_x005d = 1519,
	yd_x005bBnB_x005d = 1520,
	yd_x005bCla_x005d = 1521,
	yd_x005bInd_x005d = 1522,
	yd_x005bInd37_x005d = 1523,
	yd_x005bInd62_x005d = 1524,
	yd_x005bInd75_x005d = 1525,
	yd_x005bSe_x005d = 1526,
	yd_x005bSeT_x005d = 1527,
	yd_x005bUS_x005d = 1528,
	yd2 = 1529,
	yd3 = 1530
};
#endif

/* resqml2_0_1ForGsoap.h:2590 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IdentityKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IdentityKind (-462)

/* resqml20:IdentityKind */
enum class resqml20__IdentityKind {
	colocation = 0,
	previous_x0020colocation = 1,
	equivalence = 2,
	previous_x0020equivalence = 3
};
#endif

/* resqml2_0_1ForGsoap.h:2625 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IndexableElements (-463)

/* resqml20:IndexableElements */
enum class resqml20__IndexableElements {
	cells = 0,
	column_x0020edges = 1,
	columns = 2,
	contacts = 3,
	coordinate_x0020lines = 4,
	edges = 5,
	edges_x0020per_x0020column = 6,
	enumerated_x0020elements = 7,
	faces = 8,
	faces_x0020per_x0020cell = 9,
	interval_x0020edges = 10,
	intervals = 11,
	I0 = 12,
	I0_x0020edges = 13,
	J0 = 14,
	J0_x0020edges = 15,
	layers = 16,
	nodes = 17,
	nodes_x0020per_x0020cell = 18,
	nodes_x0020per_x0020edge = 19,
	nodes_x0020per_x0020face = 20,
	patches = 21,
	pillars = 22,
	regions = 23,
	representation = 24,
	subnodes = 25,
	triangles = 26
};
#endif

/* resqml2_0_1ForGsoap.h:2686 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerIndexableElements (-464)

/* resqml20:UnstructuredColumnLayerIndexableElements */
enum class resqml20__UnstructuredColumnLayerIndexableElements {
	cells = 0,
	column_x0020edges = 1,
	columns = 2,
	coordinate_x0020lines = 3,
	edges = 4,
	edges_x0020per_x0020column = 5,
	faces = 6,
	faces_x0020per_x0020cell = 7,
	hinge_x0020node_x0020faces = 8,
	interval_x0020edges = 9,
	intervals = 10,
	layers = 11,
	nodes = 12,
	nodes_x0020per_x0020cell = 13,
	nodes_x0020per_x0020edge = 14,
	nodes_x0020per_x0020face = 15,
	pillars = 16,
	subnodes = 17
};
#endif

/* resqml2_0_1ForGsoap.h:2787 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeNodeObject
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeNodeObject (-465)

/* resqml20:SubnodeNodeObject */
enum class resqml20__SubnodeNodeObject {
	cell = 0,
	face = 1,
	edge = 2
};
#endif

/* resqml2_0_1ForGsoap.h:2815 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnShape (-466)

/* resqml20:ColumnShape */
enum class resqml20__ColumnShape {
	triangular = 0,
	quadrilateral = 1,
	polygonal = 2
};
#endif

/* resqml2_0_1ForGsoap.h:2840 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KDirection
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KDirection (-467)

/* resqml20:KDirection */
enum class resqml20__KDirection {
	down = 0,
	up = 1,
	not_x0020monotonic = 2
};
#endif

/* resqml2_0_1ForGsoap.h:2865 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkIndexableElements (-468)

/* resqml20:IjkIndexableElements */
enum class resqml20__IjkIndexableElements {
	cells = 0,
	column_x0020edges = 1,
	columns = 2,
	coordinate_x0020lines = 3,
	edges = 4,
	edges_x0020per_x0020column = 5,
	faces = 6,
	faces_x0020per_x0020cell = 7,
	hinge_x0020node_x0020faces = 8,
	interval_x0020edges = 9,
	intervals = 10,
	I0 = 11,
	I0_x0020edges = 12,
	J0 = 13,
	J0_x0020edges = 14,
	layers = 15,
	nodes = 16,
	nodes_x0020per_x0020cell = 17,
	nodes_x0020per_x0020edge = 18,
	nodes_x0020per_x0020face = 19,
	pillars = 20,
	radial_x0020origin_x0020polyline = 21,
	subnodes = 22
};
#endif

/* resqml2_0_1ForGsoap.h:2990 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GridGeometryAttachment
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GridGeometryAttachment (-469)

/* resqml20:GridGeometryAttachment */
enum class resqml20__GridGeometryAttachment {
	cells = 0,
	edges = 1,
	faces = 2,
	hinge_x0020node_x0020faces = 3,
	nodes = 4,
	radial_x0020origin_x0020polyline = 5,
	subnodes = 6
};
#endif

/* resqml2_0_1ForGsoap.h:3041 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellShape (-470)

/* resqml20:CellShape */
enum class resqml20__CellShape {
	tetrahedral = 0,
	pyramidal = 1,
	prism = 2,
	hexahedral = 3,
	polyhedral = 4
};
#endif

/* resqml2_0_1ForGsoap.h:3076 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredCellIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredCellIndexableElements (-471)

/* resqml20:UnstructuredCellIndexableElements */
enum class resqml20__UnstructuredCellIndexableElements {
	cells = 0,
	edges = 1,
	faces = 2,
	faces_x0020per_x0020cell = 3,
	hinge_x0020node_x0020faces = 4,
	nodes = 5,
	nodes_x0020per_x0020cell = 6,
	nodes_x0020per_x0020edge = 7,
	nodes_x0020per_x0020face = 8,
	subnodes = 9
};
#endif

/* resqml2_0_1ForGsoap.h:3139 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PillarShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PillarShape (-472)

/* resqml20:PillarShape */
enum class resqml20__PillarShape {
	vertical = 0,
	straight = 1,
	curved = 2
};
#endif

/* resqml2_0_1ForGsoap.h:3164 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThrowKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThrowKind (-473)

/* resqml20:ThrowKind */
enum class resqml20__ThrowKind {
	reverse = 0,
	normal = 1,
	thrust = 2,
	strike_x0020and_x0020slip = 3,
	scissor = 4,
	variable = 5
};
#endif

/* resqml2_0_1ForGsoap.h:3180 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SequenceStratigraphySurface
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SequenceStratigraphySurface (-474)

/* resqml20:SequenceStratigraphySurface */
enum class resqml20__SequenceStratigraphySurface {
	flooding = 0,
	ravinement = 1,
	maximum_x0020flooding = 2,
	transgressive = 3
};
#endif

/* resqml2_0_1ForGsoap.h:3194 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRelationship
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRelationship (-475)

/* resqml20:ContactRelationship */
enum class resqml20__ContactRelationship {
	frontier_x0020feature_x0020to_x0020frontier_x0020feature = 0,
	genetic_x0020boundary_x0020to_x0020frontier_x0020feature = 1,
	genetic_x0020boundary_x0020to_x0020genetic_x0020boundary = 2,
	genetic_x0020boundary_x0020to_x0020tectonic_x0020boundary = 3,
	stratigraphic_x0020unit_x0020to_x0020frontier_x0020feature = 4,
	stratigraphic_x0020unit_x0020to_x0020stratigraphic_x0020unit = 5,
	tectonic_x0020boundary_x0020to_x0020frontier_x0020feature = 6,
	tectonic_x0020boundary_x0020to_x0020genetic_x0020boundary = 7,
	tectonic_x0020boundary_x0020to_x0020tectonic_x0020boundary = 8
};
#endif

/* resqml2_0_1ForGsoap.h:3249 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DepositionMode
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DepositionMode (-476)

/* resqml20:DepositionMode */
enum class resqml20__DepositionMode {
	proportional_x0020between_x0020top_x0020and_x0020bottom = 0,
	parallel_x0020to_x0020bottom = 1,
	parallel_x0020to_x0020top = 2,
	parallel_x0020to_x0020another_x0020boundary = 3
};
#endif

/* resqml2_0_1ForGsoap.h:3259 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitComposition
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitComposition (-477)

/* resqml20:GeologicUnitComposition */
enum class resqml20__GeologicUnitComposition {
	intrusive_x0020clay_x0020 = 0,
	organic = 1,
	intrusive_x0020mud_x0020 = 2,
	evaporite_x0020salt = 3,
	evaporite_x0020non_x0020salt = 4,
	sedimentary_x0020siliclastic = 5,
	carbonate = 6,
	magmatic_x0020intrusive_x0020granitoid = 7,
	magmatic_x0020intrusive_x0020pyroclastic = 8,
	magmatic_x0020extrusive_x0020lava_x0020flow = 9,
	other_x0020chemichal_x0020rock = 10,
	sedimentary_x0020turbidite = 11
};
#endif

/* resqml2_0_1ForGsoap.h:3281 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Domain
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Domain (-478)

/* resqml20:Domain */
enum class resqml20__Domain {
	depth = 0,
	time = 1,
	mixed = 2
};
#endif

/* resqml2_0_1ForGsoap.h:3302 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BoundaryRelation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BoundaryRelation (-479)

/* resqml20:BoundaryRelation */
enum class resqml20__BoundaryRelation {
	conformable = 0,
	unconformable_x0020below_x0020and_x0020above = 1,
	unconformable_x0020above = 2,
	unconformable_x0020below = 3
};
#endif

/* resqml2_0_1ForGsoap.h:3325 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactMode
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactMode (-480)

/* resqml20:ContactMode */
enum class resqml20__ContactMode {
	baselap = 0,
	erosion = 1,
	extended = 2,
	proportional = 3
};
#endif

/* resqml2_0_1ForGsoap.h:3339 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrderingCriteria
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrderingCriteria (-481)

/* resqml20:OrderingCriteria */
enum class resqml20__OrderingCriteria {
	age = 0,
	apparent_x0020depth = 1,
	measured_x0020depth = 2
};
#endif

/* resqml2_0_1ForGsoap.h:3364 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Geobody3dShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Geobody3dShape (-482)

/* resqml20:Geobody3dShape */
enum class resqml20__Geobody3dShape {
	dyke = 0,
	silt = 1,
	dome = 2,
	sheeth = 3,
	diapir = 4,
	batholith = 5,
	channel = 6,
	delta = 7,
	dune = 8,
	fan = 9,
	reef = 10,
	wedge = 11
};
#endif

/* resqml2_0_1ForGsoap.h:3386 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactVerb
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactVerb (-483)

/* resqml20:ContactVerb */
enum class resqml20__ContactVerb {
	splits = 0,
	interrupts = 1,
	contains = 2,
	conforms = 3,
	erodes = 4,
	stops_x0020at = 5,
	crosses = 6,
	includes = 7
};
#endif

/* resqml2_0_1ForGsoap.h:3437 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactSide
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactSide (-484)

/* resqml20:ContactSide */
enum class resqml20__ContactSide {
	footwall = 0,
	hanging_x0020wall = 1,
	north = 2,
	south = 3,
	east = 4,
	west = 5,
	younger = 6,
	older = 7,
	both = 8
};
#endif

/* resqml2_0_1ForGsoap.h:3492 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitMaterialImplacement
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitMaterialImplacement (-485)

/* resqml20:GeologicUnitMaterialImplacement */
enum class resqml20__GeologicUnitMaterialImplacement {
	autochtonous = 0,
	allochtonous = 1
};
#endif

/* resqml2_0_1ForGsoap.h:3505 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Phase
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Phase (-486)

/* resqml20:Phase */
enum class resqml20__Phase {
	aquifer = 0,
	gas_x0020cap = 1,
	oil_x0020column = 2,
	seal = 3
};
#endif

/* resqml2_0_1ForGsoap.h:3535 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeneticBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeneticBoundaryKind (-487)

/* resqml20:GeneticBoundaryKind */
enum class resqml20__GeneticBoundaryKind {
	geobody_x0020boundary = 0,
	horizon = 1
};
#endif

/* resqml2_0_1ForGsoap.h:3555 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidContact
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidContact (-488)

/* resqml20:FluidContact */
enum class resqml20__FluidContact {
	free_x0020water_x0020contact = 0,
	gas_x0020oil_x0020contact = 1,
	gas_x0020water_x0020contact = 2,
	seal = 3,
	water_x0020oil_x0020contact = 4
};
#endif

/* resqml2_0_1ForGsoap.h:3590 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TectonicBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TectonicBoundaryKind (-489)

/* resqml20:TectonicBoundaryKind */
enum class resqml20__TectonicBoundaryKind {
	fault = 0,
	fracture = 1
};
#endif

/* resqml2_0_1ForGsoap.h:3610 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicBoundaryKind (-490)

/* resqml20:GeologicBoundaryKind */
enum class resqml20__GeologicBoundaryKind {
	fault = 0,
	geobody = 1,
	horizon = 2
};
#endif

/* resqml2_0_1ForGsoap.h:3623 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreFrameIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreFrameIndexableElements (-491)

/* resqml20:WellboreFrameIndexableElements */
enum class resqml20__WellboreFrameIndexableElements {
	intervals = 0,
	nodes = 1,
	cells = 2
};
#endif

/* resqml2_0_1ForGsoap.h:3648 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdDomain
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdDomain (-492)

/* resqml20:MdDomain */
enum class resqml20__MdDomain {
	driller = 0,
	logger = 1
};
#endif

/* resqml2_0_1ForGsoap.h:3669 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdReference (-493)

/* resqml20:MdReference */
enum class resqml20__MdReference {
	ground_x0020level = 0,
	kelly_x0020bushing = 1,
	mean_x0020sea_x0020level = 2,
	derrick_x0020floor = 3,
	casing_x0020flange = 4,
	arbitrary_x0020point = 5,
	crown_x0020valve = 6,
	rotary_x0020bushing = 7,
	rotary_x0020table = 8,
	sea_x0020floor = 9,
	lowest_x0020astronomical_x0020tide = 10,
	mean_x0020higher_x0020high_x0020water = 11,
	mean_x0020high_x0020water = 12,
	mean_x0020lower_x0020low_x0020water = 13,
	mean_x0020low_x0020water = 14,
	mean_x0020tide_x0020level = 15,
	kickoff_x0020point = 16
};
#endif

/* resqml2_0_1ForGsoap.h:3736 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidMarker (-494)

/* resqml20:FluidMarker */
enum class resqml20__FluidMarker {
	gas_x0020down_x0020to = 0,
	gas_x0020up_x0020to = 1,
	oil_x0020down_x0020to = 2,
	oil_x0020up_x0020to = 3,
	water_x0020down_x0020to = 4,
	water_x0020up_x0020to = 5
};
#endif

/* resqml2_0_1ForGsoap.h:3752 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SurfaceRole
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SurfaceRole (-495)

/* resqml20:SurfaceRole */
enum class resqml20__SurfaceRole {
	map = 0,
	pick = 1
};
#endif

/* resqml2_0_1ForGsoap.h:3772 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LineRole
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LineRole (-496)

/* resqml20:LineRole */
enum class resqml20__LineRole {
	fault_x0020center_x0020line = 0,
	pick = 1,
	inner_x0020ring = 2,
	outer_x0020ring = 3,
	trajectory = 4,
	interpretation_x0020line = 5,
	contact = 6,
	depositional_x0020line = 7,
	erosion_x0020line = 8,
	contouring = 9,
	pillar = 10
};
#endif

/* resqml2_0_1ForGsoap.h:3830 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterKind (-497)

/* resqml20:ParameterKind */
enum class resqml20__ParameterKind {
	dataObject = 0,
	floatingPoint = 1,
	integer = 2,
	string = 3,
	timestamp = 4,
	subActivity = 5
};
#endif

/* resqml2_0_1ForGsoap.h:3846 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineFlux
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineFlux (-498)

/* resqml20:StreamlineFlux */
enum class resqml20__StreamlineFlux {
	oil = 0,
	gas = 1,
	water = 2,
	total = 3,
	other = 4
};
#endif

/* resqml2_0_1ForGsoap.h:3995 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlPropertyKind (-509)

/* resqml20:ResqmlPropertyKind */
enum class resqml20__ResqmlPropertyKind {
	absorbed_x0020dose = 0,
	acceleration_x0020linear = 1,
	activity_x0020_x0028of_x0020radioactivity_x0029 = 2,
	amount_x0020of_x0020substance = 3,
	amplitude = 4,
	angle_x0020per_x0020length = 5,
	angle_x0020per_x0020time = 6,
	angle_x0020per_x0020volume = 7,
	angular_x0020acceleration = 8,
	area = 9,
	area_x0020per_x0020area = 10,
	area_x0020per_x0020volume = 11,
	attenuation = 12,
	attenuation_x0020per_x0020length = 13,
	azimuth = 14,
	bubble_x0020point_x0020pressure = 15,
	bulk_x0020modulus = 16,
	capacitance = 17,
	categorical = 18,
	cell_x0020length = 19,
	charge_x0020density = 20,
	chemical_x0020potential = 21,
	code = 22,
	compressibility = 23,
	concentration_x0020of_x0020B = 24,
	conductivity = 25,
	continuous = 26,
	cross_x0020section_x0020absorption = 27,
	current_x0020density = 28,
	Darcy_x0020flow_x0020coefficient = 29,
	data_x0020transmission_x0020speed = 30,
	delta_x0020temperature = 31,
	density = 32,
	depth = 33,
	diffusion_x0020coefficient = 34,
	digital_x0020storage = 35,
	dimensionless = 36,
	dip = 37,
	discrete = 38,
	dose_x0020equivalent = 39,
	dose_x0020equivalent_x0020rate = 40,
	dynamic_x0020viscosity = 41,
	electric_x0020charge = 42,
	electric_x0020conductance = 43,
	electric_x0020current = 44,
	electric_x0020dipole_x0020moment = 45,
	electric_x0020field_x0020strength = 46,
	electric_x0020polarization = 47,
	electric_x0020potential = 48,
	electrical_x0020resistivity = 49,
	electrochemical_x0020equivalent = 50,
	electromagnetic_x0020moment = 51,
	energy_x0020length_x0020per_x0020area = 52,
	energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 53,
	energy_x0020per_x0020area = 54,
	energy_x0020per_x0020length = 55,
	equivalent_x0020per_x0020mass = 56,
	equivalent_x0020per_x0020volume = 57,
	exposure_x0020_x0028radioactivity_x0029 = 58,
	fluid_x0020volume = 59,
	force = 60,
	force_x0020area = 61,
	force_x0020length_x0020per_x0020length = 62,
	force_x0020per_x0020force = 63,
	force_x0020per_x0020length = 64,
	force_x0020per_x0020volume = 'A',
	formation_x0020volume_x0020factor = 'B',
	frequency = 'C',
	frequency_x0020interval = 'D',
	gamma_x0020ray_x0020API_x0020unit = 'E',
	heat_x0020capacity = 'F',
	heat_x0020flow_x0020rate = 'G',
	heat_x0020transfer_x0020coefficient = 'H',
	illuminance = 'I',
	index = 'J',
	irradiance = 'K',
	isothermal_x0020compressibility = 'L',
	kinematic_x0020viscosity = 'M',
	Lambda_x0020Rho = 'N',
	Lame_x0020constant = 'O',
	length = 'P',
	length_x0020per_x0020length = 'Q',
	length_x0020per_x0020temperature = 'R',
	length_x0020per_x0020volume = 'S',
	level_x0020of_x0020power_x0020intensity = 'T',
	light_x0020exposure = 'U',
	linear_x0020thermal_x0020expansion = 'V',
	luminance = 'W',
	luminous_x0020efficacy = 'X',
	luminous_x0020flux = 'Y',
	luminous_x0020intensity = 'Z',
	magnetic_x0020dipole_x0020moment = 91,
	magnetic_x0020field_x0020strength = 92,
	magnetic_x0020flux = 93,
	magnetic_x0020induction = 94,
	magnetic_x0020permeability = 95,
	magnetic_x0020vector_x0020potential = 96,
	mass = 'a',
	mass_x0020attenuation_x0020coefficient = 'b',
	mass_x0020concentration = 'c',
	mass_x0020flow_x0020rate = 'd',
	mass_x0020length = 'e',
	mass_x0020per_x0020energy = 'f',
	mass_x0020per_x0020length = 'g',
	mass_x0020per_x0020time_x0020per_x0020area = 'h',
	mass_x0020per_x0020time_x0020per_x0020length = 'i',
	mass_x0020per_x0020volume_x0020per_x0020length = 'j',
	mobility = 'k',
	modulus_x0020of_x0020compression = 'l',
	molar_x0020concentration = 'm',
	molar_x0020heat_x0020capacity = 'n',
	molar_x0020volume = 'o',
	mole_x0020per_x0020area = 'p',
	mole_x0020per_x0020time = 'q',
	mole_x0020per_x0020time_x0020per_x0020area = 'r',
	moment_x0020of_x0020force = 's',
	moment_x0020of_x0020inertia = 't',
	moment_x0020of_x0020section = 'u',
	momentum = 'v',
	Mu_x0020Rho = 'w',
	net_x0020to_x0020gross_x0020ratio = 'x',
	neutron_x0020API_x0020unit = 'y',
	nonDarcy_x0020flow_x0020coefficient = 'z',
	operations_x0020per_x0020time = 123,
	parachor = 124,
	per_x0020area = 125,
	per_x0020electric_x0020potential = 126,
	per_x0020force = 127,
	per_x0020length = 128,
	per_x0020mass = 129,
	per_x0020volume = 130,
	permeability_x0020length = 131,
	permeability_x0020rock = 132,
	permeability_x0020thickness = 133,
	permeance = 134,
	permittivity = 135,
	pH = 136,
	plane_x0020angle = 137,
	Poisson_x0020ratio = 138,
	pore_x0020volume = 139,
	porosity = 140,
	potential_x0020difference_x0020per_x0020power_x0020drop = 141,
	power = 142,
	power_x0020per_x0020volume = 143,
	pressure = 144,
	pressure_x0020per_x0020time = 145,
	pressure_x0020squared = 146,
	pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 147,
	pressure_x0020time_x0020per_x0020volume = 148,
	productivity_x0020index = 149,
	property_x0020multiplier = 150,
	quantity = 151,
	quantity_x0020of_x0020light = 152,
	radiance = 153,
	radiant_x0020intensity = 154,
	relative_x0020permeability = 155,
	relative_x0020power = 156,
	relative_x0020time = 157,
	reluctance = 158,
	resistance = 159,
	resistivity_x0020per_x0020length = 160,
	RESQML_x0020root_x0020property = 161,
	Rock_x0020Impedance = 162,
	rock_x0020permeability = 163,
	rock_x0020volume = 164,
	saturation = 165,
	second_x0020moment_x0020of_x0020area = 166,
	shear_x0020modulus = 167,
	solid_x0020angle = 168,
	solution_x0020gas_oil_x0020ratio = 169,
	specific_x0020activity_x0020_x0028of_x0020radioactivity_x0029 = 170,
	specific_x0020energy = 171,
	specific_x0020heat_x0020capacity = 172,
	specific_x0020productivity_x0020index = 173,
	specific_x0020volume = 174,
	surface_x0020density = 175,
	temperature_x0020per_x0020length = 176,
	temperature_x0020per_x0020time = 177,
	thermal_x0020conductance = 178,
	thermal_x0020conductivity = 179,
	thermal_x0020diffusivity = 180,
	thermal_x0020insulance = 181,
	thermal_x0020resistance = 182,
	thermodynamic_x0020temperature = 183,
	thickness = 184,
	time = 185,
	time_x0020per_x0020length = 186,
	time_x0020per_x0020volume = 187,
	transmissibility = 188,
	unit_x0020productivity_x0020index = 189,
	unitless = 190,
	vapor_x0020oil_gas_x0020ratio = 191,
	velocity = 192,
	volume = 193,
	volume_x0020flow_x0020rate = 194,
	volume_x0020length_x0020per_x0020time = 195,
	volume_x0020per_x0020area = 196,
	volume_x0020per_x0020length = 197,
	volume_x0020per_x0020time_x0020per_x0020area = 198,
	volume_x0020per_x0020time_x0020per_x0020length = 199,
	volume_x0020per_x0020time_x0020per_x0020time = 200,
	volume_x0020per_x0020time_x0020per_x0020volume = 201,
	volume_x0020per_x0020volume = 202,
	volumetric_x0020heat_x0020transfer_x0020coefficient = 203,
	volumetric_x0020thermal_x0020expansion = 204,
	work = 205,
	Young_x0020modulus = 206
};
#endif

/* resqml2_0_1ForGsoap.h:4456 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrganizationKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrganizationKind (-510)

/* resqml20:OrganizationKind */
enum class resqml20__OrganizationKind {
	earth_x0020model = 0,
	fluid = 1,
	stratigraphic = 2,
	structural = 3
};
#endif

/* resqml2_0_1ForGsoap.h:4502 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AxisOrder2d
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AxisOrder2d (-512)

/* eml20:AxisOrder2d */
enum class eml20__AxisOrder2d {
	easting_x0020northing = 0,
	northing_x0020easting = 1,
	westing_x0020southing = 2,
	southing_x0020westing = 3,
	northing_x0020westing = 4,
	westing_x0020northing = 5
};
#endif

/* resqml2_0_1ForGsoap.h:4538 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalDirection
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalDirection (-513)

/* eml20:VerticalDirection */
enum class eml20__VerticalDirection {
	up = 0,
	down = 1
};
#endif

/* resqml2_0_1ForGsoap.h:4554 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioUom (-514)

/* eml20:LogarithmicPowerRatioUom */
enum class eml20__LogarithmicPowerRatioUom {
	B = 'B',
	dB = 'C'
};
#endif

/* resqml2_0_1ForGsoap.h:4570 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeUom (-515)

/* eml20:AmountOfSubstancePerTimeUom */
enum class eml20__AmountOfSubstancePerTimeUom {
	kmol_x002fh = 0,
	kmol_x002fs = 1,
	lbmol_x002fh = 2,
	lbmol_x002fs = 3,
	mol_x002fs = 4
};
#endif

/* resqml2_0_1ForGsoap.h:4601 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityUom (-516)

/* eml20:ElectricConductivityUom */
enum class eml20__ElectricConductivityUom {
	kS_x002fm = 0,
	mS_x002fcm = 1,
	mS_x002fm = 2,
	S_x002fm = 3
};
#endif

/* resqml2_0_1ForGsoap.h:4627 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationUom (-517)

/* eml20:VolumePerRotationUom */
enum class eml20__VolumePerRotationUom {
	ft3_x002frad = 0,
	m3_x002frad = 1,
	m3_x002frev = 2
};
#endif

/* resqml2_0_1ForGsoap.h:4648 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaUom (-518)

/* eml20:VolumePerTimePerAreaUom */
enum class eml20__VolumePerTimePerAreaUom {
	ft3_x002f_x0028min_x002eft2_x0029 = 0,
	ft3_x002f_x0028s_x002eft2_x0029 = 1,
	gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 2,
	gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 3,
	gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 4,
	gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 5,
	gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 6,
	gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 7,
	m3_x002f_x0028s_x002em2_x0029 = 8
};
#endif

/* resqml2_0_1ForGsoap.h:4699 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityUom (-519)

/* eml20:MobilityUom */
enum class eml20__MobilityUom {
	D_x002f_x0028Pa_x002es_x0029 = 0,
	D_x002fcP = 1,
	mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 2,
	mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 3,
	mD_x002f_x0028Pa_x002es_x0029 = 4,
	mD_x002fcP = 5,
	TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 6
};
#endif

/* resqml2_0_1ForGsoap.h:4740 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientUom (-520)

/* eml20:HeatTransferCoefficientUom */
enum class eml20__HeatTransferCoefficientUom {
	Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaR_x0029 = 1,
	Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 2,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edeltaF_x0029 = 3,
	cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edeltaC_x0029 = 4,
	cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edeltaC_x0029 = 5,
	J_x002f_x0028s_x002em2_x002edeltaC_x0029 = 6,
	kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 7,
	kJ_x002f_x0028h_x002em2_x002edeltaK_x0029 = 8,
	kW_x002f_x0028m2_x002edeltaK_x0029 = 9,
	W_x002f_x0028m2_x002edeltaK_x0029 = 10
};
#endif

/* resqml2_0_1ForGsoap.h:4801 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyUom (-521)

/* eml20:MassPerEnergyUom */
enum class eml20__MassPerEnergyUom {
	kg_x002f_x0028kW_x002eh_x0029 = 0,
	kg_x002fJ = 1,
	kg_x002fMJ = 2,
	lbm_x002f_x0028hp_x002eh_x0029 = 3,
	mg_x002fJ = 4
};
#endif

/* resqml2_0_1ForGsoap.h:4832 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaUom (-522)

/* eml20:MomentOfInertiaUom */
enum class eml20__MomentOfInertiaUom {
	kg_x002em2 = 0,
	lbm_x002eft2 = 1
};
#endif

/* resqml2_0_1ForGsoap.h:4848 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceUom (-523)

/* eml20:CapacitanceUom */
enum class eml20__CapacitanceUom {
	F = 'F',
	cF = 'G',
	dF = 'H',
	EF = 'I',
	fF = 'J',
	GF = 'K',
	kF = 'L',
	mF = 'M',
	MF = 'N',
	nF = 'O',
	pF = 'P',
	TF = 'Q',
	uF = 'R'
};
#endif

/* resqml2_0_1ForGsoap.h:4919 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthUom (-524)

/* eml20:MagneticFluxDensityPerLengthUom */
enum class eml20__MagneticFluxDensityPerLengthUom {
	gauss_x002fcm = 0,
	mT_x002fdm = 1,
	T_x002fm = 2
};
#endif

/* resqml2_0_1ForGsoap.h:4940 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeUom (-525)

/* eml20:LengthPerVolumeUom */
enum class eml20__LengthPerVolumeUom {
	ft_x002fbbl = 0,
	ft_x002fft3 = 1,
	ft_x002fgal_x005bUS_x005d = 2,
	km_x002fdm3 = 3,
	km_x002fL = 4,
	m_x002fm3 = 5,
	mi_x002fgal_x005bUK_x005d = 6,
	mi_x002fgal_x005bUS_x005d = 7
};
#endif

/* resqml2_0_1ForGsoap.h:4986 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeUom (-526)

/* eml20:MassPerTimeUom */
enum class eml20__MassPerTimeUom {
	_1E6_x0020lbm_x002fa = 0,
	g_x002fs = 1,
	kg_x002fd = 2,
	kg_x002fh = 3,
	kg_x002fmin = 4,
	kg_x002fs = 5,
	lbm_x002fd = 6,
	lbm_x002fh = 7,
	lbm_x002fmin = 8,
	lbm_x002fs = 9,
	Mg_x002fa = 10,
	Mg_x002fd = 11,
	Mg_x002fh = 12,
	Mg_x002fmin = 13,
	t_x002fa = 14,
	t_x002fd = 15,
	t_x002fh = 16,
	t_x002fmin = 17,
	ton_x005bUK_x005d_x002fa = 18,
	ton_x005bUK_x005d_x002fd = 19,
	ton_x005bUK_x005d_x002fh = 20,
	ton_x005bUK_x005d_x002fmin = 21,
	ton_x005bUS_x005d_x002fa = 22,
	ton_x005bUS_x005d_x002fd = 23,
	ton_x005bUS_x005d_x002fh = 24,
	ton_x005bUS_x005d_x002fmin = 25
};
#endif

/* resqml2_0_1ForGsoap.h:5122 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightUom (-527)

/* eml20:MolecularWeightUom */
enum class eml20__MolecularWeightUom {
	g_x002fmol = 0,
	kg_x002fmol = 1,
	lbm_x002flbmol = 2
};
#endif

/* resqml2_0_1ForGsoap.h:5143 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxUom (-528)

/* eml20:MagneticFluxUom */
enum class eml20__MagneticFluxUom {
	cWb = 0,
	dWb = 1,
	EWb = 2,
	fWb = 3,
	GWb = 4,
	kWb = 5,
	MWb = 6,
	mWb = 7,
	nWb = 8,
	pWb = 9,
	TWb = 10,
	uWb = 11,
	Wb = 12
};
#endif

/* resqml2_0_1ForGsoap.h:5214 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeUom (-529)

/* eml20:VolumeUom */
enum class eml20__VolumeUom {
	L = 'L',
	_1000_x0020bbl = 'M',
	_1000_x0020ft3 = 'N',
	_1000_x0020gal_x005bUK_x005d = 'O',
	_1000_x0020gal_x005bUS_x005d = 'P',
	_1000_x0020m3 = 'Q',
	_1E_6_x0020gal_x005bUS_x005d = 'R',
	_1E12_x0020ft3 = 'S',
	_1E6_x0020bbl = 'T',
	_1E6_x0020ft3 = 'U',
	_1E6_x0020m3 = 'V',
	_1E9_x0020bbl = 'W',
	_1E9_x0020ft3 = 'X',
	acre_x002eft = 'Y',
	bbl = 'Z',
	cm3 = 91,
	dm3 = 92,
	floz_x005bUK_x005d = 93,
	floz_x005bUS_x005d = 94,
	ft3 = 95,
	gal_x005bUK_x005d = 96,
	gal_x005bUS_x005d = 'a',
	ha_x002em = 'b',
	hL = 'c',
	in3 = 'd',
	km3 = 'e',
	m3 = 'f',
	mi3 = 'g',
	mL = 'h',
	mm3 = 'i',
	pt_x005bUK_x005d = 'j',
	pt_x005bUS_x005d = 'k',
	qt_x005bUK_x005d = 'l',
	qt_x005bUS_x005d = 'm',
	um2_x002em = 'n',
	yd3 = 'o'
};
#endif

/* resqml2_0_1ForGsoap.h:5400 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceUom (-530)

/* eml20:ThermalConductanceUom */
enum class eml20__ThermalConductanceUom {
	W_x002fdeltaK = 0
};
#endif

/* resqml2_0_1ForGsoap.h:5411 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightUom (-531)

/* eml20:QuantityOfLightUom */
enum class eml20__QuantityOfLightUom {
	lm_x002es = 0
};
#endif

/* resqml2_0_1ForGsoap.h:5422 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeUom (-532)

/* eml20:LengthPerTimeUom */
enum class eml20__LengthPerTimeUom {
	_1000_x0020ft_x002fh = 0,
	_1000_x0020ft_x002fs = 1,
	cm_x002fa = 2,
	cm_x002fs = 3,
	dm_x002fs = 4,
	ft_x002fd = 5,
	ft_x002fh = 6,
	ft_x002fmin = 7,
	ft_x002fms = 8,
	ft_x002fs = 9,
	ft_x002fus = 10,
	in_x002fa = 11,
	in_x002fmin = 12,
	in_x002fs = 13,
	km_x002fh = 14,
	km_x002fs = 15,
	knot = 16,
	m_x002fd = 17,
	m_x002fh = 18,
	m_x002fmin = 19,
	m_x002fms = 20,
	m_x002fs = 21,
	mi_x002fh = 22,
	mil_x002fa = 23,
	mm_x002fa = 24,
	mm_x002fs = 25,
	nm_x002fs = 26,
	um_x002fs = 27
};
#endif

/* resqml2_0_1ForGsoap.h:5568 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthUom (-533)

/* eml20:ForceLengthPerLengthUom */
enum class eml20__ForceLengthPerLengthUom {
	kgf_x002em_x002fm = 0,
	lbf_x002eft_x002fin = 1,
	lbf_x002ein_x002fin = 2,
	N_x002em_x002fm = 3,
	tonf_x005bUS_x005d_x002emi_x002fft = 4
};
#endif

/* resqml2_0_1ForGsoap.h:5599 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleUom (-534)

/* eml20:SolidAngleUom */
enum class eml20__SolidAngleUom {
	sr = 0
};
#endif

/* resqml2_0_1ForGsoap.h:5610 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeUom (-535)

/* eml20:VolumePerTimePerVolumeUom */
enum class eml20__VolumePerTimePerVolumeUom {
	bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 0,
	m3_x002f_x0028s_x002em3_x0029 = 1
};
#endif

/* resqml2_0_1ForGsoap.h:5626 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceUom (-536)

/* eml20:MomentOfForceUom */
enum class eml20__MomentOfForceUom {
	J = 'J',
	_1000_x0020lbf_x002eft = 'K',
	daN_x002em = 'L',
	dN_x002em = 'M',
	kgf_x002em = 'N',
	kN_x002em = 'O',
	lbf_x002eft = 'P',
	lbf_x002ein = 'Q',
	lbm_x002eft2_x002fs2 = 'R',
	N_x002em = 'S',
	pdl_x002eft = 'T',
	tonf_x005bUS_x005d_x002eft = 'U',
	tonf_x005bUS_x005d_x002emi = 'V'
};
#endif

/* resqml2_0_1ForGsoap.h:5697 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeUom (-537)

/* eml20:MassPerVolumeUom */
enum class eml20__MassPerVolumeUom {
	_0_x002e001_x0020lbm_x002fbbl = 0,
	_0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 1,
	_0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 2,
	_0_x002e01_x0020grain_x002fft3 = 3,
	_0_x002e1_x0020lbm_x002fbbl = 4,
	_10_x0020Mg_x002fm3 = 5,
	g_x002fcm3 = 6,
	g_x002fdm3 = 7,
	g_x002fgal_x005bUK_x005d = 8,
	g_x002fgal_x005bUS_x005d = 9,
	g_x002fL = 10,
	g_x002fm3 = 11,
	grain_x002fft3 = 12,
	grain_x002fgal_x005bUS_x005d = 13,
	kg_x002fdm3 = 14,
	kg_x002fL = 15,
	kg_x002fm3 = 16,
	lbm_x002fbbl = 17,
	lbm_x002fft3 = 18,
	lbm_x002fgal_x005bUK_x005d = 19,
	lbm_x002fgal_x005bUS_x005d = 20,
	lbm_x002fin3 = 21,
	mg_x002fdm3 = 22,
	mg_x002fgal_x005bUS_x005d = 23,
	mg_x002fL = 24,
	mg_x002fm3 = 25,
	Mg_x002fm3 = 26,
	t_x002fm3 = 27,
	ug_x002fcm3 = 28
};
#endif

/* resqml2_0_1ForGsoap.h:5848 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeUom (-538)

/* eml20:MolarVolumeUom */
enum class eml20__MolarVolumeUom {
	dm3_x002fkmol = 0,
	ft3_x002flbmol = 1,
	L_x002fkmol = 2,
	L_x002fmol = 3,
	m3_x002fkmol = 4,
	m3_x002fmol = 5
};
#endif

/* resqml2_0_1ForGsoap.h:5884 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceUom (-539)

/* eml20:AmountOfSubstanceUom */
enum class eml20__AmountOfSubstanceUom {
	kmol = 0,
	lbmol = 1,
	mmol = 2,
	mol = 3,
	umol = 4
};
#endif

/* resqml2_0_1ForGsoap.h:5915 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentUom (-540)

/* eml20:DipoleMomentUom */
enum class eml20__DipoleMomentUom {
	C_x002em = 0
};
#endif

/* resqml2_0_1ForGsoap.h:5926 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronUom (-541)

/* eml20:APINeutronUom */
enum class eml20__APINeutronUom {
	nAPI = 0
};
#endif

/* resqml2_0_1ForGsoap.h:5937 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeUom (-542)

/* eml20:ReciprocalTimeUom */
enum class eml20__ReciprocalTimeUom {
	_1_x002fa = 0,
	_1_x002fd = 1,
	_1_x002fh = 2,
	_1_x002fmin = 3,
	_1_x002fms = 4,
	_1_x002fs = 5,
	_1_x002fus = 6,
	_1_x002fwk = 7
};
#endif

/* resqml2_0_1ForGsoap.h:5983 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureUom (-543)

/* eml20:TemperatureIntervalPerPressureUom */
enum class eml20__TemperatureIntervalPerPressureUom {
	deltaC_x002fkPa = 0,
	deltaF_x002fpsi = 1,
	deltaK_x002fPa = 2
};
#endif

/* resqml2_0_1ForGsoap.h:6004 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthUom (-544)

/* eml20:LengthPerLengthUom */
enum class eml20__LengthPerLengthUom {
	_x0025 = 0,
	_0_x002e01_x0020ft_x002fft = 1,
	_1_x002f30_x0020m_x002fm = 2,
	Euc = 3,
	ft_x002fft = 4,
	ft_x002fin = 5,
	ft_x002fm = 6,
	ft_x002fmi = 7,
	km_x002fcm = 8,
	m_x002fcm = 9,
	m_x002fkm = 10,
	m_x002fm = 11,
	mi_x002fin = 12
};
#endif

/* resqml2_0_1ForGsoap.h:6075 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaUom (-545)

/* eml20:AreaUom */
enum class eml20__AreaUom {
	b = 'b',
	acre = 'c',
	cm2 = 'd',
	ft2 = 'e',
	ha = 'f',
	in2 = 'g',
	km2 = 'h',
	m2 = 'i',
	mi_x005bUS_x005d2 = 'j',
	mi2 = 'k',
	mm2 = 'l',
	section = 'm',
	um2 = 'n',
	yd2 = 'o'
};
#endif

/* resqml2_0_1ForGsoap.h:6151 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayUom (-546)

/* eml20:APIGammaRayUom */
enum class eml20__APIGammaRayUom {
	gAPI = 0
};
#endif

/* resqml2_0_1ForGsoap.h:6162 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionUom (-547)

/* eml20:VolumetricThermalExpansionUom */
enum class eml20__VolumetricThermalExpansionUom {
	_1_x002fdeltaC = 0,
	_1_x002fdeltaF = 1,
	_1_x002fdeltaK = 2,
	_1_x002fdeltaR = 3,
	_1E_6_x0020m3_x002f_x0028m3_x002edeltaC_x0029 = 4,
	_1E_6_x0020m3_x002f_x0028m3_x002edeltaF_x0029 = 5,
	m3_x002f_x0028m3_x002edeltaK_x0029 = 6,
	ppm_x005bvol_x005d_x002fdeltaC = 7,
	ppm_x005bvol_x005d_x002fdeltaF = 8
};
#endif

/* resqml2_0_1ForGsoap.h:6213 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityUom (-548)

/* eml20:ElectricCurrentDensityUom */
enum class eml20__ElectricCurrentDensityUom {
	A_x002fcm2 = 0,
	A_x002fft2 = 1,
	A_x002fm2 = 2,
	A_x002fmm2 = 3,
	mA_x002fcm2 = 4,
	mA_x002fft2 = 5,
	uA_x002fcm2 = 6,
	uA_x002fin2 = 7
};
#endif

/* resqml2_0_1ForGsoap.h:6259 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceUom (-549)

/* eml20:ForceUom */
enum class eml20__ForceUom {
	N = 'N',
	_10_x0020kN = 'O',
	cN = 'P',
	daN = 'Q',
	dN = 'R',
	dyne = 'S',
	EN = 'T',
	fN = 'U',
	gf = 'V',
	GN = 'W',
	hN = 'X',
	kdyne = 'Y',
	kgf = 'Z',
	klbf = 91,
	kN = 92,
	lbf = 93,
	Mgf = 94,
	mN = 95,
	MN = 96,
	nN = 'a',
	ozf = 'b',
	pdl = 'c',
	pN = 'd',
	TN = 'e',
	tonf_x005bUK_x005d = 'f',
	tonf_x005bUS_x005d = 'g',
	uN = 'h'
};
#endif

/* resqml2_0_1ForGsoap.h:6400 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaUom (-550)

/* eml20:VolumePerAreaUom */
enum class eml20__VolumePerAreaUom {
	_1E6_x0020bbl_x002facre = 0,
	bbl_x002facre = 1,
	ft3_x002fft2 = 2,
	m3_x002fm2 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:6426 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceUom (-551)

/* eml20:ReciprocalElectricPotentialDifferenceUom */
enum class eml20__ReciprocalElectricPotentialDifferenceUom {
	_1_x002fuV = 0,
	_1_x002fV = 1
};
#endif

/* resqml2_0_1ForGsoap.h:6442 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthUom (-552)

/* eml20:TimePerLengthUom */
enum class eml20__TimePerLengthUom {
	_0_x002e001_x0020h_x002fft = 0,
	h_x002fkm = 1,
	min_x002fft = 2,
	min_x002fm = 3,
	ms_x002fcm = 4,
	ms_x002fft = 5,
	ms_x002fin = 6,
	ms_x002fm = 7,
	ns_x002fft = 8,
	ns_x002fm = 9,
	s_x002fcm = 10,
	s_x002fft = 11,
	s_x002fin = 12,
	s_x002fm = 13,
	us_x002fft = 14,
	us_x002fin = 15,
	us_x002fm = 16
};
#endif

/* resqml2_0_1ForGsoap.h:6533 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureUom (-553)

/* eml20:VolumePerPressureUom */
enum class eml20__VolumePerPressureUom {
	bbl_x002fpsi = 0,
	m3_x002fkPa = 1,
	m3_x002fPa = 2
};
#endif

/* resqml2_0_1ForGsoap.h:6554 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaUom (-554)

/* eml20:ElectricChargePerAreaUom */
enum class eml20__ElectricChargePerAreaUom {
	C_x002fcm2 = 0,
	C_x002fm2 = 1,
	C_x002fmm2 = 2,
	mC_x002fm2 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:6580 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthUom (-555)

/* eml20:MassPerTimePerLengthUom */
enum class eml20__MassPerTimePerLengthUom {
	kg_x002f_x0028m_x002es_x0029 = 0,
	lbm_x002f_x0028ft_x002eh_x0029 = 1,
	lbm_x002f_x0028ft_x002es_x0029 = 2,
	Pa_x002es = 3
};
#endif

/* resqml2_0_1ForGsoap.h:6606 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityUom (-556)

/* eml20:MagneticFluxDensityUom */
enum class eml20__MagneticFluxDensityUom {
	T = 'T',
	cgauss = 'U',
	cT = 'V',
	dgauss = 'W',
	dT = 'X',
	Egauss = 'Y',
	ET = 'Z',
	fgauss = 91,
	fT = 92,
	gauss = 93,
	Ggauss = 94,
	GT = 95,
	kgauss = 96,
	kT = 'a',
	mgauss = 'b',
	Mgauss = 'c',
	mT = 'd',
	ngauss = 'e',
	nT = 'f',
	pgauss = 'g',
	pT = 'h',
	Tgauss = 'i',
	TT = 'j',
	ugauss = 'k',
	uT = 'l'
};
#endif

/* resqml2_0_1ForGsoap.h:6737 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleUom (-557)

/* eml20:PlaneAngleUom */
enum class eml20__PlaneAngleUom {
	_0_x002e001_x0020seca = 0,
	ccgr = 1,
	cgr = 2,
	dega = 3,
	gon = 4,
	krad = 5,
	mila = 6,
	mina = 7,
	Mrad = 8,
	mrad = 9,
	rad = 10,
	rev = 11,
	seca = 12,
	urad = 13
};
#endif

/* resqml2_0_1ForGsoap.h:6813 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeUom (-558)

/* eml20:SignalingEventPerTimeUom */
enum class eml20__SignalingEventPerTimeUom {
	Bd = 0
};
#endif

/* resqml2_0_1ForGsoap.h:6824 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthUom (-559)

/* eml20:EnergyPerLengthUom */
enum class eml20__EnergyPerLengthUom {
	J_x002fm = 0,
	MJ_x002fm = 1
};
#endif

/* resqml2_0_1ForGsoap.h:6840 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentUom (-560)

/* eml20:ElectricCurrentUom */
enum class eml20__ElectricCurrentUom {
	A = 'A',
	cA = 'B',
	dA = 'C',
	EA = 'D',
	fA = 'E',
	GA = 'F',
	kA = 'G',
	mA = 'H',
	MA = 'I',
	nA = 'J',
	pA = 'K',
	TA = 'L',
	uA = 'M'
};
#endif

/* resqml2_0_1ForGsoap.h:6911 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredUom (-561)

/* eml20:PressureSquaredUom */
enum class eml20__PressureSquaredUom {
	bar2 = 0,
	GPa2 = 1,
	kPa2 = 2,
	kpsi2 = 3,
	Pa2 = 4,
	psi2 = 5
};
#endif

/* resqml2_0_1ForGsoap.h:6947 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationUom (-562)

/* eml20:AngularAccelerationUom */
enum class eml20__AngularAccelerationUom {
	rad_x002fs2 = 0,
	rpm_x002fs = 1
};
#endif

/* resqml2_0_1ForGsoap.h:6963 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeUom (-563)

/* eml20:ReciprocalMassTimeUom */
enum class eml20__ReciprocalMassTimeUom {
	_1_x002f_x0028kg_x002es_x0029 = 0,
	Bq_x002fkg = 1,
	pCi_x002fg = 2
};
#endif

/* resqml2_0_1ForGsoap.h:6984 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityUom (-564)

/* eml20:ThermalDiffusivityUom */
enum class eml20__ThermalDiffusivityUom {
	cm2_x002fs = 0,
	ft2_x002fh = 1,
	ft2_x002fs = 2,
	in2_x002fs = 3,
	m2_x002fh = 4,
	m2_x002fs = 5,
	mm2_x002fs = 6
};
#endif

/* resqml2_0_1ForGsoap.h:7025 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthUom (-565)

/* eml20:VolumePerTimeLengthUom */
enum class eml20__VolumePerTimeLengthUom {
	_1000_x0020bbl_x002eft_x002fd = 0,
	_1000_x0020m4_x002fd = 1,
	m4_x002fs = 2
};
#endif

/* resqml2_0_1ForGsoap.h:7046 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockUom (-566)

/* eml20:PermeabilityRockUom */
enum class eml20__PermeabilityRockUom {
	D = 'D',
	D_x005bAPI_x005d = 'E',
	mD = 'F',
	TD_x005bAPI_x005d = 'G'
};
#endif

/* resqml2_0_1ForGsoap.h:7072 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaUom (-567)

/* eml20:SecondMomentOfAreaUom */
enum class eml20__SecondMomentOfAreaUom {
	cm4 = 0,
	in4 = 1,
	m4 = 2
};
#endif

/* resqml2_0_1ForGsoap.h:7093 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaUom (-568)

/* eml20:ForceAreaUom */
enum class eml20__ForceAreaUom {
	dyne_x002ecm2 = 0,
	kgf_x002em2 = 1,
	kN_x002em2 = 2,
	lbf_x002ein2 = 3,
	mN_x002em2 = 4,
	N_x002em2 = 5,
	pdl_x002ecm2 = 6,
	tonf_x005bUK_x005d_x002eft2 = 7,
	tonf_x005bUS_x005d_x002eft2 = 8
};
#endif

/* resqml2_0_1ForGsoap.h:7144 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthUom (-569)

/* eml20:ElectricFieldStrengthUom */
enum class eml20__ElectricFieldStrengthUom {
	mV_x002fft = 0,
	mV_x002fm = 1,
	uV_x002fft = 2,
	uV_x002fm = 3,
	V_x002fm = 4
};
#endif

/* resqml2_0_1ForGsoap.h:7175 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaUom (-570)

/* eml20:AmountOfSubstancePerAreaUom */
enum class eml20__AmountOfSubstancePerAreaUom {
	mol_x002fm2 = 0
};
#endif

/* resqml2_0_1ForGsoap.h:7186 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeUom (-571)

/* eml20:TimeUom */
enum class eml20__TimeUom {
	a = 'a',
	d = 'd',
	h = 'h',
	s = 's',
	_1_x002f2_x0020ms = 't',
	_100_x0020ka_x005bt_x005d = 'u',
	a_x005bt_x005d = 'v',
	ca = 'w',
	cs = 'x',
	ds = 'y',
	Ea_x005bt_x005d = 'z',
	fa = 123,
	Ga_x005bt_x005d = 124,
	hs = 125,
	ka_x005bt_x005d = 126,
	Ma_x005bt_x005d = 127,
	min_ = 128,
	ms = 129,
	na = 130,
	ns = 131,
	ps = 132,
	Ta_x005bt_x005d = 133,
	us = 134,
	wk = 135
};
#endif

/* resqml2_0_1ForGsoap.h:7312 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityUom (-572)

/* eml20:ThermalConductivityUom */
enum class eml20__ThermalConductivityUom {
	Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edeltaF_x0029 = 0,
	cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edeltaC_x0029 = 1,
	cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edeltaC_x0029 = 2,
	kcal_x005bth_x005d_x002f_x0028h_x002em_x002edeltaC_x0029 = 3,
	W_x002f_x0028m_x002edeltaK_x0029 = 4
};
#endif

/* resqml2_0_1ForGsoap.h:7343 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceUom (-573)

/* eml20:AreaPerAmountOfSubstanceUom */
enum class eml20__AreaPerAmountOfSubstanceUom {
	m2_x002fmol = 0
};
#endif

/* resqml2_0_1ForGsoap.h:7354 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthUom (-574)

/* eml20:LogarithmicPowerRatioPerLengthUom */
enum class eml20__LogarithmicPowerRatioPerLengthUom {
	B_x002fm = 0,
	dB_x002fft = 1,
	dB_x002fkm = 2,
	dB_x002fm = 3
};
#endif

/* resqml2_0_1ForGsoap.h:7380 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthUom (-575)

/* eml20:ReciprocalLengthUom */
enum class eml20__ReciprocalLengthUom {
	_1_x002fangstrom = 0,
	_1_x002fcm = 1,
	_1_x002fft = 2,
	_1_x002fin = 3,
	_1_x002fm = 4,
	_1_x002fmi = 5,
	_1_x002fmm = 6,
	_1_x002fnm = 7,
	_1_x002fyd = 8,
	_1E_9_x00201_x002fft = 9
};
#endif

/* resqml2_0_1ForGsoap.h:7436 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceUom (-576)

/* eml20:LuminanceUom */
enum class eml20__LuminanceUom {
	cd_x002fm2 = 0
};
#endif

/* resqml2_0_1ForGsoap.h:7447 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeUom (-577)

/* eml20:VolumePerTimePerTimeUom */
enum class eml20__VolumePerTimePerTimeUom {
	bbl_x002fd2 = 0,
	bbl_x002fh2 = 1,
	dm3_x002fs2 = 2,
	ft3_x002fd2 = 3,
	ft3_x002fh2 = 4,
	ft3_x002fmin2 = 5,
	ft3_x002fs2 = 6,
	gal_x005bUK_x005d_x002fh2 = 7,
	gal_x005bUK_x005d_x002fmin2 = 8,
	gal_x005bUS_x005d_x002fh2 = 9,
	gal_x005bUS_x005d_x002fmin2 = 10,
	L_x002fs2 = 11,
	m3_x002fd2 = 12,
	m3_x002fs2 = 13
};
#endif

/* resqml2_0_1ForGsoap.h:7523 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityUom (-578)

/* eml20:MolarHeatCapacityUom */
enum class eml20__MolarHeatCapacityUom {
	Btu_x005bIT_x005d_x002f_x0028lbmol_x002edeltaF_x0029 = 0,
	cal_x005bth_x005d_x002f_x0028mol_x002edeltaC_x0029 = 1,
	J_x002f_x0028mol_x002edeltaK_x0029 = 2,
	kJ_x002f_x0028kmol_x002edeltaK_x0029 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:7549 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateUom (-579)

/* eml20:VolumeFlowRatePerVolumeFlowRateUom */
enum class eml20__VolumeFlowRatePerVolumeFlowRateUom {
	_x0025 = 0,
	_x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 1,
	_x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 2,
	_x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 3,
	_1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 4,
	Euc = 5
};
#endif

/* resqml2_0_1ForGsoap.h:7585 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalUom (-580)

/* eml20:FrequencyIntervalUom */
enum class eml20__FrequencyIntervalUom {
	O = 'O'
};
#endif

/* resqml2_0_1ForGsoap.h:7596 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalUom (-581)

/* eml20:TemperatureIntervalUom */
enum class eml20__TemperatureIntervalUom {
	deltaC = 0,
	deltaF = 1,
	deltaK = 2,
	deltaR = 3
};
#endif

/* resqml2_0_1ForGsoap.h:7622 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityUom (-582)

/* eml20:RadiantIntensityUom */
enum class eml20__RadiantIntensityUom {
	W_x002fsr = 0
};
#endif

/* resqml2_0_1ForGsoap.h:7633 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthUom (-583)

/* eml20:PermeabilityLengthUom */
enum class eml20__PermeabilityLengthUom {
	D_x002eft = 0,
	D_x002em = 1,
	mD_x002eft = 2,
	mD_x002em = 3,
	TD_x005bAPI_x005d_x002em = 4
};
#endif

/* resqml2_0_1ForGsoap.h:7664 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedUom (-584)

/* eml20:DataTransferSpeedUom */
enum class eml20__DataTransferSpeedUom {
	bit_x002fs = 0,
	byte_x002fs = 1
};
#endif

/* resqml2_0_1ForGsoap.h:7680 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceUom (-585)

/* eml20:InductanceUom */
enum class eml20__InductanceUom {
	H = 'H',
	cH = 'I',
	dH = 'J',
	EH = 'K',
	fH = 'L',
	GH = 'M',
	kH = 'N',
	MH = 'O',
	mH = 'P',
	nH = 'Q',
	TH = 'R',
	uH = 'S'
};
#endif

/* resqml2_0_1ForGsoap.h:7746 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityUom (-586)

/* eml20:KinematicViscosityUom */
enum class eml20__KinematicViscosityUom {
	cm2_x002fs = 0,
	cSt = 1,
	ft2_x002fh = 2,
	ft2_x002fs = 3,
	in2_x002fs = 4,
	m2_x002fh = 5,
	m2_x002fs = 6,
	mm2_x002fs = 7,
	Pa_x002es_x002em3_x002fkg = 8,
	St = 9
};
#endif

/* resqml2_0_1ForGsoap.h:7802 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthUom (-587)

/* eml20:VolumePerTimePerPressureLengthUom */
enum class eml20__VolumePerTimePerPressureLengthUom {
	bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 0,
	ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 1,
	m2_x002f_x0028kPa_x002ed_x0029 = 2,
	m2_x002f_x0028Pa_x002es_x0029 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:7828 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceUom (-588)

/* eml20:ReciprocalForceUom */
enum class eml20__ReciprocalForceUom {
	_1_x002flbf = 0,
	_1_x002fN = 1
};
#endif

/* resqml2_0_1ForGsoap.h:7844 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaUom (-589)

/* eml20:ReciprocalAreaUom */
enum class eml20__ReciprocalAreaUom {
	_1_x002fft2 = 0,
	_1_x002fkm2 = 1,
	_1_x002fm2 = 2,
	_1_x002fmi2 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:7870 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeUom (-590)

/* eml20:PressurePerTimeUom */
enum class eml20__PressurePerTimeUom {
	atm_x002fh = 0,
	bar_x002fh = 1,
	kPa_x002fh = 2,
	kPa_x002fmin = 3,
	MPa_x002fh = 4,
	Pa_x002fh = 5,
	Pa_x002fs = 6,
	psi_x002fh = 7,
	psi_x002fmin = 8
};
#endif

/* resqml2_0_1ForGsoap.h:7921 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeUom (-591)

/* eml20:ElectricChargeUom */
enum class eml20__ElectricChargeUom {
	C = 'C',
	A_x002eh = 'D',
	A_x002es = 'E',
	cC = 'F',
	dC = 'G',
	EC = 'H',
	fC = 'I',
	GC = 'J',
	kC = 'K',
	MC = 'L',
	mC = 'M',
	nC = 'N',
	pC = 'O',
	TC = 'P',
	uC = 'Q'
};
#endif

/* resqml2_0_1ForGsoap.h:8002 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyUom (-592)

/* eml20:LuminousEfficacyUom */
enum class eml20__LuminousEfficacyUom {
	lm_x002fW = 0
};
#endif

/* resqml2_0_1ForGsoap.h:8013 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerUom (-593)

/* eml20:PowerUom */
enum class eml20__PowerUom {
	W = 'W',
	cW = 'X',
	dW = 'Y',
	EW = 'Z',
	fW = 91,
	GW = 92,
	hp = 93,
	hp_x005belec_x005d = 94,
	hp_x005bhyd_x005d = 95,
	hp_x005bmetric_x005d = 96,
	kW = 'a',
	MW = 'b',
	mW = 'c',
	nW = 'd',
	pW = 'e',
	tonRefrig = 'f',
	TW = 'g',
	uW = 'h'
};
#endif

/* resqml2_0_1ForGsoap.h:8109 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeUom (-594)

/* eml20:PressurePerVolumeUom */
enum class eml20__PressurePerVolumeUom {
	Pa_x002fm3 = 0,
	psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1
};
#endif

/* resqml2_0_1ForGsoap.h:8125 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityUom (-595)

/* eml20:ActivityOfRadioactivityUom */
enum class eml20__ActivityOfRadioactivityUom {
	Bq = 0,
	Ci = 1,
	GBq = 2,
	MBq = 3,
	mCi = 4,
	nCi = 5,
	pCi = 6,
	TBq = 7,
	uCi = 8
};
#endif

/* resqml2_0_1ForGsoap.h:8176 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceUom (-596)

/* eml20:ElectricPotentialDifferenceUom */
enum class eml20__ElectricPotentialDifferenceUom {
	V = 'V',
	cV = 'W',
	dV = 'X',
	fV = 'Y',
	GV = 'Z',
	kV = 91,
	mV = 92,
	MV = 93,
	nV = 94,
	pV = 95,
	TV = 96,
	uV = 'a'
};
#endif

/* resqml2_0_1ForGsoap.h:8242 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureUom (-597)

/* eml20:LengthPerPressureUom */
enum class eml20__LengthPerPressureUom {
	ft_x002fpsi = 0,
	m_x002fkPa = 1,
	m_x002fPa = 2
};
#endif

/* resqml2_0_1ForGsoap.h:8263 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialUom (-598)

/* eml20:MagneticVectorPotentialUom */
enum class eml20__MagneticVectorPotentialUom {
	Wb_x002fm = 0,
	Wb_x002fmm = 1
};
#endif

/* resqml2_0_1ForGsoap.h:8279 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthUom (-599)

/* eml20:MagneticFieldStrengthUom */
enum class eml20__MagneticFieldStrengthUom {
	A_x002fm = 0,
	A_x002fmm = 1,
	Oe = 2
};
#endif

/* resqml2_0_1ForGsoap.h:8300 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeUom (-600)

/* eml20:VolumePerTimeUom */
enum class eml20__VolumePerTimeUom {
	_1_x002f30_x0020cm3_x002fmin = 0,
	_1000_x0020bbl_x002fd = 1,
	_1000_x0020ft3_x002fd = 2,
	_1000_x0020m3_x002fd = 3,
	_1000_x0020m3_x002fh = 4,
	_1E6_x0020bbl_x002fd = 5,
	_1E6_x0020ft3_x002fd = 6,
	_1E6_x0020m3_x002fd = 7,
	bbl_x002fd = 8,
	bbl_x002fh = 9,
	bbl_x002fmin = 10,
	cm3_x002fh = 11,
	cm3_x002fmin = 12,
	cm3_x002fs = 13,
	dm3_x002fs = 14,
	ft3_x002fd = 15,
	ft3_x002fh = 16,
	ft3_x002fmin = 17,
	ft3_x002fs = 18,
	gal_x005bUK_x005d_x002fd = 19,
	gal_x005bUK_x005d_x002fh = 20,
	gal_x005bUK_x005d_x002fmin = 21,
	gal_x005bUS_x005d_x002fd = 22,
	gal_x005bUS_x005d_x002fh = 23,
	gal_x005bUS_x005d_x002fmin = 24,
	L_x002fh = 25,
	L_x002fmin = 26,
	L_x002fs = 27,
	m3_x002fd = 28,
	m3_x002fh = 29,
	m3_x002fmin = 30,
	m3_x002fs = 31
};
#endif

/* resqml2_0_1ForGsoap.h:8466 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthUom (-601)

/* eml20:LengthUom */
enum class eml20__LengthUom {
	m = 'm',
	_0_x002e1_x0020ft = 'n',
	_0_x002e1_x0020ft_x005bUS_x005d = 'o',
	_0_x002e1_x0020in = 'p',
	_0_x002e1_x0020yd = 'q',
	_1_x002f16_x0020in = 'r',
	_1_x002f2_x0020ft = 's',
	_1_x002f32_x0020in = 't',
	_1_x002f64_x0020in = 'u',
	_10_x0020ft = 'v',
	_10_x0020in = 'w',
	_10_x0020km = 'x',
	_100_x0020ft = 'y',
	_100_x0020km = 'z',
	_1000_x0020ft = 123,
	_30_x0020ft = 124,
	_30_x0020m = 125,
	angstrom = 126,
	chain = 127,
	chain_x005bBnA_x005d = 128,
	chain_x005bBnB_x005d = 129,
	chain_x005bCla_x005d = 130,
	chain_x005bInd37_x005d = 131,
	chain_x005bSe_x005d = 132,
	chain_x005bSeT_x005d = 133,
	chain_x005bUS_x005d = 134,
	cm = 135,
	dam = 136,
	dm = 137,
	Em = 138,
	fathom = 139,
	fm = 140,
	ft = 141,
	ft_x005bBnA_x005d = 142,
	ft_x005bBnB_x005d = 143,
	ft_x005bBr36_x005d = 144,
	ft_x005bBr65_x005d = 145,
	ft_x005bCla_x005d = 146,
	ft_x005bGC_x005d = 147,
	ft_x005bInd_x005d = 148,
	ft_x005bInd37_x005d = 149,
	ft_x005bInd62_x005d = 150,
	ft_x005bInd75_x005d = 151,
	ft_x005bSe_x005d = 152,
	ft_x005bSeT_x005d = 153,
	ft_x005bUS_x005d = 154,
	fur_x005bUS_x005d = 155,
	Gm = 156,
	hm = 157,
	in = 158,
	in_x005bUS_x005d = 159,
	km = 160,
	link = 161,
	link_x005bBnA_x005d = 162,
	link_x005bBnB_x005d = 163,
	link_x005bCla_x005d = 164,
	link_x005bSe_x005d = 165,
	link_x005bSeT_x005d = 166,
	link_x005bUS_x005d = 167,
	m_x005bGer_x005d = 168,
	mi = 169,
	mi_x005bnaut_x005d = 170,
	mi_x005bnautUK_x005d = 171,
	mi_x005bUS_x005d = 172,
	mil = 173,
	Mm = 174,
	mm = 175,
	nm = 176,
	pm = 177,
	rod_x005bUS_x005d = 178,
	Tm = 179,
	um = 180,
	yd = 181,
	yd_x005bBnA_x005d = 182,
	yd_x005bBnB_x005d = 183,
	yd_x005bCla_x005d = 184,
	yd_x005bInd_x005d = 185,
	yd_x005bInd37_x005d = 186,
	yd_x005bInd62_x005d = 187,
	yd_x005bInd75_x005d = 188,
	yd_x005bSe_x005d = 189,
	yd_x005bSeT_x005d = 190,
	yd_x005bUS_x005d = 191
};
#endif

/* resqml2_0_1ForGsoap.h:8887 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassUom (-602)

/* eml20:AreaPerMassUom */
enum class eml20__AreaPerMassUom {
	cm2_x002fg = 0,
	ft2_x002flbm = 1,
	m2_x002fg = 2,
	m2_x002fkg = 3
};
#endif

/* resqml2_0_1ForGsoap.h:8913 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceUom (-603)

/* eml20:ThermalResistanceUom */
enum class eml20__ThermalResistanceUom {
	deltaK_x002fW = 0
};
#endif

/* resqml2_0_1ForGsoap.h:8924 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceUom (-604)

/* eml20:ForcePerForceUom */
enum class eml20__ForcePerForceUom {
	_x0025 = 0,
	Euc = 1,
	kgf_x002fkgf = 2,
	lbf_x002flbf = 3,
	N_x002fN = 4
};
#endif

/* resqml2_0_1ForGsoap.h:8955 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassUom (-605)

/* eml20:MassUom */
enum class eml20__MassUom {
	g = 'g',
	t = 't',
	ag = 'u',
	cg = 'v',
	ct = 'w',
	cwt_x005bUK_x005d = 'x',
	cwt_x005bUS_x005d = 'y',
	Eg = 'z',
	fg = 123,
	Gg = 124,
	grain = 125,
	hg = 126,
	kg = 127,
	klbm = 128,
	lbm = 129,
	mg = 130,
	Mg = 131,
	ng = 132,
	ozm = 133,
	ozm_x005btroy_x005d = 134,
	pg = 135,
	sack_x005b94lbm_x005d = 136,
	Tg = 137,
	ton_x005bUK_x005d = 138,
	ton_x005bUS_x005d = 139,
	ug = 140
};
#endif

/* resqml2_0_1ForGsoap.h:9091 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityUom (-606)

/* eml20:SpecificHeatCapacityUom */
enum class eml20__SpecificHeatCapacityUom {
	Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaF_x0029 = 0,
	Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaR_x0029 = 1,
	cal_x005bth_x005d_x002f_x0028g_x002edeltaK_x0029 = 2,
	J_x002f_x0028g_x002edeltaK_x0029 = 3,
	J_x002f_x0028kg_x002edeltaK_x0029 = 4,
	kcal_x005bth_x005d_x002f_x0028kg_x002edeltaC_x0029 = 5,
	kJ_x002f_x0028kg_x002edeltaK_x0029 = 6,
	kW_x002eh_x002f_x0028kg_x002edeltaC_x0029 = 7
};
#endif

/* resqml2_0_1ForGsoap.h:9137 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassUom (-607)

/* eml20:LengthPerMassUom */
enum class eml20__LengthPerMassUom {
	ft_x002flbm = 0,
	m_x002fkg = 1
};
#endif

/* resqml2_0_1ForGsoap.h:9153 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaUom (-608)

/* eml20:AmountOfSubstancePerTimePerAreaUom */
enum class eml20__AmountOfSubstancePerTimePerAreaUom {
	lbmol_x002f_x0028h_x002eft2_x0029 = 0,
	lbmol_x002f_x0028s_x002eft2_x0029 = 1,
	mol_x002f_x0028s_x002em2_x0029 = 2
};
#endif

/* resqml2_0_1ForGsoap.h:9174 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureUom (-609)

/* eml20:ThermodynamicTemperatureUom */
enum class eml20__ThermodynamicTemperatureUom {
	K = 'K',
	degC = 'L',
	degF = 'M',
	degR = 'N'
};
#endif

/* resqml2_0_1ForGsoap.h:9200 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionUom (-610)

/* eml20:LinearThermalExpansionUom */
enum class eml20__LinearThermalExpansionUom {
	_1_x002fdeltaK = 0,
	in_x002f_x0028in_x002edeltaF_x0029 = 1,
	m_x002f_x0028m_x002edeltaK_x0029 = 2,
	mm_x002f_x0028mm_x002edeltaK_x0029 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:9226 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthUom (-611)

/* eml20:MassPerLengthUom */
enum class eml20__MassPerLengthUom {
	kg_x002em_x002fcm2 = 0,
	kg_x002fm = 1,
	klbm_x002fin = 2,
	lbm_x002fft = 3,
	Mg_x002fin = 4
};
#endif

/* resqml2_0_1ForGsoap.h:9257 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityUom (-612)

/* eml20:ElectricalResistivityUom */
enum class eml20__ElectricalResistivityUom {
	kohm_x002em = 0,
	nohm_x002emil2_x002fft = 1,
	nohm_x002emm2_x002fm = 2,
	ohm_x002ecm = 3,
	ohm_x002em = 4,
	ohm_x002em2_x002fm = 5
};
#endif

/* resqml2_0_1ForGsoap.h:9293 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassUom (-613)

/* eml20:MassPerMassUom */
enum class eml20__MassPerMassUom {
	_x0025 = 0,
	_x0025_x005bmass_x005d = 1,
	Euc = 2,
	g_x002fkg = 3,
	g_x002ft = 4,
	kg_x002fkg = 5,
	kg_x002fsack_x005b94lbm_x005d = 6,
	kg_x002ft = 7,
	mg_x002fg = 8,
	mg_x002fkg = 9,
	ng_x002fg = 10,
	ng_x002fmg = 11,
	ppk = 12,
	ppm = 13,
	ppm_x005bmass_x005d = 14,
	ug_x002fg = 15,
	ug_x002fmg = 16
};
#endif

/* resqml2_0_1ForGsoap.h:9384 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaUom (-614)

/* eml20:PressureSquaredPerForceTimePerAreaUom */
enum class eml20__PressureSquaredPerForceTimePerAreaUom {
	_0_x002e001_x0020kPa2_x002fcP = 0,
	bar2_x002fcP = 1,
	kPa2_x002fcP = 2,
	Pa2_x002f_x0028Pa_x002es_x0029 = 3,
	psi2_x002fcP = 4
};
#endif

/* resqml2_0_1ForGsoap.h:9415 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxUom (-615)

/* eml20:LuminousFluxUom */
enum class eml20__LuminousFluxUom {
	lm = 0
};
#endif

/* resqml2_0_1ForGsoap.h:9426 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureUom (-616)

/* eml20:VolumePerTimePerPressureUom */
enum class eml20__VolumePerTimePerPressureUom {
	_1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 0,
	bbl_x002f_x0028kPa_x002ed_x0029 = 1,
	bbl_x002f_x0028psi_x002ed_x0029 = 2,
	L_x002f_x0028bar_x002emin_x0029 = 3,
	m3_x002f_x0028bar_x002ed_x0029 = 4,
	m3_x002f_x0028bar_x002eh_x0029 = 5,
	m3_x002f_x0028bar_x002emin_x0029 = 6,
	m3_x002f_x0028kPa_x002ed_x0029 = 7,
	m3_x002f_x0028kPa_x002eh_x0029 = 8,
	m3_x002f_x0028Pa_x002es_x0029 = 9,
	m3_x002f_x0028psi_x002ed_x0029 = 10
};
#endif

/* resqml2_0_1ForGsoap.h:9487 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeUom (-617)

/* eml20:AmountOfSubstancePerVolumeUom */
enum class eml20__AmountOfSubstancePerVolumeUom {
	kmol_x002fm3 = 0,
	lbmol_x002fft3 = 1,
	lbmol_x002fgal_x005bUK_x005d = 2,
	lbmol_x002fgal_x005bUS_x005d = 3,
	mol_x002fm3 = 4
};
#endif

/* resqml2_0_1ForGsoap.h:9518 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassUom (-618)

/* eml20:EnergyPerMassUom */
enum class eml20__EnergyPerMassUom {
	Btu_x005bIT_x005d_x002flbm = 0,
	cal_x005bth_x005d_x002fg = 1,
	cal_x005bth_x005d_x002fkg = 2,
	cal_x005bth_x005d_x002flbm = 3,
	erg_x002fg = 4,
	erg_x002fkg = 5,
	hp_x002eh_x002flbm = 6,
	J_x002fg = 7,
	J_x002fkg = 8,
	kcal_x005bth_x005d_x002fg = 9,
	kcal_x005bth_x005d_x002fkg = 10,
	kJ_x002fkg = 11,
	kW_x002eh_x002fkg = 12,
	lbf_x002eft_x002flbm = 13,
	MJ_x002fkg = 14,
	MW_x002eh_x002fkg = 15
};
#endif

/* resqml2_0_1ForGsoap.h:9604 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityUom (-619)

/* eml20:PermittivityUom */
enum class eml20__PermittivityUom {
	F_x002fm = 0,
	uF_x002fm = 1
};
#endif

/* resqml2_0_1ForGsoap.h:9620 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentUom (-620)

/* eml20:ElectromagneticMomentUom */
enum class eml20__ElectromagneticMomentUom {
	A_x002em2 = 0
};
#endif

/* resqml2_0_1ForGsoap.h:9631 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceUom (-621)

/* eml20:ThermalInsulanceUom */
enum class eml20__ThermalInsulanceUom {
	deltaC_x002em2_x002eh_x002fkcal_x005bth_x005d = 0,
	deltaF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 1,
	deltaK_x002em2_x002fkW = 2,
	deltaK_x002em2_x002fW = 3
};
#endif

/* resqml2_0_1ForGsoap.h:9657 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaUom (-622)

/* eml20:PowerPerAreaUom */
enum class eml20__PowerPerAreaUom {
	Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 0,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 1,
	cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 2,
	hp_x002fin2 = 3,
	hp_x005bhyd_x005d_x002fin2 = 4,
	kW_x002fcm2 = 5,
	kW_x002fm2 = 6,
	mW_x002fm2 = 7,
	ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 8,
	W_x002fcm2 = 9,
	W_x002fm2 = 10,
	W_x002fmm2 = 11
};
#endif

/* resqml2_0_1ForGsoap.h:9723 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaUom (-623)

/* eml20:MassPerAreaUom */
enum class eml20__MassPerAreaUom {
	_0_x002e01_x0020lbm_x002fft2 = 0,
	kg_x002fm2 = 1,
	lbm_x002fft2 = 2,
	Mg_x002fm2 = 3,
	ton_x005bUS_x005d_x002fft2 = 4
};
#endif

/* resqml2_0_1ForGsoap.h:9754 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceUom (-624)

/* eml20:IlluminanceUom */
enum class eml20__IlluminanceUom {
	footcandle = 0,
	klx = 1,
	lm_x002fm2 = 2,
	lx = 3
};
#endif

/* resqml2_0_1ForGsoap.h:9780 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeUom (-625)

/* eml20:AreaPerVolumeUom */
enum class eml20__AreaPerVolumeUom {
	_1_x002fm = 0,
	b_x002fcm3 = 1,
	cu = 2,
	ft2_x002fin3 = 3,
	m2_x002fcm3 = 4,
	m2_x002fm3 = 5
};
#endif

/* resqml2_0_1ForGsoap.h:9816 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeUom (-626)

/* eml20:TemperatureIntervalPerTimeUom */
enum class eml20__TemperatureIntervalPerTimeUom {
	deltaC_x002fh = 0,
	deltaC_x002fmin = 1,
	deltaC_x002fs = 2,
	deltaF_x002fh = 3,
	deltaF_x002fmin = 4,
	deltaF_x002fs = 5,
	deltaK_x002fs = 6
};
#endif

/* resqml2_0_1ForGsoap.h:9857 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceUom (-627)

/* eml20:AmountOfSubstancePerAmountOfSubstanceUom */
enum class eml20__AmountOfSubstancePerAmountOfSubstanceUom {
	_x0025 = 0,
	_x0025_x005bmolar_x005d = 1,
	Euc = 2,
	mol_x002fmol = 3,
	nEuc = 4,
	ppk = 5,
	ppm = 6
};
#endif

/* resqml2_0_1ForGsoap.h:9898 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceUom (-628)

/* eml20:RadianceUom */
enum class eml20__RadianceUom {
	W_x002f_x0028m2_x002esr_x0029 = 0
};
#endif

/* resqml2_0_1ForGsoap.h:9909 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateUom (-629)

/* eml20:HeatFlowRateUom */
enum class eml20__HeatFlowRateUom {
	W = 'W',
	_1E6_x0020Btu_x005bIT_x005d_x002fh = 'X',
	Btu_x005bIT_x005d_x002fh = 'Y',
	Btu_x005bIT_x005d_x002fmin = 'Z',
	Btu_x005bIT_x005d_x002fs = 91,
	cal_x005bth_x005d_x002fh = 92,
	EJ_x002fa = 93,
	erg_x002fa = 94,
	GW = 95,
	J_x002fs = 96,
	kcal_x005bth_x005d_x002fh = 'a',
	kW = 'b',
	lbf_x002eft_x002fmin = 'c',
	lbf_x002eft_x002fs = 'd',
	MJ_x002fa = 'e',
	MW = 'f',
	mW = 'g',
	nW = 'h',
	quad_x002fa = 'i',
	TJ_x002fa = 'j',
	TW = 'k',
	ucal_x005bth_x005d_x002fs = 'l',
	uW = 'm'
};
#endif

/* resqml2_0_1ForGsoap.h:10030 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentUom (-630)

/* eml20:DoseEquivalentUom */
enum class eml20__DoseEquivalentUom {
	mrem = 0,
	mSv = 1,
	rem = 2,
	Sv = 3
};
#endif

/* resqml2_0_1ForGsoap.h:10056 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerUom (-631)

/* eml20:PowerPerPowerUom */
enum class eml20__PowerPerPowerUom {
	_x0025 = 0,
	Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 1,
	Euc = 2,
	W_x002fkW = 3,
	W_x002fW = 4
};
#endif

/* resqml2_0_1ForGsoap.h:10087 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassUom (-632)

/* eml20:ElectricChargePerMassUom */
enum class eml20__ElectricChargePerMassUom {
	A_x002es_x002fkg = 0,
	C_x002fg = 1,
	C_x002fkg = 2
};
#endif

/* resqml2_0_1ForGsoap.h:10108 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthUom (-633)

/* eml20:MassPerVolumePerLengthUom */
enum class eml20__MassPerVolumePerLengthUom {
	g_x002fcm4 = 0,
	kg_x002fdm4 = 1,
	kg_x002fm4 = 2,
	lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 3,
	lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 4,
	lbm_x002fft4 = 5,
	Pa_x002es2_x002fm3 = 6
};
#endif

/* resqml2_0_1ForGsoap.h:10149 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthUom (-634)

/* eml20:MassLengthUom */
enum class eml20__MassLengthUom {
	kg_x002em = 0,
	lbm_x002eft = 1
};
#endif

/* resqml2_0_1ForGsoap.h:10165 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeUom (-635)

/* eml20:ForcePerVolumeUom */
enum class eml20__ForcePerVolumeUom {
	_0_x002e001_x0020psi_x002fft = 0,
	_0_x002e01_x0020psi_x002fft = 1,
	atm_x002fft = 2,
	atm_x002fhm = 3,
	atm_x002fm = 4,
	bar_x002fkm = 5,
	bar_x002fm = 6,
	GPa_x002fcm = 7,
	kPa_x002fhm = 8,
	kPa_x002fm = 9,
	lbf_x002fft3 = 10,
	lbf_x002fgal_x005bUS_x005d = 11,
	MPa_x002fm = 12,
	N_x002fm3 = 13,
	Pa_x002fm = 14,
	psi_x002fft = 15,
	psi_x002fm = 16
};
#endif

/* resqml2_0_1ForGsoap.h:10256 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeUom (-636)

/* eml20:ElectricChargePerVolumeUom */
enum class eml20__ElectricChargePerVolumeUom {
	A_x002es_x002fm3 = 0,
	C_x002fcm3 = 1,
	C_x002fm3 = 2,
	C_x002fmm3 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:10282 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityUom (-637)

/* eml20:APIGravityUom */
enum class eml20__APIGravityUom {
	dAPI = 0
};
#endif

/* resqml2_0_1ForGsoap.h:10293 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceUom (-638)

/* eml20:ReluctanceUom */
enum class eml20__ReluctanceUom {
	_1_x002fH = 0
};
#endif

/* resqml2_0_1ForGsoap.h:10304 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureUom (-639)

/* eml20:LengthPerTemperatureUom */
enum class eml20__LengthPerTemperatureUom {
	ft_x002fdeltaF = 0,
	m_x002fdeltaK = 1
};
#endif

/* resqml2_0_1ForGsoap.h:10320 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthUom (-640)

/* eml20:VolumePerTimePerLengthUom */
enum class eml20__VolumePerTimePerLengthUom {
	_1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 0,
	_1000_x0020m3_x002f_x0028d_x002em_x0029 = 1,
	_1000_x0020m3_x002f_x0028h_x002em_x0029 = 2,
	bbl_x002f_x0028d_x002eft_x0029 = 3,
	ft3_x002f_x0028d_x002eft_x0029 = 4,
	gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 5,
	gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 6,
	gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 7,
	gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 8,
	gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 9,
	gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 10,
	m3_x002f_x0028d_x002em_x0029 = 11,
	m3_x002f_x0028h_x002em_x0029 = 12,
	m3_x002f_x0028s_x002eft_x0029 = 13,
	m3_x002f_x0028s_x002em_x0029 = 14
};
#endif

/* resqml2_0_1ForGsoap.h:10401 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationUom (-641)

/* eml20:LinearAccelerationUom */
enum class eml20__LinearAccelerationUom {
	cm_x002fs2 = 0,
	ft_x002fs2 = 1,
	Gal = 2,
	gn = 3,
	in_x002fs2 = 4,
	m_x002fs2 = 5,
	mGal = 6,
	mgn = 7
};
#endif

/* resqml2_0_1ForGsoap.h:10447 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessUom (-642)

/* eml20:DimensionlessUom */
enum class eml20__DimensionlessUom {
	_x0025 = 0,
	cEuc = 1,
	dEuc = 2,
	EEuc = 3,
	Euc = 4,
	fEuc = 5,
	GEuc = 6,
	kEuc = 7,
	MEuc = 8,
	mEuc = 9,
	nEuc = 10,
	pEuc = 11,
	ppk = 12,
	ppm = 13,
	TEuc = 14,
	uEuc = 15
};
#endif

/* resqml2_0_1ForGsoap.h:10533 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyUom (-643)

/* eml20:EnergyUom */
enum class eml20__EnergyUom {
	J = 'J',
	_1E6_x0020Btu_x005bIT_x005d = 'K',
	aJ = 'L',
	Btu_x005bIT_x005d = 'M',
	Btu_x005bth_x005d = 'N',
	Btu_x005bUK_x005d = 'O',
	cal_x005bIT_x005d = 'P',
	cal_x005bth_x005d = 'Q',
	ccal_x005bth_x005d = 'R',
	ceV = 'S',
	cJ = 'T',
	dcal_x005bth_x005d = 'U',
	deV = 'V',
	dJ = 'W',
	Ecal_x005bth_x005d = 'X',
	EeV = 'Y',
	EJ = 'Z',
	erg = 91,
	eV = 92,
	fcal_x005bth_x005d = 93,
	feV = 94,
	fJ = 95,
	Gcal_x005bth_x005d = 96,
	GeV = 'a',
	GJ = 'b',
	GW_x002eh = 'c',
	hp_x002eh = 'd',
	hp_x005bmetric_x005d_x002eh = 'e',
	kcal_x005bth_x005d = 'f',
	keV = 'g',
	kJ = 'h',
	kW_x002eh = 'i',
	Mcal_x005bth_x005d = 'j',
	mcal_x005bth_x005d = 'k',
	meV = 'l',
	MeV = 'm',
	MJ = 'n',
	mJ = 'o',
	MW_x002eh = 'p',
	ncal_x005bth_x005d = 'q',
	neV = 'r',
	nJ = 's',
	pcal_x005bth_x005d = 't',
	peV = 'u',
	pJ = 'v',
	quad = 'w',
	Tcal_x005bth_x005d = 'x',
	TeV = 'y',
	therm_x005bEC_x005d = 'z',
	therm_x005bUK_x005d = 123,
	therm_x005bUS_x005d = 124,
	TJ = 125,
	TW_x002eh = 126,
	ucal_x005bth_x005d = 127,
	ueV = 128,
	uJ = 129
};
#endif

/* resqml2_0_1ForGsoap.h:10819 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthUom (-644)

/* eml20:AnglePerLengthUom */
enum class eml20__AnglePerLengthUom {
	_0_x002e01_x0020dega_x002fft = 0,
	_1_x002f30_x0020dega_x002fft = 1,
	_1_x002f30_x0020dega_x002fm = 2,
	dega_x002fft = 3,
	dega_x002fm = 4,
	rad_x002fft = 5,
	rad_x002fm = 6,
	rev_x002fft = 7,
	rev_x002fm = 8
};
#endif

/* resqml2_0_1ForGsoap.h:10874 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCoordinateUom (-645)

/* eml20:VerticalCoordinateUom */
enum class eml20__VerticalCoordinateUom {
	m = 'm',
	ft = 'n',
	ftUS = 'o',
	ftBr_x002865_x0029 = 'p'
};
#endif

/* resqml2_0_1ForGsoap.h:10900 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthUom (-646)

/* eml20:VolumePerLengthUom */
enum class eml20__VolumePerLengthUom {
	_0_x002e01_x0020dm3_x002fkm = 0,
	_0_x002e01_x0020L_x002fkm = 1,
	bbl_x002fft = 2,
	bbl_x002fin = 3,
	bbl_x002fmi = 4,
	dm3_x002fm = 5,
	ft3_x002fft = 6,
	gal_x005bUK_x005d_x002fmi = 7,
	gal_x005bUS_x005d_x002fft = 8,
	gal_x005bUS_x005d_x002fmi = 9,
	in3_x002fft = 10,
	L_x002fm = 11,
	m3_x002fkm = 12,
	m3_x002fm = 13
};
#endif

/* resqml2_0_1ForGsoap.h:10976 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeUom (-647)

/* eml20:EnergyPerVolumeUom */
enum class eml20__EnergyPerVolumeUom {
	Btu_x005bIT_x005d_x002fbbl = 0,
	Btu_x005bIT_x005d_x002fft3 = 1,
	Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 2,
	Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 3,
	cal_x005bth_x005d_x002fcm3 = 4,
	cal_x005bth_x005d_x002fmL = 5,
	cal_x005bth_x005d_x002fmm3 = 6,
	erg_x002fcm3 = 7,
	erg_x002fm3 = 8,
	hp_x002eh_x002fbbl = 9,
	J_x002fdm3 = 10,
	J_x002fm3 = 11,
	kcal_x005bth_x005d_x002fcm3 = 12,
	kcal_x005bth_x005d_x002fm3 = 13,
	kJ_x002fdm3 = 14,
	kJ_x002fm3 = 15,
	kW_x002eh_x002fdm3 = 16,
	kW_x002eh_x002fm3 = 17,
	lbf_x002eft_x002fbbl = 18,
	lbf_x002eft_x002fgal_x005bUS_x005d = 19,
	MJ_x002fm3 = 20,
	MW_x002eh_x002fm3 = 21,
	tonf_x005bUS_x005d_x002emi_x002fbbl = 22
};
#endif

/* resqml2_0_1ForGsoap.h:11097 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityUom (-648)

/* eml20:MagneticPermeabilityUom */
enum class eml20__MagneticPermeabilityUom {
	H_x002fm = 0,
	uH_x002fm = 1
};
#endif

/* resqml2_0_1ForGsoap.h:11113 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassUom (-649)

/* eml20:ReciprocalMassUom */
enum class eml20__ReciprocalMassUom {
	_1_x002fg = 0,
	_1_x002fkg = 1,
	_1_x002flbm = 2
};
#endif

/* resqml2_0_1ForGsoap.h:11134 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityUom (-650)

/* eml20:DynamicViscosityUom */
enum class eml20__DynamicViscosityUom {
	P = 'P',
	cP = 'Q',
	dP = 'R',
	dyne_x002es_x002fcm2 = 'S',
	EP = 'T',
	fP = 'U',
	GP = 'V',
	kgf_x002es_x002fm2 = 'W',
	kP = 'X',
	lbf_x002es_x002fft2 = 'Y',
	lbf_x002es_x002fin2 = 'Z',
	mP = 91,
	MP = 92,
	mPa_x002es = 93,
	N_x002es_x002fm2 = 94,
	nP = 95,
	Pa_x002es = 96,
	pP = 'a',
	psi_x002es = 'b',
	TP = 'c',
	uP = 'd'
};
#endif

/* resqml2_0_1ForGsoap.h:11245 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropUom (-651)

/* eml20:PotentialDifferencePerPowerDropUom */
enum class eml20__PotentialDifferencePerPowerDropUom {
	V_x002fB = 0,
	V_x002fdB = 1
};
#endif

/* resqml2_0_1ForGsoap.h:11261 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeUom (-652)

/* eml20:AreaPerTimeUom */
enum class eml20__AreaPerTimeUom {
	cm2_x002fs = 0,
	ft2_x002fh = 1,
	ft2_x002fs = 2,
	in2_x002fs = 3,
	m2_x002fd = 4,
	m2_x002fh = 5,
	m2_x002fs = 6,
	mm2_x002fs = 7
};
#endif

/* resqml2_0_1ForGsoap.h:11307 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityUom (-653)

/* eml20:HeatCapacityUom */
enum class eml20__HeatCapacityUom {
	J_x002fdeltaK = 0
};
#endif

/* resqml2_0_1ForGsoap.h:11318 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyUom (-654)

/* eml20:MolarEnergyUom */
enum class eml20__MolarEnergyUom {
	Btu_x005bIT_x005d_x002flbmol = 0,
	J_x002fmol = 1,
	kcal_x005bth_x005d_x002fmol = 2,
	kJ_x002fkmol = 3,
	MJ_x002fkmol = 4
};
#endif

/* resqml2_0_1ForGsoap.h:11349 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceUom (-655)

/* eml20:ElectricConductanceUom */
enum class eml20__ElectricConductanceUom {
	S = 'S',
	cS = 'T',
	dS = 'U',
	ES = 'V',
	fS = 'W',
	GS = 'X',
	kS = 'Y',
	mS = 'Z',
	MS = 91,
	nS = 92,
	pS = 93,
	TS = 94,
	uS = 95
};
#endif

/* resqml2_0_1ForGsoap.h:11420 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumUom (-656)

/* eml20:MomentumUom */
enum class eml20__MomentumUom {
	kg_x002em_x002fs = 0,
	lbm_x002eft_x002fs = 1
};
#endif

/* resqml2_0_1ForGsoap.h:11436 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaUom (-657)

/* eml20:MassPerTimePerAreaUom */
enum class eml20__MassPerTimePerAreaUom {
	g_x002eft_x002f_x0028cm3_x002es_x0029 = 0,
	g_x002em_x002f_x0028cm3_x002es_x0029 = 1,
	kg_x002f_x0028m2_x002es_x0029 = 2,
	kPa_x002es_x002fm = 3,
	lbm_x002f_x0028ft2_x002eh_x0029 = 4,
	lbm_x002f_x0028ft2_x002es_x0029 = 5,
	MPa_x002es_x002fm = 6
};
#endif

/* resqml2_0_1ForGsoap.h:11477 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeUom (-658)

/* eml20:PowerPerVolumeUom */
enum class eml20__PowerPerVolumeUom {
	Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 0,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 1,
	cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 2,
	cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 3,
	hp_x002fft3 = 4,
	kW_x002fm3 = 5,
	uW_x002fm3 = 6,
	W_x002fm3 = 7
};
#endif

/* resqml2_0_1ForGsoap.h:11523 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyUom (-659)

/* eml20:FrequencyUom */
enum class eml20__FrequencyUom {
	cHz = 0,
	dHz = 1,
	EHz = 2,
	fHz = 3,
	GHz = 4,
	Hz = 5,
	kHz = 6,
	mHz = 7,
	MHz = 8,
	nHz = 9,
	pHz = 10,
	THz = 11,
	uHz = 12
};
#endif

/* resqml2_0_1ForGsoap.h:11594 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityUom (-660)

/* eml20:LuminousIntensityUom */
enum class eml20__LuminousIntensityUom {
	cd = 0,
	kcd = 1
};
#endif

/* resqml2_0_1ForGsoap.h:11610 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseUom (-661)

/* eml20:AbsorbedDoseUom */
enum class eml20__AbsorbedDoseUom {
	cGy = 0,
	crd = 1,
	dGy = 2,
	drd = 3,
	EGy = 4,
	Erd = 5,
	fGy = 6,
	frd = 7,
	GGy = 8,
	Grd = 9,
	Gy = 10,
	kGy = 11,
	krd = 12,
	mGy = 13,
	MGy = 14,
	Mrd = 15,
	mrd = 16,
	nGy = 17,
	nrd = 18,
	pGy = 19,
	prd = 20,
	rd = 21,
	TGy = 22,
	Trd = 23,
	uGy = 24,
	urd = 25
};
#endif

/* resqml2_0_1ForGsoap.h:11746 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassUom (-662)

/* eml20:TimePerMassUom */
enum class eml20__TimePerMassUom {
	s_x002fkg = 0
};
#endif

/* resqml2_0_1ForGsoap.h:11757 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientUom (-663)

/* eml20:VolumetricHeatTransferCoefficientUom */
enum class eml20__VolumetricHeatTransferCoefficientUom {
	Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edeltaF_x0029 = 0,
	Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edeltaF_x0029 = 1,
	kW_x002f_x0028m3_x002edeltaK_x0029 = 2,
	W_x002f_x0028m3_x002edeltaK_x0029 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:11783 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerUom (-664)

/* eml20:NormalizedPowerUom */
enum class eml20__NormalizedPowerUom {
	B_x002eW = 0,
	dB_x002eMW = 1,
	dB_x002emW = 2,
	dB_x002eW = 3
};
#endif

/* resqml2_0_1ForGsoap.h:11809 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureUom (-665)

/* eml20:EnergyLengthPerTimeAreaTemperatureUom */
enum class eml20__EnergyLengthPerTimeAreaTemperatureUom {
	Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	J_x002em_x002f_x0028s_x002em2_x002edeltaK_x0029 = 1,
	kJ_x002em_x002f_x0028h_x002em2_x002edeltaK_x0029 = 2,
	W_x002f_x0028m_x002edeltaK_x0029 = 3
};
#endif

/* resqml2_0_1ForGsoap.h:11835 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeUom (-666)

/* eml20:PressureTimePerVolumeUom */
enum class eml20__PressureTimePerVolumeUom {
	Pa_x002es_x002fm3 = 0,
	psi_x002ed_x002fbbl = 1
};
#endif

/* resqml2_0_1ForGsoap.h:11851 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeUom (-667)

/* eml20:VolumePerVolumeUom */
enum class eml20__VolumePerVolumeUom {
	_x0025 = 0,
	_x0025_x005bvol_x005d = 1,
	_0_x002e001_x0020bbl_x002fft3 = 2,
	_0_x002e001_x0020bbl_x002fm3 = 3,
	_0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 4,
	_0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 5,
	_0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 6,
	_0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 7,
	_0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 8,
	_0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 9,
	_0_x002e01_x0020bbl_x002fbbl = 10,
	_0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 11,
	_0_x002e1_x0020L_x002fbbl = 12,
	_0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 13,
	_1000_x0020ft3_x002fbbl = 14,
	_1000_x0020m3_x002fm3 = 15,
	_1E_6_x0020acre_x002eft_x002fbbl = 16,
	_1E_6_x0020bbl_x002fft3 = 17,
	_1E_6_x0020bbl_x002fm3 = 18,
	_1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 19,
	_1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 20,
	_1E6_x0020ft3_x002fbbl = 21,
	bbl_x002f_x0028acre_x002eft_x0029 = 22,
	bbl_x002fbbl = 23,
	bbl_x002fft3 = 24,
	bbl_x002fm3 = 25,
	cEuc = 26,
	cm3_x002fcm3 = 27,
	cm3_x002fL = 28,
	cm3_x002fm3 = 29,
	dm3_x002fm3 = 30,
	Euc = 31,
	ft3_x002fbbl = 32,
	ft3_x002fft3 = 33,
	gal_x005bUK_x005d_x002fft3 = 34,
	gal_x005bUS_x005d_x002fbbl = 35,
	gal_x005bUS_x005d_x002fft3 = 36,
	L_x002fm3 = 37,
	m3_x002f_x0028ha_x002em_x0029 = 38,
	m3_x002fbbl = 39,
	m3_x002fm3 = 40,
	mL_x002fgal_x005bUK_x005d = 41,
	mL_x002fgal_x005bUS_x005d = 42,
	mL_x002fmL = 43,
	ppk = 44,
	ppm = 45,
	ppm_x005bvol_x005d = 46
};
#endif

/* resqml2_0_1ForGsoap.h:12092 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeUom (-668)

/* eml20:AnglePerVolumeUom */
enum class eml20__AnglePerVolumeUom {
	rad_x002fft3 = 0,
	rad_x002fm3 = 1
};
#endif

/* resqml2_0_1ForGsoap.h:12108 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientUom (-669)

/* eml20:DiffusionCoefficientUom */
enum class eml20__DiffusionCoefficientUom {
	m2_x002fs = 0
};
#endif

/* resqml2_0_1ForGsoap.h:12119 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeUom (-670)

/* eml20:TimePerTimeUom */
enum class eml20__TimePerTimeUom {
	_x0025 = 0,
	Euc = 1,
	ms_x002fs = 2,
	s_x002fs = 3
};
#endif

/* resqml2_0_1ForGsoap.h:12145 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeUom (-671)

/* eml20:EnergyPerMassPerTimeUom */
enum class eml20__EnergyPerMassPerTimeUom {
	mrem_x002fh = 0,
	mSv_x002fh = 1,
	rem_x002fh = 2,
	Sv_x002fh = 3,
	Sv_x002fs = 4
};
#endif

/* resqml2_0_1ForGsoap.h:12176 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassUom (-672)

/* eml20:VolumePerMassUom */
enum class eml20__VolumePerMassUom {
	_0_x002e01_x0020L_x002fkg = 0,
	bbl_x002fton_x005bUK_x005d = 1,
	bbl_x002fton_x005bUS_x005d = 2,
	cm3_x002fg = 3,
	dm3_x002fkg = 4,
	dm3_x002ft = 5,
	ft3_x002fkg = 6,
	ft3_x002flbm = 7,
	ft3_x002fsack_x005b94lbm_x005d = 8,
	gal_x005bUK_x005d_x002flbm = 9,
	gal_x005bUS_x005d_x002flbm = 10,
	gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 11,
	gal_x005bUS_x005d_x002fton_x005bUK_x005d = 12,
	gal_x005bUS_x005d_x002fton_x005bUS_x005d = 13,
	L_x002fkg = 14,
	L_x002ft = 15,
	L_x002fton_x005bUK_x005d = 16,
	m3_x002fg = 17,
	m3_x002fkg = 18,
	m3_x002ft = 19,
	m3_x002fton_x005bUK_x005d = 20,
	m3_x002fton_x005bUS_x005d = 21
};
#endif

/* resqml2_0_1ForGsoap.h:12292 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthUom (-673)

/* eml20:TemperatureIntervalPerLengthUom */
enum class eml20__TemperatureIntervalPerLengthUom {
	_0_x002e01_x0020deltaF_x002fft = 0,
	deltaC_x002fft = 1,
	deltaC_x002fhm = 2,
	deltaC_x002fkm = 3,
	deltaC_x002fm = 4,
	deltaF_x002fft = 5,
	deltaF_x002fm = 6,
	deltaK_x002fkm = 7,
	deltaK_x002fm = 8
};
#endif

/* resqml2_0_1ForGsoap.h:12343 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalUom (-674)

/* eml20:AttenuationPerFrequencyIntervalUom */
enum class eml20__AttenuationPerFrequencyIntervalUom {
	B_x002fO = 0,
	dB_x002fO = 1
};
#endif

/* resqml2_0_1ForGsoap.h:12359 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityUom (-675)

/* eml20:IsothermalCompressibilityUom */
enum class eml20__IsothermalCompressibilityUom {
	dm3_x002f_x0028kW_x002eh_x0029 = 0,
	dm3_x002fMJ = 1,
	m3_x002f_x0028kW_x002eh_x0029 = 2,
	m3_x002fJ = 3,
	mm3_x002fJ = 4,
	pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 5
};
#endif

/* resqml2_0_1ForGsoap.h:12395 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceUom (-676)

/* eml20:ElectricResistanceUom */
enum class eml20__ElectricResistanceUom {
	cohm = 0,
	dohm = 1,
	Eohm = 2,
	fohm = 3,
	Gohm = 4,
	kohm = 5,
	Mohm = 6,
	mohm = 7,
	nohm = 8,
	ohm = 9,
	pohm = 10,
	Tohm = 11,
	uohm = 12
};
#endif

/* resqml2_0_1ForGsoap.h:12466 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeUom (-677)

/* eml20:ReciprocalVolumeUom */
enum class eml20__ReciprocalVolumeUom {
	_1_x002fbbl = 0,
	_1_x002fft3 = 1,
	_1_x002fgal_x005bUK_x005d = 2,
	_1_x002fgal_x005bUS_x005d = 3,
	_1_x002fL = 4,
	_1_x002fm3 = 5
};
#endif

/* resqml2_0_1ForGsoap.h:12502 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureUom (-678)

/* eml20:PressureUom */
enum class eml20__PressureUom {
	_0_x002e01_x0020lbf_x002fft2 = 0,
	at = 1,
	atm = 2,
	bar = 3,
	cmH2O_x005b4degC_x005d = 4,
	cPa = 5,
	dPa = 6,
	dyne_x002fcm2 = 7,
	EPa = 8,
	fPa = 9,
	GPa = 10,
	hbar = 11,
	inH2O_x005b39degF_x005d = 12,
	inH2O_x005b60degF_x005d = 13,
	inHg_x005b32degF_x005d = 14,
	inHg_x005b60degF_x005d = 15,
	kgf_x002fcm2 = 16,
	kgf_x002fm2 = 17,
	kgf_x002fmm2 = 18,
	kN_x002fm2 = 19,
	kPa = 20,
	kpsi = 21,
	lbf_x002fft2 = 22,
	mbar = 23,
	mmHg_x005b0degC_x005d = 24,
	mPa = 25,
	MPa = 26,
	Mpsi = 27,
	N_x002fm2 = 28,
	N_x002fmm2 = 29,
	nPa = 30,
	Pa = 31,
	pPa = 32,
	psi = 33,
	tonf_x005bUK_x005d_x002fft2 = 34,
	tonf_x005bUS_x005d_x002fft2 = 35,
	tonf_x005bUS_x005d_x002fin2 = 36,
	torr = 37,
	TPa = 38,
	ubar = 39,
	umHg_x005b0degC_x005d = 40,
	uPa = 41,
	upsi = 42
};
#endif

/* resqml2_0_1ForGsoap.h:12723 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaUom (-679)

/* eml20:AreaPerAreaUom */
enum class eml20__AreaPerAreaUom {
	_x0025 = 0,
	_x0025_x005barea_x005d = 1,
	cEuc = 2,
	Euc = 3,
	in2_x002fft2 = 4,
	in2_x002fin2 = 5,
	m2_x002fm2 = 6,
	mm2_x002fmm2 = 7
};
#endif

/* resqml2_0_1ForGsoap.h:12769 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityUom (-680)

/* eml20:AngularVelocityUom */
enum class eml20__AngularVelocityUom {
	dega_x002fh = 0,
	dega_x002fmin = 1,
	dega_x002fs = 2,
	rad_x002fs = 3,
	rev_x002fs = 4,
	rpm = 5
};
#endif

/* resqml2_0_1ForGsoap.h:12805 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeUom (-681)

/* eml20:TimePerVolumeUom */
enum class eml20__TimePerVolumeUom {
	_0_x002e001_x0020d_x002fft3 = 0,
	d_x002fbbl = 1,
	d_x002fft3 = 2,
	d_x002fm3 = 3,
	h_x002fft3 = 4,
	h_x002fm3 = 5,
	s_x002fft3 = 6,
	s_x002fL = 7,
	s_x002fm3 = 8,
	s_x002fqt_x005bUK_x005d = 9,
	s_x002fqt_x005bUS_x005d = 10
};
#endif

/* resqml2_0_1ForGsoap.h:12866 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaUom (-682)

/* eml20:EnergyLengthPerAreaUom */
enum class eml20__EnergyLengthPerAreaUom {
	J_x002em_x002fm2 = 0,
	kcal_x005bth_x005d_x002em_x002fcm2 = 1
};
#endif

/* resqml2_0_1ForGsoap.h:12882 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthUom (-683)

/* eml20:ElectricResistancePerLengthUom */
enum class eml20__ElectricResistancePerLengthUom {
	ohm_x002fm = 0,
	uohm_x002fft = 1,
	uohm_x002fm = 2
};
#endif

/* resqml2_0_1ForGsoap.h:12903 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthUom (-684)

/* eml20:ForcePerLengthUom */
enum class eml20__ForcePerLengthUom {
	_0_x002e01_x0020lbf_x002fft = 0,
	_1_x002f30_x0020lbf_x002fm = 1,
	_1_x002f30_x0020N_x002fm = 2,
	dyne_x002fcm = 3,
	kgf_x002fcm = 4,
	kN_x002fm = 5,
	lbf_x002fft = 6,
	lbf_x002fin = 7,
	mN_x002fkm = 8,
	mN_x002fm = 9,
	N_x002fm = 10,
	pdl_x002fcm = 11,
	tonf_x005bUK_x005d_x002fft = 12,
	tonf_x005bUS_x005d_x002fft = 13
};
#endif

/* resqml2_0_1ForGsoap.h:12979 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureUom (-685)

/* eml20:ReciprocalPressureUom */
enum class eml20__ReciprocalPressureUom {
	_1_x002fbar = 0,
	_1_x002fkPa = 1,
	_1_x002fPa = 2,
	_1_x002fpPa = 3,
	_1_x002fpsi = 4,
	_1_x002fupsi = 5
};
#endif

/* resqml2_0_1ForGsoap.h:13015 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureUom (-686)

/* eml20:LightExposureUom */
enum class eml20__LightExposureUom {
	footcandle_x002es = 0,
	lx_x002es = 1
};
#endif

/* resqml2_0_1ForGsoap.h:13031 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaUom (-687)

/* eml20:EnergyPerAreaUom */
enum class eml20__EnergyPerAreaUom {
	erg_x002fcm2 = 0,
	J_x002fcm2 = 1,
	J_x002fm2 = 2,
	kgf_x002em_x002fcm2 = 3,
	lbf_x002eft_x002fin2 = 4,
	mJ_x002fcm2 = 5,
	mJ_x002fm2 = 6,
	N_x002fm = 7
};
#endif

/* resqml2_0_1ForGsoap.h:13077 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentUom (-688)

/* eml20:MagneticDipoleMomentUom */
enum class eml20__MagneticDipoleMomentUom {
	Wb_x002em = 0
};
#endif

/* resqml2_0_1ForGsoap.h:13088 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageUom (-689)

/* eml20:DigitalStorageUom */
enum class eml20__DigitalStorageUom {
	bit = 0,
	byte = 1,
	Kibyte = 2,
	Mibyte = 3
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/struct_tm.h:67 */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-9)

typedef struct tm xsd__dateTime;
#endif

/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class resqml20__PropertyKindFacet;	/* resqml2_0_1ForGsoap.h:176 */
class resqml20__StringLookup;	/* resqml2_0_1ForGsoap.h:182 */
class resqml20__PatchOfPoints;	/* resqml2_0_1ForGsoap.h:192 */
class resqml20__AbstractPropertyKind;	/* resqml2_0_1ForGsoap.h:212 */
class resqml20__PatchOfValues;	/* resqml2_0_1ForGsoap.h:214 */
class resqml20__AbstractValueArray;	/* resqml2_0_1ForGsoap.h:216 */
class resqml20__PropertyValuesPatch;	/* resqml2_0_1ForGsoap.h:230 */
class resqml20__DoubleLookup;	/* resqml2_0_1ForGsoap.h:238 */
class resqml20__Point3dOffset;	/* resqml2_0_1ForGsoap.h:242 */
class resqml20__AbstractPoint3dArray;	/* resqml2_0_1ForGsoap.h:258 */
class resqml20__AbstractGeometry;	/* resqml2_0_1ForGsoap.h:260 */
class resqml20__ThreePoint3d;	/* resqml2_0_1ForGsoap.h:264 */
class resqml20__AbstractParametricLineArray;	/* resqml2_0_1ForGsoap.h:272 */
class resqml20__ParametricLineIntersections;	/* resqml2_0_1ForGsoap.h:274 */
class resqml20__AbstractSeismicCoordinates;	/* resqml2_0_1ForGsoap.h:286 */
class resqml20__Patch;	/* resqml2_0_1ForGsoap.h:292 */
class resqml20__ElementIndices;	/* resqml2_0_1ForGsoap.h:294 */
class resqml20__RepresentationIdentity;	/* resqml2_0_1ForGsoap.h:302 */
class resqml20__ElementIdentity;	/* resqml2_0_1ForGsoap.h:306 */
class resqml20__PatchOfGeometry;	/* resqml2_0_1ForGsoap.h:310 */
class resqml20__AdditionalGridTopology;	/* resqml2_0_1ForGsoap.h:316 */
class resqml20__CellStratigraphicUnits;	/* resqml2_0_1ForGsoap.h:326 */
class resqml20__SubnodeTopology;	/* resqml2_0_1ForGsoap.h:332 */
class resqml20__SplitFaces;	/* resqml2_0_1ForGsoap.h:334 */
struct __resqml20__IjGaps_sequence;	/* resqml2_0_1ForGsoap.h:13994 */
class resqml20__IjGaps;	/* resqml2_0_1ForGsoap.h:338 */
class resqml20__GpGridColumnLayerGrid;	/* resqml2_0_1ForGsoap.h:348 */
class resqml20__ColumnLayerSplitCoordinateLines;	/* resqml2_0_1ForGsoap.h:350 */
struct __resqml20__KGaps_sequence;	/* resqml2_0_1ForGsoap.h:14126 */
class resqml20__KGaps;	/* resqml2_0_1ForGsoap.h:354 */
class resqml20__UnstructuredColumnEdges;	/* resqml2_0_1ForGsoap.h:360 */
class resqml20__AdditionalGridPoints;	/* resqml2_0_1ForGsoap.h:362 */
class resqml20__IjSplitColumnEdges;	/* resqml2_0_1ForGsoap.h:364 */
class resqml20__IntervalStratigraphicUnits;	/* resqml2_0_1ForGsoap.h:370 */
class resqml20__Regrid;	/* resqml2_0_1ForGsoap.h:372 */
class resqml20__Activation;	/* resqml2_0_1ForGsoap.h:374 */
class resqml20__ConnectionInterpretations;	/* resqml2_0_1ForGsoap.h:380 */
class resqml20__SplitEdges;	/* resqml2_0_1ForGsoap.h:384 */
class resqml20__CellFluidPhaseUnits;	/* resqml2_0_1ForGsoap.h:386 */
class resqml20__NodesPerCell;	/* resqml2_0_1ForGsoap.h:388 */
class resqml20__Edges;	/* resqml2_0_1ForGsoap.h:392 */
class resqml20__UnstructuredGridHingeNodeFaces;	/* resqml2_0_1ForGsoap.h:408 */
struct __resqml20__CellOverlap_sequence;	/* resqml2_0_1ForGsoap.h:14582 */
class resqml20__CellOverlap;	/* resqml2_0_1ForGsoap.h:410 */
class resqml20__ColumnLayerSplitColumnEdges;	/* resqml2_0_1ForGsoap.h:412 */
struct __resqml20__OverlapVolume_sequence;	/* resqml2_0_1ForGsoap.h:14666 */
class resqml20__OverlapVolume;	/* resqml2_0_1ForGsoap.h:416 */
class resqml20__Intervals;	/* resqml2_0_1ForGsoap.h:418 */
class resqml20__AbstractParentWindow;	/* resqml2_0_1ForGsoap.h:422 */
class resqml20__TimeInterval;	/* resqml2_0_1ForGsoap.h:428 */
class resqml20__StratigraphicUnitInterpretationIndex;	/* resqml2_0_1ForGsoap.h:434 */
class resqml20__GeologicUnitInterpretationIndex;	/* resqml2_0_1ForGsoap.h:444 */
class resqml20__HorizonInterpretationIndex;	/* resqml2_0_1ForGsoap.h:452 */
class resqml20__AbstractContactInterpretationPart;	/* resqml2_0_1ForGsoap.h:462 */
class resqml20__FaultThrow;	/* resqml2_0_1ForGsoap.h:466 */
class resqml20__RockFluidUnitInterpretationIndex;	/* resqml2_0_1ForGsoap.h:472 */
class resqml20__ChronostratigraphicRank;	/* resqml2_0_1ForGsoap.h:490 */
class resqml20__Point3d;	/* resqml2_0_1ForGsoap.h:508 */
class resqml20__TimeSeriesParentage;	/* resqml2_0_1ForGsoap.h:510 */
class resqml20__TimeIndex;	/* resqml2_0_1ForGsoap.h:514 */
class resqml20__Timestamp;	/* resqml2_0_1ForGsoap.h:516 */
class resqml20__ResqmlJaggedArray;	/* resqml2_0_1ForGsoap.h:520 */
class resqml20__NameValuePair;	/* resqml2_0_1ForGsoap.h:522 */
class resqml20__WellboreTrajectoryParentIntersection;	/* resqml2_0_1ForGsoap.h:532 */
class resqml20__AbstractContactRepresentationPart;	/* resqml2_0_1ForGsoap.h:558 */
class resqml20__VolumeRegion;	/* resqml2_0_1ForGsoap.h:568 */
class resqml20__VolumeShell;	/* resqml2_0_1ForGsoap.h:570 */
class resqml20__PatchBoundaries;	/* resqml2_0_1ForGsoap.h:584 */
class resqml20__OrientedMacroFace;	/* resqml2_0_1ForGsoap.h:594 */
class resqml20__ContactIdentity;	/* resqml2_0_1ForGsoap.h:596 */
class resqml20__WitsmlWellboreReference;	/* resqml2_0_1ForGsoap.h:616 */
class resqml20__ParameterTemplate;	/* resqml2_0_1ForGsoap.h:626 */
class resqml20__AbstractParameterKey;	/* resqml2_0_1ForGsoap.h:634 */
class resqml20__AbstractActivityParameter;	/* resqml2_0_1ForGsoap.h:638 */
class resqml20__StreamlineWellbores;	/* resqml2_0_1ForGsoap.h:648 */
class resqml20__IntervalGridCells;	/* resqml2_0_1ForGsoap.h:650 */
class resqml20__TimeIndices;	/* resqml2_0_1ForGsoap.h:652 */
class eml20__CustomData;	/* resqml2_0_1ForGsoap.h:664 */
class eml20__Citation;	/* resqml2_0_1ForGsoap.h:666 */
class eml20__AbstractObject;	/* resqml2_0_1ForGsoap.h:668 */
class eml20__ObjectAlias;	/* resqml2_0_1ForGsoap.h:670 */
class eml20__AbstractVerticalCrs;	/* resqml2_0_1ForGsoap.h:680 */
class eml20__AbstractProjectedCrs;	/* resqml2_0_1ForGsoap.h:682 */
class eml20__Hdf5Dataset;	/* resqml2_0_1ForGsoap.h:688 */
class eml20__DataObjectReference;	/* resqml2_0_1ForGsoap.h:692 */
class ptm__standardEnergisticsPropertyTypeSet;	/* resqml2_0_1ForGsoap.h:1044 */
class ptm__standardEnergisticsPropertyType;	/* resqml2_0_1ForGsoap.h:1046 */
class ptm__equivalentPropertyType;	/* resqml2_0_1ForGsoap.h:1048 */
class resqml20__AbstractDoubleArray;	/* resqml2_0_1ForGsoap.h:200 */
class resqml20__StringHdf5Array;	/* resqml2_0_1ForGsoap.h:208 */
class resqml20__AbstractIntegerArray;	/* resqml2_0_1ForGsoap.h:226 */
class resqml20__AbstractBooleanArray;	/* resqml2_0_1ForGsoap.h:228 */
class resqml20__StandardPropertyKind;	/* resqml2_0_1ForGsoap.h:232 */
class resqml20__LocalPropertyKind;	/* resqml2_0_1ForGsoap.h:236 */
class resqml20__Point2dHdf5Array;	/* resqml2_0_1ForGsoap.h:244 */
class resqml20__ParametricLineFromRepresentationLatticeArray;	/* resqml2_0_1ForGsoap.h:248 */
class resqml20__Point3dLatticeArray;	/* resqml2_0_1ForGsoap.h:250 */
class resqml20__Point3dZValueArray;	/* resqml2_0_1ForGsoap.h:252 */
class resqml20__PointGeometry;	/* resqml2_0_1ForGsoap.h:256 */
class resqml20__Point3dHdf5Array;	/* resqml2_0_1ForGsoap.h:262 */
class resqml20__ParametricLineArray;	/* resqml2_0_1ForGsoap.h:268 */
class resqml20__Point3dParametricArray;	/* resqml2_0_1ForGsoap.h:270 */
class resqml20__AbstractPlaneGeometry;	/* resqml2_0_1ForGsoap.h:278 */
class resqml20__AbstractParametricLineGeometry;	/* resqml2_0_1ForGsoap.h:280 */
class resqml20__Point3dFromRepresentationLatticeArray;	/* resqml2_0_1ForGsoap.h:282 */
class resqml20__Seismic3dCoordinates;	/* resqml2_0_1ForGsoap.h:284 */
class resqml20__Seismic2dCoordinates;	/* resqml2_0_1ForGsoap.h:288 */
class resqml20__Patch1d;	/* resqml2_0_1ForGsoap.h:290 */
class resqml20__SplitNodePatch;	/* resqml2_0_1ForGsoap.h:320 */
class resqml20__IjkParentWindow;	/* resqml2_0_1ForGsoap.h:322 */
class resqml20__ColumnLayerParentWindow;	/* resqml2_0_1ForGsoap.h:342 */
class resqml20__UnstructuredSubnodeTopology;	/* resqml2_0_1ForGsoap.h:344 */
class resqml20__GpGridUnstructuredColumnLayerGridPatch;	/* resqml2_0_1ForGsoap.h:346 */
class resqml20__SubnodePatch;	/* resqml2_0_1ForGsoap.h:356 */
class resqml20__ColumnLayerSubnodeTopology;	/* resqml2_0_1ForGsoap.h:358 */
class resqml20__TruncationCellPatch;	/* resqml2_0_1ForGsoap.h:366 */
class resqml20__GpGridUnstructuredGridPatch;	/* resqml2_0_1ForGsoap.h:368 */
class resqml20__CellParentWindow;	/* resqml2_0_1ForGsoap.h:396 */
class resqml20__GpGridIjkGridPatch;	/* resqml2_0_1ForGsoap.h:400 */
class resqml20__BinaryContactInterpretationPart;	/* resqml2_0_1ForGsoap.h:432 */
class resqml20__ContactElementReference;	/* resqml2_0_1ForGsoap.h:436 */
class resqml20__MultipleContactInterpretationPart;	/* resqml2_0_1ForGsoap.h:450 */
class resqml20__NonSealedContactRepresentationPart;	/* resqml2_0_1ForGsoap.h:550 */
class resqml20__SealedContactRepresentationPart;	/* resqml2_0_1ForGsoap.h:552 */
class resqml20__Grid2dPatch;	/* resqml2_0_1ForGsoap.h:588 */
class resqml20__PolylineSetPatch;	/* resqml2_0_1ForGsoap.h:592 */
class resqml20__ContactRepresentationReference;	/* resqml2_0_1ForGsoap.h:598 */
class resqml20__DataObjectParameter;	/* resqml2_0_1ForGsoap.h:618 */
class resqml20__ObjectParameterKey;	/* resqml2_0_1ForGsoap.h:620 */
class resqml20__StringParameter;	/* resqml2_0_1ForGsoap.h:624 */
class resqml20__IntegerQuantityParameter;	/* resqml2_0_1ForGsoap.h:628 */
class resqml20__TimeIndexParameterKey;	/* resqml2_0_1ForGsoap.h:630 */
class resqml20__FloatingPointQuantityParameter;	/* resqml2_0_1ForGsoap.h:632 */
class resqml20__TimeIndexParameter;	/* resqml2_0_1ForGsoap.h:636 */
class resqml20__StreamlinePolylineSetPatch;	/* resqml2_0_1ForGsoap.h:642 */
class eml20__AbstractCitedDataObject;	/* resqml2_0_1ForGsoap.h:662 */
class eml20__VerticalCrsEpsgCode;	/* resqml2_0_1ForGsoap.h:672 */
class eml20__VerticalUnknownCrs;	/* resqml2_0_1ForGsoap.h:674 */
class eml20__ProjectedCrsEpsgCode;	/* resqml2_0_1ForGsoap.h:684 */
class eml20__ProjectedUnknownCrs;	/* resqml2_0_1ForGsoap.h:686 */
class resqml20__IntegerArrayFromBooleanMaskArray;	/* resqml2_0_1ForGsoap.h:166 */
class resqml20__BooleanArrayFromIndexArray;	/* resqml2_0_1ForGsoap.h:168 */
class resqml20__BooleanConstantArray;	/* resqml2_0_1ForGsoap.h:170 */
class resqml20__IntegerConstantArray;	/* resqml2_0_1ForGsoap.h:172 */
class resqml20__IntegerHdf5Array;	/* resqml2_0_1ForGsoap.h:178 */
class resqml20__DoubleLatticeArray;	/* resqml2_0_1ForGsoap.h:186 */
class resqml20__DoubleConstantArray;	/* resqml2_0_1ForGsoap.h:188 */
class resqml20__DoubleHdf5Array;	/* resqml2_0_1ForGsoap.h:190 */
class resqml20__IntegerLatticeArray;	/* resqml2_0_1ForGsoap.h:202 */
class resqml20__BooleanHdf5Array;	/* resqml2_0_1ForGsoap.h:210 */
class resqml20__IntegerRangeArray;	/* resqml2_0_1ForGsoap.h:220 */
class resqml20__BooleanArrayFromDiscretePropertyArray;	/* resqml2_0_1ForGsoap.h:240 */
class resqml20__ParametricLineGeometry;	/* resqml2_0_1ForGsoap.h:246 */
class resqml20__HorizontalPlaneGeometry;	/* resqml2_0_1ForGsoap.h:254 */
class resqml20__ParametricLineFromRepresentationGeometry;	/* resqml2_0_1ForGsoap.h:266 */
class resqml20__TiltedPlaneGeometry;	/* resqml2_0_1ForGsoap.h:276 */
class resqml20__SubRepresentationPatch;	/* resqml2_0_1ForGsoap.h:296 */
class resqml20__ColumnSubnodePatch;	/* resqml2_0_1ForGsoap.h:324 */
class resqml20__UniformSubnodePatch;	/* resqml2_0_1ForGsoap.h:352 */
class resqml20__AbstractGridGeometry;	/* resqml2_0_1ForGsoap.h:406 */
class resqml20__VariableSubnodePatch;	/* resqml2_0_1ForGsoap.h:414 */
class resqml20__AbstractResqmlDataObject;	/* resqml2_0_1ForGsoap.h:528 */
class resqml20__ContactPatch;	/* resqml2_0_1ForGsoap.h:554 */
class resqml20__EdgePatch;	/* resqml2_0_1ForGsoap.h:566 */
class resqml20__NodePatch;	/* resqml2_0_1ForGsoap.h:574 */
class resqml20__TrianglePatch;	/* resqml2_0_1ForGsoap.h:578 */
class eml20__ProjectedCrs;	/* resqml2_0_1ForGsoap.h:676 */
class eml20__VerticalCrs;	/* resqml2_0_1ForGsoap.h:678 */
class eml20__obj_USCOREEpcExternalPartReference;	/* resqml2_0_1ForGsoap.h:690 */
class eml20__PressureSquaredMeasure;	/* resqml2_0_1ForGsoap.h:694 */
class eml20__ForceLengthPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:696 */
class eml20__AmountOfSubstancePerTimePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:698 */
class eml20__VolumePerTimePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:700 */
class eml20__LengthPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:702 */
class eml20__TemperatureIntervalMeasure;	/* resqml2_0_1ForGsoap.h:704 */
class eml20__VolumePerTimePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:706 */
class eml20__VolumePerTimePerTimeMeasure;	/* resqml2_0_1ForGsoap.h:708 */
class eml20__PermeabilityLengthMeasure;	/* resqml2_0_1ForGsoap.h:710 */
class eml20__ThermalInsulanceMeasure;	/* resqml2_0_1ForGsoap.h:712 */
class eml20__ForceAreaMeasure;	/* resqml2_0_1ForGsoap.h:714 */
class eml20__EnergyMeasure;	/* resqml2_0_1ForGsoap.h:716 */
class eml20__IlluminanceMeasure;	/* resqml2_0_1ForGsoap.h:718 */
class eml20__ForceMeasure;	/* resqml2_0_1ForGsoap.h:720 */
class eml20__RadiantIntensityMeasure;	/* resqml2_0_1ForGsoap.h:722 */
class eml20__PowerPerPowerMeasure;	/* resqml2_0_1ForGsoap.h:724 */
class eml20__DimensionlessMeasure;	/* resqml2_0_1ForGsoap.h:726 */
class eml20__HeatTransferCoefficientMeasure;	/* resqml2_0_1ForGsoap.h:728 */
class eml20__APINeutronMeasure;	/* resqml2_0_1ForGsoap.h:730 */
class eml20__MagneticVectorPotentialMeasure;	/* resqml2_0_1ForGsoap.h:732 */
class eml20__LinearAccelerationMeasure;	/* resqml2_0_1ForGsoap.h:734 */
class eml20__VolumePerTimeMeasure;	/* resqml2_0_1ForGsoap.h:736 */
class eml20__MagneticFluxMeasure;	/* resqml2_0_1ForGsoap.h:738 */
class eml20__VolumetricThermalExpansionMeasure;	/* resqml2_0_1ForGsoap.h:740 */
class eml20__HeatFlowRateMeasure;	/* resqml2_0_1ForGsoap.h:742 */
class eml20__MassPerTimeMeasure;	/* resqml2_0_1ForGsoap.h:744 */
class eml20__VolumePerMassMeasure;	/* resqml2_0_1ForGsoap.h:746 */
class eml20__MolarVolumeMeasure;	/* resqml2_0_1ForGsoap.h:748 */
class eml20__ElectricConductanceMeasure;	/* resqml2_0_1ForGsoap.h:750 */
class eml20__ReciprocalPressureMeasure;	/* resqml2_0_1ForGsoap.h:752 */
class eml20__AreaPerAmountOfSubstanceMeasure;	/* resqml2_0_1ForGsoap.h:754 */
class eml20__LengthMeasure;	/* resqml2_0_1ForGsoap.h:756 */
class eml20__MassPerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:758 */
class eml20__TemperatureIntervalPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:760 */
class eml20__AmountOfSubstancePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:762 */
class eml20__AmountOfSubstanceMeasure;	/* resqml2_0_1ForGsoap.h:764 */
class eml20__TimePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:766 */
class eml20__ReciprocalMassTimeMeasure;	/* resqml2_0_1ForGsoap.h:768 */
class eml20__ReciprocalVolumeMeasure;	/* resqml2_0_1ForGsoap.h:770 */
class eml20__ForcePerForceMeasure;	/* resqml2_0_1ForGsoap.h:772 */
class eml20__LinearThermalExpansionMeasure;	/* resqml2_0_1ForGsoap.h:774 */
class eml20__EnergyPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:776 */
class eml20__TemperatureIntervalPerTimeMeasure;	/* resqml2_0_1ForGsoap.h:778 */
class eml20__ThermalConductanceMeasure;	/* resqml2_0_1ForGsoap.h:780 */
class eml20__SolidAngleMeasure;	/* resqml2_0_1ForGsoap.h:782 */
class eml20__EnergyLengthPerTimeAreaTemperatureMeasure;	/* resqml2_0_1ForGsoap.h:784 */
class eml20__PowerMeasure;	/* resqml2_0_1ForGsoap.h:786 */
class eml20__VolumePerRotationMeasure;	/* resqml2_0_1ForGsoap.h:788 */
class eml20__ElectricChargePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:790 */
class eml20__LightExposureMeasure;	/* resqml2_0_1ForGsoap.h:792 */
class eml20__ElectricCurrentMeasure;	/* resqml2_0_1ForGsoap.h:794 */
class eml20__LuminousFluxMeasure;	/* resqml2_0_1ForGsoap.h:796 */
class eml20__HeatCapacityMeasure;	/* resqml2_0_1ForGsoap.h:798 */
class eml20__ElectricResistancePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:800 */
class eml20__AbsorbedDoseMeasure;	/* resqml2_0_1ForGsoap.h:802 */
class eml20__TemperatureIntervalPerPressureMeasure;	/* resqml2_0_1ForGsoap.h:804 */
class eml20__AttenuationPerFrequencyIntervalMeasure;	/* resqml2_0_1ForGsoap.h:806 */
class eml20__ThermalResistanceMeasure;	/* resqml2_0_1ForGsoap.h:808 */
class eml20__AnglePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:810 */
class eml20__LengthPerTimeMeasure;	/* resqml2_0_1ForGsoap.h:812 */
class eml20__MassPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:814 */
class eml20__EnergyPerAreaMeasure;	/* resqml2_0_1ForGsoap.h:816 */
class eml20__AreaPerAreaMeasure;	/* resqml2_0_1ForGsoap.h:818 */
class eml20__ReluctanceMeasure;	/* resqml2_0_1ForGsoap.h:820 */
class eml20__ThermodynamicTemperatureMeasure;	/* resqml2_0_1ForGsoap.h:822 */
class eml20__PermittivityMeasure;	/* resqml2_0_1ForGsoap.h:824 */
class eml20__PressureTimePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:826 */
class eml20__DipoleMomentMeasure;	/* resqml2_0_1ForGsoap.h:828 */
class eml20__RadianceMeasure;	/* resqml2_0_1ForGsoap.h:830 */
class eml20__AreaPerMassMeasure;	/* resqml2_0_1ForGsoap.h:832 */
class eml20__EnergyPerMassPerTimeMeasure;	/* resqml2_0_1ForGsoap.h:834 */
class eml20__ElectricCurrentDensityMeasure;	/* resqml2_0_1ForGsoap.h:836 */
class eml20__MassPerMassMeasure;	/* resqml2_0_1ForGsoap.h:838 */
class eml20__DataTransferSpeedMeasure;	/* resqml2_0_1ForGsoap.h:840 */
class eml20__MagneticDipoleMomentMeasure;	/* resqml2_0_1ForGsoap.h:842 */
class eml20__MassPerEnergyMeasure;	/* resqml2_0_1ForGsoap.h:844 */
class eml20__MagneticPermeabilityMeasure;	/* resqml2_0_1ForGsoap.h:846 */
class eml20__APIGravityMeasure;	/* resqml2_0_1ForGsoap.h:848 */
class eml20__VolumePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:850 */
class eml20__VolumeMeasure;	/* resqml2_0_1ForGsoap.h:852 */
class eml20__VolumePerTimePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:854 */
class eml20__VolumePerTimePerPressureMeasure;	/* resqml2_0_1ForGsoap.h:856 */
class eml20__TimeMeasure;	/* resqml2_0_1ForGsoap.h:858 */
class eml20__MomentOfForceMeasure;	/* resqml2_0_1ForGsoap.h:860 */
class eml20__LuminanceMeasure;	/* resqml2_0_1ForGsoap.h:862 */
class eml20__ForcePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:864 */
class eml20__MolarHeatCapacityMeasure;	/* resqml2_0_1ForGsoap.h:866 */
class eml20__DigitalStorageMeasure;	/* resqml2_0_1ForGsoap.h:868 */
class eml20__ElectricChargeMeasure;	/* resqml2_0_1ForGsoap.h:870 */
class eml20__LuminousIntensityMeasure;	/* resqml2_0_1ForGsoap.h:872 */
class eml20__MolarEnergyMeasure;	/* resqml2_0_1ForGsoap.h:874 */
class eml20__LengthPerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:876 */
class eml20__SecondMomentOfAreaMeasure;	/* resqml2_0_1ForGsoap.h:878 */
class eml20__MagneticFluxDensityMeasure;	/* resqml2_0_1ForGsoap.h:880 */
class eml20__VolumePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:882 */
class eml20__QuantityOfLightMeasure;	/* resqml2_0_1ForGsoap.h:884 */
class eml20__LuminousEfficacyMeasure;	/* resqml2_0_1ForGsoap.h:886 */
class eml20__AreaPerTimeMeasure;	/* resqml2_0_1ForGsoap.h:888 */
class eml20__VolumeFlowRatePerVolumeFlowRateMeasure;	/* resqml2_0_1ForGsoap.h:890 */
class eml20__MomentumMeasure;	/* resqml2_0_1ForGsoap.h:892 */
class eml20__PowerPerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:894 */
class eml20__ThermalDiffusivityMeasure;	/* resqml2_0_1ForGsoap.h:896 */
class eml20__LogarithmicPowerRatioPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:898 */
class eml20__ReciprocalTimeMeasure;	/* resqml2_0_1ForGsoap.h:900 */
class eml20__SpecificHeatCapacityMeasure;	/* resqml2_0_1ForGsoap.h:902 */
class eml20__PotentialDifferencePerPowerDropMeasure;	/* resqml2_0_1ForGsoap.h:904 */
class eml20__MomentOfInertiaMeasure;	/* resqml2_0_1ForGsoap.h:906 */
class eml20__MassPerTimePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:908 */
class eml20__MolecularWeightMeasure;	/* resqml2_0_1ForGsoap.h:910 */
class eml20__ActivityOfRadioactivityMeasure;	/* resqml2_0_1ForGsoap.h:912 */
class eml20__SignalingEventPerTimeMeasure;	/* resqml2_0_1ForGsoap.h:914 */
class eml20__FrequencyMeasure;	/* resqml2_0_1ForGsoap.h:916 */
class eml20__FrequencyIntervalMeasure;	/* resqml2_0_1ForGsoap.h:918 */
class eml20__CapacitanceMeasure;	/* resqml2_0_1ForGsoap.h:920 */
class eml20__ElectricalResistivityMeasure;	/* resqml2_0_1ForGsoap.h:922 */
class eml20__MassLengthMeasure;	/* resqml2_0_1ForGsoap.h:924 */
class eml20__ReciprocalAreaMeasure;	/* resqml2_0_1ForGsoap.h:926 */
class eml20__KinematicViscosityMeasure;	/* resqml2_0_1ForGsoap.h:928 */
class eml20__InductanceMeasure;	/* resqml2_0_1ForGsoap.h:930 */
class eml20__TimePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:932 */
class eml20__ElectromagneticMomentMeasure;	/* resqml2_0_1ForGsoap.h:934 */
class eml20__EnergyPerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:936 */
class eml20__ElectricChargePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:938 */
class eml20__VolumetricHeatTransferCoefficientMeasure;	/* resqml2_0_1ForGsoap.h:940 */
class eml20__PressurePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:942 */
class eml20__TimePerMassMeasure;	/* resqml2_0_1ForGsoap.h:944 */
class eml20__ReciprocalLengthMeasure;	/* resqml2_0_1ForGsoap.h:946 */
class eml20__DynamicViscosityMeasure;	/* resqml2_0_1ForGsoap.h:948 */
class eml20__ReciprocalElectricPotentialDifferenceMeasure;	/* resqml2_0_1ForGsoap.h:950 */
class eml20__ElectricChargePerMassMeasure;	/* resqml2_0_1ForGsoap.h:952 */
class eml20__APIGammaRayMeasure;	/* resqml2_0_1ForGsoap.h:954 */
class eml20__DiffusionCoefficientMeasure;	/* resqml2_0_1ForGsoap.h:956 */
class eml20__ElectricPotentialDifferenceMeasure;	/* resqml2_0_1ForGsoap.h:958 */
class eml20__IsothermalCompressibilityMeasure;	/* resqml2_0_1ForGsoap.h:960 */
class eml20__MassPerVolumePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:962 */
class eml20__PressurePerTimeMeasure;	/* resqml2_0_1ForGsoap.h:964 */
class eml20__ForcePerLengthMeasure;	/* resqml2_0_1ForGsoap.h:966 */
class eml20__AmountOfSubstancePerTimeMeasure;	/* resqml2_0_1ForGsoap.h:968 */
class eml20__LengthPerTemperatureMeasure;	/* resqml2_0_1ForGsoap.h:970 */
class eml20__VolumePerTimeLengthMeasure;	/* resqml2_0_1ForGsoap.h:972 */
class eml20__PressureSquaredPerForceTimePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:974 */
class eml20__AnglePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:976 */
class eml20__LengthPerPressureMeasure;	/* resqml2_0_1ForGsoap.h:978 */
class eml20__ThermalConductivityMeasure;	/* resqml2_0_1ForGsoap.h:980 */
class eml20__MassMeasure;	/* resqml2_0_1ForGsoap.h:982 */
class eml20__NormalizedPowerMeasure;	/* resqml2_0_1ForGsoap.h:984 */
class eml20__LogarithmicPowerRatioMeasure;	/* resqml2_0_1ForGsoap.h:986 */
class eml20__AngularAccelerationMeasure;	/* resqml2_0_1ForGsoap.h:988 */
class eml20__ReciprocalMassMeasure;	/* resqml2_0_1ForGsoap.h:990 */
class eml20__ReciprocalForceMeasure;	/* resqml2_0_1ForGsoap.h:992 */
class eml20__PlaneAngleMeasure;	/* resqml2_0_1ForGsoap.h:994 */
class eml20__EnergyLengthPerAreaMeasure;	/* resqml2_0_1ForGsoap.h:996 */
class eml20__EnergyPerMassMeasure;	/* resqml2_0_1ForGsoap.h:998 */
class eml20__AngularVelocityMeasure;	/* resqml2_0_1ForGsoap.h:1000 */
class eml20__ElectricConductivityMeasure;	/* resqml2_0_1ForGsoap.h:1002 */
class eml20__AmountOfSubstancePerAmountOfSubstanceMeasure;	/* resqml2_0_1ForGsoap.h:1004 */
class eml20__ElectricFieldStrengthMeasure;	/* resqml2_0_1ForGsoap.h:1006 */
class eml20__PowerPerAreaMeasure;	/* resqml2_0_1ForGsoap.h:1008 */
class eml20__MagneticFluxDensityPerLengthMeasure;	/* resqml2_0_1ForGsoap.h:1010 */
class eml20__PressureMeasure;	/* resqml2_0_1ForGsoap.h:1012 */
class eml20__VolumePerTimePerPressureLengthMeasure;	/* resqml2_0_1ForGsoap.h:1014 */
class eml20__MagneticFieldStrengthMeasure;	/* resqml2_0_1ForGsoap.h:1016 */
class eml20__PermeabilityRockMeasure;	/* resqml2_0_1ForGsoap.h:1018 */
class eml20__DoseEquivalentMeasure;	/* resqml2_0_1ForGsoap.h:1020 */
class eml20__MassPerTimePerAreaMeasure;	/* resqml2_0_1ForGsoap.h:1022 */
class eml20__VolumePerPressureMeasure;	/* resqml2_0_1ForGsoap.h:1024 */
class eml20__MassPerAreaMeasure;	/* resqml2_0_1ForGsoap.h:1026 */
class eml20__AmountOfSubstancePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:1028 */
class eml20__TimePerTimeMeasure;	/* resqml2_0_1ForGsoap.h:1030 */
class eml20__AreaPerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:1032 */
class eml20__ElectricResistanceMeasure;	/* resqml2_0_1ForGsoap.h:1034 */
class eml20__VolumePerVolumeMeasure;	/* resqml2_0_1ForGsoap.h:1036 */
class eml20__AreaMeasure;	/* resqml2_0_1ForGsoap.h:1038 */
class eml20__LengthPerMassMeasure;	/* resqml2_0_1ForGsoap.h:1040 */
class eml20__MobilityMeasure;	/* resqml2_0_1ForGsoap.h:1042 */
class resqml20__obj_USCOREPropertyKind;	/* resqml2_0_1ForGsoap.h:204 */
class resqml20__AbstractPropertyLookup;	/* resqml2_0_1ForGsoap.h:218 */
class resqml20__obj_USCOREPropertySet;	/* resqml2_0_1ForGsoap.h:222 */
class resqml20__AbstractProperty;	/* resqml2_0_1ForGsoap.h:224 */
class resqml20__obj_USCORERepresentationIdentitySet;	/* resqml2_0_1ForGsoap.h:304 */
class resqml20__AbstractRepresentation;	/* resqml2_0_1ForGsoap.h:308 */
class resqml20__obj_USCORELocalGridSet;	/* resqml2_0_1ForGsoap.h:328 */
class resqml20__UnstructuredGridGeometry;	/* resqml2_0_1ForGsoap.h:390 */
class resqml20__AbstractColumnLayerGridGeometry;	/* resqml2_0_1ForGsoap.h:420 */
class resqml20__AbstractFeatureInterpretation;	/* resqml2_0_1ForGsoap.h:424 */
class resqml20__obj_USCOREStratigraphicColumn;	/* resqml2_0_1ForGsoap.h:456 */
class resqml20__obj_USCOREGlobalChronostratigraphicColumn;	/* resqml2_0_1ForGsoap.h:492 */
class resqml20__AbstractFeature;	/* resqml2_0_1ForGsoap.h:506 */
class resqml20__AbstractLocal3dCrs;	/* resqml2_0_1ForGsoap.h:518 */
class resqml20__obj_USCORETimeSeries;	/* resqml2_0_1ForGsoap.h:526 */
class resqml20__obj_USCOREMdDatum;	/* resqml2_0_1ForGsoap.h:540 */
class resqml20__WellboreMarker;	/* resqml2_0_1ForGsoap.h:542 */
class resqml20__obj_USCOREActivity;	/* resqml2_0_1ForGsoap.h:622 */
class resqml20__obj_USCOREActivityTemplate;	/* resqml2_0_1ForGsoap.h:640 */
class resqml20__obj_USCOREDoubleTableLookup;	/* resqml2_0_1ForGsoap.h:174 */
class resqml20__obj_USCOREPointsProperty;	/* resqml2_0_1ForGsoap.h:184 */
class resqml20__obj_USCOREStringTableLookup;	/* resqml2_0_1ForGsoap.h:206 */
class resqml20__AbstractValuesProperty;	/* resqml2_0_1ForGsoap.h:234 */
class resqml20__obj_USCORERepresentationSetRepresentation;	/* resqml2_0_1ForGsoap.h:298 */
class resqml20__obj_USCORERedefinedGeometryRepresentation;	/* resqml2_0_1ForGsoap.h:300 */
class resqml20__obj_USCORESubRepresentation;	/* resqml2_0_1ForGsoap.h:312 */
class resqml20__AbstractGridRepresentation;	/* resqml2_0_1ForGsoap.h:330 */
class resqml20__UnstructuredColumnLayerGridGeometry;	/* resqml2_0_1ForGsoap.h:376 */
class resqml20__IjkGridGeometry;	/* resqml2_0_1ForGsoap.h:378 */
class resqml20__obj_USCOREGridConnectionSetRepresentation;	/* resqml2_0_1ForGsoap.h:404 */
class resqml20__AbstractOrganizationInterpretation;	/* resqml2_0_1ForGsoap.h:430 */
class resqml20__obj_USCOREGenericFeatureInterpretation;	/* resqml2_0_1ForGsoap.h:440 */
class resqml20__obj_USCOREWellboreInterpretation;	/* resqml2_0_1ForGsoap.h:442 */
class resqml20__obj_USCOREBoundaryFeatureInterpretation;	/* resqml2_0_1ForGsoap.h:460 */
class resqml20__obj_USCOREEarthModelInterpretation;	/* resqml2_0_1ForGsoap.h:464 */
class resqml20__obj_USCOREGeologicUnitInterpretation;	/* resqml2_0_1ForGsoap.h:476 */
class resqml20__AbstractGeologicFeature;	/* resqml2_0_1ForGsoap.h:496 */
class resqml20__obj_USCORELocalTime3dCrs;	/* resqml2_0_1ForGsoap.h:512 */
class resqml20__obj_USCORELocalDepth3dCrs;	/* resqml2_0_1ForGsoap.h:524 */
class resqml20__obj_USCOREDeviationSurveyRepresentation;	/* resqml2_0_1ForGsoap.h:534 */
class resqml20__obj_USCOREWellboreFrameRepresentation;	/* resqml2_0_1ForGsoap.h:536 */
class resqml20__obj_USCOREWellboreTrajectoryRepresentation;	/* resqml2_0_1ForGsoap.h:538 */
class resqml20__obj_USCOREPointSetRepresentation;	/* resqml2_0_1ForGsoap.h:562 */
class resqml20__obj_USCOREPolylineSetRepresentation;	/* resqml2_0_1ForGsoap.h:572 */
class resqml20__obj_USCOREPolylineRepresentation;	/* resqml2_0_1ForGsoap.h:580 */
class resqml20__AbstractSurfaceRepresentation;	/* resqml2_0_1ForGsoap.h:586 */
class resqml20__AbstractTechnicalFeature;	/* resqml2_0_1ForGsoap.h:600 */
class resqml20__obj_USCOREStreamlinesRepresentation;	/* resqml2_0_1ForGsoap.h:646 */
class resqml20__obj_USCOREContinuousProperty;	/* resqml2_0_1ForGsoap.h:180 */
class resqml20__obj_USCORECommentProperty;	/* resqml2_0_1ForGsoap.h:194 */
class resqml20__obj_USCOREDiscreteProperty;	/* resqml2_0_1ForGsoap.h:196 */
class resqml20__obj_USCORECategoricalProperty;	/* resqml2_0_1ForGsoap.h:198 */
class resqml20__obj_USCOREUnstructuredGridRepresentation;	/* resqml2_0_1ForGsoap.h:314 */
class resqml20__obj_USCOREGpGridRepresentation;	/* resqml2_0_1ForGsoap.h:318 */
class resqml20__AbstractTruncatedColumnLayerGridRepresentation;	/* resqml2_0_1ForGsoap.h:382 */
class resqml20__AbstractColumnLayerGridRepresentation;	/* resqml2_0_1ForGsoap.h:398 */
class resqml20__obj_USCORERockFluidOrganizationInterpretation;	/* resqml2_0_1ForGsoap.h:426 */
class resqml20__obj_USCORERockFluidUnitInterpretation;	/* resqml2_0_1ForGsoap.h:438 */
class resqml20__obj_USCOREGeobodyBoundaryInterpretation;	/* resqml2_0_1ForGsoap.h:446 */
class resqml20__obj_USCOREStructuralOrganizationInterpretation;	/* resqml2_0_1ForGsoap.h:448 */
class resqml20__obj_USCOREFaultInterpretation;	/* resqml2_0_1ForGsoap.h:454 */
class resqml20__obj_USCOREGeobodyInterpretation;	/* resqml2_0_1ForGsoap.h:458 */
class resqml20__AbstractStratigraphicOrganizationInterpretation;	/* resqml2_0_1ForGsoap.h:470 */
class resqml20__obj_USCOREHorizonInterpretation;	/* resqml2_0_1ForGsoap.h:474 */
class resqml20__obj_USCOREStratigraphicUnitInterpretation;	/* resqml2_0_1ForGsoap.h:478 */
class resqml20__obj_USCOREGeologicUnitFeature;	/* resqml2_0_1ForGsoap.h:484 */
class resqml20__obj_USCOREBoundaryFeature;	/* resqml2_0_1ForGsoap.h:488 */
class resqml20__obj_USCOREOrganizationFeature;	/* resqml2_0_1ForGsoap.h:502 */
class resqml20__obj_USCOREBlockedWellboreRepresentation;	/* resqml2_0_1ForGsoap.h:530 */
class resqml20__obj_USCOREWellboreMarkerFrameRepresentation;	/* resqml2_0_1ForGsoap.h:544 */
class resqml20__obj_USCORETriangulatedSetRepresentation;	/* resqml2_0_1ForGsoap.h:548 */
class resqml20__obj_USCOREPlaneSetRepresentation;	/* resqml2_0_1ForGsoap.h:556 */
class resqml20__AbstractSurfaceFrameworkRepresentation;	/* resqml2_0_1ForGsoap.h:560 */
class resqml20__obj_USCORESealedVolumeFrameworkRepresentation;	/* resqml2_0_1ForGsoap.h:564 */
class resqml20__obj_USCOREGrid2dRepresentation;	/* resqml2_0_1ForGsoap.h:582 */
class resqml20__obj_USCOREGrid2dSetRepresentation;	/* resqml2_0_1ForGsoap.h:590 */
class resqml20__obj_USCOREFrontierFeature;	/* resqml2_0_1ForGsoap.h:602 */
class resqml20__obj_USCOREWellboreFeature;	/* resqml2_0_1ForGsoap.h:608 */
class resqml20__AbstractSeismicSurveyFeature;	/* resqml2_0_1ForGsoap.h:614 */
class resqml20__obj_USCOREStreamlinesFeature;	/* resqml2_0_1ForGsoap.h:644 */
class resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation;	/* resqml2_0_1ForGsoap.h:336 */
class resqml20__obj_USCOREIjkGridRepresentation;	/* resqml2_0_1ForGsoap.h:340 */
class resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation;	/* resqml2_0_1ForGsoap.h:394 */
class resqml20__obj_USCORETruncatedIjkGridRepresentation;	/* resqml2_0_1ForGsoap.h:402 */
class resqml20__obj_USCOREStratigraphicColumnRankInterpretation;	/* resqml2_0_1ForGsoap.h:468 */
class resqml20__obj_USCOREStratigraphicOccurrenceInterpretation;	/* resqml2_0_1ForGsoap.h:480 */
class resqml20__obj_USCOREFluidBoundaryFeature;	/* resqml2_0_1ForGsoap.h:482 */
class resqml20__obj_USCORERockFluidUnitFeature;	/* resqml2_0_1ForGsoap.h:486 */
class resqml20__obj_USCOREStratigraphicUnitFeature;	/* resqml2_0_1ForGsoap.h:494 */
class resqml20__obj_USCOREGeneticBoundaryFeature;	/* resqml2_0_1ForGsoap.h:498 */
class resqml20__obj_USCOREGeobodyFeature;	/* resqml2_0_1ForGsoap.h:500 */
class resqml20__obj_USCORETectonicBoundaryFeature;	/* resqml2_0_1ForGsoap.h:504 */
class resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation;	/* resqml2_0_1ForGsoap.h:546 */
class resqml20__obj_USCORESealedSurfaceFrameworkRepresentation;	/* resqml2_0_1ForGsoap.h:576 */
class resqml20__SeismicLatticeSetFeature;	/* resqml2_0_1ForGsoap.h:604 */
class resqml20__obj_USCORESeismicLineSetFeature;	/* resqml2_0_1ForGsoap.h:606 */
class resqml20__obj_USCORESeismicLineFeature;	/* resqml2_0_1ForGsoap.h:610 */
class resqml20__obj_USCORESeismicLatticeFeature;	/* resqml2_0_1ForGsoap.h:612 */
class resqml20__obj_USCOREContinuousPropertySeries;	/* resqml2_0_1ForGsoap.h:654 */
class resqml20__obj_USCORECategoricalPropertySeries;	/* resqml2_0_1ForGsoap.h:656 */
class resqml20__obj_USCORECommentPropertySeries;	/* resqml2_0_1ForGsoap.h:658 */
class resqml20__obj_USCOREDiscretePropertySeries;	/* resqml2_0_1ForGsoap.h:660 */

/* custom/struct_tm.h:57 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_tm
#define SOAP_TYPE_gsoap_resqml2_0_1_tm (-8)
#if 0 /* Volatile: declared external of the data binding interface and not redeclared here */
struct SOAP_CMAC tm {
      public:
        /** Required element 'tm-sec' of XML schema type 'xsd:int' */
        int tm_sec;
        /** Required element 'tm-min' of XML schema type 'xsd:int' */
        int tm_min;
        /** Required element 'tm-hour' of XML schema type 'xsd:int' */
        int tm_hour;
        /** Required element 'tm-mday' of XML schema type 'xsd:int' */
        int tm_mday;
        /** Required element 'tm-mon' of XML schema type 'xsd:int' */
        int tm_mon;
        /** Required element 'tm-year' of XML schema type 'xsd:int' */
        int tm_year;
        /** Required element 'tm-isdst' of XML schema type 'xsd:int' */
        int tm_isdst;
};
#endif
#endif

/* resqml2_0_1ForGsoap.h:176 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyKindFacet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyKindFacet (-22)
/* complex XML schema type 'resqml20:PropertyKindFacet': */
class SOAP_CMAC resqml20__PropertyKindFacet {
      public:
        /// Required element 'resqml20:Facet' of XML schema type 'resqml20:Facet'
        resqml20__Facet Facet;
        /// Required element 'resqml20:Value' of XML schema type 'xsd:string'
        std::string Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyKindFacet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyKindFacet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PropertyKindFacet, default initialized and not managed by a soap context
        virtual resqml20__PropertyKindFacet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PropertyKindFacet); }
      public:
        /// Constructor with default initializations
        resqml20__PropertyKindFacet() : Facet(), Value(), soap() { }
        virtual ~resqml20__PropertyKindFacet() { }
        /// Friend allocator used by soap_new_resqml20__PropertyKindFacet(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PropertyKindFacet * SOAP_FMAC2 soap_instantiate_resqml20__PropertyKindFacet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:182 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringLookup (-25)
/* complex XML schema type 'resqml20:StringLookup': */
class SOAP_CMAC resqml20__StringLookup {
      public:
        /// Required element 'resqml20:Key' of XML schema type 'xsd:integer'
        LONG64 Key;
        /// Required element 'resqml20:Value' of XML schema type 'xsd:string'
        std::string Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StringLookup, default initialized and not managed by a soap context
        virtual resqml20__StringLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StringLookup); }
      public:
        /// Constructor with default initializations
        resqml20__StringLookup() : Key(), Value(), soap() { }
        virtual ~resqml20__StringLookup() { }
        /// Friend allocator used by soap_new_resqml20__StringLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StringLookup * SOAP_FMAC2 soap_instantiate_resqml20__StringLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:192 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfPoints (-30)
/* complex XML schema type 'resqml20:PatchOfPoints': */
class SOAP_CMAC resqml20__PatchOfPoints {
      public:
        /// Optional element 'resqml20:RepresentationPatchIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *RepresentationPatchIndex;
        /// Required element 'resqml20:Points' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *Points;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfPoints
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfPoints; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PatchOfPoints, default initialized and not managed by a soap context
        virtual resqml20__PatchOfPoints *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PatchOfPoints); }
      public:
        /// Constructor with default initializations
        resqml20__PatchOfPoints() : RepresentationPatchIndex(), Points(), soap() { }
        virtual ~resqml20__PatchOfPoints() { }
        /// Friend allocator used by soap_new_resqml20__PatchOfPoints(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PatchOfPoints * SOAP_FMAC2 soap_instantiate_resqml20__PatchOfPoints(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:212 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyKind (-40)
/* complex XML schema type 'resqml20:AbstractPropertyKind': */
class SOAP_CMAC resqml20__AbstractPropertyKind {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractPropertyKind, default initialized and not managed by a soap context
        virtual resqml20__AbstractPropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractPropertyKind); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractPropertyKind() : soap() { }
        virtual ~resqml20__AbstractPropertyKind() { }
        /// Friend allocator used by soap_new_resqml20__AbstractPropertyKind(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractPropertyKind * SOAP_FMAC2 soap_instantiate_resqml20__AbstractPropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:214 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfValues
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfValues (-41)
/* complex XML schema type 'resqml20:PatchOfValues': */
class SOAP_CMAC resqml20__PatchOfValues {
      public:
        /// Optional element 'resqml20:RepresentationPatchIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *RepresentationPatchIndex;
        /// Required element 'resqml20:Values' of XML schema type 'resqml20:AbstractValueArray'
        resqml20__AbstractValueArray *Values;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfValues
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfValues; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PatchOfValues, default initialized and not managed by a soap context
        virtual resqml20__PatchOfValues *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PatchOfValues); }
      public:
        /// Constructor with default initializations
        resqml20__PatchOfValues() : RepresentationPatchIndex(), Values(), soap() { }
        virtual ~resqml20__PatchOfValues() { }
        /// Friend allocator used by soap_new_resqml20__PatchOfValues(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PatchOfValues * SOAP_FMAC2 soap_instantiate_resqml20__PatchOfValues(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:216 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValueArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValueArray (-42)
/* complex XML schema type 'resqml20:AbstractValueArray': */
class SOAP_CMAC resqml20__AbstractValueArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractValueArray, default initialized and not managed by a soap context
        virtual resqml20__AbstractValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractValueArray); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractValueArray() : soap() { }
        virtual ~resqml20__AbstractValueArray() { }
        /// Friend allocator used by soap_new_resqml20__AbstractValueArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractValueArray * SOAP_FMAC2 soap_instantiate_resqml20__AbstractValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:230 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyValuesPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyValuesPatch (-49)
/* complex XML schema type 'resqml20:PropertyValuesPatch': */
class SOAP_CMAC resqml20__PropertyValuesPatch {
      public:
        /// Required element 'resqml20:patchUid' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 patchUid;
        /// Required element 'resqml20:values' of XML schema type 'resqml20:AbstractValueArray'
        resqml20__AbstractValueArray *values;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyValuesPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyValuesPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PropertyValuesPatch, default initialized and not managed by a soap context
        virtual resqml20__PropertyValuesPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PropertyValuesPatch); }
      public:
        /// Constructor with default initializations
        resqml20__PropertyValuesPatch() : patchUid(), values(), soap() { }
        virtual ~resqml20__PropertyValuesPatch() { }
        /// Friend allocator used by soap_new_resqml20__PropertyValuesPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PropertyValuesPatch * SOAP_FMAC2 soap_instantiate_resqml20__PropertyValuesPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:238 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLookup (-53)
/* complex XML schema type 'resqml20:DoubleLookup': */
class SOAP_CMAC resqml20__DoubleLookup {
      public:
        /// Required element 'resqml20:Key' of XML schema type 'xsd:double'
        double Key;
        /// Required element 'resqml20:Value' of XML schema type 'xsd:double'
        double Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__DoubleLookup, default initialized and not managed by a soap context
        virtual resqml20__DoubleLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__DoubleLookup); }
      public:
        /// Constructor with default initializations
        resqml20__DoubleLookup() : Key(), Value(), soap() { }
        virtual ~resqml20__DoubleLookup() { }
        /// Friend allocator used by soap_new_resqml20__DoubleLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml20__DoubleLookup * SOAP_FMAC2 soap_instantiate_resqml20__DoubleLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:242 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dOffset
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dOffset (-55)
/* complex XML schema type 'resqml20:Point3dOffset': */
class SOAP_CMAC resqml20__Point3dOffset {
      public:
        /// Required element 'resqml20:Offset' of XML schema type 'resqml20:Point3d'
        resqml20__Point3d *Offset;
        /// Required element 'resqml20:Spacing' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *Spacing;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dOffset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3dOffset, default initialized and not managed by a soap context
        virtual resqml20__Point3dOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3dOffset); }
      public:
        /// Constructor with default initializations
        resqml20__Point3dOffset() : Offset(), Spacing(), soap() { }
        virtual ~resqml20__Point3dOffset() { }
        /// Friend allocator used by soap_new_resqml20__Point3dOffset(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3dOffset * SOAP_FMAC2 soap_instantiate_resqml20__Point3dOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:258 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPoint3dArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPoint3dArray (-63)
/* Type resqml20__AbstractPoint3dArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml20:AbstractPoint3dArray': */
class SOAP_CMAC resqml20__AbstractPoint3dArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPoint3dArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPoint3dArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractPoint3dArray, default initialized and not managed by a soap context
        virtual resqml20__AbstractPoint3dArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractPoint3dArray); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractPoint3dArray() : soap() { }
        virtual ~resqml20__AbstractPoint3dArray() { }
        /// Friend allocator used by soap_new_resqml20__AbstractPoint3dArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractPoint3dArray * SOAP_FMAC2 soap_instantiate_resqml20__AbstractPoint3dArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:260 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeometry (-64)
/* complex XML schema type 'resqml20:AbstractGeometry': */
class SOAP_CMAC resqml20__AbstractGeometry {
      public:
        /// Optional element 'resqml20:TimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *TimeIndex;
        /// Required element 'resqml20:LocalCrs' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *LocalCrs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractGeometry, default initialized and not managed by a soap context
        virtual resqml20__AbstractGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractGeometry() : TimeIndex(), LocalCrs(), soap() { }
        virtual ~resqml20__AbstractGeometry() { }
        /// Friend allocator used by soap_new_resqml20__AbstractGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractGeometry * SOAP_FMAC2 soap_instantiate_resqml20__AbstractGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:264 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThreePoint3d
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThreePoint3d (-66)
/* complex XML schema type 'resqml20:ThreePoint3d': */
class SOAP_CMAC resqml20__ThreePoint3d {
      public:
        /// Sequence of 3 to 3 elements 'resqml20:Point3d' of XML schema type 'resqml20:Point3d'
        std::vector<resqml20__Point3d *> Point3d;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThreePoint3d
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThreePoint3d; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ThreePoint3d, default initialized and not managed by a soap context
        virtual resqml20__ThreePoint3d *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ThreePoint3d); }
      public:
        /// Constructor with default initializations
        resqml20__ThreePoint3d() : Point3d(), soap() { }
        virtual ~resqml20__ThreePoint3d() { }
        /// Friend allocator used by soap_new_resqml20__ThreePoint3d(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ThreePoint3d * SOAP_FMAC2 soap_instantiate_resqml20__ThreePoint3d(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:272 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineArray (-70)
/* complex XML schema type 'resqml20:AbstractParametricLineArray': */
class SOAP_CMAC resqml20__AbstractParametricLineArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractParametricLineArray, default initialized and not managed by a soap context
        virtual resqml20__AbstractParametricLineArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractParametricLineArray); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractParametricLineArray() : soap() { }
        virtual ~resqml20__AbstractParametricLineArray() { }
        /// Friend allocator used by soap_new_resqml20__AbstractParametricLineArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractParametricLineArray * SOAP_FMAC2 soap_instantiate_resqml20__AbstractParametricLineArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:274 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineIntersections
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineIntersections (-71)
/* complex XML schema type 'resqml20:ParametricLineIntersections': */
class SOAP_CMAC resqml20__ParametricLineIntersections {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:IntersectionLinePairs' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *IntersectionLinePairs;
        /// Required element 'resqml20:ParameterValuePairs' of XML schema type 'resqml20:AbstractValueArray'
        resqml20__AbstractValueArray *ParameterValuePairs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineIntersections
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineIntersections; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ParametricLineIntersections, default initialized and not managed by a soap context
        virtual resqml20__ParametricLineIntersections *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ParametricLineIntersections); }
      public:
        /// Constructor with default initializations
        resqml20__ParametricLineIntersections() : Count(), IntersectionLinePairs(), ParameterValuePairs(), soap() { }
        virtual ~resqml20__ParametricLineIntersections() { }
        /// Friend allocator used by soap_new_resqml20__ParametricLineIntersections(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ParametricLineIntersections * SOAP_FMAC2 soap_instantiate_resqml20__ParametricLineIntersections(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:286 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicCoordinates (-77)
/* complex XML schema type 'resqml20:AbstractSeismicCoordinates': */
class SOAP_CMAC resqml20__AbstractSeismicCoordinates {
      public:
        /// Required element 'resqml20:SeismicSupport' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SeismicSupport;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicCoordinates
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicCoordinates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractSeismicCoordinates, default initialized and not managed by a soap context
        virtual resqml20__AbstractSeismicCoordinates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractSeismicCoordinates); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractSeismicCoordinates() : SeismicSupport(), soap() { }
        virtual ~resqml20__AbstractSeismicCoordinates() { }
        /// Friend allocator used by soap_new_resqml20__AbstractSeismicCoordinates(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractSeismicCoordinates * SOAP_FMAC2 soap_instantiate_resqml20__AbstractSeismicCoordinates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:292 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch (-80)
/* complex XML schema type 'resqml20:Patch': */
class SOAP_CMAC resqml20__Patch {
      public:
        /// Required element 'resqml20:PatchIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 PatchIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Patch, default initialized and not managed by a soap context
        virtual resqml20__Patch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Patch); }
      public:
        /// Constructor with default initializations
        resqml20__Patch() : PatchIndex(), soap() { }
        virtual ~resqml20__Patch() { }
        /// Friend allocator used by soap_new_resqml20__Patch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Patch * SOAP_FMAC2 soap_instantiate_resqml20__Patch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:294 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIndices (-81)
/* complex XML schema type 'resqml20:ElementIndices': */
class SOAP_CMAC resqml20__ElementIndices {
      public:
        /// Required element 'resqml20:IndexableElement' of XML schema type 'resqml20:IndexableElements'
        resqml20__IndexableElements IndexableElement;
        /// Required element 'resqml20:Indices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *Indices;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ElementIndices, default initialized and not managed by a soap context
        virtual resqml20__ElementIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ElementIndices); }
      public:
        /// Constructor with default initializations
        resqml20__ElementIndices() : IndexableElement(), Indices(), soap() { }
        virtual ~resqml20__ElementIndices() { }
        /// Friend allocator used by soap_new_resqml20__ElementIndices(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ElementIndices * SOAP_FMAC2 soap_instantiate_resqml20__ElementIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:302 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RepresentationIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RepresentationIdentity (-85)
/* complex XML schema type 'resqml20:RepresentationIdentity': */
class SOAP_CMAC resqml20__RepresentationIdentity {
      public:
        /// Required element 'resqml20:IdenticalElementCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 IdenticalElementCount;
        /// Required element 'resqml20:ElementIdentity' of XML schema type 'resqml20:ElementIdentity'
        std::vector<resqml20__ElementIdentity *> ElementIdentity;
        /// Optional element 'resqml20:AdditionalGridTopology' of XML schema type 'resqml20:AdditionalGridTopology'
        resqml20__AdditionalGridTopology *AdditionalGridTopology;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RepresentationIdentity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RepresentationIdentity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__RepresentationIdentity, default initialized and not managed by a soap context
        virtual resqml20__RepresentationIdentity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__RepresentationIdentity); }
      public:
        /// Constructor with default initializations
        resqml20__RepresentationIdentity() : IdenticalElementCount(), ElementIdentity(), AdditionalGridTopology(), soap() { }
        virtual ~resqml20__RepresentationIdentity() { }
        /// Friend allocator used by soap_new_resqml20__RepresentationIdentity(struct soap*, int)
        friend SOAP_FMAC1 resqml20__RepresentationIdentity * SOAP_FMAC2 soap_instantiate_resqml20__RepresentationIdentity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:306 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIdentity (-87)
/* complex XML schema type 'resqml20:ElementIdentity': */
class SOAP_CMAC resqml20__ElementIdentity {
      public:
        /// Optional element 'resqml20:ElementIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ElementIndices;
        /// Required element 'resqml20:IdentityKind' of XML schema type 'resqml20:IdentityKind'
        resqml20__IdentityKind IdentityKind;
        /// Required element 'resqml20:IndexableElement' of XML schema type 'resqml20:IndexableElements'
        resqml20__IndexableElements IndexableElement;
        /// Required element 'resqml20:Representation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Representation;
        /// Optional element 'resqml20:FromTimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *FromTimeIndex;
        /// Optional element 'resqml20:ToTimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *ToTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIdentity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIdentity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ElementIdentity, default initialized and not managed by a soap context
        virtual resqml20__ElementIdentity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ElementIdentity); }
      public:
        /// Constructor with default initializations
        resqml20__ElementIdentity() : ElementIndices(), IdentityKind(), IndexableElement(), Representation(), FromTimeIndex(), ToTimeIndex(), soap() { }
        virtual ~resqml20__ElementIdentity() { }
        /// Friend allocator used by soap_new_resqml20__ElementIdentity(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ElementIdentity * SOAP_FMAC2 soap_instantiate_resqml20__ElementIdentity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:310 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfGeometry (-89)
/* complex XML schema type 'resqml20:PatchOfGeometry': */
class SOAP_CMAC resqml20__PatchOfGeometry {
      public:
        /// Optional element 'resqml20:RepresentationPatchIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *RepresentationPatchIndex;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:AbstractGeometry'
        resqml20__AbstractGeometry *Geometry;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PatchOfGeometry, default initialized and not managed by a soap context
        virtual resqml20__PatchOfGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PatchOfGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__PatchOfGeometry() : RepresentationPatchIndex(), Geometry(), soap() { }
        virtual ~resqml20__PatchOfGeometry() { }
        /// Friend allocator used by soap_new_resqml20__PatchOfGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PatchOfGeometry * SOAP_FMAC2 soap_instantiate_resqml20__PatchOfGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:316 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridTopology (-92)
/* complex XML schema type 'resqml20:AdditionalGridTopology': */
class SOAP_CMAC resqml20__AdditionalGridTopology {
      public:
        /// Optional element 'resqml20:SplitEdges' of XML schema type 'resqml20:SplitEdges'
        resqml20__SplitEdges *SplitEdges;
        /// Optional element 'resqml20:SplitNodes' of XML schema type 'resqml20:SplitNodePatch'
        resqml20__SplitNodePatch *SplitNodes;
        /// Optional element 'resqml20:SplitColumnEdges' of XML schema type 'resqml20:ColumnLayerSplitColumnEdges'
        resqml20__ColumnLayerSplitColumnEdges *SplitColumnEdges;
        /// Optional element 'resqml20:UnstructuredColumnEdges' of XML schema type 'resqml20:UnstructuredColumnEdges'
        resqml20__UnstructuredColumnEdges *UnstructuredColumnEdges;
        /// Optional element 'resqml20:SplitFaces' of XML schema type 'resqml20:SplitFaces'
        resqml20__SplitFaces *SplitFaces;
        /// Optional element 'resqml20:IjSplitColumnEdges' of XML schema type 'resqml20:IjSplitColumnEdges'
        resqml20__IjSplitColumnEdges *IjSplitColumnEdges;
        /// Optional element 'resqml20:UnstructuredSubnodeTopology' of XML schema type 'resqml20:UnstructuredSubnodeTopology'
        resqml20__UnstructuredSubnodeTopology *UnstructuredSubnodeTopology;
        /// Optional element 'resqml20:ColumnLayerSubnodeTopology' of XML schema type 'resqml20:ColumnLayerSubnodeTopology'
        resqml20__ColumnLayerSubnodeTopology *ColumnLayerSubnodeTopology;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AdditionalGridTopology, default initialized and not managed by a soap context
        virtual resqml20__AdditionalGridTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AdditionalGridTopology); }
      public:
        /// Constructor with default initializations
        resqml20__AdditionalGridTopology() : SplitEdges(), SplitNodes(), SplitColumnEdges(), UnstructuredColumnEdges(), SplitFaces(), IjSplitColumnEdges(), UnstructuredSubnodeTopology(), ColumnLayerSubnodeTopology(), soap() { }
        virtual ~resqml20__AdditionalGridTopology() { }
        /// Friend allocator used by soap_new_resqml20__AdditionalGridTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AdditionalGridTopology * SOAP_FMAC2 soap_instantiate_resqml20__AdditionalGridTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:326 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellStratigraphicUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellStratigraphicUnits (-97)
/* complex XML schema type 'resqml20:CellStratigraphicUnits': */
class SOAP_CMAC resqml20__CellStratigraphicUnits {
      public:
        /// Required element 'resqml20:UnitIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *UnitIndices;
        /// Required element 'resqml20:StratigraphicOrganization' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *StratigraphicOrganization;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellStratigraphicUnits
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellStratigraphicUnits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__CellStratigraphicUnits, default initialized and not managed by a soap context
        virtual resqml20__CellStratigraphicUnits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__CellStratigraphicUnits); }
      public:
        /// Constructor with default initializations
        resqml20__CellStratigraphicUnits() : UnitIndices(), StratigraphicOrganization(), soap() { }
        virtual ~resqml20__CellStratigraphicUnits() { }
        /// Friend allocator used by soap_new_resqml20__CellStratigraphicUnits(struct soap*, int)
        friend SOAP_FMAC1 resqml20__CellStratigraphicUnits * SOAP_FMAC2 soap_instantiate_resqml20__CellStratigraphicUnits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:332 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeTopology (-100)
/* complex XML schema type 'resqml20:SubnodeTopology': */
class SOAP_CMAC resqml20__SubnodeTopology {
      public:
        /// Optional element 'resqml20:VariableSubnodes' of XML schema type 'resqml20:VariableSubnodePatch'
        std::vector<resqml20__VariableSubnodePatch *> VariableSubnodes;
        /// Optional element 'resqml20:UniformSubnodes' of XML schema type 'resqml20:UniformSubnodePatch'
        std::vector<resqml20__UniformSubnodePatch *> UniformSubnodes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SubnodeTopology, default initialized and not managed by a soap context
        virtual resqml20__SubnodeTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SubnodeTopology); }
      public:
        /// Constructor with default initializations
        resqml20__SubnodeTopology() : VariableSubnodes(), UniformSubnodes(), soap() { }
        virtual ~resqml20__SubnodeTopology() { }
        /// Friend allocator used by soap_new_resqml20__SubnodeTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SubnodeTopology * SOAP_FMAC2 soap_instantiate_resqml20__SubnodeTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:334 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitFaces
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitFaces (-101)
/* complex XML schema type 'resqml20:SplitFaces': */
class SOAP_CMAC resqml20__SplitFaces {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:ParentFaceIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParentFaceIndices;
        /// Required element 'resqml20:CellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *CellIndices;
        /// Optional element 'resqml20:SplitEdges' of XML schema type 'resqml20:SplitEdges'
        resqml20__SplitEdges *SplitEdges;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitFaces
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitFaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SplitFaces, default initialized and not managed by a soap context
        virtual resqml20__SplitFaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SplitFaces); }
      public:
        /// Constructor with default initializations
        resqml20__SplitFaces() : Count(), ParentFaceIndices(), CellIndices(), SplitEdges(), soap() { }
        virtual ~resqml20__SplitFaces() { }
        /// Friend allocator used by soap_new_resqml20__SplitFaces(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SplitFaces * SOAP_FMAC2 soap_instantiate_resqml20__SplitFaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:13994 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1___resqml20__IjGaps_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1___resqml20__IjGaps_sequence (-716)
/* Wrapper: */
struct SOAP_CMAC __resqml20__IjGaps_sequence {
      public:
        /** Required element 'resqml20:SplitPillarCount' of XML schema type 'xsd:positiveInteger' */
        ULONG64 SplitPillarCount;
        /** Required element 'resqml20:ParentPillarIndices' of XML schema type 'resqml20:AbstractIntegerArray' */
        resqml20__AbstractIntegerArray *ParentPillarIndices;
        /** Required element 'resqml20:ColumnsPerSplitPillar' of XML schema type 'resqml20:ResqmlJaggedArray' */
        resqml20__ResqmlJaggedArray *ColumnsPerSplitPillar;
        /** Optional element 'resqml20:IjSplitColumnEdges' of XML schema type 'resqml20:IjSplitColumnEdges' */
        resqml20__IjSplitColumnEdges *IjSplitColumnEdges;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1___resqml20__IjGaps_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1___resqml20__IjGaps_sequence; }
        /** Constructor with member initializations */
        __resqml20__IjGaps_sequence() : SplitPillarCount(), ParentPillarIndices(), ColumnsPerSplitPillar(), IjSplitColumnEdges() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml20__IjGaps_sequence * SOAP_FMAC2 soap_instantiate___resqml20__IjGaps_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:338 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjGaps
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjGaps (-103)
/* complex XML schema type 'resqml20:IjGaps': */
class SOAP_CMAC resqml20__IjGaps {
      public:
        struct __resqml20__IjGaps_sequence *__IjGaps_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjGaps
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjGaps; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IjGaps, default initialized and not managed by a soap context
        virtual resqml20__IjGaps *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IjGaps); }
      public:
        /// Constructor with default initializations
        resqml20__IjGaps() : __IjGaps_sequence(), soap() { }
        virtual ~resqml20__IjGaps() { }
        /// Friend allocator used by soap_new_resqml20__IjGaps(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IjGaps * SOAP_FMAC2 soap_instantiate_resqml20__IjGaps(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:348 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridColumnLayerGrid
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridColumnLayerGrid (-108)
/* complex XML schema type 'resqml20:GpGridColumnLayerGrid': */
class SOAP_CMAC resqml20__GpGridColumnLayerGrid {
      public:
        /// Required element 'resqml20:Nk' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Nk;
        /// Optional element 'resqml20:KGaps' of XML schema type 'resqml20:KGaps'
        resqml20__KGaps *KGaps;
        /// Optional element 'resqml20:IjkGridPatch' of XML schema type 'resqml20:GpGridIjkGridPatch'
        std::vector<resqml20__GpGridIjkGridPatch *> IjkGridPatch;
        /// Optional element 'resqml20:UnstructuredColumnLayerGridPatch' of XML schema type 'resqml20:GpGridUnstructuredColumnLayerGridPatch'
        std::vector<resqml20__GpGridUnstructuredColumnLayerGridPatch *> UnstructuredColumnLayerGridPatch;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridColumnLayerGrid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridColumnLayerGrid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__GpGridColumnLayerGrid, default initialized and not managed by a soap context
        virtual resqml20__GpGridColumnLayerGrid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__GpGridColumnLayerGrid); }
      public:
        /// Constructor with default initializations
        resqml20__GpGridColumnLayerGrid() : Nk(), KGaps(), IjkGridPatch(), UnstructuredColumnLayerGridPatch(), soap() { }
        virtual ~resqml20__GpGridColumnLayerGrid() { }
        /// Friend allocator used by soap_new_resqml20__GpGridColumnLayerGrid(struct soap*, int)
        friend SOAP_FMAC1 resqml20__GpGridColumnLayerGrid * SOAP_FMAC2 soap_instantiate_resqml20__GpGridColumnLayerGrid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:350 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitCoordinateLines
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitCoordinateLines (-109)
/* complex XML schema type 'resqml20:ColumnLayerSplitCoordinateLines': */
class SOAP_CMAC resqml20__ColumnLayerSplitCoordinateLines {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:PillarIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *PillarIndices;
        /// Required element 'resqml20:ColumnsPerSplitCoordinateLine' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *ColumnsPerSplitCoordinateLine;
        /// Optional element 'resqml20:SplitColumnEdges' of XML schema type 'resqml20:ColumnLayerSplitColumnEdges'
        resqml20__ColumnLayerSplitColumnEdges *SplitColumnEdges;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitCoordinateLines
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitCoordinateLines; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ColumnLayerSplitCoordinateLines, default initialized and not managed by a soap context
        virtual resqml20__ColumnLayerSplitCoordinateLines *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ColumnLayerSplitCoordinateLines); }
      public:
        /// Constructor with default initializations
        resqml20__ColumnLayerSplitCoordinateLines() : Count(), PillarIndices(), ColumnsPerSplitCoordinateLine(), SplitColumnEdges(), soap() { }
        virtual ~resqml20__ColumnLayerSplitCoordinateLines() { }
        /// Friend allocator used by soap_new_resqml20__ColumnLayerSplitCoordinateLines(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ColumnLayerSplitCoordinateLines * SOAP_FMAC2 soap_instantiate_resqml20__ColumnLayerSplitCoordinateLines(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:14126 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1___resqml20__KGaps_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1___resqml20__KGaps_sequence (-724)
/* Wrapper: */
struct SOAP_CMAC __resqml20__KGaps_sequence {
      public:
        /** Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger' */
        ULONG64 Count;
        /** Required element 'resqml20:GapAfterLayer' of XML schema type 'resqml20:AbstractBooleanArray' */
        resqml20__AbstractBooleanArray *GapAfterLayer;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1___resqml20__KGaps_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1___resqml20__KGaps_sequence; }
        /** Constructor with member initializations */
        __resqml20__KGaps_sequence() : Count(), GapAfterLayer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml20__KGaps_sequence * SOAP_FMAC2 soap_instantiate___resqml20__KGaps_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:354 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KGaps
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KGaps (-111)
/* complex XML schema type 'resqml20:KGaps': */
class SOAP_CMAC resqml20__KGaps {
      public:
        struct __resqml20__KGaps_sequence *__KGaps_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KGaps
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KGaps; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__KGaps, default initialized and not managed by a soap context
        virtual resqml20__KGaps *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__KGaps); }
      public:
        /// Constructor with default initializations
        resqml20__KGaps() : __KGaps_sequence(), soap() { }
        virtual ~resqml20__KGaps() { }
        /// Friend allocator used by soap_new_resqml20__KGaps(struct soap*, int)
        friend SOAP_FMAC1 resqml20__KGaps * SOAP_FMAC2 soap_instantiate_resqml20__KGaps(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:360 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnEdges (-114)
/* complex XML schema type 'resqml20:UnstructuredColumnEdges': */
class SOAP_CMAC resqml20__UnstructuredColumnEdges {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:PillarsPerColumnEdge' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *PillarsPerColumnEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__UnstructuredColumnEdges, default initialized and not managed by a soap context
        virtual resqml20__UnstructuredColumnEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__UnstructuredColumnEdges); }
      public:
        /// Constructor with default initializations
        resqml20__UnstructuredColumnEdges() : Count(), PillarsPerColumnEdge(), soap() { }
        virtual ~resqml20__UnstructuredColumnEdges() { }
        /// Friend allocator used by soap_new_resqml20__UnstructuredColumnEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml20__UnstructuredColumnEdges * SOAP_FMAC2 soap_instantiate_resqml20__UnstructuredColumnEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:362 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridPoints (-115)
/* complex XML schema type 'resqml20:AdditionalGridPoints': */
class SOAP_CMAC resqml20__AdditionalGridPoints {
      public:
        /// Optional element 'resqml20:RepresentationPatchIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *RepresentationPatchIndex;
        /// Required element 'resqml20:Attachment' of XML schema type 'resqml20:GridGeometryAttachment'
        resqml20__GridGeometryAttachment Attachment;
        /// Required element 'resqml20:Points' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *Points;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridPoints
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridPoints; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AdditionalGridPoints, default initialized and not managed by a soap context
        virtual resqml20__AdditionalGridPoints *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AdditionalGridPoints); }
      public:
        /// Constructor with default initializations
        resqml20__AdditionalGridPoints() : RepresentationPatchIndex(), Attachment(), Points(), soap() { }
        virtual ~resqml20__AdditionalGridPoints() { }
        /// Friend allocator used by soap_new_resqml20__AdditionalGridPoints(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AdditionalGridPoints * SOAP_FMAC2 soap_instantiate_resqml20__AdditionalGridPoints(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:364 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjSplitColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjSplitColumnEdges (-116)
/* complex XML schema type 'resqml20:IjSplitColumnEdges': */
class SOAP_CMAC resqml20__IjSplitColumnEdges {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:PillarsPerSplitColumnEdge' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *PillarsPerSplitColumnEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjSplitColumnEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjSplitColumnEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IjSplitColumnEdges, default initialized and not managed by a soap context
        virtual resqml20__IjSplitColumnEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IjSplitColumnEdges); }
      public:
        /// Constructor with default initializations
        resqml20__IjSplitColumnEdges() : Count(), PillarsPerSplitColumnEdge(), soap() { }
        virtual ~resqml20__IjSplitColumnEdges() { }
        /// Friend allocator used by soap_new_resqml20__IjSplitColumnEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IjSplitColumnEdges * SOAP_FMAC2 soap_instantiate_resqml20__IjSplitColumnEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:370 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalStratigraphicUnits (-119)
/* complex XML schema type 'resqml20:IntervalStratigraphicUnits': */
class SOAP_CMAC resqml20__IntervalStratigraphicUnits {
      public:
        /// Required element 'resqml20:UnitIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *UnitIndices;
        /// Required element 'resqml20:StratigraphicOrganization' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *StratigraphicOrganization;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalStratigraphicUnits
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalStratigraphicUnits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntervalStratigraphicUnits, default initialized and not managed by a soap context
        virtual resqml20__IntervalStratigraphicUnits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntervalStratigraphicUnits); }
      public:
        /// Constructor with default initializations
        resqml20__IntervalStratigraphicUnits() : UnitIndices(), StratigraphicOrganization(), soap() { }
        virtual ~resqml20__IntervalStratigraphicUnits() { }
        /// Friend allocator used by soap_new_resqml20__IntervalStratigraphicUnits(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntervalStratigraphicUnits * SOAP_FMAC2 soap_instantiate_resqml20__IntervalStratigraphicUnits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:372 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Regrid
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Regrid (-120)
/* complex XML schema type 'resqml20:Regrid': */
class SOAP_CMAC resqml20__Regrid {
      public:
        /// Required element 'resqml20:InitialIndexOnParentGrid' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 InitialIndexOnParentGrid;
        /// Optional element 'resqml20:Intervals' of XML schema type 'resqml20:Intervals'
        resqml20__Intervals *Intervals;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Regrid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Regrid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Regrid, default initialized and not managed by a soap context
        virtual resqml20__Regrid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Regrid); }
      public:
        /// Constructor with default initializations
        resqml20__Regrid() : InitialIndexOnParentGrid(), Intervals(), soap() { }
        virtual ~resqml20__Regrid() { }
        /// Friend allocator used by soap_new_resqml20__Regrid(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Regrid * SOAP_FMAC2 soap_instantiate_resqml20__Regrid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:374 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Activation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Activation (-121)
/* complex XML schema type 'resqml20:Activation': */
class SOAP_CMAC resqml20__Activation {
      public:
        /// Required element 'resqml20:ActivationToggleIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ActivationToggleIndices;
        /// Required element 'resqml20:TimeSeries' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Activation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Activation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Activation, default initialized and not managed by a soap context
        virtual resqml20__Activation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Activation); }
      public:
        /// Constructor with default initializations
        resqml20__Activation() : ActivationToggleIndices(), TimeSeries(), soap() { }
        virtual ~resqml20__Activation() { }
        /// Friend allocator used by soap_new_resqml20__Activation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Activation * SOAP_FMAC2 soap_instantiate_resqml20__Activation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:380 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ConnectionInterpretations
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ConnectionInterpretations (-124)
/* complex XML schema type 'resqml20:ConnectionInterpretations': */
class SOAP_CMAC resqml20__ConnectionInterpretations {
      public:
        /// Required element 'resqml20:InterpretationIndices' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *InterpretationIndices;
        /// Required element 'resqml20:FeatureInterpretation' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> FeatureInterpretation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ConnectionInterpretations
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ConnectionInterpretations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ConnectionInterpretations, default initialized and not managed by a soap context
        virtual resqml20__ConnectionInterpretations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ConnectionInterpretations); }
      public:
        /// Constructor with default initializations
        resqml20__ConnectionInterpretations() : InterpretationIndices(), FeatureInterpretation(), soap() { }
        virtual ~resqml20__ConnectionInterpretations() { }
        /// Friend allocator used by soap_new_resqml20__ConnectionInterpretations(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ConnectionInterpretations * SOAP_FMAC2 soap_instantiate_resqml20__ConnectionInterpretations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:384 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitEdges (-126)
/* complex XML schema type 'resqml20:SplitEdges': */
class SOAP_CMAC resqml20__SplitEdges {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:ParentEdgeIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParentEdgeIndices;
        /// Required element 'resqml20:FacesPerSplitEdge' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *FacesPerSplitEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SplitEdges, default initialized and not managed by a soap context
        virtual resqml20__SplitEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SplitEdges); }
      public:
        /// Constructor with default initializations
        resqml20__SplitEdges() : Count(), ParentEdgeIndices(), FacesPerSplitEdge(), soap() { }
        virtual ~resqml20__SplitEdges() { }
        /// Friend allocator used by soap_new_resqml20__SplitEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SplitEdges * SOAP_FMAC2 soap_instantiate_resqml20__SplitEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:386 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellFluidPhaseUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellFluidPhaseUnits (-127)
/* complex XML schema type 'resqml20:CellFluidPhaseUnits': */
class SOAP_CMAC resqml20__CellFluidPhaseUnits {
      public:
        /// Required element 'resqml20:PhaseUnitIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *PhaseUnitIndices;
        /// Required element 'resqml20:FluidOrganization' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *FluidOrganization;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellFluidPhaseUnits
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellFluidPhaseUnits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__CellFluidPhaseUnits, default initialized and not managed by a soap context
        virtual resqml20__CellFluidPhaseUnits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__CellFluidPhaseUnits); }
      public:
        /// Constructor with default initializations
        resqml20__CellFluidPhaseUnits() : PhaseUnitIndices(), FluidOrganization(), soap() { }
        virtual ~resqml20__CellFluidPhaseUnits() { }
        /// Friend allocator used by soap_new_resqml20__CellFluidPhaseUnits(struct soap*, int)
        friend SOAP_FMAC1 resqml20__CellFluidPhaseUnits * SOAP_FMAC2 soap_instantiate_resqml20__CellFluidPhaseUnits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:388 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodesPerCell
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodesPerCell (-128)
/* complex XML schema type 'resqml20:NodesPerCell': */
class SOAP_CMAC resqml20__NodesPerCell {
      public:
        /// Required element 'resqml20:NodesPerCell' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *NodesPerCell;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodesPerCell
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodesPerCell; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__NodesPerCell, default initialized and not managed by a soap context
        virtual resqml20__NodesPerCell *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__NodesPerCell); }
      public:
        /// Constructor with default initializations
        resqml20__NodesPerCell() : NodesPerCell(), soap() { }
        virtual ~resqml20__NodesPerCell() { }
        /// Friend allocator used by soap_new_resqml20__NodesPerCell(struct soap*, int)
        friend SOAP_FMAC1 resqml20__NodesPerCell * SOAP_FMAC2 soap_instantiate_resqml20__NodesPerCell(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:392 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Edges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Edges (-130)
/* complex XML schema type 'resqml20:Edges': */
class SOAP_CMAC resqml20__Edges {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:NodesPerEdge' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *NodesPerEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Edges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Edges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Edges, default initialized and not managed by a soap context
        virtual resqml20__Edges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Edges); }
      public:
        /// Constructor with default initializations
        resqml20__Edges() : Count(), NodesPerEdge(), soap() { }
        virtual ~resqml20__Edges() { }
        /// Friend allocator used by soap_new_resqml20__Edges(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Edges * SOAP_FMAC2 soap_instantiate_resqml20__Edges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:408 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridHingeNodeFaces
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridHingeNodeFaces (-138)
/* complex XML schema type 'resqml20:UnstructuredGridHingeNodeFaces': */
class SOAP_CMAC resqml20__UnstructuredGridHingeNodeFaces {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:FaceIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *FaceIndices;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridHingeNodeFaces
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridHingeNodeFaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__UnstructuredGridHingeNodeFaces, default initialized and not managed by a soap context
        virtual resqml20__UnstructuredGridHingeNodeFaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__UnstructuredGridHingeNodeFaces); }
      public:
        /// Constructor with default initializations
        resqml20__UnstructuredGridHingeNodeFaces() : Count(), FaceIndices(), soap() { }
        virtual ~resqml20__UnstructuredGridHingeNodeFaces() { }
        /// Friend allocator used by soap_new_resqml20__UnstructuredGridHingeNodeFaces(struct soap*, int)
        friend SOAP_FMAC1 resqml20__UnstructuredGridHingeNodeFaces * SOAP_FMAC2 soap_instantiate_resqml20__UnstructuredGridHingeNodeFaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:14582 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1___resqml20__CellOverlap_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1___resqml20__CellOverlap_sequence (-729)
/* Wrapper: */
struct SOAP_CMAC __resqml20__CellOverlap_sequence {
      public:
        /** Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger' */
        ULONG64 Count;
        /** Required element 'resqml20:ParentChildCellPairs' of XML schema type 'resqml20:AbstractIntegerArray' */
        resqml20__AbstractIntegerArray *ParentChildCellPairs;
        /** Optional element 'resqml20:OverlapVolume' of XML schema type 'resqml20:OverlapVolume' */
        resqml20__OverlapVolume *OverlapVolume;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1___resqml20__CellOverlap_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1___resqml20__CellOverlap_sequence; }
        /** Constructor with member initializations */
        __resqml20__CellOverlap_sequence() : Count(), ParentChildCellPairs(), OverlapVolume() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml20__CellOverlap_sequence * SOAP_FMAC2 soap_instantiate___resqml20__CellOverlap_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:410 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellOverlap
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellOverlap (-139)
/* complex XML schema type 'resqml20:CellOverlap': */
class SOAP_CMAC resqml20__CellOverlap {
      public:
        struct __resqml20__CellOverlap_sequence *__CellOverlap_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellOverlap
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellOverlap; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__CellOverlap, default initialized and not managed by a soap context
        virtual resqml20__CellOverlap *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__CellOverlap); }
      public:
        /// Constructor with default initializations
        resqml20__CellOverlap() : __CellOverlap_sequence(), soap() { }
        virtual ~resqml20__CellOverlap() { }
        /// Friend allocator used by soap_new_resqml20__CellOverlap(struct soap*, int)
        friend SOAP_FMAC1 resqml20__CellOverlap * SOAP_FMAC2 soap_instantiate_resqml20__CellOverlap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:412 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitColumnEdges (-140)
/* complex XML schema type 'resqml20:ColumnLayerSplitColumnEdges': */
class SOAP_CMAC resqml20__ColumnLayerSplitColumnEdges {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:ParentColumnEdgeIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParentColumnEdgeIndices;
        /// Required element 'resqml20:ColumnPerSplitColumnEdge' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ColumnPerSplitColumnEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitColumnEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitColumnEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ColumnLayerSplitColumnEdges, default initialized and not managed by a soap context
        virtual resqml20__ColumnLayerSplitColumnEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ColumnLayerSplitColumnEdges); }
      public:
        /// Constructor with default initializations
        resqml20__ColumnLayerSplitColumnEdges() : Count(), ParentColumnEdgeIndices(), ColumnPerSplitColumnEdge(), soap() { }
        virtual ~resqml20__ColumnLayerSplitColumnEdges() { }
        /// Friend allocator used by soap_new_resqml20__ColumnLayerSplitColumnEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ColumnLayerSplitColumnEdges * SOAP_FMAC2 soap_instantiate_resqml20__ColumnLayerSplitColumnEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:14666 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1___resqml20__OverlapVolume_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1___resqml20__OverlapVolume_sequence (-732)
/* Wrapper: */
struct SOAP_CMAC __resqml20__OverlapVolume_sequence {
      public:
        /** Required element 'resqml20:VolumeUom' of XML schema type 'eml20:VolumeUom' */
        eml20__VolumeUom VolumeUom;
        /** Required element 'resqml20:OverlapVolumes' of XML schema type 'resqml20:AbstractDoubleArray' */
        resqml20__AbstractDoubleArray *OverlapVolumes;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1___resqml20__OverlapVolume_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1___resqml20__OverlapVolume_sequence; }
        /** Constructor with member initializations */
        __resqml20__OverlapVolume_sequence() : VolumeUom(), OverlapVolumes() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml20__OverlapVolume_sequence * SOAP_FMAC2 soap_instantiate___resqml20__OverlapVolume_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:416 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OverlapVolume
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OverlapVolume (-142)
/* complex XML schema type 'resqml20:OverlapVolume': */
class SOAP_CMAC resqml20__OverlapVolume {
      public:
        struct __resqml20__OverlapVolume_sequence *__OverlapVolume_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OverlapVolume
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OverlapVolume; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__OverlapVolume, default initialized and not managed by a soap context
        virtual resqml20__OverlapVolume *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__OverlapVolume); }
      public:
        /// Constructor with default initializations
        resqml20__OverlapVolume() : __OverlapVolume_sequence(), soap() { }
        virtual ~resqml20__OverlapVolume() { }
        /// Friend allocator used by soap_new_resqml20__OverlapVolume(struct soap*, int)
        friend SOAP_FMAC1 resqml20__OverlapVolume * SOAP_FMAC2 soap_instantiate_resqml20__OverlapVolume(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:418 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Intervals
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Intervals (-143)
/* complex XML schema type 'resqml20:Intervals': */
class SOAP_CMAC resqml20__Intervals {
      public:
        /// Required element 'resqml20:IntervalCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 IntervalCount;
        /// Required element 'resqml20:ParentCountPerInterval' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParentCountPerInterval;
        /// Required element 'resqml20:ChildCountPerInterval' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ChildCountPerInterval;
        /// Optional element 'resqml20:ChildCellWeights' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *ChildCellWeights;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Intervals
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Intervals; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Intervals, default initialized and not managed by a soap context
        virtual resqml20__Intervals *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Intervals); }
      public:
        /// Constructor with default initializations
        resqml20__Intervals() : IntervalCount(), ParentCountPerInterval(), ChildCountPerInterval(), ChildCellWeights(), soap() { }
        virtual ~resqml20__Intervals() { }
        /// Friend allocator used by soap_new_resqml20__Intervals(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Intervals * SOAP_FMAC2 soap_instantiate_resqml20__Intervals(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:422 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParentWindow (-145)
/* complex XML schema type 'resqml20:AbstractParentWindow': */
class SOAP_CMAC resqml20__AbstractParentWindow {
      public:
        /// Optional element 'resqml20:CellOverlap' of XML schema type 'resqml20:CellOverlap'
        resqml20__CellOverlap *CellOverlap;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractParentWindow, default initialized and not managed by a soap context
        virtual resqml20__AbstractParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractParentWindow); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractParentWindow() : CellOverlap(), soap() { }
        virtual ~resqml20__AbstractParentWindow() { }
        /// Friend allocator used by soap_new_resqml20__AbstractParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractParentWindow * SOAP_FMAC2 soap_instantiate_resqml20__AbstractParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:428 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeInterval
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeInterval (-148)
/* complex XML schema type 'resqml20:TimeInterval': */
class SOAP_CMAC resqml20__TimeInterval {
      public:
        /// Required element 'resqml20:ChronoBottom' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ChronoBottom;
        /// Required element 'resqml20:ChronoTop' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ChronoTop;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TimeInterval, default initialized and not managed by a soap context
        virtual resqml20__TimeInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TimeInterval); }
      public:
        /// Constructor with default initializations
        resqml20__TimeInterval() : ChronoBottom(), ChronoTop(), soap() { }
        virtual ~resqml20__TimeInterval() { }
        /// Friend allocator used by soap_new_resqml20__TimeInterval(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TimeInterval * SOAP_FMAC2 soap_instantiate_resqml20__TimeInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:434 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StratigraphicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StratigraphicUnitInterpretationIndex (-151)
/* complex XML schema type 'resqml20:StratigraphicUnitInterpretationIndex': */
class SOAP_CMAC resqml20__StratigraphicUnitInterpretationIndex {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Required element 'resqml20:Unit' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Unit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StratigraphicUnitInterpretationIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StratigraphicUnitInterpretationIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StratigraphicUnitInterpretationIndex, default initialized and not managed by a soap context
        virtual resqml20__StratigraphicUnitInterpretationIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StratigraphicUnitInterpretationIndex); }
      public:
        /// Constructor with default initializations
        resqml20__StratigraphicUnitInterpretationIndex() : Index(), Unit(), soap() { }
        virtual ~resqml20__StratigraphicUnitInterpretationIndex() { }
        /// Friend allocator used by soap_new_resqml20__StratigraphicUnitInterpretationIndex(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StratigraphicUnitInterpretationIndex * SOAP_FMAC2 soap_instantiate_resqml20__StratigraphicUnitInterpretationIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:444 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitInterpretationIndex (-156)
/* complex XML schema type 'resqml20:GeologicUnitInterpretationIndex': */
class SOAP_CMAC resqml20__GeologicUnitInterpretationIndex {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Required element 'resqml20:Unit' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Unit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitInterpretationIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitInterpretationIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__GeologicUnitInterpretationIndex, default initialized and not managed by a soap context
        virtual resqml20__GeologicUnitInterpretationIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__GeologicUnitInterpretationIndex); }
      public:
        /// Constructor with default initializations
        resqml20__GeologicUnitInterpretationIndex() : Index(), Unit(), soap() { }
        virtual ~resqml20__GeologicUnitInterpretationIndex() { }
        /// Friend allocator used by soap_new_resqml20__GeologicUnitInterpretationIndex(struct soap*, int)
        friend SOAP_FMAC1 resqml20__GeologicUnitInterpretationIndex * SOAP_FMAC2 soap_instantiate_resqml20__GeologicUnitInterpretationIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:452 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizonInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizonInterpretationIndex (-160)
/* complex XML schema type 'resqml20:HorizonInterpretationIndex': */
class SOAP_CMAC resqml20__HorizonInterpretationIndex {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Optional element 'resqml20:StratigraphicRank' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *StratigraphicRank;
        /// Required element 'resqml20:Horizon' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Horizon;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizonInterpretationIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizonInterpretationIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__HorizonInterpretationIndex, default initialized and not managed by a soap context
        virtual resqml20__HorizonInterpretationIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__HorizonInterpretationIndex); }
      public:
        /// Constructor with default initializations
        resqml20__HorizonInterpretationIndex() : Index(), StratigraphicRank(), Horizon(), soap() { }
        virtual ~resqml20__HorizonInterpretationIndex() { }
        /// Friend allocator used by soap_new_resqml20__HorizonInterpretationIndex(struct soap*, int)
        friend SOAP_FMAC1 resqml20__HorizonInterpretationIndex * SOAP_FMAC2 soap_instantiate_resqml20__HorizonInterpretationIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:462 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactInterpretationPart (-165)
/* complex XML schema type 'resqml20:AbstractContactInterpretationPart': */
class SOAP_CMAC resqml20__AbstractContactInterpretationPart {
      public:
        /// Required element 'resqml20:ContactRelationship' of XML schema type 'resqml20:ContactRelationship'
        resqml20__ContactRelationship ContactRelationship;
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Optional element 'resqml20:PartOf' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *PartOf;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactInterpretationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactInterpretationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractContactInterpretationPart, default initialized and not managed by a soap context
        virtual resqml20__AbstractContactInterpretationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractContactInterpretationPart); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractContactInterpretationPart() : ContactRelationship(), Index(), PartOf(), soap() { }
        virtual ~resqml20__AbstractContactInterpretationPart() { }
        /// Friend allocator used by soap_new_resqml20__AbstractContactInterpretationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractContactInterpretationPart * SOAP_FMAC2 soap_instantiate_resqml20__AbstractContactInterpretationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:466 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FaultThrow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FaultThrow (-167)
/* complex XML schema type 'resqml20:FaultThrow': */
class SOAP_CMAC resqml20__FaultThrow {
      public:
        /// Required element 'resqml20:Throw' of XML schema type 'resqml20:ThrowKind'
        std::vector<resqml20__ThrowKind> Throw;
        /// Optional element 'resqml20:HasOccuredDuring' of XML schema type 'resqml20:TimeInterval'
        resqml20__TimeInterval *HasOccuredDuring;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FaultThrow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FaultThrow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__FaultThrow, default initialized and not managed by a soap context
        virtual resqml20__FaultThrow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__FaultThrow); }
      public:
        /// Constructor with default initializations
        resqml20__FaultThrow() : Throw(), HasOccuredDuring(), soap() { }
        virtual ~resqml20__FaultThrow() { }
        /// Friend allocator used by soap_new_resqml20__FaultThrow(struct soap*, int)
        friend SOAP_FMAC1 resqml20__FaultThrow * SOAP_FMAC2 soap_instantiate_resqml20__FaultThrow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:472 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RockFluidUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RockFluidUnitInterpretationIndex (-170)
/* complex XML schema type 'resqml20:RockFluidUnitInterpretationIndex': */
class SOAP_CMAC resqml20__RockFluidUnitInterpretationIndex {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Required element 'resqml20:RockFluidUnit' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *RockFluidUnit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RockFluidUnitInterpretationIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RockFluidUnitInterpretationIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__RockFluidUnitInterpretationIndex, default initialized and not managed by a soap context
        virtual resqml20__RockFluidUnitInterpretationIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__RockFluidUnitInterpretationIndex); }
      public:
        /// Constructor with default initializations
        resqml20__RockFluidUnitInterpretationIndex() : Index(), RockFluidUnit(), soap() { }
        virtual ~resqml20__RockFluidUnitInterpretationIndex() { }
        /// Friend allocator used by soap_new_resqml20__RockFluidUnitInterpretationIndex(struct soap*, int)
        friend SOAP_FMAC1 resqml20__RockFluidUnitInterpretationIndex * SOAP_FMAC2 soap_instantiate_resqml20__RockFluidUnitInterpretationIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:490 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ChronostratigraphicRank
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ChronostratigraphicRank (-179)
/* complex XML schema type 'resqml20:ChronostratigraphicRank': */
class SOAP_CMAC resqml20__ChronostratigraphicRank {
      public:
        /// Required element 'resqml20:Name' of XML schema type 'eml20:NameString'
        std::string Name;
        /// Required element 'resqml20:Contains' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Contains;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ChronostratigraphicRank
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ChronostratigraphicRank; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ChronostratigraphicRank, default initialized and not managed by a soap context
        virtual resqml20__ChronostratigraphicRank *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ChronostratigraphicRank); }
      public:
        /// Constructor with default initializations
        resqml20__ChronostratigraphicRank() : Name(), Contains(), soap() { }
        virtual ~resqml20__ChronostratigraphicRank() { }
        /// Friend allocator used by soap_new_resqml20__ChronostratigraphicRank(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ChronostratigraphicRank * SOAP_FMAC2 soap_instantiate_resqml20__ChronostratigraphicRank(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:508 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3d
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3d (-188)
/* complex XML schema type 'resqml20:Point3d': */
class SOAP_CMAC resqml20__Point3d {
      public:
        /// Required element 'resqml20:Coordinate1' of XML schema type 'xsd:double'
        double Coordinate1;
        /// Required element 'resqml20:Coordinate2' of XML schema type 'xsd:double'
        double Coordinate2;
        /// Required element 'resqml20:Coordinate3' of XML schema type 'xsd:double'
        double Coordinate3;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3d
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3d; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3d, default initialized and not managed by a soap context
        virtual resqml20__Point3d *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3d); }
      public:
        /// Constructor with default initializations
        resqml20__Point3d() : Coordinate1(), Coordinate2(), Coordinate3(), soap() { }
        virtual ~resqml20__Point3d() { }
        /// Friend allocator used by soap_new_resqml20__Point3d(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3d * SOAP_FMAC2 soap_instantiate_resqml20__Point3d(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:510 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSeriesParentage
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSeriesParentage (-189)
/* complex XML schema type 'resqml20:TimeSeriesParentage': */
class SOAP_CMAC resqml20__TimeSeriesParentage {
      public:
        /// Required element 'resqml20:HasOverlap' of XML schema type 'xsd:boolean'
        bool HasOverlap;
        /// Required element 'resqml20:ParentTimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *ParentTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSeriesParentage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSeriesParentage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TimeSeriesParentage, default initialized and not managed by a soap context
        virtual resqml20__TimeSeriesParentage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TimeSeriesParentage); }
      public:
        /// Constructor with default initializations
        resqml20__TimeSeriesParentage() : HasOverlap(), ParentTimeIndex(), soap() { }
        virtual ~resqml20__TimeSeriesParentage() { }
        /// Friend allocator used by soap_new_resqml20__TimeSeriesParentage(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TimeSeriesParentage * SOAP_FMAC2 soap_instantiate_resqml20__TimeSeriesParentage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:514 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndex (-191)
/* complex XML schema type 'resqml20:TimeIndex': */
class SOAP_CMAC resqml20__TimeIndex {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Required element 'resqml20:TimeSeries' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TimeIndex, default initialized and not managed by a soap context
        virtual resqml20__TimeIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TimeIndex); }
      public:
        /// Constructor with default initializations
        resqml20__TimeIndex() : Index(), TimeSeries(), soap() { }
        virtual ~resqml20__TimeIndex() { }
        /// Friend allocator used by soap_new_resqml20__TimeIndex(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TimeIndex * SOAP_FMAC2 soap_instantiate_resqml20__TimeIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:516 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Timestamp
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Timestamp (-192)
/* complex XML schema type 'resqml20:Timestamp': */
class SOAP_CMAC resqml20__Timestamp {
      public:
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm DateTime;
        /// Optional element 'resqml20:YearOffset' of XML schema type 'xsd:long'
        LONG64 *YearOffset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Timestamp
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Timestamp; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Timestamp, default initialized and not managed by a soap context
        virtual resqml20__Timestamp *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Timestamp); }
      public:
        /// Constructor with default initializations
        resqml20__Timestamp() : DateTime(), YearOffset(), soap() { }
        virtual ~resqml20__Timestamp() { }
        /// Friend allocator used by soap_new_resqml20__Timestamp(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Timestamp * SOAP_FMAC2 soap_instantiate_resqml20__Timestamp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:520 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlJaggedArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlJaggedArray (-194)
/* complex XML schema type 'resqml20:ResqmlJaggedArray': */
class SOAP_CMAC resqml20__ResqmlJaggedArray {
      public:
        /// Required element 'resqml20:Elements' of XML schema type 'resqml20:AbstractValueArray'
        resqml20__AbstractValueArray *Elements;
        /// Required element 'resqml20:CumulativeLength' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *CumulativeLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlJaggedArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlJaggedArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ResqmlJaggedArray, default initialized and not managed by a soap context
        virtual resqml20__ResqmlJaggedArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ResqmlJaggedArray); }
      public:
        /// Constructor with default initializations
        resqml20__ResqmlJaggedArray() : Elements(), CumulativeLength(), soap() { }
        virtual ~resqml20__ResqmlJaggedArray() { }
        /// Friend allocator used by soap_new_resqml20__ResqmlJaggedArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ResqmlJaggedArray * SOAP_FMAC2 soap_instantiate_resqml20__ResqmlJaggedArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:522 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NameValuePair
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NameValuePair (-195)
/* complex XML schema type 'resqml20:NameValuePair': */
class SOAP_CMAC resqml20__NameValuePair {
      public:
        /// Required element 'resqml20:Name' of XML schema type 'xsd:string'
        std::string Name;
        /// Required element 'resqml20:Value' of XML schema type 'xsd:string'
        std::string Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NameValuePair
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NameValuePair; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__NameValuePair, default initialized and not managed by a soap context
        virtual resqml20__NameValuePair *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__NameValuePair); }
      public:
        /// Constructor with default initializations
        resqml20__NameValuePair() : Name(), Value(), soap() { }
        virtual ~resqml20__NameValuePair() { }
        /// Friend allocator used by soap_new_resqml20__NameValuePair(struct soap*, int)
        friend SOAP_FMAC1 resqml20__NameValuePair * SOAP_FMAC2 soap_instantiate_resqml20__NameValuePair(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:532 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreTrajectoryParentIntersection
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreTrajectoryParentIntersection (-200)
/* complex XML schema type 'resqml20:WellboreTrajectoryParentIntersection': */
class SOAP_CMAC resqml20__WellboreTrajectoryParentIntersection {
      public:
        /// Required element 'resqml20:KickoffMd' of XML schema type 'xsd:double'
        double KickoffMd;
        /// Required element 'resqml20:ParentMd' of XML schema type 'xsd:double'
        double ParentMd;
        /// Required element 'resqml20:ParentTrajectory' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ParentTrajectory;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreTrajectoryParentIntersection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreTrajectoryParentIntersection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__WellboreTrajectoryParentIntersection, default initialized and not managed by a soap context
        virtual resqml20__WellboreTrajectoryParentIntersection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__WellboreTrajectoryParentIntersection); }
      public:
        /// Constructor with default initializations
        resqml20__WellboreTrajectoryParentIntersection() : KickoffMd(), ParentMd(), ParentTrajectory(), soap() { }
        virtual ~resqml20__WellboreTrajectoryParentIntersection() { }
        /// Friend allocator used by soap_new_resqml20__WellboreTrajectoryParentIntersection(struct soap*, int)
        friend SOAP_FMAC1 resqml20__WellboreTrajectoryParentIntersection * SOAP_FMAC2 soap_instantiate_resqml20__WellboreTrajectoryParentIntersection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:558 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactRepresentationPart (-213)
/* complex XML schema type 'resqml20:AbstractContactRepresentationPart': */
class SOAP_CMAC resqml20__AbstractContactRepresentationPart {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactRepresentationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactRepresentationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractContactRepresentationPart, default initialized and not managed by a soap context
        virtual resqml20__AbstractContactRepresentationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractContactRepresentationPart); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractContactRepresentationPart() : Index(), soap() { }
        virtual ~resqml20__AbstractContactRepresentationPart() { }
        /// Friend allocator used by soap_new_resqml20__AbstractContactRepresentationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractContactRepresentationPart * SOAP_FMAC2 soap_instantiate_resqml20__AbstractContactRepresentationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:568 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeRegion
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeRegion (-218)
/* complex XML schema type 'resqml20:VolumeRegion': */
class SOAP_CMAC resqml20__VolumeRegion {
      public:
        /// Required element 'resqml20:PatchIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 PatchIndex;
        /// Optional element 'resqml20:InternalShells' of XML schema type 'resqml20:VolumeShell'
        std::vector<resqml20__VolumeShell *> InternalShells;
        /// Required element 'resqml20:Represents' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Represents;
        /// Required element 'resqml20:ExternalShell' of XML schema type 'resqml20:VolumeShell'
        resqml20__VolumeShell *ExternalShell;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeRegion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeRegion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__VolumeRegion, default initialized and not managed by a soap context
        virtual resqml20__VolumeRegion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__VolumeRegion); }
      public:
        /// Constructor with default initializations
        resqml20__VolumeRegion() : PatchIndex(), InternalShells(), Represents(), ExternalShell(), soap() { }
        virtual ~resqml20__VolumeRegion() { }
        /// Friend allocator used by soap_new_resqml20__VolumeRegion(struct soap*, int)
        friend SOAP_FMAC1 resqml20__VolumeRegion * SOAP_FMAC2 soap_instantiate_resqml20__VolumeRegion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:570 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeShell
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeShell (-219)
/* complex XML schema type 'resqml20:VolumeShell': */
class SOAP_CMAC resqml20__VolumeShell {
      public:
        /// Required element 'resqml20:ShellUid' of XML schema type 'xsd:string'
        std::string ShellUid;
        /// Required element 'resqml20:MacroFaces' of XML schema type 'resqml20:OrientedMacroFace'
        std::vector<resqml20__OrientedMacroFace *> MacroFaces;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeShell
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeShell; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__VolumeShell, default initialized and not managed by a soap context
        virtual resqml20__VolumeShell *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__VolumeShell); }
      public:
        /// Constructor with default initializations
        resqml20__VolumeShell() : ShellUid(), MacroFaces(), soap() { }
        virtual ~resqml20__VolumeShell() { }
        /// Friend allocator used by soap_new_resqml20__VolumeShell(struct soap*, int)
        friend SOAP_FMAC1 resqml20__VolumeShell * SOAP_FMAC2 soap_instantiate_resqml20__VolumeShell(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:584 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchBoundaries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchBoundaries (-226)
/* complex XML schema type 'resqml20:PatchBoundaries': */
class SOAP_CMAC resqml20__PatchBoundaries {
      public:
        /// Optional element 'resqml20:InnerRing' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> InnerRing;
        /// Optional element 'resqml20:OuterRing' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *OuterRing;
        /// Required element 'resqml20:ReferencedPatch' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 ReferencedPatch;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchBoundaries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchBoundaries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PatchBoundaries, default initialized and not managed by a soap context
        virtual resqml20__PatchBoundaries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PatchBoundaries); }
      public:
        /// Constructor with default initializations
        resqml20__PatchBoundaries() : InnerRing(), OuterRing(), ReferencedPatch(), soap() { }
        virtual ~resqml20__PatchBoundaries() { }
        /// Friend allocator used by soap_new_resqml20__PatchBoundaries(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PatchBoundaries * SOAP_FMAC2 soap_instantiate_resqml20__PatchBoundaries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:594 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrientedMacroFace
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrientedMacroFace (-231)
/* complex XML schema type 'resqml20:OrientedMacroFace': */
class SOAP_CMAC resqml20__OrientedMacroFace {
      public:
        /// Required element 'resqml20:PatchIndexOfRepresentation' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 PatchIndexOfRepresentation;
        /// Required element 'resqml20:RepresentationIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 RepresentationIndex;
        /// Required element 'resqml20:SideIsPlus' of XML schema type 'xsd:boolean'
        bool SideIsPlus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrientedMacroFace
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrientedMacroFace; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__OrientedMacroFace, default initialized and not managed by a soap context
        virtual resqml20__OrientedMacroFace *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__OrientedMacroFace); }
      public:
        /// Constructor with default initializations
        resqml20__OrientedMacroFace() : PatchIndexOfRepresentation(), RepresentationIndex(), SideIsPlus(), soap() { }
        virtual ~resqml20__OrientedMacroFace() { }
        /// Friend allocator used by soap_new_resqml20__OrientedMacroFace(struct soap*, int)
        friend SOAP_FMAC1 resqml20__OrientedMacroFace * SOAP_FMAC2 soap_instantiate_resqml20__OrientedMacroFace(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:596 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactIdentity (-232)
/* complex XML schema type 'resqml20:ContactIdentity': */
class SOAP_CMAC resqml20__ContactIdentity {
      public:
        /// Required element 'resqml20:IdentityKind' of XML schema type 'resqml20:IdentityKind'
        resqml20__IdentityKind IdentityKind;
        /// Required element 'resqml20:ListOfContactRepresentations' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ListOfContactRepresentations;
        /// Optional element 'resqml20:ListOfIdenticalNodes' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ListOfIdenticalNodes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactIdentity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactIdentity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ContactIdentity, default initialized and not managed by a soap context
        virtual resqml20__ContactIdentity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ContactIdentity); }
      public:
        /// Constructor with default initializations
        resqml20__ContactIdentity() : IdentityKind(), ListOfContactRepresentations(), ListOfIdenticalNodes(), soap() { }
        virtual ~resqml20__ContactIdentity() { }
        /// Friend allocator used by soap_new_resqml20__ContactIdentity(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ContactIdentity * SOAP_FMAC2 soap_instantiate_resqml20__ContactIdentity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:616 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WitsmlWellboreReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WitsmlWellboreReference (-242)
/* complex XML schema type 'resqml20:WitsmlWellboreReference': */
class SOAP_CMAC resqml20__WitsmlWellboreReference {
      public:
        /// Required element 'resqml20:WitsmlWell' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *WitsmlWell;
        /// Required element 'resqml20:WitsmlWellbore' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *WitsmlWellbore;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WitsmlWellboreReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WitsmlWellboreReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__WitsmlWellboreReference, default initialized and not managed by a soap context
        virtual resqml20__WitsmlWellboreReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__WitsmlWellboreReference); }
      public:
        /// Constructor with default initializations
        resqml20__WitsmlWellboreReference() : WitsmlWell(), WitsmlWellbore(), soap() { }
        virtual ~resqml20__WitsmlWellboreReference() { }
        /// Friend allocator used by soap_new_resqml20__WitsmlWellboreReference(struct soap*, int)
        friend SOAP_FMAC1 resqml20__WitsmlWellboreReference * SOAP_FMAC2 soap_instantiate_resqml20__WitsmlWellboreReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:626 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterTemplate (-247)
/* complex XML schema type 'resqml20:ParameterTemplate': */
class SOAP_CMAC resqml20__ParameterTemplate {
      public:
        /// Optional element 'resqml20:KeyConstraint' of XML schema type 'xsd:string'
        std::vector<std::string> KeyConstraint;
        /// Required element 'resqml20:IsInput' of XML schema type 'xsd:boolean'
        bool IsInput;
        /// Optional element 'resqml20:AllowedKind' of XML schema type 'resqml20:ParameterKind'
        std::vector<resqml20__ParameterKind> AllowedKind;
        /// Required element 'resqml20:IsOutput' of XML schema type 'xsd:boolean'
        bool IsOutput;
        /// Required element 'resqml20:Title' of XML schema type 'xsd:string'
        std::string Title;
        /// Optional element 'resqml20:DataObjectContentType' of XML schema type 'xsd:string'
        std::string *DataObjectContentType;
        /// Required element 'resqml20:MaxOccurs' of XML schema type 'xsd:long'
        LONG64 MaxOccurs;
        /// Required element 'resqml20:MinOccurs' of XML schema type 'xsd:long'
        LONG64 MinOccurs;
        /// Optional element 'resqml20:Constraint' of XML schema type 'xsd:string'
        std::string *Constraint;
        /// Optional element 'resqml20:DefaultValue' of XML schema type 'resqml20:AbstractActivityParameter'
        std::vector<resqml20__AbstractActivityParameter *> DefaultValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ParameterTemplate, default initialized and not managed by a soap context
        virtual resqml20__ParameterTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ParameterTemplate); }
      public:
        /// Constructor with default initializations
        resqml20__ParameterTemplate() : KeyConstraint(), IsInput(), AllowedKind(), IsOutput(), Title(), DataObjectContentType(), MaxOccurs(), MinOccurs(), Constraint(), DefaultValue(), soap() { }
        virtual ~resqml20__ParameterTemplate() { }
        /// Friend allocator used by soap_new_resqml20__ParameterTemplate(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ParameterTemplate * SOAP_FMAC2 soap_instantiate_resqml20__ParameterTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:634 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParameterKey (-251)
/* complex XML schema type 'resqml20:AbstractParameterKey': */
class SOAP_CMAC resqml20__AbstractParameterKey {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractParameterKey, default initialized and not managed by a soap context
        virtual resqml20__AbstractParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractParameterKey); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractParameterKey() : soap() { }
        virtual ~resqml20__AbstractParameterKey() { }
        /// Friend allocator used by soap_new_resqml20__AbstractParameterKey(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractParameterKey * SOAP_FMAC2 soap_instantiate_resqml20__AbstractParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:638 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractActivityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractActivityParameter (-253)
/* complex XML schema type 'resqml20:AbstractActivityParameter': */
class SOAP_CMAC resqml20__AbstractActivityParameter {
      public:
        /// Required element 'resqml20:Title' of XML schema type 'xsd:string'
        std::string Title;
        /// Optional element 'resqml20:Index' of XML schema type 'xsd:long'
        LONG64 *Index;
        /// Optional element 'resqml20:Selection' of XML schema type 'xsd:string'
        std::string *Selection;
        /// Optional element 'resqml20:Key' of XML schema type 'resqml20:AbstractParameterKey'
        std::vector<resqml20__AbstractParameterKey *> Key;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractActivityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractActivityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractActivityParameter, default initialized and not managed by a soap context
        virtual resqml20__AbstractActivityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractActivityParameter); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractActivityParameter() : Title(), Index(), Selection(), Key(), soap() { }
        virtual ~resqml20__AbstractActivityParameter() { }
        /// Friend allocator used by soap_new_resqml20__AbstractActivityParameter(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractActivityParameter * SOAP_FMAC2 soap_instantiate_resqml20__AbstractActivityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:648 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineWellbores
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineWellbores (-258)
/* complex XML schema type 'resqml20:StreamlineWellbores': */
class SOAP_CMAC resqml20__StreamlineWellbores {
      public:
        /// Required element 'resqml20:InjectorPerLine' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *InjectorPerLine;
        /// Required element 'resqml20:ProducerPerLine' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ProducerPerLine;
        /// Required element 'resqml20:WellboreTrajectoryRepresentation' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> WellboreTrajectoryRepresentation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineWellbores
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineWellbores; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StreamlineWellbores, default initialized and not managed by a soap context
        virtual resqml20__StreamlineWellbores *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StreamlineWellbores); }
      public:
        /// Constructor with default initializations
        resqml20__StreamlineWellbores() : InjectorPerLine(), ProducerPerLine(), WellboreTrajectoryRepresentation(), soap() { }
        virtual ~resqml20__StreamlineWellbores() { }
        /// Friend allocator used by soap_new_resqml20__StreamlineWellbores(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StreamlineWellbores * SOAP_FMAC2 soap_instantiate_resqml20__StreamlineWellbores(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:650 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalGridCells
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalGridCells (-259)
/* complex XML schema type 'resqml20:IntervalGridCells': */
class SOAP_CMAC resqml20__IntervalGridCells {
      public:
        /// Required element 'resqml20:CellCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 CellCount;
        /// Required element 'resqml20:GridIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *GridIndices;
        /// Required element 'resqml20:CellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *CellIndices;
        /// Required element 'resqml20:LocalFacePairPerCellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *LocalFacePairPerCellIndices;
        /// Required element 'resqml20:Grids' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Grids;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalGridCells
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalGridCells; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntervalGridCells, default initialized and not managed by a soap context
        virtual resqml20__IntervalGridCells *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntervalGridCells); }
      public:
        /// Constructor with default initializations
        resqml20__IntervalGridCells() : CellCount(), GridIndices(), CellIndices(), LocalFacePairPerCellIndices(), Grids(), soap() { }
        virtual ~resqml20__IntervalGridCells() { }
        /// Friend allocator used by soap_new_resqml20__IntervalGridCells(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntervalGridCells * SOAP_FMAC2 soap_instantiate_resqml20__IntervalGridCells(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:652 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndices (-260)
/* complex XML schema type 'resqml20:TimeIndices': */
class SOAP_CMAC resqml20__TimeIndices {
      public:
        /// Required element 'resqml20:TimeIndexCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 TimeIndexCount;
        /// Optional element 'resqml20:TimeIndexStart' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *TimeIndexStart;
        /// Optional element 'resqml20:SimulatorTimeStep' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *SimulatorTimeStep;
        /// Required element 'resqml20:UseInterval' of XML schema type 'xsd:boolean'
        bool UseInterval;
        /// Required element 'resqml20:TimeSeries' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TimeIndices, default initialized and not managed by a soap context
        virtual resqml20__TimeIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TimeIndices); }
      public:
        /// Constructor with default initializations
        resqml20__TimeIndices() : TimeIndexCount(), TimeIndexStart(), SimulatorTimeStep(), UseInterval(), TimeSeries(), soap() { }
        virtual ~resqml20__TimeIndices() { }
        /// Friend allocator used by soap_new_resqml20__TimeIndices(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TimeIndices * SOAP_FMAC2 soap_instantiate_resqml20__TimeIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:664 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CustomData
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CustomData (-266)
/* complex XML schema type 'eml20:CustomData': */
class SOAP_CMAC eml20__CustomData {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__CustomData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__CustomData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__CustomData, default initialized and not managed by a soap context
        virtual eml20__CustomData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__CustomData); }
      public:
        /// Constructor with default initializations
        eml20__CustomData() : __any(), soap() { }
        virtual ~eml20__CustomData() { }
        /// Friend allocator used by soap_new_eml20__CustomData(struct soap*, int)
        friend SOAP_FMAC1 eml20__CustomData * SOAP_FMAC2 soap_instantiate_eml20__CustomData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:666 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__Citation
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__Citation (-267)
/* complex XML schema type 'eml20:Citation': */
class SOAP_CMAC eml20__Citation {
      public:
        /// Required element 'eml20:Title' of XML schema type 'eml20:DescriptionString'
        std::string Title;
        /// Required element 'eml20:Originator' of XML schema type 'eml20:NameString'
        std::string Originator;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm Creation;
        /// Required element 'eml20:Format' of XML schema type 'eml20:DescriptionString'
        std::string Format;
        /// Optional element 'eml20:Editor' of XML schema type 'eml20:NameString'
        std::string *Editor;
        /// Optional element 'eml20:LastUpdate' of XML schema type 'xsd:dateTime'
        struct tm *LastUpdate;
        /// Optional element 'eml20:VersionString' of XML schema type 'xsd:string'
        std::string *VersionString;
        /// Optional element 'eml20:Description' of XML schema type 'eml20:CommentString'
        std::string *Description;
        /// Optional element 'eml20:DescriptiveKeywords' of XML schema type 'eml20:CommentString'
        std::string *DescriptiveKeywords;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__Citation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__Citation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__Citation, default initialized and not managed by a soap context
        virtual eml20__Citation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__Citation); }
      public:
        /// Constructor with default initializations
        eml20__Citation() : Title(), Originator(), Creation(), Format(), Editor(), LastUpdate(), VersionString(), Description(), DescriptiveKeywords(), soap() { }
        virtual ~eml20__Citation() { }
        /// Friend allocator used by soap_new_eml20__Citation(struct soap*, int)
        friend SOAP_FMAC1 eml20__Citation * SOAP_FMAC2 soap_instantiate_eml20__Citation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:668 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractObject
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractObject (-268)
/* complex XML schema type 'eml20:AbstractObject': */
class SOAP_CMAC eml20__AbstractObject {
      public:
        /// Optional element 'eml20:Citation' of XML schema type 'eml20:Citation'
        eml20__Citation *Citation;
        /// Optional element 'eml20:Aliases' of XML schema type 'eml20:ObjectAlias'
        std::vector<eml20__ObjectAlias *> Aliases;
        /// Optional element 'eml20:CustomData' of XML schema type 'eml20:CustomData'
        eml20__CustomData *CustomData;
        /// Required attribute 'schemaVersion' of XML schema type 'xsd:string'
        std::string schemaVersion;
        /// Required attribute 'uuid' of XML schema type 'eml20:UuidString'
        std::string uuid;
        /// Optional attribute 'objectVersion' of XML schema type 'eml20:NameString'
        std::string *objectVersion;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AbstractObject, default initialized and not managed by a soap context
        virtual eml20__AbstractObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AbstractObject); }
      public:
        /// Constructor with default initializations
        eml20__AbstractObject() : Citation(), Aliases(), CustomData(), schemaVersion(), uuid(), objectVersion(), soap() { }
        virtual ~eml20__AbstractObject() { }
        /// Friend allocator used by soap_new_eml20__AbstractObject(struct soap*, int)
        friend SOAP_FMAC1 eml20__AbstractObject * SOAP_FMAC2 soap_instantiate_eml20__AbstractObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:670 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ObjectAlias
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ObjectAlias (-269)
/* complex XML schema type 'eml20:ObjectAlias': */
class SOAP_CMAC eml20__ObjectAlias {
      public:
        /// Required element 'eml20:Identifier' of XML schema type 'xsd:string'
        std::string Identifier;
        /// Optional element 'eml20:Description' of XML schema type 'eml20:DescriptionString'
        std::string *Description;
        /// Optional attribute 'authority' of XML schema type 'eml20:NameString'
        std::string *authority;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ObjectAlias
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ObjectAlias; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ObjectAlias, default initialized and not managed by a soap context
        virtual eml20__ObjectAlias *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ObjectAlias); }
      public:
        /// Constructor with default initializations
        eml20__ObjectAlias() : Identifier(), Description(), authority(), soap() { }
        virtual ~eml20__ObjectAlias() { }
        /// Friend allocator used by soap_new_eml20__ObjectAlias(struct soap*, int)
        friend SOAP_FMAC1 eml20__ObjectAlias * SOAP_FMAC2 soap_instantiate_eml20__ObjectAlias(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:680 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractVerticalCrs (-274)
/* complex XML schema type 'eml20:AbstractVerticalCrs': */
class SOAP_CMAC eml20__AbstractVerticalCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractVerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractVerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AbstractVerticalCrs, default initialized and not managed by a soap context
        virtual eml20__AbstractVerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AbstractVerticalCrs); }
      public:
        /// Constructor with default initializations
        eml20__AbstractVerticalCrs() : soap() { }
        virtual ~eml20__AbstractVerticalCrs() { }
        /// Friend allocator used by soap_new_eml20__AbstractVerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml20__AbstractVerticalCrs * SOAP_FMAC2 soap_instantiate_eml20__AbstractVerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:682 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractProjectedCrs (-275)
/* complex XML schema type 'eml20:AbstractProjectedCrs': */
class SOAP_CMAC eml20__AbstractProjectedCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AbstractProjectedCrs, default initialized and not managed by a soap context
        virtual eml20__AbstractProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AbstractProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml20__AbstractProjectedCrs() : soap() { }
        virtual ~eml20__AbstractProjectedCrs() { }
        /// Friend allocator used by soap_new_eml20__AbstractProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml20__AbstractProjectedCrs * SOAP_FMAC2 soap_instantiate_eml20__AbstractProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:688 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__Hdf5Dataset
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__Hdf5Dataset (-278)
/* complex XML schema type 'eml20:Hdf5Dataset': */
class SOAP_CMAC eml20__Hdf5Dataset {
      public:
        /// Required element 'eml20:PathInHdfFile' of XML schema type 'xsd:string'
        std::string PathInHdfFile;
        /// Required element 'eml20:HdfProxy' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *HdfProxy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__Hdf5Dataset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__Hdf5Dataset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__Hdf5Dataset, default initialized and not managed by a soap context
        virtual eml20__Hdf5Dataset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__Hdf5Dataset); }
      public:
        /// Constructor with default initializations
        eml20__Hdf5Dataset() : PathInHdfFile(), HdfProxy(), soap() { }
        virtual ~eml20__Hdf5Dataset() { }
        /// Friend allocator used by soap_new_eml20__Hdf5Dataset(struct soap*, int)
        friend SOAP_FMAC1 eml20__Hdf5Dataset * SOAP_FMAC2 soap_instantiate_eml20__Hdf5Dataset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:692 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataObjectReference
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataObjectReference (-280)
/* complex XML schema type 'eml20:DataObjectReference': */
class SOAP_CMAC eml20__DataObjectReference {
      public:
        /// Required element 'eml20:ContentType' of XML schema type 'xsd:string'
        std::string ContentType;
        /// Required element 'eml20:Title' of XML schema type 'eml20:DescriptionString'
        std::string Title;
        /// Required element 'eml20:UUID' of XML schema type 'eml20:UuidString'
        std::string UUID;
        /// Optional element 'eml20:UuidAuthority' of XML schema type 'xsd:string'
        std::string *UuidAuthority;
        /// Optional element 'eml20:VersionString' of XML schema type 'eml20:NameString'
        std::string *VersionString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataObjectReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataObjectReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DataObjectReference, default initialized and not managed by a soap context
        virtual eml20__DataObjectReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DataObjectReference); }
      public:
        /// Constructor with default initializations
        eml20__DataObjectReference() : ContentType(), Title(), UUID(), UuidAuthority(), VersionString(), soap() { }
        virtual ~eml20__DataObjectReference() { }
        /// Friend allocator used by soap_new_eml20__DataObjectReference(struct soap*, int)
        friend SOAP_FMAC1 eml20__DataObjectReference * SOAP_FMAC2 soap_instantiate_eml20__DataObjectReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1044 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyTypeSet
#define SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyTypeSet (-456)
/* complex XML schema type 'ptm:standardEnergisticsPropertyTypeSet': */
class SOAP_CMAC ptm__standardEnergisticsPropertyTypeSet {
      public:
        /// Required element 'ptm:standardEnergisticsPropertyType' of XML schema type 'ptm:standardEnergisticsPropertyType'
        std::vector<ptm__standardEnergisticsPropertyType *> standardEnergisticsPropertyType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyTypeSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyTypeSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ptm__standardEnergisticsPropertyTypeSet, default initialized and not managed by a soap context
        virtual ptm__standardEnergisticsPropertyTypeSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ptm__standardEnergisticsPropertyTypeSet); }
      public:
        /// Constructor with default initializations
        ptm__standardEnergisticsPropertyTypeSet() : standardEnergisticsPropertyType(), soap() { }
        virtual ~ptm__standardEnergisticsPropertyTypeSet() { }
        /// Friend allocator used by soap_new_ptm__standardEnergisticsPropertyTypeSet(struct soap*, int)
        friend SOAP_FMAC1 ptm__standardEnergisticsPropertyTypeSet * SOAP_FMAC2 soap_instantiate_ptm__standardEnergisticsPropertyTypeSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1046 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyType (-457)
/* complex XML schema type 'ptm:standardEnergisticsPropertyType': */
class SOAP_CMAC ptm__standardEnergisticsPropertyType {
      public:
        /// Required element 'ptm:name' of XML schema type 'resqml20:ResqmlPropertyKind'
        resqml20__ResqmlPropertyKind name;
        /// Optional element 'ptm:description' of XML schema type 'xsd:string'
        std::string *description;
        /// Optional element 'ptm:version' of XML schema type 'xsd:string'
        std::string *version;
        /// Optional element 'ptm:deprecated' of XML schema type 'xsd:string'
        std::string *deprecated;
        /// Optional element 'ptm:replacedBy' of XML schema type 'xsd:string'
        std::string *replacedBy;
        /// Optional element 'ptm:isAbstract' of XML schema type 'xsd:boolean'
        bool *isAbstract;
        /// Optional element 'ptm:parentKind' of XML schema type 'resqml20:ResqmlPropertyKind'
        resqml20__ResqmlPropertyKind *parentKind;
        /// Optional element 'ptm:equivalentPropertyType' of XML schema type 'ptm:equivalentPropertyType'
        std::vector<ptm__equivalentPropertyType *> equivalentPropertyType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ptm__standardEnergisticsPropertyType, default initialized and not managed by a soap context
        virtual ptm__standardEnergisticsPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ptm__standardEnergisticsPropertyType); }
      public:
        /// Constructor with default initializations
        ptm__standardEnergisticsPropertyType() : name(), description(), version(), deprecated(), replacedBy(), isAbstract(), parentKind(), equivalentPropertyType(), soap() { }
        virtual ~ptm__standardEnergisticsPropertyType() { }
        /// Friend allocator used by soap_new_ptm__standardEnergisticsPropertyType(struct soap*, int)
        friend SOAP_FMAC1 ptm__standardEnergisticsPropertyType * SOAP_FMAC2 soap_instantiate_ptm__standardEnergisticsPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1048 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ptm__equivalentPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_ptm__equivalentPropertyType (-458)
/* complex XML schema type 'ptm:equivalentPropertyType': */
class SOAP_CMAC ptm__equivalentPropertyType {
      public:
        /// Required element 'ptm:name' of XML schema type 'xsd:string'
        std::string name;
        /// Required element 'ptm:namingSystem' of XML schema type 'xsd:string'
        std::string namingSystem;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_ptm__equivalentPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_ptm__equivalentPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ptm__equivalentPropertyType, default initialized and not managed by a soap context
        virtual ptm__equivalentPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ptm__equivalentPropertyType); }
      public:
        /// Constructor with default initializations
        ptm__equivalentPropertyType() : name(), namingSystem(), soap() { }
        virtual ~ptm__equivalentPropertyType() { }
        /// Friend allocator used by soap_new_ptm__equivalentPropertyType(struct soap*, int)
        friend SOAP_FMAC1 ptm__equivalentPropertyType * SOAP_FMAC2 soap_instantiate_ptm__equivalentPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:200 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractDoubleArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractDoubleArray (-34)
/* complex XML schema type 'resqml20:AbstractDoubleArray': */
class SOAP_CMAC resqml20__AbstractDoubleArray : public resqml20__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractDoubleArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractDoubleArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractDoubleArray, default initialized and not managed by a soap context
        virtual resqml20__AbstractDoubleArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractDoubleArray); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractDoubleArray() { }
        virtual ~resqml20__AbstractDoubleArray() { }
        /// Friend allocator used by soap_new_resqml20__AbstractDoubleArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractDoubleArray * SOAP_FMAC2 soap_instantiate_resqml20__AbstractDoubleArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:208 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringHdf5Array (-38)
/* complex XML schema type 'resqml20:StringHdf5Array': */
class SOAP_CMAC resqml20__StringHdf5Array : public resqml20__AbstractValueArray {
      public:
        /// Required element 'resqml20:Values' of XML schema type 'eml20:Hdf5Dataset'
        eml20__Hdf5Dataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringHdf5Array
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringHdf5Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StringHdf5Array, default initialized and not managed by a soap context
        virtual resqml20__StringHdf5Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StringHdf5Array); }
      public:
        /// Constructor with default initializations
        resqml20__StringHdf5Array() : Values() { }
        virtual ~resqml20__StringHdf5Array() { }
        /// Friend allocator used by soap_new_resqml20__StringHdf5Array(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StringHdf5Array * SOAP_FMAC2 soap_instantiate_resqml20__StringHdf5Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:226 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractIntegerArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractIntegerArray (-47)
/* complex XML schema type 'resqml20:AbstractIntegerArray': */
class SOAP_CMAC resqml20__AbstractIntegerArray : public resqml20__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractIntegerArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractIntegerArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractIntegerArray, default initialized and not managed by a soap context
        virtual resqml20__AbstractIntegerArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractIntegerArray); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractIntegerArray() { }
        virtual ~resqml20__AbstractIntegerArray() { }
        /// Friend allocator used by soap_new_resqml20__AbstractIntegerArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractIntegerArray * SOAP_FMAC2 soap_instantiate_resqml20__AbstractIntegerArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:228 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractBooleanArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractBooleanArray (-48)
/* complex XML schema type 'resqml20:AbstractBooleanArray': */
class SOAP_CMAC resqml20__AbstractBooleanArray : public resqml20__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractBooleanArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractBooleanArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractBooleanArray, default initialized and not managed by a soap context
        virtual resqml20__AbstractBooleanArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractBooleanArray); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractBooleanArray() { }
        virtual ~resqml20__AbstractBooleanArray() { }
        /// Friend allocator used by soap_new_resqml20__AbstractBooleanArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractBooleanArray * SOAP_FMAC2 soap_instantiate_resqml20__AbstractBooleanArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:232 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StandardPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StandardPropertyKind (-50)
/* complex XML schema type 'resqml20:StandardPropertyKind': */
class SOAP_CMAC resqml20__StandardPropertyKind : public resqml20__AbstractPropertyKind {
      public:
        /// Required element 'resqml20:Kind' of XML schema type 'resqml20:ResqmlPropertyKind'
        resqml20__ResqmlPropertyKind Kind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StandardPropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StandardPropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StandardPropertyKind, default initialized and not managed by a soap context
        virtual resqml20__StandardPropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StandardPropertyKind); }
      public:
        /// Constructor with default initializations
        resqml20__StandardPropertyKind() : Kind() { }
        virtual ~resqml20__StandardPropertyKind() { }
        /// Friend allocator used by soap_new_resqml20__StandardPropertyKind(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StandardPropertyKind * SOAP_FMAC2 soap_instantiate_resqml20__StandardPropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:236 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LocalPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LocalPropertyKind (-52)
/* complex XML schema type 'resqml20:LocalPropertyKind': */
class SOAP_CMAC resqml20__LocalPropertyKind : public resqml20__AbstractPropertyKind {
      public:
        /// Required element 'resqml20:LocalPropertyKind' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *LocalPropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LocalPropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LocalPropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__LocalPropertyKind, default initialized and not managed by a soap context
        virtual resqml20__LocalPropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__LocalPropertyKind); }
      public:
        /// Constructor with default initializations
        resqml20__LocalPropertyKind() : LocalPropertyKind() { }
        virtual ~resqml20__LocalPropertyKind() { }
        /// Friend allocator used by soap_new_resqml20__LocalPropertyKind(struct soap*, int)
        friend SOAP_FMAC1 resqml20__LocalPropertyKind * SOAP_FMAC2 soap_instantiate_resqml20__LocalPropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:244 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point2dHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point2dHdf5Array (-56)
/* Type resqml20__Point2dHdf5Array is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml20:Point2dHdf5Array': */
class SOAP_CMAC resqml20__Point2dHdf5Array : public resqml20__AbstractPoint3dArray {
      public:
        /// Required element 'resqml20:Coordinates' of XML schema type 'eml20:Hdf5Dataset'
        eml20__Hdf5Dataset *Coordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point2dHdf5Array
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point2dHdf5Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point2dHdf5Array, default initialized and not managed by a soap context
        virtual resqml20__Point2dHdf5Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point2dHdf5Array); }
      public:
        /// Constructor with default initializations
        resqml20__Point2dHdf5Array() : Coordinates() { }
        virtual ~resqml20__Point2dHdf5Array() { }
        /// Friend allocator used by soap_new_resqml20__Point2dHdf5Array(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point2dHdf5Array * SOAP_FMAC2 soap_instantiate_resqml20__Point2dHdf5Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:248 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationLatticeArray (-58)
/* complex XML schema type 'resqml20:ParametricLineFromRepresentationLatticeArray': */
class SOAP_CMAC resqml20__ParametricLineFromRepresentationLatticeArray : public resqml20__AbstractParametricLineArray {
      public:
        /// Required element 'resqml20:LineIndicesOnSupportingRepresentation' of XML schema type 'resqml20:IntegerLatticeArray'
        resqml20__IntegerLatticeArray *LineIndicesOnSupportingRepresentation;
        /// Required element 'resqml20:SupportingRepresentation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ParametricLineFromRepresentationLatticeArray, default initialized and not managed by a soap context
        virtual resqml20__ParametricLineFromRepresentationLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ParametricLineFromRepresentationLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml20__ParametricLineFromRepresentationLatticeArray() : LineIndicesOnSupportingRepresentation(), SupportingRepresentation() { }
        virtual ~resqml20__ParametricLineFromRepresentationLatticeArray() { }
        /// Friend allocator used by soap_new_resqml20__ParametricLineFromRepresentationLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ParametricLineFromRepresentationLatticeArray * SOAP_FMAC2 soap_instantiate_resqml20__ParametricLineFromRepresentationLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:250 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dLatticeArray (-59)
/* Type resqml20__Point3dLatticeArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml20:Point3dLatticeArray': */
class SOAP_CMAC resqml20__Point3dLatticeArray : public resqml20__AbstractPoint3dArray {
      public:
        /// Optional element 'resqml20:AllDimensionsAreOrthogonal' of XML schema type 'xsd:boolean'
        bool *AllDimensionsAreOrthogonal;
        /// Required element 'resqml20:Origin' of XML schema type 'resqml20:Point3d'
        resqml20__Point3d *Origin;
        /// Required element 'resqml20:Offset' of XML schema type 'resqml20:Point3dOffset'
        std::vector<resqml20__Point3dOffset *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3dLatticeArray, default initialized and not managed by a soap context
        virtual resqml20__Point3dLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3dLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml20__Point3dLatticeArray() : AllDimensionsAreOrthogonal(), Origin(), Offset() { }
        virtual ~resqml20__Point3dLatticeArray() { }
        /// Friend allocator used by soap_new_resqml20__Point3dLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3dLatticeArray * SOAP_FMAC2 soap_instantiate_resqml20__Point3dLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:252 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dZValueArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dZValueArray (-60)
/* Type resqml20__Point3dZValueArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml20:Point3dZValueArray': */
class SOAP_CMAC resqml20__Point3dZValueArray : public resqml20__AbstractPoint3dArray {
      public:
        /// Required element 'resqml20:SupportingGeometry' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *SupportingGeometry;
        /// Required element 'resqml20:ZValues' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *ZValues;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dZValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dZValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3dZValueArray, default initialized and not managed by a soap context
        virtual resqml20__Point3dZValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3dZValueArray); }
      public:
        /// Constructor with default initializations
        resqml20__Point3dZValueArray() : SupportingGeometry(), ZValues() { }
        virtual ~resqml20__Point3dZValueArray() { }
        /// Friend allocator used by soap_new_resqml20__Point3dZValueArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3dZValueArray * SOAP_FMAC2 soap_instantiate_resqml20__Point3dZValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:256 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PointGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PointGeometry (-62)
/* complex XML schema type 'resqml20:PointGeometry': */
class SOAP_CMAC resqml20__PointGeometry : public resqml20__AbstractGeometry {
      public:
        /// Required element 'resqml20:Points' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *Points;
        /// Optional element 'resqml20:SeismicCoordinates' of XML schema type 'resqml20:AbstractSeismicCoordinates'
        resqml20__AbstractSeismicCoordinates *SeismicCoordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PointGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PointGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PointGeometry, default initialized and not managed by a soap context
        virtual resqml20__PointGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PointGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__PointGeometry() : Points(), SeismicCoordinates() { }
        virtual ~resqml20__PointGeometry() { }
        /// Friend allocator used by soap_new_resqml20__PointGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PointGeometry * SOAP_FMAC2 soap_instantiate_resqml20__PointGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:262 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dHdf5Array (-65)
/* complex XML schema type 'resqml20:Point3dHdf5Array': */
class SOAP_CMAC resqml20__Point3dHdf5Array : public resqml20__AbstractPoint3dArray {
      public:
        /// Required element 'resqml20:Coordinates' of XML schema type 'eml20:Hdf5Dataset'
        eml20__Hdf5Dataset *Coordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dHdf5Array
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dHdf5Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3dHdf5Array, default initialized and not managed by a soap context
        virtual resqml20__Point3dHdf5Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3dHdf5Array); }
      public:
        /// Constructor with default initializations
        resqml20__Point3dHdf5Array() : Coordinates() { }
        virtual ~resqml20__Point3dHdf5Array() { }
        /// Friend allocator used by soap_new_resqml20__Point3dHdf5Array(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3dHdf5Array * SOAP_FMAC2 soap_instantiate_resqml20__Point3dHdf5Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:268 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineArray (-68)
/* complex XML schema type 'resqml20:ParametricLineArray': */
class SOAP_CMAC resqml20__ParametricLineArray : public resqml20__AbstractParametricLineArray {
      public:
        /// Optional element 'resqml20:ControlPointParameters' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *ControlPointParameters;
        /// Required element 'resqml20:ControlPoints' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *ControlPoints;
        /// Required element 'resqml20:KnotCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 KnotCount;
        /// Required element 'resqml20:LineKindIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *LineKindIndices;
        /// Optional element 'resqml20:TangentVectors' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *TangentVectors;
        /// Optional element 'resqml20:ParametricLineIntersections' of XML schema type 'resqml20:ParametricLineIntersections'
        resqml20__ParametricLineIntersections *ParametricLineIntersections;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ParametricLineArray, default initialized and not managed by a soap context
        virtual resqml20__ParametricLineArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ParametricLineArray); }
      public:
        /// Constructor with default initializations
        resqml20__ParametricLineArray() : ControlPointParameters(), ControlPoints(), KnotCount(), LineKindIndices(), TangentVectors(), ParametricLineIntersections() { }
        virtual ~resqml20__ParametricLineArray() { }
        /// Friend allocator used by soap_new_resqml20__ParametricLineArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ParametricLineArray * SOAP_FMAC2 soap_instantiate_resqml20__ParametricLineArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:270 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dParametricArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dParametricArray (-69)
/* complex XML schema type 'resqml20:Point3dParametricArray': */
class SOAP_CMAC resqml20__Point3dParametricArray : public resqml20__AbstractPoint3dArray {
      public:
        /// Required element 'resqml20:Parameters' of XML schema type 'resqml20:AbstractValueArray'
        resqml20__AbstractValueArray *Parameters;
        /// Optional element 'resqml20:ParametricLineIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParametricLineIndices;
        /// Optional element 'resqml20:TruncatedLineIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *TruncatedLineIndices;
        /// Required element 'resqml20:ParametricLines' of XML schema type 'resqml20:AbstractParametricLineArray'
        resqml20__AbstractParametricLineArray *ParametricLines;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dParametricArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dParametricArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3dParametricArray, default initialized and not managed by a soap context
        virtual resqml20__Point3dParametricArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3dParametricArray); }
      public:
        /// Constructor with default initializations
        resqml20__Point3dParametricArray() : Parameters(), ParametricLineIndices(), TruncatedLineIndices(), ParametricLines() { }
        virtual ~resqml20__Point3dParametricArray() { }
        /// Friend allocator used by soap_new_resqml20__Point3dParametricArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3dParametricArray * SOAP_FMAC2 soap_instantiate_resqml20__Point3dParametricArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:278 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPlaneGeometry (-73)
/* complex XML schema type 'resqml20:AbstractPlaneGeometry': */
class SOAP_CMAC resqml20__AbstractPlaneGeometry : public resqml20__AbstractGeometry {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPlaneGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPlaneGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractPlaneGeometry, default initialized and not managed by a soap context
        virtual resqml20__AbstractPlaneGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractPlaneGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractPlaneGeometry() { }
        virtual ~resqml20__AbstractPlaneGeometry() { }
        /// Friend allocator used by soap_new_resqml20__AbstractPlaneGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractPlaneGeometry * SOAP_FMAC2 soap_instantiate_resqml20__AbstractPlaneGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:280 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineGeometry (-74)
/* complex XML schema type 'resqml20:AbstractParametricLineGeometry': */
class SOAP_CMAC resqml20__AbstractParametricLineGeometry : public resqml20__AbstractGeometry {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractParametricLineGeometry, default initialized and not managed by a soap context
        virtual resqml20__AbstractParametricLineGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractParametricLineGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractParametricLineGeometry() { }
        virtual ~resqml20__AbstractParametricLineGeometry() { }
        /// Friend allocator used by soap_new_resqml20__AbstractParametricLineGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractParametricLineGeometry * SOAP_FMAC2 soap_instantiate_resqml20__AbstractParametricLineGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:282 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dFromRepresentationLatticeArray (-75)
/* complex XML schema type 'resqml20:Point3dFromRepresentationLatticeArray': */
class SOAP_CMAC resqml20__Point3dFromRepresentationLatticeArray : public resqml20__AbstractPoint3dArray {
      public:
        /// Required element 'resqml20:NodeIndicesOnSupportingRepresentation' of XML schema type 'resqml20:IntegerLatticeArray'
        resqml20__IntegerLatticeArray *NodeIndicesOnSupportingRepresentation;
        /// Required element 'resqml20:SupportingRepresentation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dFromRepresentationLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dFromRepresentationLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Point3dFromRepresentationLatticeArray, default initialized and not managed by a soap context
        virtual resqml20__Point3dFromRepresentationLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Point3dFromRepresentationLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml20__Point3dFromRepresentationLatticeArray() : NodeIndicesOnSupportingRepresentation(), SupportingRepresentation() { }
        virtual ~resqml20__Point3dFromRepresentationLatticeArray() { }
        /// Friend allocator used by soap_new_resqml20__Point3dFromRepresentationLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Point3dFromRepresentationLatticeArray * SOAP_FMAC2 soap_instantiate_resqml20__Point3dFromRepresentationLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:284 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic3dCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic3dCoordinates (-76)
/* complex XML schema type 'resqml20:Seismic3dCoordinates': */
class SOAP_CMAC resqml20__Seismic3dCoordinates : public resqml20__AbstractSeismicCoordinates {
      public:
        /// Required element 'resqml20:CrosslineCoordinates' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *CrosslineCoordinates;
        /// Required element 'resqml20:InlineCoordinates' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *InlineCoordinates;
        /// Optional element 'resqml20:VerticalCoordinates' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *VerticalCoordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic3dCoordinates
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic3dCoordinates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Seismic3dCoordinates, default initialized and not managed by a soap context
        virtual resqml20__Seismic3dCoordinates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Seismic3dCoordinates); }
      public:
        /// Constructor with default initializations
        resqml20__Seismic3dCoordinates() : CrosslineCoordinates(), InlineCoordinates(), VerticalCoordinates() { }
        virtual ~resqml20__Seismic3dCoordinates() { }
        /// Friend allocator used by soap_new_resqml20__Seismic3dCoordinates(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Seismic3dCoordinates * SOAP_FMAC2 soap_instantiate_resqml20__Seismic3dCoordinates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:288 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic2dCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic2dCoordinates (-78)
/* complex XML schema type 'resqml20:Seismic2dCoordinates': */
class SOAP_CMAC resqml20__Seismic2dCoordinates : public resqml20__AbstractSeismicCoordinates {
      public:
        /// Required element 'resqml20:LineAbscissa' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *LineAbscissa;
        /// Optional element 'resqml20:VerticalCoordinates' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *VerticalCoordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic2dCoordinates
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic2dCoordinates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Seismic2dCoordinates, default initialized and not managed by a soap context
        virtual resqml20__Seismic2dCoordinates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Seismic2dCoordinates); }
      public:
        /// Constructor with default initializations
        resqml20__Seismic2dCoordinates() : LineAbscissa(), VerticalCoordinates() { }
        virtual ~resqml20__Seismic2dCoordinates() { }
        /// Friend allocator used by soap_new_resqml20__Seismic2dCoordinates(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Seismic2dCoordinates * SOAP_FMAC2 soap_instantiate_resqml20__Seismic2dCoordinates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:290 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch1d
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch1d (-79)
/* complex XML schema type 'resqml20:Patch1d': */
class SOAP_CMAC resqml20__Patch1d : public resqml20__Patch {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch1d
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch1d; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Patch1d, default initialized and not managed by a soap context
        virtual resqml20__Patch1d *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Patch1d); }
      public:
        /// Constructor with default initializations
        resqml20__Patch1d() : Count() { }
        virtual ~resqml20__Patch1d() { }
        /// Friend allocator used by soap_new_resqml20__Patch1d(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Patch1d * SOAP_FMAC2 soap_instantiate_resqml20__Patch1d(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:320 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitNodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitNodePatch (-94)
/* complex XML schema type 'resqml20:SplitNodePatch': */
class SOAP_CMAC resqml20__SplitNodePatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:ParentNodeIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParentNodeIndices;
        /// Required element 'resqml20:CellsPerSplitNode' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *CellsPerSplitNode;
        /// Optional element 'resqml20:SplitFaces' of XML schema type 'resqml20:SplitFaces'
        resqml20__SplitFaces *SplitFaces;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitNodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitNodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SplitNodePatch, default initialized and not managed by a soap context
        virtual resqml20__SplitNodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SplitNodePatch); }
      public:
        /// Constructor with default initializations
        resqml20__SplitNodePatch() : Count(), ParentNodeIndices(), CellsPerSplitNode(), SplitFaces() { }
        virtual ~resqml20__SplitNodePatch() { }
        /// Friend allocator used by soap_new_resqml20__SplitNodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SplitNodePatch * SOAP_FMAC2 soap_instantiate_resqml20__SplitNodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:322 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkParentWindow (-95)
/* complex XML schema type 'resqml20:IjkParentWindow': */
class SOAP_CMAC resqml20__IjkParentWindow : public resqml20__AbstractParentWindow {
      public:
        /// Optional element 'resqml20:OmitParentCells' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *OmitParentCells;
        /// Required element 'resqml20:JRegrid' of XML schema type 'resqml20:Regrid'
        resqml20__Regrid *JRegrid;
        /// Required element 'resqml20:ParentGrid' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ParentGrid;
        /// Required element 'resqml20:KRegrid' of XML schema type 'resqml20:Regrid'
        resqml20__Regrid *KRegrid;
        /// Required element 'resqml20:IRegrid' of XML schema type 'resqml20:Regrid'
        resqml20__Regrid *IRegrid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IjkParentWindow, default initialized and not managed by a soap context
        virtual resqml20__IjkParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IjkParentWindow); }
      public:
        /// Constructor with default initializations
        resqml20__IjkParentWindow() : OmitParentCells(), JRegrid(), ParentGrid(), KRegrid(), IRegrid() { }
        virtual ~resqml20__IjkParentWindow() { }
        /// Friend allocator used by soap_new_resqml20__IjkParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IjkParentWindow * SOAP_FMAC2 soap_instantiate_resqml20__IjkParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:342 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerParentWindow (-105)
/* complex XML schema type 'resqml20:ColumnLayerParentWindow': */
class SOAP_CMAC resqml20__ColumnLayerParentWindow : public resqml20__AbstractParentWindow {
      public:
        /// Required element 'resqml20:ColumnIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ColumnIndices;
        /// Optional element 'resqml20:OmitParentCells' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *OmitParentCells;
        /// Required element 'resqml20:KRegrid' of XML schema type 'resqml20:Regrid'
        resqml20__Regrid *KRegrid;
        /// Required element 'resqml20:ParentGrid' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ParentGrid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ColumnLayerParentWindow, default initialized and not managed by a soap context
        virtual resqml20__ColumnLayerParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ColumnLayerParentWindow); }
      public:
        /// Constructor with default initializations
        resqml20__ColumnLayerParentWindow() : ColumnIndices(), OmitParentCells(), KRegrid(), ParentGrid() { }
        virtual ~resqml20__ColumnLayerParentWindow() { }
        /// Friend allocator used by soap_new_resqml20__ColumnLayerParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ColumnLayerParentWindow * SOAP_FMAC2 soap_instantiate_resqml20__ColumnLayerParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:344 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredSubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredSubnodeTopology (-106)
/* complex XML schema type 'resqml20:UnstructuredSubnodeTopology': */
class SOAP_CMAC resqml20__UnstructuredSubnodeTopology : public resqml20__SubnodeTopology {
      public:
        /// Optional element 'resqml20:Edges' of XML schema type 'resqml20:Edges'
        resqml20__Edges *Edges;
        /// Optional element 'resqml20:NodesPerCell' of XML schema type 'resqml20:NodesPerCell'
        resqml20__NodesPerCell *NodesPerCell;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredSubnodeTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredSubnodeTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__UnstructuredSubnodeTopology, default initialized and not managed by a soap context
        virtual resqml20__UnstructuredSubnodeTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__UnstructuredSubnodeTopology); }
      public:
        /// Constructor with default initializations
        resqml20__UnstructuredSubnodeTopology() : Edges(), NodesPerCell() { }
        virtual ~resqml20__UnstructuredSubnodeTopology() { }
        /// Friend allocator used by soap_new_resqml20__UnstructuredSubnodeTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml20__UnstructuredSubnodeTopology * SOAP_FMAC2 soap_instantiate_resqml20__UnstructuredSubnodeTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:346 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredColumnLayerGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredColumnLayerGridPatch (-107)
/* complex XML schema type 'resqml20:GpGridUnstructuredColumnLayerGridPatch': */
class SOAP_CMAC resqml20__GpGridUnstructuredColumnLayerGridPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:UnstructuredColumnCount' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 UnstructuredColumnCount;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:UnstructuredColumnLayerGridGeometry'
        resqml20__UnstructuredColumnLayerGridGeometry *Geometry;
        /// Optional element 'resqml20:TruncationCells' of XML schema type 'resqml20:TruncationCellPatch'
        resqml20__TruncationCellPatch *TruncationCells;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredColumnLayerGridPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredColumnLayerGridPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__GpGridUnstructuredColumnLayerGridPatch, default initialized and not managed by a soap context
        virtual resqml20__GpGridUnstructuredColumnLayerGridPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__GpGridUnstructuredColumnLayerGridPatch); }
      public:
        /// Constructor with default initializations
        resqml20__GpGridUnstructuredColumnLayerGridPatch() : UnstructuredColumnCount(), Geometry(), TruncationCells() { }
        virtual ~resqml20__GpGridUnstructuredColumnLayerGridPatch() { }
        /// Friend allocator used by soap_new_resqml20__GpGridUnstructuredColumnLayerGridPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__GpGridUnstructuredColumnLayerGridPatch * SOAP_FMAC2 soap_instantiate_resqml20__GpGridUnstructuredColumnLayerGridPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:356 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodePatch (-112)
/* complex XML schema type 'resqml20:SubnodePatch': */
class SOAP_CMAC resqml20__SubnodePatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:SubnodeNodeObject' of XML schema type 'resqml20:SubnodeNodeObject'
        resqml20__SubnodeNodeObject SubnodeNodeObject;
        /// Required element 'resqml20:NodeWeightsPerSubnode' of XML schema type 'resqml20:AbstractValueArray'
        resqml20__AbstractValueArray *NodeWeightsPerSubnode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SubnodePatch, default initialized and not managed by a soap context
        virtual resqml20__SubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml20__SubnodePatch() : SubnodeNodeObject(), NodeWeightsPerSubnode() { }
        virtual ~resqml20__SubnodePatch() { }
        /// Friend allocator used by soap_new_resqml20__SubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SubnodePatch * SOAP_FMAC2 soap_instantiate_resqml20__SubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:358 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSubnodeTopology (-113)
/* complex XML schema type 'resqml20:ColumnLayerSubnodeTopology': */
class SOAP_CMAC resqml20__ColumnLayerSubnodeTopology : public resqml20__SubnodeTopology {
      public:
        /// Optional element 'resqml20:ColumnSubnodes' of XML schema type 'resqml20:ColumnSubnodePatch'
        std::vector<resqml20__ColumnSubnodePatch *> ColumnSubnodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSubnodeTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSubnodeTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ColumnLayerSubnodeTopology, default initialized and not managed by a soap context
        virtual resqml20__ColumnLayerSubnodeTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ColumnLayerSubnodeTopology); }
      public:
        /// Constructor with default initializations
        resqml20__ColumnLayerSubnodeTopology() : ColumnSubnodes() { }
        virtual ~resqml20__ColumnLayerSubnodeTopology() { }
        /// Friend allocator used by soap_new_resqml20__ColumnLayerSubnodeTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ColumnLayerSubnodeTopology * SOAP_FMAC2 soap_instantiate_resqml20__ColumnLayerSubnodeTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:366 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TruncationCellPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TruncationCellPatch (-117)
/* complex XML schema type 'resqml20:TruncationCellPatch': */
class SOAP_CMAC resqml20__TruncationCellPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:TruncationNodeCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 TruncationNodeCount;
        /// Required element 'resqml20:TruncationFaceCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 TruncationFaceCount;
        /// Required element 'resqml20:TruncationCellCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 TruncationCellCount;
        /// Required element 'resqml20:NodesPerTruncationFace' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *NodesPerTruncationFace;
        /// Required element 'resqml20:ParentCellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ParentCellIndices;
        /// Required element 'resqml20:LocalFacesPerCell' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *LocalFacesPerCell;
        /// Required element 'resqml20:TruncationFacesPerCell' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *TruncationFacesPerCell;
        /// Required element 'resqml20:TruncationCellFaceIsRightHanded' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *TruncationCellFaceIsRightHanded;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TruncationCellPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TruncationCellPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TruncationCellPatch, default initialized and not managed by a soap context
        virtual resqml20__TruncationCellPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TruncationCellPatch); }
      public:
        /// Constructor with default initializations
        resqml20__TruncationCellPatch() : TruncationNodeCount(), TruncationFaceCount(), TruncationCellCount(), NodesPerTruncationFace(), ParentCellIndices(), LocalFacesPerCell(), TruncationFacesPerCell(), TruncationCellFaceIsRightHanded() { }
        virtual ~resqml20__TruncationCellPatch() { }
        /// Friend allocator used by soap_new_resqml20__TruncationCellPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TruncationCellPatch * SOAP_FMAC2 soap_instantiate_resqml20__TruncationCellPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:368 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredGridPatch (-118)
/* complex XML schema type 'resqml20:GpGridUnstructuredGridPatch': */
class SOAP_CMAC resqml20__GpGridUnstructuredGridPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:UnstructuredCellCount' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 UnstructuredCellCount;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:UnstructuredGridGeometry'
        resqml20__UnstructuredGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredGridPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredGridPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__GpGridUnstructuredGridPatch, default initialized and not managed by a soap context
        virtual resqml20__GpGridUnstructuredGridPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__GpGridUnstructuredGridPatch); }
      public:
        /// Constructor with default initializations
        resqml20__GpGridUnstructuredGridPatch() : UnstructuredCellCount(), Geometry() { }
        virtual ~resqml20__GpGridUnstructuredGridPatch() { }
        /// Friend allocator used by soap_new_resqml20__GpGridUnstructuredGridPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__GpGridUnstructuredGridPatch * SOAP_FMAC2 soap_instantiate_resqml20__GpGridUnstructuredGridPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:396 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellParentWindow (-132)
/* complex XML schema type 'resqml20:CellParentWindow': */
class SOAP_CMAC resqml20__CellParentWindow : public resqml20__AbstractParentWindow {
      public:
        /// Required element 'resqml20:CellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *CellIndices;
        /// Required element 'resqml20:ParentGrid' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ParentGrid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__CellParentWindow, default initialized and not managed by a soap context
        virtual resqml20__CellParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__CellParentWindow); }
      public:
        /// Constructor with default initializations
        resqml20__CellParentWindow() : CellIndices(), ParentGrid() { }
        virtual ~resqml20__CellParentWindow() { }
        /// Friend allocator used by soap_new_resqml20__CellParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml20__CellParentWindow * SOAP_FMAC2 soap_instantiate_resqml20__CellParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:400 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridIjkGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridIjkGridPatch (-134)
/* complex XML schema type 'resqml20:GpGridIjkGridPatch': */
class SOAP_CMAC resqml20__GpGridIjkGridPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:Ni' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Ni;
        /// Required element 'resqml20:Nj' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Nj;
        /// Optional element 'resqml20:RadialGridIsComplete' of XML schema type 'xsd:boolean'
        bool *RadialGridIsComplete;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:IjkGridGeometry'
        resqml20__IjkGridGeometry *Geometry;
        /// Optional element 'resqml20:TruncationCells' of XML schema type 'resqml20:TruncationCellPatch'
        resqml20__TruncationCellPatch *TruncationCells;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridIjkGridPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridIjkGridPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__GpGridIjkGridPatch, default initialized and not managed by a soap context
        virtual resqml20__GpGridIjkGridPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__GpGridIjkGridPatch); }
      public:
        /// Constructor with default initializations
        resqml20__GpGridIjkGridPatch() : Ni(), Nj(), RadialGridIsComplete(), Geometry(), TruncationCells() { }
        virtual ~resqml20__GpGridIjkGridPatch() { }
        /// Friend allocator used by soap_new_resqml20__GpGridIjkGridPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__GpGridIjkGridPatch * SOAP_FMAC2 soap_instantiate_resqml20__GpGridIjkGridPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:432 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BinaryContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BinaryContactInterpretationPart (-150)
/* complex XML schema type 'resqml20:BinaryContactInterpretationPart': */
class SOAP_CMAC resqml20__BinaryContactInterpretationPart : public resqml20__AbstractContactInterpretationPart {
      public:
        /// Required element 'resqml20:DirectObject' of XML schema type 'resqml20:ContactElementReference'
        resqml20__ContactElementReference *DirectObject;
        /// Required element 'resqml20:Verb' of XML schema type 'resqml20:ContactVerb'
        resqml20__ContactVerb Verb;
        /// Required element 'resqml20:Subject' of XML schema type 'resqml20:ContactElementReference'
        resqml20__ContactElementReference *Subject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BinaryContactInterpretationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BinaryContactInterpretationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__BinaryContactInterpretationPart, default initialized and not managed by a soap context
        virtual resqml20__BinaryContactInterpretationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__BinaryContactInterpretationPart); }
      public:
        /// Constructor with default initializations
        resqml20__BinaryContactInterpretationPart() : DirectObject(), Verb(), Subject() { }
        virtual ~resqml20__BinaryContactInterpretationPart() { }
        /// Friend allocator used by soap_new_resqml20__BinaryContactInterpretationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml20__BinaryContactInterpretationPart * SOAP_FMAC2 soap_instantiate_resqml20__BinaryContactInterpretationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:436 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactElementReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactElementReference (-152)
/* complex XML schema type 'resqml20:ContactElementReference': */
class SOAP_CMAC resqml20__ContactElementReference : public eml20__DataObjectReference {
      public:
        /// Optional element 'resqml20:Qualifier' of XML schema type 'resqml20:ContactSide'
        resqml20__ContactSide *Qualifier;
        /// Optional element 'resqml20:SecondaryQualifier' of XML schema type 'resqml20:ContactMode'
        resqml20__ContactMode *SecondaryQualifier;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactElementReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactElementReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ContactElementReference, default initialized and not managed by a soap context
        virtual resqml20__ContactElementReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ContactElementReference); }
      public:
        /// Constructor with default initializations
        resqml20__ContactElementReference() : Qualifier(), SecondaryQualifier() { }
        virtual ~resqml20__ContactElementReference() { }
        /// Friend allocator used by soap_new_resqml20__ContactElementReference(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ContactElementReference * SOAP_FMAC2 soap_instantiate_resqml20__ContactElementReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:450 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MultipleContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MultipleContactInterpretationPart (-159)
/* complex XML schema type 'resqml20:MultipleContactInterpretationPart': */
class SOAP_CMAC resqml20__MultipleContactInterpretationPart : public resqml20__AbstractContactInterpretationPart {
      public:
        /// Required element 'resqml20:With' of XML schema type 'xsd:nonNegativeInteger'
        std::vector<ULONG64> With;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MultipleContactInterpretationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MultipleContactInterpretationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__MultipleContactInterpretationPart, default initialized and not managed by a soap context
        virtual resqml20__MultipleContactInterpretationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__MultipleContactInterpretationPart); }
      public:
        /// Constructor with default initializations
        resqml20__MultipleContactInterpretationPart() : With() { }
        virtual ~resqml20__MultipleContactInterpretationPart() { }
        /// Friend allocator used by soap_new_resqml20__MultipleContactInterpretationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml20__MultipleContactInterpretationPart * SOAP_FMAC2 soap_instantiate_resqml20__MultipleContactInterpretationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:550 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NonSealedContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NonSealedContactRepresentationPart (-209)
/* complex XML schema type 'resqml20:NonSealedContactRepresentationPart': */
class SOAP_CMAC resqml20__NonSealedContactRepresentationPart : public resqml20__AbstractContactRepresentationPart {
      public:
        /// Optional element 'resqml20:Contact' of XML schema type 'resqml20:ContactPatch'
        std::vector<resqml20__ContactPatch *> Contact;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:AbstractGeometry'
        resqml20__AbstractGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NonSealedContactRepresentationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NonSealedContactRepresentationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__NonSealedContactRepresentationPart, default initialized and not managed by a soap context
        virtual resqml20__NonSealedContactRepresentationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__NonSealedContactRepresentationPart); }
      public:
        /// Constructor with default initializations
        resqml20__NonSealedContactRepresentationPart() : Contact(), Geometry() { }
        virtual ~resqml20__NonSealedContactRepresentationPart() { }
        /// Friend allocator used by soap_new_resqml20__NonSealedContactRepresentationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml20__NonSealedContactRepresentationPart * SOAP_FMAC2 soap_instantiate_resqml20__NonSealedContactRepresentationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:552 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SealedContactRepresentationPart (-210)
/* complex XML schema type 'resqml20:SealedContactRepresentationPart': */
class SOAP_CMAC resqml20__SealedContactRepresentationPart : public resqml20__AbstractContactRepresentationPart {
      public:
        /// Optional element 'resqml20:IdenticalNodeIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *IdenticalNodeIndices;
        /// Required element 'resqml20:IdentityKind' of XML schema type 'resqml20:IdentityKind'
        resqml20__IdentityKind IdentityKind;
        /// Required element 'resqml20:Contact' of XML schema type 'resqml20:ContactPatch'
        std::vector<resqml20__ContactPatch *> Contact;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SealedContactRepresentationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SealedContactRepresentationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SealedContactRepresentationPart, default initialized and not managed by a soap context
        virtual resqml20__SealedContactRepresentationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SealedContactRepresentationPart); }
      public:
        /// Constructor with default initializations
        resqml20__SealedContactRepresentationPart() : IdenticalNodeIndices(), IdentityKind(), Contact() { }
        virtual ~resqml20__SealedContactRepresentationPart() { }
        /// Friend allocator used by soap_new_resqml20__SealedContactRepresentationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SealedContactRepresentationPart * SOAP_FMAC2 soap_instantiate_resqml20__SealedContactRepresentationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:588 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Grid2dPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Grid2dPatch (-228)
/* complex XML schema type 'resqml20:Grid2dPatch': */
class SOAP_CMAC resqml20__Grid2dPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:FastestAxisCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 FastestAxisCount;
        /// Required element 'resqml20:SlowestAxisCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 SlowestAxisCount;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:PointGeometry'
        resqml20__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Grid2dPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Grid2dPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__Grid2dPatch, default initialized and not managed by a soap context
        virtual resqml20__Grid2dPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__Grid2dPatch); }
      public:
        /// Constructor with default initializations
        resqml20__Grid2dPatch() : FastestAxisCount(), SlowestAxisCount(), Geometry() { }
        virtual ~resqml20__Grid2dPatch() { }
        /// Friend allocator used by soap_new_resqml20__Grid2dPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__Grid2dPatch * SOAP_FMAC2 soap_instantiate_resqml20__Grid2dPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:592 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PolylineSetPatch (-230)
/* complex XML schema type 'resqml20:PolylineSetPatch': */
class SOAP_CMAC resqml20__PolylineSetPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:ClosedPolylines' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *ClosedPolylines;
        /// Required element 'resqml20:NodeCountPerPolyline' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *NodeCountPerPolyline;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:PointGeometry'
        resqml20__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PolylineSetPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PolylineSetPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__PolylineSetPatch, default initialized and not managed by a soap context
        virtual resqml20__PolylineSetPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__PolylineSetPatch); }
      public:
        /// Constructor with default initializations
        resqml20__PolylineSetPatch() : ClosedPolylines(), NodeCountPerPolyline(), Geometry() { }
        virtual ~resqml20__PolylineSetPatch() { }
        /// Friend allocator used by soap_new_resqml20__PolylineSetPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__PolylineSetPatch * SOAP_FMAC2 soap_instantiate_resqml20__PolylineSetPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:598 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRepresentationReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRepresentationReference (-233)
/* complex XML schema type 'resqml20:ContactRepresentationReference': */
class SOAP_CMAC resqml20__ContactRepresentationReference : public resqml20__AbstractContactRepresentationPart {
      public:
        /// Required element 'resqml20:Representation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Representation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRepresentationReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRepresentationReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ContactRepresentationReference, default initialized and not managed by a soap context
        virtual resqml20__ContactRepresentationReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ContactRepresentationReference); }
      public:
        /// Constructor with default initializations
        resqml20__ContactRepresentationReference() : Representation() { }
        virtual ~resqml20__ContactRepresentationReference() { }
        /// Friend allocator used by soap_new_resqml20__ContactRepresentationReference(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ContactRepresentationReference * SOAP_FMAC2 soap_instantiate_resqml20__ContactRepresentationReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:618 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DataObjectParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DataObjectParameter (-243)
/* complex XML schema type 'resqml20:DataObjectParameter': */
class SOAP_CMAC resqml20__DataObjectParameter : public resqml20__AbstractActivityParameter {
      public:
        /// Required element 'resqml20:DataObject' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DataObjectParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DataObjectParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__DataObjectParameter, default initialized and not managed by a soap context
        virtual resqml20__DataObjectParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__DataObjectParameter); }
      public:
        /// Constructor with default initializations
        resqml20__DataObjectParameter() : DataObject() { }
        virtual ~resqml20__DataObjectParameter() { }
        /// Friend allocator used by soap_new_resqml20__DataObjectParameter(struct soap*, int)
        friend SOAP_FMAC1 resqml20__DataObjectParameter * SOAP_FMAC2 soap_instantiate_resqml20__DataObjectParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:620 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ObjectParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ObjectParameterKey (-244)
/* complex XML schema type 'resqml20:ObjectParameterKey': */
class SOAP_CMAC resqml20__ObjectParameterKey : public resqml20__AbstractParameterKey {
      public:
        /// Required element 'resqml20:DataObject' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ObjectParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ObjectParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ObjectParameterKey, default initialized and not managed by a soap context
        virtual resqml20__ObjectParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ObjectParameterKey); }
      public:
        /// Constructor with default initializations
        resqml20__ObjectParameterKey() : DataObject() { }
        virtual ~resqml20__ObjectParameterKey() { }
        /// Friend allocator used by soap_new_resqml20__ObjectParameterKey(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ObjectParameterKey * SOAP_FMAC2 soap_instantiate_resqml20__ObjectParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:624 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringParameter (-246)
/* complex XML schema type 'resqml20:StringParameter': */
class SOAP_CMAC resqml20__StringParameter : public resqml20__AbstractActivityParameter {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:string'
        std::string Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StringParameter, default initialized and not managed by a soap context
        virtual resqml20__StringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StringParameter); }
      public:
        /// Constructor with default initializations
        resqml20__StringParameter() : Value() { }
        virtual ~resqml20__StringParameter() { }
        /// Friend allocator used by soap_new_resqml20__StringParameter(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StringParameter * SOAP_FMAC2 soap_instantiate_resqml20__StringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:628 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerQuantityParameter (-248)
/* complex XML schema type 'resqml20:IntegerQuantityParameter': */
class SOAP_CMAC resqml20__IntegerQuantityParameter : public resqml20__AbstractActivityParameter {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntegerQuantityParameter, default initialized and not managed by a soap context
        virtual resqml20__IntegerQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntegerQuantityParameter); }
      public:
        /// Constructor with default initializations
        resqml20__IntegerQuantityParameter() : Value() { }
        virtual ~resqml20__IntegerQuantityParameter() { }
        /// Friend allocator used by soap_new_resqml20__IntegerQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntegerQuantityParameter * SOAP_FMAC2 soap_instantiate_resqml20__IntegerQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:630 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameterKey (-249)
/* complex XML schema type 'resqml20:TimeIndexParameterKey': */
class SOAP_CMAC resqml20__TimeIndexParameterKey : public resqml20__AbstractParameterKey {
      public:
        /// Required element 'resqml20:TimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TimeIndexParameterKey, default initialized and not managed by a soap context
        virtual resqml20__TimeIndexParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TimeIndexParameterKey); }
      public:
        /// Constructor with default initializations
        resqml20__TimeIndexParameterKey() : TimeIndex() { }
        virtual ~resqml20__TimeIndexParameterKey() { }
        /// Friend allocator used by soap_new_resqml20__TimeIndexParameterKey(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TimeIndexParameterKey * SOAP_FMAC2 soap_instantiate_resqml20__TimeIndexParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:632 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FloatingPointQuantityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FloatingPointQuantityParameter (-250)
/* complex XML schema type 'resqml20:FloatingPointQuantityParameter': */
class SOAP_CMAC resqml20__FloatingPointQuantityParameter : public resqml20__AbstractActivityParameter {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'resqml20:Uom' of XML schema type 'resqml20:ResqmlUom'
        resqml20__ResqmlUom Uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FloatingPointQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FloatingPointQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__FloatingPointQuantityParameter, default initialized and not managed by a soap context
        virtual resqml20__FloatingPointQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__FloatingPointQuantityParameter); }
      public:
        /// Constructor with default initializations
        resqml20__FloatingPointQuantityParameter() : Value(), Uom() { }
        virtual ~resqml20__FloatingPointQuantityParameter() { }
        /// Friend allocator used by soap_new_resqml20__FloatingPointQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 resqml20__FloatingPointQuantityParameter * SOAP_FMAC2 soap_instantiate_resqml20__FloatingPointQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:636 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameter (-252)
/* complex XML schema type 'resqml20:TimeIndexParameter': */
class SOAP_CMAC resqml20__TimeIndexParameter : public resqml20__AbstractActivityParameter {
      public:
        /// Required element 'resqml20:TimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TimeIndexParameter, default initialized and not managed by a soap context
        virtual resqml20__TimeIndexParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TimeIndexParameter); }
      public:
        /// Constructor with default initializations
        resqml20__TimeIndexParameter() : TimeIndex() { }
        virtual ~resqml20__TimeIndexParameter() { }
        /// Friend allocator used by soap_new_resqml20__TimeIndexParameter(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TimeIndexParameter * SOAP_FMAC2 soap_instantiate_resqml20__TimeIndexParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:642 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlinePolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlinePolylineSetPatch (-255)
/* complex XML schema type 'resqml20:StreamlinePolylineSetPatch': */
class SOAP_CMAC resqml20__StreamlinePolylineSetPatch : public resqml20__Patch {
      public:
        /// Required element 'resqml20:NodeCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 NodeCount;
        /// Required element 'resqml20:IntervalCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 IntervalCount;
        /// Required element 'resqml20:ClosedPolylines' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *ClosedPolylines;
        /// Required element 'resqml20:NodeCountPerPolyline' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *NodeCountPerPolyline;
        /// Optional element 'resqml20:IntervalGridCells' of XML schema type 'resqml20:IntervalGridCells'
        resqml20__IntervalGridCells *IntervalGridCells;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlinePolylineSetPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlinePolylineSetPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__StreamlinePolylineSetPatch, default initialized and not managed by a soap context
        virtual resqml20__StreamlinePolylineSetPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__StreamlinePolylineSetPatch); }
      public:
        /// Constructor with default initializations
        resqml20__StreamlinePolylineSetPatch() : NodeCount(), IntervalCount(), ClosedPolylines(), NodeCountPerPolyline(), IntervalGridCells() { }
        virtual ~resqml20__StreamlinePolylineSetPatch() { }
        /// Friend allocator used by soap_new_resqml20__StreamlinePolylineSetPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__StreamlinePolylineSetPatch * SOAP_FMAC2 soap_instantiate_resqml20__StreamlinePolylineSetPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:662 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractCitedDataObject
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractCitedDataObject (-265)
/* complex XML schema type 'eml20:AbstractCitedDataObject': */
class SOAP_CMAC eml20__AbstractCitedDataObject {
      public:
        /// Required element 'eml20:Citation' of XML schema type 'eml20:Citation'
        eml20__Citation *Citation;
        /// Optional element 'eml20:Aliases' of XML schema type 'eml20:ObjectAlias'
        std::vector<eml20__ObjectAlias *> Aliases;
        /// Optional element 'eml20:CustomData' of XML schema type 'eml20:CustomData'
        eml20__CustomData *CustomData;
        /// Required attribute 'schemaVersion' of XML schema type 'xsd:string'
        std::string schemaVersion;
        /// Required attribute 'uuid' of XML schema type 'eml20:UuidString'
        std::string uuid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractCitedDataObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractCitedDataObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AbstractCitedDataObject, default initialized and not managed by a soap context
        virtual eml20__AbstractCitedDataObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AbstractCitedDataObject); }
      public:
        /// Constructor with default initializations
        eml20__AbstractCitedDataObject() : Citation(), Aliases(), CustomData(), schemaVersion(), uuid(), soap() { }
        virtual ~eml20__AbstractCitedDataObject() { }
        /// Friend allocator used by soap_new_eml20__AbstractCitedDataObject(struct soap*, int)
        friend SOAP_FMAC1 eml20__AbstractCitedDataObject * SOAP_FMAC2 soap_instantiate_eml20__AbstractCitedDataObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:672 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrsEpsgCode
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrsEpsgCode (-270)
/* complex XML schema type 'eml20:VerticalCrsEpsgCode': */
class SOAP_CMAC eml20__VerticalCrsEpsgCode : public eml20__AbstractVerticalCrs {
      public:
        /// Required element 'eml20:EpsgCode' of XML schema type 'xsd:positiveInteger'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrsEpsgCode
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrsEpsgCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VerticalCrsEpsgCode, default initialized and not managed by a soap context
        virtual eml20__VerticalCrsEpsgCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VerticalCrsEpsgCode); }
      public:
        /// Constructor with default initializations
        eml20__VerticalCrsEpsgCode() : EpsgCode() { }
        virtual ~eml20__VerticalCrsEpsgCode() { }
        /// Friend allocator used by soap_new_eml20__VerticalCrsEpsgCode(struct soap*, int)
        friend SOAP_FMAC1 eml20__VerticalCrsEpsgCode * SOAP_FMAC2 soap_instantiate_eml20__VerticalCrsEpsgCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:674 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalUnknownCrs (-271)
/* complex XML schema type 'eml20:VerticalUnknownCrs': */
class SOAP_CMAC eml20__VerticalUnknownCrs : public eml20__AbstractVerticalCrs {
      public:
        /// Required element 'eml20:Unknown' of XML schema type 'eml20:DescriptionString'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VerticalUnknownCrs, default initialized and not managed by a soap context
        virtual eml20__VerticalUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VerticalUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml20__VerticalUnknownCrs() : Unknown() { }
        virtual ~eml20__VerticalUnknownCrs() { }
        /// Friend allocator used by soap_new_eml20__VerticalUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml20__VerticalUnknownCrs * SOAP_FMAC2 soap_instantiate_eml20__VerticalUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:684 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrsEpsgCode
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrsEpsgCode (-276)
/* complex XML schema type 'eml20:ProjectedCrsEpsgCode': */
class SOAP_CMAC eml20__ProjectedCrsEpsgCode : public eml20__AbstractProjectedCrs {
      public:
        /// Required element 'eml20:EpsgCode' of XML schema type 'xsd:positiveInteger'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrsEpsgCode
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrsEpsgCode; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ProjectedCrsEpsgCode, default initialized and not managed by a soap context
        virtual eml20__ProjectedCrsEpsgCode *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ProjectedCrsEpsgCode); }
      public:
        /// Constructor with default initializations
        eml20__ProjectedCrsEpsgCode() : EpsgCode() { }
        virtual ~eml20__ProjectedCrsEpsgCode() { }
        /// Friend allocator used by soap_new_eml20__ProjectedCrsEpsgCode(struct soap*, int)
        friend SOAP_FMAC1 eml20__ProjectedCrsEpsgCode * SOAP_FMAC2 soap_instantiate_eml20__ProjectedCrsEpsgCode(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:686 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedUnknownCrs (-277)
/* complex XML schema type 'eml20:ProjectedUnknownCrs': */
class SOAP_CMAC eml20__ProjectedUnknownCrs : public eml20__AbstractProjectedCrs {
      public:
        /// Required element 'eml20:Unknown' of XML schema type 'eml20:DescriptionString'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ProjectedUnknownCrs, default initialized and not managed by a soap context
        virtual eml20__ProjectedUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ProjectedUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml20__ProjectedUnknownCrs() : Unknown() { }
        virtual ~eml20__ProjectedUnknownCrs() { }
        /// Friend allocator used by soap_new_eml20__ProjectedUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml20__ProjectedUnknownCrs * SOAP_FMAC2 soap_instantiate_eml20__ProjectedUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:166 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerArrayFromBooleanMaskArray (-17)
/* complex XML schema type 'resqml20:IntegerArrayFromBooleanMaskArray': */
class SOAP_CMAC resqml20__IntegerArrayFromBooleanMaskArray : public resqml20__AbstractIntegerArray {
      public:
        /// Required element 'resqml20:TotalIndexCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 TotalIndexCount;
        /// Required element 'resqml20:Mask' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *Mask;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerArrayFromBooleanMaskArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerArrayFromBooleanMaskArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntegerArrayFromBooleanMaskArray, default initialized and not managed by a soap context
        virtual resqml20__IntegerArrayFromBooleanMaskArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntegerArrayFromBooleanMaskArray); }
      public:
        /// Constructor with default initializations
        resqml20__IntegerArrayFromBooleanMaskArray() : TotalIndexCount(), Mask() { }
        virtual ~resqml20__IntegerArrayFromBooleanMaskArray() { }
        /// Friend allocator used by soap_new_resqml20__IntegerArrayFromBooleanMaskArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntegerArrayFromBooleanMaskArray * SOAP_FMAC2 soap_instantiate_resqml20__IntegerArrayFromBooleanMaskArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:168 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromIndexArray (-18)
/* complex XML schema type 'resqml20:BooleanArrayFromIndexArray': */
class SOAP_CMAC resqml20__BooleanArrayFromIndexArray : public resqml20__AbstractBooleanArray {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:Indices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *Indices;
        /// Required element 'resqml20:IndexIsTrue' of XML schema type 'xsd:boolean'
        bool IndexIsTrue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromIndexArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromIndexArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__BooleanArrayFromIndexArray, default initialized and not managed by a soap context
        virtual resqml20__BooleanArrayFromIndexArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__BooleanArrayFromIndexArray); }
      public:
        /// Constructor with default initializations
        resqml20__BooleanArrayFromIndexArray() : Count(), Indices(), IndexIsTrue() { }
        virtual ~resqml20__BooleanArrayFromIndexArray() { }
        /// Friend allocator used by soap_new_resqml20__BooleanArrayFromIndexArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__BooleanArrayFromIndexArray * SOAP_FMAC2 soap_instantiate_resqml20__BooleanArrayFromIndexArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:170 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanConstantArray (-19)
/* complex XML schema type 'resqml20:BooleanConstantArray': */
class SOAP_CMAC resqml20__BooleanConstantArray : public resqml20__AbstractBooleanArray {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:boolean'
        bool Value;
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__BooleanConstantArray, default initialized and not managed by a soap context
        virtual resqml20__BooleanConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__BooleanConstantArray); }
      public:
        /// Constructor with default initializations
        resqml20__BooleanConstantArray() : Value(), Count() { }
        virtual ~resqml20__BooleanConstantArray() { }
        /// Friend allocator used by soap_new_resqml20__BooleanConstantArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__BooleanConstantArray * SOAP_FMAC2 soap_instantiate_resqml20__BooleanConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:172 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerConstantArray (-20)
/* complex XML schema type 'resqml20:IntegerConstantArray': */
class SOAP_CMAC resqml20__IntegerConstantArray : public resqml20__AbstractIntegerArray {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:integer'
        LONG64 Value;
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntegerConstantArray, default initialized and not managed by a soap context
        virtual resqml20__IntegerConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntegerConstantArray); }
      public:
        /// Constructor with default initializations
        resqml20__IntegerConstantArray() : Value(), Count() { }
        virtual ~resqml20__IntegerConstantArray() { }
        /// Friend allocator used by soap_new_resqml20__IntegerConstantArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntegerConstantArray * SOAP_FMAC2 soap_instantiate_resqml20__IntegerConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:178 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerHdf5Array (-23)
/* complex XML schema type 'resqml20:IntegerHdf5Array': */
class SOAP_CMAC resqml20__IntegerHdf5Array : public resqml20__AbstractIntegerArray {
      public:
        /// Required element 'resqml20:NullValue' of XML schema type 'xsd:integer'
        LONG64 NullValue;
        /// Required element 'resqml20:Values' of XML schema type 'eml20:Hdf5Dataset'
        eml20__Hdf5Dataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerHdf5Array
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerHdf5Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntegerHdf5Array, default initialized and not managed by a soap context
        virtual resqml20__IntegerHdf5Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntegerHdf5Array); }
      public:
        /// Constructor with default initializations
        resqml20__IntegerHdf5Array() : NullValue(), Values() { }
        virtual ~resqml20__IntegerHdf5Array() { }
        /// Friend allocator used by soap_new_resqml20__IntegerHdf5Array(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntegerHdf5Array * SOAP_FMAC2 soap_instantiate_resqml20__IntegerHdf5Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:186 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLatticeArray (-27)
/* complex XML schema type 'resqml20:DoubleLatticeArray': */
class SOAP_CMAC resqml20__DoubleLatticeArray : public resqml20__AbstractDoubleArray {
      public:
        /// Required element 'resqml20:StartValue' of XML schema type 'xsd:double'
        double StartValue;
        /// Required element 'resqml20:Offset' of XML schema type 'resqml20:DoubleConstantArray'
        std::vector<resqml20__DoubleConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__DoubleLatticeArray, default initialized and not managed by a soap context
        virtual resqml20__DoubleLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__DoubleLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml20__DoubleLatticeArray() : StartValue(), Offset() { }
        virtual ~resqml20__DoubleLatticeArray() { }
        /// Friend allocator used by soap_new_resqml20__DoubleLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__DoubleLatticeArray * SOAP_FMAC2 soap_instantiate_resqml20__DoubleLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:188 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleConstantArray (-28)
/* complex XML schema type 'resqml20:DoubleConstantArray': */
class SOAP_CMAC resqml20__DoubleConstantArray : public resqml20__AbstractDoubleArray {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__DoubleConstantArray, default initialized and not managed by a soap context
        virtual resqml20__DoubleConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__DoubleConstantArray); }
      public:
        /// Constructor with default initializations
        resqml20__DoubleConstantArray() : Value(), Count() { }
        virtual ~resqml20__DoubleConstantArray() { }
        /// Friend allocator used by soap_new_resqml20__DoubleConstantArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__DoubleConstantArray * SOAP_FMAC2 soap_instantiate_resqml20__DoubleConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:190 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleHdf5Array (-29)
/* complex XML schema type 'resqml20:DoubleHdf5Array': */
class SOAP_CMAC resqml20__DoubleHdf5Array : public resqml20__AbstractDoubleArray {
      public:
        /// Required element 'resqml20:Values' of XML schema type 'eml20:Hdf5Dataset'
        eml20__Hdf5Dataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleHdf5Array
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleHdf5Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__DoubleHdf5Array, default initialized and not managed by a soap context
        virtual resqml20__DoubleHdf5Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__DoubleHdf5Array); }
      public:
        /// Constructor with default initializations
        resqml20__DoubleHdf5Array() : Values() { }
        virtual ~resqml20__DoubleHdf5Array() { }
        /// Friend allocator used by soap_new_resqml20__DoubleHdf5Array(struct soap*, int)
        friend SOAP_FMAC1 resqml20__DoubleHdf5Array * SOAP_FMAC2 soap_instantiate_resqml20__DoubleHdf5Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:202 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerLatticeArray (-35)
/* complex XML schema type 'resqml20:IntegerLatticeArray': */
class SOAP_CMAC resqml20__IntegerLatticeArray : public resqml20__AbstractIntegerArray {
      public:
        /// Required element 'resqml20:StartValue' of XML schema type 'xsd:integer'
        LONG64 StartValue;
        /// Required element 'resqml20:Offset' of XML schema type 'resqml20:IntegerConstantArray'
        std::vector<resqml20__IntegerConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntegerLatticeArray, default initialized and not managed by a soap context
        virtual resqml20__IntegerLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntegerLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml20__IntegerLatticeArray() : StartValue(), Offset() { }
        virtual ~resqml20__IntegerLatticeArray() { }
        /// Friend allocator used by soap_new_resqml20__IntegerLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntegerLatticeArray * SOAP_FMAC2 soap_instantiate_resqml20__IntegerLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:210 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanHdf5Array (-39)
/* complex XML schema type 'resqml20:BooleanHdf5Array': */
class SOAP_CMAC resqml20__BooleanHdf5Array : public resqml20__AbstractBooleanArray {
      public:
        /// Required element 'resqml20:Values' of XML schema type 'eml20:Hdf5Dataset'
        eml20__Hdf5Dataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanHdf5Array
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanHdf5Array; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__BooleanHdf5Array, default initialized and not managed by a soap context
        virtual resqml20__BooleanHdf5Array *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__BooleanHdf5Array); }
      public:
        /// Constructor with default initializations
        resqml20__BooleanHdf5Array() : Values() { }
        virtual ~resqml20__BooleanHdf5Array() { }
        /// Friend allocator used by soap_new_resqml20__BooleanHdf5Array(struct soap*, int)
        friend SOAP_FMAC1 resqml20__BooleanHdf5Array * SOAP_FMAC2 soap_instantiate_resqml20__BooleanHdf5Array(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:220 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerRangeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerRangeArray (-44)
/* complex XML schema type 'resqml20:IntegerRangeArray': */
class SOAP_CMAC resqml20__IntegerRangeArray : public resqml20__AbstractIntegerArray {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:Value' of XML schema type 'xsd:integer'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerRangeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerRangeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IntegerRangeArray, default initialized and not managed by a soap context
        virtual resqml20__IntegerRangeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IntegerRangeArray); }
      public:
        /// Constructor with default initializations
        resqml20__IntegerRangeArray() : Count(), Value() { }
        virtual ~resqml20__IntegerRangeArray() { }
        /// Friend allocator used by soap_new_resqml20__IntegerRangeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IntegerRangeArray * SOAP_FMAC2 soap_instantiate_resqml20__IntegerRangeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:240 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromDiscretePropertyArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromDiscretePropertyArray (-54)
/* complex XML schema type 'resqml20:BooleanArrayFromDiscretePropertyArray': */
class SOAP_CMAC resqml20__BooleanArrayFromDiscretePropertyArray : public resqml20__AbstractBooleanArray {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'xsd:integer'
        LONG64 Value;
        /// Required element 'resqml20:Property' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Property;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromDiscretePropertyArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromDiscretePropertyArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__BooleanArrayFromDiscretePropertyArray, default initialized and not managed by a soap context
        virtual resqml20__BooleanArrayFromDiscretePropertyArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__BooleanArrayFromDiscretePropertyArray); }
      public:
        /// Constructor with default initializations
        resqml20__BooleanArrayFromDiscretePropertyArray() : Value(), Property() { }
        virtual ~resqml20__BooleanArrayFromDiscretePropertyArray() { }
        /// Friend allocator used by soap_new_resqml20__BooleanArrayFromDiscretePropertyArray(struct soap*, int)
        friend SOAP_FMAC1 resqml20__BooleanArrayFromDiscretePropertyArray * SOAP_FMAC2 soap_instantiate_resqml20__BooleanArrayFromDiscretePropertyArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:246 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineGeometry (-57)
/* complex XML schema type 'resqml20:ParametricLineGeometry': */
class SOAP_CMAC resqml20__ParametricLineGeometry : public resqml20__AbstractParametricLineGeometry {
      public:
        /// Optional element 'resqml20:ControlPointParameters' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *ControlPointParameters;
        /// Required element 'resqml20:ControlPoints' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *ControlPoints;
        /// Required element 'resqml20:KnotCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 KnotCount;
        /// Required element 'resqml20:LineKindIndex' of XML schema type 'xsd:integer'
        LONG64 LineKindIndex;
        /// Optional element 'resqml20:TangentVectors' of XML schema type 'resqml20:AbstractPoint3dArray'
        resqml20__AbstractPoint3dArray *TangentVectors;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ParametricLineGeometry, default initialized and not managed by a soap context
        virtual resqml20__ParametricLineGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ParametricLineGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__ParametricLineGeometry() : ControlPointParameters(), ControlPoints(), KnotCount(), LineKindIndex(), TangentVectors() { }
        virtual ~resqml20__ParametricLineGeometry() { }
        /// Friend allocator used by soap_new_resqml20__ParametricLineGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ParametricLineGeometry * SOAP_FMAC2 soap_instantiate_resqml20__ParametricLineGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:254 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizontalPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizontalPlaneGeometry (-61)
/* complex XML schema type 'resqml20:HorizontalPlaneGeometry': */
class SOAP_CMAC resqml20__HorizontalPlaneGeometry : public resqml20__AbstractPlaneGeometry {
      public:
        /// Required element 'resqml20:Coordinate' of XML schema type 'xsd:double'
        double Coordinate;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizontalPlaneGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizontalPlaneGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__HorizontalPlaneGeometry, default initialized and not managed by a soap context
        virtual resqml20__HorizontalPlaneGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__HorizontalPlaneGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__HorizontalPlaneGeometry() : Coordinate() { }
        virtual ~resqml20__HorizontalPlaneGeometry() { }
        /// Friend allocator used by soap_new_resqml20__HorizontalPlaneGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__HorizontalPlaneGeometry * SOAP_FMAC2 soap_instantiate_resqml20__HorizontalPlaneGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:266 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationGeometry (-67)
/* complex XML schema type 'resqml20:ParametricLineFromRepresentationGeometry': */
class SOAP_CMAC resqml20__ParametricLineFromRepresentationGeometry : public resqml20__AbstractParametricLineGeometry {
      public:
        /// Required element 'resqml20:LineIndiexOnSupportingRepresentation' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 LineIndiexOnSupportingRepresentation;
        /// Required element 'resqml20:SupportingRepresentation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ParametricLineFromRepresentationGeometry, default initialized and not managed by a soap context
        virtual resqml20__ParametricLineFromRepresentationGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ParametricLineFromRepresentationGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__ParametricLineFromRepresentationGeometry() : LineIndiexOnSupportingRepresentation(), SupportingRepresentation() { }
        virtual ~resqml20__ParametricLineFromRepresentationGeometry() { }
        /// Friend allocator used by soap_new_resqml20__ParametricLineFromRepresentationGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ParametricLineFromRepresentationGeometry * SOAP_FMAC2 soap_instantiate_resqml20__ParametricLineFromRepresentationGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:276 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TiltedPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TiltedPlaneGeometry (-72)
/* complex XML schema type 'resqml20:TiltedPlaneGeometry': */
class SOAP_CMAC resqml20__TiltedPlaneGeometry : public resqml20__AbstractPlaneGeometry {
      public:
        /// Required element 'resqml20:Plane' of XML schema type 'resqml20:ThreePoint3d'
        std::vector<resqml20__ThreePoint3d *> Plane;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TiltedPlaneGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TiltedPlaneGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TiltedPlaneGeometry, default initialized and not managed by a soap context
        virtual resqml20__TiltedPlaneGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TiltedPlaneGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__TiltedPlaneGeometry() : Plane() { }
        virtual ~resqml20__TiltedPlaneGeometry() { }
        /// Friend allocator used by soap_new_resqml20__TiltedPlaneGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TiltedPlaneGeometry * SOAP_FMAC2 soap_instantiate_resqml20__TiltedPlaneGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:296 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubRepresentationPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubRepresentationPatch (-82)
/* complex XML schema type 'resqml20:SubRepresentationPatch': */
class SOAP_CMAC resqml20__SubRepresentationPatch : public resqml20__Patch1d {
      public:
        /// Sequence of 1 to 2 elements 'resqml20:ElementIndices' of XML schema type 'resqml20:ElementIndices'
        std::vector<resqml20__ElementIndices *> ElementIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubRepresentationPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubRepresentationPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SubRepresentationPatch, default initialized and not managed by a soap context
        virtual resqml20__SubRepresentationPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SubRepresentationPatch); }
      public:
        /// Constructor with default initializations
        resqml20__SubRepresentationPatch() : ElementIndices() { }
        virtual ~resqml20__SubRepresentationPatch() { }
        /// Friend allocator used by soap_new_resqml20__SubRepresentationPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SubRepresentationPatch * SOAP_FMAC2 soap_instantiate_resqml20__SubRepresentationPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:324 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnSubnodePatch (-96)
/* complex XML schema type 'resqml20:ColumnSubnodePatch': */
class SOAP_CMAC resqml20__ColumnSubnodePatch : public resqml20__SubnodePatch {
      public:
        /// Required element 'resqml20:SubnodeCountPerObject' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *SubnodeCountPerObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnSubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnSubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ColumnSubnodePatch, default initialized and not managed by a soap context
        virtual resqml20__ColumnSubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ColumnSubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml20__ColumnSubnodePatch() : SubnodeCountPerObject() { }
        virtual ~resqml20__ColumnSubnodePatch() { }
        /// Friend allocator used by soap_new_resqml20__ColumnSubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ColumnSubnodePatch * SOAP_FMAC2 soap_instantiate_resqml20__ColumnSubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:352 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UniformSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UniformSubnodePatch (-110)
/* complex XML schema type 'resqml20:UniformSubnodePatch': */
class SOAP_CMAC resqml20__UniformSubnodePatch : public resqml20__SubnodePatch {
      public:
        /// Required element 'resqml20:SubnodeCountPerObject' of XML schema type 'xsd:positiveInteger'
        ULONG64 SubnodeCountPerObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UniformSubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UniformSubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__UniformSubnodePatch, default initialized and not managed by a soap context
        virtual resqml20__UniformSubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__UniformSubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml20__UniformSubnodePatch() : SubnodeCountPerObject() { }
        virtual ~resqml20__UniformSubnodePatch() { }
        /// Friend allocator used by soap_new_resqml20__UniformSubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__UniformSubnodePatch * SOAP_FMAC2 soap_instantiate_resqml20__UniformSubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:406 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridGeometry (-137)
/* complex XML schema type 'resqml20:AbstractGridGeometry': */
class SOAP_CMAC resqml20__AbstractGridGeometry : public resqml20__PointGeometry {
      public:
        /// Optional element 'resqml20:AdditionalGridPoints' of XML schema type 'resqml20:AdditionalGridPoints'
        std::vector<resqml20__AdditionalGridPoints *> AdditionalGridPoints;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractGridGeometry, default initialized and not managed by a soap context
        virtual resqml20__AbstractGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractGridGeometry() : AdditionalGridPoints() { }
        virtual ~resqml20__AbstractGridGeometry() { }
        /// Friend allocator used by soap_new_resqml20__AbstractGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractGridGeometry * SOAP_FMAC2 soap_instantiate_resqml20__AbstractGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:414 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VariableSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VariableSubnodePatch (-141)
/* complex XML schema type 'resqml20:VariableSubnodePatch': */
class SOAP_CMAC resqml20__VariableSubnodePatch : public resqml20__SubnodePatch {
      public:
        /// Required element 'resqml20:ObjectIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *ObjectIndices;
        /// Required element 'resqml20:SubnodeCountPerSelectedObject' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *SubnodeCountPerSelectedObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VariableSubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VariableSubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__VariableSubnodePatch, default initialized and not managed by a soap context
        virtual resqml20__VariableSubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__VariableSubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml20__VariableSubnodePatch() : ObjectIndices(), SubnodeCountPerSelectedObject() { }
        virtual ~resqml20__VariableSubnodePatch() { }
        /// Friend allocator used by soap_new_resqml20__VariableSubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__VariableSubnodePatch * SOAP_FMAC2 soap_instantiate_resqml20__VariableSubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:528 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractResqmlDataObject
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractResqmlDataObject (-198)
/* complex XML schema type 'resqml20:AbstractResqmlDataObject': */
class SOAP_CMAC resqml20__AbstractResqmlDataObject : public eml20__AbstractCitedDataObject {
      public:
        /// Optional element 'resqml20:ExtraMetadata' of XML schema type 'resqml20:NameValuePair'
        std::vector<resqml20__NameValuePair *> ExtraMetadata;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractResqmlDataObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractResqmlDataObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractResqmlDataObject, default initialized and not managed by a soap context
        virtual resqml20__AbstractResqmlDataObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractResqmlDataObject); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractResqmlDataObject() : ExtraMetadata() { }
        virtual ~resqml20__AbstractResqmlDataObject() { }
        /// Friend allocator used by soap_new_resqml20__AbstractResqmlDataObject(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractResqmlDataObject * SOAP_FMAC2 soap_instantiate_resqml20__AbstractResqmlDataObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:554 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactPatch (-211)
/* complex XML schema type 'resqml20:ContactPatch': */
class SOAP_CMAC resqml20__ContactPatch : public resqml20__Patch1d {
      public:
        /// Required element 'resqml20:RepresentationIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 RepresentationIndex;
        /// Required element 'resqml20:SupportingRepresentationNodes' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *SupportingRepresentationNodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__ContactPatch, default initialized and not managed by a soap context
        virtual resqml20__ContactPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__ContactPatch); }
      public:
        /// Constructor with default initializations
        resqml20__ContactPatch() : RepresentationIndex(), SupportingRepresentationNodes() { }
        virtual ~resqml20__ContactPatch() { }
        /// Friend allocator used by soap_new_resqml20__ContactPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__ContactPatch * SOAP_FMAC2 soap_instantiate_resqml20__ContactPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:566 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__EdgePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__EdgePatch (-217)
/* complex XML schema type 'resqml20:EdgePatch': */
class SOAP_CMAC resqml20__EdgePatch : public resqml20__Patch1d {
      public:
        /// Optional element 'resqml20:SplitEdges' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *SplitEdges;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__EdgePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__EdgePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__EdgePatch, default initialized and not managed by a soap context
        virtual resqml20__EdgePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__EdgePatch); }
      public:
        /// Constructor with default initializations
        resqml20__EdgePatch() : SplitEdges() { }
        virtual ~resqml20__EdgePatch() { }
        /// Friend allocator used by soap_new_resqml20__EdgePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__EdgePatch * SOAP_FMAC2 soap_instantiate_resqml20__EdgePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:574 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodePatch (-221)
/* complex XML schema type 'resqml20:NodePatch': */
class SOAP_CMAC resqml20__NodePatch : public resqml20__Patch1d {
      public:
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:PointGeometry'
        resqml20__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__NodePatch, default initialized and not managed by a soap context
        virtual resqml20__NodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__NodePatch); }
      public:
        /// Constructor with default initializations
        resqml20__NodePatch() : Geometry() { }
        virtual ~resqml20__NodePatch() { }
        /// Friend allocator used by soap_new_resqml20__NodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__NodePatch * SOAP_FMAC2 soap_instantiate_resqml20__NodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:578 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TrianglePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TrianglePatch (-223)
/* complex XML schema type 'resqml20:TrianglePatch': */
class SOAP_CMAC resqml20__TrianglePatch : public resqml20__Patch1d {
      public:
        /// Required element 'resqml20:NodeCount' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 NodeCount;
        /// Required element 'resqml20:Triangles' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *Triangles;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:PointGeometry'
        resqml20__PointGeometry *Geometry;
        /// Optional element 'resqml20:SplitEdgePatch' of XML schema type 'resqml20:EdgePatch'
        std::vector<resqml20__EdgePatch *> SplitEdgePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TrianglePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TrianglePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__TrianglePatch, default initialized and not managed by a soap context
        virtual resqml20__TrianglePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__TrianglePatch); }
      public:
        /// Constructor with default initializations
        resqml20__TrianglePatch() : NodeCount(), Triangles(), Geometry(), SplitEdgePatch() { }
        virtual ~resqml20__TrianglePatch() { }
        /// Friend allocator used by soap_new_resqml20__TrianglePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml20__TrianglePatch * SOAP_FMAC2 soap_instantiate_resqml20__TrianglePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:676 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrs (-272)
/* complex XML schema type 'eml20:ProjectedCrs': */
class SOAP_CMAC eml20__ProjectedCrs : public eml20__AbstractCitedDataObject {
      public:
        /// Required element 'eml20:AxisOrder' of XML schema type 'eml20:AxisOrder2d'
        eml20__AxisOrder2d AxisOrder;
        /// Required element 'eml20:AbstractProjectedCrs' of XML schema type 'eml20:AbstractProjectedCrs'
        eml20__AbstractProjectedCrs *AbstractProjectedCrs;
        /// Optional attribute 'uom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom *uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ProjectedCrs, default initialized and not managed by a soap context
        virtual eml20__ProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml20__ProjectedCrs() : AxisOrder(), AbstractProjectedCrs(), uom() { }
        virtual ~eml20__ProjectedCrs() { }
        /// Friend allocator used by soap_new_eml20__ProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml20__ProjectedCrs * SOAP_FMAC2 soap_instantiate_eml20__ProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:678 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrs (-273)
/* complex XML schema type 'eml20:VerticalCrs': */
class SOAP_CMAC eml20__VerticalCrs : public eml20__AbstractCitedDataObject {
      public:
        /// Required element 'eml20:Direction' of XML schema type 'eml20:VerticalDirection'
        eml20__VerticalDirection Direction;
        /// Required element 'eml20:AbstractVerticalCrs' of XML schema type 'eml20:AbstractVerticalCrs'
        eml20__AbstractVerticalCrs *AbstractVerticalCrs;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VerticalCrs, default initialized and not managed by a soap context
        virtual eml20__VerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VerticalCrs); }
      public:
        /// Constructor with default initializations
        eml20__VerticalCrs() : Direction(), AbstractVerticalCrs(), uom() { }
        virtual ~eml20__VerticalCrs() { }
        /// Friend allocator used by soap_new_eml20__VerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml20__VerticalCrs * SOAP_FMAC2 soap_instantiate_eml20__VerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:690 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__obj_USCOREEpcExternalPartReference
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__obj_USCOREEpcExternalPartReference (-279)
/* complex XML schema type 'eml20:obj_EpcExternalPartReference': */
class SOAP_CMAC eml20__obj_USCOREEpcExternalPartReference : public eml20__AbstractCitedDataObject {
      public:
        /// Required element 'eml20:MimeType' of XML schema type 'xsd:string'
        std::string MimeType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__obj_USCOREEpcExternalPartReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__obj_USCOREEpcExternalPartReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__obj_USCOREEpcExternalPartReference, default initialized and not managed by a soap context
        virtual eml20__obj_USCOREEpcExternalPartReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__obj_USCOREEpcExternalPartReference); }
      public:
        /// Constructor with default initializations
        eml20__obj_USCOREEpcExternalPartReference() : MimeType() { }
        virtual ~eml20__obj_USCOREEpcExternalPartReference() { }
        /// Friend allocator used by soap_new_eml20__obj_USCOREEpcExternalPartReference(struct soap*, int)
        friend SOAP_FMAC1 eml20__obj_USCOREEpcExternalPartReference * SOAP_FMAC2 soap_instantiate_eml20__obj_USCOREEpcExternalPartReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:694 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredMeasure (-281)
/* simple XML schema type 'eml20:PressureSquaredMeasure': */
class SOAP_CMAC eml20__PressureSquaredMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PressureSquaredUom'
        eml20__PressureSquaredUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PressureSquaredMeasure, default initialized and not managed by a soap context
        virtual eml20__PressureSquaredMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PressureSquaredMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PressureSquaredMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PressureSquaredMeasure() { }
        /// Friend allocator used by soap_new_eml20__PressureSquaredMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PressureSquaredMeasure * SOAP_FMAC2 soap_instantiate_eml20__PressureSquaredMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:696 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthMeasure (-282)
/* simple XML schema type 'eml20:ForceLengthPerLengthMeasure': */
class SOAP_CMAC eml20__ForceLengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ForceLengthPerLengthUom'
        eml20__ForceLengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ForceLengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__ForceLengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ForceLengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ForceLengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ForceLengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__ForceLengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ForceLengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__ForceLengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:698 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaMeasure (-283)
/* simple XML schema type 'eml20:AmountOfSubstancePerTimePerAreaMeasure': */
class SOAP_CMAC eml20__AmountOfSubstancePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AmountOfSubstancePerTimePerAreaUom'
        eml20__AmountOfSubstancePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AmountOfSubstancePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__AmountOfSubstancePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AmountOfSubstancePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AmountOfSubstancePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AmountOfSubstancePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AmountOfSubstancePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:700 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaMeasure (-284)
/* simple XML schema type 'eml20:VolumePerTimePerAreaMeasure': */
class SOAP_CMAC eml20__VolumePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimePerAreaUom'
        eml20__VolumePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:702 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthMeasure (-285)
/* simple XML schema type 'eml20:LengthPerLengthMeasure': */
class SOAP_CMAC eml20__LengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthPerLengthUom'
        eml20__LengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:704 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalMeasure (-286)
/* simple XML schema type 'eml20:TemperatureIntervalMeasure': */
class SOAP_CMAC eml20__TemperatureIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TemperatureIntervalUom'
        eml20__TemperatureIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TemperatureIntervalMeasure, default initialized and not managed by a soap context
        virtual eml20__TemperatureIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TemperatureIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TemperatureIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TemperatureIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml20__TemperatureIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TemperatureIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml20__TemperatureIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:706 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthMeasure (-287)
/* simple XML schema type 'eml20:VolumePerTimePerLengthMeasure': */
class SOAP_CMAC eml20__VolumePerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimePerLengthUom'
        eml20__VolumePerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:708 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeMeasure (-288)
/* simple XML schema type 'eml20:VolumePerTimePerTimeMeasure': */
class SOAP_CMAC eml20__VolumePerTimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimePerTimeUom'
        eml20__VolumePerTimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:710 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthMeasure (-289)
/* simple XML schema type 'eml20:PermeabilityLengthMeasure': */
class SOAP_CMAC eml20__PermeabilityLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PermeabilityLengthUom'
        eml20__PermeabilityLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PermeabilityLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__PermeabilityLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PermeabilityLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PermeabilityLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PermeabilityLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__PermeabilityLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PermeabilityLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__PermeabilityLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:712 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceMeasure (-290)
/* simple XML schema type 'eml20:ThermalInsulanceMeasure': */
class SOAP_CMAC eml20__ThermalInsulanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ThermalInsulanceUom'
        eml20__ThermalInsulanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ThermalInsulanceMeasure, default initialized and not managed by a soap context
        virtual eml20__ThermalInsulanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ThermalInsulanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ThermalInsulanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ThermalInsulanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ThermalInsulanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ThermalInsulanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ThermalInsulanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:714 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaMeasure (-291)
/* simple XML schema type 'eml20:ForceAreaMeasure': */
class SOAP_CMAC eml20__ForceAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ForceAreaUom'
        eml20__ForceAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ForceAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__ForceAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ForceAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ForceAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ForceAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__ForceAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ForceAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__ForceAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:716 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyMeasure (-292)
/* simple XML schema type 'eml20:EnergyMeasure': */
class SOAP_CMAC eml20__EnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyUom'
        eml20__EnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:718 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceMeasure (-293)
/* simple XML schema type 'eml20:IlluminanceMeasure': */
class SOAP_CMAC eml20__IlluminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:IlluminanceUom'
        eml20__IlluminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__IlluminanceMeasure, default initialized and not managed by a soap context
        virtual eml20__IlluminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__IlluminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__IlluminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__IlluminanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__IlluminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__IlluminanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__IlluminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:720 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceMeasure (-294)
/* simple XML schema type 'eml20:ForceMeasure': */
class SOAP_CMAC eml20__ForceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ForceUom'
        eml20__ForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ForceMeasure, default initialized and not managed by a soap context
        virtual eml20__ForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ForceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ForceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ForceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:722 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityMeasure (-295)
/* simple XML schema type 'eml20:RadiantIntensityMeasure': */
class SOAP_CMAC eml20__RadiantIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:RadiantIntensityUom'
        eml20__RadiantIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__RadiantIntensityMeasure, default initialized and not managed by a soap context
        virtual eml20__RadiantIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__RadiantIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__RadiantIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__RadiantIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml20__RadiantIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__RadiantIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml20__RadiantIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:724 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerMeasure (-296)
/* simple XML schema type 'eml20:PowerPerPowerMeasure': */
class SOAP_CMAC eml20__PowerPerPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PowerPerPowerUom'
        eml20__PowerPerPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PowerPerPowerMeasure, default initialized and not managed by a soap context
        virtual eml20__PowerPerPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PowerPerPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PowerPerPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PowerPerPowerMeasure() { }
        /// Friend allocator used by soap_new_eml20__PowerPerPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PowerPerPowerMeasure * SOAP_FMAC2 soap_instantiate_eml20__PowerPerPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:726 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessMeasure (-297)
/* simple XML schema type 'eml20:DimensionlessMeasure': */
class SOAP_CMAC eml20__DimensionlessMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DimensionlessUom'
        eml20__DimensionlessUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DimensionlessMeasure, default initialized and not managed by a soap context
        virtual eml20__DimensionlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DimensionlessMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DimensionlessMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DimensionlessMeasure() { }
        /// Friend allocator used by soap_new_eml20__DimensionlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DimensionlessMeasure * SOAP_FMAC2 soap_instantiate_eml20__DimensionlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:728 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientMeasure (-298)
/* simple XML schema type 'eml20:HeatTransferCoefficientMeasure': */
class SOAP_CMAC eml20__HeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:HeatTransferCoefficientUom'
        eml20__HeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__HeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml20__HeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__HeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml20__HeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__HeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml20__HeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__HeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml20__HeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:730 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronMeasure (-299)
/* simple XML schema type 'eml20:APINeutronMeasure': */
class SOAP_CMAC eml20__APINeutronMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:APINeutronUom'
        eml20__APINeutronUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__APINeutronMeasure, default initialized and not managed by a soap context
        virtual eml20__APINeutronMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__APINeutronMeasure); }
      public:
        /// Constructor with default initializations
        eml20__APINeutronMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__APINeutronMeasure() { }
        /// Friend allocator used by soap_new_eml20__APINeutronMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__APINeutronMeasure * SOAP_FMAC2 soap_instantiate_eml20__APINeutronMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:732 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialMeasure (-300)
/* simple XML schema type 'eml20:MagneticVectorPotentialMeasure': */
class SOAP_CMAC eml20__MagneticVectorPotentialMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticVectorPotentialUom'
        eml20__MagneticVectorPotentialUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticVectorPotentialMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticVectorPotentialMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticVectorPotentialMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticVectorPotentialMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticVectorPotentialMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticVectorPotentialMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticVectorPotentialMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticVectorPotentialMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:734 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationMeasure (-301)
/* simple XML schema type 'eml20:LinearAccelerationMeasure': */
class SOAP_CMAC eml20__LinearAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LinearAccelerationUom'
        eml20__LinearAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LinearAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml20__LinearAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LinearAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LinearAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LinearAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml20__LinearAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LinearAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml20__LinearAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:736 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeMeasure (-302)
/* simple XML schema type 'eml20:VolumePerTimeMeasure': */
class SOAP_CMAC eml20__VolumePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimeUom'
        eml20__VolumePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:738 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxMeasure (-303)
/* simple XML schema type 'eml20:MagneticFluxMeasure': */
class SOAP_CMAC eml20__MagneticFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticFluxUom'
        eml20__MagneticFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticFluxMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticFluxMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticFluxMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:740 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionMeasure (-304)
/* simple XML schema type 'eml20:VolumetricThermalExpansionMeasure': */
class SOAP_CMAC eml20__VolumetricThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumetricThermalExpansionUom'
        eml20__VolumetricThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumetricThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumetricThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumetricThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumetricThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumetricThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumetricThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumetricThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumetricThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:742 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateMeasure (-305)
/* simple XML schema type 'eml20:HeatFlowRateMeasure': */
class SOAP_CMAC eml20__HeatFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:HeatFlowRateUom'
        eml20__HeatFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__HeatFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml20__HeatFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__HeatFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml20__HeatFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__HeatFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml20__HeatFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__HeatFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml20__HeatFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:744 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeMeasure (-306)
/* simple XML schema type 'eml20:MassPerTimeMeasure': */
class SOAP_CMAC eml20__MassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerTimeUom'
        eml20__MassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:746 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassMeasure (-307)
/* simple XML schema type 'eml20:VolumePerMassMeasure': */
class SOAP_CMAC eml20__VolumePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerMassUom'
        eml20__VolumePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:748 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeMeasure (-308)
/* simple XML schema type 'eml20:MolarVolumeMeasure': */
class SOAP_CMAC eml20__MolarVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MolarVolumeUom'
        eml20__MolarVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MolarVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__MolarVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MolarVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MolarVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MolarVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__MolarVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MolarVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__MolarVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:750 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceMeasure (-309)
/* simple XML schema type 'eml20:ElectricConductanceMeasure': */
class SOAP_CMAC eml20__ElectricConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricConductanceUom'
        eml20__ElectricConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricConductanceMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:752 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureMeasure (-310)
/* simple XML schema type 'eml20:ReciprocalPressureMeasure': */
class SOAP_CMAC eml20__ReciprocalPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalPressureUom'
        eml20__ReciprocalPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalPressureMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalPressureMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalPressureMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:754 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceMeasure (-311)
/* simple XML schema type 'eml20:AreaPerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml20__AreaPerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AreaPerAmountOfSubstanceUom'
        eml20__AreaPerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AreaPerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml20__AreaPerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AreaPerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AreaPerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AreaPerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__AreaPerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AreaPerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__AreaPerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:756 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthMeasure (-312)
/* simple XML schema type 'eml20:LengthMeasure': */
class SOAP_CMAC eml20__LengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:758 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeMeasure (-313)
/* simple XML schema type 'eml20:MassPerVolumeMeasure': */
class SOAP_CMAC eml20__MassPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerVolumeUom'
        eml20__MassPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:760 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthMeasure (-314)
/* simple XML schema type 'eml20:TemperatureIntervalPerLengthMeasure': */
class SOAP_CMAC eml20__TemperatureIntervalPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TemperatureIntervalPerLengthUom'
        eml20__TemperatureIntervalPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TemperatureIntervalPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__TemperatureIntervalPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TemperatureIntervalPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TemperatureIntervalPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TemperatureIntervalPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__TemperatureIntervalPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TemperatureIntervalPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__TemperatureIntervalPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:762 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaMeasure (-315)
/* simple XML schema type 'eml20:AmountOfSubstancePerAreaMeasure': */
class SOAP_CMAC eml20__AmountOfSubstancePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AmountOfSubstancePerAreaUom'
        eml20__AmountOfSubstancePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AmountOfSubstancePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__AmountOfSubstancePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AmountOfSubstancePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AmountOfSubstancePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AmountOfSubstancePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__AmountOfSubstancePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AmountOfSubstancePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__AmountOfSubstancePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:764 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceMeasure (-316)
/* simple XML schema type 'eml20:AmountOfSubstanceMeasure': */
class SOAP_CMAC eml20__AmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AmountOfSubstanceUom'
        eml20__AmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml20__AmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__AmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__AmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:766 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthMeasure (-317)
/* simple XML schema type 'eml20:TimePerLengthMeasure': */
class SOAP_CMAC eml20__TimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TimePerLengthUom'
        eml20__TimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__TimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__TimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__TimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:768 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeMeasure (-318)
/* simple XML schema type 'eml20:ReciprocalMassTimeMeasure': */
class SOAP_CMAC eml20__ReciprocalMassTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalMassTimeUom'
        eml20__ReciprocalMassTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalMassTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalMassTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalMassTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalMassTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalMassTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalMassTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalMassTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalMassTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:770 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeMeasure (-319)
/* simple XML schema type 'eml20:ReciprocalVolumeMeasure': */
class SOAP_CMAC eml20__ReciprocalVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalVolumeUom'
        eml20__ReciprocalVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:772 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceMeasure (-320)
/* simple XML schema type 'eml20:ForcePerForceMeasure': */
class SOAP_CMAC eml20__ForcePerForceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ForcePerForceUom'
        eml20__ForcePerForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ForcePerForceMeasure, default initialized and not managed by a soap context
        virtual eml20__ForcePerForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ForcePerForceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ForcePerForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ForcePerForceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ForcePerForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ForcePerForceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ForcePerForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:774 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionMeasure (-321)
/* simple XML schema type 'eml20:LinearThermalExpansionMeasure': */
class SOAP_CMAC eml20__LinearThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LinearThermalExpansionUom'
        eml20__LinearThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LinearThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml20__LinearThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LinearThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LinearThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LinearThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml20__LinearThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LinearThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml20__LinearThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:776 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthMeasure (-322)
/* simple XML schema type 'eml20:EnergyPerLengthMeasure': */
class SOAP_CMAC eml20__EnergyPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyPerLengthUom'
        eml20__EnergyPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:778 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeMeasure (-323)
/* simple XML schema type 'eml20:TemperatureIntervalPerTimeMeasure': */
class SOAP_CMAC eml20__TemperatureIntervalPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TemperatureIntervalPerTimeUom'
        eml20__TemperatureIntervalPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TemperatureIntervalPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__TemperatureIntervalPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TemperatureIntervalPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TemperatureIntervalPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TemperatureIntervalPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__TemperatureIntervalPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TemperatureIntervalPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__TemperatureIntervalPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:780 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceMeasure (-324)
/* simple XML schema type 'eml20:ThermalConductanceMeasure': */
class SOAP_CMAC eml20__ThermalConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ThermalConductanceUom'
        eml20__ThermalConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ThermalConductanceMeasure, default initialized and not managed by a soap context
        virtual eml20__ThermalConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ThermalConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ThermalConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ThermalConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ThermalConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ThermalConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ThermalConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:782 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleMeasure (-325)
/* simple XML schema type 'eml20:SolidAngleMeasure': */
class SOAP_CMAC eml20__SolidAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:SolidAngleUom'
        eml20__SolidAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__SolidAngleMeasure, default initialized and not managed by a soap context
        virtual eml20__SolidAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__SolidAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml20__SolidAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__SolidAngleMeasure() { }
        /// Friend allocator used by soap_new_eml20__SolidAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__SolidAngleMeasure * SOAP_FMAC2 soap_instantiate_eml20__SolidAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:784 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureMeasure (-326)
/* simple XML schema type 'eml20:EnergyLengthPerTimeAreaTemperatureMeasure': */
class SOAP_CMAC eml20__EnergyLengthPerTimeAreaTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyLengthPerTimeAreaTemperatureUom'
        eml20__EnergyLengthPerTimeAreaTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyLengthPerTimeAreaTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyLengthPerTimeAreaTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyLengthPerTimeAreaTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyLengthPerTimeAreaTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyLengthPerTimeAreaTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyLengthPerTimeAreaTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:786 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerMeasure (-327)
/* simple XML schema type 'eml20:PowerMeasure': */
class SOAP_CMAC eml20__PowerMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PowerUom'
        eml20__PowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PowerMeasure, default initialized and not managed by a soap context
        virtual eml20__PowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PowerMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PowerMeasure() { }
        /// Friend allocator used by soap_new_eml20__PowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PowerMeasure * SOAP_FMAC2 soap_instantiate_eml20__PowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:788 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationMeasure (-328)
/* simple XML schema type 'eml20:VolumePerRotationMeasure': */
class SOAP_CMAC eml20__VolumePerRotationMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerRotationUom'
        eml20__VolumePerRotationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerRotationMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerRotationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerRotationMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerRotationMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerRotationMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerRotationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerRotationMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerRotationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:790 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaMeasure (-329)
/* simple XML schema type 'eml20:ElectricChargePerAreaMeasure': */
class SOAP_CMAC eml20__ElectricChargePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricChargePerAreaUom'
        eml20__ElectricChargePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricChargePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricChargePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricChargePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricChargePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricChargePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricChargePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricChargePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricChargePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:792 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureMeasure (-330)
/* simple XML schema type 'eml20:LightExposureMeasure': */
class SOAP_CMAC eml20__LightExposureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LightExposureUom'
        eml20__LightExposureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LightExposureMeasure, default initialized and not managed by a soap context
        virtual eml20__LightExposureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LightExposureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LightExposureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LightExposureMeasure() { }
        /// Friend allocator used by soap_new_eml20__LightExposureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LightExposureMeasure * SOAP_FMAC2 soap_instantiate_eml20__LightExposureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:794 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentMeasure (-331)
/* simple XML schema type 'eml20:ElectricCurrentMeasure': */
class SOAP_CMAC eml20__ElectricCurrentMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricCurrentUom'
        eml20__ElectricCurrentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricCurrentMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricCurrentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricCurrentMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricCurrentMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricCurrentMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricCurrentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricCurrentMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricCurrentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:796 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxMeasure (-332)
/* simple XML schema type 'eml20:LuminousFluxMeasure': */
class SOAP_CMAC eml20__LuminousFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LuminousFluxUom'
        eml20__LuminousFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LuminousFluxMeasure, default initialized and not managed by a soap context
        virtual eml20__LuminousFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LuminousFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LuminousFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LuminousFluxMeasure() { }
        /// Friend allocator used by soap_new_eml20__LuminousFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LuminousFluxMeasure * SOAP_FMAC2 soap_instantiate_eml20__LuminousFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:798 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityMeasure (-333)
/* simple XML schema type 'eml20:HeatCapacityMeasure': */
class SOAP_CMAC eml20__HeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:HeatCapacityUom'
        eml20__HeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__HeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml20__HeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__HeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__HeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__HeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml20__HeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__HeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml20__HeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:800 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthMeasure (-334)
/* simple XML schema type 'eml20:ElectricResistancePerLengthMeasure': */
class SOAP_CMAC eml20__ElectricResistancePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricResistancePerLengthUom'
        eml20__ElectricResistancePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricResistancePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricResistancePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricResistancePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricResistancePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricResistancePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricResistancePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricResistancePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricResistancePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:802 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseMeasure (-335)
/* simple XML schema type 'eml20:AbsorbedDoseMeasure': */
class SOAP_CMAC eml20__AbsorbedDoseMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AbsorbedDoseUom'
        eml20__AbsorbedDoseUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AbsorbedDoseMeasure, default initialized and not managed by a soap context
        virtual eml20__AbsorbedDoseMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AbsorbedDoseMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AbsorbedDoseMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AbsorbedDoseMeasure() { }
        /// Friend allocator used by soap_new_eml20__AbsorbedDoseMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AbsorbedDoseMeasure * SOAP_FMAC2 soap_instantiate_eml20__AbsorbedDoseMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:804 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureMeasure (-336)
/* simple XML schema type 'eml20:TemperatureIntervalPerPressureMeasure': */
class SOAP_CMAC eml20__TemperatureIntervalPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TemperatureIntervalPerPressureUom'
        eml20__TemperatureIntervalPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TemperatureIntervalPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml20__TemperatureIntervalPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TemperatureIntervalPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TemperatureIntervalPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TemperatureIntervalPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml20__TemperatureIntervalPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TemperatureIntervalPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml20__TemperatureIntervalPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:806 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalMeasure (-337)
/* simple XML schema type 'eml20:AttenuationPerFrequencyIntervalMeasure': */
class SOAP_CMAC eml20__AttenuationPerFrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AttenuationPerFrequencyIntervalUom'
        eml20__AttenuationPerFrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AttenuationPerFrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml20__AttenuationPerFrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AttenuationPerFrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AttenuationPerFrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AttenuationPerFrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml20__AttenuationPerFrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AttenuationPerFrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml20__AttenuationPerFrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:808 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceMeasure (-338)
/* simple XML schema type 'eml20:ThermalResistanceMeasure': */
class SOAP_CMAC eml20__ThermalResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ThermalResistanceUom'
        eml20__ThermalResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ThermalResistanceMeasure, default initialized and not managed by a soap context
        virtual eml20__ThermalResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ThermalResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ThermalResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ThermalResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ThermalResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ThermalResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ThermalResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:810 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthMeasure (-339)
/* simple XML schema type 'eml20:AnglePerLengthMeasure': */
class SOAP_CMAC eml20__AnglePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AnglePerLengthUom'
        eml20__AnglePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AnglePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__AnglePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AnglePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AnglePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AnglePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__AnglePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AnglePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__AnglePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:812 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeMeasure (-340)
/* simple XML schema type 'eml20:LengthPerTimeMeasure': */
class SOAP_CMAC eml20__LengthPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthPerTimeUom'
        eml20__LengthPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:814 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthMeasure (-341)
/* simple XML schema type 'eml20:MassPerLengthMeasure': */
class SOAP_CMAC eml20__MassPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerLengthUom'
        eml20__MassPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:816 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaMeasure (-342)
/* simple XML schema type 'eml20:EnergyPerAreaMeasure': */
class SOAP_CMAC eml20__EnergyPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyPerAreaUom'
        eml20__EnergyPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:818 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaMeasure (-343)
/* simple XML schema type 'eml20:AreaPerAreaMeasure': */
class SOAP_CMAC eml20__AreaPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AreaPerAreaUom'
        eml20__AreaPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AreaPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__AreaPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AreaPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AreaPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AreaPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__AreaPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AreaPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__AreaPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:820 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceMeasure (-344)
/* simple XML schema type 'eml20:ReluctanceMeasure': */
class SOAP_CMAC eml20__ReluctanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReluctanceUom'
        eml20__ReluctanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReluctanceMeasure, default initialized and not managed by a soap context
        virtual eml20__ReluctanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReluctanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReluctanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReluctanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReluctanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReluctanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReluctanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:822 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureMeasure (-345)
/* simple XML schema type 'eml20:ThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml20__ThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ThermodynamicTemperatureUom'
        eml20__ThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml20__ThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml20__ThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml20__ThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:824 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityMeasure (-346)
/* simple XML schema type 'eml20:PermittivityMeasure': */
class SOAP_CMAC eml20__PermittivityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PermittivityUom'
        eml20__PermittivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PermittivityMeasure, default initialized and not managed by a soap context
        virtual eml20__PermittivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PermittivityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PermittivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PermittivityMeasure() { }
        /// Friend allocator used by soap_new_eml20__PermittivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PermittivityMeasure * SOAP_FMAC2 soap_instantiate_eml20__PermittivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:826 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeMeasure (-347)
/* simple XML schema type 'eml20:PressureTimePerVolumeMeasure': */
class SOAP_CMAC eml20__PressureTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PressureTimePerVolumeUom'
        eml20__PressureTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PressureTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__PressureTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PressureTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PressureTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PressureTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__PressureTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PressureTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__PressureTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:828 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentMeasure (-348)
/* simple XML schema type 'eml20:DipoleMomentMeasure': */
class SOAP_CMAC eml20__DipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DipoleMomentUom'
        eml20__DipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml20__DipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml20__DipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml20__DipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:830 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceMeasure (-349)
/* simple XML schema type 'eml20:RadianceMeasure': */
class SOAP_CMAC eml20__RadianceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:RadianceUom'
        eml20__RadianceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__RadianceMeasure, default initialized and not managed by a soap context
        virtual eml20__RadianceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__RadianceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__RadianceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__RadianceMeasure() { }
        /// Friend allocator used by soap_new_eml20__RadianceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__RadianceMeasure * SOAP_FMAC2 soap_instantiate_eml20__RadianceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:832 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassMeasure (-350)
/* simple XML schema type 'eml20:AreaPerMassMeasure': */
class SOAP_CMAC eml20__AreaPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AreaPerMassUom'
        eml20__AreaPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AreaPerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__AreaPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AreaPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AreaPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AreaPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__AreaPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AreaPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__AreaPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:834 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeMeasure (-351)
/* simple XML schema type 'eml20:EnergyPerMassPerTimeMeasure': */
class SOAP_CMAC eml20__EnergyPerMassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyPerMassPerTimeUom'
        eml20__EnergyPerMassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyPerMassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyPerMassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyPerMassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyPerMassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyPerMassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyPerMassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyPerMassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyPerMassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:836 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityMeasure (-352)
/* simple XML schema type 'eml20:ElectricCurrentDensityMeasure': */
class SOAP_CMAC eml20__ElectricCurrentDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricCurrentDensityUom'
        eml20__ElectricCurrentDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricCurrentDensityMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricCurrentDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricCurrentDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricCurrentDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricCurrentDensityMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricCurrentDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricCurrentDensityMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricCurrentDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:838 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassMeasure (-353)
/* simple XML schema type 'eml20:MassPerMassMeasure': */
class SOAP_CMAC eml20__MassPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerMassUom'
        eml20__MassPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:840 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedMeasure (-354)
/* simple XML schema type 'eml20:DataTransferSpeedMeasure': */
class SOAP_CMAC eml20__DataTransferSpeedMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DataTransferSpeedUom'
        eml20__DataTransferSpeedUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DataTransferSpeedMeasure, default initialized and not managed by a soap context
        virtual eml20__DataTransferSpeedMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DataTransferSpeedMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DataTransferSpeedMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DataTransferSpeedMeasure() { }
        /// Friend allocator used by soap_new_eml20__DataTransferSpeedMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DataTransferSpeedMeasure * SOAP_FMAC2 soap_instantiate_eml20__DataTransferSpeedMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:842 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentMeasure (-355)
/* simple XML schema type 'eml20:MagneticDipoleMomentMeasure': */
class SOAP_CMAC eml20__MagneticDipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticDipoleMomentUom'
        eml20__MagneticDipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticDipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticDipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticDipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticDipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticDipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticDipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticDipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticDipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:844 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyMeasure (-356)
/* simple XML schema type 'eml20:MassPerEnergyMeasure': */
class SOAP_CMAC eml20__MassPerEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerEnergyUom'
        eml20__MassPerEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerEnergyMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:846 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityMeasure (-357)
/* simple XML schema type 'eml20:MagneticPermeabilityMeasure': */
class SOAP_CMAC eml20__MagneticPermeabilityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticPermeabilityUom'
        eml20__MagneticPermeabilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticPermeabilityMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticPermeabilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticPermeabilityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticPermeabilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticPermeabilityMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticPermeabilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticPermeabilityMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticPermeabilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:848 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityMeasure (-358)
/* simple XML schema type 'eml20:APIGravityMeasure': */
class SOAP_CMAC eml20__APIGravityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:APIGravityUom'
        eml20__APIGravityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__APIGravityMeasure, default initialized and not managed by a soap context
        virtual eml20__APIGravityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__APIGravityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__APIGravityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__APIGravityMeasure() { }
        /// Friend allocator used by soap_new_eml20__APIGravityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__APIGravityMeasure * SOAP_FMAC2 soap_instantiate_eml20__APIGravityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:850 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthMeasure (-359)
/* simple XML schema type 'eml20:VolumePerLengthMeasure': */
class SOAP_CMAC eml20__VolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerLengthUom'
        eml20__VolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:852 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeMeasure (-360)
/* simple XML schema type 'eml20:VolumeMeasure': */
class SOAP_CMAC eml20__VolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumeUom'
        eml20__VolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:854 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeMeasure (-361)
/* simple XML schema type 'eml20:VolumePerTimePerVolumeMeasure': */
class SOAP_CMAC eml20__VolumePerTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimePerVolumeUom'
        eml20__VolumePerTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:856 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureMeasure (-362)
/* simple XML schema type 'eml20:VolumePerTimePerPressureMeasure': */
class SOAP_CMAC eml20__VolumePerTimePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimePerPressureUom'
        eml20__VolumePerTimePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:858 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeMeasure (-363)
/* simple XML schema type 'eml20:TimeMeasure': */
class SOAP_CMAC eml20__TimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TimeUom'
        eml20__TimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TimeMeasure, default initialized and not managed by a soap context
        virtual eml20__TimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__TimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__TimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:860 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceMeasure (-364)
/* simple XML schema type 'eml20:MomentOfForceMeasure': */
class SOAP_CMAC eml20__MomentOfForceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MomentOfForceUom'
        eml20__MomentOfForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MomentOfForceMeasure, default initialized and not managed by a soap context
        virtual eml20__MomentOfForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MomentOfForceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MomentOfForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MomentOfForceMeasure() { }
        /// Friend allocator used by soap_new_eml20__MomentOfForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MomentOfForceMeasure * SOAP_FMAC2 soap_instantiate_eml20__MomentOfForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:862 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceMeasure (-365)
/* simple XML schema type 'eml20:LuminanceMeasure': */
class SOAP_CMAC eml20__LuminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LuminanceUom'
        eml20__LuminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LuminanceMeasure, default initialized and not managed by a soap context
        virtual eml20__LuminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LuminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LuminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LuminanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__LuminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LuminanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__LuminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:864 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeMeasure (-366)
/* simple XML schema type 'eml20:ForcePerVolumeMeasure': */
class SOAP_CMAC eml20__ForcePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ForcePerVolumeUom'
        eml20__ForcePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ForcePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__ForcePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ForcePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ForcePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ForcePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__ForcePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ForcePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__ForcePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:866 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityMeasure (-367)
/* simple XML schema type 'eml20:MolarHeatCapacityMeasure': */
class SOAP_CMAC eml20__MolarHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MolarHeatCapacityUom'
        eml20__MolarHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MolarHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml20__MolarHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MolarHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MolarHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MolarHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml20__MolarHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MolarHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml20__MolarHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:868 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageMeasure (-368)
/* simple XML schema type 'eml20:DigitalStorageMeasure': */
class SOAP_CMAC eml20__DigitalStorageMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DigitalStorageUom'
        eml20__DigitalStorageUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DigitalStorageMeasure, default initialized and not managed by a soap context
        virtual eml20__DigitalStorageMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DigitalStorageMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DigitalStorageMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DigitalStorageMeasure() { }
        /// Friend allocator used by soap_new_eml20__DigitalStorageMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DigitalStorageMeasure * SOAP_FMAC2 soap_instantiate_eml20__DigitalStorageMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:870 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeMeasure (-369)
/* simple XML schema type 'eml20:ElectricChargeMeasure': */
class SOAP_CMAC eml20__ElectricChargeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricChargeUom'
        eml20__ElectricChargeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricChargeMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricChargeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricChargeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricChargeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricChargeMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricChargeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricChargeMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricChargeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:872 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityMeasure (-370)
/* simple XML schema type 'eml20:LuminousIntensityMeasure': */
class SOAP_CMAC eml20__LuminousIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LuminousIntensityUom'
        eml20__LuminousIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LuminousIntensityMeasure, default initialized and not managed by a soap context
        virtual eml20__LuminousIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LuminousIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LuminousIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LuminousIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml20__LuminousIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LuminousIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml20__LuminousIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:874 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyMeasure (-371)
/* simple XML schema type 'eml20:MolarEnergyMeasure': */
class SOAP_CMAC eml20__MolarEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MolarEnergyUom'
        eml20__MolarEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MolarEnergyMeasure, default initialized and not managed by a soap context
        virtual eml20__MolarEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MolarEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MolarEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MolarEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml20__MolarEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MolarEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml20__MolarEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:876 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeMeasure (-372)
/* simple XML schema type 'eml20:LengthPerVolumeMeasure': */
class SOAP_CMAC eml20__LengthPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthPerVolumeUom'
        eml20__LengthPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:878 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaMeasure (-373)
/* simple XML schema type 'eml20:SecondMomentOfAreaMeasure': */
class SOAP_CMAC eml20__SecondMomentOfAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:SecondMomentOfAreaUom'
        eml20__SecondMomentOfAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__SecondMomentOfAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__SecondMomentOfAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__SecondMomentOfAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__SecondMomentOfAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__SecondMomentOfAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__SecondMomentOfAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__SecondMomentOfAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__SecondMomentOfAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:880 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityMeasure (-374)
/* simple XML schema type 'eml20:MagneticFluxDensityMeasure': */
class SOAP_CMAC eml20__MagneticFluxDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticFluxDensityUom'
        eml20__MagneticFluxDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticFluxDensityMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticFluxDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticFluxDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticFluxDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticFluxDensityMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticFluxDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticFluxDensityMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticFluxDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:882 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaMeasure (-375)
/* simple XML schema type 'eml20:VolumePerAreaMeasure': */
class SOAP_CMAC eml20__VolumePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerAreaUom'
        eml20__VolumePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:884 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightMeasure (-376)
/* simple XML schema type 'eml20:QuantityOfLightMeasure': */
class SOAP_CMAC eml20__QuantityOfLightMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:QuantityOfLightUom'
        eml20__QuantityOfLightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__QuantityOfLightMeasure, default initialized and not managed by a soap context
        virtual eml20__QuantityOfLightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__QuantityOfLightMeasure); }
      public:
        /// Constructor with default initializations
        eml20__QuantityOfLightMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__QuantityOfLightMeasure() { }
        /// Friend allocator used by soap_new_eml20__QuantityOfLightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__QuantityOfLightMeasure * SOAP_FMAC2 soap_instantiate_eml20__QuantityOfLightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:886 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyMeasure (-377)
/* simple XML schema type 'eml20:LuminousEfficacyMeasure': */
class SOAP_CMAC eml20__LuminousEfficacyMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LuminousEfficacyUom'
        eml20__LuminousEfficacyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LuminousEfficacyMeasure, default initialized and not managed by a soap context
        virtual eml20__LuminousEfficacyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LuminousEfficacyMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LuminousEfficacyMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LuminousEfficacyMeasure() { }
        /// Friend allocator used by soap_new_eml20__LuminousEfficacyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LuminousEfficacyMeasure * SOAP_FMAC2 soap_instantiate_eml20__LuminousEfficacyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:888 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeMeasure (-378)
/* simple XML schema type 'eml20:AreaPerTimeMeasure': */
class SOAP_CMAC eml20__AreaPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AreaPerTimeUom'
        eml20__AreaPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AreaPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__AreaPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AreaPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AreaPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AreaPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__AreaPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AreaPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__AreaPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:890 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateMeasure (-379)
/* simple XML schema type 'eml20:VolumeFlowRatePerVolumeFlowRateMeasure': */
class SOAP_CMAC eml20__VolumeFlowRatePerVolumeFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumeFlowRatePerVolumeFlowRateUom'
        eml20__VolumeFlowRatePerVolumeFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumeFlowRatePerVolumeFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumeFlowRatePerVolumeFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumeFlowRatePerVolumeFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumeFlowRatePerVolumeFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumeFlowRatePerVolumeFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumeFlowRatePerVolumeFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:892 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumMeasure (-380)
/* simple XML schema type 'eml20:MomentumMeasure': */
class SOAP_CMAC eml20__MomentumMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MomentumUom'
        eml20__MomentumUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MomentumMeasure, default initialized and not managed by a soap context
        virtual eml20__MomentumMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MomentumMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MomentumMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MomentumMeasure() { }
        /// Friend allocator used by soap_new_eml20__MomentumMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MomentumMeasure * SOAP_FMAC2 soap_instantiate_eml20__MomentumMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:894 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeMeasure (-381)
/* simple XML schema type 'eml20:PowerPerVolumeMeasure': */
class SOAP_CMAC eml20__PowerPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PowerPerVolumeUom'
        eml20__PowerPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PowerPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__PowerPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PowerPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PowerPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PowerPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__PowerPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PowerPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__PowerPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:896 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityMeasure (-382)
/* simple XML schema type 'eml20:ThermalDiffusivityMeasure': */
class SOAP_CMAC eml20__ThermalDiffusivityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ThermalDiffusivityUom'
        eml20__ThermalDiffusivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ThermalDiffusivityMeasure, default initialized and not managed by a soap context
        virtual eml20__ThermalDiffusivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ThermalDiffusivityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ThermalDiffusivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ThermalDiffusivityMeasure() { }
        /// Friend allocator used by soap_new_eml20__ThermalDiffusivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ThermalDiffusivityMeasure * SOAP_FMAC2 soap_instantiate_eml20__ThermalDiffusivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:898 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthMeasure (-383)
/* simple XML schema type 'eml20:LogarithmicPowerRatioPerLengthMeasure': */
class SOAP_CMAC eml20__LogarithmicPowerRatioPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LogarithmicPowerRatioPerLengthUom'
        eml20__LogarithmicPowerRatioPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LogarithmicPowerRatioPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__LogarithmicPowerRatioPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LogarithmicPowerRatioPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LogarithmicPowerRatioPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LogarithmicPowerRatioPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LogarithmicPowerRatioPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:900 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeMeasure (-384)
/* simple XML schema type 'eml20:ReciprocalTimeMeasure': */
class SOAP_CMAC eml20__ReciprocalTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalTimeUom'
        eml20__ReciprocalTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:902 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityMeasure (-385)
/* simple XML schema type 'eml20:SpecificHeatCapacityMeasure': */
class SOAP_CMAC eml20__SpecificHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:SpecificHeatCapacityUom'
        eml20__SpecificHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__SpecificHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml20__SpecificHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__SpecificHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__SpecificHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__SpecificHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml20__SpecificHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__SpecificHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml20__SpecificHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:904 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropMeasure (-386)
/* simple XML schema type 'eml20:PotentialDifferencePerPowerDropMeasure': */
class SOAP_CMAC eml20__PotentialDifferencePerPowerDropMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PotentialDifferencePerPowerDropUom'
        eml20__PotentialDifferencePerPowerDropUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PotentialDifferencePerPowerDropMeasure, default initialized and not managed by a soap context
        virtual eml20__PotentialDifferencePerPowerDropMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PotentialDifferencePerPowerDropMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PotentialDifferencePerPowerDropMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PotentialDifferencePerPowerDropMeasure() { }
        /// Friend allocator used by soap_new_eml20__PotentialDifferencePerPowerDropMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PotentialDifferencePerPowerDropMeasure * SOAP_FMAC2 soap_instantiate_eml20__PotentialDifferencePerPowerDropMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:906 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaMeasure (-387)
/* simple XML schema type 'eml20:MomentOfInertiaMeasure': */
class SOAP_CMAC eml20__MomentOfInertiaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MomentOfInertiaUom'
        eml20__MomentOfInertiaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MomentOfInertiaMeasure, default initialized and not managed by a soap context
        virtual eml20__MomentOfInertiaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MomentOfInertiaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MomentOfInertiaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MomentOfInertiaMeasure() { }
        /// Friend allocator used by soap_new_eml20__MomentOfInertiaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MomentOfInertiaMeasure * SOAP_FMAC2 soap_instantiate_eml20__MomentOfInertiaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:908 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthMeasure (-388)
/* simple XML schema type 'eml20:MassPerTimePerLengthMeasure': */
class SOAP_CMAC eml20__MassPerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerTimePerLengthUom'
        eml20__MassPerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:910 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightMeasure (-389)
/* simple XML schema type 'eml20:MolecularWeightMeasure': */
class SOAP_CMAC eml20__MolecularWeightMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MolecularWeightUom'
        eml20__MolecularWeightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MolecularWeightMeasure, default initialized and not managed by a soap context
        virtual eml20__MolecularWeightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MolecularWeightMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MolecularWeightMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MolecularWeightMeasure() { }
        /// Friend allocator used by soap_new_eml20__MolecularWeightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MolecularWeightMeasure * SOAP_FMAC2 soap_instantiate_eml20__MolecularWeightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:912 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityMeasure (-390)
/* simple XML schema type 'eml20:ActivityOfRadioactivityMeasure': */
class SOAP_CMAC eml20__ActivityOfRadioactivityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ActivityOfRadioactivityUom'
        eml20__ActivityOfRadioactivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ActivityOfRadioactivityMeasure, default initialized and not managed by a soap context
        virtual eml20__ActivityOfRadioactivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ActivityOfRadioactivityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ActivityOfRadioactivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ActivityOfRadioactivityMeasure() { }
        /// Friend allocator used by soap_new_eml20__ActivityOfRadioactivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ActivityOfRadioactivityMeasure * SOAP_FMAC2 soap_instantiate_eml20__ActivityOfRadioactivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:914 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeMeasure (-391)
/* simple XML schema type 'eml20:SignalingEventPerTimeMeasure': */
class SOAP_CMAC eml20__SignalingEventPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:SignalingEventPerTimeUom'
        eml20__SignalingEventPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__SignalingEventPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__SignalingEventPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__SignalingEventPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__SignalingEventPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__SignalingEventPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__SignalingEventPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__SignalingEventPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__SignalingEventPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:916 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyMeasure (-392)
/* simple XML schema type 'eml20:FrequencyMeasure': */
class SOAP_CMAC eml20__FrequencyMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:FrequencyUom'
        eml20__FrequencyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__FrequencyMeasure, default initialized and not managed by a soap context
        virtual eml20__FrequencyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__FrequencyMeasure); }
      public:
        /// Constructor with default initializations
        eml20__FrequencyMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__FrequencyMeasure() { }
        /// Friend allocator used by soap_new_eml20__FrequencyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__FrequencyMeasure * SOAP_FMAC2 soap_instantiate_eml20__FrequencyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:918 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalMeasure (-393)
/* simple XML schema type 'eml20:FrequencyIntervalMeasure': */
class SOAP_CMAC eml20__FrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:FrequencyIntervalUom'
        eml20__FrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__FrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml20__FrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__FrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml20__FrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__FrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml20__FrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__FrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml20__FrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:920 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceMeasure (-394)
/* simple XML schema type 'eml20:CapacitanceMeasure': */
class SOAP_CMAC eml20__CapacitanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:CapacitanceUom'
        eml20__CapacitanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__CapacitanceMeasure, default initialized and not managed by a soap context
        virtual eml20__CapacitanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__CapacitanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__CapacitanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__CapacitanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__CapacitanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__CapacitanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__CapacitanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:922 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityMeasure (-395)
/* simple XML schema type 'eml20:ElectricalResistivityMeasure': */
class SOAP_CMAC eml20__ElectricalResistivityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricalResistivityUom'
        eml20__ElectricalResistivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricalResistivityMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricalResistivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricalResistivityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricalResistivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricalResistivityMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricalResistivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricalResistivityMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricalResistivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:924 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthMeasure (-396)
/* simple XML schema type 'eml20:MassLengthMeasure': */
class SOAP_CMAC eml20__MassLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassLengthUom'
        eml20__MassLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__MassLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:926 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaMeasure (-397)
/* simple XML schema type 'eml20:ReciprocalAreaMeasure': */
class SOAP_CMAC eml20__ReciprocalAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalAreaUom'
        eml20__ReciprocalAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:928 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityMeasure (-398)
/* simple XML schema type 'eml20:KinematicViscosityMeasure': */
class SOAP_CMAC eml20__KinematicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:KinematicViscosityUom'
        eml20__KinematicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__KinematicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml20__KinematicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__KinematicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__KinematicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__KinematicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml20__KinematicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__KinematicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml20__KinematicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:930 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceMeasure (-399)
/* simple XML schema type 'eml20:InductanceMeasure': */
class SOAP_CMAC eml20__InductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:InductanceUom'
        eml20__InductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__InductanceMeasure, default initialized and not managed by a soap context
        virtual eml20__InductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__InductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__InductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__InductanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__InductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__InductanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__InductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:932 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeMeasure (-400)
/* simple XML schema type 'eml20:TimePerVolumeMeasure': */
class SOAP_CMAC eml20__TimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TimePerVolumeUom'
        eml20__TimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__TimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__TimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__TimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:934 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentMeasure (-401)
/* simple XML schema type 'eml20:ElectromagneticMomentMeasure': */
class SOAP_CMAC eml20__ElectromagneticMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectromagneticMomentUom'
        eml20__ElectromagneticMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectromagneticMomentMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectromagneticMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectromagneticMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectromagneticMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectromagneticMomentMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectromagneticMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectromagneticMomentMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectromagneticMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:936 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeMeasure (-402)
/* simple XML schema type 'eml20:EnergyPerVolumeMeasure': */
class SOAP_CMAC eml20__EnergyPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyPerVolumeUom'
        eml20__EnergyPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:938 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeMeasure (-403)
/* simple XML schema type 'eml20:ElectricChargePerVolumeMeasure': */
class SOAP_CMAC eml20__ElectricChargePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricChargePerVolumeUom'
        eml20__ElectricChargePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricChargePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricChargePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricChargePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricChargePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricChargePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricChargePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricChargePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricChargePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:940 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientMeasure (-404)
/* simple XML schema type 'eml20:VolumetricHeatTransferCoefficientMeasure': */
class SOAP_CMAC eml20__VolumetricHeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumetricHeatTransferCoefficientUom'
        eml20__VolumetricHeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumetricHeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumetricHeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumetricHeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumetricHeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumetricHeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumetricHeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumetricHeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumetricHeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:942 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeMeasure (-405)
/* simple XML schema type 'eml20:PressurePerVolumeMeasure': */
class SOAP_CMAC eml20__PressurePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PressurePerVolumeUom'
        eml20__PressurePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PressurePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__PressurePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PressurePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PressurePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PressurePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__PressurePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PressurePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__PressurePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:944 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassMeasure (-406)
/* simple XML schema type 'eml20:TimePerMassMeasure': */
class SOAP_CMAC eml20__TimePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TimePerMassUom'
        eml20__TimePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TimePerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__TimePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TimePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TimePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TimePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__TimePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TimePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__TimePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:946 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthMeasure (-407)
/* simple XML schema type 'eml20:ReciprocalLengthMeasure': */
class SOAP_CMAC eml20__ReciprocalLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalLengthUom'
        eml20__ReciprocalLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:948 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityMeasure (-408)
/* simple XML schema type 'eml20:DynamicViscosityMeasure': */
class SOAP_CMAC eml20__DynamicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DynamicViscosityUom'
        eml20__DynamicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DynamicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml20__DynamicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DynamicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DynamicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DynamicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml20__DynamicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DynamicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml20__DynamicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:950 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceMeasure (-409)
/* simple XML schema type 'eml20:ReciprocalElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml20__ReciprocalElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalElectricPotentialDifferenceUom'
        eml20__ReciprocalElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:952 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassMeasure (-410)
/* simple XML schema type 'eml20:ElectricChargePerMassMeasure': */
class SOAP_CMAC eml20__ElectricChargePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricChargePerMassUom'
        eml20__ElectricChargePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricChargePerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricChargePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricChargePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricChargePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricChargePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricChargePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricChargePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricChargePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:954 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayMeasure (-411)
/* simple XML schema type 'eml20:APIGammaRayMeasure': */
class SOAP_CMAC eml20__APIGammaRayMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:APIGammaRayUom'
        eml20__APIGammaRayUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__APIGammaRayMeasure, default initialized and not managed by a soap context
        virtual eml20__APIGammaRayMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__APIGammaRayMeasure); }
      public:
        /// Constructor with default initializations
        eml20__APIGammaRayMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__APIGammaRayMeasure() { }
        /// Friend allocator used by soap_new_eml20__APIGammaRayMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__APIGammaRayMeasure * SOAP_FMAC2 soap_instantiate_eml20__APIGammaRayMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:956 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientMeasure (-412)
/* simple XML schema type 'eml20:DiffusionCoefficientMeasure': */
class SOAP_CMAC eml20__DiffusionCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DiffusionCoefficientUom'
        eml20__DiffusionCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DiffusionCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml20__DiffusionCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DiffusionCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DiffusionCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DiffusionCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml20__DiffusionCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DiffusionCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml20__DiffusionCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:958 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceMeasure (-413)
/* simple XML schema type 'eml20:ElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml20__ElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricPotentialDifferenceUom'
        eml20__ElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:960 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityMeasure (-414)
/* simple XML schema type 'eml20:IsothermalCompressibilityMeasure': */
class SOAP_CMAC eml20__IsothermalCompressibilityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:IsothermalCompressibilityUom'
        eml20__IsothermalCompressibilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__IsothermalCompressibilityMeasure, default initialized and not managed by a soap context
        virtual eml20__IsothermalCompressibilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__IsothermalCompressibilityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__IsothermalCompressibilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__IsothermalCompressibilityMeasure() { }
        /// Friend allocator used by soap_new_eml20__IsothermalCompressibilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__IsothermalCompressibilityMeasure * SOAP_FMAC2 soap_instantiate_eml20__IsothermalCompressibilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:962 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthMeasure (-415)
/* simple XML schema type 'eml20:MassPerVolumePerLengthMeasure': */
class SOAP_CMAC eml20__MassPerVolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerVolumePerLengthUom'
        eml20__MassPerVolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerVolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerVolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerVolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerVolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerVolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerVolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerVolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerVolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:964 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeMeasure (-416)
/* simple XML schema type 'eml20:PressurePerTimeMeasure': */
class SOAP_CMAC eml20__PressurePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PressurePerTimeUom'
        eml20__PressurePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PressurePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__PressurePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PressurePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PressurePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PressurePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__PressurePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PressurePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__PressurePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:966 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthMeasure (-417)
/* simple XML schema type 'eml20:ForcePerLengthMeasure': */
class SOAP_CMAC eml20__ForcePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ForcePerLengthUom'
        eml20__ForcePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ForcePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__ForcePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ForcePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ForcePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ForcePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__ForcePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ForcePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__ForcePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:968 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeMeasure (-418)
/* simple XML schema type 'eml20:AmountOfSubstancePerTimeMeasure': */
class SOAP_CMAC eml20__AmountOfSubstancePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AmountOfSubstancePerTimeUom'
        eml20__AmountOfSubstancePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AmountOfSubstancePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__AmountOfSubstancePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AmountOfSubstancePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AmountOfSubstancePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AmountOfSubstancePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__AmountOfSubstancePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AmountOfSubstancePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__AmountOfSubstancePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:970 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureMeasure (-419)
/* simple XML schema type 'eml20:LengthPerTemperatureMeasure': */
class SOAP_CMAC eml20__LengthPerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthPerTemperatureUom'
        eml20__LengthPerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthPerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthPerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthPerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthPerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthPerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthPerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthPerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthPerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:972 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthMeasure (-420)
/* simple XML schema type 'eml20:VolumePerTimeLengthMeasure': */
class SOAP_CMAC eml20__VolumePerTimeLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimeLengthUom'
        eml20__VolumePerTimeLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimeLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimeLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimeLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimeLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimeLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimeLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimeLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimeLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:974 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaMeasure (-421)
/* simple XML schema type 'eml20:PressureSquaredPerForceTimePerAreaMeasure': */
class SOAP_CMAC eml20__PressureSquaredPerForceTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PressureSquaredPerForceTimePerAreaUom'
        eml20__PressureSquaredPerForceTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PressureSquaredPerForceTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__PressureSquaredPerForceTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PressureSquaredPerForceTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PressureSquaredPerForceTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PressureSquaredPerForceTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PressureSquaredPerForceTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:976 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeMeasure (-422)
/* simple XML schema type 'eml20:AnglePerVolumeMeasure': */
class SOAP_CMAC eml20__AnglePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AnglePerVolumeUom'
        eml20__AnglePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AnglePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__AnglePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AnglePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AnglePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AnglePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__AnglePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AnglePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__AnglePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:978 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureMeasure (-423)
/* simple XML schema type 'eml20:LengthPerPressureMeasure': */
class SOAP_CMAC eml20__LengthPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthPerPressureUom'
        eml20__LengthPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:980 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityMeasure (-424)
/* simple XML schema type 'eml20:ThermalConductivityMeasure': */
class SOAP_CMAC eml20__ThermalConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ThermalConductivityUom'
        eml20__ThermalConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ThermalConductivityMeasure, default initialized and not managed by a soap context
        virtual eml20__ThermalConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ThermalConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ThermalConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ThermalConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml20__ThermalConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ThermalConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml20__ThermalConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:982 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassMeasure (-425)
/* simple XML schema type 'eml20:MassMeasure': */
class SOAP_CMAC eml20__MassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassUom'
        eml20__MassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassMeasure, default initialized and not managed by a soap context
        virtual eml20__MassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:984 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerMeasure (-426)
/* simple XML schema type 'eml20:NormalizedPowerMeasure': */
class SOAP_CMAC eml20__NormalizedPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:NormalizedPowerUom'
        eml20__NormalizedPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__NormalizedPowerMeasure, default initialized and not managed by a soap context
        virtual eml20__NormalizedPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__NormalizedPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml20__NormalizedPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__NormalizedPowerMeasure() { }
        /// Friend allocator used by soap_new_eml20__NormalizedPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__NormalizedPowerMeasure * SOAP_FMAC2 soap_instantiate_eml20__NormalizedPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:986 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioMeasure (-427)
/* simple XML schema type 'eml20:LogarithmicPowerRatioMeasure': */
class SOAP_CMAC eml20__LogarithmicPowerRatioMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LogarithmicPowerRatioUom'
        eml20__LogarithmicPowerRatioUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LogarithmicPowerRatioMeasure, default initialized and not managed by a soap context
        virtual eml20__LogarithmicPowerRatioMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LogarithmicPowerRatioMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LogarithmicPowerRatioMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LogarithmicPowerRatioMeasure() { }
        /// Friend allocator used by soap_new_eml20__LogarithmicPowerRatioMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LogarithmicPowerRatioMeasure * SOAP_FMAC2 soap_instantiate_eml20__LogarithmicPowerRatioMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:988 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationMeasure (-428)
/* simple XML schema type 'eml20:AngularAccelerationMeasure': */
class SOAP_CMAC eml20__AngularAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AngularAccelerationUom'
        eml20__AngularAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AngularAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml20__AngularAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AngularAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AngularAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AngularAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml20__AngularAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AngularAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml20__AngularAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:990 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassMeasure (-429)
/* simple XML schema type 'eml20:ReciprocalMassMeasure': */
class SOAP_CMAC eml20__ReciprocalMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalMassUom'
        eml20__ReciprocalMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalMassMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:992 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceMeasure (-430)
/* simple XML schema type 'eml20:ReciprocalForceMeasure': */
class SOAP_CMAC eml20__ReciprocalForceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ReciprocalForceUom'
        eml20__ReciprocalForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ReciprocalForceMeasure, default initialized and not managed by a soap context
        virtual eml20__ReciprocalForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ReciprocalForceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ReciprocalForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ReciprocalForceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ReciprocalForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ReciprocalForceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ReciprocalForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:994 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleMeasure (-431)
/* simple XML schema type 'eml20:PlaneAngleMeasure': */
class SOAP_CMAC eml20__PlaneAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PlaneAngleUom'
        eml20__PlaneAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PlaneAngleMeasure, default initialized and not managed by a soap context
        virtual eml20__PlaneAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PlaneAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PlaneAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PlaneAngleMeasure() { }
        /// Friend allocator used by soap_new_eml20__PlaneAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PlaneAngleMeasure * SOAP_FMAC2 soap_instantiate_eml20__PlaneAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:996 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaMeasure (-432)
/* simple XML schema type 'eml20:EnergyLengthPerAreaMeasure': */
class SOAP_CMAC eml20__EnergyLengthPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyLengthPerAreaUom'
        eml20__EnergyLengthPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyLengthPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyLengthPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyLengthPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyLengthPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyLengthPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyLengthPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyLengthPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyLengthPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:998 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassMeasure (-433)
/* simple XML schema type 'eml20:EnergyPerMassMeasure': */
class SOAP_CMAC eml20__EnergyPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:EnergyPerMassUom'
        eml20__EnergyPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__EnergyPerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__EnergyPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__EnergyPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__EnergyPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__EnergyPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__EnergyPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__EnergyPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__EnergyPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1000 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityMeasure (-434)
/* simple XML schema type 'eml20:AngularVelocityMeasure': */
class SOAP_CMAC eml20__AngularVelocityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AngularVelocityUom'
        eml20__AngularVelocityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AngularVelocityMeasure, default initialized and not managed by a soap context
        virtual eml20__AngularVelocityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AngularVelocityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AngularVelocityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AngularVelocityMeasure() { }
        /// Friend allocator used by soap_new_eml20__AngularVelocityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AngularVelocityMeasure * SOAP_FMAC2 soap_instantiate_eml20__AngularVelocityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1002 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityMeasure (-435)
/* simple XML schema type 'eml20:ElectricConductivityMeasure': */
class SOAP_CMAC eml20__ElectricConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricConductivityUom'
        eml20__ElectricConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricConductivityMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1004 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure (-436)
/* simple XML schema type 'eml20:AmountOfSubstancePerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml20__AmountOfSubstancePerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AmountOfSubstancePerAmountOfSubstanceUom'
        eml20__AmountOfSubstancePerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AmountOfSubstancePerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml20__AmountOfSubstancePerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AmountOfSubstancePerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AmountOfSubstancePerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AmountOfSubstancePerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AmountOfSubstancePerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1006 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthMeasure (-437)
/* simple XML schema type 'eml20:ElectricFieldStrengthMeasure': */
class SOAP_CMAC eml20__ElectricFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricFieldStrengthUom'
        eml20__ElectricFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1008 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaMeasure (-438)
/* simple XML schema type 'eml20:PowerPerAreaMeasure': */
class SOAP_CMAC eml20__PowerPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PowerPerAreaUom'
        eml20__PowerPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PowerPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__PowerPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PowerPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PowerPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PowerPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__PowerPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PowerPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__PowerPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1010 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthMeasure (-439)
/* simple XML schema type 'eml20:MagneticFluxDensityPerLengthMeasure': */
class SOAP_CMAC eml20__MagneticFluxDensityPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticFluxDensityPerLengthUom'
        eml20__MagneticFluxDensityPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticFluxDensityPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticFluxDensityPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticFluxDensityPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticFluxDensityPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticFluxDensityPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticFluxDensityPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticFluxDensityPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticFluxDensityPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1012 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureMeasure (-440)
/* simple XML schema type 'eml20:PressureMeasure': */
class SOAP_CMAC eml20__PressureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PressureUom'
        eml20__PressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PressureMeasure, default initialized and not managed by a soap context
        virtual eml20__PressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PressureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PressureMeasure() { }
        /// Friend allocator used by soap_new_eml20__PressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PressureMeasure * SOAP_FMAC2 soap_instantiate_eml20__PressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1014 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthMeasure (-441)
/* simple XML schema type 'eml20:VolumePerTimePerPressureLengthMeasure': */
class SOAP_CMAC eml20__VolumePerTimePerPressureLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerTimePerPressureLengthUom'
        eml20__VolumePerTimePerPressureLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerTimePerPressureLengthMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerTimePerPressureLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerTimePerPressureLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerTimePerPressureLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerTimePerPressureLengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerTimePerPressureLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerTimePerPressureLengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerTimePerPressureLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1016 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthMeasure (-442)
/* simple XML schema type 'eml20:MagneticFieldStrengthMeasure': */
class SOAP_CMAC eml20__MagneticFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MagneticFieldStrengthUom'
        eml20__MagneticFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MagneticFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml20__MagneticFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MagneticFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MagneticFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MagneticFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml20__MagneticFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MagneticFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml20__MagneticFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1018 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockMeasure (-443)
/* simple XML schema type 'eml20:PermeabilityRockMeasure': */
class SOAP_CMAC eml20__PermeabilityRockMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:PermeabilityRockUom'
        eml20__PermeabilityRockUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__PermeabilityRockMeasure, default initialized and not managed by a soap context
        virtual eml20__PermeabilityRockMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__PermeabilityRockMeasure); }
      public:
        /// Constructor with default initializations
        eml20__PermeabilityRockMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__PermeabilityRockMeasure() { }
        /// Friend allocator used by soap_new_eml20__PermeabilityRockMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__PermeabilityRockMeasure * SOAP_FMAC2 soap_instantiate_eml20__PermeabilityRockMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1020 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentMeasure (-444)
/* simple XML schema type 'eml20:DoseEquivalentMeasure': */
class SOAP_CMAC eml20__DoseEquivalentMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:DoseEquivalentUom'
        eml20__DoseEquivalentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__DoseEquivalentMeasure, default initialized and not managed by a soap context
        virtual eml20__DoseEquivalentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__DoseEquivalentMeasure); }
      public:
        /// Constructor with default initializations
        eml20__DoseEquivalentMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__DoseEquivalentMeasure() { }
        /// Friend allocator used by soap_new_eml20__DoseEquivalentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__DoseEquivalentMeasure * SOAP_FMAC2 soap_instantiate_eml20__DoseEquivalentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1022 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaMeasure (-445)
/* simple XML schema type 'eml20:MassPerTimePerAreaMeasure': */
class SOAP_CMAC eml20__MassPerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerTimePerAreaUom'
        eml20__MassPerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1024 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureMeasure (-446)
/* simple XML schema type 'eml20:VolumePerPressureMeasure': */
class SOAP_CMAC eml20__VolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerPressureUom'
        eml20__VolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1026 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaMeasure (-447)
/* simple XML schema type 'eml20:MassPerAreaMeasure': */
class SOAP_CMAC eml20__MassPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MassPerAreaUom'
        eml20__MassPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MassPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml20__MassPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MassPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MassPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MassPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__MassPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MassPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__MassPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1028 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeMeasure (-448)
/* simple XML schema type 'eml20:AmountOfSubstancePerVolumeMeasure': */
class SOAP_CMAC eml20__AmountOfSubstancePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AmountOfSubstancePerVolumeUom'
        eml20__AmountOfSubstancePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AmountOfSubstancePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__AmountOfSubstancePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AmountOfSubstancePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AmountOfSubstancePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AmountOfSubstancePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__AmountOfSubstancePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AmountOfSubstancePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__AmountOfSubstancePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1030 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeMeasure (-449)
/* simple XML schema type 'eml20:TimePerTimeMeasure': */
class SOAP_CMAC eml20__TimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:TimePerTimeUom'
        eml20__TimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__TimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml20__TimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__TimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__TimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__TimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml20__TimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__TimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml20__TimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1032 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeMeasure (-450)
/* simple XML schema type 'eml20:AreaPerVolumeMeasure': */
class SOAP_CMAC eml20__AreaPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AreaPerVolumeUom'
        eml20__AreaPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AreaPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__AreaPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AreaPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AreaPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AreaPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__AreaPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AreaPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__AreaPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1034 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceMeasure (-451)
/* simple XML schema type 'eml20:ElectricResistanceMeasure': */
class SOAP_CMAC eml20__ElectricResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:ElectricResistanceUom'
        eml20__ElectricResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__ElectricResistanceMeasure, default initialized and not managed by a soap context
        virtual eml20__ElectricResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__ElectricResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml20__ElectricResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__ElectricResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml20__ElectricResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__ElectricResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml20__ElectricResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1036 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeMeasure (-452)
/* simple XML schema type 'eml20:VolumePerVolumeMeasure': */
class SOAP_CMAC eml20__VolumePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:VolumePerVolumeUom'
        eml20__VolumePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__VolumePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml20__VolumePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__VolumePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml20__VolumePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__VolumePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml20__VolumePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__VolumePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml20__VolumePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1038 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaMeasure (-453)
/* simple XML schema type 'eml20:AreaMeasure': */
class SOAP_CMAC eml20__AreaMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:AreaUom'
        eml20__AreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__AreaMeasure, default initialized and not managed by a soap context
        virtual eml20__AreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__AreaMeasure); }
      public:
        /// Constructor with default initializations
        eml20__AreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__AreaMeasure() { }
        /// Friend allocator used by soap_new_eml20__AreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__AreaMeasure * SOAP_FMAC2 soap_instantiate_eml20__AreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1040 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassMeasure (-454)
/* simple XML schema type 'eml20:LengthPerMassMeasure': */
class SOAP_CMAC eml20__LengthPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:LengthPerMassUom'
        eml20__LengthPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__LengthPerMassMeasure, default initialized and not managed by a soap context
        virtual eml20__LengthPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__LengthPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml20__LengthPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__LengthPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml20__LengthPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__LengthPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml20__LengthPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:1042 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityMeasure (-455)
/* simple XML schema type 'eml20:MobilityMeasure': */
class SOAP_CMAC eml20__MobilityMeasure {
      public:
        /// Simple content of XML schema type 'eml20:Measure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml20:MobilityUom'
        eml20__MobilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml20__MobilityMeasure, default initialized and not managed by a soap context
        virtual eml20__MobilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml20__MobilityMeasure); }
      public:
        /// Constructor with default initializations
        eml20__MobilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml20__MobilityMeasure() { }
        /// Friend allocator used by soap_new_eml20__MobilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml20__MobilityMeasure * SOAP_FMAC2 soap_instantiate_eml20__MobilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:204 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertyKind (-36)
/* complex XML schema type 'resqml20:obj_PropertyKind': */
class SOAP_CMAC resqml20__obj_USCOREPropertyKind : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:NamingSystem' of XML schema type 'xsd:anyURI'
        std::string NamingSystem;
        /// Required element 'resqml20:IsAbstract' of XML schema type 'xsd:boolean'
        bool IsAbstract;
        /// Required element 'resqml20:RepresentativeUom' of XML schema type 'resqml20:ResqmlUom'
        resqml20__ResqmlUom RepresentativeUom;
        /// Required element 'resqml20:ParentPropertyKind' of XML schema type 'resqml20:AbstractPropertyKind'
        resqml20__AbstractPropertyKind *ParentPropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPropertyKind, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPropertyKind); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPropertyKind() : NamingSystem(), IsAbstract(), RepresentativeUom(), ParentPropertyKind() { }
        virtual ~resqml20__obj_USCOREPropertyKind() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPropertyKind(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPropertyKind * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:218 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyLookup (-43)
/* complex XML schema type 'resqml20:AbstractPropertyLookup': */
class SOAP_CMAC resqml20__AbstractPropertyLookup : public resqml20__AbstractResqmlDataObject {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractPropertyLookup, default initialized and not managed by a soap context
        virtual resqml20__AbstractPropertyLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractPropertyLookup); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractPropertyLookup() { }
        virtual ~resqml20__AbstractPropertyLookup() { }
        /// Friend allocator used by soap_new_resqml20__AbstractPropertyLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractPropertyLookup * SOAP_FMAC2 soap_instantiate_resqml20__AbstractPropertyLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:222 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertySet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertySet (-45)
/* complex XML schema type 'resqml20:obj_PropertySet': */
class SOAP_CMAC resqml20__obj_USCOREPropertySet : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:TimeSetKind' of XML schema type 'resqml20:TimeSetKind'
        resqml20__TimeSetKind TimeSetKind;
        /// Required element 'resqml20:HasSinglePropertyKind' of XML schema type 'xsd:boolean'
        bool HasSinglePropertyKind;
        /// Required element 'resqml20:HasMultipleRealizations' of XML schema type 'xsd:boolean'
        bool HasMultipleRealizations;
        /// Optional element 'resqml20:ParentSet' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> ParentSet;
        /// Required element 'resqml20:Properties' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Properties;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertySet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertySet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPropertySet, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPropertySet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPropertySet); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPropertySet() : TimeSetKind(), HasSinglePropertyKind(), HasMultipleRealizations(), ParentSet(), Properties() { }
        virtual ~resqml20__obj_USCOREPropertySet() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPropertySet(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPropertySet * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPropertySet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:224 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractProperty (-46)
/* complex XML schema type 'resqml20:AbstractProperty': */
class SOAP_CMAC resqml20__AbstractProperty : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:IndexableElement' of XML schema type 'resqml20:IndexableElements'
        resqml20__IndexableElements IndexableElement;
        /// Optional element 'resqml20:RealizationIndex' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *RealizationIndex;
        /// Optional element 'resqml20:TimeStep' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 *TimeStep;
        /// Optional element 'resqml20:TimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *TimeIndex;
        /// Required element 'resqml20:SupportingRepresentation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SupportingRepresentation;
        /// Optional element 'resqml20:LocalCrs' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *LocalCrs;
        /// Required element 'resqml20:PropertyKind' of XML schema type 'resqml20:AbstractPropertyKind'
        resqml20__AbstractPropertyKind *PropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractProperty, default initialized and not managed by a soap context
        virtual resqml20__AbstractProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractProperty); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractProperty() : Count(), IndexableElement(), RealizationIndex(), TimeStep(), TimeIndex(), SupportingRepresentation(), LocalCrs(), PropertyKind() { }
        virtual ~resqml20__AbstractProperty() { }
        /// Friend allocator used by soap_new_resqml20__AbstractProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractProperty * SOAP_FMAC2 soap_instantiate_resqml20__AbstractProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:304 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationIdentitySet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationIdentitySet (-86)
/* complex XML schema type 'resqml20:obj_RepresentationIdentitySet': */
class SOAP_CMAC resqml20__obj_USCORERepresentationIdentitySet : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:RepresentationIdentity' of XML schema type 'resqml20:RepresentationIdentity'
        std::vector<resqml20__RepresentationIdentity *> RepresentationIdentity;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationIdentitySet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationIdentitySet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORERepresentationIdentitySet, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORERepresentationIdentitySet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORERepresentationIdentitySet); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORERepresentationIdentitySet() : RepresentationIdentity() { }
        virtual ~resqml20__obj_USCORERepresentationIdentitySet() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORERepresentationIdentitySet(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORERepresentationIdentitySet * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORERepresentationIdentitySet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:308 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractRepresentation (-88)
/* complex XML schema type 'resqml20:AbstractRepresentation': */
class SOAP_CMAC resqml20__AbstractRepresentation : public resqml20__AbstractResqmlDataObject {
      public:
        /// Optional element 'resqml20:RepresentedInterpretation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *RepresentedInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractRepresentation, default initialized and not managed by a soap context
        virtual resqml20__AbstractRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractRepresentation() : RepresentedInterpretation() { }
        virtual ~resqml20__AbstractRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:328 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalGridSet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalGridSet (-98)
/* complex XML schema type 'resqml20:obj_LocalGridSet': */
class SOAP_CMAC resqml20__obj_USCORELocalGridSet : public resqml20__AbstractResqmlDataObject {
      public:
        /// Optional element 'resqml20:Activation' of XML schema type 'resqml20:Activation'
        resqml20__Activation *Activation;
        /// Required element 'resqml20:ChildGrid' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> ChildGrid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalGridSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalGridSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORELocalGridSet, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORELocalGridSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORELocalGridSet); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORELocalGridSet() : Activation(), ChildGrid() { }
        virtual ~resqml20__obj_USCORELocalGridSet() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORELocalGridSet(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORELocalGridSet * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORELocalGridSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:390 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridGeometry (-129)
/* complex XML schema type 'resqml20:UnstructuredGridGeometry': */
class SOAP_CMAC resqml20__UnstructuredGridGeometry : public resqml20__AbstractGridGeometry {
      public:
        /// Required element 'resqml20:CellShape' of XML schema type 'resqml20:CellShape'
        resqml20__CellShape CellShape;
        /// Required element 'resqml20:NodeCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 NodeCount;
        /// Required element 'resqml20:FaceCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 FaceCount;
        /// Required element 'resqml20:NodesPerFace' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *NodesPerFace;
        /// Required element 'resqml20:FacesPerCell' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *FacesPerCell;
        /// Required element 'resqml20:CellFaceIsRightHanded' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *CellFaceIsRightHanded;
        /// Optional element 'resqml20:HingeNodeFaces' of XML schema type 'resqml20:UnstructuredGridHingeNodeFaces'
        resqml20__UnstructuredGridHingeNodeFaces *HingeNodeFaces;
        /// Optional element 'resqml20:SubnodeTopology' of XML schema type 'resqml20:UnstructuredSubnodeTopology'
        resqml20__UnstructuredSubnodeTopology *SubnodeTopology;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__UnstructuredGridGeometry, default initialized and not managed by a soap context
        virtual resqml20__UnstructuredGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__UnstructuredGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__UnstructuredGridGeometry() : CellShape(), NodeCount(), FaceCount(), NodesPerFace(), FacesPerCell(), CellFaceIsRightHanded(), HingeNodeFaces(), SubnodeTopology() { }
        virtual ~resqml20__UnstructuredGridGeometry() { }
        /// Friend allocator used by soap_new_resqml20__UnstructuredGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__UnstructuredGridGeometry * SOAP_FMAC2 soap_instantiate_resqml20__UnstructuredGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:420 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridGeometry (-144)
/* complex XML schema type 'resqml20:AbstractColumnLayerGridGeometry': */
class SOAP_CMAC resqml20__AbstractColumnLayerGridGeometry : public resqml20__AbstractGridGeometry {
      public:
        /// Required element 'resqml20:KDirection' of XML schema type 'resqml20:KDirection'
        resqml20__KDirection KDirection;
        /// Required element 'resqml20:PillarGeometryIsDefined' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *PillarGeometryIsDefined;
        /// Required element 'resqml20:PillarShape' of XML schema type 'resqml20:PillarShape'
        resqml20__PillarShape PillarShape;
        /// Optional element 'resqml20:CellGeometryIsDefined' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *CellGeometryIsDefined;
        /// Optional element 'resqml20:NodeIsColocatedInKDirection' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *NodeIsColocatedInKDirection;
        /// Optional element 'resqml20:NodeIsColocatedOnKEdge' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *NodeIsColocatedOnKEdge;
        /// Optional element 'resqml20:SubnodeTopology' of XML schema type 'resqml20:ColumnLayerSubnodeTopology'
        resqml20__ColumnLayerSubnodeTopology *SubnodeTopology;
        /// Optional element 'resqml20:SplitCoordinateLines' of XML schema type 'resqml20:ColumnLayerSplitCoordinateLines'
        resqml20__ColumnLayerSplitCoordinateLines *SplitCoordinateLines;
        /// Optional element 'resqml20:SplitNodes' of XML schema type 'resqml20:SplitNodePatch'
        resqml20__SplitNodePatch *SplitNodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractColumnLayerGridGeometry, default initialized and not managed by a soap context
        virtual resqml20__AbstractColumnLayerGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractColumnLayerGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractColumnLayerGridGeometry() : KDirection(), PillarGeometryIsDefined(), PillarShape(), CellGeometryIsDefined(), NodeIsColocatedInKDirection(), NodeIsColocatedOnKEdge(), SubnodeTopology(), SplitCoordinateLines(), SplitNodes() { }
        virtual ~resqml20__AbstractColumnLayerGridGeometry() { }
        /// Friend allocator used by soap_new_resqml20__AbstractColumnLayerGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractColumnLayerGridGeometry * SOAP_FMAC2 soap_instantiate_resqml20__AbstractColumnLayerGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:424 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeatureInterpretation (-146)
/* complex XML schema type 'resqml20:AbstractFeatureInterpretation': */
class SOAP_CMAC resqml20__AbstractFeatureInterpretation : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:Domain' of XML schema type 'resqml20:Domain'
        resqml20__Domain Domain;
        /// Required element 'resqml20:InterpretedFeature' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *InterpretedFeature;
        /// Optional element 'resqml20:HasOccuredDuring' of XML schema type 'resqml20:TimeInterval'
        resqml20__TimeInterval *HasOccuredDuring;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeatureInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeatureInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractFeatureInterpretation, default initialized and not managed by a soap context
        virtual resqml20__AbstractFeatureInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractFeatureInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractFeatureInterpretation() : Domain(), InterpretedFeature(), HasOccuredDuring() { }
        virtual ~resqml20__AbstractFeatureInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractFeatureInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractFeatureInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractFeatureInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:456 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumn (-162)
/* complex XML schema type 'resqml20:obj_StratigraphicColumn': */
class SOAP_CMAC resqml20__obj_USCOREStratigraphicColumn : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:Ranks' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Ranks;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumn
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumn; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStratigraphicColumn, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStratigraphicColumn *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStratigraphicColumn); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStratigraphicColumn() : Ranks() { }
        virtual ~resqml20__obj_USCOREStratigraphicColumn() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStratigraphicColumn(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStratigraphicColumn * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStratigraphicColumn(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:492 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGlobalChronostratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGlobalChronostratigraphicColumn (-180)
/* complex XML schema type 'resqml20:obj_GlobalChronostratigraphicColumn': */
class SOAP_CMAC resqml20__obj_USCOREGlobalChronostratigraphicColumn : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:ChronostratigraphicColumnComponent' of XML schema type 'resqml20:ChronostratigraphicRank'
        std::vector<resqml20__ChronostratigraphicRank *> ChronostratigraphicColumnComponent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGlobalChronostratigraphicColumn
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGlobalChronostratigraphicColumn; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGlobalChronostratigraphicColumn, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGlobalChronostratigraphicColumn *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGlobalChronostratigraphicColumn); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGlobalChronostratigraphicColumn() : ChronostratigraphicColumnComponent() { }
        virtual ~resqml20__obj_USCOREGlobalChronostratigraphicColumn() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGlobalChronostratigraphicColumn(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGlobalChronostratigraphicColumn * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGlobalChronostratigraphicColumn(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:506 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeature (-187)
/* complex XML schema type 'resqml20:AbstractFeature': */
class SOAP_CMAC resqml20__AbstractFeature : public resqml20__AbstractResqmlDataObject {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractFeature, default initialized and not managed by a soap context
        virtual resqml20__AbstractFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractFeature); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractFeature() { }
        virtual ~resqml20__AbstractFeature() { }
        /// Friend allocator used by soap_new_resqml20__AbstractFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractFeature * SOAP_FMAC2 soap_instantiate_resqml20__AbstractFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:518 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractLocal3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractLocal3dCrs (-193)
/* complex XML schema type 'resqml20:AbstractLocal3dCrs': */
class SOAP_CMAC resqml20__AbstractLocal3dCrs : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:YOffset' of XML schema type 'xsd:double'
        double YOffset;
        /// Required element 'resqml20:ZOffset' of XML schema type 'xsd:double'
        double ZOffset;
        /// Required element 'resqml20:ArealRotation' of XML schema type 'eml20:PlaneAngleMeasure'
        eml20__PlaneAngleMeasure *ArealRotation;
        /// Required element 'resqml20:ProjectedAxisOrder' of XML schema type 'eml20:AxisOrder2d'
        eml20__AxisOrder2d ProjectedAxisOrder;
        /// Required element 'resqml20:ProjectedUom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom ProjectedUom;
        /// Required element 'resqml20:VerticalUom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom VerticalUom;
        /// Required element 'resqml20:XOffset' of XML schema type 'xsd:double'
        double XOffset;
        /// Required element 'resqml20:ZIncreasingDownward' of XML schema type 'xsd:boolean'
        bool ZIncreasingDownward;
        /// Required element 'resqml20:VerticalCrs' of XML schema type 'eml20:AbstractVerticalCrs'
        eml20__AbstractVerticalCrs *VerticalCrs;
        /// Required element 'resqml20:ProjectedCrs' of XML schema type 'eml20:AbstractProjectedCrs'
        eml20__AbstractProjectedCrs *ProjectedCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractLocal3dCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractLocal3dCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractLocal3dCrs, default initialized and not managed by a soap context
        virtual resqml20__AbstractLocal3dCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractLocal3dCrs); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractLocal3dCrs() : YOffset(), ZOffset(), ArealRotation(), ProjectedAxisOrder(), ProjectedUom(), VerticalUom(), XOffset(), ZIncreasingDownward(), VerticalCrs(), ProjectedCrs() { }
        virtual ~resqml20__AbstractLocal3dCrs() { }
        /// Friend allocator used by soap_new_resqml20__AbstractLocal3dCrs(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractLocal3dCrs * SOAP_FMAC2 soap_instantiate_resqml20__AbstractLocal3dCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:526 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETimeSeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETimeSeries (-197)
/* complex XML schema type 'resqml20:obj_TimeSeries': */
class SOAP_CMAC resqml20__obj_USCORETimeSeries : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:Time' of XML schema type 'resqml20:Timestamp'
        std::vector<resqml20__Timestamp *> Time;
        /// Optional element 'resqml20:TimeSeriesParentage' of XML schema type 'resqml20:TimeSeriesParentage'
        resqml20__TimeSeriesParentage *TimeSeriesParentage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETimeSeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETimeSeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORETimeSeries, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORETimeSeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORETimeSeries); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORETimeSeries() : Time(), TimeSeriesParentage() { }
        virtual ~resqml20__obj_USCORETimeSeries() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORETimeSeries(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORETimeSeries * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORETimeSeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:540 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREMdDatum
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREMdDatum (-204)
/* complex XML schema type 'resqml20:obj_MdDatum': */
class SOAP_CMAC resqml20__obj_USCOREMdDatum : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:Location' of XML schema type 'resqml20:Point3d'
        resqml20__Point3d *Location;
        /// Required element 'resqml20:MdReference' of XML schema type 'resqml20:MdReference'
        resqml20__MdReference MdReference;
        /// Required element 'resqml20:LocalCrs' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *LocalCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREMdDatum
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREMdDatum; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREMdDatum, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREMdDatum *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREMdDatum); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREMdDatum() : Location(), MdReference(), LocalCrs() { }
        virtual ~resqml20__obj_USCOREMdDatum() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREMdDatum(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREMdDatum * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREMdDatum(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:542 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreMarker (-205)
/* complex XML schema type 'resqml20:WellboreMarker': */
class SOAP_CMAC resqml20__WellboreMarker : public resqml20__AbstractResqmlDataObject {
      public:
        /// Optional element 'resqml20:FluidContact' of XML schema type 'resqml20:FluidContact'
        resqml20__FluidContact *FluidContact;
        /// Optional element 'resqml20:FluidMarker' of XML schema type 'resqml20:FluidMarker'
        resqml20__FluidMarker *FluidMarker;
        /// Optional element 'resqml20:GeologicBoundaryKind' of XML schema type 'resqml20:GeologicBoundaryKind'
        resqml20__GeologicBoundaryKind *GeologicBoundaryKind;
        /// Optional element 'resqml20:WitsmlFormationMarker' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *WitsmlFormationMarker;
        /// Optional element 'resqml20:Interpretation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Interpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreMarker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreMarker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__WellboreMarker, default initialized and not managed by a soap context
        virtual resqml20__WellboreMarker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__WellboreMarker); }
      public:
        /// Constructor with default initializations
        resqml20__WellboreMarker() : FluidContact(), FluidMarker(), GeologicBoundaryKind(), WitsmlFormationMarker(), Interpretation() { }
        virtual ~resqml20__WellboreMarker() { }
        /// Friend allocator used by soap_new_resqml20__WellboreMarker(struct soap*, int)
        friend SOAP_FMAC1 resqml20__WellboreMarker * SOAP_FMAC2 soap_instantiate_resqml20__WellboreMarker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:622 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivity (-245)
/* complex XML schema type 'resqml20:obj_Activity': */
class SOAP_CMAC resqml20__obj_USCOREActivity : public resqml20__AbstractResqmlDataObject {
      public:
        /// Optional element 'resqml20:Parent' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Parent;
        /// Required element 'resqml20:ActivityDescriptor' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ActivityDescriptor;
        /// Required element 'resqml20:Parameter' of XML schema type 'resqml20:AbstractActivityParameter'
        std::vector<resqml20__AbstractActivityParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREActivity, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREActivity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREActivity); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREActivity() : Parent(), ActivityDescriptor(), Parameter() { }
        virtual ~resqml20__obj_USCOREActivity() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREActivity(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREActivity * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREActivity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:640 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivityTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivityTemplate (-254)
/* complex XML schema type 'resqml20:obj_ActivityTemplate': */
class SOAP_CMAC resqml20__obj_USCOREActivityTemplate : public resqml20__AbstractResqmlDataObject {
      public:
        /// Required element 'resqml20:Parameter' of XML schema type 'resqml20:ParameterTemplate'
        std::vector<resqml20__ParameterTemplate *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivityTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivityTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREActivityTemplate, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREActivityTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREActivityTemplate); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREActivityTemplate() : Parameter() { }
        virtual ~resqml20__obj_USCOREActivityTemplate() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREActivityTemplate(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREActivityTemplate * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREActivityTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:174 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDoubleTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDoubleTableLookup (-21)
/* complex XML schema type 'resqml20:obj_DoubleTableLookup': */
class SOAP_CMAC resqml20__obj_USCOREDoubleTableLookup : public resqml20__AbstractPropertyLookup {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'resqml20:DoubleLookup'
        std::vector<resqml20__DoubleLookup *> Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDoubleTableLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDoubleTableLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREDoubleTableLookup, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREDoubleTableLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREDoubleTableLookup); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREDoubleTableLookup() : Value() { }
        virtual ~resqml20__obj_USCOREDoubleTableLookup() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREDoubleTableLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREDoubleTableLookup * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREDoubleTableLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:184 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointsProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointsProperty (-26)
/* complex XML schema type 'resqml20:obj_PointsProperty': */
class SOAP_CMAC resqml20__obj_USCOREPointsProperty : public resqml20__AbstractProperty {
      public:
        /// Required element 'resqml20:PatchOfPoints' of XML schema type 'resqml20:PatchOfPoints'
        std::vector<resqml20__PatchOfPoints *> PatchOfPoints;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointsProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointsProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPointsProperty, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPointsProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPointsProperty); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPointsProperty() : PatchOfPoints() { }
        virtual ~resqml20__obj_USCOREPointsProperty() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPointsProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPointsProperty * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPointsProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:206 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStringTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStringTableLookup (-37)
/* complex XML schema type 'resqml20:obj_StringTableLookup': */
class SOAP_CMAC resqml20__obj_USCOREStringTableLookup : public resqml20__AbstractPropertyLookup {
      public:
        /// Required element 'resqml20:Value' of XML schema type 'resqml20:StringLookup'
        std::vector<resqml20__StringLookup *> Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStringTableLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStringTableLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStringTableLookup, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStringTableLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStringTableLookup); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStringTableLookup() : Value() { }
        virtual ~resqml20__obj_USCOREStringTableLookup() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStringTableLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStringTableLookup * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStringTableLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:234 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValuesProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValuesProperty (-51)
/* complex XML schema type 'resqml20:AbstractValuesProperty': */
class SOAP_CMAC resqml20__AbstractValuesProperty : public resqml20__AbstractProperty {
      public:
        /// Required element 'resqml20:PatchOfValues' of XML schema type 'resqml20:PatchOfValues'
        std::vector<resqml20__PatchOfValues *> PatchOfValues;
        /// Optional element 'resqml20:Facet' of XML schema type 'resqml20:PropertyKindFacet'
        std::vector<resqml20__PropertyKindFacet *> Facet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValuesProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValuesProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractValuesProperty, default initialized and not managed by a soap context
        virtual resqml20__AbstractValuesProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractValuesProperty); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractValuesProperty() : PatchOfValues(), Facet() { }
        virtual ~resqml20__AbstractValuesProperty() { }
        /// Friend allocator used by soap_new_resqml20__AbstractValuesProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractValuesProperty * SOAP_FMAC2 soap_instantiate_resqml20__AbstractValuesProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:298 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationSetRepresentation (-83)
/* complex XML schema type 'resqml20:obj_RepresentationSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCORERepresentationSetRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:IsHomogeneous' of XML schema type 'xsd:boolean'
        bool IsHomogeneous;
        /// Required element 'resqml20:Representation' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Representation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORERepresentationSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORERepresentationSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORERepresentationSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORERepresentationSetRepresentation() : IsHomogeneous(), Representation() { }
        virtual ~resqml20__obj_USCORERepresentationSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORERepresentationSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORERepresentationSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORERepresentationSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:300 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERedefinedGeometryRepresentation (-84)
/* complex XML schema type 'resqml20:obj_RedefinedGeometryRepresentation': */
class SOAP_CMAC resqml20__obj_USCORERedefinedGeometryRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:PatchOfGeometry' of XML schema type 'resqml20:PatchOfGeometry'
        std::vector<resqml20__PatchOfGeometry *> PatchOfGeometry;
        /// Required element 'resqml20:SupportingRepresentation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERedefinedGeometryRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERedefinedGeometryRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORERedefinedGeometryRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORERedefinedGeometryRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORERedefinedGeometryRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORERedefinedGeometryRepresentation() : PatchOfGeometry(), SupportingRepresentation() { }
        virtual ~resqml20__obj_USCORERedefinedGeometryRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORERedefinedGeometryRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORERedefinedGeometryRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORERedefinedGeometryRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:312 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESubRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESubRepresentation (-90)
/* complex XML schema type 'resqml20:obj_SubRepresentation': */
class SOAP_CMAC resqml20__obj_USCORESubRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Optional element 'resqml20:AdditionalGridTopology' of XML schema type 'resqml20:AdditionalGridTopology'
        resqml20__AdditionalGridTopology *AdditionalGridTopology;
        /// Required element 'resqml20:SupportingRepresentation' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *SupportingRepresentation;
        /// Required element 'resqml20:SubRepresentationPatch' of XML schema type 'resqml20:SubRepresentationPatch'
        std::vector<resqml20__SubRepresentationPatch *> SubRepresentationPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESubRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESubRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORESubRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORESubRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORESubRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORESubRepresentation() : AdditionalGridTopology(), SupportingRepresentation(), SubRepresentationPatch() { }
        virtual ~resqml20__obj_USCORESubRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORESubRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORESubRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORESubRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:330 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridRepresentation (-99)
/* complex XML schema type 'resqml20:AbstractGridRepresentation': */
class SOAP_CMAC resqml20__AbstractGridRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Optional element 'resqml20:CellFluidPhaseUnits' of XML schema type 'resqml20:CellFluidPhaseUnits'
        resqml20__CellFluidPhaseUnits *CellFluidPhaseUnits;
        /// Optional element 'resqml20:ParentWindow' of XML schema type 'resqml20:AbstractParentWindow'
        resqml20__AbstractParentWindow *ParentWindow;
        /// Optional element 'resqml20:CellStratigraphicUnits' of XML schema type 'resqml20:CellStratigraphicUnits'
        resqml20__CellStratigraphicUnits *CellStratigraphicUnits;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__AbstractGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractGridRepresentation() : CellFluidPhaseUnits(), ParentWindow(), CellStratigraphicUnits() { }
        virtual ~resqml20__AbstractGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:376 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerGridGeometry (-122)
/* complex XML schema type 'resqml20:UnstructuredColumnLayerGridGeometry': */
class SOAP_CMAC resqml20__UnstructuredColumnLayerGridGeometry : public resqml20__AbstractColumnLayerGridGeometry {
      public:
        /// Required element 'resqml20:ColumnShape' of XML schema type 'resqml20:ColumnShape'
        resqml20__ColumnShape ColumnShape;
        /// Required element 'resqml20:PillarCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 PillarCount;
        /// Required element 'resqml20:PillarsPerColumn' of XML schema type 'resqml20:ResqmlJaggedArray'
        resqml20__ResqmlJaggedArray *PillarsPerColumn;
        /// Required element 'resqml20:ColumnIsRightHanded' of XML schema type 'resqml20:AbstractBooleanArray'
        resqml20__AbstractBooleanArray *ColumnIsRightHanded;
        /// Optional element 'resqml20:ColumnEdges' of XML schema type 'resqml20:UnstructuredColumnEdges'
        resqml20__UnstructuredColumnEdges *ColumnEdges;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__UnstructuredColumnLayerGridGeometry, default initialized and not managed by a soap context
        virtual resqml20__UnstructuredColumnLayerGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__UnstructuredColumnLayerGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__UnstructuredColumnLayerGridGeometry() : ColumnShape(), PillarCount(), PillarsPerColumn(), ColumnIsRightHanded(), ColumnEdges() { }
        virtual ~resqml20__UnstructuredColumnLayerGridGeometry() { }
        /// Friend allocator used by soap_new_resqml20__UnstructuredColumnLayerGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__UnstructuredColumnLayerGridGeometry * SOAP_FMAC2 soap_instantiate_resqml20__UnstructuredColumnLayerGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:378 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkGridGeometry (-123)
/* complex XML schema type 'resqml20:IjkGridGeometry': */
class SOAP_CMAC resqml20__IjkGridGeometry : public resqml20__AbstractColumnLayerGridGeometry {
      public:
        /// Required element 'resqml20:GridIsRighthanded' of XML schema type 'xsd:boolean'
        bool GridIsRighthanded;
        /// Optional element 'resqml20:IjGaps' of XML schema type 'resqml20:IjGaps'
        resqml20__IjGaps *IjGaps;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__IjkGridGeometry, default initialized and not managed by a soap context
        virtual resqml20__IjkGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__IjkGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml20__IjkGridGeometry() : GridIsRighthanded(), IjGaps() { }
        virtual ~resqml20__IjkGridGeometry() { }
        /// Friend allocator used by soap_new_resqml20__IjkGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml20__IjkGridGeometry * SOAP_FMAC2 soap_instantiate_resqml20__IjkGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:404 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGridConnectionSetRepresentation (-136)
/* complex XML schema type 'resqml20:obj_GridConnectionSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREGridConnectionSetRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:Count' of XML schema type 'xsd:positiveInteger'
        ULONG64 Count;
        /// Required element 'resqml20:CellIndexPairs' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *CellIndexPairs;
        /// Optional element 'resqml20:GridIndexPairs' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *GridIndexPairs;
        /// Optional element 'resqml20:LocalFacePerCellIndexPairs' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *LocalFacePerCellIndexPairs;
        /// Optional element 'resqml20:ConnectionInterpretations' of XML schema type 'resqml20:ConnectionInterpretations'
        resqml20__ConnectionInterpretations *ConnectionInterpretations;
        /// Required element 'resqml20:Grid' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Grid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGridConnectionSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGridConnectionSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGridConnectionSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGridConnectionSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGridConnectionSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGridConnectionSetRepresentation() : Count(), CellIndexPairs(), GridIndexPairs(), LocalFacePerCellIndexPairs(), ConnectionInterpretations(), Grid() { }
        virtual ~resqml20__obj_USCOREGridConnectionSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGridConnectionSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGridConnectionSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGridConnectionSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:430 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractOrganizationInterpretation (-149)
/* complex XML schema type 'resqml20:AbstractOrganizationInterpretation': */
class SOAP_CMAC resqml20__AbstractOrganizationInterpretation : public resqml20__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml20:ContactInterpretation' of XML schema type 'resqml20:AbstractContactInterpretationPart'
        std::vector<resqml20__AbstractContactInterpretationPart *> ContactInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml20__AbstractOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractOrganizationInterpretation() : ContactInterpretation() { }
        virtual ~resqml20__AbstractOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:440 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGenericFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGenericFeatureInterpretation (-154)
/* complex XML schema type 'resqml20:obj_GenericFeatureInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREGenericFeatureInterpretation : public resqml20__AbstractFeatureInterpretation {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGenericFeatureInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGenericFeatureInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGenericFeatureInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGenericFeatureInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGenericFeatureInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGenericFeatureInterpretation() { }
        virtual ~resqml20__obj_USCOREGenericFeatureInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGenericFeatureInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGenericFeatureInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGenericFeatureInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:442 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreInterpretation (-155)
/* complex XML schema type 'resqml20:obj_WellboreInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREWellboreInterpretation : public resqml20__AbstractFeatureInterpretation {
      public:
        /// Required element 'resqml20:IsDrilled' of XML schema type 'xsd:boolean'
        bool IsDrilled;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREWellboreInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREWellboreInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREWellboreInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREWellboreInterpretation() : IsDrilled() { }
        virtual ~resqml20__obj_USCOREWellboreInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREWellboreInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREWellboreInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREWellboreInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:460 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeatureInterpretation (-164)
/* complex XML schema type 'resqml20:obj_BoundaryFeatureInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREBoundaryFeatureInterpretation : public resqml20__AbstractFeatureInterpretation {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeatureInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeatureInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREBoundaryFeatureInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREBoundaryFeatureInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREBoundaryFeatureInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREBoundaryFeatureInterpretation() { }
        virtual ~resqml20__obj_USCOREBoundaryFeatureInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREBoundaryFeatureInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREBoundaryFeatureInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREBoundaryFeatureInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:464 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREEarthModelInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREEarthModelInterpretation (-166)
/* complex XML schema type 'resqml20:obj_EarthModelInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREEarthModelInterpretation : public resqml20__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml20:StratigraphicOccurrences' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> StratigraphicOccurrences;
        /// Optional element 'resqml20:StratigraphicColumn' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *StratigraphicColumn;
        /// Optional element 'resqml20:Structure' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Structure;
        /// Optional element 'resqml20:Fluid' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Fluid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREEarthModelInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREEarthModelInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREEarthModelInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREEarthModelInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREEarthModelInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREEarthModelInterpretation() : StratigraphicOccurrences(), StratigraphicColumn(), Structure(), Fluid() { }
        virtual ~resqml20__obj_USCOREEarthModelInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREEarthModelInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREEarthModelInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREEarthModelInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:476 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitInterpretation (-172)
/* complex XML schema type 'resqml20:obj_GeologicUnitInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREGeologicUnitInterpretation : public resqml20__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml20:GeologicUnitComposition' of XML schema type 'resqml20:GeologicUnitComposition'
        resqml20__GeologicUnitComposition *GeologicUnitComposition;
        /// Optional element 'resqml20:GeologicUnitMaterialImplacement' of XML schema type 'resqml20:GeologicUnitMaterialImplacement'
        resqml20__GeologicUnitMaterialImplacement *GeologicUnitMaterialImplacement;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGeologicUnitInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGeologicUnitInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGeologicUnitInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGeologicUnitInterpretation() : GeologicUnitComposition(), GeologicUnitMaterialImplacement() { }
        virtual ~resqml20__obj_USCOREGeologicUnitInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGeologicUnitInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGeologicUnitInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGeologicUnitInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:496 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeologicFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeologicFeature (-182)
/* complex XML schema type 'resqml20:AbstractGeologicFeature': */
class SOAP_CMAC resqml20__AbstractGeologicFeature : public resqml20__AbstractFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeologicFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeologicFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractGeologicFeature, default initialized and not managed by a soap context
        virtual resqml20__AbstractGeologicFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractGeologicFeature); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractGeologicFeature() { }
        virtual ~resqml20__AbstractGeologicFeature() { }
        /// Friend allocator used by soap_new_resqml20__AbstractGeologicFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractGeologicFeature * SOAP_FMAC2 soap_instantiate_resqml20__AbstractGeologicFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:512 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalTime3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalTime3dCrs (-190)
/* complex XML schema type 'resqml20:obj_LocalTime3dCrs': */
class SOAP_CMAC resqml20__obj_USCORELocalTime3dCrs : public resqml20__AbstractLocal3dCrs {
      public:
        /// Required element 'resqml20:TimeUom' of XML schema type 'eml20:TimeUom'
        eml20__TimeUom TimeUom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalTime3dCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalTime3dCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORELocalTime3dCrs, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORELocalTime3dCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORELocalTime3dCrs); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORELocalTime3dCrs() : TimeUom() { }
        virtual ~resqml20__obj_USCORELocalTime3dCrs() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORELocalTime3dCrs(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORELocalTime3dCrs * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORELocalTime3dCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:524 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalDepth3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalDepth3dCrs (-196)
/* complex XML schema type 'resqml20:obj_LocalDepth3dCrs': */
class SOAP_CMAC resqml20__obj_USCORELocalDepth3dCrs : public resqml20__AbstractLocal3dCrs {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalDepth3dCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalDepth3dCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORELocalDepth3dCrs, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORELocalDepth3dCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORELocalDepth3dCrs); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORELocalDepth3dCrs() { }
        virtual ~resqml20__obj_USCORELocalDepth3dCrs() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORELocalDepth3dCrs(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORELocalDepth3dCrs * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORELocalDepth3dCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:534 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDeviationSurveyRepresentation (-201)
/* complex XML schema type 'resqml20:obj_DeviationSurveyRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREDeviationSurveyRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Optional element 'resqml20:WitsmlDeviationSurvey' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *WitsmlDeviationSurvey;
        /// Required element 'resqml20:IsFinal' of XML schema type 'xsd:boolean'
        bool IsFinal;
        /// Required element 'resqml20:StationCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 StationCount;
        /// Required element 'resqml20:MdUom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom MdUom;
        /// Required element 'resqml20:Mds' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *Mds;
        /// Required element 'resqml20:FirstStationLocation' of XML schema type 'resqml20:Point3d'
        resqml20__Point3d *FirstStationLocation;
        /// Required element 'resqml20:AngleUom' of XML schema type 'eml20:PlaneAngleUom'
        eml20__PlaneAngleUom AngleUom;
        /// Required element 'resqml20:Azimuths' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *Azimuths;
        /// Required element 'resqml20:Inclinations' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *Inclinations;
        /// Required element 'resqml20:MdDatum' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *MdDatum;
        /// Optional element 'resqml20:TimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDeviationSurveyRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDeviationSurveyRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREDeviationSurveyRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREDeviationSurveyRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREDeviationSurveyRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREDeviationSurveyRepresentation() : WitsmlDeviationSurvey(), IsFinal(), StationCount(), MdUom(), Mds(), FirstStationLocation(), AngleUom(), Azimuths(), Inclinations(), MdDatum(), TimeIndex() { }
        virtual ~resqml20__obj_USCOREDeviationSurveyRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREDeviationSurveyRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREDeviationSurveyRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREDeviationSurveyRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:536 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFrameRepresentation (-202)
/* complex XML schema type 'resqml20:obj_WellboreFrameRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREWellboreFrameRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:NodeCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 NodeCount;
        /// Required element 'resqml20:NodeMd' of XML schema type 'resqml20:AbstractDoubleArray'
        resqml20__AbstractDoubleArray *NodeMd;
        /// Optional element 'resqml20:WitsmlLogReference' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *WitsmlLogReference;
        /// Optional element 'resqml20:IntervalStratigraphiUnits' of XML schema type 'resqml20:IntervalStratigraphicUnits'
        resqml20__IntervalStratigraphicUnits *IntervalStratigraphiUnits;
        /// Optional element 'resqml20:CellFluidPhaseUnits' of XML schema type 'resqml20:CellFluidPhaseUnits'
        resqml20__CellFluidPhaseUnits *CellFluidPhaseUnits;
        /// Required element 'resqml20:Trajectory' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Trajectory;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFrameRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFrameRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREWellboreFrameRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREWellboreFrameRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREWellboreFrameRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREWellboreFrameRepresentation() : NodeCount(), NodeMd(), WitsmlLogReference(), IntervalStratigraphiUnits(), CellFluidPhaseUnits(), Trajectory() { }
        virtual ~resqml20__obj_USCOREWellboreFrameRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREWellboreFrameRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREWellboreFrameRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREWellboreFrameRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:538 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreTrajectoryRepresentation (-203)
/* complex XML schema type 'resqml20:obj_WellboreTrajectoryRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREWellboreTrajectoryRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:StartMd' of XML schema type 'xsd:double'
        double StartMd;
        /// Required element 'resqml20:FinishMd' of XML schema type 'xsd:double'
        double FinishMd;
        /// Required element 'resqml20:MdUom' of XML schema type 'eml20:LengthUom'
        eml20__LengthUom MdUom;
        /// Optional element 'resqml20:MdDomain' of XML schema type 'resqml20:MdDomain'
        resqml20__MdDomain *MdDomain;
        /// Optional element 'resqml20:WitsmlTrajectory' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *WitsmlTrajectory;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:AbstractParametricLineGeometry'
        resqml20__AbstractParametricLineGeometry *Geometry;
        /// Required element 'resqml20:MdDatum' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *MdDatum;
        /// Optional element 'resqml20:DeviationSurvey' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *DeviationSurvey;
        /// Optional element 'resqml20:ParentIntersection' of XML schema type 'resqml20:WellboreTrajectoryParentIntersection'
        resqml20__WellboreTrajectoryParentIntersection *ParentIntersection;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreTrajectoryRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreTrajectoryRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREWellboreTrajectoryRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREWellboreTrajectoryRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREWellboreTrajectoryRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREWellboreTrajectoryRepresentation() : StartMd(), FinishMd(), MdUom(), MdDomain(), WitsmlTrajectory(), Geometry(), MdDatum(), DeviationSurvey(), ParentIntersection() { }
        virtual ~resqml20__obj_USCOREWellboreTrajectoryRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREWellboreTrajectoryRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREWellboreTrajectoryRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREWellboreTrajectoryRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:562 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointSetRepresentation (-215)
/* complex XML schema type 'resqml20:obj_PointSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREPointSetRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:NodePatch' of XML schema type 'resqml20:NodePatch'
        std::vector<resqml20__NodePatch *> NodePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPointSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPointSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPointSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPointSetRepresentation() : NodePatch() { }
        virtual ~resqml20__obj_USCOREPointSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPointSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPointSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPointSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:572 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineSetRepresentation (-220)
/* complex XML schema type 'resqml20:obj_PolylineSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREPolylineSetRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Optional element 'resqml20:LineRole' of XML schema type 'resqml20:LineRole'
        resqml20__LineRole *LineRole;
        /// Required element 'resqml20:LinePatch' of XML schema type 'resqml20:PolylineSetPatch'
        std::vector<resqml20__PolylineSetPatch *> LinePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPolylineSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPolylineSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPolylineSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPolylineSetRepresentation() : LineRole(), LinePatch() { }
        virtual ~resqml20__obj_USCOREPolylineSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPolylineSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPolylineSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPolylineSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:580 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineRepresentation (-224)
/* complex XML schema type 'resqml20:obj_PolylineRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREPolylineRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Optional element 'resqml20:LineRole' of XML schema type 'resqml20:LineRole'
        resqml20__LineRole *LineRole;
        /// Required element 'resqml20:IsClosed' of XML schema type 'xsd:boolean'
        bool IsClosed;
        /// Required element 'resqml20:NodePatch' of XML schema type 'resqml20:NodePatch'
        resqml20__NodePatch *NodePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPolylineRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPolylineRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPolylineRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPolylineRepresentation() : LineRole(), IsClosed(), NodePatch() { }
        virtual ~resqml20__obj_USCOREPolylineRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPolylineRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPolylineRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPolylineRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:586 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceRepresentation (-227)
/* complex XML schema type 'resqml20:AbstractSurfaceRepresentation': */
class SOAP_CMAC resqml20__AbstractSurfaceRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:SurfaceRole' of XML schema type 'resqml20:SurfaceRole'
        resqml20__SurfaceRole SurfaceRole;
        /// Optional element 'resqml20:Boundaries' of XML schema type 'resqml20:PatchBoundaries'
        std::vector<resqml20__PatchBoundaries *> Boundaries;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractSurfaceRepresentation, default initialized and not managed by a soap context
        virtual resqml20__AbstractSurfaceRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractSurfaceRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractSurfaceRepresentation() : SurfaceRole(), Boundaries() { }
        virtual ~resqml20__AbstractSurfaceRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractSurfaceRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractSurfaceRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractSurfaceRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:600 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTechnicalFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTechnicalFeature (-234)
/* complex XML schema type 'resqml20:AbstractTechnicalFeature': */
class SOAP_CMAC resqml20__AbstractTechnicalFeature : public resqml20__AbstractFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTechnicalFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTechnicalFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractTechnicalFeature, default initialized and not managed by a soap context
        virtual resqml20__AbstractTechnicalFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractTechnicalFeature); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractTechnicalFeature() { }
        virtual ~resqml20__AbstractTechnicalFeature() { }
        /// Friend allocator used by soap_new_resqml20__AbstractTechnicalFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractTechnicalFeature * SOAP_FMAC2 soap_instantiate_resqml20__AbstractTechnicalFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:646 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesRepresentation (-257)
/* complex XML schema type 'resqml20:obj_StreamlinesRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREStreamlinesRepresentation : public resqml20__AbstractRepresentation {
      public:
        /// Required element 'resqml20:LineCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 LineCount;
        /// Optional element 'resqml20:StreamlineWellbores' of XML schema type 'resqml20:StreamlineWellbores'
        resqml20__StreamlineWellbores *StreamlineWellbores;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:StreamlinePolylineSetPatch'
        resqml20__StreamlinePolylineSetPatch *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStreamlinesRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStreamlinesRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStreamlinesRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStreamlinesRepresentation() : LineCount(), StreamlineWellbores(), Geometry() { }
        virtual ~resqml20__obj_USCOREStreamlinesRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStreamlinesRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStreamlinesRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStreamlinesRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:180 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousProperty (-24)
/* complex XML schema type 'resqml20:obj_ContinuousProperty': */
class SOAP_CMAC resqml20__obj_USCOREContinuousProperty : public resqml20__AbstractValuesProperty {
      public:
        /// Optional element 'resqml20:MinimumValue' of XML schema type 'xsd:double'
        std::vector<double> MinimumValue;
        /// Optional element 'resqml20:MaximumValue' of XML schema type 'xsd:double'
        std::vector<double> MaximumValue;
        /// Required element 'resqml20:UOM' of XML schema type 'resqml20:ResqmlUom'
        resqml20__ResqmlUom UOM;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREContinuousProperty, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREContinuousProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREContinuousProperty); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREContinuousProperty() : MinimumValue(), MaximumValue(), UOM() { }
        virtual ~resqml20__obj_USCOREContinuousProperty() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREContinuousProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREContinuousProperty * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREContinuousProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:194 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentProperty (-31)
/* complex XML schema type 'resqml20:obj_CommentProperty': */
class SOAP_CMAC resqml20__obj_USCORECommentProperty : public resqml20__AbstractValuesProperty {
      public:
        /// Optional element 'resqml20:Language' of XML schema type 'xsd:string'
        std::string *Language;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORECommentProperty, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORECommentProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORECommentProperty); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORECommentProperty() : Language() { }
        virtual ~resqml20__obj_USCORECommentProperty() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORECommentProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORECommentProperty * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORECommentProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:196 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscreteProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscreteProperty (-32)
/* complex XML schema type 'resqml20:obj_DiscreteProperty': */
class SOAP_CMAC resqml20__obj_USCOREDiscreteProperty : public resqml20__AbstractValuesProperty {
      public:
        /// Optional element 'resqml20:MinimumValue' of XML schema type 'xsd:integer'
        std::vector<LONG64> MinimumValue;
        /// Optional element 'resqml20:MaximumValue' of XML schema type 'xsd:integer'
        std::vector<LONG64> MaximumValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscreteProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscreteProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREDiscreteProperty, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREDiscreteProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREDiscreteProperty); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREDiscreteProperty() : MinimumValue(), MaximumValue() { }
        virtual ~resqml20__obj_USCOREDiscreteProperty() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREDiscreteProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREDiscreteProperty * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREDiscreteProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:198 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalProperty (-33)
/* complex XML schema type 'resqml20:obj_CategoricalProperty': */
class SOAP_CMAC resqml20__obj_USCORECategoricalProperty : public resqml20__AbstractValuesProperty {
      public:
        /// Required element 'resqml20:Lookup' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *Lookup;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORECategoricalProperty, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORECategoricalProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORECategoricalProperty); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORECategoricalProperty() : Lookup() { }
        virtual ~resqml20__obj_USCORECategoricalProperty() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORECategoricalProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORECategoricalProperty * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORECategoricalProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:314 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredGridRepresentation (-91)
/* complex XML schema type 'resqml20:obj_UnstructuredGridRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREUnstructuredGridRepresentation : public resqml20__AbstractGridRepresentation {
      public:
        /// Required element 'resqml20:CellCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 CellCount;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:UnstructuredGridGeometry'
        resqml20__UnstructuredGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREUnstructuredGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREUnstructuredGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREUnstructuredGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREUnstructuredGridRepresentation() : CellCount(), Geometry() { }
        virtual ~resqml20__obj_USCOREUnstructuredGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREUnstructuredGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREUnstructuredGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREUnstructuredGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:318 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGpGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGpGridRepresentation (-93)
/* complex XML schema type 'resqml20:obj_GpGridRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREGpGridRepresentation : public resqml20__AbstractGridRepresentation {
      public:
        /// Optional element 'resqml20:ColumnLayerGrid' of XML schema type 'resqml20:GpGridColumnLayerGrid'
        std::vector<resqml20__GpGridColumnLayerGrid *> ColumnLayerGrid;
        /// Optional element 'resqml20:UnstructuredGridPatch' of XML schema type 'resqml20:GpGridUnstructuredGridPatch'
        std::vector<resqml20__GpGridUnstructuredGridPatch *> UnstructuredGridPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGpGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGpGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGpGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGpGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGpGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGpGridRepresentation() : ColumnLayerGrid(), UnstructuredGridPatch() { }
        virtual ~resqml20__obj_USCOREGpGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGpGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGpGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGpGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:382 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTruncatedColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTruncatedColumnLayerGridRepresentation (-125)
/* complex XML schema type 'resqml20:AbstractTruncatedColumnLayerGridRepresentation': */
class SOAP_CMAC resqml20__AbstractTruncatedColumnLayerGridRepresentation : public resqml20__AbstractGridRepresentation {
      public:
        /// Required element 'resqml20:Nk' of XML schema type 'xsd:positiveInteger'
        ULONG64 Nk;
        /// Required element 'resqml20:TruncationCells' of XML schema type 'resqml20:TruncationCellPatch'
        resqml20__TruncationCellPatch *TruncationCells;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTruncatedColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTruncatedColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractTruncatedColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__AbstractTruncatedColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractTruncatedColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractTruncatedColumnLayerGridRepresentation() : Nk(), TruncationCells() { }
        virtual ~resqml20__AbstractTruncatedColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractTruncatedColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractTruncatedColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractTruncatedColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:398 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridRepresentation (-133)
/* complex XML schema type 'resqml20:AbstractColumnLayerGridRepresentation': */
class SOAP_CMAC resqml20__AbstractColumnLayerGridRepresentation : public resqml20__AbstractGridRepresentation {
      public:
        /// Required element 'resqml20:Nk' of XML schema type 'xsd:positiveInteger'
        ULONG64 Nk;
        /// Optional element 'resqml20:IntervalStratigraphicUnits' of XML schema type 'resqml20:IntervalStratigraphicUnits'
        resqml20__IntervalStratigraphicUnits *IntervalStratigraphicUnits;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__AbstractColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractColumnLayerGridRepresentation() : Nk(), IntervalStratigraphicUnits() { }
        virtual ~resqml20__AbstractColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:426 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidOrganizationInterpretation (-147)
/* complex XML schema type 'resqml20:obj_RockFluidOrganizationInterpretation': */
class SOAP_CMAC resqml20__obj_USCORERockFluidOrganizationInterpretation : public resqml20__AbstractOrganizationInterpretation {
      public:
        /// Required element 'resqml20:RockFluidUnitIndex' of XML schema type 'resqml20:RockFluidUnitInterpretationIndex'
        resqml20__RockFluidUnitInterpretationIndex *RockFluidUnitIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORERockFluidOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORERockFluidOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORERockFluidOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORERockFluidOrganizationInterpretation() : RockFluidUnitIndex() { }
        virtual ~resqml20__obj_USCORERockFluidOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORERockFluidOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORERockFluidOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORERockFluidOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:438 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitInterpretation (-153)
/* complex XML schema type 'resqml20:obj_RockFluidUnitInterpretation': */
class SOAP_CMAC resqml20__obj_USCORERockFluidUnitInterpretation : public resqml20__obj_USCOREGeologicUnitInterpretation {
      public:
        /// Optional element 'resqml20:Phase' of XML schema type 'resqml20:Phase'
        resqml20__Phase *Phase;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORERockFluidUnitInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORERockFluidUnitInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORERockFluidUnitInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORERockFluidUnitInterpretation() : Phase() { }
        virtual ~resqml20__obj_USCORERockFluidUnitInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORERockFluidUnitInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORERockFluidUnitInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORERockFluidUnitInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:446 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyBoundaryInterpretation (-157)
/* complex XML schema type 'resqml20:obj_GeobodyBoundaryInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREGeobodyBoundaryInterpretation : public resqml20__obj_USCOREBoundaryFeatureInterpretation {
      public:
        /// Optional element 'resqml20:BoundaryRelation' of XML schema type 'resqml20:BoundaryRelation'
        std::vector<resqml20__BoundaryRelation> BoundaryRelation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyBoundaryInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyBoundaryInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGeobodyBoundaryInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGeobodyBoundaryInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGeobodyBoundaryInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGeobodyBoundaryInterpretation() : BoundaryRelation() { }
        virtual ~resqml20__obj_USCOREGeobodyBoundaryInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGeobodyBoundaryInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGeobodyBoundaryInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGeobodyBoundaryInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:448 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStructuralOrganizationInterpretation (-158)
/* complex XML schema type 'resqml20:obj_StructuralOrganizationInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREStructuralOrganizationInterpretation : public resqml20__AbstractOrganizationInterpretation {
      public:
        /// Required element 'resqml20:OrderingCriteria' of XML schema type 'resqml20:OrderingCriteria'
        resqml20__OrderingCriteria OrderingCriteria;
        /// Optional element 'resqml20:Faults' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Faults;
        /// Optional element 'resqml20:Horizons' of XML schema type 'resqml20:HorizonInterpretationIndex'
        std::vector<resqml20__HorizonInterpretationIndex *> Horizons;
        /// Optional element 'resqml20:Sides' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Sides;
        /// Optional element 'resqml20:TopFrontier' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> TopFrontier;
        /// Optional element 'resqml20:BottomFrontier' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> BottomFrontier;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStructuralOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStructuralOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStructuralOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStructuralOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStructuralOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStructuralOrganizationInterpretation() : OrderingCriteria(), Faults(), Horizons(), Sides(), TopFrontier(), BottomFrontier() { }
        virtual ~resqml20__obj_USCOREStructuralOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStructuralOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStructuralOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStructuralOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:454 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFaultInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFaultInterpretation (-161)
/* complex XML schema type 'resqml20:obj_FaultInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREFaultInterpretation : public resqml20__obj_USCOREBoundaryFeatureInterpretation {
      public:
        /// Optional element 'resqml20:IsListric' of XML schema type 'xsd:boolean'
        bool *IsListric;
        /// Optional element 'resqml20:MaximumThrow' of XML schema type 'eml20:LengthMeasure'
        eml20__LengthMeasure *MaximumThrow;
        /// Optional element 'resqml20:MeanAzimuth' of XML schema type 'eml20:PlaneAngleMeasure'
        eml20__PlaneAngleMeasure *MeanAzimuth;
        /// Optional element 'resqml20:MeanDip' of XML schema type 'eml20:PlaneAngleMeasure'
        eml20__PlaneAngleMeasure *MeanDip;
        /// Optional element 'resqml20:ThrowInterpretation' of XML schema type 'resqml20:FaultThrow'
        std::vector<resqml20__FaultThrow *> ThrowInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFaultInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFaultInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREFaultInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREFaultInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREFaultInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREFaultInterpretation() : IsListric(), MaximumThrow(), MeanAzimuth(), MeanDip(), ThrowInterpretation() { }
        virtual ~resqml20__obj_USCOREFaultInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREFaultInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREFaultInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREFaultInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:458 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyInterpretation (-163)
/* complex XML schema type 'resqml20:obj_GeobodyInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREGeobodyInterpretation : public resqml20__obj_USCOREGeologicUnitInterpretation {
      public:
        /// Optional element 'resqml20:Geobody3dShape' of XML schema type 'resqml20:Geobody3dShape'
        resqml20__Geobody3dShape *Geobody3dShape;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGeobodyInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGeobodyInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGeobodyInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGeobodyInterpretation() : Geobody3dShape() { }
        virtual ~resqml20__obj_USCOREGeobodyInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGeobodyInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGeobodyInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGeobodyInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:470 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractStratigraphicOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractStratigraphicOrganizationInterpretation (-169)
/* complex XML schema type 'resqml20:AbstractStratigraphicOrganizationInterpretation': */
class SOAP_CMAC resqml20__AbstractStratigraphicOrganizationInterpretation : public resqml20__AbstractOrganizationInterpretation {
      public:
        /// Required element 'resqml20:OrderingCriteria' of XML schema type 'resqml20:OrderingCriteria'
        resqml20__OrderingCriteria OrderingCriteria;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractStratigraphicOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractStratigraphicOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractStratigraphicOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml20__AbstractStratigraphicOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractStratigraphicOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractStratigraphicOrganizationInterpretation() : OrderingCriteria() { }
        virtual ~resqml20__AbstractStratigraphicOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractStratigraphicOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractStratigraphicOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractStratigraphicOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:474 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREHorizonInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREHorizonInterpretation (-171)
/* complex XML schema type 'resqml20:obj_HorizonInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREHorizonInterpretation : public resqml20__obj_USCOREBoundaryFeatureInterpretation {
      public:
        /// Optional element 'resqml20:BoundaryRelation' of XML schema type 'resqml20:BoundaryRelation'
        std::vector<resqml20__BoundaryRelation> BoundaryRelation;
        /// Optional element 'resqml20:SequenceStratigraphySurface' of XML schema type 'resqml20:SequenceStratigraphySurface'
        resqml20__SequenceStratigraphySurface *SequenceStratigraphySurface;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREHorizonInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREHorizonInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREHorizonInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREHorizonInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREHorizonInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREHorizonInterpretation() : BoundaryRelation(), SequenceStratigraphySurface() { }
        virtual ~resqml20__obj_USCOREHorizonInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREHorizonInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREHorizonInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREHorizonInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:478 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitInterpretation (-173)
/* complex XML schema type 'resqml20:obj_StratigraphicUnitInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREStratigraphicUnitInterpretation : public resqml20__obj_USCOREGeologicUnitInterpretation {
      public:
        /// Optional element 'resqml20:DepositionMode' of XML schema type 'resqml20:DepositionMode'
        resqml20__DepositionMode *DepositionMode;
        /// Optional element 'resqml20:MaxThickness' of XML schema type 'eml20:LengthMeasure'
        eml20__LengthMeasure *MaxThickness;
        /// Optional element 'resqml20:MinThickness' of XML schema type 'eml20:LengthMeasure'
        eml20__LengthMeasure *MinThickness;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStratigraphicUnitInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStratigraphicUnitInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStratigraphicUnitInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStratigraphicUnitInterpretation() : DepositionMode(), MaxThickness(), MinThickness() { }
        virtual ~resqml20__obj_USCOREStratigraphicUnitInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStratigraphicUnitInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStratigraphicUnitInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStratigraphicUnitInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:484 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitFeature (-176)
/* complex XML schema type 'resqml20:obj_GeologicUnitFeature': */
class SOAP_CMAC resqml20__obj_USCOREGeologicUnitFeature : public resqml20__AbstractGeologicFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGeologicUnitFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGeologicUnitFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGeologicUnitFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGeologicUnitFeature() { }
        virtual ~resqml20__obj_USCOREGeologicUnitFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGeologicUnitFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGeologicUnitFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGeologicUnitFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:488 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeature (-178)
/* complex XML schema type 'resqml20:obj_BoundaryFeature': */
class SOAP_CMAC resqml20__obj_USCOREBoundaryFeature : public resqml20__AbstractGeologicFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREBoundaryFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREBoundaryFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREBoundaryFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREBoundaryFeature() { }
        virtual ~resqml20__obj_USCOREBoundaryFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREBoundaryFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREBoundaryFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREBoundaryFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:502 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREOrganizationFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREOrganizationFeature (-185)
/* complex XML schema type 'resqml20:obj_OrganizationFeature': */
class SOAP_CMAC resqml20__obj_USCOREOrganizationFeature : public resqml20__AbstractGeologicFeature {
      public:
        /// Required element 'resqml20:OrganizationKind' of XML schema type 'resqml20:OrganizationKind'
        resqml20__OrganizationKind OrganizationKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREOrganizationFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREOrganizationFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREOrganizationFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREOrganizationFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREOrganizationFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREOrganizationFeature() : OrganizationKind() { }
        virtual ~resqml20__obj_USCOREOrganizationFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREOrganizationFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREOrganizationFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREOrganizationFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:530 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBlockedWellboreRepresentation (-199)
/* complex XML schema type 'resqml20:obj_BlockedWellboreRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREBlockedWellboreRepresentation : public resqml20__obj_USCOREWellboreFrameRepresentation {
      public:
        /// Required element 'resqml20:CellCount' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 CellCount;
        /// Required element 'resqml20:CellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *CellIndices;
        /// Required element 'resqml20:GridIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *GridIndices;
        /// Required element 'resqml20:LocalFacePairPerCellIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *LocalFacePairPerCellIndices;
        /// Required element 'resqml20:Grid' of XML schema type 'eml20:DataObjectReference'
        std::vector<eml20__DataObjectReference *> Grid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBlockedWellboreRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBlockedWellboreRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREBlockedWellboreRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREBlockedWellboreRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREBlockedWellboreRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREBlockedWellboreRepresentation() : CellCount(), CellIndices(), GridIndices(), LocalFacePairPerCellIndices(), Grid() { }
        virtual ~resqml20__obj_USCOREBlockedWellboreRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREBlockedWellboreRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREBlockedWellboreRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREBlockedWellboreRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:544 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreMarkerFrameRepresentation (-206)
/* complex XML schema type 'resqml20:obj_WellboreMarkerFrameRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREWellboreMarkerFrameRepresentation : public resqml20__obj_USCOREWellboreFrameRepresentation {
      public:
        /// Required element 'resqml20:WellboreMarker' of XML schema type 'resqml20:WellboreMarker'
        std::vector<resqml20__WellboreMarker *> WellboreMarker;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreMarkerFrameRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreMarkerFrameRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREWellboreMarkerFrameRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREWellboreMarkerFrameRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREWellboreMarkerFrameRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREWellboreMarkerFrameRepresentation() : WellboreMarker() { }
        virtual ~resqml20__obj_USCOREWellboreMarkerFrameRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREWellboreMarkerFrameRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREWellboreMarkerFrameRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREWellboreMarkerFrameRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:548 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETriangulatedSetRepresentation (-208)
/* complex XML schema type 'resqml20:obj_TriangulatedSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCORETriangulatedSetRepresentation : public resqml20__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml20:TrianglePatch' of XML schema type 'resqml20:TrianglePatch'
        std::vector<resqml20__TrianglePatch *> TrianglePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETriangulatedSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETriangulatedSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORETriangulatedSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORETriangulatedSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORETriangulatedSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORETriangulatedSetRepresentation() : TrianglePatch() { }
        virtual ~resqml20__obj_USCORETriangulatedSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORETriangulatedSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORETriangulatedSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORETriangulatedSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:556 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPlaneSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPlaneSetRepresentation (-212)
/* complex XML schema type 'resqml20:obj_PlaneSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREPlaneSetRepresentation : public resqml20__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml20:Planes' of XML schema type 'resqml20:AbstractPlaneGeometry'
        std::vector<resqml20__AbstractPlaneGeometry *> Planes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPlaneSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPlaneSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREPlaneSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREPlaneSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREPlaneSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREPlaneSetRepresentation() : Planes() { }
        virtual ~resqml20__obj_USCOREPlaneSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREPlaneSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREPlaneSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREPlaneSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:560 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceFrameworkRepresentation (-214)
/* complex XML schema type 'resqml20:AbstractSurfaceFrameworkRepresentation': */
class SOAP_CMAC resqml20__AbstractSurfaceFrameworkRepresentation : public resqml20__obj_USCORERepresentationSetRepresentation {
      public:
        /// Optional element 'resqml20:ContactIdentity' of XML schema type 'resqml20:ContactIdentity'
        std::vector<resqml20__ContactIdentity *> ContactIdentity;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractSurfaceFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml20__AbstractSurfaceFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractSurfaceFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractSurfaceFrameworkRepresentation() : ContactIdentity() { }
        virtual ~resqml20__AbstractSurfaceFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__AbstractSurfaceFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractSurfaceFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__AbstractSurfaceFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:564 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedVolumeFrameworkRepresentation (-216)
/* complex XML schema type 'resqml20:obj_SealedVolumeFrameworkRepresentation': */
class SOAP_CMAC resqml20__obj_USCORESealedVolumeFrameworkRepresentation : public resqml20__obj_USCORERepresentationSetRepresentation {
      public:
        /// Required element 'resqml20:BasedOn' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *BasedOn;
        /// Required element 'resqml20:Shells' of XML schema type 'resqml20:VolumeShell'
        std::vector<resqml20__VolumeShell *> Shells;
        /// Required element 'resqml20:Regions' of XML schema type 'resqml20:VolumeRegion'
        std::vector<resqml20__VolumeRegion *> Regions;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedVolumeFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedVolumeFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORESealedVolumeFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORESealedVolumeFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORESealedVolumeFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORESealedVolumeFrameworkRepresentation() : BasedOn(), Shells(), Regions() { }
        virtual ~resqml20__obj_USCORESealedVolumeFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORESealedVolumeFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORESealedVolumeFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORESealedVolumeFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:582 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dRepresentation (-225)
/* complex XML schema type 'resqml20:obj_Grid2dRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREGrid2dRepresentation : public resqml20__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml20:Grid2dPatch' of XML schema type 'resqml20:Grid2dPatch'
        resqml20__Grid2dPatch *Grid2dPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGrid2dRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGrid2dRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGrid2dRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGrid2dRepresentation() : Grid2dPatch() { }
        virtual ~resqml20__obj_USCOREGrid2dRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGrid2dRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGrid2dRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGrid2dRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:590 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dSetRepresentation (-229)
/* complex XML schema type 'resqml20:obj_Grid2dSetRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREGrid2dSetRepresentation : public resqml20__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml20:Grid2dPatch' of XML schema type 'resqml20:Grid2dPatch'
        std::vector<resqml20__Grid2dPatch *> Grid2dPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGrid2dSetRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGrid2dSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGrid2dSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGrid2dSetRepresentation() : Grid2dPatch() { }
        virtual ~resqml20__obj_USCOREGrid2dSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGrid2dSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGrid2dSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGrid2dSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:602 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFrontierFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFrontierFeature (-235)
/* complex XML schema type 'resqml20:obj_FrontierFeature': */
class SOAP_CMAC resqml20__obj_USCOREFrontierFeature : public resqml20__AbstractTechnicalFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFrontierFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFrontierFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREFrontierFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREFrontierFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREFrontierFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREFrontierFeature() { }
        virtual ~resqml20__obj_USCOREFrontierFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREFrontierFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREFrontierFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREFrontierFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:608 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFeature (-238)
/* complex XML schema type 'resqml20:obj_WellboreFeature': */
class SOAP_CMAC resqml20__obj_USCOREWellboreFeature : public resqml20__AbstractTechnicalFeature {
      public:
        /// Optional element 'resqml20:WitsmlWellbore' of XML schema type 'resqml20:WitsmlWellboreReference'
        resqml20__WitsmlWellboreReference *WitsmlWellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREWellboreFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREWellboreFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREWellboreFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREWellboreFeature() : WitsmlWellbore() { }
        virtual ~resqml20__obj_USCOREWellboreFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREWellboreFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREWellboreFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREWellboreFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:614 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicSurveyFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicSurveyFeature (-241)
/* complex XML schema type 'resqml20:AbstractSeismicSurveyFeature': */
class SOAP_CMAC resqml20__AbstractSeismicSurveyFeature : public resqml20__AbstractTechnicalFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicSurveyFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicSurveyFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__AbstractSeismicSurveyFeature, default initialized and not managed by a soap context
        virtual resqml20__AbstractSeismicSurveyFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__AbstractSeismicSurveyFeature); }
      public:
        /// Constructor with default initializations
        resqml20__AbstractSeismicSurveyFeature() { }
        virtual ~resqml20__AbstractSeismicSurveyFeature() { }
        /// Friend allocator used by soap_new_resqml20__AbstractSeismicSurveyFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__AbstractSeismicSurveyFeature * SOAP_FMAC2 soap_instantiate_resqml20__AbstractSeismicSurveyFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:644 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesFeature (-256)
/* complex XML schema type 'resqml20:obj_StreamlinesFeature': */
class SOAP_CMAC resqml20__obj_USCOREStreamlinesFeature : public resqml20__AbstractTechnicalFeature {
      public:
        /// Required element 'resqml20:Flux' of XML schema type 'resqml20:StreamlineFlux'
        resqml20__StreamlineFlux Flux;
        /// Optional element 'resqml20:OtherFlux' of XML schema type 'xsd:string'
        std::string *OtherFlux;
        /// Required element 'resqml20:TimeIndex' of XML schema type 'resqml20:TimeIndex'
        resqml20__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStreamlinesFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStreamlinesFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStreamlinesFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStreamlinesFeature() : Flux(), OtherFlux(), TimeIndex() { }
        virtual ~resqml20__obj_USCOREStreamlinesFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStreamlinesFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStreamlinesFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStreamlinesFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:336 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation (-102)
/* complex XML schema type 'resqml20:obj_UnstructuredColumnLayerGridRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation : public resqml20__AbstractColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml20:ColumnCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 ColumnCount;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:UnstructuredColumnLayerGridGeometry'
        resqml20__UnstructuredColumnLayerGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation() : ColumnCount(), Geometry() { }
        virtual ~resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:340 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREIjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREIjkGridRepresentation (-104)
/* complex XML schema type 'resqml20:obj_IjkGridRepresentation': */
class SOAP_CMAC resqml20__obj_USCOREIjkGridRepresentation : public resqml20__AbstractColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml20:Ni' of XML schema type 'xsd:positiveInteger'
        ULONG64 Ni;
        /// Required element 'resqml20:Nj' of XML schema type 'xsd:positiveInteger'
        ULONG64 Nj;
        /// Optional element 'resqml20:RadialGridIsComplete' of XML schema type 'xsd:boolean'
        bool *RadialGridIsComplete;
        /// Optional element 'resqml20:KGaps' of XML schema type 'resqml20:KGaps'
        resqml20__KGaps *KGaps;
        /// Optional element 'resqml20:Geometry' of XML schema type 'resqml20:IjkGridGeometry'
        resqml20__IjkGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREIjkGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREIjkGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREIjkGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREIjkGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREIjkGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREIjkGridRepresentation() : Ni(), Nj(), RadialGridIsComplete(), KGaps(), Geometry() { }
        virtual ~resqml20__obj_USCOREIjkGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREIjkGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREIjkGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREIjkGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:394 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation (-131)
/* complex XML schema type 'resqml20:obj_TruncatedUnstructuredColumnLayerGridRepresentation': */
class SOAP_CMAC resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation : public resqml20__AbstractTruncatedColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml20:ColumnCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 ColumnCount;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:UnstructuredColumnLayerGridGeometry'
        resqml20__UnstructuredColumnLayerGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation() : ColumnCount(), Geometry() { }
        virtual ~resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:402 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedIjkGridRepresentation (-135)
/* complex XML schema type 'resqml20:obj_TruncatedIjkGridRepresentation': */
class SOAP_CMAC resqml20__obj_USCORETruncatedIjkGridRepresentation : public resqml20__AbstractTruncatedColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml20:Ni' of XML schema type 'xsd:positiveInteger'
        ULONG64 Ni;
        /// Required element 'resqml20:Nj' of XML schema type 'xsd:positiveInteger'
        ULONG64 Nj;
        /// Required element 'resqml20:Geometry' of XML schema type 'resqml20:IjkGridGeometry'
        resqml20__IjkGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedIjkGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedIjkGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORETruncatedIjkGridRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORETruncatedIjkGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORETruncatedIjkGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORETruncatedIjkGridRepresentation() : Ni(), Nj(), Geometry() { }
        virtual ~resqml20__obj_USCORETruncatedIjkGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORETruncatedIjkGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORETruncatedIjkGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORETruncatedIjkGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:468 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumnRankInterpretation (-168)
/* complex XML schema type 'resqml20:obj_StratigraphicColumnRankInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREStratigraphicColumnRankInterpretation : public resqml20__AbstractStratigraphicOrganizationInterpretation {
      public:
        /// Required element 'resqml20:Index' of XML schema type 'xsd:nonNegativeInteger'
        ULONG64 Index;
        /// Required element 'resqml20:StratigraphicUnits' of XML schema type 'resqml20:StratigraphicUnitInterpretationIndex'
        std::vector<resqml20__StratigraphicUnitInterpretationIndex *> StratigraphicUnits;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumnRankInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumnRankInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStratigraphicColumnRankInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStratigraphicColumnRankInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStratigraphicColumnRankInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStratigraphicColumnRankInterpretation() : Index(), StratigraphicUnits() { }
        virtual ~resqml20__obj_USCOREStratigraphicColumnRankInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStratigraphicColumnRankInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStratigraphicColumnRankInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStratigraphicColumnRankInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:480 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation (-174)
/* complex XML schema type 'resqml20:obj_StratigraphicOccurrenceInterpretation': */
class SOAP_CMAC resqml20__obj_USCOREStratigraphicOccurrenceInterpretation : public resqml20__AbstractStratigraphicOrganizationInterpretation {
      public:
        /// Optional element 'resqml20:IsOccurrenceOf' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *IsOccurrenceOf;
        /// Optional element 'resqml20:GeologicUnitIndex' of XML schema type 'resqml20:GeologicUnitInterpretationIndex'
        std::vector<resqml20__GeologicUnitInterpretationIndex *> GeologicUnitIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStratigraphicOccurrenceInterpretation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStratigraphicOccurrenceInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStratigraphicOccurrenceInterpretation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStratigraphicOccurrenceInterpretation() : IsOccurrenceOf(), GeologicUnitIndex() { }
        virtual ~resqml20__obj_USCOREStratigraphicOccurrenceInterpretation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStratigraphicOccurrenceInterpretation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:482 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFluidBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFluidBoundaryFeature (-175)
/* complex XML schema type 'resqml20:obj_FluidBoundaryFeature': */
class SOAP_CMAC resqml20__obj_USCOREFluidBoundaryFeature : public resqml20__obj_USCOREBoundaryFeature {
      public:
        /// Required element 'resqml20:FluidContact' of XML schema type 'resqml20:FluidContact'
        resqml20__FluidContact FluidContact;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFluidBoundaryFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFluidBoundaryFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREFluidBoundaryFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREFluidBoundaryFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREFluidBoundaryFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREFluidBoundaryFeature() : FluidContact() { }
        virtual ~resqml20__obj_USCOREFluidBoundaryFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREFluidBoundaryFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREFluidBoundaryFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREFluidBoundaryFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:486 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitFeature (-177)
/* complex XML schema type 'resqml20:obj_RockFluidUnitFeature': */
class SOAP_CMAC resqml20__obj_USCORERockFluidUnitFeature : public resqml20__obj_USCOREGeologicUnitFeature {
      public:
        /// Required element 'resqml20:Phase' of XML schema type 'resqml20:Phase'
        resqml20__Phase Phase;
        /// Required element 'resqml20:FluidBoundaryBottom' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *FluidBoundaryBottom;
        /// Required element 'resqml20:FluidBoundaryTop' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *FluidBoundaryTop;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORERockFluidUnitFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORERockFluidUnitFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORERockFluidUnitFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORERockFluidUnitFeature() : Phase(), FluidBoundaryBottom(), FluidBoundaryTop() { }
        virtual ~resqml20__obj_USCORERockFluidUnitFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORERockFluidUnitFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORERockFluidUnitFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORERockFluidUnitFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:494 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitFeature (-181)
/* complex XML schema type 'resqml20:obj_StratigraphicUnitFeature': */
class SOAP_CMAC resqml20__obj_USCOREStratigraphicUnitFeature : public resqml20__obj_USCOREGeologicUnitFeature {
      public:
        /// Optional element 'resqml20:ChronostratigraphicBottom' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ChronostratigraphicBottom;
        /// Optional element 'resqml20:ChronostratigraphicTop' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *ChronostratigraphicTop;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREStratigraphicUnitFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREStratigraphicUnitFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREStratigraphicUnitFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREStratigraphicUnitFeature() : ChronostratigraphicBottom(), ChronostratigraphicTop() { }
        virtual ~resqml20__obj_USCOREStratigraphicUnitFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREStratigraphicUnitFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREStratigraphicUnitFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREStratigraphicUnitFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:498 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeneticBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeneticBoundaryFeature (-183)
/* complex XML schema type 'resqml20:obj_GeneticBoundaryFeature': */
class SOAP_CMAC resqml20__obj_USCOREGeneticBoundaryFeature : public resqml20__obj_USCOREBoundaryFeature {
      public:
        /// Required element 'resqml20:GeneticBoundaryKind' of XML schema type 'resqml20:GeneticBoundaryKind'
        resqml20__GeneticBoundaryKind GeneticBoundaryKind;
        /// Optional element 'resqml20:AbsoluteAge' of XML schema type 'resqml20:Timestamp'
        resqml20__Timestamp *AbsoluteAge;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeneticBoundaryFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeneticBoundaryFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGeneticBoundaryFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGeneticBoundaryFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGeneticBoundaryFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGeneticBoundaryFeature() : GeneticBoundaryKind(), AbsoluteAge() { }
        virtual ~resqml20__obj_USCOREGeneticBoundaryFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGeneticBoundaryFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGeneticBoundaryFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGeneticBoundaryFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:500 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyFeature (-184)
/* complex XML schema type 'resqml20:obj_GeobodyFeature': */
class SOAP_CMAC resqml20__obj_USCOREGeobodyFeature : public resqml20__obj_USCOREGeologicUnitFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREGeobodyFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREGeobodyFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREGeobodyFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREGeobodyFeature() { }
        virtual ~resqml20__obj_USCOREGeobodyFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREGeobodyFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREGeobodyFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREGeobodyFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:504 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETectonicBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETectonicBoundaryFeature (-186)
/* complex XML schema type 'resqml20:obj_TectonicBoundaryFeature': */
class SOAP_CMAC resqml20__obj_USCORETectonicBoundaryFeature : public resqml20__obj_USCOREBoundaryFeature {
      public:
        /// Required element 'resqml20:TectonicBoundaryKind' of XML schema type 'resqml20:TectonicBoundaryKind'
        resqml20__TectonicBoundaryKind TectonicBoundaryKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETectonicBoundaryFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETectonicBoundaryFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORETectonicBoundaryFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORETectonicBoundaryFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORETectonicBoundaryFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORETectonicBoundaryFeature() : TectonicBoundaryKind() { }
        virtual ~resqml20__obj_USCORETectonicBoundaryFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORETectonicBoundaryFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORETectonicBoundaryFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORETectonicBoundaryFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:546 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation (-207)
/* complex XML schema type 'resqml20:obj_NonSealedSurfaceFrameworkRepresentation': */
class SOAP_CMAC resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation : public resqml20__AbstractSurfaceFrameworkRepresentation {
      public:
        /// Optional element 'resqml20:NonSealedContactRepresentation' of XML schema type 'resqml20:AbstractContactRepresentationPart'
        std::vector<resqml20__AbstractContactRepresentationPart *> NonSealedContactRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation() : NonSealedContactRepresentation() { }
        virtual ~resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:576 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation (-222)
/* complex XML schema type 'resqml20:obj_SealedSurfaceFrameworkRepresentation': */
class SOAP_CMAC resqml20__obj_USCORESealedSurfaceFrameworkRepresentation : public resqml20__AbstractSurfaceFrameworkRepresentation {
      public:
        /// Optional element 'resqml20:SealedContactRepresentation' of XML schema type 'resqml20:SealedContactRepresentationPart'
        std::vector<resqml20__SealedContactRepresentationPart *> SealedContactRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORESealedSurfaceFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORESealedSurfaceFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORESealedSurfaceFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORESealedSurfaceFrameworkRepresentation() : SealedContactRepresentation() { }
        virtual ~resqml20__obj_USCORESealedSurfaceFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORESealedSurfaceFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:604 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SeismicLatticeSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SeismicLatticeSetFeature (-236)
/* complex XML schema type 'resqml20:SeismicLatticeSetFeature': */
class SOAP_CMAC resqml20__SeismicLatticeSetFeature : public resqml20__AbstractSeismicSurveyFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SeismicLatticeSetFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SeismicLatticeSetFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__SeismicLatticeSetFeature, default initialized and not managed by a soap context
        virtual resqml20__SeismicLatticeSetFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__SeismicLatticeSetFeature); }
      public:
        /// Constructor with default initializations
        resqml20__SeismicLatticeSetFeature() { }
        virtual ~resqml20__SeismicLatticeSetFeature() { }
        /// Friend allocator used by soap_new_resqml20__SeismicLatticeSetFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__SeismicLatticeSetFeature * SOAP_FMAC2 soap_instantiate_resqml20__SeismicLatticeSetFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:606 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineSetFeature (-237)
/* complex XML schema type 'resqml20:obj_SeismicLineSetFeature': */
class SOAP_CMAC resqml20__obj_USCORESeismicLineSetFeature : public resqml20__AbstractSeismicSurveyFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineSetFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineSetFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORESeismicLineSetFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORESeismicLineSetFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORESeismicLineSetFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORESeismicLineSetFeature() { }
        virtual ~resqml20__obj_USCORESeismicLineSetFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORESeismicLineSetFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORESeismicLineSetFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORESeismicLineSetFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:610 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineFeature (-239)
/* complex XML schema type 'resqml20:obj_SeismicLineFeature': */
class SOAP_CMAC resqml20__obj_USCORESeismicLineFeature : public resqml20__AbstractSeismicSurveyFeature {
      public:
        /// Required element 'resqml20:FirstTraceIndex' of XML schema type 'xsd:integer'
        LONG64 FirstTraceIndex;
        /// Required element 'resqml20:TraceCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 TraceCount;
        /// Required element 'resqml20:TraceIndexIncrement' of XML schema type 'xsd:integer'
        LONG64 TraceIndexIncrement;
        /// Optional element 'resqml20:IsPartOf' of XML schema type 'eml20:DataObjectReference'
        eml20__DataObjectReference *IsPartOf;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORESeismicLineFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORESeismicLineFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORESeismicLineFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORESeismicLineFeature() : FirstTraceIndex(), TraceCount(), TraceIndexIncrement(), IsPartOf() { }
        virtual ~resqml20__obj_USCORESeismicLineFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORESeismicLineFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORESeismicLineFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORESeismicLineFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:612 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLatticeFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLatticeFeature (-240)
/* complex XML schema type 'resqml20:obj_SeismicLatticeFeature': */
class SOAP_CMAC resqml20__obj_USCORESeismicLatticeFeature : public resqml20__AbstractSeismicSurveyFeature {
      public:
        /// Required element 'resqml20:CrosslineCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 CrosslineCount;
        /// Required element 'resqml20:CrosslineIndexIncrement' of XML schema type 'xsd:integer'
        LONG64 CrosslineIndexIncrement;
        /// Required element 'resqml20:FirstCrosslineIndex' of XML schema type 'xsd:integer'
        LONG64 FirstCrosslineIndex;
        /// Required element 'resqml20:FirstInlineIndex' of XML schema type 'xsd:integer'
        LONG64 FirstInlineIndex;
        /// Required element 'resqml20:InlineCount' of XML schema type 'xsd:positiveInteger'
        ULONG64 InlineCount;
        /// Required element 'resqml20:InlineIndexIncrement' of XML schema type 'xsd:integer'
        LONG64 InlineIndexIncrement;
        /// Optional element 'resqml20:IsPartOf' of XML schema type 'resqml20:SeismicLatticeSetFeature'
        resqml20__SeismicLatticeSetFeature *IsPartOf;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLatticeFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLatticeFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORESeismicLatticeFeature, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORESeismicLatticeFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORESeismicLatticeFeature); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORESeismicLatticeFeature() : CrosslineCount(), CrosslineIndexIncrement(), FirstCrosslineIndex(), FirstInlineIndex(), InlineCount(), InlineIndexIncrement(), IsPartOf() { }
        virtual ~resqml20__obj_USCORESeismicLatticeFeature() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORESeismicLatticeFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORESeismicLatticeFeature * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORESeismicLatticeFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:654 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousPropertySeries (-261)
/* complex XML schema type 'resqml20:obj_ContinuousPropertySeries': */
class SOAP_CMAC resqml20__obj_USCOREContinuousPropertySeries : public resqml20__obj_USCOREContinuousProperty {
      public:
        /// Optional element 'resqml20:RealizationIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *RealizationIndices;
        /// Optional element 'resqml20:SeriesTimeIndices' of XML schema type 'resqml20:TimeIndices'
        resqml20__TimeIndices *SeriesTimeIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousPropertySeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousPropertySeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREContinuousPropertySeries, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREContinuousPropertySeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREContinuousPropertySeries); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREContinuousPropertySeries() : RealizationIndices(), SeriesTimeIndices() { }
        virtual ~resqml20__obj_USCOREContinuousPropertySeries() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREContinuousPropertySeries(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREContinuousPropertySeries * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREContinuousPropertySeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:656 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalPropertySeries (-262)
/* complex XML schema type 'resqml20:obj_CategoricalPropertySeries': */
class SOAP_CMAC resqml20__obj_USCORECategoricalPropertySeries : public resqml20__obj_USCORECategoricalProperty {
      public:
        /// Optional element 'resqml20:RealizationIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *RealizationIndices;
        /// Optional element 'resqml20:SeriesTimeIndices' of XML schema type 'resqml20:TimeIndices'
        resqml20__TimeIndices *SeriesTimeIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalPropertySeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalPropertySeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORECategoricalPropertySeries, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORECategoricalPropertySeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORECategoricalPropertySeries); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORECategoricalPropertySeries() : RealizationIndices(), SeriesTimeIndices() { }
        virtual ~resqml20__obj_USCORECategoricalPropertySeries() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORECategoricalPropertySeries(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORECategoricalPropertySeries * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORECategoricalPropertySeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:658 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentPropertySeries (-263)
/* complex XML schema type 'resqml20:obj_CommentPropertySeries': */
class SOAP_CMAC resqml20__obj_USCORECommentPropertySeries : public resqml20__obj_USCORECommentProperty {
      public:
        /// Optional element 'resqml20:RealizationIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *RealizationIndices;
        /// Optional element 'resqml20:SeriesTimeIndices' of XML schema type 'resqml20:TimeIndices'
        resqml20__TimeIndices *SeriesTimeIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentPropertySeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentPropertySeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCORECommentPropertySeries, default initialized and not managed by a soap context
        virtual resqml20__obj_USCORECommentPropertySeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCORECommentPropertySeries); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCORECommentPropertySeries() : RealizationIndices(), SeriesTimeIndices() { }
        virtual ~resqml20__obj_USCORECommentPropertySeries() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCORECommentPropertySeries(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCORECommentPropertySeries * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCORECommentPropertySeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:660 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscretePropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscretePropertySeries (-264)
/* complex XML schema type 'resqml20:obj_DiscretePropertySeries': */
class SOAP_CMAC resqml20__obj_USCOREDiscretePropertySeries : public resqml20__obj_USCOREDiscreteProperty {
      public:
        /// Optional element 'resqml20:RealizationIndices' of XML schema type 'resqml20:AbstractIntegerArray'
        resqml20__AbstractIntegerArray *RealizationIndices;
        /// Optional element 'resqml20:SeriesTimeIndices' of XML schema type 'resqml20:TimeIndices'
        resqml20__TimeIndices *SeriesTimeIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscretePropertySeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscretePropertySeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml20__obj_USCOREDiscretePropertySeries, default initialized and not managed by a soap context
        virtual resqml20__obj_USCOREDiscretePropertySeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml20__obj_USCOREDiscretePropertySeries); }
      public:
        /// Constructor with default initializations
        resqml20__obj_USCOREDiscretePropertySeries() : RealizationIndices(), SeriesTimeIndices() { }
        virtual ~resqml20__obj_USCOREDiscretePropertySeries() { }
        /// Friend allocator used by soap_new_resqml20__obj_USCOREDiscretePropertySeries(struct soap*, int)
        friend SOAP_FMAC1 resqml20__obj_USCOREDiscretePropertySeries * SOAP_FMAC2 soap_instantiate_resqml20__obj_USCOREDiscretePropertySeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* resqml2_0_1ForGsoap.h:30089 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Header (-1809547264)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* resqml2_0_1ForGsoap.h:30089 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Code (-1809547265)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* resqml2_0_1ForGsoap.h:30089 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Detail (-1809547267)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* resqml2_0_1ForGsoap.h:30089 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Reason (-1809547270)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* resqml2_0_1ForGsoap.h:30089 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Fault (-1809547271)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__XML
#define SOAP_TYPE_gsoap_resqml2_0_1__XML (-5)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__QName
#define SOAP_TYPE_gsoap_resqml2_0_1__QName (-6)

typedef char *_QName;
#endif

/* resqml2_0_1ForGsoap.h:147 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__integer
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__integer (-11)

typedef LONG64 xsd__integer;
#endif

/* resqml2_0_1ForGsoap.h:150 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__nonNegativeInteger
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__nonNegativeInteger (-13)

typedef ULONG64 xsd__nonNegativeInteger;
#endif

/* resqml2_0_1ForGsoap.h:153 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__positiveInteger
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__positiveInteger (-14)

typedef ULONG64 xsd__positiveInteger;
#endif

/* resqml2_0_1ForGsoap.h:156 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__anyURI
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__anyURI (-16)

typedef std::string xsd__anyURI;
#endif

/* resqml2_0_1ForGsoap.h:3886 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__UuidString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__UuidString (-499)

typedef std::string eml20__UuidString;
#endif

/* resqml2_0_1ForGsoap.h:3894 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__Measure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__Measure (-501)

typedef double eml20__Measure;
#endif

/* resqml2_0_1ForGsoap.h:3903 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__String
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__String (-502)

typedef std::string eml20__String;
#endif

/* resqml2_0_1ForGsoap.h:3928 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DescriptionString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DescriptionString (-503)

typedef std::string eml20__DescriptionString;
#endif

/* resqml2_0_1ForGsoap.h:3937 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TypeEnum
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TypeEnum (-504)

typedef std::string eml20__TypeEnum;
#endif

/* resqml2_0_1ForGsoap.h:3947 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__NameString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__NameString (-505)

typedef std::string eml20__NameString;
#endif

/* resqml2_0_1ForGsoap.h:3958 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__UidString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__UidString (-506)

typedef std::string eml20__UidString;
#endif

/* resqml2_0_1ForGsoap.h:3968 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MaximumLengthString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MaximumLengthString (-507)

typedef std::string eml20__MaximumLengthString;
#endif

/* resqml2_0_1ForGsoap.h:3978 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__UomEnum
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__UomEnum (-508)

typedef std::string eml20__UomEnum;
#endif

/* resqml2_0_1ForGsoap.h:4493 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CommentString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CommentString (-511)

typedef eml20__MaximumLengthString eml20__CommentString;
#endif

/* resqml2_0_1ForGsoap.h:28481 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Activity
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Activity (-899)

typedef resqml20__obj_USCOREActivity _resqml20__Activity;
#endif

/* resqml2_0_1ForGsoap.h:28484 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ActivityTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ActivityTemplate (-900)

typedef resqml20__obj_USCOREActivityTemplate _resqml20__ActivityTemplate;
#endif

/* resqml2_0_1ForGsoap.h:28487 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalPropertySeries (-901)

typedef resqml20__obj_USCORECategoricalPropertySeries _resqml20__CategoricalPropertySeries;
#endif

/* resqml2_0_1ForGsoap.h:28490 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentPropertySeries (-902)

typedef resqml20__obj_USCORECommentPropertySeries _resqml20__CommentPropertySeries;
#endif

/* resqml2_0_1ForGsoap.h:28493 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousPropertySeries (-903)

typedef resqml20__obj_USCOREContinuousPropertySeries _resqml20__ContinuousPropertySeries;
#endif

/* resqml2_0_1ForGsoap.h:28496 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscretePropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscretePropertySeries (-904)

typedef resqml20__obj_USCOREDiscretePropertySeries _resqml20__DiscretePropertySeries;
#endif

/* resqml2_0_1ForGsoap.h:28499 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesFeature (-905)

typedef resqml20__obj_USCOREStreamlinesFeature _resqml20__StreamlinesFeature;
#endif

/* resqml2_0_1ForGsoap.h:28502 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesRepresentation (-906)

typedef resqml20__obj_USCOREStreamlinesRepresentation _resqml20__StreamlinesRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28505 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalDepth3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalDepth3dCrs (-907)

typedef resqml20__obj_USCORELocalDepth3dCrs _resqml20__LocalDepth3dCrs;
#endif

/* resqml2_0_1ForGsoap.h:28508 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalTime3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalTime3dCrs (-908)

typedef resqml20__obj_USCORELocalTime3dCrs _resqml20__LocalTime3dCrs;
#endif

/* resqml2_0_1ForGsoap.h:28511 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TimeSeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TimeSeries (-909)

typedef resqml20__obj_USCORETimeSeries _resqml20__TimeSeries;
#endif

/* resqml2_0_1ForGsoap.h:28514 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FluidBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FluidBoundaryFeature (-910)

typedef resqml20__obj_USCOREFluidBoundaryFeature _resqml20__FluidBoundaryFeature;
#endif

/* resqml2_0_1ForGsoap.h:28517 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeneticBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeneticBoundaryFeature (-911)

typedef resqml20__obj_USCOREGeneticBoundaryFeature _resqml20__GeneticBoundaryFeature;
#endif

/* resqml2_0_1ForGsoap.h:28520 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyFeature (-912)

typedef resqml20__obj_USCOREGeobodyFeature _resqml20__GeobodyFeature;
#endif

/* resqml2_0_1ForGsoap.h:28523 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GlobalChronostratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GlobalChronostratigraphicColumn (-913)

typedef resqml20__obj_USCOREGlobalChronostratigraphicColumn _resqml20__GlobalChronostratigraphicColumn;
#endif

/* resqml2_0_1ForGsoap.h:28526 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitFeature (-914)

typedef resqml20__obj_USCORERockFluidUnitFeature _resqml20__RockFluidUnitFeature;
#endif

/* resqml2_0_1ForGsoap.h:28529 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitFeature (-915)

typedef resqml20__obj_USCOREStratigraphicUnitFeature _resqml20__StratigraphicUnitFeature;
#endif

/* resqml2_0_1ForGsoap.h:28532 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TectonicBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TectonicBoundaryFeature (-916)

typedef resqml20__obj_USCORETectonicBoundaryFeature _resqml20__TectonicBoundaryFeature;
#endif

/* resqml2_0_1ForGsoap.h:28535 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeature (-917)

typedef resqml20__obj_USCOREBoundaryFeature _resqml20__BoundaryFeature;
#endif

/* resqml2_0_1ForGsoap.h:28538 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitFeature (-918)

typedef resqml20__obj_USCOREGeologicUnitFeature _resqml20__GeologicUnitFeature;
#endif

/* resqml2_0_1ForGsoap.h:28541 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__OrganizationFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__OrganizationFeature (-919)

typedef resqml20__obj_USCOREOrganizationFeature _resqml20__OrganizationFeature;
#endif

/* resqml2_0_1ForGsoap.h:28544 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FrontierFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FrontierFeature (-920)

typedef resqml20__obj_USCOREFrontierFeature _resqml20__FrontierFeature;
#endif

/* resqml2_0_1ForGsoap.h:28547 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLatticeFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLatticeFeature (-921)

typedef resqml20__obj_USCORESeismicLatticeFeature _resqml20__SeismicLatticeFeature;
#endif

/* resqml2_0_1ForGsoap.h:28550 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineFeature (-922)

typedef resqml20__obj_USCORESeismicLineFeature _resqml20__SeismicLineFeature;
#endif

/* resqml2_0_1ForGsoap.h:28553 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineSetFeature (-923)

typedef resqml20__obj_USCORESeismicLineSetFeature _resqml20__SeismicLineSetFeature;
#endif

/* resqml2_0_1ForGsoap.h:28556 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFeature (-924)

typedef resqml20__obj_USCOREWellboreFeature _resqml20__WellboreFeature;
#endif

/* resqml2_0_1ForGsoap.h:28559 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeatureInterpretation (-925)

typedef resqml20__obj_USCOREBoundaryFeatureInterpretation _resqml20__BoundaryFeatureInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28562 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GenericFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GenericFeatureInterpretation (-926)

typedef resqml20__obj_USCOREGenericFeatureInterpretation _resqml20__GenericFeatureInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28565 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitInterpretation (-927)

typedef resqml20__obj_USCOREGeologicUnitInterpretation _resqml20__GeologicUnitInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28568 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumn (-928)

typedef resqml20__obj_USCOREStratigraphicColumn _resqml20__StratigraphicColumn;
#endif

/* resqml2_0_1ForGsoap.h:28571 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumnRankInterpretation (-929)

typedef resqml20__obj_USCOREStratigraphicColumnRankInterpretation _resqml20__StratigraphicColumnRankInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28574 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicOccurrenceInterpretation (-930)

typedef resqml20__obj_USCOREStratigraphicOccurrenceInterpretation _resqml20__StratigraphicOccurrenceInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28577 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StructuralOrganizationInterpretation (-931)

typedef resqml20__obj_USCOREStructuralOrganizationInterpretation _resqml20__StructuralOrganizationInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28580 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreInterpretation (-932)

typedef resqml20__obj_USCOREWellboreInterpretation _resqml20__WellboreInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28583 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__EarthModelInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__EarthModelInterpretation (-933)

typedef resqml20__obj_USCOREEarthModelInterpretation _resqml20__EarthModelInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28586 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FaultInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FaultInterpretation (-934)

typedef resqml20__obj_USCOREFaultInterpretation _resqml20__FaultInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28589 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyBoundaryInterpretation (-935)

typedef resqml20__obj_USCOREGeobodyBoundaryInterpretation _resqml20__GeobodyBoundaryInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28592 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyInterpretation (-936)

typedef resqml20__obj_USCOREGeobodyInterpretation _resqml20__GeobodyInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28595 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitInterpretation (-937)

typedef resqml20__obj_USCORERockFluidUnitInterpretation _resqml20__RockFluidUnitInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28598 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__HorizonInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__HorizonInterpretation (-938)

typedef resqml20__obj_USCOREHorizonInterpretation _resqml20__HorizonInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28601 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidOrganizationInterpretation (-939)

typedef resqml20__obj_USCORERockFluidOrganizationInterpretation _resqml20__RockFluidOrganizationInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28604 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitInterpretation (-940)

typedef resqml20__obj_USCOREStratigraphicUnitInterpretation _resqml20__StratigraphicUnitInterpretation;
#endif

/* resqml2_0_1ForGsoap.h:28607 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RedefinedGeometryRepresentation (-941)

typedef resqml20__obj_USCORERedefinedGeometryRepresentation _resqml20__RedefinedGeometryRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28610 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationIdentitySet
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationIdentitySet (-942)

typedef resqml20__obj_USCORERepresentationIdentitySet _resqml20__RepresentationIdentitySet;
#endif

/* resqml2_0_1ForGsoap.h:28613 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationSetRepresentation (-943)

typedef resqml20__obj_USCORERepresentationSetRepresentation _resqml20__RepresentationSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28616 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SubRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SubRepresentation (-944)

typedef resqml20__obj_USCORESubRepresentation _resqml20__SubRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28619 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GpGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GpGridRepresentation (-945)

typedef resqml20__obj_USCOREGpGridRepresentation _resqml20__GpGridRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28622 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GridConnectionSetRepresentation (-946)

typedef resqml20__obj_USCOREGridConnectionSetRepresentation _resqml20__GridConnectionSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28625 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__IjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__IjkGridRepresentation (-947)

typedef resqml20__obj_USCOREIjkGridRepresentation _resqml20__IjkGridRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28628 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalGridSet
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalGridSet (-948)

typedef resqml20__obj_USCORELocalGridSet _resqml20__LocalGridSet;
#endif

/* resqml2_0_1ForGsoap.h:28631 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedIjkGridRepresentation (-949)

typedef resqml20__obj_USCORETruncatedIjkGridRepresentation _resqml20__TruncatedIjkGridRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28634 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedUnstructuredColumnLayerGridRepresentation (-950)

typedef resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation _resqml20__TruncatedUnstructuredColumnLayerGridRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28637 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredColumnLayerGridRepresentation (-951)

typedef resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation _resqml20__UnstructuredColumnLayerGridRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28640 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredGridRepresentation (-952)

typedef resqml20__obj_USCOREUnstructuredGridRepresentation _resqml20__UnstructuredGridRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28643 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dRepresentation (-953)

typedef resqml20__obj_USCOREGrid2dRepresentation _resqml20__Grid2dRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28646 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dSetRepresentation (-954)

typedef resqml20__obj_USCOREGrid2dSetRepresentation _resqml20__Grid2dSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28649 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__NonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__NonSealedSurfaceFrameworkRepresentation (-955)

typedef resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation _resqml20__NonSealedSurfaceFrameworkRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28652 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PlaneSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PlaneSetRepresentation (-956)

typedef resqml20__obj_USCOREPlaneSetRepresentation _resqml20__PlaneSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28655 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointSetRepresentation (-957)

typedef resqml20__obj_USCOREPointSetRepresentation _resqml20__PointSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28658 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineRepresentation (-958)

typedef resqml20__obj_USCOREPolylineRepresentation _resqml20__PolylineRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28661 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineSetRepresentation (-959)

typedef resqml20__obj_USCOREPolylineSetRepresentation _resqml20__PolylineSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28664 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedSurfaceFrameworkRepresentation (-960)

typedef resqml20__obj_USCORESealedSurfaceFrameworkRepresentation _resqml20__SealedSurfaceFrameworkRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28667 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedVolumeFrameworkRepresentation (-961)

typedef resqml20__obj_USCORESealedVolumeFrameworkRepresentation _resqml20__SealedVolumeFrameworkRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28670 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TriangulatedSetRepresentation (-962)

typedef resqml20__obj_USCORETriangulatedSetRepresentation _resqml20__TriangulatedSetRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28673 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BlockedWellboreRepresentation (-963)

typedef resqml20__obj_USCOREBlockedWellboreRepresentation _resqml20__BlockedWellboreRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28676 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DeviationSurveyRepresentation (-964)

typedef resqml20__obj_USCOREDeviationSurveyRepresentation _resqml20__DeviationSurveyRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28679 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__MdDatum
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__MdDatum (-965)

typedef resqml20__obj_USCOREMdDatum _resqml20__MdDatum;
#endif

/* resqml2_0_1ForGsoap.h:28682 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFrameRepresentation (-966)

typedef resqml20__obj_USCOREWellboreFrameRepresentation _resqml20__WellboreFrameRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28685 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreMarkerFrameRepresentation (-967)

typedef resqml20__obj_USCOREWellboreMarkerFrameRepresentation _resqml20__WellboreMarkerFrameRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28688 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreTrajectoryRepresentation (-968)

typedef resqml20__obj_USCOREWellboreTrajectoryRepresentation _resqml20__WellboreTrajectoryRepresentation;
#endif

/* resqml2_0_1ForGsoap.h:28691 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalProperty (-969)

typedef resqml20__obj_USCORECategoricalProperty _resqml20__CategoricalProperty;
#endif

/* resqml2_0_1ForGsoap.h:28694 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentProperty (-970)

typedef resqml20__obj_USCORECommentProperty _resqml20__CommentProperty;
#endif

/* resqml2_0_1ForGsoap.h:28697 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousProperty (-971)

typedef resqml20__obj_USCOREContinuousProperty _resqml20__ContinuousProperty;
#endif

/* resqml2_0_1ForGsoap.h:28700 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscreteProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscreteProperty (-972)

typedef resqml20__obj_USCOREDiscreteProperty _resqml20__DiscreteProperty;
#endif

/* resqml2_0_1ForGsoap.h:28703 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DoubleTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DoubleTableLookup (-973)

typedef resqml20__obj_USCOREDoubleTableLookup _resqml20__DoubleTableLookup;
#endif

/* resqml2_0_1ForGsoap.h:28706 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointsProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointsProperty (-974)

typedef resqml20__obj_USCOREPointsProperty _resqml20__PointsProperty;
#endif

/* resqml2_0_1ForGsoap.h:28709 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertyKind (-975)

typedef resqml20__obj_USCOREPropertyKind _resqml20__PropertyKind;
#endif

/* resqml2_0_1ForGsoap.h:28712 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertySet
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertySet (-976)

typedef resqml20__obj_USCOREPropertySet _resqml20__PropertySet;
#endif

/* resqml2_0_1ForGsoap.h:28715 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StringTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StringTableLookup (-977)

typedef resqml20__obj_USCOREStringTableLookup _resqml20__StringTableLookup;
#endif

/* resqml2_0_1ForGsoap.h:28734 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__eml20__EpcExternalPartReference
#define SOAP_TYPE_gsoap_resqml2_0_1__eml20__EpcExternalPartReference (-978)

typedef eml20__obj_USCOREEpcExternalPartReference _eml20__EpcExternalPartReference;
#endif

/* resqml2_0_1ForGsoap.h:28741 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractDataObject
#define SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractDataObject (-979)

typedef eml20__AbstractObject _eml20__AbstractDataObject;
#endif

/* resqml2_0_1ForGsoap.h:28748 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractContextualObject
#define SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractContextualObject (-980)

typedef eml20__AbstractObject _eml20__AbstractContextualObject;
#endif

/* resqml2_0_1ForGsoap.h:28771 */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__ptm__standardEnergisticsPropertyTypeSet
#define SOAP_TYPE_gsoap_resqml2_0_1__ptm__standardEnergisticsPropertyTypeSet (-981)

typedef ptm__standardEnergisticsPropertyTypeSet _ptm__standardEnergisticsPropertyTypeSet;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_byte
#define SOAP_TYPE_gsoap_resqml2_0_1_byte (-3)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_int
#define SOAP_TYPE_gsoap_resqml2_0_1_int (-1)

#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__integer
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__integer (-11)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_LONG64
#define SOAP_TYPE_gsoap_resqml2_0_1_LONG64 (-10)

#endif

/* eml20__Measure has binding name 'eml20__Measure' for type 'eml20:Measure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__Measure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__Measure (-501)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_double
#define SOAP_TYPE_gsoap_resqml2_0_1_double (-500)

#endif

/* xsd__positiveInteger has binding name 'xsd__positiveInteger' for type 'xsd:positiveInteger' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__positiveInteger
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__positiveInteger (-14)

#endif

/* xsd__nonNegativeInteger has binding name 'xsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__nonNegativeInteger
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__nonNegativeInteger (-13)

#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ULONG64
#define SOAP_TYPE_gsoap_resqml2_0_1_ULONG64 (-12)

#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_bool
#define SOAP_TYPE_gsoap_resqml2_0_1_bool (-737)

#endif

/* eml20__DigitalStorageUom has binding name 'eml20__DigitalStorageUom' for type 'eml20:DigitalStorageUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageUom (-689)

#endif

/* eml20__MagneticDipoleMomentUom has binding name 'eml20__MagneticDipoleMomentUom' for type 'eml20:MagneticDipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentUom (-688)

#endif

/* eml20__EnergyPerAreaUom has binding name 'eml20__EnergyPerAreaUom' for type 'eml20:EnergyPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaUom (-687)

#endif

/* eml20__LightExposureUom has binding name 'eml20__LightExposureUom' for type 'eml20:LightExposureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureUom (-686)

#endif

/* eml20__ReciprocalPressureUom has binding name 'eml20__ReciprocalPressureUom' for type 'eml20:ReciprocalPressureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureUom (-685)

#endif

/* eml20__ForcePerLengthUom has binding name 'eml20__ForcePerLengthUom' for type 'eml20:ForcePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthUom (-684)

#endif

/* eml20__ElectricResistancePerLengthUom has binding name 'eml20__ElectricResistancePerLengthUom' for type 'eml20:ElectricResistancePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthUom (-683)

#endif

/* eml20__EnergyLengthPerAreaUom has binding name 'eml20__EnergyLengthPerAreaUom' for type 'eml20:EnergyLengthPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaUom (-682)

#endif

/* eml20__TimePerVolumeUom has binding name 'eml20__TimePerVolumeUom' for type 'eml20:TimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeUom (-681)

#endif

/* eml20__AngularVelocityUom has binding name 'eml20__AngularVelocityUom' for type 'eml20:AngularVelocityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityUom (-680)

#endif

/* eml20__AreaPerAreaUom has binding name 'eml20__AreaPerAreaUom' for type 'eml20:AreaPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaUom (-679)

#endif

/* eml20__PressureUom has binding name 'eml20__PressureUom' for type 'eml20:PressureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureUom (-678)

#endif

/* eml20__ReciprocalVolumeUom has binding name 'eml20__ReciprocalVolumeUom' for type 'eml20:ReciprocalVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeUom (-677)

#endif

/* eml20__ElectricResistanceUom has binding name 'eml20__ElectricResistanceUom' for type 'eml20:ElectricResistanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceUom (-676)

#endif

/* eml20__IsothermalCompressibilityUom has binding name 'eml20__IsothermalCompressibilityUom' for type 'eml20:IsothermalCompressibilityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityUom (-675)

#endif

/* eml20__AttenuationPerFrequencyIntervalUom has binding name 'eml20__AttenuationPerFrequencyIntervalUom' for type 'eml20:AttenuationPerFrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalUom (-674)

#endif

/* eml20__TemperatureIntervalPerLengthUom has binding name 'eml20__TemperatureIntervalPerLengthUom' for type 'eml20:TemperatureIntervalPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthUom (-673)

#endif

/* eml20__VolumePerMassUom has binding name 'eml20__VolumePerMassUom' for type 'eml20:VolumePerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassUom (-672)

#endif

/* eml20__EnergyPerMassPerTimeUom has binding name 'eml20__EnergyPerMassPerTimeUom' for type 'eml20:EnergyPerMassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeUom (-671)

#endif

/* eml20__TimePerTimeUom has binding name 'eml20__TimePerTimeUom' for type 'eml20:TimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeUom (-670)

#endif

/* eml20__DiffusionCoefficientUom has binding name 'eml20__DiffusionCoefficientUom' for type 'eml20:DiffusionCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientUom (-669)

#endif

/* eml20__AnglePerVolumeUom has binding name 'eml20__AnglePerVolumeUom' for type 'eml20:AnglePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeUom (-668)

#endif

/* eml20__VolumePerVolumeUom has binding name 'eml20__VolumePerVolumeUom' for type 'eml20:VolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeUom (-667)

#endif

/* eml20__PressureTimePerVolumeUom has binding name 'eml20__PressureTimePerVolumeUom' for type 'eml20:PressureTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeUom (-666)

#endif

/* eml20__EnergyLengthPerTimeAreaTemperatureUom has binding name 'eml20__EnergyLengthPerTimeAreaTemperatureUom' for type 'eml20:EnergyLengthPerTimeAreaTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureUom (-665)

#endif

/* eml20__NormalizedPowerUom has binding name 'eml20__NormalizedPowerUom' for type 'eml20:NormalizedPowerUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerUom (-664)

#endif

/* eml20__VolumetricHeatTransferCoefficientUom has binding name 'eml20__VolumetricHeatTransferCoefficientUom' for type 'eml20:VolumetricHeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientUom (-663)

#endif

/* eml20__TimePerMassUom has binding name 'eml20__TimePerMassUom' for type 'eml20:TimePerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassUom (-662)

#endif

/* eml20__AbsorbedDoseUom has binding name 'eml20__AbsorbedDoseUom' for type 'eml20:AbsorbedDoseUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseUom (-661)

#endif

/* eml20__LuminousIntensityUom has binding name 'eml20__LuminousIntensityUom' for type 'eml20:LuminousIntensityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityUom (-660)

#endif

/* eml20__FrequencyUom has binding name 'eml20__FrequencyUom' for type 'eml20:FrequencyUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyUom (-659)

#endif

/* eml20__PowerPerVolumeUom has binding name 'eml20__PowerPerVolumeUom' for type 'eml20:PowerPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeUom (-658)

#endif

/* eml20__MassPerTimePerAreaUom has binding name 'eml20__MassPerTimePerAreaUom' for type 'eml20:MassPerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaUom (-657)

#endif

/* eml20__MomentumUom has binding name 'eml20__MomentumUom' for type 'eml20:MomentumUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumUom (-656)

#endif

/* eml20__ElectricConductanceUom has binding name 'eml20__ElectricConductanceUom' for type 'eml20:ElectricConductanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceUom (-655)

#endif

/* eml20__MolarEnergyUom has binding name 'eml20__MolarEnergyUom' for type 'eml20:MolarEnergyUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyUom (-654)

#endif

/* eml20__HeatCapacityUom has binding name 'eml20__HeatCapacityUom' for type 'eml20:HeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityUom (-653)

#endif

/* eml20__AreaPerTimeUom has binding name 'eml20__AreaPerTimeUom' for type 'eml20:AreaPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeUom (-652)

#endif

/* eml20__PotentialDifferencePerPowerDropUom has binding name 'eml20__PotentialDifferencePerPowerDropUom' for type 'eml20:PotentialDifferencePerPowerDropUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropUom (-651)

#endif

/* eml20__DynamicViscosityUom has binding name 'eml20__DynamicViscosityUom' for type 'eml20:DynamicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityUom (-650)

#endif

/* eml20__ReciprocalMassUom has binding name 'eml20__ReciprocalMassUom' for type 'eml20:ReciprocalMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassUom (-649)

#endif

/* eml20__MagneticPermeabilityUom has binding name 'eml20__MagneticPermeabilityUom' for type 'eml20:MagneticPermeabilityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityUom (-648)

#endif

/* eml20__EnergyPerVolumeUom has binding name 'eml20__EnergyPerVolumeUom' for type 'eml20:EnergyPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeUom (-647)

#endif

/* eml20__VolumePerLengthUom has binding name 'eml20__VolumePerLengthUom' for type 'eml20:VolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthUom (-646)

#endif

/* eml20__VerticalCoordinateUom has binding name 'eml20__VerticalCoordinateUom' for type 'eml20:VerticalCoordinateUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCoordinateUom (-645)

#endif

/* eml20__AnglePerLengthUom has binding name 'eml20__AnglePerLengthUom' for type 'eml20:AnglePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthUom (-644)

#endif

/* eml20__EnergyUom has binding name 'eml20__EnergyUom' for type 'eml20:EnergyUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyUom (-643)

#endif

/* eml20__DimensionlessUom has binding name 'eml20__DimensionlessUom' for type 'eml20:DimensionlessUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessUom (-642)

#endif

/* eml20__LinearAccelerationUom has binding name 'eml20__LinearAccelerationUom' for type 'eml20:LinearAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationUom (-641)

#endif

/* eml20__VolumePerTimePerLengthUom has binding name 'eml20__VolumePerTimePerLengthUom' for type 'eml20:VolumePerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthUom (-640)

#endif

/* eml20__LengthPerTemperatureUom has binding name 'eml20__LengthPerTemperatureUom' for type 'eml20:LengthPerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureUom (-639)

#endif

/* eml20__ReluctanceUom has binding name 'eml20__ReluctanceUom' for type 'eml20:ReluctanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceUom (-638)

#endif

/* eml20__APIGravityUom has binding name 'eml20__APIGravityUom' for type 'eml20:APIGravityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityUom (-637)

#endif

/* eml20__ElectricChargePerVolumeUom has binding name 'eml20__ElectricChargePerVolumeUom' for type 'eml20:ElectricChargePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeUom (-636)

#endif

/* eml20__ForcePerVolumeUom has binding name 'eml20__ForcePerVolumeUom' for type 'eml20:ForcePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeUom (-635)

#endif

/* eml20__MassLengthUom has binding name 'eml20__MassLengthUom' for type 'eml20:MassLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthUom (-634)

#endif

/* eml20__MassPerVolumePerLengthUom has binding name 'eml20__MassPerVolumePerLengthUom' for type 'eml20:MassPerVolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthUom (-633)

#endif

/* eml20__ElectricChargePerMassUom has binding name 'eml20__ElectricChargePerMassUom' for type 'eml20:ElectricChargePerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassUom (-632)

#endif

/* eml20__PowerPerPowerUom has binding name 'eml20__PowerPerPowerUom' for type 'eml20:PowerPerPowerUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerUom (-631)

#endif

/* eml20__DoseEquivalentUom has binding name 'eml20__DoseEquivalentUom' for type 'eml20:DoseEquivalentUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentUom (-630)

#endif

/* eml20__HeatFlowRateUom has binding name 'eml20__HeatFlowRateUom' for type 'eml20:HeatFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateUom (-629)

#endif

/* eml20__RadianceUom has binding name 'eml20__RadianceUom' for type 'eml20:RadianceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceUom (-628)

#endif

/* eml20__AmountOfSubstancePerAmountOfSubstanceUom has binding name 'eml20__AmountOfSubstancePerAmountOfSubstanceUom' for type 'eml20:AmountOfSubstancePerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceUom (-627)

#endif

/* eml20__TemperatureIntervalPerTimeUom has binding name 'eml20__TemperatureIntervalPerTimeUom' for type 'eml20:TemperatureIntervalPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeUom (-626)

#endif

/* eml20__AreaPerVolumeUom has binding name 'eml20__AreaPerVolumeUom' for type 'eml20:AreaPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeUom (-625)

#endif

/* eml20__IlluminanceUom has binding name 'eml20__IlluminanceUom' for type 'eml20:IlluminanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceUom (-624)

#endif

/* eml20__MassPerAreaUom has binding name 'eml20__MassPerAreaUom' for type 'eml20:MassPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaUom (-623)

#endif

/* eml20__PowerPerAreaUom has binding name 'eml20__PowerPerAreaUom' for type 'eml20:PowerPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaUom (-622)

#endif

/* eml20__ThermalInsulanceUom has binding name 'eml20__ThermalInsulanceUom' for type 'eml20:ThermalInsulanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceUom (-621)

#endif

/* eml20__ElectromagneticMomentUom has binding name 'eml20__ElectromagneticMomentUom' for type 'eml20:ElectromagneticMomentUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentUom (-620)

#endif

/* eml20__PermittivityUom has binding name 'eml20__PermittivityUom' for type 'eml20:PermittivityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityUom (-619)

#endif

/* eml20__EnergyPerMassUom has binding name 'eml20__EnergyPerMassUom' for type 'eml20:EnergyPerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassUom (-618)

#endif

/* eml20__AmountOfSubstancePerVolumeUom has binding name 'eml20__AmountOfSubstancePerVolumeUom' for type 'eml20:AmountOfSubstancePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeUom (-617)

#endif

/* eml20__VolumePerTimePerPressureUom has binding name 'eml20__VolumePerTimePerPressureUom' for type 'eml20:VolumePerTimePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureUom (-616)

#endif

/* eml20__LuminousFluxUom has binding name 'eml20__LuminousFluxUom' for type 'eml20:LuminousFluxUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxUom (-615)

#endif

/* eml20__PressureSquaredPerForceTimePerAreaUom has binding name 'eml20__PressureSquaredPerForceTimePerAreaUom' for type 'eml20:PressureSquaredPerForceTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaUom (-614)

#endif

/* eml20__MassPerMassUom has binding name 'eml20__MassPerMassUom' for type 'eml20:MassPerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassUom (-613)

#endif

/* eml20__ElectricalResistivityUom has binding name 'eml20__ElectricalResistivityUom' for type 'eml20:ElectricalResistivityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityUom (-612)

#endif

/* eml20__MassPerLengthUom has binding name 'eml20__MassPerLengthUom' for type 'eml20:MassPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthUom (-611)

#endif

/* eml20__LinearThermalExpansionUom has binding name 'eml20__LinearThermalExpansionUom' for type 'eml20:LinearThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionUom (-610)

#endif

/* eml20__ThermodynamicTemperatureUom has binding name 'eml20__ThermodynamicTemperatureUom' for type 'eml20:ThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureUom (-609)

#endif

/* eml20__AmountOfSubstancePerTimePerAreaUom has binding name 'eml20__AmountOfSubstancePerTimePerAreaUom' for type 'eml20:AmountOfSubstancePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaUom (-608)

#endif

/* eml20__LengthPerMassUom has binding name 'eml20__LengthPerMassUom' for type 'eml20:LengthPerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassUom (-607)

#endif

/* eml20__SpecificHeatCapacityUom has binding name 'eml20__SpecificHeatCapacityUom' for type 'eml20:SpecificHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityUom (-606)

#endif

/* eml20__MassUom has binding name 'eml20__MassUom' for type 'eml20:MassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassUom (-605)

#endif

/* eml20__ForcePerForceUom has binding name 'eml20__ForcePerForceUom' for type 'eml20:ForcePerForceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceUom (-604)

#endif

/* eml20__ThermalResistanceUom has binding name 'eml20__ThermalResistanceUom' for type 'eml20:ThermalResistanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceUom (-603)

#endif

/* eml20__AreaPerMassUom has binding name 'eml20__AreaPerMassUom' for type 'eml20:AreaPerMassUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassUom (-602)

#endif

/* eml20__LengthUom has binding name 'eml20__LengthUom' for type 'eml20:LengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthUom (-601)

#endif

/* eml20__VolumePerTimeUom has binding name 'eml20__VolumePerTimeUom' for type 'eml20:VolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeUom (-600)

#endif

/* eml20__MagneticFieldStrengthUom has binding name 'eml20__MagneticFieldStrengthUom' for type 'eml20:MagneticFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthUom (-599)

#endif

/* eml20__MagneticVectorPotentialUom has binding name 'eml20__MagneticVectorPotentialUom' for type 'eml20:MagneticVectorPotentialUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialUom (-598)

#endif

/* eml20__LengthPerPressureUom has binding name 'eml20__LengthPerPressureUom' for type 'eml20:LengthPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureUom (-597)

#endif

/* eml20__ElectricPotentialDifferenceUom has binding name 'eml20__ElectricPotentialDifferenceUom' for type 'eml20:ElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceUom (-596)

#endif

/* eml20__ActivityOfRadioactivityUom has binding name 'eml20__ActivityOfRadioactivityUom' for type 'eml20:ActivityOfRadioactivityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityUom (-595)

#endif

/* eml20__PressurePerVolumeUom has binding name 'eml20__PressurePerVolumeUom' for type 'eml20:PressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeUom (-594)

#endif

/* eml20__PowerUom has binding name 'eml20__PowerUom' for type 'eml20:PowerUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerUom (-593)

#endif

/* eml20__LuminousEfficacyUom has binding name 'eml20__LuminousEfficacyUom' for type 'eml20:LuminousEfficacyUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyUom (-592)

#endif

/* eml20__ElectricChargeUom has binding name 'eml20__ElectricChargeUom' for type 'eml20:ElectricChargeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeUom (-591)

#endif

/* eml20__PressurePerTimeUom has binding name 'eml20__PressurePerTimeUom' for type 'eml20:PressurePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeUom (-590)

#endif

/* eml20__ReciprocalAreaUom has binding name 'eml20__ReciprocalAreaUom' for type 'eml20:ReciprocalAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaUom (-589)

#endif

/* eml20__ReciprocalForceUom has binding name 'eml20__ReciprocalForceUom' for type 'eml20:ReciprocalForceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceUom (-588)

#endif

/* eml20__VolumePerTimePerPressureLengthUom has binding name 'eml20__VolumePerTimePerPressureLengthUom' for type 'eml20:VolumePerTimePerPressureLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthUom (-587)

#endif

/* eml20__KinematicViscosityUom has binding name 'eml20__KinematicViscosityUom' for type 'eml20:KinematicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityUom (-586)

#endif

/* eml20__InductanceUom has binding name 'eml20__InductanceUom' for type 'eml20:InductanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceUom (-585)

#endif

/* eml20__DataTransferSpeedUom has binding name 'eml20__DataTransferSpeedUom' for type 'eml20:DataTransferSpeedUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedUom (-584)

#endif

/* eml20__PermeabilityLengthUom has binding name 'eml20__PermeabilityLengthUom' for type 'eml20:PermeabilityLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthUom (-583)

#endif

/* eml20__RadiantIntensityUom has binding name 'eml20__RadiantIntensityUom' for type 'eml20:RadiantIntensityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityUom (-582)

#endif

/* eml20__TemperatureIntervalUom has binding name 'eml20__TemperatureIntervalUom' for type 'eml20:TemperatureIntervalUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalUom (-581)

#endif

/* eml20__FrequencyIntervalUom has binding name 'eml20__FrequencyIntervalUom' for type 'eml20:FrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalUom (-580)

#endif

/* eml20__VolumeFlowRatePerVolumeFlowRateUom has binding name 'eml20__VolumeFlowRatePerVolumeFlowRateUom' for type 'eml20:VolumeFlowRatePerVolumeFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateUom (-579)

#endif

/* eml20__MolarHeatCapacityUom has binding name 'eml20__MolarHeatCapacityUom' for type 'eml20:MolarHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityUom (-578)

#endif

/* eml20__VolumePerTimePerTimeUom has binding name 'eml20__VolumePerTimePerTimeUom' for type 'eml20:VolumePerTimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeUom (-577)

#endif

/* eml20__LuminanceUom has binding name 'eml20__LuminanceUom' for type 'eml20:LuminanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceUom (-576)

#endif

/* eml20__ReciprocalLengthUom has binding name 'eml20__ReciprocalLengthUom' for type 'eml20:ReciprocalLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthUom (-575)

#endif

/* eml20__LogarithmicPowerRatioPerLengthUom has binding name 'eml20__LogarithmicPowerRatioPerLengthUom' for type 'eml20:LogarithmicPowerRatioPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthUom (-574)

#endif

/* eml20__AreaPerAmountOfSubstanceUom has binding name 'eml20__AreaPerAmountOfSubstanceUom' for type 'eml20:AreaPerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceUom (-573)

#endif

/* eml20__ThermalConductivityUom has binding name 'eml20__ThermalConductivityUom' for type 'eml20:ThermalConductivityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityUom (-572)

#endif

/* eml20__TimeUom has binding name 'eml20__TimeUom' for type 'eml20:TimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeUom (-571)

#endif

/* eml20__AmountOfSubstancePerAreaUom has binding name 'eml20__AmountOfSubstancePerAreaUom' for type 'eml20:AmountOfSubstancePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaUom (-570)

#endif

/* eml20__ElectricFieldStrengthUom has binding name 'eml20__ElectricFieldStrengthUom' for type 'eml20:ElectricFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthUom (-569)

#endif

/* eml20__ForceAreaUom has binding name 'eml20__ForceAreaUom' for type 'eml20:ForceAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaUom (-568)

#endif

/* eml20__SecondMomentOfAreaUom has binding name 'eml20__SecondMomentOfAreaUom' for type 'eml20:SecondMomentOfAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaUom (-567)

#endif

/* eml20__PermeabilityRockUom has binding name 'eml20__PermeabilityRockUom' for type 'eml20:PermeabilityRockUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockUom (-566)

#endif

/* eml20__VolumePerTimeLengthUom has binding name 'eml20__VolumePerTimeLengthUom' for type 'eml20:VolumePerTimeLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthUom (-565)

#endif

/* eml20__ThermalDiffusivityUom has binding name 'eml20__ThermalDiffusivityUom' for type 'eml20:ThermalDiffusivityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityUom (-564)

#endif

/* eml20__ReciprocalMassTimeUom has binding name 'eml20__ReciprocalMassTimeUom' for type 'eml20:ReciprocalMassTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeUom (-563)

#endif

/* eml20__AngularAccelerationUom has binding name 'eml20__AngularAccelerationUom' for type 'eml20:AngularAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationUom (-562)

#endif

/* eml20__PressureSquaredUom has binding name 'eml20__PressureSquaredUom' for type 'eml20:PressureSquaredUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredUom (-561)

#endif

/* eml20__ElectricCurrentUom has binding name 'eml20__ElectricCurrentUom' for type 'eml20:ElectricCurrentUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentUom (-560)

#endif

/* eml20__EnergyPerLengthUom has binding name 'eml20__EnergyPerLengthUom' for type 'eml20:EnergyPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthUom (-559)

#endif

/* eml20__SignalingEventPerTimeUom has binding name 'eml20__SignalingEventPerTimeUom' for type 'eml20:SignalingEventPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeUom (-558)

#endif

/* eml20__PlaneAngleUom has binding name 'eml20__PlaneAngleUom' for type 'eml20:PlaneAngleUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleUom (-557)

#endif

/* eml20__MagneticFluxDensityUom has binding name 'eml20__MagneticFluxDensityUom' for type 'eml20:MagneticFluxDensityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityUom (-556)

#endif

/* eml20__MassPerTimePerLengthUom has binding name 'eml20__MassPerTimePerLengthUom' for type 'eml20:MassPerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthUom (-555)

#endif

/* eml20__ElectricChargePerAreaUom has binding name 'eml20__ElectricChargePerAreaUom' for type 'eml20:ElectricChargePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaUom (-554)

#endif

/* eml20__VolumePerPressureUom has binding name 'eml20__VolumePerPressureUom' for type 'eml20:VolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureUom (-553)

#endif

/* eml20__TimePerLengthUom has binding name 'eml20__TimePerLengthUom' for type 'eml20:TimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthUom (-552)

#endif

/* eml20__ReciprocalElectricPotentialDifferenceUom has binding name 'eml20__ReciprocalElectricPotentialDifferenceUom' for type 'eml20:ReciprocalElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceUom (-551)

#endif

/* eml20__VolumePerAreaUom has binding name 'eml20__VolumePerAreaUom' for type 'eml20:VolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaUom (-550)

#endif

/* eml20__ForceUom has binding name 'eml20__ForceUom' for type 'eml20:ForceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceUom (-549)

#endif

/* eml20__ElectricCurrentDensityUom has binding name 'eml20__ElectricCurrentDensityUom' for type 'eml20:ElectricCurrentDensityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityUom (-548)

#endif

/* eml20__VolumetricThermalExpansionUom has binding name 'eml20__VolumetricThermalExpansionUom' for type 'eml20:VolumetricThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionUom (-547)

#endif

/* eml20__APIGammaRayUom has binding name 'eml20__APIGammaRayUom' for type 'eml20:APIGammaRayUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayUom (-546)

#endif

/* eml20__AreaUom has binding name 'eml20__AreaUom' for type 'eml20:AreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaUom (-545)

#endif

/* eml20__LengthPerLengthUom has binding name 'eml20__LengthPerLengthUom' for type 'eml20:LengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthUom (-544)

#endif

/* eml20__TemperatureIntervalPerPressureUom has binding name 'eml20__TemperatureIntervalPerPressureUom' for type 'eml20:TemperatureIntervalPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureUom (-543)

#endif

/* eml20__ReciprocalTimeUom has binding name 'eml20__ReciprocalTimeUom' for type 'eml20:ReciprocalTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeUom (-542)

#endif

/* eml20__APINeutronUom has binding name 'eml20__APINeutronUom' for type 'eml20:APINeutronUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronUom (-541)

#endif

/* eml20__DipoleMomentUom has binding name 'eml20__DipoleMomentUom' for type 'eml20:DipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentUom (-540)

#endif

/* eml20__AmountOfSubstanceUom has binding name 'eml20__AmountOfSubstanceUom' for type 'eml20:AmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceUom (-539)

#endif

/* eml20__MolarVolumeUom has binding name 'eml20__MolarVolumeUom' for type 'eml20:MolarVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeUom (-538)

#endif

/* eml20__MassPerVolumeUom has binding name 'eml20__MassPerVolumeUom' for type 'eml20:MassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeUom (-537)

#endif

/* eml20__MomentOfForceUom has binding name 'eml20__MomentOfForceUom' for type 'eml20:MomentOfForceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceUom (-536)

#endif

/* eml20__VolumePerTimePerVolumeUom has binding name 'eml20__VolumePerTimePerVolumeUom' for type 'eml20:VolumePerTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeUom (-535)

#endif

/* eml20__SolidAngleUom has binding name 'eml20__SolidAngleUom' for type 'eml20:SolidAngleUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleUom (-534)

#endif

/* eml20__ForceLengthPerLengthUom has binding name 'eml20__ForceLengthPerLengthUom' for type 'eml20:ForceLengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthUom (-533)

#endif

/* eml20__LengthPerTimeUom has binding name 'eml20__LengthPerTimeUom' for type 'eml20:LengthPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeUom (-532)

#endif

/* eml20__QuantityOfLightUom has binding name 'eml20__QuantityOfLightUom' for type 'eml20:QuantityOfLightUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightUom (-531)

#endif

/* eml20__ThermalConductanceUom has binding name 'eml20__ThermalConductanceUom' for type 'eml20:ThermalConductanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceUom (-530)

#endif

/* eml20__VolumeUom has binding name 'eml20__VolumeUom' for type 'eml20:VolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeUom (-529)

#endif

/* eml20__MagneticFluxUom has binding name 'eml20__MagneticFluxUom' for type 'eml20:MagneticFluxUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxUom (-528)

#endif

/* eml20__MolecularWeightUom has binding name 'eml20__MolecularWeightUom' for type 'eml20:MolecularWeightUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightUom (-527)

#endif

/* eml20__MassPerTimeUom has binding name 'eml20__MassPerTimeUom' for type 'eml20:MassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeUom (-526)

#endif

/* eml20__LengthPerVolumeUom has binding name 'eml20__LengthPerVolumeUom' for type 'eml20:LengthPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeUom (-525)

#endif

/* eml20__MagneticFluxDensityPerLengthUom has binding name 'eml20__MagneticFluxDensityPerLengthUom' for type 'eml20:MagneticFluxDensityPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthUom (-524)

#endif

/* eml20__CapacitanceUom has binding name 'eml20__CapacitanceUom' for type 'eml20:CapacitanceUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceUom (-523)

#endif

/* eml20__MomentOfInertiaUom has binding name 'eml20__MomentOfInertiaUom' for type 'eml20:MomentOfInertiaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaUom (-522)

#endif

/* eml20__MassPerEnergyUom has binding name 'eml20__MassPerEnergyUom' for type 'eml20:MassPerEnergyUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyUom (-521)

#endif

/* eml20__HeatTransferCoefficientUom has binding name 'eml20__HeatTransferCoefficientUom' for type 'eml20:HeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientUom (-520)

#endif

/* eml20__MobilityUom has binding name 'eml20__MobilityUom' for type 'eml20:MobilityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityUom (-519)

#endif

/* eml20__VolumePerTimePerAreaUom has binding name 'eml20__VolumePerTimePerAreaUom' for type 'eml20:VolumePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaUom (-518)

#endif

/* eml20__VolumePerRotationUom has binding name 'eml20__VolumePerRotationUom' for type 'eml20:VolumePerRotationUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationUom (-517)

#endif

/* eml20__ElectricConductivityUom has binding name 'eml20__ElectricConductivityUom' for type 'eml20:ElectricConductivityUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityUom (-516)

#endif

/* eml20__AmountOfSubstancePerTimeUom has binding name 'eml20__AmountOfSubstancePerTimeUom' for type 'eml20:AmountOfSubstancePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeUom (-515)

#endif

/* eml20__LogarithmicPowerRatioUom has binding name 'eml20__LogarithmicPowerRatioUom' for type 'eml20:LogarithmicPowerRatioUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioUom (-514)

#endif

/* eml20__VerticalDirection has binding name 'eml20__VerticalDirection' for type 'eml20:VerticalDirection' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalDirection
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalDirection (-513)

#endif

/* eml20__AxisOrder2d has binding name 'eml20__AxisOrder2d' for type 'eml20:AxisOrder2d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AxisOrder2d
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AxisOrder2d (-512)

#endif

/* resqml20__OrganizationKind has binding name 'resqml20__OrganizationKind' for type 'resqml20:OrganizationKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrganizationKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrganizationKind (-510)

#endif

/* resqml20__ResqmlPropertyKind has binding name 'resqml20__ResqmlPropertyKind' for type 'resqml20:ResqmlPropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlPropertyKind (-509)

#endif

/* resqml20__StreamlineFlux has binding name 'resqml20__StreamlineFlux' for type 'resqml20:StreamlineFlux' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineFlux
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineFlux (-498)

#endif

/* resqml20__ParameterKind has binding name 'resqml20__ParameterKind' for type 'resqml20:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterKind (-497)

#endif

/* resqml20__LineRole has binding name 'resqml20__LineRole' for type 'resqml20:LineRole' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LineRole
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LineRole (-496)

#endif

/* resqml20__SurfaceRole has binding name 'resqml20__SurfaceRole' for type 'resqml20:SurfaceRole' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SurfaceRole
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SurfaceRole (-495)

#endif

/* resqml20__FluidMarker has binding name 'resqml20__FluidMarker' for type 'resqml20:FluidMarker' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidMarker (-494)

#endif

/* resqml20__MdReference has binding name 'resqml20__MdReference' for type 'resqml20:MdReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdReference (-493)

#endif

/* resqml20__MdDomain has binding name 'resqml20__MdDomain' for type 'resqml20:MdDomain' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdDomain
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MdDomain (-492)

#endif

/* resqml20__WellboreFrameIndexableElements has binding name 'resqml20__WellboreFrameIndexableElements' for type 'resqml20:WellboreFrameIndexableElements' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreFrameIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreFrameIndexableElements (-491)

#endif

/* resqml20__GeologicBoundaryKind has binding name 'resqml20__GeologicBoundaryKind' for type 'resqml20:GeologicBoundaryKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicBoundaryKind (-490)

#endif

/* resqml20__TectonicBoundaryKind has binding name 'resqml20__TectonicBoundaryKind' for type 'resqml20:TectonicBoundaryKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TectonicBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TectonicBoundaryKind (-489)

#endif

/* resqml20__FluidContact has binding name 'resqml20__FluidContact' for type 'resqml20:FluidContact' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidContact
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FluidContact (-488)

#endif

/* resqml20__GeneticBoundaryKind has binding name 'resqml20__GeneticBoundaryKind' for type 'resqml20:GeneticBoundaryKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeneticBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeneticBoundaryKind (-487)

#endif

/* resqml20__Phase has binding name 'resqml20__Phase' for type 'resqml20:Phase' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Phase
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Phase (-486)

#endif

/* resqml20__GeologicUnitMaterialImplacement has binding name 'resqml20__GeologicUnitMaterialImplacement' for type 'resqml20:GeologicUnitMaterialImplacement' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitMaterialImplacement
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitMaterialImplacement (-485)

#endif

/* resqml20__ContactSide has binding name 'resqml20__ContactSide' for type 'resqml20:ContactSide' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactSide
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactSide (-484)

#endif

/* resqml20__ContactVerb has binding name 'resqml20__ContactVerb' for type 'resqml20:ContactVerb' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactVerb
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactVerb (-483)

#endif

/* resqml20__Geobody3dShape has binding name 'resqml20__Geobody3dShape' for type 'resqml20:Geobody3dShape' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Geobody3dShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Geobody3dShape (-482)

#endif

/* resqml20__OrderingCriteria has binding name 'resqml20__OrderingCriteria' for type 'resqml20:OrderingCriteria' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrderingCriteria
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrderingCriteria (-481)

#endif

/* resqml20__ContactMode has binding name 'resqml20__ContactMode' for type 'resqml20:ContactMode' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactMode
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactMode (-480)

#endif

/* resqml20__BoundaryRelation has binding name 'resqml20__BoundaryRelation' for type 'resqml20:BoundaryRelation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BoundaryRelation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BoundaryRelation (-479)

#endif

/* resqml20__Domain has binding name 'resqml20__Domain' for type 'resqml20:Domain' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Domain
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Domain (-478)

#endif

/* resqml20__GeologicUnitComposition has binding name 'resqml20__GeologicUnitComposition' for type 'resqml20:GeologicUnitComposition' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitComposition
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitComposition (-477)

#endif

/* resqml20__DepositionMode has binding name 'resqml20__DepositionMode' for type 'resqml20:DepositionMode' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DepositionMode
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DepositionMode (-476)

#endif

/* resqml20__ContactRelationship has binding name 'resqml20__ContactRelationship' for type 'resqml20:ContactRelationship' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRelationship
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRelationship (-475)

#endif

/* resqml20__SequenceStratigraphySurface has binding name 'resqml20__SequenceStratigraphySurface' for type 'resqml20:SequenceStratigraphySurface' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SequenceStratigraphySurface
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SequenceStratigraphySurface (-474)

#endif

/* resqml20__ThrowKind has binding name 'resqml20__ThrowKind' for type 'resqml20:ThrowKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThrowKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThrowKind (-473)

#endif

/* resqml20__PillarShape has binding name 'resqml20__PillarShape' for type 'resqml20:PillarShape' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PillarShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PillarShape (-472)

#endif

/* resqml20__UnstructuredCellIndexableElements has binding name 'resqml20__UnstructuredCellIndexableElements' for type 'resqml20:UnstructuredCellIndexableElements' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredCellIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredCellIndexableElements (-471)

#endif

/* resqml20__CellShape has binding name 'resqml20__CellShape' for type 'resqml20:CellShape' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellShape (-470)

#endif

/* resqml20__GridGeometryAttachment has binding name 'resqml20__GridGeometryAttachment' for type 'resqml20:GridGeometryAttachment' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GridGeometryAttachment
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GridGeometryAttachment (-469)

#endif

/* resqml20__IjkIndexableElements has binding name 'resqml20__IjkIndexableElements' for type 'resqml20:IjkIndexableElements' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkIndexableElements (-468)

#endif

/* resqml20__KDirection has binding name 'resqml20__KDirection' for type 'resqml20:KDirection' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KDirection
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KDirection (-467)

#endif

/* resqml20__ColumnShape has binding name 'resqml20__ColumnShape' for type 'resqml20:ColumnShape' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnShape
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnShape (-466)

#endif

/* resqml20__SubnodeNodeObject has binding name 'resqml20__SubnodeNodeObject' for type 'resqml20:SubnodeNodeObject' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeNodeObject
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeNodeObject (-465)

#endif

/* resqml20__UnstructuredColumnLayerIndexableElements has binding name 'resqml20__UnstructuredColumnLayerIndexableElements' for type 'resqml20:UnstructuredColumnLayerIndexableElements' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerIndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerIndexableElements (-464)

#endif

/* resqml20__IndexableElements has binding name 'resqml20__IndexableElements' for type 'resqml20:IndexableElements' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IndexableElements
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IndexableElements (-463)

#endif

/* resqml20__IdentityKind has binding name 'resqml20__IdentityKind' for type 'resqml20:IdentityKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IdentityKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IdentityKind (-462)

#endif

/* resqml20__ResqmlUom has binding name 'resqml20__ResqmlUom' for type 'resqml20:ResqmlUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlUom
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlUom (-461)

#endif

/* resqml20__Facet has binding name 'resqml20__Facet' for type 'resqml20:Facet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Facet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Facet (-460)

#endif

/* resqml20__TimeSetKind has binding name 'resqml20__TimeSetKind' for type 'resqml20:TimeSetKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSetKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSetKind (-459)

#endif

/* _ptm__standardEnergisticsPropertyTypeSet has binding name '_ptm__standardEnergisticsPropertyTypeSet' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__ptm__standardEnergisticsPropertyTypeSet
#define SOAP_TYPE_gsoap_resqml2_0_1__ptm__standardEnergisticsPropertyTypeSet (-981)

#endif

/* _eml20__AbstractContextualObject has binding name '_eml20__AbstractContextualObject' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractContextualObject
#define SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractContextualObject (-980)

#endif

/* _eml20__AbstractDataObject has binding name '_eml20__AbstractDataObject' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractDataObject
#define SOAP_TYPE_gsoap_resqml2_0_1__eml20__AbstractDataObject (-979)

#endif

/* _eml20__EpcExternalPartReference has binding name '_eml20__EpcExternalPartReference' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__eml20__EpcExternalPartReference
#define SOAP_TYPE_gsoap_resqml2_0_1__eml20__EpcExternalPartReference (-978)

#endif

/* _resqml20__StringTableLookup has binding name '_resqml20__StringTableLookup' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StringTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StringTableLookup (-977)

#endif

/* _resqml20__PropertySet has binding name '_resqml20__PropertySet' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertySet
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertySet (-976)

#endif

/* _resqml20__PropertyKind has binding name '_resqml20__PropertyKind' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PropertyKind (-975)

#endif

/* _resqml20__PointsProperty has binding name '_resqml20__PointsProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointsProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointsProperty (-974)

#endif

/* _resqml20__DoubleTableLookup has binding name '_resqml20__DoubleTableLookup' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DoubleTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DoubleTableLookup (-973)

#endif

/* _resqml20__DiscreteProperty has binding name '_resqml20__DiscreteProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscreteProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscreteProperty (-972)

#endif

/* _resqml20__ContinuousProperty has binding name '_resqml20__ContinuousProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousProperty (-971)

#endif

/* _resqml20__CommentProperty has binding name '_resqml20__CommentProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentProperty (-970)

#endif

/* _resqml20__CategoricalProperty has binding name '_resqml20__CategoricalProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalProperty
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalProperty (-969)

#endif

/* _resqml20__WellboreTrajectoryRepresentation has binding name '_resqml20__WellboreTrajectoryRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreTrajectoryRepresentation (-968)

#endif

/* _resqml20__WellboreMarkerFrameRepresentation has binding name '_resqml20__WellboreMarkerFrameRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreMarkerFrameRepresentation (-967)

#endif

/* _resqml20__WellboreFrameRepresentation has binding name '_resqml20__WellboreFrameRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFrameRepresentation (-966)

#endif

/* _resqml20__MdDatum has binding name '_resqml20__MdDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__MdDatum
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__MdDatum (-965)

#endif

/* _resqml20__DeviationSurveyRepresentation has binding name '_resqml20__DeviationSurveyRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DeviationSurveyRepresentation (-964)

#endif

/* _resqml20__BlockedWellboreRepresentation has binding name '_resqml20__BlockedWellboreRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BlockedWellboreRepresentation (-963)

#endif

/* _resqml20__TriangulatedSetRepresentation has binding name '_resqml20__TriangulatedSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TriangulatedSetRepresentation (-962)

#endif

/* _resqml20__SealedVolumeFrameworkRepresentation has binding name '_resqml20__SealedVolumeFrameworkRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedVolumeFrameworkRepresentation (-961)

#endif

/* _resqml20__SealedSurfaceFrameworkRepresentation has binding name '_resqml20__SealedSurfaceFrameworkRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SealedSurfaceFrameworkRepresentation (-960)

#endif

/* _resqml20__PolylineSetRepresentation has binding name '_resqml20__PolylineSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineSetRepresentation (-959)

#endif

/* _resqml20__PolylineRepresentation has binding name '_resqml20__PolylineRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PolylineRepresentation (-958)

#endif

/* _resqml20__PointSetRepresentation has binding name '_resqml20__PointSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PointSetRepresentation (-957)

#endif

/* _resqml20__PlaneSetRepresentation has binding name '_resqml20__PlaneSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PlaneSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__PlaneSetRepresentation (-956)

#endif

/* _resqml20__NonSealedSurfaceFrameworkRepresentation has binding name '_resqml20__NonSealedSurfaceFrameworkRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__NonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__NonSealedSurfaceFrameworkRepresentation (-955)

#endif

/* _resqml20__Grid2dSetRepresentation has binding name '_resqml20__Grid2dSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dSetRepresentation (-954)

#endif

/* _resqml20__Grid2dRepresentation has binding name '_resqml20__Grid2dRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Grid2dRepresentation (-953)

#endif

/* _resqml20__UnstructuredGridRepresentation has binding name '_resqml20__UnstructuredGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredGridRepresentation (-952)

#endif

/* _resqml20__UnstructuredColumnLayerGridRepresentation has binding name '_resqml20__UnstructuredColumnLayerGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__UnstructuredColumnLayerGridRepresentation (-951)

#endif

/* _resqml20__TruncatedUnstructuredColumnLayerGridRepresentation has binding name '_resqml20__TruncatedUnstructuredColumnLayerGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedUnstructuredColumnLayerGridRepresentation (-950)

#endif

/* _resqml20__TruncatedIjkGridRepresentation has binding name '_resqml20__TruncatedIjkGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TruncatedIjkGridRepresentation (-949)

#endif

/* _resqml20__LocalGridSet has binding name '_resqml20__LocalGridSet' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalGridSet
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalGridSet (-948)

#endif

/* _resqml20__IjkGridRepresentation has binding name '_resqml20__IjkGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__IjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__IjkGridRepresentation (-947)

#endif

/* _resqml20__GridConnectionSetRepresentation has binding name '_resqml20__GridConnectionSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GridConnectionSetRepresentation (-946)

#endif

/* _resqml20__GpGridRepresentation has binding name '_resqml20__GpGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GpGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GpGridRepresentation (-945)

#endif

/* _resqml20__SubRepresentation has binding name '_resqml20__SubRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SubRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SubRepresentation (-944)

#endif

/* _resqml20__RepresentationSetRepresentation has binding name '_resqml20__RepresentationSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationSetRepresentation (-943)

#endif

/* _resqml20__RepresentationIdentitySet has binding name '_resqml20__RepresentationIdentitySet' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationIdentitySet
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RepresentationIdentitySet (-942)

#endif

/* _resqml20__RedefinedGeometryRepresentation has binding name '_resqml20__RedefinedGeometryRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RedefinedGeometryRepresentation (-941)

#endif

/* _resqml20__StratigraphicUnitInterpretation has binding name '_resqml20__StratigraphicUnitInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitInterpretation (-940)

#endif

/* _resqml20__RockFluidOrganizationInterpretation has binding name '_resqml20__RockFluidOrganizationInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidOrganizationInterpretation (-939)

#endif

/* _resqml20__HorizonInterpretation has binding name '_resqml20__HorizonInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__HorizonInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__HorizonInterpretation (-938)

#endif

/* _resqml20__RockFluidUnitInterpretation has binding name '_resqml20__RockFluidUnitInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitInterpretation (-937)

#endif

/* _resqml20__GeobodyInterpretation has binding name '_resqml20__GeobodyInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyInterpretation (-936)

#endif

/* _resqml20__GeobodyBoundaryInterpretation has binding name '_resqml20__GeobodyBoundaryInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyBoundaryInterpretation (-935)

#endif

/* _resqml20__FaultInterpretation has binding name '_resqml20__FaultInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FaultInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FaultInterpretation (-934)

#endif

/* _resqml20__EarthModelInterpretation has binding name '_resqml20__EarthModelInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__EarthModelInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__EarthModelInterpretation (-933)

#endif

/* _resqml20__WellboreInterpretation has binding name '_resqml20__WellboreInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreInterpretation (-932)

#endif

/* _resqml20__StructuralOrganizationInterpretation has binding name '_resqml20__StructuralOrganizationInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StructuralOrganizationInterpretation (-931)

#endif

/* _resqml20__StratigraphicOccurrenceInterpretation has binding name '_resqml20__StratigraphicOccurrenceInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicOccurrenceInterpretation (-930)

#endif

/* _resqml20__StratigraphicColumnRankInterpretation has binding name '_resqml20__StratigraphicColumnRankInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumnRankInterpretation (-929)

#endif

/* _resqml20__StratigraphicColumn has binding name '_resqml20__StratigraphicColumn' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicColumn (-928)

#endif

/* _resqml20__GeologicUnitInterpretation has binding name '_resqml20__GeologicUnitInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitInterpretation (-927)

#endif

/* _resqml20__GenericFeatureInterpretation has binding name '_resqml20__GenericFeatureInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GenericFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GenericFeatureInterpretation (-926)

#endif

/* _resqml20__BoundaryFeatureInterpretation has binding name '_resqml20__BoundaryFeatureInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeatureInterpretation (-925)

#endif

/* _resqml20__WellboreFeature has binding name '_resqml20__WellboreFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__WellboreFeature (-924)

#endif

/* _resqml20__SeismicLineSetFeature has binding name '_resqml20__SeismicLineSetFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineSetFeature (-923)

#endif

/* _resqml20__SeismicLineFeature has binding name '_resqml20__SeismicLineFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLineFeature (-922)

#endif

/* _resqml20__SeismicLatticeFeature has binding name '_resqml20__SeismicLatticeFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLatticeFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__SeismicLatticeFeature (-921)

#endif

/* _resqml20__FrontierFeature has binding name '_resqml20__FrontierFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FrontierFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FrontierFeature (-920)

#endif

/* _resqml20__OrganizationFeature has binding name '_resqml20__OrganizationFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__OrganizationFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__OrganizationFeature (-919)

#endif

/* _resqml20__GeologicUnitFeature has binding name '_resqml20__GeologicUnitFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeologicUnitFeature (-918)

#endif

/* _resqml20__BoundaryFeature has binding name '_resqml20__BoundaryFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__BoundaryFeature (-917)

#endif

/* _resqml20__TectonicBoundaryFeature has binding name '_resqml20__TectonicBoundaryFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TectonicBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TectonicBoundaryFeature (-916)

#endif

/* _resqml20__StratigraphicUnitFeature has binding name '_resqml20__StratigraphicUnitFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StratigraphicUnitFeature (-915)

#endif

/* _resqml20__RockFluidUnitFeature has binding name '_resqml20__RockFluidUnitFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__RockFluidUnitFeature (-914)

#endif

/* _resqml20__GlobalChronostratigraphicColumn has binding name '_resqml20__GlobalChronostratigraphicColumn' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GlobalChronostratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GlobalChronostratigraphicColumn (-913)

#endif

/* _resqml20__GeobodyFeature has binding name '_resqml20__GeobodyFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeobodyFeature (-912)

#endif

/* _resqml20__GeneticBoundaryFeature has binding name '_resqml20__GeneticBoundaryFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeneticBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__GeneticBoundaryFeature (-911)

#endif

/* _resqml20__FluidBoundaryFeature has binding name '_resqml20__FluidBoundaryFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FluidBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__FluidBoundaryFeature (-910)

#endif

/* _resqml20__TimeSeries has binding name '_resqml20__TimeSeries' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TimeSeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__TimeSeries (-909)

#endif

/* _resqml20__LocalTime3dCrs has binding name '_resqml20__LocalTime3dCrs' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalTime3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalTime3dCrs (-908)

#endif

/* _resqml20__LocalDepth3dCrs has binding name '_resqml20__LocalDepth3dCrs' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalDepth3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__LocalDepth3dCrs (-907)

#endif

/* _resqml20__StreamlinesRepresentation has binding name '_resqml20__StreamlinesRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesRepresentation (-906)

#endif

/* _resqml20__StreamlinesFeature has binding name '_resqml20__StreamlinesFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesFeature
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__StreamlinesFeature (-905)

#endif

/* _resqml20__DiscretePropertySeries has binding name '_resqml20__DiscretePropertySeries' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscretePropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__DiscretePropertySeries (-904)

#endif

/* _resqml20__ContinuousPropertySeries has binding name '_resqml20__ContinuousPropertySeries' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ContinuousPropertySeries (-903)

#endif

/* _resqml20__CommentPropertySeries has binding name '_resqml20__CommentPropertySeries' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CommentPropertySeries (-902)

#endif

/* _resqml20__CategoricalPropertySeries has binding name '_resqml20__CategoricalPropertySeries' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__CategoricalPropertySeries (-901)

#endif

/* _resqml20__ActivityTemplate has binding name '_resqml20__ActivityTemplate' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ActivityTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__ActivityTemplate (-900)

#endif

/* _resqml20__Activity has binding name '_resqml20__Activity' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Activity
#define SOAP_TYPE_gsoap_resqml2_0_1__resqml20__Activity (-899)

#endif

/* eml20__CommentString has binding name 'eml20__CommentString' for type 'eml20:CommentString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CommentString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CommentString (-511)

#endif

/* eml20__UomEnum has binding name 'eml20__UomEnum' for type 'eml20:UomEnum' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__UomEnum
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__UomEnum (-508)

#endif

/* eml20__MaximumLengthString has binding name 'eml20__MaximumLengthString' for type 'eml20:MaximumLengthString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MaximumLengthString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MaximumLengthString (-507)

#endif

/* eml20__UidString has binding name 'eml20__UidString' for type 'eml20:UidString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__UidString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__UidString (-506)

#endif

/* eml20__NameString has binding name 'eml20__NameString' for type 'eml20:NameString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__NameString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__NameString (-505)

#endif

/* eml20__TypeEnum has binding name 'eml20__TypeEnum' for type 'eml20:TypeEnum' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TypeEnum
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TypeEnum (-504)

#endif

/* eml20__DescriptionString has binding name 'eml20__DescriptionString' for type 'eml20:DescriptionString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DescriptionString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DescriptionString (-503)

#endif

/* eml20__String has binding name 'eml20__String' for type 'eml20:String' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__String
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__String (-502)

#endif

/* eml20__UuidString has binding name 'eml20__UuidString' for type 'eml20:UuidString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__UuidString
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__UuidString (-499)

#endif

/* ptm__equivalentPropertyType has binding name 'ptm__equivalentPropertyType' for type 'ptm:equivalentPropertyType' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ptm__equivalentPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_ptm__equivalentPropertyType (-458)

#endif

/* ptm__standardEnergisticsPropertyType has binding name 'ptm__standardEnergisticsPropertyType' for type 'ptm:standardEnergisticsPropertyType' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyType (-457)

#endif

/* ptm__standardEnergisticsPropertyTypeSet has binding name 'ptm__standardEnergisticsPropertyTypeSet' for type 'ptm:standardEnergisticsPropertyTypeSet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyTypeSet
#define SOAP_TYPE_gsoap_resqml2_0_1_ptm__standardEnergisticsPropertyTypeSet (-456)

#endif

/* eml20__MobilityMeasure has binding name 'eml20__MobilityMeasure' for type 'eml20:MobilityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MobilityMeasure (-455)

#endif

/* eml20__LengthPerMassMeasure has binding name 'eml20__LengthPerMassMeasure' for type 'eml20:LengthPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerMassMeasure (-454)

#endif

/* eml20__AreaMeasure has binding name 'eml20__AreaMeasure' for type 'eml20:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaMeasure (-453)

#endif

/* eml20__VolumePerVolumeMeasure has binding name 'eml20__VolumePerVolumeMeasure' for type 'eml20:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerVolumeMeasure (-452)

#endif

/* eml20__ElectricResistanceMeasure has binding name 'eml20__ElectricResistanceMeasure' for type 'eml20:ElectricResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistanceMeasure (-451)

#endif

/* eml20__AreaPerVolumeMeasure has binding name 'eml20__AreaPerVolumeMeasure' for type 'eml20:AreaPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerVolumeMeasure (-450)

#endif

/* eml20__TimePerTimeMeasure has binding name 'eml20__TimePerTimeMeasure' for type 'eml20:TimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerTimeMeasure (-449)

#endif

/* eml20__AmountOfSubstancePerVolumeMeasure has binding name 'eml20__AmountOfSubstancePerVolumeMeasure' for type 'eml20:AmountOfSubstancePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerVolumeMeasure (-448)

#endif

/* eml20__MassPerAreaMeasure has binding name 'eml20__MassPerAreaMeasure' for type 'eml20:MassPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerAreaMeasure (-447)

#endif

/* eml20__VolumePerPressureMeasure has binding name 'eml20__VolumePerPressureMeasure' for type 'eml20:VolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerPressureMeasure (-446)

#endif

/* eml20__MassPerTimePerAreaMeasure has binding name 'eml20__MassPerTimePerAreaMeasure' for type 'eml20:MassPerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerAreaMeasure (-445)

#endif

/* eml20__DoseEquivalentMeasure has binding name 'eml20__DoseEquivalentMeasure' for type 'eml20:DoseEquivalentMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DoseEquivalentMeasure (-444)

#endif

/* eml20__PermeabilityRockMeasure has binding name 'eml20__PermeabilityRockMeasure' for type 'eml20:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityRockMeasure (-443)

#endif

/* eml20__MagneticFieldStrengthMeasure has binding name 'eml20__MagneticFieldStrengthMeasure' for type 'eml20:MagneticFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFieldStrengthMeasure (-442)

#endif

/* eml20__VolumePerTimePerPressureLengthMeasure has binding name 'eml20__VolumePerTimePerPressureLengthMeasure' for type 'eml20:VolumePerTimePerPressureLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureLengthMeasure (-441)

#endif

/* eml20__PressureMeasure has binding name 'eml20__PressureMeasure' for type 'eml20:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureMeasure (-440)

#endif

/* eml20__MagneticFluxDensityPerLengthMeasure has binding name 'eml20__MagneticFluxDensityPerLengthMeasure' for type 'eml20:MagneticFluxDensityPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityPerLengthMeasure (-439)

#endif

/* eml20__PowerPerAreaMeasure has binding name 'eml20__PowerPerAreaMeasure' for type 'eml20:PowerPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerAreaMeasure (-438)

#endif

/* eml20__ElectricFieldStrengthMeasure has binding name 'eml20__ElectricFieldStrengthMeasure' for type 'eml20:ElectricFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricFieldStrengthMeasure (-437)

#endif

/* eml20__AmountOfSubstancePerAmountOfSubstanceMeasure has binding name 'eml20__AmountOfSubstancePerAmountOfSubstanceMeasure' for type 'eml20:AmountOfSubstancePerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAmountOfSubstanceMeasure (-436)

#endif

/* eml20__ElectricConductivityMeasure has binding name 'eml20__ElectricConductivityMeasure' for type 'eml20:ElectricConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductivityMeasure (-435)

#endif

/* eml20__AngularVelocityMeasure has binding name 'eml20__AngularVelocityMeasure' for type 'eml20:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularVelocityMeasure (-434)

#endif

/* eml20__EnergyPerMassMeasure has binding name 'eml20__EnergyPerMassMeasure' for type 'eml20:EnergyPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassMeasure (-433)

#endif

/* eml20__EnergyLengthPerAreaMeasure has binding name 'eml20__EnergyLengthPerAreaMeasure' for type 'eml20:EnergyLengthPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerAreaMeasure (-432)

#endif

/* eml20__PlaneAngleMeasure has binding name 'eml20__PlaneAngleMeasure' for type 'eml20:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PlaneAngleMeasure (-431)

#endif

/* eml20__ReciprocalForceMeasure has binding name 'eml20__ReciprocalForceMeasure' for type 'eml20:ReciprocalForceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalForceMeasure (-430)

#endif

/* eml20__ReciprocalMassMeasure has binding name 'eml20__ReciprocalMassMeasure' for type 'eml20:ReciprocalMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassMeasure (-429)

#endif

/* eml20__AngularAccelerationMeasure has binding name 'eml20__AngularAccelerationMeasure' for type 'eml20:AngularAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AngularAccelerationMeasure (-428)

#endif

/* eml20__LogarithmicPowerRatioMeasure has binding name 'eml20__LogarithmicPowerRatioMeasure' for type 'eml20:LogarithmicPowerRatioMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioMeasure (-427)

#endif

/* eml20__NormalizedPowerMeasure has binding name 'eml20__NormalizedPowerMeasure' for type 'eml20:NormalizedPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__NormalizedPowerMeasure (-426)

#endif

/* eml20__MassMeasure has binding name 'eml20__MassMeasure' for type 'eml20:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassMeasure (-425)

#endif

/* eml20__ThermalConductivityMeasure has binding name 'eml20__ThermalConductivityMeasure' for type 'eml20:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductivityMeasure (-424)

#endif

/* eml20__LengthPerPressureMeasure has binding name 'eml20__LengthPerPressureMeasure' for type 'eml20:LengthPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerPressureMeasure (-423)

#endif

/* eml20__AnglePerVolumeMeasure has binding name 'eml20__AnglePerVolumeMeasure' for type 'eml20:AnglePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerVolumeMeasure (-422)

#endif

/* eml20__PressureSquaredPerForceTimePerAreaMeasure has binding name 'eml20__PressureSquaredPerForceTimePerAreaMeasure' for type 'eml20:PressureSquaredPerForceTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredPerForceTimePerAreaMeasure (-421)

#endif

/* eml20__VolumePerTimeLengthMeasure has binding name 'eml20__VolumePerTimeLengthMeasure' for type 'eml20:VolumePerTimeLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeLengthMeasure (-420)

#endif

/* eml20__LengthPerTemperatureMeasure has binding name 'eml20__LengthPerTemperatureMeasure' for type 'eml20:LengthPerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTemperatureMeasure (-419)

#endif

/* eml20__AmountOfSubstancePerTimeMeasure has binding name 'eml20__AmountOfSubstancePerTimeMeasure' for type 'eml20:AmountOfSubstancePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimeMeasure (-418)

#endif

/* eml20__ForcePerLengthMeasure has binding name 'eml20__ForcePerLengthMeasure' for type 'eml20:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerLengthMeasure (-417)

#endif

/* eml20__PressurePerTimeMeasure has binding name 'eml20__PressurePerTimeMeasure' for type 'eml20:PressurePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerTimeMeasure (-416)

#endif

/* eml20__MassPerVolumePerLengthMeasure has binding name 'eml20__MassPerVolumePerLengthMeasure' for type 'eml20:MassPerVolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumePerLengthMeasure (-415)

#endif

/* eml20__IsothermalCompressibilityMeasure has binding name 'eml20__IsothermalCompressibilityMeasure' for type 'eml20:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IsothermalCompressibilityMeasure (-414)

#endif

/* eml20__ElectricPotentialDifferenceMeasure has binding name 'eml20__ElectricPotentialDifferenceMeasure' for type 'eml20:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricPotentialDifferenceMeasure (-413)

#endif

/* eml20__DiffusionCoefficientMeasure has binding name 'eml20__DiffusionCoefficientMeasure' for type 'eml20:DiffusionCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DiffusionCoefficientMeasure (-412)

#endif

/* eml20__APIGammaRayMeasure has binding name 'eml20__APIGammaRayMeasure' for type 'eml20:APIGammaRayMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGammaRayMeasure (-411)

#endif

/* eml20__ElectricChargePerMassMeasure has binding name 'eml20__ElectricChargePerMassMeasure' for type 'eml20:ElectricChargePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerMassMeasure (-410)

#endif

/* eml20__ReciprocalElectricPotentialDifferenceMeasure has binding name 'eml20__ReciprocalElectricPotentialDifferenceMeasure' for type 'eml20:ReciprocalElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalElectricPotentialDifferenceMeasure (-409)

#endif

/* eml20__DynamicViscosityMeasure has binding name 'eml20__DynamicViscosityMeasure' for type 'eml20:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DynamicViscosityMeasure (-408)

#endif

/* eml20__ReciprocalLengthMeasure has binding name 'eml20__ReciprocalLengthMeasure' for type 'eml20:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalLengthMeasure (-407)

#endif

/* eml20__TimePerMassMeasure has binding name 'eml20__TimePerMassMeasure' for type 'eml20:TimePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerMassMeasure (-406)

#endif

/* eml20__PressurePerVolumeMeasure has binding name 'eml20__PressurePerVolumeMeasure' for type 'eml20:PressurePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressurePerVolumeMeasure (-405)

#endif

/* eml20__VolumetricHeatTransferCoefficientMeasure has binding name 'eml20__VolumetricHeatTransferCoefficientMeasure' for type 'eml20:VolumetricHeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricHeatTransferCoefficientMeasure (-404)

#endif

/* eml20__ElectricChargePerVolumeMeasure has binding name 'eml20__ElectricChargePerVolumeMeasure' for type 'eml20:ElectricChargePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerVolumeMeasure (-403)

#endif

/* eml20__EnergyPerVolumeMeasure has binding name 'eml20__EnergyPerVolumeMeasure' for type 'eml20:EnergyPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerVolumeMeasure (-402)

#endif

/* eml20__ElectromagneticMomentMeasure has binding name 'eml20__ElectromagneticMomentMeasure' for type 'eml20:ElectromagneticMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectromagneticMomentMeasure (-401)

#endif

/* eml20__TimePerVolumeMeasure has binding name 'eml20__TimePerVolumeMeasure' for type 'eml20:TimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerVolumeMeasure (-400)

#endif

/* eml20__InductanceMeasure has binding name 'eml20__InductanceMeasure' for type 'eml20:InductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__InductanceMeasure (-399)

#endif

/* eml20__KinematicViscosityMeasure has binding name 'eml20__KinematicViscosityMeasure' for type 'eml20:KinematicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__KinematicViscosityMeasure (-398)

#endif

/* eml20__ReciprocalAreaMeasure has binding name 'eml20__ReciprocalAreaMeasure' for type 'eml20:ReciprocalAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalAreaMeasure (-397)

#endif

/* eml20__MassLengthMeasure has binding name 'eml20__MassLengthMeasure' for type 'eml20:MassLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassLengthMeasure (-396)

#endif

/* eml20__ElectricalResistivityMeasure has binding name 'eml20__ElectricalResistivityMeasure' for type 'eml20:ElectricalResistivityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricalResistivityMeasure (-395)

#endif

/* eml20__CapacitanceMeasure has binding name 'eml20__CapacitanceMeasure' for type 'eml20:CapacitanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CapacitanceMeasure (-394)

#endif

/* eml20__FrequencyIntervalMeasure has binding name 'eml20__FrequencyIntervalMeasure' for type 'eml20:FrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyIntervalMeasure (-393)

#endif

/* eml20__FrequencyMeasure has binding name 'eml20__FrequencyMeasure' for type 'eml20:FrequencyMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__FrequencyMeasure (-392)

#endif

/* eml20__SignalingEventPerTimeMeasure has binding name 'eml20__SignalingEventPerTimeMeasure' for type 'eml20:SignalingEventPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SignalingEventPerTimeMeasure (-391)

#endif

/* eml20__ActivityOfRadioactivityMeasure has binding name 'eml20__ActivityOfRadioactivityMeasure' for type 'eml20:ActivityOfRadioactivityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ActivityOfRadioactivityMeasure (-390)

#endif

/* eml20__MolecularWeightMeasure has binding name 'eml20__MolecularWeightMeasure' for type 'eml20:MolecularWeightMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolecularWeightMeasure (-389)

#endif

/* eml20__MassPerTimePerLengthMeasure has binding name 'eml20__MassPerTimePerLengthMeasure' for type 'eml20:MassPerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimePerLengthMeasure (-388)

#endif

/* eml20__MomentOfInertiaMeasure has binding name 'eml20__MomentOfInertiaMeasure' for type 'eml20:MomentOfInertiaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfInertiaMeasure (-387)

#endif

/* eml20__PotentialDifferencePerPowerDropMeasure has binding name 'eml20__PotentialDifferencePerPowerDropMeasure' for type 'eml20:PotentialDifferencePerPowerDropMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PotentialDifferencePerPowerDropMeasure (-386)

#endif

/* eml20__SpecificHeatCapacityMeasure has binding name 'eml20__SpecificHeatCapacityMeasure' for type 'eml20:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SpecificHeatCapacityMeasure (-385)

#endif

/* eml20__ReciprocalTimeMeasure has binding name 'eml20__ReciprocalTimeMeasure' for type 'eml20:ReciprocalTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalTimeMeasure (-384)

#endif

/* eml20__LogarithmicPowerRatioPerLengthMeasure has binding name 'eml20__LogarithmicPowerRatioPerLengthMeasure' for type 'eml20:LogarithmicPowerRatioPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LogarithmicPowerRatioPerLengthMeasure (-383)

#endif

/* eml20__ThermalDiffusivityMeasure has binding name 'eml20__ThermalDiffusivityMeasure' for type 'eml20:ThermalDiffusivityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalDiffusivityMeasure (-382)

#endif

/* eml20__PowerPerVolumeMeasure has binding name 'eml20__PowerPerVolumeMeasure' for type 'eml20:PowerPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerVolumeMeasure (-381)

#endif

/* eml20__MomentumMeasure has binding name 'eml20__MomentumMeasure' for type 'eml20:MomentumMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentumMeasure (-380)

#endif

/* eml20__VolumeFlowRatePerVolumeFlowRateMeasure has binding name 'eml20__VolumeFlowRatePerVolumeFlowRateMeasure' for type 'eml20:VolumeFlowRatePerVolumeFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeFlowRatePerVolumeFlowRateMeasure (-379)

#endif

/* eml20__AreaPerTimeMeasure has binding name 'eml20__AreaPerTimeMeasure' for type 'eml20:AreaPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerTimeMeasure (-378)

#endif

/* eml20__LuminousEfficacyMeasure has binding name 'eml20__LuminousEfficacyMeasure' for type 'eml20:LuminousEfficacyMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousEfficacyMeasure (-377)

#endif

/* eml20__QuantityOfLightMeasure has binding name 'eml20__QuantityOfLightMeasure' for type 'eml20:QuantityOfLightMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__QuantityOfLightMeasure (-376)

#endif

/* eml20__VolumePerAreaMeasure has binding name 'eml20__VolumePerAreaMeasure' for type 'eml20:VolumePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerAreaMeasure (-375)

#endif

/* eml20__MagneticFluxDensityMeasure has binding name 'eml20__MagneticFluxDensityMeasure' for type 'eml20:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxDensityMeasure (-374)

#endif

/* eml20__SecondMomentOfAreaMeasure has binding name 'eml20__SecondMomentOfAreaMeasure' for type 'eml20:SecondMomentOfAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SecondMomentOfAreaMeasure (-373)

#endif

/* eml20__LengthPerVolumeMeasure has binding name 'eml20__LengthPerVolumeMeasure' for type 'eml20:LengthPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerVolumeMeasure (-372)

#endif

/* eml20__MolarEnergyMeasure has binding name 'eml20__MolarEnergyMeasure' for type 'eml20:MolarEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarEnergyMeasure (-371)

#endif

/* eml20__LuminousIntensityMeasure has binding name 'eml20__LuminousIntensityMeasure' for type 'eml20:LuminousIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousIntensityMeasure (-370)

#endif

/* eml20__ElectricChargeMeasure has binding name 'eml20__ElectricChargeMeasure' for type 'eml20:ElectricChargeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargeMeasure (-369)

#endif

/* eml20__DigitalStorageMeasure has binding name 'eml20__DigitalStorageMeasure' for type 'eml20:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DigitalStorageMeasure (-368)

#endif

/* eml20__MolarHeatCapacityMeasure has binding name 'eml20__MolarHeatCapacityMeasure' for type 'eml20:MolarHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarHeatCapacityMeasure (-367)

#endif

/* eml20__ForcePerVolumeMeasure has binding name 'eml20__ForcePerVolumeMeasure' for type 'eml20:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerVolumeMeasure (-366)

#endif

/* eml20__LuminanceMeasure has binding name 'eml20__LuminanceMeasure' for type 'eml20:LuminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminanceMeasure (-365)

#endif

/* eml20__MomentOfForceMeasure has binding name 'eml20__MomentOfForceMeasure' for type 'eml20:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MomentOfForceMeasure (-364)

#endif

/* eml20__TimeMeasure has binding name 'eml20__TimeMeasure' for type 'eml20:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimeMeasure (-363)

#endif

/* eml20__VolumePerTimePerPressureMeasure has binding name 'eml20__VolumePerTimePerPressureMeasure' for type 'eml20:VolumePerTimePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerPressureMeasure (-362)

#endif

/* eml20__VolumePerTimePerVolumeMeasure has binding name 'eml20__VolumePerTimePerVolumeMeasure' for type 'eml20:VolumePerTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerVolumeMeasure (-361)

#endif

/* eml20__VolumeMeasure has binding name 'eml20__VolumeMeasure' for type 'eml20:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumeMeasure (-360)

#endif

/* eml20__VolumePerLengthMeasure has binding name 'eml20__VolumePerLengthMeasure' for type 'eml20:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerLengthMeasure (-359)

#endif

/* eml20__APIGravityMeasure has binding name 'eml20__APIGravityMeasure' for type 'eml20:APIGravityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APIGravityMeasure (-358)

#endif

/* eml20__MagneticPermeabilityMeasure has binding name 'eml20__MagneticPermeabilityMeasure' for type 'eml20:MagneticPermeabilityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticPermeabilityMeasure (-357)

#endif

/* eml20__MassPerEnergyMeasure has binding name 'eml20__MassPerEnergyMeasure' for type 'eml20:MassPerEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerEnergyMeasure (-356)

#endif

/* eml20__MagneticDipoleMomentMeasure has binding name 'eml20__MagneticDipoleMomentMeasure' for type 'eml20:MagneticDipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticDipoleMomentMeasure (-355)

#endif

/* eml20__DataTransferSpeedMeasure has binding name 'eml20__DataTransferSpeedMeasure' for type 'eml20:DataTransferSpeedMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataTransferSpeedMeasure (-354)

#endif

/* eml20__MassPerMassMeasure has binding name 'eml20__MassPerMassMeasure' for type 'eml20:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerMassMeasure (-353)

#endif

/* eml20__ElectricCurrentDensityMeasure has binding name 'eml20__ElectricCurrentDensityMeasure' for type 'eml20:ElectricCurrentDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentDensityMeasure (-352)

#endif

/* eml20__EnergyPerMassPerTimeMeasure has binding name 'eml20__EnergyPerMassPerTimeMeasure' for type 'eml20:EnergyPerMassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerMassPerTimeMeasure (-351)

#endif

/* eml20__AreaPerMassMeasure has binding name 'eml20__AreaPerMassMeasure' for type 'eml20:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerMassMeasure (-350)

#endif

/* eml20__RadianceMeasure has binding name 'eml20__RadianceMeasure' for type 'eml20:RadianceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadianceMeasure (-349)

#endif

/* eml20__DipoleMomentMeasure has binding name 'eml20__DipoleMomentMeasure' for type 'eml20:DipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DipoleMomentMeasure (-348)

#endif

/* eml20__PressureTimePerVolumeMeasure has binding name 'eml20__PressureTimePerVolumeMeasure' for type 'eml20:PressureTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureTimePerVolumeMeasure (-347)

#endif

/* eml20__PermittivityMeasure has binding name 'eml20__PermittivityMeasure' for type 'eml20:PermittivityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermittivityMeasure (-346)

#endif

/* eml20__ThermodynamicTemperatureMeasure has binding name 'eml20__ThermodynamicTemperatureMeasure' for type 'eml20:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermodynamicTemperatureMeasure (-345)

#endif

/* eml20__ReluctanceMeasure has binding name 'eml20__ReluctanceMeasure' for type 'eml20:ReluctanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReluctanceMeasure (-344)

#endif

/* eml20__AreaPerAreaMeasure has binding name 'eml20__AreaPerAreaMeasure' for type 'eml20:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAreaMeasure (-343)

#endif

/* eml20__EnergyPerAreaMeasure has binding name 'eml20__EnergyPerAreaMeasure' for type 'eml20:EnergyPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerAreaMeasure (-342)

#endif

/* eml20__MassPerLengthMeasure has binding name 'eml20__MassPerLengthMeasure' for type 'eml20:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerLengthMeasure (-341)

#endif

/* eml20__LengthPerTimeMeasure has binding name 'eml20__LengthPerTimeMeasure' for type 'eml20:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerTimeMeasure (-340)

#endif

/* eml20__AnglePerLengthMeasure has binding name 'eml20__AnglePerLengthMeasure' for type 'eml20:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AnglePerLengthMeasure (-339)

#endif

/* eml20__ThermalResistanceMeasure has binding name 'eml20__ThermalResistanceMeasure' for type 'eml20:ThermalResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalResistanceMeasure (-338)

#endif

/* eml20__AttenuationPerFrequencyIntervalMeasure has binding name 'eml20__AttenuationPerFrequencyIntervalMeasure' for type 'eml20:AttenuationPerFrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AttenuationPerFrequencyIntervalMeasure (-337)

#endif

/* eml20__TemperatureIntervalPerPressureMeasure has binding name 'eml20__TemperatureIntervalPerPressureMeasure' for type 'eml20:TemperatureIntervalPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerPressureMeasure (-336)

#endif

/* eml20__AbsorbedDoseMeasure has binding name 'eml20__AbsorbedDoseMeasure' for type 'eml20:AbsorbedDoseMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbsorbedDoseMeasure (-335)

#endif

/* eml20__ElectricResistancePerLengthMeasure has binding name 'eml20__ElectricResistancePerLengthMeasure' for type 'eml20:ElectricResistancePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricResistancePerLengthMeasure (-334)

#endif

/* eml20__HeatCapacityMeasure has binding name 'eml20__HeatCapacityMeasure' for type 'eml20:HeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatCapacityMeasure (-333)

#endif

/* eml20__LuminousFluxMeasure has binding name 'eml20__LuminousFluxMeasure' for type 'eml20:LuminousFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LuminousFluxMeasure (-332)

#endif

/* eml20__ElectricCurrentMeasure has binding name 'eml20__ElectricCurrentMeasure' for type 'eml20:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricCurrentMeasure (-331)

#endif

/* eml20__LightExposureMeasure has binding name 'eml20__LightExposureMeasure' for type 'eml20:LightExposureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LightExposureMeasure (-330)

#endif

/* eml20__ElectricChargePerAreaMeasure has binding name 'eml20__ElectricChargePerAreaMeasure' for type 'eml20:ElectricChargePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricChargePerAreaMeasure (-329)

#endif

/* eml20__VolumePerRotationMeasure has binding name 'eml20__VolumePerRotationMeasure' for type 'eml20:VolumePerRotationMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerRotationMeasure (-328)

#endif

/* eml20__PowerMeasure has binding name 'eml20__PowerMeasure' for type 'eml20:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerMeasure (-327)

#endif

/* eml20__EnergyLengthPerTimeAreaTemperatureMeasure has binding name 'eml20__EnergyLengthPerTimeAreaTemperatureMeasure' for type 'eml20:EnergyLengthPerTimeAreaTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyLengthPerTimeAreaTemperatureMeasure (-326)

#endif

/* eml20__SolidAngleMeasure has binding name 'eml20__SolidAngleMeasure' for type 'eml20:SolidAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__SolidAngleMeasure (-325)

#endif

/* eml20__ThermalConductanceMeasure has binding name 'eml20__ThermalConductanceMeasure' for type 'eml20:ThermalConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalConductanceMeasure (-324)

#endif

/* eml20__TemperatureIntervalPerTimeMeasure has binding name 'eml20__TemperatureIntervalPerTimeMeasure' for type 'eml20:TemperatureIntervalPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerTimeMeasure (-323)

#endif

/* eml20__EnergyPerLengthMeasure has binding name 'eml20__EnergyPerLengthMeasure' for type 'eml20:EnergyPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyPerLengthMeasure (-322)

#endif

/* eml20__LinearThermalExpansionMeasure has binding name 'eml20__LinearThermalExpansionMeasure' for type 'eml20:LinearThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearThermalExpansionMeasure (-321)

#endif

/* eml20__ForcePerForceMeasure has binding name 'eml20__ForcePerForceMeasure' for type 'eml20:ForcePerForceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForcePerForceMeasure (-320)

#endif

/* eml20__ReciprocalVolumeMeasure has binding name 'eml20__ReciprocalVolumeMeasure' for type 'eml20:ReciprocalVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalVolumeMeasure (-319)

#endif

/* eml20__ReciprocalMassTimeMeasure has binding name 'eml20__ReciprocalMassTimeMeasure' for type 'eml20:ReciprocalMassTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalMassTimeMeasure (-318)

#endif

/* eml20__TimePerLengthMeasure has binding name 'eml20__TimePerLengthMeasure' for type 'eml20:TimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TimePerLengthMeasure (-317)

#endif

/* eml20__AmountOfSubstanceMeasure has binding name 'eml20__AmountOfSubstanceMeasure' for type 'eml20:AmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstanceMeasure (-316)

#endif

/* eml20__AmountOfSubstancePerAreaMeasure has binding name 'eml20__AmountOfSubstancePerAreaMeasure' for type 'eml20:AmountOfSubstancePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerAreaMeasure (-315)

#endif

/* eml20__TemperatureIntervalPerLengthMeasure has binding name 'eml20__TemperatureIntervalPerLengthMeasure' for type 'eml20:TemperatureIntervalPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalPerLengthMeasure (-314)

#endif

/* eml20__MassPerVolumeMeasure has binding name 'eml20__MassPerVolumeMeasure' for type 'eml20:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerVolumeMeasure (-313)

#endif

/* eml20__LengthMeasure has binding name 'eml20__LengthMeasure' for type 'eml20:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthMeasure (-312)

#endif

/* eml20__AreaPerAmountOfSubstanceMeasure has binding name 'eml20__AreaPerAmountOfSubstanceMeasure' for type 'eml20:AreaPerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AreaPerAmountOfSubstanceMeasure (-311)

#endif

/* eml20__ReciprocalPressureMeasure has binding name 'eml20__ReciprocalPressureMeasure' for type 'eml20:ReciprocalPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ReciprocalPressureMeasure (-310)

#endif

/* eml20__ElectricConductanceMeasure has binding name 'eml20__ElectricConductanceMeasure' for type 'eml20:ElectricConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ElectricConductanceMeasure (-309)

#endif

/* eml20__MolarVolumeMeasure has binding name 'eml20__MolarVolumeMeasure' for type 'eml20:MolarVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MolarVolumeMeasure (-308)

#endif

/* eml20__VolumePerMassMeasure has binding name 'eml20__VolumePerMassMeasure' for type 'eml20:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerMassMeasure (-307)

#endif

/* eml20__MassPerTimeMeasure has binding name 'eml20__MassPerTimeMeasure' for type 'eml20:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MassPerTimeMeasure (-306)

#endif

/* eml20__HeatFlowRateMeasure has binding name 'eml20__HeatFlowRateMeasure' for type 'eml20:HeatFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatFlowRateMeasure (-305)

#endif

/* eml20__VolumetricThermalExpansionMeasure has binding name 'eml20__VolumetricThermalExpansionMeasure' for type 'eml20:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumetricThermalExpansionMeasure (-304)

#endif

/* eml20__MagneticFluxMeasure has binding name 'eml20__MagneticFluxMeasure' for type 'eml20:MagneticFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticFluxMeasure (-303)

#endif

/* eml20__VolumePerTimeMeasure has binding name 'eml20__VolumePerTimeMeasure' for type 'eml20:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimeMeasure (-302)

#endif

/* eml20__LinearAccelerationMeasure has binding name 'eml20__LinearAccelerationMeasure' for type 'eml20:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LinearAccelerationMeasure (-301)

#endif

/* eml20__MagneticVectorPotentialMeasure has binding name 'eml20__MagneticVectorPotentialMeasure' for type 'eml20:MagneticVectorPotentialMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__MagneticVectorPotentialMeasure (-300)

#endif

/* eml20__APINeutronMeasure has binding name 'eml20__APINeutronMeasure' for type 'eml20:APINeutronMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__APINeutronMeasure (-299)

#endif

/* eml20__HeatTransferCoefficientMeasure has binding name 'eml20__HeatTransferCoefficientMeasure' for type 'eml20:HeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__HeatTransferCoefficientMeasure (-298)

#endif

/* eml20__DimensionlessMeasure has binding name 'eml20__DimensionlessMeasure' for type 'eml20:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DimensionlessMeasure (-297)

#endif

/* eml20__PowerPerPowerMeasure has binding name 'eml20__PowerPerPowerMeasure' for type 'eml20:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PowerPerPowerMeasure (-296)

#endif

/* eml20__RadiantIntensityMeasure has binding name 'eml20__RadiantIntensityMeasure' for type 'eml20:RadiantIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__RadiantIntensityMeasure (-295)

#endif

/* eml20__ForceMeasure has binding name 'eml20__ForceMeasure' for type 'eml20:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceMeasure (-294)

#endif

/* eml20__IlluminanceMeasure has binding name 'eml20__IlluminanceMeasure' for type 'eml20:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__IlluminanceMeasure (-293)

#endif

/* eml20__EnergyMeasure has binding name 'eml20__EnergyMeasure' for type 'eml20:EnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__EnergyMeasure (-292)

#endif

/* eml20__ForceAreaMeasure has binding name 'eml20__ForceAreaMeasure' for type 'eml20:ForceAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceAreaMeasure (-291)

#endif

/* eml20__ThermalInsulanceMeasure has binding name 'eml20__ThermalInsulanceMeasure' for type 'eml20:ThermalInsulanceMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ThermalInsulanceMeasure (-290)

#endif

/* eml20__PermeabilityLengthMeasure has binding name 'eml20__PermeabilityLengthMeasure' for type 'eml20:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PermeabilityLengthMeasure (-289)

#endif

/* eml20__VolumePerTimePerTimeMeasure has binding name 'eml20__VolumePerTimePerTimeMeasure' for type 'eml20:VolumePerTimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerTimeMeasure (-288)

#endif

/* eml20__VolumePerTimePerLengthMeasure has binding name 'eml20__VolumePerTimePerLengthMeasure' for type 'eml20:VolumePerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerLengthMeasure (-287)

#endif

/* eml20__TemperatureIntervalMeasure has binding name 'eml20__TemperatureIntervalMeasure' for type 'eml20:TemperatureIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__TemperatureIntervalMeasure (-286)

#endif

/* eml20__LengthPerLengthMeasure has binding name 'eml20__LengthPerLengthMeasure' for type 'eml20:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__LengthPerLengthMeasure (-285)

#endif

/* eml20__VolumePerTimePerAreaMeasure has binding name 'eml20__VolumePerTimePerAreaMeasure' for type 'eml20:VolumePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VolumePerTimePerAreaMeasure (-284)

#endif

/* eml20__AmountOfSubstancePerTimePerAreaMeasure has binding name 'eml20__AmountOfSubstancePerTimePerAreaMeasure' for type 'eml20:AmountOfSubstancePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AmountOfSubstancePerTimePerAreaMeasure (-283)

#endif

/* eml20__ForceLengthPerLengthMeasure has binding name 'eml20__ForceLengthPerLengthMeasure' for type 'eml20:ForceLengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ForceLengthPerLengthMeasure (-282)

#endif

/* eml20__PressureSquaredMeasure has binding name 'eml20__PressureSquaredMeasure' for type 'eml20:PressureSquaredMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__PressureSquaredMeasure (-281)

#endif

/* eml20__DataObjectReference has binding name 'eml20__DataObjectReference' for type 'eml20:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataObjectReference
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__DataObjectReference (-280)

#endif

/* eml20__obj_USCOREEpcExternalPartReference has binding name 'eml20__obj_USCOREEpcExternalPartReference' for type 'eml20:obj_EpcExternalPartReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__obj_USCOREEpcExternalPartReference
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__obj_USCOREEpcExternalPartReference (-279)

#endif

/* eml20__Hdf5Dataset has binding name 'eml20__Hdf5Dataset' for type 'eml20:Hdf5Dataset' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__Hdf5Dataset
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__Hdf5Dataset (-278)

#endif

/* eml20__ProjectedUnknownCrs has binding name 'eml20__ProjectedUnknownCrs' for type 'eml20:ProjectedUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedUnknownCrs (-277)

#endif

/* eml20__ProjectedCrsEpsgCode has binding name 'eml20__ProjectedCrsEpsgCode' for type 'eml20:ProjectedCrsEpsgCode' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrsEpsgCode
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrsEpsgCode (-276)

#endif

/* eml20__AbstractProjectedCrs has binding name 'eml20__AbstractProjectedCrs' for type 'eml20:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractProjectedCrs (-275)

#endif

/* eml20__AbstractVerticalCrs has binding name 'eml20__AbstractVerticalCrs' for type 'eml20:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractVerticalCrs (-274)

#endif

/* eml20__VerticalCrs has binding name 'eml20__VerticalCrs' for type 'eml20:VerticalCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrs (-273)

#endif

/* eml20__ProjectedCrs has binding name 'eml20__ProjectedCrs' for type 'eml20:ProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ProjectedCrs (-272)

#endif

/* eml20__VerticalUnknownCrs has binding name 'eml20__VerticalUnknownCrs' for type 'eml20:VerticalUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalUnknownCrs (-271)

#endif

/* eml20__VerticalCrsEpsgCode has binding name 'eml20__VerticalCrsEpsgCode' for type 'eml20:VerticalCrsEpsgCode' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrsEpsgCode
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__VerticalCrsEpsgCode (-270)

#endif

/* eml20__ObjectAlias has binding name 'eml20__ObjectAlias' for type 'eml20:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__ObjectAlias
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__ObjectAlias (-269)

#endif

/* eml20__AbstractObject has binding name 'eml20__AbstractObject' for type 'eml20:AbstractObject' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractObject
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractObject (-268)

#endif

/* eml20__Citation has binding name 'eml20__Citation' for type 'eml20:Citation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__Citation
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__Citation (-267)

#endif

/* eml20__CustomData has binding name 'eml20__CustomData' for type 'eml20:CustomData' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__CustomData
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__CustomData (-266)

#endif

/* eml20__AbstractCitedDataObject has binding name 'eml20__AbstractCitedDataObject' for type 'eml20:AbstractCitedDataObject' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractCitedDataObject
#define SOAP_TYPE_gsoap_resqml2_0_1_eml20__AbstractCitedDataObject (-265)

#endif

/* resqml20__obj_USCOREDiscretePropertySeries has binding name 'resqml20__obj_USCOREDiscretePropertySeries' for type 'resqml20:obj_DiscretePropertySeries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscretePropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscretePropertySeries (-264)

#endif

/* resqml20__obj_USCORECommentPropertySeries has binding name 'resqml20__obj_USCORECommentPropertySeries' for type 'resqml20:obj_CommentPropertySeries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentPropertySeries (-263)

#endif

/* resqml20__obj_USCORECategoricalPropertySeries has binding name 'resqml20__obj_USCORECategoricalPropertySeries' for type 'resqml20:obj_CategoricalPropertySeries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalPropertySeries (-262)

#endif

/* resqml20__obj_USCOREContinuousPropertySeries has binding name 'resqml20__obj_USCOREContinuousPropertySeries' for type 'resqml20:obj_ContinuousPropertySeries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousPropertySeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousPropertySeries (-261)

#endif

/* resqml20__TimeIndices has binding name 'resqml20__TimeIndices' for type 'resqml20:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndices (-260)

#endif

/* resqml20__IntervalGridCells has binding name 'resqml20__IntervalGridCells' for type 'resqml20:IntervalGridCells' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalGridCells
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalGridCells (-259)

#endif

/* resqml20__StreamlineWellbores has binding name 'resqml20__StreamlineWellbores' for type 'resqml20:StreamlineWellbores' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineWellbores
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlineWellbores (-258)

#endif

/* resqml20__obj_USCOREStreamlinesRepresentation has binding name 'resqml20__obj_USCOREStreamlinesRepresentation' for type 'resqml20:obj_StreamlinesRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesRepresentation (-257)

#endif

/* resqml20__obj_USCOREStreamlinesFeature has binding name 'resqml20__obj_USCOREStreamlinesFeature' for type 'resqml20:obj_StreamlinesFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStreamlinesFeature (-256)

#endif

/* resqml20__StreamlinePolylineSetPatch has binding name 'resqml20__StreamlinePolylineSetPatch' for type 'resqml20:StreamlinePolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlinePolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StreamlinePolylineSetPatch (-255)

#endif

/* resqml20__obj_USCOREActivityTemplate has binding name 'resqml20__obj_USCOREActivityTemplate' for type 'resqml20:obj_ActivityTemplate' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivityTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivityTemplate (-254)

#endif

/* resqml20__AbstractActivityParameter has binding name 'resqml20__AbstractActivityParameter' for type 'resqml20:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractActivityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractActivityParameter (-253)

#endif

/* resqml20__TimeIndexParameter has binding name 'resqml20__TimeIndexParameter' for type 'resqml20:TimeIndexParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameter (-252)

#endif

/* resqml20__AbstractParameterKey has binding name 'resqml20__AbstractParameterKey' for type 'resqml20:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParameterKey (-251)

#endif

/* resqml20__FloatingPointQuantityParameter has binding name 'resqml20__FloatingPointQuantityParameter' for type 'resqml20:FloatingPointQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FloatingPointQuantityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FloatingPointQuantityParameter (-250)

#endif

/* resqml20__TimeIndexParameterKey has binding name 'resqml20__TimeIndexParameterKey' for type 'resqml20:TimeIndexParameterKey' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndexParameterKey (-249)

#endif

/* resqml20__IntegerQuantityParameter has binding name 'resqml20__IntegerQuantityParameter' for type 'resqml20:IntegerQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerQuantityParameter (-248)

#endif

/* resqml20__ParameterTemplate has binding name 'resqml20__ParameterTemplate' for type 'resqml20:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParameterTemplate (-247)

#endif

/* resqml20__StringParameter has binding name 'resqml20__StringParameter' for type 'resqml20:StringParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringParameter (-246)

#endif

/* resqml20__obj_USCOREActivity has binding name 'resqml20__obj_USCOREActivity' for type 'resqml20:obj_Activity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREActivity (-245)

#endif

/* resqml20__ObjectParameterKey has binding name 'resqml20__ObjectParameterKey' for type 'resqml20:ObjectParameterKey' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ObjectParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ObjectParameterKey (-244)

#endif

/* resqml20__DataObjectParameter has binding name 'resqml20__DataObjectParameter' for type 'resqml20:DataObjectParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DataObjectParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DataObjectParameter (-243)

#endif

/* resqml20__WitsmlWellboreReference has binding name 'resqml20__WitsmlWellboreReference' for type 'resqml20:WitsmlWellboreReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WitsmlWellboreReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WitsmlWellboreReference (-242)

#endif

/* resqml20__AbstractSeismicSurveyFeature has binding name 'resqml20__AbstractSeismicSurveyFeature' for type 'resqml20:AbstractSeismicSurveyFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicSurveyFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicSurveyFeature (-241)

#endif

/* resqml20__obj_USCORESeismicLatticeFeature has binding name 'resqml20__obj_USCORESeismicLatticeFeature' for type 'resqml20:obj_SeismicLatticeFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLatticeFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLatticeFeature (-240)

#endif

/* resqml20__obj_USCORESeismicLineFeature has binding name 'resqml20__obj_USCORESeismicLineFeature' for type 'resqml20:obj_SeismicLineFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineFeature (-239)

#endif

/* resqml20__obj_USCOREWellboreFeature has binding name 'resqml20__obj_USCOREWellboreFeature' for type 'resqml20:obj_WellboreFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFeature (-238)

#endif

/* resqml20__obj_USCORESeismicLineSetFeature has binding name 'resqml20__obj_USCORESeismicLineSetFeature' for type 'resqml20:obj_SeismicLineSetFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESeismicLineSetFeature (-237)

#endif

/* resqml20__SeismicLatticeSetFeature has binding name 'resqml20__SeismicLatticeSetFeature' for type 'resqml20:SeismicLatticeSetFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SeismicLatticeSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SeismicLatticeSetFeature (-236)

#endif

/* resqml20__obj_USCOREFrontierFeature has binding name 'resqml20__obj_USCOREFrontierFeature' for type 'resqml20:obj_FrontierFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFrontierFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFrontierFeature (-235)

#endif

/* resqml20__AbstractTechnicalFeature has binding name 'resqml20__AbstractTechnicalFeature' for type 'resqml20:AbstractTechnicalFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTechnicalFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTechnicalFeature (-234)

#endif

/* resqml20__ContactRepresentationReference has binding name 'resqml20__ContactRepresentationReference' for type 'resqml20:ContactRepresentationReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRepresentationReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactRepresentationReference (-233)

#endif

/* resqml20__ContactIdentity has binding name 'resqml20__ContactIdentity' for type 'resqml20:ContactIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactIdentity (-232)

#endif

/* resqml20__OrientedMacroFace has binding name 'resqml20__OrientedMacroFace' for type 'resqml20:OrientedMacroFace' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrientedMacroFace
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OrientedMacroFace (-231)

#endif

/* resqml20__PolylineSetPatch has binding name 'resqml20__PolylineSetPatch' for type 'resqml20:PolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PolylineSetPatch (-230)

#endif

/* resqml20__obj_USCOREGrid2dSetRepresentation has binding name 'resqml20__obj_USCOREGrid2dSetRepresentation' for type 'resqml20:obj_Grid2dSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dSetRepresentation (-229)

#endif

/* resqml20__Grid2dPatch has binding name 'resqml20__Grid2dPatch' for type 'resqml20:Grid2dPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Grid2dPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Grid2dPatch (-228)

#endif

/* resqml20__AbstractSurfaceRepresentation has binding name 'resqml20__AbstractSurfaceRepresentation' for type 'resqml20:AbstractSurfaceRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceRepresentation (-227)

#endif

/* resqml20__PatchBoundaries has binding name 'resqml20__PatchBoundaries' for type 'resqml20:PatchBoundaries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchBoundaries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchBoundaries (-226)

#endif

/* resqml20__obj_USCOREGrid2dRepresentation has binding name 'resqml20__obj_USCOREGrid2dRepresentation' for type 'resqml20:obj_Grid2dRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGrid2dRepresentation (-225)

#endif

/* resqml20__obj_USCOREPolylineRepresentation has binding name 'resqml20__obj_USCOREPolylineRepresentation' for type 'resqml20:obj_PolylineRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineRepresentation (-224)

#endif

/* resqml20__TrianglePatch has binding name 'resqml20__TrianglePatch' for type 'resqml20:TrianglePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TrianglePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TrianglePatch (-223)

#endif

/* resqml20__obj_USCORESealedSurfaceFrameworkRepresentation has binding name 'resqml20__obj_USCORESealedSurfaceFrameworkRepresentation' for type 'resqml20:obj_SealedSurfaceFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedSurfaceFrameworkRepresentation (-222)

#endif

/* resqml20__NodePatch has binding name 'resqml20__NodePatch' for type 'resqml20:NodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodePatch (-221)

#endif

/* resqml20__obj_USCOREPolylineSetRepresentation has binding name 'resqml20__obj_USCOREPolylineSetRepresentation' for type 'resqml20:obj_PolylineSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPolylineSetRepresentation (-220)

#endif

/* resqml20__VolumeShell has binding name 'resqml20__VolumeShell' for type 'resqml20:VolumeShell' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeShell
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeShell (-219)

#endif

/* resqml20__VolumeRegion has binding name 'resqml20__VolumeRegion' for type 'resqml20:VolumeRegion' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeRegion
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VolumeRegion (-218)

#endif

/* resqml20__EdgePatch has binding name 'resqml20__EdgePatch' for type 'resqml20:EdgePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__EdgePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__EdgePatch (-217)

#endif

/* resqml20__obj_USCORESealedVolumeFrameworkRepresentation has binding name 'resqml20__obj_USCORESealedVolumeFrameworkRepresentation' for type 'resqml20:obj_SealedVolumeFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESealedVolumeFrameworkRepresentation (-216)

#endif

/* resqml20__obj_USCOREPointSetRepresentation has binding name 'resqml20__obj_USCOREPointSetRepresentation' for type 'resqml20:obj_PointSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointSetRepresentation (-215)

#endif

/* resqml20__AbstractSurfaceFrameworkRepresentation has binding name 'resqml20__AbstractSurfaceFrameworkRepresentation' for type 'resqml20:AbstractSurfaceFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSurfaceFrameworkRepresentation (-214)

#endif

/* resqml20__AbstractContactRepresentationPart has binding name 'resqml20__AbstractContactRepresentationPart' for type 'resqml20:AbstractContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactRepresentationPart (-213)

#endif

/* resqml20__obj_USCOREPlaneSetRepresentation has binding name 'resqml20__obj_USCOREPlaneSetRepresentation' for type 'resqml20:obj_PlaneSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPlaneSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPlaneSetRepresentation (-212)

#endif

/* resqml20__ContactPatch has binding name 'resqml20__ContactPatch' for type 'resqml20:ContactPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactPatch (-211)

#endif

/* resqml20__SealedContactRepresentationPart has binding name 'resqml20__SealedContactRepresentationPart' for type 'resqml20:SealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SealedContactRepresentationPart (-210)

#endif

/* resqml20__NonSealedContactRepresentationPart has binding name 'resqml20__NonSealedContactRepresentationPart' for type 'resqml20:NonSealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NonSealedContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NonSealedContactRepresentationPart (-209)

#endif

/* resqml20__obj_USCORETriangulatedSetRepresentation has binding name 'resqml20__obj_USCORETriangulatedSetRepresentation' for type 'resqml20:obj_TriangulatedSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETriangulatedSetRepresentation (-208)

#endif

/* resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation has binding name 'resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation' for type 'resqml20:obj_NonSealedSurfaceFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORENonSealedSurfaceFrameworkRepresentation (-207)

#endif

/* resqml20__obj_USCOREWellboreMarkerFrameRepresentation has binding name 'resqml20__obj_USCOREWellboreMarkerFrameRepresentation' for type 'resqml20:obj_WellboreMarkerFrameRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreMarkerFrameRepresentation (-206)

#endif

/* resqml20__WellboreMarker has binding name 'resqml20__WellboreMarker' for type 'resqml20:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreMarker (-205)

#endif

/* resqml20__obj_USCOREMdDatum has binding name 'resqml20__obj_USCOREMdDatum' for type 'resqml20:obj_MdDatum' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREMdDatum
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREMdDatum (-204)

#endif

/* resqml20__obj_USCOREWellboreTrajectoryRepresentation has binding name 'resqml20__obj_USCOREWellboreTrajectoryRepresentation' for type 'resqml20:obj_WellboreTrajectoryRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreTrajectoryRepresentation (-203)

#endif

/* resqml20__obj_USCOREWellboreFrameRepresentation has binding name 'resqml20__obj_USCOREWellboreFrameRepresentation' for type 'resqml20:obj_WellboreFrameRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFrameRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreFrameRepresentation (-202)

#endif

/* resqml20__obj_USCOREDeviationSurveyRepresentation has binding name 'resqml20__obj_USCOREDeviationSurveyRepresentation' for type 'resqml20:obj_DeviationSurveyRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDeviationSurveyRepresentation (-201)

#endif

/* resqml20__WellboreTrajectoryParentIntersection has binding name 'resqml20__WellboreTrajectoryParentIntersection' for type 'resqml20:WellboreTrajectoryParentIntersection' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreTrajectoryParentIntersection
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__WellboreTrajectoryParentIntersection (-200)

#endif

/* resqml20__obj_USCOREBlockedWellboreRepresentation has binding name 'resqml20__obj_USCOREBlockedWellboreRepresentation' for type 'resqml20:obj_BlockedWellboreRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBlockedWellboreRepresentation (-199)

#endif

/* resqml20__AbstractResqmlDataObject has binding name 'resqml20__AbstractResqmlDataObject' for type 'resqml20:AbstractResqmlDataObject' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractResqmlDataObject
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractResqmlDataObject (-198)

#endif

/* resqml20__obj_USCORETimeSeries has binding name 'resqml20__obj_USCORETimeSeries' for type 'resqml20:obj_TimeSeries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETimeSeries
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETimeSeries (-197)

#endif

/* resqml20__obj_USCORELocalDepth3dCrs has binding name 'resqml20__obj_USCORELocalDepth3dCrs' for type 'resqml20:obj_LocalDepth3dCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalDepth3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalDepth3dCrs (-196)

#endif

/* resqml20__NameValuePair has binding name 'resqml20__NameValuePair' for type 'resqml20:NameValuePair' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NameValuePair
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NameValuePair (-195)

#endif

/* resqml20__ResqmlJaggedArray has binding name 'resqml20__ResqmlJaggedArray' for type 'resqml20:ResqmlJaggedArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlJaggedArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ResqmlJaggedArray (-194)

#endif

/* resqml20__AbstractLocal3dCrs has binding name 'resqml20__AbstractLocal3dCrs' for type 'resqml20:AbstractLocal3dCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractLocal3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractLocal3dCrs (-193)

#endif

/* resqml20__Timestamp has binding name 'resqml20__Timestamp' for type 'resqml20:Timestamp' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Timestamp
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Timestamp (-192)

#endif

/* resqml20__TimeIndex has binding name 'resqml20__TimeIndex' for type 'resqml20:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeIndex (-191)

#endif

/* resqml20__obj_USCORELocalTime3dCrs has binding name 'resqml20__obj_USCORELocalTime3dCrs' for type 'resqml20:obj_LocalTime3dCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalTime3dCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalTime3dCrs (-190)

#endif

/* resqml20__TimeSeriesParentage has binding name 'resqml20__TimeSeriesParentage' for type 'resqml20:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSeriesParentage
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeSeriesParentage (-189)

#endif

/* resqml20__Point3d has binding name 'resqml20__Point3d' for type 'resqml20:Point3d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3d
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3d (-188)

#endif

/* resqml20__AbstractFeature has binding name 'resqml20__AbstractFeature' for type 'resqml20:AbstractFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeature (-187)

#endif

/* resqml20__obj_USCORETectonicBoundaryFeature has binding name 'resqml20__obj_USCORETectonicBoundaryFeature' for type 'resqml20:obj_TectonicBoundaryFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETectonicBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETectonicBoundaryFeature (-186)

#endif

/* resqml20__obj_USCOREOrganizationFeature has binding name 'resqml20__obj_USCOREOrganizationFeature' for type 'resqml20:obj_OrganizationFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREOrganizationFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREOrganizationFeature (-185)

#endif

/* resqml20__obj_USCOREGeobodyFeature has binding name 'resqml20__obj_USCOREGeobodyFeature' for type 'resqml20:obj_GeobodyFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyFeature (-184)

#endif

/* resqml20__obj_USCOREGeneticBoundaryFeature has binding name 'resqml20__obj_USCOREGeneticBoundaryFeature' for type 'resqml20:obj_GeneticBoundaryFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeneticBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeneticBoundaryFeature (-183)

#endif

/* resqml20__AbstractGeologicFeature has binding name 'resqml20__AbstractGeologicFeature' for type 'resqml20:AbstractGeologicFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeologicFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeologicFeature (-182)

#endif

/* resqml20__obj_USCOREStratigraphicUnitFeature has binding name 'resqml20__obj_USCOREStratigraphicUnitFeature' for type 'resqml20:obj_StratigraphicUnitFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitFeature (-181)

#endif

/* resqml20__obj_USCOREGlobalChronostratigraphicColumn has binding name 'resqml20__obj_USCOREGlobalChronostratigraphicColumn' for type 'resqml20:obj_GlobalChronostratigraphicColumn' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGlobalChronostratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGlobalChronostratigraphicColumn (-180)

#endif

/* resqml20__ChronostratigraphicRank has binding name 'resqml20__ChronostratigraphicRank' for type 'resqml20:ChronostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ChronostratigraphicRank
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ChronostratigraphicRank (-179)

#endif

/* resqml20__obj_USCOREBoundaryFeature has binding name 'resqml20__obj_USCOREBoundaryFeature' for type 'resqml20:obj_BoundaryFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeature (-178)

#endif

/* resqml20__obj_USCORERockFluidUnitFeature has binding name 'resqml20__obj_USCORERockFluidUnitFeature' for type 'resqml20:obj_RockFluidUnitFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitFeature (-177)

#endif

/* resqml20__obj_USCOREGeologicUnitFeature has binding name 'resqml20__obj_USCOREGeologicUnitFeature' for type 'resqml20:obj_GeologicUnitFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitFeature (-176)

#endif

/* resqml20__obj_USCOREFluidBoundaryFeature has binding name 'resqml20__obj_USCOREFluidBoundaryFeature' for type 'resqml20:obj_FluidBoundaryFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFluidBoundaryFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFluidBoundaryFeature (-175)

#endif

/* resqml20__obj_USCOREStratigraphicOccurrenceInterpretation has binding name 'resqml20__obj_USCOREStratigraphicOccurrenceInterpretation' for type 'resqml20:obj_StratigraphicOccurrenceInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicOccurrenceInterpretation (-174)

#endif

/* resqml20__obj_USCOREStratigraphicUnitInterpretation has binding name 'resqml20__obj_USCOREStratigraphicUnitInterpretation' for type 'resqml20:obj_StratigraphicUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicUnitInterpretation (-173)

#endif

/* resqml20__obj_USCOREGeologicUnitInterpretation has binding name 'resqml20__obj_USCOREGeologicUnitInterpretation' for type 'resqml20:obj_GeologicUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeologicUnitInterpretation (-172)

#endif

/* resqml20__obj_USCOREHorizonInterpretation has binding name 'resqml20__obj_USCOREHorizonInterpretation' for type 'resqml20:obj_HorizonInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREHorizonInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREHorizonInterpretation (-171)

#endif

/* resqml20__RockFluidUnitInterpretationIndex has binding name 'resqml20__RockFluidUnitInterpretationIndex' for type 'resqml20:RockFluidUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RockFluidUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RockFluidUnitInterpretationIndex (-170)

#endif

/* resqml20__AbstractStratigraphicOrganizationInterpretation has binding name 'resqml20__AbstractStratigraphicOrganizationInterpretation' for type 'resqml20:AbstractStratigraphicOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractStratigraphicOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractStratigraphicOrganizationInterpretation (-169)

#endif

/* resqml20__obj_USCOREStratigraphicColumnRankInterpretation has binding name 'resqml20__obj_USCOREStratigraphicColumnRankInterpretation' for type 'resqml20:obj_StratigraphicColumnRankInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumnRankInterpretation (-168)

#endif

/* resqml20__FaultThrow has binding name 'resqml20__FaultThrow' for type 'resqml20:FaultThrow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FaultThrow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__FaultThrow (-167)

#endif

/* resqml20__obj_USCOREEarthModelInterpretation has binding name 'resqml20__obj_USCOREEarthModelInterpretation' for type 'resqml20:obj_EarthModelInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREEarthModelInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREEarthModelInterpretation (-166)

#endif

/* resqml20__AbstractContactInterpretationPart has binding name 'resqml20__AbstractContactInterpretationPart' for type 'resqml20:AbstractContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractContactInterpretationPart (-165)

#endif

/* resqml20__obj_USCOREBoundaryFeatureInterpretation has binding name 'resqml20__obj_USCOREBoundaryFeatureInterpretation' for type 'resqml20:obj_BoundaryFeatureInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREBoundaryFeatureInterpretation (-164)

#endif

/* resqml20__obj_USCOREGeobodyInterpretation has binding name 'resqml20__obj_USCOREGeobodyInterpretation' for type 'resqml20:obj_GeobodyInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyInterpretation (-163)

#endif

/* resqml20__obj_USCOREStratigraphicColumn has binding name 'resqml20__obj_USCOREStratigraphicColumn' for type 'resqml20:obj_StratigraphicColumn' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumn
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStratigraphicColumn (-162)

#endif

/* resqml20__obj_USCOREFaultInterpretation has binding name 'resqml20__obj_USCOREFaultInterpretation' for type 'resqml20:obj_FaultInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFaultInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREFaultInterpretation (-161)

#endif

/* resqml20__HorizonInterpretationIndex has binding name 'resqml20__HorizonInterpretationIndex' for type 'resqml20:HorizonInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizonInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizonInterpretationIndex (-160)

#endif

/* resqml20__MultipleContactInterpretationPart has binding name 'resqml20__MultipleContactInterpretationPart' for type 'resqml20:MultipleContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MultipleContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__MultipleContactInterpretationPart (-159)

#endif

/* resqml20__obj_USCOREStructuralOrganizationInterpretation has binding name 'resqml20__obj_USCOREStructuralOrganizationInterpretation' for type 'resqml20:obj_StructuralOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStructuralOrganizationInterpretation (-158)

#endif

/* resqml20__obj_USCOREGeobodyBoundaryInterpretation has binding name 'resqml20__obj_USCOREGeobodyBoundaryInterpretation' for type 'resqml20:obj_GeobodyBoundaryInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGeobodyBoundaryInterpretation (-157)

#endif

/* resqml20__GeologicUnitInterpretationIndex has binding name 'resqml20__GeologicUnitInterpretationIndex' for type 'resqml20:GeologicUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GeologicUnitInterpretationIndex (-156)

#endif

/* resqml20__obj_USCOREWellboreInterpretation has binding name 'resqml20__obj_USCOREWellboreInterpretation' for type 'resqml20:obj_WellboreInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREWellboreInterpretation (-155)

#endif

/* resqml20__obj_USCOREGenericFeatureInterpretation has binding name 'resqml20__obj_USCOREGenericFeatureInterpretation' for type 'resqml20:obj_GenericFeatureInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGenericFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGenericFeatureInterpretation (-154)

#endif

/* resqml20__obj_USCORERockFluidUnitInterpretation has binding name 'resqml20__obj_USCORERockFluidUnitInterpretation' for type 'resqml20:obj_RockFluidUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidUnitInterpretation (-153)

#endif

/* resqml20__ContactElementReference has binding name 'resqml20__ContactElementReference' for type 'resqml20:ContactElementReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactElementReference
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ContactElementReference (-152)

#endif

/* resqml20__StratigraphicUnitInterpretationIndex has binding name 'resqml20__StratigraphicUnitInterpretationIndex' for type 'resqml20:StratigraphicUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StratigraphicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StratigraphicUnitInterpretationIndex (-151)

#endif

/* resqml20__BinaryContactInterpretationPart has binding name 'resqml20__BinaryContactInterpretationPart' for type 'resqml20:BinaryContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BinaryContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BinaryContactInterpretationPart (-150)

#endif

/* resqml20__AbstractOrganizationInterpretation has binding name 'resqml20__AbstractOrganizationInterpretation' for type 'resqml20:AbstractOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractOrganizationInterpretation (-149)

#endif

/* resqml20__TimeInterval has binding name 'resqml20__TimeInterval' for type 'resqml20:TimeInterval' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeInterval
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TimeInterval (-148)

#endif

/* resqml20__obj_USCORERockFluidOrganizationInterpretation has binding name 'resqml20__obj_USCORERockFluidOrganizationInterpretation' for type 'resqml20:obj_RockFluidOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERockFluidOrganizationInterpretation (-147)

#endif

/* resqml20__AbstractFeatureInterpretation has binding name 'resqml20__AbstractFeatureInterpretation' for type 'resqml20:AbstractFeatureInterpretation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeatureInterpretation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractFeatureInterpretation (-146)

#endif

/* resqml20__AbstractParentWindow has binding name 'resqml20__AbstractParentWindow' for type 'resqml20:AbstractParentWindow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParentWindow (-145)

#endif

/* resqml20__AbstractColumnLayerGridGeometry has binding name 'resqml20__AbstractColumnLayerGridGeometry' for type 'resqml20:AbstractColumnLayerGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridGeometry (-144)

#endif

/* resqml20__Intervals has binding name 'resqml20__Intervals' for type 'resqml20:Intervals' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Intervals
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Intervals (-143)

#endif

/* resqml20__OverlapVolume has binding name 'resqml20__OverlapVolume' for type 'resqml20:OverlapVolume' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OverlapVolume
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__OverlapVolume (-142)

#endif

/* resqml20__VariableSubnodePatch has binding name 'resqml20__VariableSubnodePatch' for type 'resqml20:VariableSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VariableSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__VariableSubnodePatch (-141)

#endif

/* resqml20__ColumnLayerSplitColumnEdges has binding name 'resqml20__ColumnLayerSplitColumnEdges' for type 'resqml20:ColumnLayerSplitColumnEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitColumnEdges (-140)

#endif

/* resqml20__CellOverlap has binding name 'resqml20__CellOverlap' for type 'resqml20:CellOverlap' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellOverlap
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellOverlap (-139)

#endif

/* resqml20__UnstructuredGridHingeNodeFaces has binding name 'resqml20__UnstructuredGridHingeNodeFaces' for type 'resqml20:UnstructuredGridHingeNodeFaces' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridHingeNodeFaces
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridHingeNodeFaces (-138)

#endif

/* resqml20__AbstractGridGeometry has binding name 'resqml20__AbstractGridGeometry' for type 'resqml20:AbstractGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridGeometry (-137)

#endif

/* resqml20__obj_USCOREGridConnectionSetRepresentation has binding name 'resqml20__obj_USCOREGridConnectionSetRepresentation' for type 'resqml20:obj_GridConnectionSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGridConnectionSetRepresentation (-136)

#endif

/* resqml20__obj_USCORETruncatedIjkGridRepresentation has binding name 'resqml20__obj_USCORETruncatedIjkGridRepresentation' for type 'resqml20:obj_TruncatedIjkGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedIjkGridRepresentation (-135)

#endif

/* resqml20__GpGridIjkGridPatch has binding name 'resqml20__GpGridIjkGridPatch' for type 'resqml20:GpGridIjkGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridIjkGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridIjkGridPatch (-134)

#endif

/* resqml20__AbstractColumnLayerGridRepresentation has binding name 'resqml20__AbstractColumnLayerGridRepresentation' for type 'resqml20:AbstractColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractColumnLayerGridRepresentation (-133)

#endif

/* resqml20__CellParentWindow has binding name 'resqml20__CellParentWindow' for type 'resqml20:CellParentWindow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellParentWindow (-132)

#endif

/* resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation has binding name 'resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation' for type 'resqml20:obj_TruncatedUnstructuredColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORETruncatedUnstructuredColumnLayerGridRepresentation (-131)

#endif

/* resqml20__Edges has binding name 'resqml20__Edges' for type 'resqml20:Edges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Edges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Edges (-130)

#endif

/* resqml20__UnstructuredGridGeometry has binding name 'resqml20__UnstructuredGridGeometry' for type 'resqml20:UnstructuredGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredGridGeometry (-129)

#endif

/* resqml20__NodesPerCell has binding name 'resqml20__NodesPerCell' for type 'resqml20:NodesPerCell' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodesPerCell
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__NodesPerCell (-128)

#endif

/* resqml20__CellFluidPhaseUnits has binding name 'resqml20__CellFluidPhaseUnits' for type 'resqml20:CellFluidPhaseUnits' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellFluidPhaseUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellFluidPhaseUnits (-127)

#endif

/* resqml20__SplitEdges has binding name 'resqml20__SplitEdges' for type 'resqml20:SplitEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitEdges (-126)

#endif

/* resqml20__AbstractTruncatedColumnLayerGridRepresentation has binding name 'resqml20__AbstractTruncatedColumnLayerGridRepresentation' for type 'resqml20:AbstractTruncatedColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTruncatedColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractTruncatedColumnLayerGridRepresentation (-125)

#endif

/* resqml20__ConnectionInterpretations has binding name 'resqml20__ConnectionInterpretations' for type 'resqml20:ConnectionInterpretations' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ConnectionInterpretations
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ConnectionInterpretations (-124)

#endif

/* resqml20__IjkGridGeometry has binding name 'resqml20__IjkGridGeometry' for type 'resqml20:IjkGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkGridGeometry (-123)

#endif

/* resqml20__UnstructuredColumnLayerGridGeometry has binding name 'resqml20__UnstructuredColumnLayerGridGeometry' for type 'resqml20:UnstructuredColumnLayerGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnLayerGridGeometry (-122)

#endif

/* resqml20__Activation has binding name 'resqml20__Activation' for type 'resqml20:Activation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Activation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Activation (-121)

#endif

/* resqml20__Regrid has binding name 'resqml20__Regrid' for type 'resqml20:Regrid' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Regrid
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Regrid (-120)

#endif

/* resqml20__IntervalStratigraphicUnits has binding name 'resqml20__IntervalStratigraphicUnits' for type 'resqml20:IntervalStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntervalStratigraphicUnits (-119)

#endif

/* resqml20__GpGridUnstructuredGridPatch has binding name 'resqml20__GpGridUnstructuredGridPatch' for type 'resqml20:GpGridUnstructuredGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredGridPatch (-118)

#endif

/* resqml20__TruncationCellPatch has binding name 'resqml20__TruncationCellPatch' for type 'resqml20:TruncationCellPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TruncationCellPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TruncationCellPatch (-117)

#endif

/* resqml20__IjSplitColumnEdges has binding name 'resqml20__IjSplitColumnEdges' for type 'resqml20:IjSplitColumnEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjSplitColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjSplitColumnEdges (-116)

#endif

/* resqml20__AdditionalGridPoints has binding name 'resqml20__AdditionalGridPoints' for type 'resqml20:AdditionalGridPoints' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridPoints (-115)

#endif

/* resqml20__UnstructuredColumnEdges has binding name 'resqml20__UnstructuredColumnEdges' for type 'resqml20:UnstructuredColumnEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredColumnEdges (-114)

#endif

/* resqml20__ColumnLayerSubnodeTopology has binding name 'resqml20__ColumnLayerSubnodeTopology' for type 'resqml20:ColumnLayerSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSubnodeTopology (-113)

#endif

/* resqml20__SubnodePatch has binding name 'resqml20__SubnodePatch' for type 'resqml20:SubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodePatch (-112)

#endif

/* resqml20__KGaps has binding name 'resqml20__KGaps' for type 'resqml20:KGaps' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KGaps
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__KGaps (-111)

#endif

/* resqml20__UniformSubnodePatch has binding name 'resqml20__UniformSubnodePatch' for type 'resqml20:UniformSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UniformSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UniformSubnodePatch (-110)

#endif

/* resqml20__ColumnLayerSplitCoordinateLines has binding name 'resqml20__ColumnLayerSplitCoordinateLines' for type 'resqml20:ColumnLayerSplitCoordinateLines' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitCoordinateLines
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerSplitCoordinateLines (-109)

#endif

/* resqml20__GpGridColumnLayerGrid has binding name 'resqml20__GpGridColumnLayerGrid' for type 'resqml20:GpGridColumnLayerGrid' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridColumnLayerGrid
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridColumnLayerGrid (-108)

#endif

/* resqml20__GpGridUnstructuredColumnLayerGridPatch has binding name 'resqml20__GpGridUnstructuredColumnLayerGridPatch' for type 'resqml20:GpGridUnstructuredColumnLayerGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredColumnLayerGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__GpGridUnstructuredColumnLayerGridPatch (-107)

#endif

/* resqml20__UnstructuredSubnodeTopology has binding name 'resqml20__UnstructuredSubnodeTopology' for type 'resqml20:UnstructuredSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredSubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__UnstructuredSubnodeTopology (-106)

#endif

/* resqml20__ColumnLayerParentWindow has binding name 'resqml20__ColumnLayerParentWindow' for type 'resqml20:ColumnLayerParentWindow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnLayerParentWindow (-105)

#endif

/* resqml20__obj_USCOREIjkGridRepresentation has binding name 'resqml20__obj_USCOREIjkGridRepresentation' for type 'resqml20:obj_IjkGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREIjkGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREIjkGridRepresentation (-104)

#endif

/* resqml20__IjGaps has binding name 'resqml20__IjGaps' for type 'resqml20:IjGaps' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjGaps
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjGaps (-103)

#endif

/* resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation has binding name 'resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation' for type 'resqml20:obj_UnstructuredColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredColumnLayerGridRepresentation (-102)

#endif

/* resqml20__SplitFaces has binding name 'resqml20__SplitFaces' for type 'resqml20:SplitFaces' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitFaces
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitFaces (-101)

#endif

/* resqml20__SubnodeTopology has binding name 'resqml20__SubnodeTopology' for type 'resqml20:SubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubnodeTopology (-100)

#endif

/* resqml20__AbstractGridRepresentation has binding name 'resqml20__AbstractGridRepresentation' for type 'resqml20:AbstractGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGridRepresentation (-99)

#endif

/* resqml20__obj_USCORELocalGridSet has binding name 'resqml20__obj_USCORELocalGridSet' for type 'resqml20:obj_LocalGridSet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalGridSet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORELocalGridSet (-98)

#endif

/* resqml20__CellStratigraphicUnits has binding name 'resqml20__CellStratigraphicUnits' for type 'resqml20:CellStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellStratigraphicUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__CellStratigraphicUnits (-97)

#endif

/* resqml20__ColumnSubnodePatch has binding name 'resqml20__ColumnSubnodePatch' for type 'resqml20:ColumnSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ColumnSubnodePatch (-96)

#endif

/* resqml20__IjkParentWindow has binding name 'resqml20__IjkParentWindow' for type 'resqml20:IjkParentWindow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IjkParentWindow (-95)

#endif

/* resqml20__SplitNodePatch has binding name 'resqml20__SplitNodePatch' for type 'resqml20:SplitNodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitNodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SplitNodePatch (-94)

#endif

/* resqml20__obj_USCOREGpGridRepresentation has binding name 'resqml20__obj_USCOREGpGridRepresentation' for type 'resqml20:obj_GpGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGpGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREGpGridRepresentation (-93)

#endif

/* resqml20__AdditionalGridTopology has binding name 'resqml20__AdditionalGridTopology' for type 'resqml20:AdditionalGridTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AdditionalGridTopology (-92)

#endif

/* resqml20__obj_USCOREUnstructuredGridRepresentation has binding name 'resqml20__obj_USCOREUnstructuredGridRepresentation' for type 'resqml20:obj_UnstructuredGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREUnstructuredGridRepresentation (-91)

#endif

/* resqml20__obj_USCORESubRepresentation has binding name 'resqml20__obj_USCORESubRepresentation' for type 'resqml20:obj_SubRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESubRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORESubRepresentation (-90)

#endif

/* resqml20__PatchOfGeometry has binding name 'resqml20__PatchOfGeometry' for type 'resqml20:PatchOfGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfGeometry (-89)

#endif

/* resqml20__AbstractRepresentation has binding name 'resqml20__AbstractRepresentation' for type 'resqml20:AbstractRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractRepresentation (-88)

#endif

/* resqml20__ElementIdentity has binding name 'resqml20__ElementIdentity' for type 'resqml20:ElementIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIdentity (-87)

#endif

/* resqml20__obj_USCORERepresentationIdentitySet has binding name 'resqml20__obj_USCORERepresentationIdentitySet' for type 'resqml20:obj_RepresentationIdentitySet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationIdentitySet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationIdentitySet (-86)

#endif

/* resqml20__RepresentationIdentity has binding name 'resqml20__RepresentationIdentity' for type 'resqml20:RepresentationIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RepresentationIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__RepresentationIdentity (-85)

#endif

/* resqml20__obj_USCORERedefinedGeometryRepresentation has binding name 'resqml20__obj_USCORERedefinedGeometryRepresentation' for type 'resqml20:obj_RedefinedGeometryRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERedefinedGeometryRepresentation (-84)

#endif

/* resqml20__obj_USCORERepresentationSetRepresentation has binding name 'resqml20__obj_USCORERepresentationSetRepresentation' for type 'resqml20:obj_RepresentationSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationSetRepresentation
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORERepresentationSetRepresentation (-83)

#endif

/* resqml20__SubRepresentationPatch has binding name 'resqml20__SubRepresentationPatch' for type 'resqml20:SubRepresentationPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubRepresentationPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__SubRepresentationPatch (-82)

#endif

/* resqml20__ElementIndices has binding name 'resqml20__ElementIndices' for type 'resqml20:ElementIndices' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ElementIndices (-81)

#endif

/* resqml20__Patch has binding name 'resqml20__Patch' for type 'resqml20:Patch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch (-80)

#endif

/* resqml20__Patch1d has binding name 'resqml20__Patch1d' for type 'resqml20:Patch1d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch1d
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Patch1d (-79)

#endif

/* resqml20__Seismic2dCoordinates has binding name 'resqml20__Seismic2dCoordinates' for type 'resqml20:Seismic2dCoordinates' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic2dCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic2dCoordinates (-78)

#endif

/* resqml20__AbstractSeismicCoordinates has binding name 'resqml20__AbstractSeismicCoordinates' for type 'resqml20:AbstractSeismicCoordinates' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractSeismicCoordinates (-77)

#endif

/* resqml20__Seismic3dCoordinates has binding name 'resqml20__Seismic3dCoordinates' for type 'resqml20:Seismic3dCoordinates' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic3dCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Seismic3dCoordinates (-76)

#endif

/* resqml20__Point3dFromRepresentationLatticeArray has binding name 'resqml20__Point3dFromRepresentationLatticeArray' for type 'resqml20:Point3dFromRepresentationLatticeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dFromRepresentationLatticeArray (-75)

#endif

/* resqml20__AbstractParametricLineGeometry has binding name 'resqml20__AbstractParametricLineGeometry' for type 'resqml20:AbstractParametricLineGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineGeometry (-74)

#endif

/* resqml20__AbstractPlaneGeometry has binding name 'resqml20__AbstractPlaneGeometry' for type 'resqml20:AbstractPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPlaneGeometry (-73)

#endif

/* resqml20__TiltedPlaneGeometry has binding name 'resqml20__TiltedPlaneGeometry' for type 'resqml20:TiltedPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TiltedPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__TiltedPlaneGeometry (-72)

#endif

/* resqml20__ParametricLineIntersections has binding name 'resqml20__ParametricLineIntersections' for type 'resqml20:ParametricLineIntersections' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineIntersections
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineIntersections (-71)

#endif

/* resqml20__AbstractParametricLineArray has binding name 'resqml20__AbstractParametricLineArray' for type 'resqml20:AbstractParametricLineArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractParametricLineArray (-70)

#endif

/* resqml20__Point3dParametricArray has binding name 'resqml20__Point3dParametricArray' for type 'resqml20:Point3dParametricArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dParametricArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dParametricArray (-69)

#endif

/* resqml20__ParametricLineArray has binding name 'resqml20__ParametricLineArray' for type 'resqml20:ParametricLineArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineArray (-68)

#endif

/* resqml20__ParametricLineFromRepresentationGeometry has binding name 'resqml20__ParametricLineFromRepresentationGeometry' for type 'resqml20:ParametricLineFromRepresentationGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationGeometry (-67)

#endif

/* resqml20__ThreePoint3d has binding name 'resqml20__ThreePoint3d' for type 'resqml20:ThreePoint3d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThreePoint3d
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ThreePoint3d (-66)

#endif

/* resqml20__Point3dHdf5Array has binding name 'resqml20__Point3dHdf5Array' for type 'resqml20:Point3dHdf5Array' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dHdf5Array (-65)

#endif

/* resqml20__AbstractGeometry has binding name 'resqml20__AbstractGeometry' for type 'resqml20:AbstractGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractGeometry (-64)

#endif

/* resqml20__AbstractPoint3dArray has binding name 'resqml20__AbstractPoint3dArray' for type 'resqml20:AbstractPoint3dArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPoint3dArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPoint3dArray (-63)

#endif

/* resqml20__PointGeometry has binding name 'resqml20__PointGeometry' for type 'resqml20:PointGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PointGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PointGeometry (-62)

#endif

/* resqml20__HorizontalPlaneGeometry has binding name 'resqml20__HorizontalPlaneGeometry' for type 'resqml20:HorizontalPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizontalPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__HorizontalPlaneGeometry (-61)

#endif

/* resqml20__Point3dZValueArray has binding name 'resqml20__Point3dZValueArray' for type 'resqml20:Point3dZValueArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dZValueArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dZValueArray (-60)

#endif

/* resqml20__Point3dLatticeArray has binding name 'resqml20__Point3dLatticeArray' for type 'resqml20:Point3dLatticeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dLatticeArray (-59)

#endif

/* resqml20__ParametricLineFromRepresentationLatticeArray has binding name 'resqml20__ParametricLineFromRepresentationLatticeArray' for type 'resqml20:ParametricLineFromRepresentationLatticeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineFromRepresentationLatticeArray (-58)

#endif

/* resqml20__ParametricLineGeometry has binding name 'resqml20__ParametricLineGeometry' for type 'resqml20:ParametricLineGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__ParametricLineGeometry (-57)

#endif

/* resqml20__Point2dHdf5Array has binding name 'resqml20__Point2dHdf5Array' for type 'resqml20:Point2dHdf5Array' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point2dHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point2dHdf5Array (-56)

#endif

/* resqml20__Point3dOffset has binding name 'resqml20__Point3dOffset' for type 'resqml20:Point3dOffset' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dOffset
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__Point3dOffset (-55)

#endif

/* resqml20__BooleanArrayFromDiscretePropertyArray has binding name 'resqml20__BooleanArrayFromDiscretePropertyArray' for type 'resqml20:BooleanArrayFromDiscretePropertyArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromDiscretePropertyArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromDiscretePropertyArray (-54)

#endif

/* resqml20__DoubleLookup has binding name 'resqml20__DoubleLookup' for type 'resqml20:DoubleLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLookup (-53)

#endif

/* resqml20__LocalPropertyKind has binding name 'resqml20__LocalPropertyKind' for type 'resqml20:LocalPropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LocalPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__LocalPropertyKind (-52)

#endif

/* resqml20__AbstractValuesProperty has binding name 'resqml20__AbstractValuesProperty' for type 'resqml20:AbstractValuesProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValuesProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValuesProperty (-51)

#endif

/* resqml20__StandardPropertyKind has binding name 'resqml20__StandardPropertyKind' for type 'resqml20:StandardPropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StandardPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StandardPropertyKind (-50)

#endif

/* resqml20__PropertyValuesPatch has binding name 'resqml20__PropertyValuesPatch' for type 'resqml20:PropertyValuesPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyValuesPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyValuesPatch (-49)

#endif

/* resqml20__AbstractBooleanArray has binding name 'resqml20__AbstractBooleanArray' for type 'resqml20:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractBooleanArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractBooleanArray (-48)

#endif

/* resqml20__AbstractIntegerArray has binding name 'resqml20__AbstractIntegerArray' for type 'resqml20:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractIntegerArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractIntegerArray (-47)

#endif

/* resqml20__AbstractProperty has binding name 'resqml20__AbstractProperty' for type 'resqml20:AbstractProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractProperty (-46)

#endif

/* resqml20__obj_USCOREPropertySet has binding name 'resqml20__obj_USCOREPropertySet' for type 'resqml20:obj_PropertySet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertySet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertySet (-45)

#endif

/* resqml20__IntegerRangeArray has binding name 'resqml20__IntegerRangeArray' for type 'resqml20:IntegerRangeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerRangeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerRangeArray (-44)

#endif

/* resqml20__AbstractPropertyLookup has binding name 'resqml20__AbstractPropertyLookup' for type 'resqml20:AbstractPropertyLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyLookup (-43)

#endif

/* resqml20__AbstractValueArray has binding name 'resqml20__AbstractValueArray' for type 'resqml20:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValueArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractValueArray (-42)

#endif

/* resqml20__PatchOfValues has binding name 'resqml20__PatchOfValues' for type 'resqml20:PatchOfValues' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfValues
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfValues (-41)

#endif

/* resqml20__AbstractPropertyKind has binding name 'resqml20__AbstractPropertyKind' for type 'resqml20:AbstractPropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractPropertyKind (-40)

#endif

/* resqml20__BooleanHdf5Array has binding name 'resqml20__BooleanHdf5Array' for type 'resqml20:BooleanHdf5Array' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanHdf5Array (-39)

#endif

/* resqml20__StringHdf5Array has binding name 'resqml20__StringHdf5Array' for type 'resqml20:StringHdf5Array' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringHdf5Array (-38)

#endif

/* resqml20__obj_USCOREStringTableLookup has binding name 'resqml20__obj_USCOREStringTableLookup' for type 'resqml20:obj_StringTableLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStringTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREStringTableLookup (-37)

#endif

/* resqml20__obj_USCOREPropertyKind has binding name 'resqml20__obj_USCOREPropertyKind' for type 'resqml20:obj_PropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPropertyKind (-36)

#endif

/* resqml20__IntegerLatticeArray has binding name 'resqml20__IntegerLatticeArray' for type 'resqml20:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerLatticeArray (-35)

#endif

/* resqml20__AbstractDoubleArray has binding name 'resqml20__AbstractDoubleArray' for type 'resqml20:AbstractDoubleArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractDoubleArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__AbstractDoubleArray (-34)

#endif

/* resqml20__obj_USCORECategoricalProperty has binding name 'resqml20__obj_USCORECategoricalProperty' for type 'resqml20:obj_CategoricalProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECategoricalProperty (-33)

#endif

/* resqml20__obj_USCOREDiscreteProperty has binding name 'resqml20__obj_USCOREDiscreteProperty' for type 'resqml20:obj_DiscreteProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscreteProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDiscreteProperty (-32)

#endif

/* resqml20__obj_USCORECommentProperty has binding name 'resqml20__obj_USCORECommentProperty' for type 'resqml20:obj_CommentProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCORECommentProperty (-31)

#endif

/* resqml20__PatchOfPoints has binding name 'resqml20__PatchOfPoints' for type 'resqml20:PatchOfPoints' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PatchOfPoints (-30)

#endif

/* resqml20__DoubleHdf5Array has binding name 'resqml20__DoubleHdf5Array' for type 'resqml20:DoubleHdf5Array' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleHdf5Array (-29)

#endif

/* resqml20__DoubleConstantArray has binding name 'resqml20__DoubleConstantArray' for type 'resqml20:DoubleConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleConstantArray (-28)

#endif

/* resqml20__DoubleLatticeArray has binding name 'resqml20__DoubleLatticeArray' for type 'resqml20:DoubleLatticeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__DoubleLatticeArray (-27)

#endif

/* resqml20__obj_USCOREPointsProperty has binding name 'resqml20__obj_USCOREPointsProperty' for type 'resqml20:obj_PointsProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointsProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREPointsProperty (-26)

#endif

/* resqml20__StringLookup has binding name 'resqml20__StringLookup' for type 'resqml20:StringLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__StringLookup (-25)

#endif

/* resqml20__obj_USCOREContinuousProperty has binding name 'resqml20__obj_USCOREContinuousProperty' for type 'resqml20:obj_ContinuousProperty' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousProperty
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREContinuousProperty (-24)

#endif

/* resqml20__IntegerHdf5Array has binding name 'resqml20__IntegerHdf5Array' for type 'resqml20:IntegerHdf5Array' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerHdf5Array
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerHdf5Array (-23)

#endif

/* resqml20__PropertyKindFacet has binding name 'resqml20__PropertyKindFacet' for type 'resqml20:PropertyKindFacet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyKindFacet
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__PropertyKindFacet (-22)

#endif

/* resqml20__obj_USCOREDoubleTableLookup has binding name 'resqml20__obj_USCOREDoubleTableLookup' for type 'resqml20:obj_DoubleTableLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDoubleTableLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__obj_USCOREDoubleTableLookup (-21)

#endif

/* resqml20__IntegerConstantArray has binding name 'resqml20__IntegerConstantArray' for type 'resqml20:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerConstantArray (-20)

#endif

/* resqml20__BooleanConstantArray has binding name 'resqml20__BooleanConstantArray' for type 'resqml20:BooleanConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanConstantArray (-19)

#endif

/* resqml20__BooleanArrayFromIndexArray has binding name 'resqml20__BooleanArrayFromIndexArray' for type 'resqml20:BooleanArrayFromIndexArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__BooleanArrayFromIndexArray (-18)

#endif

/* resqml20__IntegerArrayFromBooleanMaskArray has binding name 'resqml20__IntegerArrayFromBooleanMaskArray' for type 'resqml20:IntegerArrayFromBooleanMaskArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_resqml2_0_1_resqml20__IntegerArrayFromBooleanMaskArray (-17)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_xsd__anyURI
#define SOAP_TYPE_gsoap_resqml2_0_1_xsd__anyURI (-16)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__string
#define SOAP_TYPE_gsoap_resqml2_0_1_std__string (-15)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Fault (-1809547271)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Reason (-1809547270)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Detail (-1809547267)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Code (-1809547265)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_resqml2_0_1_SOAP_ENV__Header (-1809547264)

#endif

/* xsd__dateTime has binding name 'xsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-9)

#endif

/* struct tm has binding name 'tm' for type 'tm' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_tm
#define SOAP_TYPE_gsoap_resqml2_0_1_tm (-8)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToSOAP_ENV__Reason (-1809547273)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToSOAP_ENV__Detail (-1809547272)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToSOAP_ENV__Code
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToSOAP_ENV__Code (-1809547266)

#endif

/* resqml20__TimeIndices * has binding name 'PointerToresqml20__TimeIndices' for type 'resqml20:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeIndices (-898)

#endif

/* resqml20__SeismicLatticeSetFeature * has binding name 'PointerToresqml20__SeismicLatticeSetFeature' for type 'resqml20:SeismicLatticeSetFeature' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SeismicLatticeSetFeature
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SeismicLatticeSetFeature (-897)

#endif

/* resqml20__SealedContactRepresentationPart * has binding name 'PointerToresqml20__SealedContactRepresentationPart' for type 'resqml20:SealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SealedContactRepresentationPart (-895)

#endif

/* resqml20__AbstractContactRepresentationPart * has binding name 'PointerToresqml20__AbstractContactRepresentationPart' for type 'resqml20:AbstractContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractContactRepresentationPart (-893)

#endif

/* resqml20__GeologicUnitInterpretationIndex * has binding name 'PointerToresqml20__GeologicUnitInterpretationIndex' for type 'resqml20:GeologicUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicUnitInterpretationIndex (-891)

#endif

/* resqml20__StratigraphicUnitInterpretationIndex * has binding name 'PointerToresqml20__StratigraphicUnitInterpretationIndex' for type 'resqml20:StratigraphicUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StratigraphicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StratigraphicUnitInterpretationIndex (-889)

#endif

/* resqml20__WitsmlWellboreReference * has binding name 'PointerToresqml20__WitsmlWellboreReference' for type 'resqml20:WitsmlWellboreReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__WitsmlWellboreReference
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__WitsmlWellboreReference (-888)

#endif

/* resqml20__Grid2dPatch * has binding name 'PointerToresqml20__Grid2dPatch' for type 'resqml20:Grid2dPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Grid2dPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Grid2dPatch (-886)

#endif

/* resqml20__VolumeRegion * has binding name 'PointerToresqml20__VolumeRegion' for type 'resqml20:VolumeRegion' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__VolumeRegion
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__VolumeRegion (-884)

#endif

/* resqml20__ContactIdentity * has binding name 'PointerToresqml20__ContactIdentity' for type 'resqml20:ContactIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactIdentity (-882)

#endif

/* resqml20__AbstractPlaneGeometry * has binding name 'PointerToresqml20__AbstractPlaneGeometry' for type 'resqml20:AbstractPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractPlaneGeometry (-880)

#endif

/* resqml20__TrianglePatch * has binding name 'PointerToresqml20__TrianglePatch' for type 'resqml20:TrianglePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TrianglePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TrianglePatch (-878)

#endif

/* resqml20__WellboreMarker * has binding name 'PointerToresqml20__WellboreMarker' for type 'resqml20:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__WellboreMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__WellboreMarker (-876)

#endif

/* resqml20__DepositionMode * has binding name 'PointerToresqml20__DepositionMode' for type 'resqml20:DepositionMode' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__DepositionMode
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__DepositionMode (-875)

#endif

/* resqml20__SequenceStratigraphySurface * has binding name 'PointerToresqml20__SequenceStratigraphySurface' for type 'resqml20:SequenceStratigraphySurface' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SequenceStratigraphySurface
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SequenceStratigraphySurface (-874)

#endif

/* resqml20__Geobody3dShape * has binding name 'PointerToresqml20__Geobody3dShape' for type 'resqml20:Geobody3dShape' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Geobody3dShape
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Geobody3dShape (-873)

#endif

/* resqml20__FaultThrow * has binding name 'PointerToresqml20__FaultThrow' for type 'resqml20:FaultThrow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__FaultThrow
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__FaultThrow (-871)

#endif

/* eml20__LengthMeasure * has binding name 'PointerToeml20__LengthMeasure' for type 'eml20:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__LengthMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__LengthMeasure (-870)

#endif

/* resqml20__HorizonInterpretationIndex * has binding name 'PointerToresqml20__HorizonInterpretationIndex' for type 'resqml20:HorizonInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__HorizonInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__HorizonInterpretationIndex (-868)

#endif

/* resqml20__Phase * has binding name 'PointerToresqml20__Phase' for type 'resqml20:Phase' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Phase
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Phase (-866)

#endif

/* resqml20__RockFluidUnitInterpretationIndex * has binding name 'PointerToresqml20__RockFluidUnitInterpretationIndex' for type 'resqml20:RockFluidUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__RockFluidUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__RockFluidUnitInterpretationIndex (-865)

#endif

/* resqml20__GpGridUnstructuredGridPatch * has binding name 'PointerToresqml20__GpGridUnstructuredGridPatch' for type 'resqml20:GpGridUnstructuredGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridUnstructuredGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridUnstructuredGridPatch (-863)

#endif

/* resqml20__GpGridColumnLayerGrid * has binding name 'PointerToresqml20__GpGridColumnLayerGrid' for type 'resqml20:GpGridColumnLayerGrid' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridColumnLayerGrid
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridColumnLayerGrid (-861)

#endif

/* resqml20__StreamlinePolylineSetPatch * has binding name 'PointerToresqml20__StreamlinePolylineSetPatch' for type 'resqml20:StreamlinePolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StreamlinePolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StreamlinePolylineSetPatch (-858)

#endif

/* resqml20__StreamlineWellbores * has binding name 'PointerToresqml20__StreamlineWellbores' for type 'resqml20:StreamlineWellbores' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StreamlineWellbores
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StreamlineWellbores (-857)

#endif

/* resqml20__PatchBoundaries * has binding name 'PointerToresqml20__PatchBoundaries' for type 'resqml20:PatchBoundaries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchBoundaries
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchBoundaries (-855)

#endif

/* resqml20__PolylineSetPatch * has binding name 'PointerToresqml20__PolylineSetPatch' for type 'resqml20:PolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PolylineSetPatch (-853)

#endif

/* resqml20__LineRole * has binding name 'PointerToresqml20__LineRole' for type 'resqml20:LineRole' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__LineRole
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__LineRole (-852)

#endif

/* resqml20__NodePatch * has binding name 'PointerToresqml20__NodePatch' for type 'resqml20:NodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__NodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__NodePatch (-850)

#endif

/* resqml20__WellboreTrajectoryParentIntersection * has binding name 'PointerToresqml20__WellboreTrajectoryParentIntersection' for type 'resqml20:WellboreTrajectoryParentIntersection' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__WellboreTrajectoryParentIntersection
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__WellboreTrajectoryParentIntersection (-849)

#endif

/* resqml20__AbstractParametricLineGeometry * has binding name 'PointerToresqml20__AbstractParametricLineGeometry' for type 'resqml20:AbstractParametricLineGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParametricLineGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParametricLineGeometry (-848)

#endif

/* resqml20__MdDomain * has binding name 'PointerToresqml20__MdDomain' for type 'resqml20:MdDomain' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__MdDomain
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__MdDomain (-847)

#endif

/* resqml20__IntervalStratigraphicUnits * has binding name 'PointerToresqml20__IntervalStratigraphicUnits' for type 'resqml20:IntervalStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntervalStratigraphicUnits (-846)

#endif

/* resqml20__GeologicUnitMaterialImplacement * has binding name 'PointerToresqml20__GeologicUnitMaterialImplacement' for type 'resqml20:GeologicUnitMaterialImplacement' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicUnitMaterialImplacement
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicUnitMaterialImplacement (-845)

#endif

/* resqml20__GeologicUnitComposition * has binding name 'PointerToresqml20__GeologicUnitComposition' for type 'resqml20:GeologicUnitComposition' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicUnitComposition
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicUnitComposition (-844)

#endif

/* resqml20__AbstractContactInterpretationPart * has binding name 'PointerToresqml20__AbstractContactInterpretationPart' for type 'resqml20:AbstractContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractContactInterpretationPart (-842)

#endif

/* resqml20__ConnectionInterpretations * has binding name 'PointerToresqml20__ConnectionInterpretations' for type 'resqml20:ConnectionInterpretations' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ConnectionInterpretations
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ConnectionInterpretations (-841)

#endif

/* resqml20__IjGaps * has binding name 'PointerToresqml20__IjGaps' for type 'resqml20:IjGaps' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IjGaps
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IjGaps (-840)

#endif

/* resqml20__CellStratigraphicUnits * has binding name 'PointerToresqml20__CellStratigraphicUnits' for type 'resqml20:CellStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__CellStratigraphicUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__CellStratigraphicUnits (-839)

#endif

/* resqml20__AbstractParentWindow * has binding name 'PointerToresqml20__AbstractParentWindow' for type 'resqml20:AbstractParentWindow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParentWindow
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParentWindow (-838)

#endif

/* resqml20__CellFluidPhaseUnits * has binding name 'PointerToresqml20__CellFluidPhaseUnits' for type 'resqml20:CellFluidPhaseUnits' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__CellFluidPhaseUnits
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__CellFluidPhaseUnits (-837)

#endif

/* resqml20__SubRepresentationPatch * has binding name 'PointerToresqml20__SubRepresentationPatch' for type 'resqml20:SubRepresentationPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SubRepresentationPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SubRepresentationPatch (-835)

#endif

/* resqml20__PatchOfGeometry * has binding name 'PointerToresqml20__PatchOfGeometry' for type 'resqml20:PatchOfGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchOfGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchOfGeometry (-833)

#endif

/* resqml20__PropertyKindFacet * has binding name 'PointerToresqml20__PropertyKindFacet' for type 'resqml20:PropertyKindFacet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PropertyKindFacet
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PropertyKindFacet (-831)

#endif

/* resqml20__PatchOfValues * has binding name 'PointerToresqml20__PatchOfValues' for type 'resqml20:PatchOfValues' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchOfValues
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchOfValues (-829)

#endif

/* resqml20__StringLookup * has binding name 'PointerToresqml20__StringLookup' for type 'resqml20:StringLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StringLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__StringLookup (-827)

#endif

/* resqml20__PatchOfPoints * has binding name 'PointerToresqml20__PatchOfPoints' for type 'resqml20:PatchOfPoints' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchOfPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PatchOfPoints (-825)

#endif

/* resqml20__DoubleLookup * has binding name 'PointerToresqml20__DoubleLookup' for type 'resqml20:DoubleLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__DoubleLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__DoubleLookup (-823)

#endif

/* resqml20__ParameterTemplate * has binding name 'PointerToresqml20__ParameterTemplate' for type 'resqml20:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ParameterTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ParameterTemplate (-821)

#endif

/* resqml20__GeologicBoundaryKind * has binding name 'PointerToresqml20__GeologicBoundaryKind' for type 'resqml20:GeologicBoundaryKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicBoundaryKind
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GeologicBoundaryKind (-820)

#endif

/* resqml20__FluidMarker * has binding name 'PointerToresqml20__FluidMarker' for type 'resqml20:FluidMarker' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__FluidMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__FluidMarker (-819)

#endif

/* resqml20__FluidContact * has binding name 'PointerToresqml20__FluidContact' for type 'resqml20:FluidContact' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__FluidContact
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__FluidContact (-818)

#endif

/* resqml20__TimeSeriesParentage * has binding name 'PointerToresqml20__TimeSeriesParentage' for type 'resqml20:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeSeriesParentage
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeSeriesParentage (-817)

#endif

/* resqml20__Timestamp * has binding name 'PointerToresqml20__Timestamp' for type 'resqml20:Timestamp' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Timestamp
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Timestamp (-815)

#endif

/* eml20__PlaneAngleMeasure * has binding name 'PointerToeml20__PlaneAngleMeasure' for type 'eml20:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__PlaneAngleMeasure (-814)

#endif

/* resqml20__ChronostratigraphicRank * has binding name 'PointerToresqml20__ChronostratigraphicRank' for type 'resqml20:ChronostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ChronostratigraphicRank
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ChronostratigraphicRank (-812)

#endif

/* resqml20__ColumnLayerSplitCoordinateLines * has binding name 'PointerToresqml20__ColumnLayerSplitCoordinateLines' for type 'resqml20:ColumnLayerSplitCoordinateLines' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnLayerSplitCoordinateLines
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnLayerSplitCoordinateLines (-811)

#endif

/* resqml20__UnstructuredGridHingeNodeFaces * has binding name 'PointerToresqml20__UnstructuredGridHingeNodeFaces' for type 'resqml20:UnstructuredGridHingeNodeFaces' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredGridHingeNodeFaces
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredGridHingeNodeFaces (-810)

#endif

/* resqml20__Activation * has binding name 'PointerToresqml20__Activation' for type 'resqml20:Activation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Activation
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Activation (-809)

#endif

/* resqml20__RepresentationIdentity * has binding name 'PointerToresqml20__RepresentationIdentity' for type 'resqml20:RepresentationIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__RepresentationIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__RepresentationIdentity (-807)

#endif

/* resqml20__AbstractPropertyKind * has binding name 'PointerToresqml20__AbstractPropertyKind' for type 'resqml20:AbstractPropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractPropertyKind (-806)

#endif

/* eml20__AbstractVerticalCrs * has binding name 'PointerToeml20__AbstractVerticalCrs' for type 'eml20:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__AbstractVerticalCrs (-805)

#endif

/* eml20__LengthUom * has binding name 'PointerToeml20__LengthUom' for type 'eml20:LengthUom' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__LengthUom
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__LengthUom (-804)

#endif

/* eml20__AbstractProjectedCrs * has binding name 'PointerToeml20__AbstractProjectedCrs' for type 'eml20:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__AbstractProjectedCrs (-803)

#endif

/* resqml20__EdgePatch * has binding name 'PointerToresqml20__EdgePatch' for type 'resqml20:EdgePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__EdgePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__EdgePatch (-801)

#endif

/* resqml20__NameValuePair * has binding name 'PointerToresqml20__NameValuePair' for type 'resqml20:NameValuePair' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__NameValuePair
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__NameValuePair (-799)

#endif

/* resqml20__AdditionalGridPoints * has binding name 'PointerToresqml20__AdditionalGridPoints' for type 'resqml20:AdditionalGridPoints' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AdditionalGridPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AdditionalGridPoints (-797)

#endif

/* resqml20__ElementIndices * has binding name 'PointerToresqml20__ElementIndices' for type 'resqml20:ElementIndices' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ElementIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ElementIndices (-795)

#endif

/* resqml20__ThreePoint3d * has binding name 'PointerToresqml20__ThreePoint3d' for type 'resqml20:ThreePoint3d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ThreePoint3d
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ThreePoint3d (-793)

#endif

/* resqml20__IntegerConstantArray * has binding name 'PointerToresqml20__IntegerConstantArray' for type 'resqml20:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntegerConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntegerConstantArray (-791)

#endif

/* resqml20__DoubleConstantArray * has binding name 'PointerToresqml20__DoubleConstantArray' for type 'resqml20:DoubleConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__DoubleConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__DoubleConstantArray (-789)

#endif

/* resqml20__IntervalGridCells * has binding name 'PointerToresqml20__IntervalGridCells' for type 'resqml20:IntervalGridCells' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntervalGridCells
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntervalGridCells (-788)

#endif

/* resqml20__PointGeometry * has binding name 'PointerToresqml20__PointGeometry' for type 'resqml20:PointGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PointGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__PointGeometry (-787)

#endif

/* resqml20__ContactPatch * has binding name 'PointerToresqml20__ContactPatch' for type 'resqml20:ContactPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactPatch (-785)

#endif

/* resqml20__ContactMode * has binding name 'PointerToresqml20__ContactMode' for type 'resqml20:ContactMode' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactMode
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactMode (-783)

#endif

/* resqml20__ContactSide * has binding name 'PointerToresqml20__ContactSide' for type 'resqml20:ContactSide' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactSide
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactSide (-782)

#endif

/* resqml20__ContactElementReference * has binding name 'PointerToresqml20__ContactElementReference' for type 'resqml20:ContactElementReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactElementReference
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ContactElementReference (-781)

#endif

/* resqml20__IjkGridGeometry * has binding name 'PointerToresqml20__IjkGridGeometry' for type 'resqml20:IjkGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IjkGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IjkGridGeometry (-780)

#endif

/* resqml20__UnstructuredGridGeometry * has binding name 'PointerToresqml20__UnstructuredGridGeometry' for type 'resqml20:UnstructuredGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredGridGeometry (-779)

#endif

/* resqml20__ColumnSubnodePatch * has binding name 'PointerToresqml20__ColumnSubnodePatch' for type 'resqml20:ColumnSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnSubnodePatch (-777)

#endif

/* resqml20__TruncationCellPatch * has binding name 'PointerToresqml20__TruncationCellPatch' for type 'resqml20:TruncationCellPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TruncationCellPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TruncationCellPatch (-776)

#endif

/* resqml20__UnstructuredColumnLayerGridGeometry * has binding name 'PointerToresqml20__UnstructuredColumnLayerGridGeometry' for type 'resqml20:UnstructuredColumnLayerGridGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredColumnLayerGridGeometry (-775)

#endif

/* resqml20__NodesPerCell * has binding name 'PointerToresqml20__NodesPerCell' for type 'resqml20:NodesPerCell' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__NodesPerCell
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__NodesPerCell (-774)

#endif

/* resqml20__Edges * has binding name 'PointerToresqml20__Edges' for type 'resqml20:Edges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Edges
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Edges (-773)

#endif

/* resqml20__Regrid * has binding name 'PointerToresqml20__Regrid' for type 'resqml20:Regrid' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Regrid
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Regrid (-772)

#endif

/* resqml20__AbstractParametricLineArray * has binding name 'PointerToresqml20__AbstractParametricLineArray' for type 'resqml20:AbstractParametricLineArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParametricLineArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParametricLineArray (-771)

#endif

/* resqml20__ParametricLineIntersections * has binding name 'PointerToresqml20__ParametricLineIntersections' for type 'resqml20:ParametricLineIntersections' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ParametricLineIntersections
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ParametricLineIntersections (-770)

#endif

/* resqml20__AbstractSeismicCoordinates * has binding name 'PointerToresqml20__AbstractSeismicCoordinates' for type 'resqml20:AbstractSeismicCoordinates' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractSeismicCoordinates
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractSeismicCoordinates (-769)

#endif

/* resqml20__Point3dOffset * has binding name 'PointerToresqml20__Point3dOffset' for type 'resqml20:Point3dOffset' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Point3dOffset
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Point3dOffset (-767)

#endif

/* resqml20__IntegerLatticeArray * has binding name 'PointerToresqml20__IntegerLatticeArray' for type 'resqml20:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntegerLatticeArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IntegerLatticeArray (-766)

#endif

/* eml20__Hdf5Dataset * has binding name 'PointerToeml20__Hdf5Dataset' for type 'eml20:Hdf5Dataset' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__Hdf5Dataset
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__Hdf5Dataset (-765)

#endif

/* ptm__equivalentPropertyType * has binding name 'PointerToptm__equivalentPropertyType' for type 'ptm:equivalentPropertyType' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToptm__equivalentPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToptm__equivalentPropertyType (-763)

#endif

/* resqml20__ResqmlPropertyKind * has binding name 'PointerToresqml20__ResqmlPropertyKind' for type 'resqml20:ResqmlPropertyKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ResqmlPropertyKind
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ResqmlPropertyKind (-762)

#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerTobool
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerTobool (-761)

#endif

/* ptm__standardEnergisticsPropertyType * has binding name 'PointerToptm__standardEnergisticsPropertyType' for type 'ptm:standardEnergisticsPropertyType' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToptm__standardEnergisticsPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToptm__standardEnergisticsPropertyType (-759)

#endif

/* std::string * has binding name 'PointerToeml20__DescriptionString' for type 'eml20:DescriptionString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__DescriptionString
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__DescriptionString (-758)

#endif

/* eml20__CustomData * has binding name 'PointerToeml20__CustomData' for type 'eml20:CustomData' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__CustomData
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__CustomData (-757)

#endif

/* eml20__ObjectAlias * has binding name 'PointerToeml20__ObjectAlias' for type 'eml20:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__ObjectAlias
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__ObjectAlias (-755)

#endif

/* eml20__Citation * has binding name 'PointerToeml20__Citation' for type 'eml20:Citation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__Citation
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__Citation (-754)

#endif

/* std::string * has binding name 'PointerToeml20__CommentString' for type 'eml20:CommentString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__CommentString
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__CommentString (-753)

#endif

/* struct tm * has binding name 'PointerToxsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToxsd__dateTime
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToxsd__dateTime (-752)

#endif

/* std::string * has binding name 'PointerToeml20__NameString' for type 'eml20:NameString' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__NameString
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__NameString (-751)

#endif

/* resqml20__AbstractParameterKey * has binding name 'PointerToresqml20__AbstractParameterKey' for type 'resqml20:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractParameterKey (-748)

#endif

/* resqml20__AbstractActivityParameter * has binding name 'PointerToresqml20__AbstractActivityParameter' for type 'resqml20:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractActivityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractActivityParameter (-746)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerTostd__string
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerTostd__string (-745)

#endif

/* resqml20__OrientedMacroFace * has binding name 'PointerToresqml20__OrientedMacroFace' for type 'resqml20:OrientedMacroFace' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__OrientedMacroFace
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__OrientedMacroFace (-741)

#endif

/* resqml20__VolumeShell * has binding name 'PointerToresqml20__VolumeShell' for type 'resqml20:VolumeShell' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__VolumeShell
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__VolumeShell (-739)

#endif

/* LONG64 * has binding name 'PointerToLONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToLONG64
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToLONG64 (-738)

#endif

/* resqml20__TimeInterval * has binding name 'PointerToresqml20__TimeInterval' for type 'resqml20:TimeInterval' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeInterval
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeInterval (-736)

#endif

/* resqml20__CellOverlap * has binding name 'PointerToresqml20__CellOverlap' for type 'resqml20:CellOverlap' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__CellOverlap
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__CellOverlap (-734)

#endif

/* struct __resqml20__OverlapVolume_sequence * has binding name 'PointerTo__resqml20__OverlapVolume_sequence' for type '-resqml20:OverlapVolume-sequence' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__OverlapVolume_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__OverlapVolume_sequence (-733)

#endif

/* struct __resqml20__CellOverlap_sequence * has binding name 'PointerTo__resqml20__CellOverlap_sequence' for type '-resqml20:CellOverlap-sequence' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__CellOverlap_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__CellOverlap_sequence (-731)

#endif

/* resqml20__OverlapVolume * has binding name 'PointerToresqml20__OverlapVolume' for type 'resqml20:OverlapVolume' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__OverlapVolume
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__OverlapVolume (-730)

#endif

/* resqml20__Intervals * has binding name 'PointerToresqml20__Intervals' for type 'resqml20:Intervals' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Intervals
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Intervals (-727)

#endif

/* struct __resqml20__KGaps_sequence * has binding name 'PointerTo__resqml20__KGaps_sequence' for type '-resqml20:KGaps-sequence' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__KGaps_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__KGaps_sequence (-726)

#endif

/* resqml20__AbstractBooleanArray * has binding name 'PointerToresqml20__AbstractBooleanArray' for type 'resqml20:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractBooleanArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractBooleanArray (-725)

#endif

/* resqml20__GpGridUnstructuredColumnLayerGridPatch * has binding name 'PointerToresqml20__GpGridUnstructuredColumnLayerGridPatch' for type 'resqml20:GpGridUnstructuredColumnLayerGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridUnstructuredColumnLayerGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridUnstructuredColumnLayerGridPatch (-722)

#endif

/* resqml20__GpGridIjkGridPatch * has binding name 'PointerToresqml20__GpGridIjkGridPatch' for type 'resqml20:GpGridIjkGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridIjkGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__GpGridIjkGridPatch (-720)

#endif

/* resqml20__KGaps * has binding name 'PointerToresqml20__KGaps' for type 'resqml20:KGaps' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__KGaps
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__KGaps (-719)

#endif

/* struct __resqml20__IjGaps_sequence * has binding name 'PointerTo__resqml20__IjGaps_sequence' for type '-resqml20:IjGaps-sequence' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__IjGaps_sequence
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerTo__resqml20__IjGaps_sequence (-718)

#endif

/* resqml20__ResqmlJaggedArray * has binding name 'PointerToresqml20__ResqmlJaggedArray' for type 'resqml20:ResqmlJaggedArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ResqmlJaggedArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ResqmlJaggedArray (-717)

#endif

/* resqml20__UniformSubnodePatch * has binding name 'PointerToresqml20__UniformSubnodePatch' for type 'resqml20:UniformSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UniformSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UniformSubnodePatch (-714)

#endif

/* resqml20__VariableSubnodePatch * has binding name 'PointerToresqml20__VariableSubnodePatch' for type 'resqml20:VariableSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__VariableSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__VariableSubnodePatch (-712)

#endif

/* resqml20__ColumnLayerSubnodeTopology * has binding name 'PointerToresqml20__ColumnLayerSubnodeTopology' for type 'resqml20:ColumnLayerSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnLayerSubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnLayerSubnodeTopology (-711)

#endif

/* resqml20__UnstructuredSubnodeTopology * has binding name 'PointerToresqml20__UnstructuredSubnodeTopology' for type 'resqml20:UnstructuredSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredSubnodeTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredSubnodeTopology (-710)

#endif

/* resqml20__IjSplitColumnEdges * has binding name 'PointerToresqml20__IjSplitColumnEdges' for type 'resqml20:IjSplitColumnEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IjSplitColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__IjSplitColumnEdges (-709)

#endif

/* resqml20__SplitFaces * has binding name 'PointerToresqml20__SplitFaces' for type 'resqml20:SplitFaces' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SplitFaces
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SplitFaces (-708)

#endif

/* resqml20__UnstructuredColumnEdges * has binding name 'PointerToresqml20__UnstructuredColumnEdges' for type 'resqml20:UnstructuredColumnEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__UnstructuredColumnEdges (-707)

#endif

/* resqml20__ColumnLayerSplitColumnEdges * has binding name 'PointerToresqml20__ColumnLayerSplitColumnEdges' for type 'resqml20:ColumnLayerSplitColumnEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnLayerSplitColumnEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ColumnLayerSplitColumnEdges (-706)

#endif

/* resqml20__SplitNodePatch * has binding name 'PointerToresqml20__SplitNodePatch' for type 'resqml20:SplitNodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SplitNodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SplitNodePatch (-705)

#endif

/* resqml20__SplitEdges * has binding name 'PointerToresqml20__SplitEdges' for type 'resqml20:SplitEdges' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SplitEdges
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__SplitEdges (-704)

#endif

/* resqml20__AbstractGeometry * has binding name 'PointerToresqml20__AbstractGeometry' for type 'resqml20:AbstractGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractGeometry (-703)

#endif

/* resqml20__AdditionalGridTopology * has binding name 'PointerToresqml20__AdditionalGridTopology' for type 'resqml20:AdditionalGridTopology' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AdditionalGridTopology
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AdditionalGridTopology (-702)

#endif

/* resqml20__ElementIdentity * has binding name 'PointerToresqml20__ElementIdentity' for type 'resqml20:ElementIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ElementIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__ElementIdentity (-700)

#endif

/* resqml20__AbstractIntegerArray * has binding name 'PointerToresqml20__AbstractIntegerArray' for type 'resqml20:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractIntegerArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractIntegerArray (-699)

#endif

/* eml20__DataObjectReference * has binding name 'PointerToeml20__DataObjectReference' for type 'eml20:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__DataObjectReference
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToeml20__DataObjectReference (-697)

#endif

/* resqml20__TimeIndex * has binding name 'PointerToresqml20__TimeIndex' for type 'resqml20:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__TimeIndex (-696)

#endif

/* resqml20__AbstractDoubleArray * has binding name 'PointerToresqml20__AbstractDoubleArray' for type 'resqml20:AbstractDoubleArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractDoubleArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractDoubleArray (-695)

#endif

/* resqml20__Point3d * has binding name 'PointerToresqml20__Point3d' for type 'resqml20:Point3d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Point3d
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__Point3d (-694)

#endif

/* resqml20__AbstractValueArray * has binding name 'PointerToresqml20__AbstractValueArray' for type 'resqml20:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractValueArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractValueArray (-693)

#endif

/* resqml20__AbstractPoint3dArray * has binding name 'PointerToresqml20__AbstractPoint3dArray' for type 'resqml20:AbstractPoint3dArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractPoint3dArray
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToresqml20__AbstractPoint3dArray (-692)

#endif

/* ULONG64 * has binding name 'PointerToxsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_gsoap_resqml2_0_1_PointerToxsd__nonNegativeInteger (-691)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__QName
#define SOAP_TYPE_gsoap_resqml2_0_1__QName (-6)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1__XML
#define SOAP_TYPE_gsoap_resqml2_0_1__XML (-5)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_string
#define SOAP_TYPE_gsoap_resqml2_0_1_string (-4)

#endif

/* std::vector<resqml20__SealedContactRepresentationPart *>  has binding name 'std__vectorTemplateOfPointerToresqml20__SealedContactRepresentationPart' for type 'resqml20:SealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__SealedContactRepresentationPart (-896)

#endif

/* std::vector<resqml20__AbstractContactRepresentationPart *>  has binding name 'std__vectorTemplateOfPointerToresqml20__AbstractContactRepresentationPart' for type 'resqml20:AbstractContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractContactRepresentationPart (-894)

#endif

/* std::vector<resqml20__GeologicUnitInterpretationIndex *>  has binding name 'std__vectorTemplateOfPointerToresqml20__GeologicUnitInterpretationIndex' for type 'resqml20:GeologicUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GeologicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GeologicUnitInterpretationIndex (-892)

#endif

/* std::vector<resqml20__StratigraphicUnitInterpretationIndex *>  has binding name 'std__vectorTemplateOfPointerToresqml20__StratigraphicUnitInterpretationIndex' for type 'resqml20:StratigraphicUnitInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__StratigraphicUnitInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__StratigraphicUnitInterpretationIndex (-890)

#endif

/* std::vector<resqml20__Grid2dPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__Grid2dPatch' for type 'resqml20:Grid2dPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Grid2dPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Grid2dPatch (-887)

#endif

/* std::vector<resqml20__VolumeRegion *>  has binding name 'std__vectorTemplateOfPointerToresqml20__VolumeRegion' for type 'resqml20:VolumeRegion' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__VolumeRegion
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__VolumeRegion (-885)

#endif

/* std::vector<resqml20__ContactIdentity *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ContactIdentity' for type 'resqml20:ContactIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ContactIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ContactIdentity (-883)

#endif

/* std::vector<resqml20__AbstractPlaneGeometry *>  has binding name 'std__vectorTemplateOfPointerToresqml20__AbstractPlaneGeometry' for type 'resqml20:AbstractPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractPlaneGeometry (-881)

#endif

/* std::vector<resqml20__TrianglePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__TrianglePatch' for type 'resqml20:TrianglePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__TrianglePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__TrianglePatch (-879)

#endif

/* std::vector<resqml20__WellboreMarker *>  has binding name 'std__vectorTemplateOfPointerToresqml20__WellboreMarker' for type 'resqml20:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__WellboreMarker
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__WellboreMarker (-877)

#endif

/* std::vector<resqml20__FaultThrow *>  has binding name 'std__vectorTemplateOfPointerToresqml20__FaultThrow' for type 'resqml20:FaultThrow' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__FaultThrow
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__FaultThrow (-872)

#endif

/* std::vector<resqml20__HorizonInterpretationIndex *>  has binding name 'std__vectorTemplateOfPointerToresqml20__HorizonInterpretationIndex' for type 'resqml20:HorizonInterpretationIndex' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__HorizonInterpretationIndex
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__HorizonInterpretationIndex (-869)

#endif

/* std::vector<resqml20__BoundaryRelation>  has binding name 'std__vectorTemplateOfresqml20__BoundaryRelation' for type 'resqml20:BoundaryRelation' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfresqml20__BoundaryRelation
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfresqml20__BoundaryRelation (-867)

#endif

/* std::vector<resqml20__GpGridUnstructuredGridPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__GpGridUnstructuredGridPatch' for type 'resqml20:GpGridUnstructuredGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridUnstructuredGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridUnstructuredGridPatch (-864)

#endif

/* std::vector<resqml20__GpGridColumnLayerGrid *>  has binding name 'std__vectorTemplateOfPointerToresqml20__GpGridColumnLayerGrid' for type 'resqml20:GpGridColumnLayerGrid' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridColumnLayerGrid
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridColumnLayerGrid (-862)

#endif

/* std::vector<LONG64>  has binding name 'std__vectorTemplateOfxsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfxsd__integer
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfxsd__integer (-860)

#endif

/* std::vector<double>  has binding name 'std__vectorTemplateOfdouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfdouble
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfdouble (-859)

#endif

/* std::vector<resqml20__PatchBoundaries *>  has binding name 'std__vectorTemplateOfPointerToresqml20__PatchBoundaries' for type 'resqml20:PatchBoundaries' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchBoundaries
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchBoundaries (-856)

#endif

/* std::vector<resqml20__PolylineSetPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__PolylineSetPatch' for type 'resqml20:PolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PolylineSetPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PolylineSetPatch (-854)

#endif

/* std::vector<resqml20__NodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__NodePatch' for type 'resqml20:NodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__NodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__NodePatch (-851)

#endif

/* std::vector<resqml20__AbstractContactInterpretationPart *>  has binding name 'std__vectorTemplateOfPointerToresqml20__AbstractContactInterpretationPart' for type 'resqml20:AbstractContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractContactInterpretationPart (-843)

#endif

/* std::vector<resqml20__SubRepresentationPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__SubRepresentationPatch' for type 'resqml20:SubRepresentationPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__SubRepresentationPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__SubRepresentationPatch (-836)

#endif

/* std::vector<resqml20__PatchOfGeometry *>  has binding name 'std__vectorTemplateOfPointerToresqml20__PatchOfGeometry' for type 'resqml20:PatchOfGeometry' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchOfGeometry
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchOfGeometry (-834)

#endif

/* std::vector<resqml20__PropertyKindFacet *>  has binding name 'std__vectorTemplateOfPointerToresqml20__PropertyKindFacet' for type 'resqml20:PropertyKindFacet' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PropertyKindFacet
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PropertyKindFacet (-832)

#endif

/* std::vector<resqml20__PatchOfValues *>  has binding name 'std__vectorTemplateOfPointerToresqml20__PatchOfValues' for type 'resqml20:PatchOfValues' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchOfValues
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchOfValues (-830)

#endif

/* std::vector<resqml20__StringLookup *>  has binding name 'std__vectorTemplateOfPointerToresqml20__StringLookup' for type 'resqml20:StringLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__StringLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__StringLookup (-828)

#endif

/* std::vector<resqml20__PatchOfPoints *>  has binding name 'std__vectorTemplateOfPointerToresqml20__PatchOfPoints' for type 'resqml20:PatchOfPoints' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchOfPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__PatchOfPoints (-826)

#endif

/* std::vector<resqml20__DoubleLookup *>  has binding name 'std__vectorTemplateOfPointerToresqml20__DoubleLookup' for type 'resqml20:DoubleLookup' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__DoubleLookup
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__DoubleLookup (-824)

#endif

/* std::vector<resqml20__ParameterTemplate *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ParameterTemplate' for type 'resqml20:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ParameterTemplate
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ParameterTemplate (-822)

#endif

/* std::vector<resqml20__Timestamp *>  has binding name 'std__vectorTemplateOfPointerToresqml20__Timestamp' for type 'resqml20:Timestamp' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Timestamp
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Timestamp (-816)

#endif

/* std::vector<resqml20__ChronostratigraphicRank *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ChronostratigraphicRank' for type 'resqml20:ChronostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ChronostratigraphicRank
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ChronostratigraphicRank (-813)

#endif

/* std::vector<resqml20__RepresentationIdentity *>  has binding name 'std__vectorTemplateOfPointerToresqml20__RepresentationIdentity' for type 'resqml20:RepresentationIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__RepresentationIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__RepresentationIdentity (-808)

#endif

/* std::vector<resqml20__EdgePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__EdgePatch' for type 'resqml20:EdgePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__EdgePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__EdgePatch (-802)

#endif

/* std::vector<resqml20__NameValuePair *>  has binding name 'std__vectorTemplateOfPointerToresqml20__NameValuePair' for type 'resqml20:NameValuePair' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__NameValuePair
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__NameValuePair (-800)

#endif

/* std::vector<resqml20__AdditionalGridPoints *>  has binding name 'std__vectorTemplateOfPointerToresqml20__AdditionalGridPoints' for type 'resqml20:AdditionalGridPoints' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AdditionalGridPoints
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AdditionalGridPoints (-798)

#endif

/* std::vector<resqml20__ElementIndices *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ElementIndices' for type 'resqml20:ElementIndices' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ElementIndices
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ElementIndices (-796)

#endif

/* std::vector<resqml20__ThreePoint3d *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ThreePoint3d' for type 'resqml20:ThreePoint3d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ThreePoint3d
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ThreePoint3d (-794)

#endif

/* std::vector<resqml20__IntegerConstantArray *>  has binding name 'std__vectorTemplateOfPointerToresqml20__IntegerConstantArray' for type 'resqml20:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__IntegerConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__IntegerConstantArray (-792)

#endif

/* std::vector<resqml20__DoubleConstantArray *>  has binding name 'std__vectorTemplateOfPointerToresqml20__DoubleConstantArray' for type 'resqml20:DoubleConstantArray' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__DoubleConstantArray
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__DoubleConstantArray (-790)

#endif

/* std::vector<resqml20__ContactPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ContactPatch' for type 'resqml20:ContactPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ContactPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ContactPatch (-786)

#endif

/* std::vector<ULONG64>  has binding name 'std__vectorTemplateOfxsd__nonNegativeInteger' for type 'xsd:nonNegativeInteger' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfxsd__nonNegativeInteger
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfxsd__nonNegativeInteger (-784)

#endif

/* std::vector<resqml20__ColumnSubnodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ColumnSubnodePatch' for type 'resqml20:ColumnSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ColumnSubnodePatch (-778)

#endif

/* std::vector<resqml20__Point3dOffset *>  has binding name 'std__vectorTemplateOfPointerToresqml20__Point3dOffset' for type 'resqml20:Point3dOffset' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Point3dOffset
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Point3dOffset (-768)

#endif

/* std::vector<ptm__equivalentPropertyType *>  has binding name 'std__vectorTemplateOfPointerToptm__equivalentPropertyType' for type 'ptm:equivalentPropertyType' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToptm__equivalentPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToptm__equivalentPropertyType (-764)

#endif

/* std::vector<ptm__standardEnergisticsPropertyType *>  has binding name 'std__vectorTemplateOfPointerToptm__standardEnergisticsPropertyType' for type 'ptm:standardEnergisticsPropertyType' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToptm__standardEnergisticsPropertyType
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToptm__standardEnergisticsPropertyType (-760)

#endif

/* std::vector<eml20__ObjectAlias *>  has binding name 'std__vectorTemplateOfPointerToeml20__ObjectAlias' for type 'eml20:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToeml20__ObjectAlias
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToeml20__ObjectAlias (-756)

#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOf_XML
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOf_XML (-750)

#endif

/* std::vector<resqml20__AbstractParameterKey *>  has binding name 'std__vectorTemplateOfPointerToresqml20__AbstractParameterKey' for type 'resqml20:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractParameterKey
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractParameterKey (-749)

#endif

/* std::vector<resqml20__AbstractActivityParameter *>  has binding name 'std__vectorTemplateOfPointerToresqml20__AbstractActivityParameter' for type 'resqml20:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractActivityParameter
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__AbstractActivityParameter (-747)

#endif

/* std::vector<resqml20__ParameterKind>  has binding name 'std__vectorTemplateOfresqml20__ParameterKind' for type 'resqml20:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfresqml20__ParameterKind
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfresqml20__ParameterKind (-744)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfstd__string
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfstd__string (-743)

#endif

/* std::vector<resqml20__OrientedMacroFace *>  has binding name 'std__vectorTemplateOfPointerToresqml20__OrientedMacroFace' for type 'resqml20:OrientedMacroFace' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__OrientedMacroFace
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__OrientedMacroFace (-742)

#endif

/* std::vector<resqml20__VolumeShell *>  has binding name 'std__vectorTemplateOfPointerToresqml20__VolumeShell' for type 'resqml20:VolumeShell' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__VolumeShell
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__VolumeShell (-740)

#endif

/* std::vector<resqml20__ThrowKind>  has binding name 'std__vectorTemplateOfresqml20__ThrowKind' for type 'resqml20:ThrowKind' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfresqml20__ThrowKind
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfresqml20__ThrowKind (-735)

#endif

/* std::vector<eml20__DataObjectReference *>  has binding name 'std__vectorTemplateOfPointerToeml20__DataObjectReference' for type 'eml20:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToeml20__DataObjectReference
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToeml20__DataObjectReference (-728)

#endif

/* std::vector<resqml20__GpGridUnstructuredColumnLayerGridPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__GpGridUnstructuredColumnLayerGridPatch' for type 'resqml20:GpGridUnstructuredColumnLayerGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridUnstructuredColumnLayerGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridUnstructuredColumnLayerGridPatch (-723)

#endif

/* std::vector<resqml20__GpGridIjkGridPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__GpGridIjkGridPatch' for type 'resqml20:GpGridIjkGridPatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridIjkGridPatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__GpGridIjkGridPatch (-721)

#endif

/* std::vector<resqml20__UniformSubnodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__UniformSubnodePatch' for type 'resqml20:UniformSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__UniformSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__UniformSubnodePatch (-715)

#endif

/* std::vector<resqml20__VariableSubnodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml20__VariableSubnodePatch' for type 'resqml20:VariableSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__VariableSubnodePatch
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__VariableSubnodePatch (-713)

#endif

/* std::vector<resqml20__ElementIdentity *>  has binding name 'std__vectorTemplateOfPointerToresqml20__ElementIdentity' for type 'resqml20:ElementIdentity' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ElementIdentity
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__ElementIdentity (-701)

#endif

/* std::vector<resqml20__Point3d *>  has binding name 'std__vectorTemplateOfPointerToresqml20__Point3d' for type 'resqml20:Point3d' */
#ifndef SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Point3d
#define SOAP_TYPE_gsoap_resqml2_0_1_std__vectorTemplateOfPointerToresqml20__Point3d (-698)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace gsoap_resqml2_0_1


#endif

/* End of gsoap_resqml2_0_1Stub.h */
