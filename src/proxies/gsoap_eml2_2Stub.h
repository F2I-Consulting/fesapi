/* gsoap_eml2_2Stub.h
   Generated by gSOAP 2.8.68 for eml2_2ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool is licensed for commercial use, no resale/redistribution.
--------------------------------------------------------------------------------
Product and source code licensed by Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_witsml2	"http://www.energistics.org/energyml/data/witsmlv2"
#define SOAP_NAMESPACE_OF_eml22	"http://www.energistics.org/energyml/data/commonv2"
#define SOAP_NAMESPACE_OF_gml	"http://www.opengis.net/gml/3.2"
#define SOAP_NAMESPACE_OF_xlink	"http://www.w3.org/1999/xlink"
#define SOAP_NAMESPACE_OF_gmd	"http://www.isotc211.org/2005/gmd"
#define SOAP_NAMESPACE_OF_gts	"http://www.isotc211.org/2005/gts"
#define SOAP_NAMESPACE_OF_gco	"http://www.isotc211.org/2005/gco"
#define SOAP_NAMESPACE_OF_gsr	"http://www.isotc211.org/2005/gsr"
#include <time.h>

#ifndef gsoap_eml2_2Stub_H
#define gsoap_eml2_2Stub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20868
# error "GSOAP VERSION 20868 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace gsoap_eml2_2 {

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* eml2_2ForGsoap.h:3523 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AggregationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AggregationType (-1073)

/* gml:AggregationType */
enum gml__AggregationType {
	gml__AggregationType__set = 0,
	gml__AggregationType__bag = 1,
	gml__AggregationType__sequence = 2,
	gml__AggregationType__array = 3,
	gml__AggregationType__record = 4,
	gml__AggregationType__table = 5
};
#endif

/* eml2_2ForGsoap.h:3550 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__show
#define SOAP_TYPE_gsoap_eml2_2__xlink__show (-1074)

/* xlink:show */
enum _xlink__show {
	_xlink__show__new_ = 0,
	_xlink__show__replace = 1,
	_xlink__show__embed = 2,
	_xlink__show__other = 3,
	_xlink__show__none = 4
};
#endif

/* eml2_2ForGsoap.h:3566 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__actuate
#define SOAP_TYPE_gsoap_eml2_2__xlink__actuate (-1075)

/* xlink:actuate */
enum _xlink__actuate {
	_xlink__actuate__onLoad = 0,
	_xlink__actuate__onRequest = 1,
	_xlink__actuate__other = 2,
	_xlink__actuate__none = 3
};
#endif

/* eml2_2ForGsoap.h:3712 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure (-1083)

/* eml22:LegacyUnitOfMeasure */
enum eml22__LegacyUnitOfMeasure {
	eml22__LegacyUnitOfMeasure__1000scf_x002fd = 0,
	eml22__LegacyUnitOfMeasure__1000scf_x002fmo = 1,
	eml22__LegacyUnitOfMeasure__1000scf_x002fstb = 2,
	eml22__LegacyUnitOfMeasure__1000scm = 3,
	eml22__LegacyUnitOfMeasure__1000scm_x002fd = 4,
	eml22__LegacyUnitOfMeasure__1000scm_x002fmo = 5,
	eml22__LegacyUnitOfMeasure__1000stb = 6,
	eml22__LegacyUnitOfMeasure__1000stb_x002fd = 7,
	eml22__LegacyUnitOfMeasure__1000stb_x002fmo = 8,
	eml22__LegacyUnitOfMeasure__1E6scf = 9,
	eml22__LegacyUnitOfMeasure__1E6scf_x002fd = 10,
	eml22__LegacyUnitOfMeasure__1E6scf_x002fmo = 11,
	eml22__LegacyUnitOfMeasure__1E6scf_x002fstb = 12,
	eml22__LegacyUnitOfMeasure__1E6scm = 13,
	eml22__LegacyUnitOfMeasure__1E6scm_x002fd = 14,
	eml22__LegacyUnitOfMeasure__1E6scm_x002fmo = 15,
	eml22__LegacyUnitOfMeasure__1E6stb = 16,
	eml22__LegacyUnitOfMeasure__1E6stb_x002facre = 17,
	eml22__LegacyUnitOfMeasure__1E6stb_x002facre_x002eft = 18,
	eml22__LegacyUnitOfMeasure__1E6stb_x002fd = 19,
	eml22__LegacyUnitOfMeasure__1E6stb_x002fmo = 20,
	eml22__LegacyUnitOfMeasure__1E9scf = 21,
	eml22__LegacyUnitOfMeasure__acre_x002eft_x002f1E6stb = 22,
	eml22__LegacyUnitOfMeasure__bbl_x002f1000scf = 23,
	eml22__LegacyUnitOfMeasure__bbl_x002f1E6scf = 24,
	eml22__LegacyUnitOfMeasure__bbl_x002fscf = 25,
	eml22__LegacyUnitOfMeasure__bbl_x002fstb = 26,
	eml22__LegacyUnitOfMeasure__ft3_x002fscf = 27,
	eml22__LegacyUnitOfMeasure__ft3_x002fstb = 28,
	eml22__LegacyUnitOfMeasure__galUS_x002f1000scf = 29,
	eml22__LegacyUnitOfMeasure__kg_x002fscm = 30,
	eml22__LegacyUnitOfMeasure__kscf = 31,
	eml22__LegacyUnitOfMeasure__lbm_x002f1000scf = 32,
	eml22__LegacyUnitOfMeasure__lbm_x002f1E6scf = 33,
	eml22__LegacyUnitOfMeasure__m3_x002fscm = 34,
	eml22__LegacyUnitOfMeasure__ml_x002fscm = 35,
	eml22__LegacyUnitOfMeasure__Pa_x002fscm = 36,
	eml22__LegacyUnitOfMeasure__psi_x002f1000scf = 37,
	eml22__LegacyUnitOfMeasure__psi_x002f1E6scf = 38,
	eml22__LegacyUnitOfMeasure__psia = 39,
	eml22__LegacyUnitOfMeasure__psig = 40,
	eml22__LegacyUnitOfMeasure__scf = 41,
	eml22__LegacyUnitOfMeasure__scf_x002fbbl = 42,
	eml22__LegacyUnitOfMeasure__scf_x002fd = 43,
	eml22__LegacyUnitOfMeasure__scf_x002fft2 = 44,
	eml22__LegacyUnitOfMeasure__scf_x002fft3 = 45,
	eml22__LegacyUnitOfMeasure__scf_x002fscf = 46,
	eml22__LegacyUnitOfMeasure__scf_x002fstb = 47,
	eml22__LegacyUnitOfMeasure__scm = 48,
	eml22__LegacyUnitOfMeasure__scm_x002fd = 49,
	eml22__LegacyUnitOfMeasure__scm_x002fh = 50,
	eml22__LegacyUnitOfMeasure__scm_x002fm2 = 51,
	eml22__LegacyUnitOfMeasure__scm_x002fm3 = 52,
	eml22__LegacyUnitOfMeasure__scm_x002fmo = 53,
	eml22__LegacyUnitOfMeasure__scm_x002fs = 54,
	eml22__LegacyUnitOfMeasure__scm_x002fscm = 55,
	eml22__LegacyUnitOfMeasure__scm_x002fstb = 56,
	eml22__LegacyUnitOfMeasure__stb = 57,
	eml22__LegacyUnitOfMeasure__stb_x002f1000scf = 58,
	eml22__LegacyUnitOfMeasure__stb_x002f1000scm = 59,
	eml22__LegacyUnitOfMeasure__stb_x002f1E6scf = 60,
	eml22__LegacyUnitOfMeasure__stb_x002f1E6scm = 61,
	eml22__LegacyUnitOfMeasure__stb_x002facre = 62,
	eml22__LegacyUnitOfMeasure__stb_x002fbbl = 63,
	eml22__LegacyUnitOfMeasure__stb_x002fd = 64,
	eml22__LegacyUnitOfMeasure__stb_x002fmo = 'A',
	eml22__LegacyUnitOfMeasure__stb_x002fscm = 'B',
	eml22__LegacyUnitOfMeasure__stb_x002fstb = 'C'
};
#endif

/* eml2_2ForGsoap.h:3790 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure (-1084)

/* eml22:UnitOfMeasure */
enum eml22__UnitOfMeasure {
	eml22__UnitOfMeasure__A = 'A',
	eml22__UnitOfMeasure__a = 'a',
	eml22__UnitOfMeasure__B = 'B',
	eml22__UnitOfMeasure__b = 'b',
	eml22__UnitOfMeasure__C = 'C',
	eml22__UnitOfMeasure__d = 'd',
	eml22__UnitOfMeasure__D = 'D',
	eml22__UnitOfMeasure__F = 'F',
	eml22__UnitOfMeasure__g = 'g',
	eml22__UnitOfMeasure__H = 'H',
	eml22__UnitOfMeasure__h = 'h',
	eml22__UnitOfMeasure__J = 'J',
	eml22__UnitOfMeasure__K = 'K',
	eml22__UnitOfMeasure__L = 'L',
	eml22__UnitOfMeasure__m = 'm',
	eml22__UnitOfMeasure__N = 'N',
	eml22__UnitOfMeasure__O = 'O',
	eml22__UnitOfMeasure__P = 'P',
	eml22__UnitOfMeasure__S = 'S',
	eml22__UnitOfMeasure__s = 's',
	eml22__UnitOfMeasure__T = 'T',
	eml22__UnitOfMeasure__t = 't',
	eml22__UnitOfMeasure__V = 'V',
	eml22__UnitOfMeasure__W = 'W',
	eml22__UnitOfMeasure___x0025 = 'u',
	eml22__UnitOfMeasure___x0025_x005barea_x005d = 'v',
	eml22__UnitOfMeasure___x0025_x005bmass_x005d = 'w',
	eml22__UnitOfMeasure___x0025_x005bmolar_x005d = 'x',
	eml22__UnitOfMeasure___x0025_x005bvol_x005d = 'y',
	eml22__UnitOfMeasure___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 'z',
	eml22__UnitOfMeasure___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 123,
	eml22__UnitOfMeasure___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 124,
	eml22__UnitOfMeasure__0_x002e001_x0020bbl_x002fft3 = 125,
	eml22__UnitOfMeasure__0_x002e001_x0020bbl_x002fm3 = 126,
	eml22__UnitOfMeasure__0_x002e001_x0020d_x002fft3 = 127,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 128,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 129,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 130,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 131,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 132,
	eml22__UnitOfMeasure__0_x002e001_x0020h_x002fft = 133,
	eml22__UnitOfMeasure__0_x002e001_x0020kPa2_x002fcP = 134,
	eml22__UnitOfMeasure__0_x002e001_x0020lbm_x002fbbl = 135,
	eml22__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 136,
	eml22__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 137,
	eml22__UnitOfMeasure__0_x002e001_x0020psi_x002fft = 138,
	eml22__UnitOfMeasure__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 139,
	eml22__UnitOfMeasure__0_x002e001_x0020seca = 140,
	eml22__UnitOfMeasure__0_x002e01_x0020bbl_x002fbbl = 141,
	eml22__UnitOfMeasure__0_x002e01_x0020dega_x002fft = 142,
	eml22__UnitOfMeasure__0_x002e01_x0020degF_x002fft = 143,
	eml22__UnitOfMeasure__0_x002e01_x0020dm3_x002fkm = 144,
	eml22__UnitOfMeasure__0_x002e01_x0020ft_x002fft = 145,
	eml22__UnitOfMeasure__0_x002e01_x0020grain_x002fft3 = 146,
	eml22__UnitOfMeasure__0_x002e01_x0020L_x002fkg = 147,
	eml22__UnitOfMeasure__0_x002e01_x0020L_x002fkm = 148,
	eml22__UnitOfMeasure__0_x002e01_x0020lbf_x002fft = 149,
	eml22__UnitOfMeasure__0_x002e01_x0020lbf_x002fft2 = 150,
	eml22__UnitOfMeasure__0_x002e01_x0020lbm_x002fft2 = 151,
	eml22__UnitOfMeasure__0_x002e01_x0020psi_x002fft = 152,
	eml22__UnitOfMeasure__0_x002e1_x0020ft = 153,
	eml22__UnitOfMeasure__0_x002e1_x0020ft_x005bUS_x005d = 154,
	eml22__UnitOfMeasure__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 155,
	eml22__UnitOfMeasure__0_x002e1_x0020in = 156,
	eml22__UnitOfMeasure__0_x002e1_x0020L_x002fbbl = 157,
	eml22__UnitOfMeasure__0_x002e1_x0020lbm_x002fbbl = 158,
	eml22__UnitOfMeasure__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 159,
	eml22__UnitOfMeasure__0_x002e1_x0020yd = 160,
	eml22__UnitOfMeasure__1_x002f_x0028kg_x002es_x0029 = 161,
	eml22__UnitOfMeasure__1_x002f16_x0020in = 162,
	eml22__UnitOfMeasure__1_x002f2_x0020ft = 163,
	eml22__UnitOfMeasure__1_x002f2_x0020ms = 164,
	eml22__UnitOfMeasure__1_x002f30_x0020cm3_x002fmin = 165,
	eml22__UnitOfMeasure__1_x002f30_x0020dega_x002fft = 166,
	eml22__UnitOfMeasure__1_x002f30_x0020dega_x002fm = 167,
	eml22__UnitOfMeasure__1_x002f30_x0020lbf_x002fm = 168,
	eml22__UnitOfMeasure__1_x002f30_x0020m_x002fm = 169,
	eml22__UnitOfMeasure__1_x002f30_x0020N_x002fm = 170,
	eml22__UnitOfMeasure__1_x002f32_x0020in = 171,
	eml22__UnitOfMeasure__1_x002f64_x0020in = 172,
	eml22__UnitOfMeasure__1_x002fa = 173,
	eml22__UnitOfMeasure__1_x002fangstrom = 174,
	eml22__UnitOfMeasure__1_x002fbar = 175,
	eml22__UnitOfMeasure__1_x002fbbl = 176,
	eml22__UnitOfMeasure__1_x002fcm = 177,
	eml22__UnitOfMeasure__1_x002fd = 178,
	eml22__UnitOfMeasure__1_x002fdegC = 179,
	eml22__UnitOfMeasure__1_x002fdegF = 180,
	eml22__UnitOfMeasure__1_x002fdegR = 181,
	eml22__UnitOfMeasure__1_x002fft = 182,
	eml22__UnitOfMeasure__1_x002fft2 = 183,
	eml22__UnitOfMeasure__1_x002fft3 = 184,
	eml22__UnitOfMeasure__1_x002fg = 185,
	eml22__UnitOfMeasure__1_x002fgal_x005bUK_x005d = 186,
	eml22__UnitOfMeasure__1_x002fgal_x005bUS_x005d = 187,
	eml22__UnitOfMeasure__1_x002fH = 188,
	eml22__UnitOfMeasure__1_x002fh = 189,
	eml22__UnitOfMeasure__1_x002fin = 190,
	eml22__UnitOfMeasure__1_x002fK = 191,
	eml22__UnitOfMeasure__1_x002fkg = 192,
	eml22__UnitOfMeasure__1_x002fkm2 = 193,
	eml22__UnitOfMeasure__1_x002fkPa = 194,
	eml22__UnitOfMeasure__1_x002fL = 195,
	eml22__UnitOfMeasure__1_x002flbf = 196,
	eml22__UnitOfMeasure__1_x002flbm = 197,
	eml22__UnitOfMeasure__1_x002fm = 198,
	eml22__UnitOfMeasure__1_x002fm2 = 199,
	eml22__UnitOfMeasure__1_x002fm3 = 200,
	eml22__UnitOfMeasure__1_x002fmi = 201,
	eml22__UnitOfMeasure__1_x002fmi2 = 202,
	eml22__UnitOfMeasure__1_x002fmin = 203,
	eml22__UnitOfMeasure__1_x002fmm = 204,
	eml22__UnitOfMeasure__1_x002fms = 205,
	eml22__UnitOfMeasure__1_x002fN = 206,
	eml22__UnitOfMeasure__1_x002fnm = 207,
	eml22__UnitOfMeasure__1_x002fPa = 208,
	eml22__UnitOfMeasure__1_x002fpPa = 209,
	eml22__UnitOfMeasure__1_x002fpsi = 210,
	eml22__UnitOfMeasure__1_x002fs = 211,
	eml22__UnitOfMeasure__1_x002fupsi = 212,
	eml22__UnitOfMeasure__1_x002fus = 213,
	eml22__UnitOfMeasure__1_x002fuV = 214,
	eml22__UnitOfMeasure__1_x002fV = 215,
	eml22__UnitOfMeasure__1_x002fwk = 216,
	eml22__UnitOfMeasure__1_x002fyd = 217,
	eml22__UnitOfMeasure__10_x0020ft = 218,
	eml22__UnitOfMeasure__10_x0020in = 219,
	eml22__UnitOfMeasure__10_x0020km = 220,
	eml22__UnitOfMeasure__10_x0020kN = 221,
	eml22__UnitOfMeasure__10_x0020Mg_x002fm3 = 222,
	eml22__UnitOfMeasure__100_x0020ft = 223,
	eml22__UnitOfMeasure__100_x0020ka_x005bt_x005d = 224,
	eml22__UnitOfMeasure__100_x0020km = 225,
	eml22__UnitOfMeasure__1000_x0020bbl = 226,
	eml22__UnitOfMeasure__1000_x0020bbl_x002eft_x002fd = 227,
	eml22__UnitOfMeasure__1000_x0020bbl_x002fd = 228,
	eml22__UnitOfMeasure__1000_x0020ft = 229,
	eml22__UnitOfMeasure__1000_x0020ft_x002fh = 230,
	eml22__UnitOfMeasure__1000_x0020ft_x002fs = 231,
	eml22__UnitOfMeasure__1000_x0020ft3 = 232,
	eml22__UnitOfMeasure__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 233,
	eml22__UnitOfMeasure__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 234,
	eml22__UnitOfMeasure__1000_x0020ft3_x002fbbl = 235,
	eml22__UnitOfMeasure__1000_x0020ft3_x002fd = 236,
	eml22__UnitOfMeasure__1000_x0020gal_x005bUK_x005d = 237,
	eml22__UnitOfMeasure__1000_x0020gal_x005bUS_x005d = 238,
	eml22__UnitOfMeasure__1000_x0020lbf_x002eft = 239,
	eml22__UnitOfMeasure__1000_x0020m3 = 240,
	eml22__UnitOfMeasure__1000_x0020m3_x002f_x0028d_x002em_x0029 = 241,
	eml22__UnitOfMeasure__1000_x0020m3_x002f_x0028h_x002em_x0029 = 242,
	eml22__UnitOfMeasure__1000_x0020m3_x002fd = 243,
	eml22__UnitOfMeasure__1000_x0020m3_x002fh = 244,
	eml22__UnitOfMeasure__1000_x0020m3_x002fm3 = 245,
	eml22__UnitOfMeasure__1000_x0020m4_x002fd = 246,
	eml22__UnitOfMeasure__1E12_x0020ft3 = 247,
	eml22__UnitOfMeasure__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 248,
	eml22__UnitOfMeasure__1E_6_x0020acre_x002eft_x002fbbl = 249,
	eml22__UnitOfMeasure__1E6_x0020bbl = 250,
	eml22__UnitOfMeasure__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 251,
	eml22__UnitOfMeasure__1E6_x0020bbl_x002facre = 252,
	eml22__UnitOfMeasure__1E6_x0020bbl_x002fd = 253,
	eml22__UnitOfMeasure__1E_6_x0020bbl_x002fft3 = 254,
	eml22__UnitOfMeasure__1E_6_x0020bbl_x002fm3 = 255,
	eml22__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d = 256,
	eml22__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d_x002fh = 257,
	eml22__UnitOfMeasure__1E6_x0020ft3 = 258,
	eml22__UnitOfMeasure__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 259,
	eml22__UnitOfMeasure__1E6_x0020ft3_x002fbbl = 260,
	eml22__UnitOfMeasure__1E6_x0020ft3_x002fd = 261,
	eml22__UnitOfMeasure__1E_6_x0020gal_x005bUS_x005d = 262,
	eml22__UnitOfMeasure__1E6_x0020lbm_x002fa = 263,
	eml22__UnitOfMeasure__1E6_x0020m3 = 264,
	eml22__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegC_x0029 = 265,
	eml22__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegF_x0029 = 266,
	eml22__UnitOfMeasure__1E6_x0020m3_x002fd = 267,
	eml22__UnitOfMeasure__1E_9_x00201_x002fft = 268,
	eml22__UnitOfMeasure__1E9_x0020bbl = 269,
	eml22__UnitOfMeasure__1E9_x0020ft3 = 270,
	eml22__UnitOfMeasure__30_x0020ft = 271,
	eml22__UnitOfMeasure__30_x0020m = 272,
	eml22__UnitOfMeasure__A_x002eh = 273,
	eml22__UnitOfMeasure__A_x002em2 = 274,
	eml22__UnitOfMeasure__A_x002es = 275,
	eml22__UnitOfMeasure__A_x002es_x002fkg = 276,
	eml22__UnitOfMeasure__A_x002es_x002fm3 = 277,
	eml22__UnitOfMeasure__A_x002fcm2 = 278,
	eml22__UnitOfMeasure__A_x002fft2 = 279,
	eml22__UnitOfMeasure__A_x002fm = 280,
	eml22__UnitOfMeasure__A_x002fm2 = 281,
	eml22__UnitOfMeasure__A_x002fmm = 282,
	eml22__UnitOfMeasure__A_x002fmm2 = 283,
	eml22__UnitOfMeasure__a_x005bt_x005d = 284,
	eml22__UnitOfMeasure__acre = 285,
	eml22__UnitOfMeasure__acre_x002eft = 286,
	eml22__UnitOfMeasure__ag = 287,
	eml22__UnitOfMeasure__aJ = 288,
	eml22__UnitOfMeasure__angstrom = 289,
	eml22__UnitOfMeasure__at = 290,
	eml22__UnitOfMeasure__atm = 291,
	eml22__UnitOfMeasure__atm_x002fft = 292,
	eml22__UnitOfMeasure__atm_x002fh = 293,
	eml22__UnitOfMeasure__atm_x002fhm = 294,
	eml22__UnitOfMeasure__atm_x002fm = 295,
	eml22__UnitOfMeasure__B_x002eW = 296,
	eml22__UnitOfMeasure__b_x002fcm3 = 297,
	eml22__UnitOfMeasure__B_x002fm = 298,
	eml22__UnitOfMeasure__B_x002fO = 299,
	eml22__UnitOfMeasure__bar = 300,
	eml22__UnitOfMeasure__bar_x002fh = 301,
	eml22__UnitOfMeasure__bar_x002fkm = 302,
	eml22__UnitOfMeasure__bar_x002fm = 303,
	eml22__UnitOfMeasure__bar2 = 304,
	eml22__UnitOfMeasure__bar2_x002fcP = 305,
	eml22__UnitOfMeasure__bbl = 306,
	eml22__UnitOfMeasure__bbl_x002f_x0028acre_x002eft_x0029 = 307,
	eml22__UnitOfMeasure__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 308,
	eml22__UnitOfMeasure__bbl_x002f_x0028d_x002eft_x0029 = 309,
	eml22__UnitOfMeasure__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 310,
	eml22__UnitOfMeasure__bbl_x002f_x0028kPa_x002ed_x0029 = 311,
	eml22__UnitOfMeasure__bbl_x002f_x0028psi_x002ed_x0029 = 312,
	eml22__UnitOfMeasure__bbl_x002facre = 313,
	eml22__UnitOfMeasure__bbl_x002fbbl = 314,
	eml22__UnitOfMeasure__bbl_x002fd = 315,
	eml22__UnitOfMeasure__bbl_x002fd2 = 316,
	eml22__UnitOfMeasure__bbl_x002fft = 317,
	eml22__UnitOfMeasure__bbl_x002fft3 = 318,
	eml22__UnitOfMeasure__bbl_x002fh = 319,
	eml22__UnitOfMeasure__bbl_x002fh2 = 320,
	eml22__UnitOfMeasure__bbl_x002fin = 321,
	eml22__UnitOfMeasure__bbl_x002fm3 = 322,
	eml22__UnitOfMeasure__bbl_x002fmi = 323,
	eml22__UnitOfMeasure__bbl_x002fmin = 324,
	eml22__UnitOfMeasure__bbl_x002fpsi = 325,
	eml22__UnitOfMeasure__bbl_x002fton_x005bUK_x005d = 326,
	eml22__UnitOfMeasure__bbl_x002fton_x005bUS_x005d = 327,
	eml22__UnitOfMeasure__Bd = 328,
	eml22__UnitOfMeasure__bit = 329,
	eml22__UnitOfMeasure__bit_x002fs = 330,
	eml22__UnitOfMeasure__Bq = 331,
	eml22__UnitOfMeasure__Bq_x002fkg = 332,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d = 333,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edegF_x0029 = 334,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edegF_x0029 = 335,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 336,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegF_x0029 = 337,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegR_x0029 = 338,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 339,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edegF_x0029 = 340,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 341,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 342,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegF_x0029 = 343,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegR_x0029 = 344,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edegF_x0029 = 345,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 346,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edegF_x0029 = 347,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 348,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edegF_x0029 = 349,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fbbl = 350,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fft3 = 351,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 352,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 353,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fh = 354,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002flbm = 355,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002flbmol = 356,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fmin = 357,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fs = 358,
	eml22__UnitOfMeasure__Btu_x005bth_x005d = 359,
	eml22__UnitOfMeasure__Btu_x005bUK_x005d = 360,
	eml22__UnitOfMeasure__byte = 361,
	eml22__UnitOfMeasure__byte_x002fs = 362,
	eml22__UnitOfMeasure__C_x002em = 363,
	eml22__UnitOfMeasure__C_x002fcm2 = 364,
	eml22__UnitOfMeasure__C_x002fcm3 = 365,
	eml22__UnitOfMeasure__C_x002fg = 366,
	eml22__UnitOfMeasure__C_x002fkg = 367,
	eml22__UnitOfMeasure__C_x002fm2 = 368,
	eml22__UnitOfMeasure__C_x002fm3 = 369,
	eml22__UnitOfMeasure__C_x002fmm2 = 370,
	eml22__UnitOfMeasure__C_x002fmm3 = 371,
	eml22__UnitOfMeasure__ca = 372,
	eml22__UnitOfMeasure__cA = 373,
	eml22__UnitOfMeasure__cal_x005bIT_x005d = 374,
	eml22__UnitOfMeasure__cal_x005bth_x005d = 375,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028g_x002eK_x0029 = 376,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edegC_x0029 = 377,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 378,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edegC_x0029 = 379,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 380,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028mol_x002edegC_x0029 = 381,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edegC_x0029 = 382,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edegC_x0029 = 383,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 384,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fcm3 = 385,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fg = 386,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fh = 387,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fkg = 388,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002flbm = 389,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fmL = 390,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fmm3 = 391,
	eml22__UnitOfMeasure__cC = 392,
	eml22__UnitOfMeasure__ccal_x005bth_x005d = 393,
	eml22__UnitOfMeasure__ccgr = 394,
	eml22__UnitOfMeasure__cd = 395,
	eml22__UnitOfMeasure__cd_x002fm2 = 396,
	eml22__UnitOfMeasure__cEuc = 397,
	eml22__UnitOfMeasure__ceV = 398,
	eml22__UnitOfMeasure__cF = 399,
	eml22__UnitOfMeasure__cg = 400,
	eml22__UnitOfMeasure__cgauss = 401,
	eml22__UnitOfMeasure__cgr = 402,
	eml22__UnitOfMeasure__cGy = 403,
	eml22__UnitOfMeasure__cH = 404,
	eml22__UnitOfMeasure__chain = 405,
	eml22__UnitOfMeasure__chain_x005bBnA_x005d = 406,
	eml22__UnitOfMeasure__chain_x005bBnB_x005d = 407,
	eml22__UnitOfMeasure__chain_x005bCla_x005d = 408,
	eml22__UnitOfMeasure__chain_x005bInd37_x005d = 409,
	eml22__UnitOfMeasure__chain_x005bSe_x005d = 410,
	eml22__UnitOfMeasure__chain_x005bSeT_x005d = 411,
	eml22__UnitOfMeasure__chain_x005bUS_x005d = 412,
	eml22__UnitOfMeasure__cHz = 413,
	eml22__UnitOfMeasure__Ci = 414,
	eml22__UnitOfMeasure__cJ = 415,
	eml22__UnitOfMeasure__cm = 416,
	eml22__UnitOfMeasure__cm_x002fa = 417,
	eml22__UnitOfMeasure__cm_x002fs = 418,
	eml22__UnitOfMeasure__cm_x002fs2 = 419,
	eml22__UnitOfMeasure__cm2 = 420,
	eml22__UnitOfMeasure__cm2_x002fg = 421,
	eml22__UnitOfMeasure__cm2_x002fs = 422,
	eml22__UnitOfMeasure__cm3 = 423,
	eml22__UnitOfMeasure__cm3_x002fcm3 = 424,
	eml22__UnitOfMeasure__cm3_x002fg = 425,
	eml22__UnitOfMeasure__cm3_x002fh = 426,
	eml22__UnitOfMeasure__cm3_x002fL = 427,
	eml22__UnitOfMeasure__cm3_x002fm3 = 428,
	eml22__UnitOfMeasure__cm3_x002fmin = 429,
	eml22__UnitOfMeasure__cm3_x002fs = 430,
	eml22__UnitOfMeasure__cm4 = 431,
	eml22__UnitOfMeasure__cmH2O_x005b4degC_x005d = 432,
	eml22__UnitOfMeasure__cN = 433,
	eml22__UnitOfMeasure__cohm = 434,
	eml22__UnitOfMeasure__cP = 435,
	eml22__UnitOfMeasure__cPa = 436,
	eml22__UnitOfMeasure__crd = 437,
	eml22__UnitOfMeasure__cS = 438,
	eml22__UnitOfMeasure__cs = 439,
	eml22__UnitOfMeasure__cSt = 440,
	eml22__UnitOfMeasure__cT = 441,
	eml22__UnitOfMeasure__ct = 442,
	eml22__UnitOfMeasure__cu = 443,
	eml22__UnitOfMeasure__cV = 444,
	eml22__UnitOfMeasure__cW = 445,
	eml22__UnitOfMeasure__cWb = 446,
	eml22__UnitOfMeasure__cwt_x005bUK_x005d = 447,
	eml22__UnitOfMeasure__cwt_x005bUS_x005d = 448,
	eml22__UnitOfMeasure__D_x002eft = 449,
	eml22__UnitOfMeasure__D_x002em = 450,
	eml22__UnitOfMeasure__D_x002f_x0028Pa_x002es_x0029 = 451,
	eml22__UnitOfMeasure__d_x002fbbl = 452,
	eml22__UnitOfMeasure__D_x002fcP = 453,
	eml22__UnitOfMeasure__d_x002fft3 = 454,
	eml22__UnitOfMeasure__d_x002fm3 = 455,
	eml22__UnitOfMeasure__D_x005bAPI_x005d = 456,
	eml22__UnitOfMeasure__dA = 457,
	eml22__UnitOfMeasure__dam = 458,
	eml22__UnitOfMeasure__daN = 459,
	eml22__UnitOfMeasure__daN_x002em = 460,
	eml22__UnitOfMeasure__dAPI = 461,
	eml22__UnitOfMeasure__dB = 462,
	eml22__UnitOfMeasure__dB_x002emW = 463,
	eml22__UnitOfMeasure__dB_x002eMW = 464,
	eml22__UnitOfMeasure__dB_x002eW = 465,
	eml22__UnitOfMeasure__dB_x002fft = 466,
	eml22__UnitOfMeasure__dB_x002fkm = 467,
	eml22__UnitOfMeasure__dB_x002fm = 468,
	eml22__UnitOfMeasure__dB_x002fO = 469,
	eml22__UnitOfMeasure__dC = 470,
	eml22__UnitOfMeasure__dcal_x005bth_x005d = 471,
	eml22__UnitOfMeasure__dega = 472,
	eml22__UnitOfMeasure__dega_x002fft = 473,
	eml22__UnitOfMeasure__dega_x002fh = 474,
	eml22__UnitOfMeasure__dega_x002fm = 475,
	eml22__UnitOfMeasure__dega_x002fmin = 476,
	eml22__UnitOfMeasure__dega_x002fs = 477,
	eml22__UnitOfMeasure__degC = 478,
	eml22__UnitOfMeasure__degC_x002em2_x002eh_x002fkcal_x005bth_x005d = 479,
	eml22__UnitOfMeasure__degC_x002fft = 480,
	eml22__UnitOfMeasure__degC_x002fh = 481,
	eml22__UnitOfMeasure__degC_x002fhm = 482,
	eml22__UnitOfMeasure__degC_x002fkm = 483,
	eml22__UnitOfMeasure__degC_x002fkPa = 484,
	eml22__UnitOfMeasure__degC_x002fm = 485,
	eml22__UnitOfMeasure__degC_x002fmin = 486,
	eml22__UnitOfMeasure__degC_x002fs = 487,
	eml22__UnitOfMeasure__degF = 488,
	eml22__UnitOfMeasure__degF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 489,
	eml22__UnitOfMeasure__degF_x002fft = 490,
	eml22__UnitOfMeasure__degF_x002fh = 491,
	eml22__UnitOfMeasure__degF_x002fm = 492,
	eml22__UnitOfMeasure__degF_x002fmin = 493,
	eml22__UnitOfMeasure__degF_x002fpsi = 494,
	eml22__UnitOfMeasure__degF_x002fs = 495,
	eml22__UnitOfMeasure__degR = 496,
	eml22__UnitOfMeasure__dEuc = 497,
	eml22__UnitOfMeasure__deV = 498,
	eml22__UnitOfMeasure__dF = 499,
	eml22__UnitOfMeasure__dgauss = 500,
	eml22__UnitOfMeasure__dGy = 501,
	eml22__UnitOfMeasure__dH = 502,
	eml22__UnitOfMeasure__dHz = 503,
	eml22__UnitOfMeasure__dJ = 504,
	eml22__UnitOfMeasure__dm = 505,
	eml22__UnitOfMeasure__dm_x002fs = 506,
	eml22__UnitOfMeasure__dm3 = 507,
	eml22__UnitOfMeasure__dm3_x002f_x0028kW_x002eh_x0029 = 508,
	eml22__UnitOfMeasure__dm3_x002fkg = 509,
	eml22__UnitOfMeasure__dm3_x002fkmol = 510,
	eml22__UnitOfMeasure__dm3_x002fm = 511,
	eml22__UnitOfMeasure__dm3_x002fm3 = 512,
	eml22__UnitOfMeasure__dm3_x002fMJ = 513,
	eml22__UnitOfMeasure__dm3_x002fs = 514,
	eml22__UnitOfMeasure__dm3_x002fs2 = 515,
	eml22__UnitOfMeasure__dm3_x002ft = 516,
	eml22__UnitOfMeasure__dN = 517,
	eml22__UnitOfMeasure__dN_x002em = 518,
	eml22__UnitOfMeasure__dohm = 519,
	eml22__UnitOfMeasure__dP = 520,
	eml22__UnitOfMeasure__dPa = 521,
	eml22__UnitOfMeasure__drd = 522,
	eml22__UnitOfMeasure__dS = 523,
	eml22__UnitOfMeasure__ds = 524,
	eml22__UnitOfMeasure__dT = 525,
	eml22__UnitOfMeasure__dV = 526,
	eml22__UnitOfMeasure__dW = 527,
	eml22__UnitOfMeasure__dWb = 528,
	eml22__UnitOfMeasure__dyne = 529,
	eml22__UnitOfMeasure__dyne_x002ecm2 = 530,
	eml22__UnitOfMeasure__dyne_x002es_x002fcm2 = 531,
	eml22__UnitOfMeasure__dyne_x002fcm = 532,
	eml22__UnitOfMeasure__dyne_x002fcm2 = 533,
	eml22__UnitOfMeasure__EA = 534,
	eml22__UnitOfMeasure__Ea_x005bt_x005d = 535,
	eml22__UnitOfMeasure__EC = 536,
	eml22__UnitOfMeasure__Ecal_x005bth_x005d = 537,
	eml22__UnitOfMeasure__EEuc = 538,
	eml22__UnitOfMeasure__EeV = 539,
	eml22__UnitOfMeasure__EF = 540,
	eml22__UnitOfMeasure__Eg = 541,
	eml22__UnitOfMeasure__Egauss = 542,
	eml22__UnitOfMeasure__EGy = 543,
	eml22__UnitOfMeasure__EH = 544,
	eml22__UnitOfMeasure__EHz = 545,
	eml22__UnitOfMeasure__EJ = 546,
	eml22__UnitOfMeasure__EJ_x002fa = 547,
	eml22__UnitOfMeasure__Em = 548,
	eml22__UnitOfMeasure__EN = 549,
	eml22__UnitOfMeasure__Eohm = 550,
	eml22__UnitOfMeasure__EP = 551,
	eml22__UnitOfMeasure__EPa = 552,
	eml22__UnitOfMeasure__Erd = 553,
	eml22__UnitOfMeasure__erg = 554,
	eml22__UnitOfMeasure__erg_x002fa = 555,
	eml22__UnitOfMeasure__erg_x002fcm2 = 556,
	eml22__UnitOfMeasure__erg_x002fcm3 = 557,
	eml22__UnitOfMeasure__erg_x002fg = 558,
	eml22__UnitOfMeasure__erg_x002fkg = 559,
	eml22__UnitOfMeasure__erg_x002fm3 = 560,
	eml22__UnitOfMeasure__ES = 561,
	eml22__UnitOfMeasure__ET = 562,
	eml22__UnitOfMeasure__Euc = 563,
	eml22__UnitOfMeasure__eV = 564,
	eml22__UnitOfMeasure__EW = 565,
	eml22__UnitOfMeasure__EWb = 566,
	eml22__UnitOfMeasure__F_x002fm = 567,
	eml22__UnitOfMeasure__fa = 568,
	eml22__UnitOfMeasure__fA = 569,
	eml22__UnitOfMeasure__fathom = 570,
	eml22__UnitOfMeasure__fC = 571,
	eml22__UnitOfMeasure__fcal_x005bth_x005d = 572,
	eml22__UnitOfMeasure__fEuc = 573,
	eml22__UnitOfMeasure__feV = 574,
	eml22__UnitOfMeasure__fF = 575,
	eml22__UnitOfMeasure__fg = 576,
	eml22__UnitOfMeasure__fgauss = 577,
	eml22__UnitOfMeasure__fGy = 578,
	eml22__UnitOfMeasure__fH = 579,
	eml22__UnitOfMeasure__fHz = 580,
	eml22__UnitOfMeasure__fJ = 581,
	eml22__UnitOfMeasure__floz_x005bUK_x005d = 582,
	eml22__UnitOfMeasure__floz_x005bUS_x005d = 583,
	eml22__UnitOfMeasure__fm = 584,
	eml22__UnitOfMeasure__fN = 585,
	eml22__UnitOfMeasure__fohm = 586,
	eml22__UnitOfMeasure__footcandle = 587,
	eml22__UnitOfMeasure__footcandle_x002es = 588,
	eml22__UnitOfMeasure__fP = 589,
	eml22__UnitOfMeasure__fPa = 590,
	eml22__UnitOfMeasure__frd = 591,
	eml22__UnitOfMeasure__fS = 592,
	eml22__UnitOfMeasure__ft = 593,
	eml22__UnitOfMeasure__fT = 594,
	eml22__UnitOfMeasure__ft_x002fbbl = 595,
	eml22__UnitOfMeasure__ft_x002fd = 596,
	eml22__UnitOfMeasure__ft_x002fdegF = 597,
	eml22__UnitOfMeasure__ft_x002fft = 598,
	eml22__UnitOfMeasure__ft_x002fft3 = 599,
	eml22__UnitOfMeasure__ft_x002fgal_x005bUS_x005d = 600,
	eml22__UnitOfMeasure__ft_x002fh = 601,
	eml22__UnitOfMeasure__ft_x002fin = 602,
	eml22__UnitOfMeasure__ft_x002flbm = 603,
	eml22__UnitOfMeasure__ft_x002fm = 604,
	eml22__UnitOfMeasure__ft_x002fmi = 605,
	eml22__UnitOfMeasure__ft_x002fmin = 606,
	eml22__UnitOfMeasure__ft_x002fms = 607,
	eml22__UnitOfMeasure__ft_x002fpsi = 608,
	eml22__UnitOfMeasure__ft_x002fs = 609,
	eml22__UnitOfMeasure__ft_x002fs2 = 610,
	eml22__UnitOfMeasure__ft_x002fus = 611,
	eml22__UnitOfMeasure__ft_x005bBnA_x005d = 612,
	eml22__UnitOfMeasure__ft_x005bBnB_x005d = 613,
	eml22__UnitOfMeasure__ft_x005bBr36_x005d = 614,
	eml22__UnitOfMeasure__ft_x005bBr65_x005d = 615,
	eml22__UnitOfMeasure__ft_x005bCla_x005d = 616,
	eml22__UnitOfMeasure__ft_x005bGC_x005d = 617,
	eml22__UnitOfMeasure__ft_x005bInd_x005d = 618,
	eml22__UnitOfMeasure__ft_x005bInd37_x005d = 619,
	eml22__UnitOfMeasure__ft_x005bInd62_x005d = 620,
	eml22__UnitOfMeasure__ft_x005bInd75_x005d = 621,
	eml22__UnitOfMeasure__ft_x005bSe_x005d = 622,
	eml22__UnitOfMeasure__ft_x005bSeT_x005d = 623,
	eml22__UnitOfMeasure__ft_x005bUS_x005d = 624,
	eml22__UnitOfMeasure__ft2 = 625,
	eml22__UnitOfMeasure__ft2_x002fh = 626,
	eml22__UnitOfMeasure__ft2_x002fin3 = 627,
	eml22__UnitOfMeasure__ft2_x002flbm = 628,
	eml22__UnitOfMeasure__ft2_x002fs = 629,
	eml22__UnitOfMeasure__ft3 = 630,
	eml22__UnitOfMeasure__ft3_x002f_x0028d_x002eft_x0029 = 631,
	eml22__UnitOfMeasure__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 632,
	eml22__UnitOfMeasure__ft3_x002f_x0028min_x002eft2_x0029 = 633,
	eml22__UnitOfMeasure__ft3_x002f_x0028s_x002eft2_x0029 = 634,
	eml22__UnitOfMeasure__ft3_x002fbbl = 635,
	eml22__UnitOfMeasure__ft3_x002fd = 636,
	eml22__UnitOfMeasure__ft3_x002fd2 = 637,
	eml22__UnitOfMeasure__ft3_x002fft = 638,
	eml22__UnitOfMeasure__ft3_x002fft2 = 639,
	eml22__UnitOfMeasure__ft3_x002fft3 = 640,
	eml22__UnitOfMeasure__ft3_x002fh = 641,
	eml22__UnitOfMeasure__ft3_x002fh2 = 642,
	eml22__UnitOfMeasure__ft3_x002fkg = 643,
	eml22__UnitOfMeasure__ft3_x002flbm = 644,
	eml22__UnitOfMeasure__ft3_x002flbmol = 645,
	eml22__UnitOfMeasure__ft3_x002fmin = 646,
	eml22__UnitOfMeasure__ft3_x002fmin2 = 647,
	eml22__UnitOfMeasure__ft3_x002frad = 648,
	eml22__UnitOfMeasure__ft3_x002fs = 649,
	eml22__UnitOfMeasure__ft3_x002fs2 = 650,
	eml22__UnitOfMeasure__ft3_x002fsack_x005b94lbm_x005d = 651,
	eml22__UnitOfMeasure__fur_x005bUS_x005d = 652,
	eml22__UnitOfMeasure__fV = 653,
	eml22__UnitOfMeasure__fW = 654,
	eml22__UnitOfMeasure__fWb = 655,
	eml22__UnitOfMeasure__g_x002eft_x002f_x0028cm3_x002es_x0029 = 656,
	eml22__UnitOfMeasure__g_x002em_x002f_x0028cm3_x002es_x0029 = 657,
	eml22__UnitOfMeasure__g_x002fcm3 = 658,
	eml22__UnitOfMeasure__g_x002fcm4 = 659,
	eml22__UnitOfMeasure__g_x002fdm3 = 660,
	eml22__UnitOfMeasure__g_x002fgal_x005bUK_x005d = 661,
	eml22__UnitOfMeasure__g_x002fgal_x005bUS_x005d = 662,
	eml22__UnitOfMeasure__g_x002fkg = 663,
	eml22__UnitOfMeasure__g_x002fL = 664,
	eml22__UnitOfMeasure__g_x002fm3 = 665,
	eml22__UnitOfMeasure__g_x002fmol = 666,
	eml22__UnitOfMeasure__g_x002fs = 667,
	eml22__UnitOfMeasure__g_x002ft = 668,
	eml22__UnitOfMeasure__GA = 669,
	eml22__UnitOfMeasure__Ga_x005bt_x005d = 670,
	eml22__UnitOfMeasure__Gal = 671,
	eml22__UnitOfMeasure__gal_x005bUK_x005d = 672,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 673,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 674,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 675,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 676,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 677,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 678,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fd = 679,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fft3 = 680,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fh = 681,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fh2 = 682,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002flbm = 683,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fmi = 684,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fmin = 685,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fmin2 = 686,
	eml22__UnitOfMeasure__gal_x005bUS_x005d = 687,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 688,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 689,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 690,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 691,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 692,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 693,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fbbl = 694,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fd = 695,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fft = 696,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fft3 = 697,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fh = 698,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fh2 = 699,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002flbm = 700,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fmi = 701,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fmin = 702,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fmin2 = 703,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 704,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 705,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 706,
	eml22__UnitOfMeasure__gAPI = 707,
	eml22__UnitOfMeasure__gauss = 708,
	eml22__UnitOfMeasure__gauss_x002fcm = 709,
	eml22__UnitOfMeasure__GBq = 710,
	eml22__UnitOfMeasure__GC = 711,
	eml22__UnitOfMeasure__Gcal_x005bth_x005d = 712,
	eml22__UnitOfMeasure__GEuc = 713,
	eml22__UnitOfMeasure__GeV = 714,
	eml22__UnitOfMeasure__gf = 715,
	eml22__UnitOfMeasure__GF = 716,
	eml22__UnitOfMeasure__Gg = 717,
	eml22__UnitOfMeasure__Ggauss = 718,
	eml22__UnitOfMeasure__GGy = 719,
	eml22__UnitOfMeasure__GH = 720,
	eml22__UnitOfMeasure__GHz = 721,
	eml22__UnitOfMeasure__GJ = 722,
	eml22__UnitOfMeasure__Gm = 723,
	eml22__UnitOfMeasure__GN = 724,
	eml22__UnitOfMeasure__gn = 725,
	eml22__UnitOfMeasure__Gohm = 726,
	eml22__UnitOfMeasure__gon = 727,
	eml22__UnitOfMeasure__GP = 728,
	eml22__UnitOfMeasure__GPa = 729,
	eml22__UnitOfMeasure__GPa_x002fcm = 730,
	eml22__UnitOfMeasure__GPa2 = 731,
	eml22__UnitOfMeasure__grain = 732,
	eml22__UnitOfMeasure__grain_x002fft3 = 733,
	eml22__UnitOfMeasure__grain_x002fgal_x005bUS_x005d = 734,
	eml22__UnitOfMeasure__Grd = 735,
	eml22__UnitOfMeasure__GS = 736,
	eml22__UnitOfMeasure__GT = 737,
	eml22__UnitOfMeasure__GV = 738,
	eml22__UnitOfMeasure__GW = 739,
	eml22__UnitOfMeasure__GW_x002eh = 740,
	eml22__UnitOfMeasure__GWb = 741,
	eml22__UnitOfMeasure__Gy = 742,
	eml22__UnitOfMeasure__h_x002fft3 = 743,
	eml22__UnitOfMeasure__h_x002fkm = 744,
	eml22__UnitOfMeasure__H_x002fm = 745,
	eml22__UnitOfMeasure__h_x002fm3 = 746,
	eml22__UnitOfMeasure__ha = 747,
	eml22__UnitOfMeasure__ha_x002em = 748,
	eml22__UnitOfMeasure__hbar = 749,
	eml22__UnitOfMeasure__hg = 750,
	eml22__UnitOfMeasure__hL = 751,
	eml22__UnitOfMeasure__hm = 752,
	eml22__UnitOfMeasure__hN = 753,
	eml22__UnitOfMeasure__hp = 754,
	eml22__UnitOfMeasure__hp_x002eh = 755,
	eml22__UnitOfMeasure__hp_x002eh_x002fbbl = 756,
	eml22__UnitOfMeasure__hp_x002eh_x002flbm = 757,
	eml22__UnitOfMeasure__hp_x002fft3 = 758,
	eml22__UnitOfMeasure__hp_x002fin2 = 759,
	eml22__UnitOfMeasure__hp_x005belec_x005d = 760,
	eml22__UnitOfMeasure__hp_x005bhyd_x005d = 761,
	eml22__UnitOfMeasure__hp_x005bhyd_x005d_x002fin2 = 762,
	eml22__UnitOfMeasure__hp_x005bmetric_x005d = 763,
	eml22__UnitOfMeasure__hp_x005bmetric_x005d_x002eh = 764,
	eml22__UnitOfMeasure__hs = 765,
	eml22__UnitOfMeasure__Hz = 766,
	eml22__UnitOfMeasure__in = 767,
	eml22__UnitOfMeasure__in_x002f_x0028in_x002edegF_x0029 = 768,
	eml22__UnitOfMeasure__in_x002fa = 769,
	eml22__UnitOfMeasure__in_x002fmin = 770,
	eml22__UnitOfMeasure__in_x002fs = 771,
	eml22__UnitOfMeasure__in_x002fs2 = 772,
	eml22__UnitOfMeasure__in_x005bUS_x005d = 773,
	eml22__UnitOfMeasure__in2 = 774,
	eml22__UnitOfMeasure__in2_x002fft2 = 775,
	eml22__UnitOfMeasure__in2_x002fin2 = 776,
	eml22__UnitOfMeasure__in2_x002fs = 777,
	eml22__UnitOfMeasure__in3 = 778,
	eml22__UnitOfMeasure__in3_x002fft = 779,
	eml22__UnitOfMeasure__in4 = 780,
	eml22__UnitOfMeasure__inH2O_x005b39degF_x005d = 781,
	eml22__UnitOfMeasure__inH2O_x005b60degF_x005d = 782,
	eml22__UnitOfMeasure__inHg_x005b32degF_x005d = 783,
	eml22__UnitOfMeasure__inHg_x005b60degF_x005d = 784,
	eml22__UnitOfMeasure__J_x002em_x002f_x0028s_x002em2_x002eK_x0029 = 785,
	eml22__UnitOfMeasure__J_x002em_x002fm2 = 786,
	eml22__UnitOfMeasure__J_x002f_x0028g_x002eK_x0029 = 787,
	eml22__UnitOfMeasure__J_x002f_x0028kg_x002eK_x0029 = 788,
	eml22__UnitOfMeasure__J_x002f_x0028mol_x002eK_x0029 = 789,
	eml22__UnitOfMeasure__J_x002f_x0028s_x002em2_x002edegC_x0029 = 790,
	eml22__UnitOfMeasure__J_x002fcm2 = 791,
	eml22__UnitOfMeasure__J_x002fdm3 = 792,
	eml22__UnitOfMeasure__J_x002fg = 793,
	eml22__UnitOfMeasure__J_x002fK = 794,
	eml22__UnitOfMeasure__J_x002fkg = 795,
	eml22__UnitOfMeasure__J_x002fm = 796,
	eml22__UnitOfMeasure__J_x002fm2 = 797,
	eml22__UnitOfMeasure__J_x002fm3 = 798,
	eml22__UnitOfMeasure__J_x002fmol = 799,
	eml22__UnitOfMeasure__J_x002fs = 800,
	eml22__UnitOfMeasure__K_x002em2_x002fkW = 801,
	eml22__UnitOfMeasure__K_x002em2_x002fW = 802,
	eml22__UnitOfMeasure__K_x002fkm = 803,
	eml22__UnitOfMeasure__K_x002fm = 804,
	eml22__UnitOfMeasure__K_x002fPa = 805,
	eml22__UnitOfMeasure__K_x002fs = 806,
	eml22__UnitOfMeasure__K_x002fW = 807,
	eml22__UnitOfMeasure__kA = 808,
	eml22__UnitOfMeasure__ka_x005bt_x005d = 809,
	eml22__UnitOfMeasure__kC = 810,
	eml22__UnitOfMeasure__kcal_x005bth_x005d = 811,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002em_x002fcm2 = 812,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edegC_x0029 = 813,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 814,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028kg_x002edegC_x0029 = 815,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fcm3 = 816,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fg = 817,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fh = 818,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fkg = 819,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fm3 = 820,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fmol = 821,
	eml22__UnitOfMeasure__kcd = 822,
	eml22__UnitOfMeasure__kdyne = 823,
	eml22__UnitOfMeasure__kEuc = 824,
	eml22__UnitOfMeasure__keV = 825,
	eml22__UnitOfMeasure__kF = 826,
	eml22__UnitOfMeasure__kg = 827,
	eml22__UnitOfMeasure__kg_x002em = 828,
	eml22__UnitOfMeasure__kg_x002em_x002fcm2 = 829,
	eml22__UnitOfMeasure__kg_x002em_x002fs = 830,
	eml22__UnitOfMeasure__kg_x002em2 = 831,
	eml22__UnitOfMeasure__kg_x002f_x0028kW_x002eh_x0029 = 832,
	eml22__UnitOfMeasure__kg_x002f_x0028m_x002es_x0029 = 833,
	eml22__UnitOfMeasure__kg_x002f_x0028m2_x002es_x0029 = 834,
	eml22__UnitOfMeasure__kg_x002fd = 835,
	eml22__UnitOfMeasure__kg_x002fdm3 = 836,
	eml22__UnitOfMeasure__kg_x002fdm4 = 837,
	eml22__UnitOfMeasure__kg_x002fh = 838,
	eml22__UnitOfMeasure__kg_x002fJ = 839,
	eml22__UnitOfMeasure__kg_x002fkg = 840,
	eml22__UnitOfMeasure__kg_x002fL = 841,
	eml22__UnitOfMeasure__kg_x002fm = 842,
	eml22__UnitOfMeasure__kg_x002fm2 = 843,
	eml22__UnitOfMeasure__kg_x002fm3 = 844,
	eml22__UnitOfMeasure__kg_x002fm4 = 845,
	eml22__UnitOfMeasure__kg_x002fmin = 846,
	eml22__UnitOfMeasure__kg_x002fMJ = 847,
	eml22__UnitOfMeasure__kg_x002fmol = 848,
	eml22__UnitOfMeasure__kg_x002fs = 849,
	eml22__UnitOfMeasure__kg_x002fsack_x005b94lbm_x005d = 850,
	eml22__UnitOfMeasure__kg_x002ft = 851,
	eml22__UnitOfMeasure__kgauss = 852,
	eml22__UnitOfMeasure__kgf = 853,
	eml22__UnitOfMeasure__kgf_x002em = 854,
	eml22__UnitOfMeasure__kgf_x002em_x002fcm2 = 855,
	eml22__UnitOfMeasure__kgf_x002em_x002fm = 856,
	eml22__UnitOfMeasure__kgf_x002em2 = 857,
	eml22__UnitOfMeasure__kgf_x002es_x002fm2 = 858,
	eml22__UnitOfMeasure__kgf_x002fcm = 859,
	eml22__UnitOfMeasure__kgf_x002fcm2 = 860,
	eml22__UnitOfMeasure__kgf_x002fkgf = 861,
	eml22__UnitOfMeasure__kgf_x002fm2 = 862,
	eml22__UnitOfMeasure__kgf_x002fmm2 = 863,
	eml22__UnitOfMeasure__kGy = 864,
	eml22__UnitOfMeasure__kH = 865,
	eml22__UnitOfMeasure__kHz = 866,
	eml22__UnitOfMeasure__Kibyte = 867,
	eml22__UnitOfMeasure__kJ = 868,
	eml22__UnitOfMeasure__kJ_x002em_x002f_x0028h_x002em2_x002eK_x0029 = 869,
	eml22__UnitOfMeasure__kJ_x002f_x0028h_x002em2_x002eK_x0029 = 870,
	eml22__UnitOfMeasure__kJ_x002f_x0028kg_x002eK_x0029 = 871,
	eml22__UnitOfMeasure__kJ_x002f_x0028kmol_x002eK_x0029 = 872,
	eml22__UnitOfMeasure__kJ_x002fdm3 = 873,
	eml22__UnitOfMeasure__kJ_x002fkg = 874,
	eml22__UnitOfMeasure__kJ_x002fkmol = 875,
	eml22__UnitOfMeasure__kJ_x002fm3 = 876,
	eml22__UnitOfMeasure__klbf = 877,
	eml22__UnitOfMeasure__klbm = 878,
	eml22__UnitOfMeasure__klbm_x002fin = 879,
	eml22__UnitOfMeasure__klx = 880,
	eml22__UnitOfMeasure__km = 881,
	eml22__UnitOfMeasure__km_x002fcm = 882,
	eml22__UnitOfMeasure__km_x002fdm3 = 883,
	eml22__UnitOfMeasure__km_x002fh = 884,
	eml22__UnitOfMeasure__km_x002fL = 885,
	eml22__UnitOfMeasure__km_x002fs = 886,
	eml22__UnitOfMeasure__km2 = 887,
	eml22__UnitOfMeasure__km3 = 888,
	eml22__UnitOfMeasure__kmol = 889,
	eml22__UnitOfMeasure__kmol_x002fh = 890,
	eml22__UnitOfMeasure__kmol_x002fm3 = 891,
	eml22__UnitOfMeasure__kmol_x002fs = 892,
	eml22__UnitOfMeasure__kN = 893,
	eml22__UnitOfMeasure__kN_x002em = 894,
	eml22__UnitOfMeasure__kN_x002em2 = 895,
	eml22__UnitOfMeasure__kN_x002fm = 896,
	eml22__UnitOfMeasure__kN_x002fm2 = 897,
	eml22__UnitOfMeasure__knot = 898,
	eml22__UnitOfMeasure__kohm = 899,
	eml22__UnitOfMeasure__kohm_x002em = 900,
	eml22__UnitOfMeasure__kP = 901,
	eml22__UnitOfMeasure__kPa = 902,
	eml22__UnitOfMeasure__kPa_x002es_x002fm = 903,
	eml22__UnitOfMeasure__kPa_x002fh = 904,
	eml22__UnitOfMeasure__kPa_x002fhm = 905,
	eml22__UnitOfMeasure__kPa_x002fm = 906,
	eml22__UnitOfMeasure__kPa_x002fmin = 907,
	eml22__UnitOfMeasure__kPa2 = 908,
	eml22__UnitOfMeasure__kPa2_x002fcP = 909,
	eml22__UnitOfMeasure__kpsi = 910,
	eml22__UnitOfMeasure__kpsi2 = 911,
	eml22__UnitOfMeasure__krad = 912,
	eml22__UnitOfMeasure__krd = 913,
	eml22__UnitOfMeasure__kS = 914,
	eml22__UnitOfMeasure__kS_x002fm = 915,
	eml22__UnitOfMeasure__kT = 916,
	eml22__UnitOfMeasure__kV = 917,
	eml22__UnitOfMeasure__kW = 918,
	eml22__UnitOfMeasure__kW_x002eh = 919,
	eml22__UnitOfMeasure__kW_x002eh_x002f_x0028kg_x002edegC_x0029 = 920,
	eml22__UnitOfMeasure__kW_x002eh_x002fdm3 = 921,
	eml22__UnitOfMeasure__kW_x002eh_x002fkg = 922,
	eml22__UnitOfMeasure__kW_x002eh_x002fm3 = 923,
	eml22__UnitOfMeasure__kW_x002f_x0028m2_x002eK_x0029 = 924,
	eml22__UnitOfMeasure__kW_x002f_x0028m3_x002eK_x0029 = 925,
	eml22__UnitOfMeasure__kW_x002fcm2 = 926,
	eml22__UnitOfMeasure__kW_x002fm2 = 927,
	eml22__UnitOfMeasure__kW_x002fm3 = 928,
	eml22__UnitOfMeasure__kWb = 929,
	eml22__UnitOfMeasure__L_x002f_x0028bar_x002emin_x0029 = 930,
	eml22__UnitOfMeasure__L_x002fh = 931,
	eml22__UnitOfMeasure__L_x002fkg = 932,
	eml22__UnitOfMeasure__L_x002fkmol = 933,
	eml22__UnitOfMeasure__L_x002fm = 934,
	eml22__UnitOfMeasure__L_x002fm3 = 935,
	eml22__UnitOfMeasure__L_x002fmin = 936,
	eml22__UnitOfMeasure__L_x002fmol = 937,
	eml22__UnitOfMeasure__L_x002fs = 938,
	eml22__UnitOfMeasure__L_x002fs2 = 939,
	eml22__UnitOfMeasure__L_x002ft = 940,
	eml22__UnitOfMeasure__L_x002fton_x005bUK_x005d = 941,
	eml22__UnitOfMeasure__lbf = 942,
	eml22__UnitOfMeasure__lbf_x002eft = 943,
	eml22__UnitOfMeasure__lbf_x002eft_x002fbbl = 944,
	eml22__UnitOfMeasure__lbf_x002eft_x002fgal_x005bUS_x005d = 945,
	eml22__UnitOfMeasure__lbf_x002eft_x002fin = 946,
	eml22__UnitOfMeasure__lbf_x002eft_x002fin2 = 947,
	eml22__UnitOfMeasure__lbf_x002eft_x002flbm = 948,
	eml22__UnitOfMeasure__lbf_x002eft_x002fmin = 949,
	eml22__UnitOfMeasure__lbf_x002eft_x002fs = 950,
	eml22__UnitOfMeasure__lbf_x002ein = 951,
	eml22__UnitOfMeasure__lbf_x002ein_x002fin = 952,
	eml22__UnitOfMeasure__lbf_x002ein2 = 953,
	eml22__UnitOfMeasure__lbf_x002es_x002fft2 = 954,
	eml22__UnitOfMeasure__lbf_x002es_x002fin2 = 955,
	eml22__UnitOfMeasure__lbf_x002fft = 956,
	eml22__UnitOfMeasure__lbf_x002fft2 = 957,
	eml22__UnitOfMeasure__lbf_x002fft3 = 958,
	eml22__UnitOfMeasure__lbf_x002fgal_x005bUS_x005d = 959,
	eml22__UnitOfMeasure__lbf_x002fin = 960,
	eml22__UnitOfMeasure__lbf_x002flbf = 961,
	eml22__UnitOfMeasure__lbm = 962,
	eml22__UnitOfMeasure__lbm_x002eft = 963,
	eml22__UnitOfMeasure__lbm_x002eft_x002fs = 964,
	eml22__UnitOfMeasure__lbm_x002eft2 = 965,
	eml22__UnitOfMeasure__lbm_x002eft2_x002fs2 = 966,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft_x002eh_x0029 = 967,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft_x002es_x0029 = 968,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft2_x002eh_x0029 = 969,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft2_x002es_x0029 = 970,
	eml22__UnitOfMeasure__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 971,
	eml22__UnitOfMeasure__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 972,
	eml22__UnitOfMeasure__lbm_x002f_x0028hp_x002eh_x0029 = 973,
	eml22__UnitOfMeasure__lbm_x002fbbl = 974,
	eml22__UnitOfMeasure__lbm_x002fd = 975,
	eml22__UnitOfMeasure__lbm_x002fft = 976,
	eml22__UnitOfMeasure__lbm_x002fft2 = 977,
	eml22__UnitOfMeasure__lbm_x002fft3 = 978,
	eml22__UnitOfMeasure__lbm_x002fft4 = 979,
	eml22__UnitOfMeasure__lbm_x002fgal_x005bUK_x005d = 980,
	eml22__UnitOfMeasure__lbm_x002fgal_x005bUS_x005d = 981,
	eml22__UnitOfMeasure__lbm_x002fh = 982,
	eml22__UnitOfMeasure__lbm_x002fin3 = 983,
	eml22__UnitOfMeasure__lbm_x002flbmol = 984,
	eml22__UnitOfMeasure__lbm_x002fmin = 985,
	eml22__UnitOfMeasure__lbm_x002fs = 986,
	eml22__UnitOfMeasure__lbmol = 987,
	eml22__UnitOfMeasure__lbmol_x002f_x0028h_x002eft2_x0029 = 988,
	eml22__UnitOfMeasure__lbmol_x002f_x0028s_x002eft2_x0029 = 989,
	eml22__UnitOfMeasure__lbmol_x002fft3 = 990,
	eml22__UnitOfMeasure__lbmol_x002fgal_x005bUK_x005d = 991,
	eml22__UnitOfMeasure__lbmol_x002fgal_x005bUS_x005d = 992,
	eml22__UnitOfMeasure__lbmol_x002fh = 993,
	eml22__UnitOfMeasure__lbmol_x002fs = 994,
	eml22__UnitOfMeasure__link = 995,
	eml22__UnitOfMeasure__link_x005bBnA_x005d = 996,
	eml22__UnitOfMeasure__link_x005bBnB_x005d = 997,
	eml22__UnitOfMeasure__link_x005bCla_x005d = 998,
	eml22__UnitOfMeasure__link_x005bSe_x005d = 999,
	eml22__UnitOfMeasure__link_x005bSeT_x005d = 1000,
	eml22__UnitOfMeasure__link_x005bUS_x005d = 1001,
	eml22__UnitOfMeasure__lm = 1002,
	eml22__UnitOfMeasure__lm_x002es = 1003,
	eml22__UnitOfMeasure__lm_x002fm2 = 1004,
	eml22__UnitOfMeasure__lm_x002fW = 1005,
	eml22__UnitOfMeasure__lx = 1006,
	eml22__UnitOfMeasure__lx_x002es = 1007,
	eml22__UnitOfMeasure__m_x002f_x0028m_x002eK_x0029 = 1008,
	eml22__UnitOfMeasure__m_x002fcm = 1009,
	eml22__UnitOfMeasure__m_x002fd = 1010,
	eml22__UnitOfMeasure__m_x002fh = 1011,
	eml22__UnitOfMeasure__m_x002fK = 1012,
	eml22__UnitOfMeasure__m_x002fkg = 1013,
	eml22__UnitOfMeasure__m_x002fkm = 1014,
	eml22__UnitOfMeasure__m_x002fkPa = 1015,
	eml22__UnitOfMeasure__m_x002fm = 1016,
	eml22__UnitOfMeasure__m_x002fm3 = 1017,
	eml22__UnitOfMeasure__m_x002fmin = 1018,
	eml22__UnitOfMeasure__m_x002fms = 1019,
	eml22__UnitOfMeasure__m_x002fPa = 1020,
	eml22__UnitOfMeasure__m_x002fs = 1021,
	eml22__UnitOfMeasure__m_x002fs2 = 1022,
	eml22__UnitOfMeasure__m_x005bGer_x005d = 1023,
	eml22__UnitOfMeasure__m2 = 1024,
	eml22__UnitOfMeasure__m2_x002f_x0028kPa_x002ed_x0029 = 1025,
	eml22__UnitOfMeasure__m2_x002f_x0028Pa_x002es_x0029 = 1026,
	eml22__UnitOfMeasure__m2_x002fcm3 = 1027,
	eml22__UnitOfMeasure__m2_x002fd = 1028,
	eml22__UnitOfMeasure__m2_x002fg = 1029,
	eml22__UnitOfMeasure__m2_x002fh = 1030,
	eml22__UnitOfMeasure__m2_x002fkg = 1031,
	eml22__UnitOfMeasure__m2_x002fm2 = 1032,
	eml22__UnitOfMeasure__m2_x002fm3 = 1033,
	eml22__UnitOfMeasure__m2_x002fmol = 1034,
	eml22__UnitOfMeasure__m2_x002fs = 1035,
	eml22__UnitOfMeasure__m3 = 1036,
	eml22__UnitOfMeasure__m3_x002f_x0028bar_x002ed_x0029 = 1037,
	eml22__UnitOfMeasure__m3_x002f_x0028bar_x002eh_x0029 = 1038,
	eml22__UnitOfMeasure__m3_x002f_x0028bar_x002emin_x0029 = 1039,
	eml22__UnitOfMeasure__m3_x002f_x0028d_x002em_x0029 = 1040,
	eml22__UnitOfMeasure__m3_x002f_x0028h_x002em_x0029 = 1041,
	eml22__UnitOfMeasure__m3_x002f_x0028ha_x002em_x0029 = 1042,
	eml22__UnitOfMeasure__m3_x002f_x0028kPa_x002ed_x0029 = 1043,
	eml22__UnitOfMeasure__m3_x002f_x0028kPa_x002eh_x0029 = 1044,
	eml22__UnitOfMeasure__m3_x002f_x0028kW_x002eh_x0029 = 1045,
	eml22__UnitOfMeasure__m3_x002f_x0028m3_x002eK_x0029 = 1046,
	eml22__UnitOfMeasure__m3_x002f_x0028Pa_x002es_x0029 = 1047,
	eml22__UnitOfMeasure__m3_x002f_x0028psi_x002ed_x0029 = 1048,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002eft_x0029 = 1049,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002em_x0029 = 1050,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002em2_x0029 = 1051,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002em3_x0029 = 1052,
	eml22__UnitOfMeasure__m3_x002fbbl = 1053,
	eml22__UnitOfMeasure__m3_x002fd = 1054,
	eml22__UnitOfMeasure__m3_x002fd2 = 1055,
	eml22__UnitOfMeasure__m3_x002fg = 1056,
	eml22__UnitOfMeasure__m3_x002fh = 1057,
	eml22__UnitOfMeasure__m3_x002fJ = 1058,
	eml22__UnitOfMeasure__m3_x002fkg = 1059,
	eml22__UnitOfMeasure__m3_x002fkm = 1060,
	eml22__UnitOfMeasure__m3_x002fkmol = 1061,
	eml22__UnitOfMeasure__m3_x002fkPa = 1062,
	eml22__UnitOfMeasure__m3_x002fm = 1063,
	eml22__UnitOfMeasure__m3_x002fm2 = 1064,
	eml22__UnitOfMeasure__m3_x002fm3 = 1065,
	eml22__UnitOfMeasure__m3_x002fmin = 1066,
	eml22__UnitOfMeasure__m3_x002fmol = 1067,
	eml22__UnitOfMeasure__m3_x002fPa = 1068,
	eml22__UnitOfMeasure__m3_x002frad = 1069,
	eml22__UnitOfMeasure__m3_x002frev = 1070,
	eml22__UnitOfMeasure__m3_x002fs = 1071,
	eml22__UnitOfMeasure__m3_x002fs2 = 1072,
	eml22__UnitOfMeasure__m3_x002ft = 1073,
	eml22__UnitOfMeasure__m3_x002fton_x005bUK_x005d = 1074,
	eml22__UnitOfMeasure__m3_x002fton_x005bUS_x005d = 1075,
	eml22__UnitOfMeasure__m4 = 1076,
	eml22__UnitOfMeasure__m4_x002fs = 1077,
	eml22__UnitOfMeasure__MA = 1078,
	eml22__UnitOfMeasure__mA = 1079,
	eml22__UnitOfMeasure__mA_x002fcm2 = 1080,
	eml22__UnitOfMeasure__mA_x002fft2 = 1081,
	eml22__UnitOfMeasure__Ma_x005bt_x005d = 1082,
	eml22__UnitOfMeasure__mbar = 1083,
	eml22__UnitOfMeasure__MBq = 1084,
	eml22__UnitOfMeasure__mC = 1085,
	eml22__UnitOfMeasure__MC = 1086,
	eml22__UnitOfMeasure__mC_x002fm2 = 1087,
	eml22__UnitOfMeasure__Mcal_x005bth_x005d = 1088,
	eml22__UnitOfMeasure__mcal_x005bth_x005d = 1089,
	eml22__UnitOfMeasure__mCi = 1090,
	eml22__UnitOfMeasure__mD = 1091,
	eml22__UnitOfMeasure__mD_x002eft = 1092,
	eml22__UnitOfMeasure__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 1093,
	eml22__UnitOfMeasure__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 1094,
	eml22__UnitOfMeasure__mD_x002em = 1095,
	eml22__UnitOfMeasure__mD_x002f_x0028Pa_x002es_x0029 = 1096,
	eml22__UnitOfMeasure__mD_x002fcP = 1097,
	eml22__UnitOfMeasure__mEuc = 1098,
	eml22__UnitOfMeasure__MEuc = 1099,
	eml22__UnitOfMeasure__MeV = 1100,
	eml22__UnitOfMeasure__meV = 1101,
	eml22__UnitOfMeasure__MF = 1102,
	eml22__UnitOfMeasure__mF = 1103,
	eml22__UnitOfMeasure__mg = 1104,
	eml22__UnitOfMeasure__Mg = 1105,
	eml22__UnitOfMeasure__Mg_x002fa = 1106,
	eml22__UnitOfMeasure__Mg_x002fd = 1107,
	eml22__UnitOfMeasure__mg_x002fdm3 = 1108,
	eml22__UnitOfMeasure__mg_x002fg = 1109,
	eml22__UnitOfMeasure__mg_x002fgal_x005bUS_x005d = 1110,
	eml22__UnitOfMeasure__Mg_x002fh = 1111,
	eml22__UnitOfMeasure__Mg_x002fin = 1112,
	eml22__UnitOfMeasure__mg_x002fJ = 1113,
	eml22__UnitOfMeasure__mg_x002fkg = 1114,
	eml22__UnitOfMeasure__mg_x002fL = 1115,
	eml22__UnitOfMeasure__Mg_x002fm2 = 1116,
	eml22__UnitOfMeasure__mg_x002fm3 = 1117,
	eml22__UnitOfMeasure__Mg_x002fm3 = 1118,
	eml22__UnitOfMeasure__Mg_x002fmin = 1119,
	eml22__UnitOfMeasure__mGal = 1120,
	eml22__UnitOfMeasure__mgauss = 1121,
	eml22__UnitOfMeasure__Mgauss = 1122,
	eml22__UnitOfMeasure__Mgf = 1123,
	eml22__UnitOfMeasure__mgn = 1124,
	eml22__UnitOfMeasure__MGy = 1125,
	eml22__UnitOfMeasure__mGy = 1126,
	eml22__UnitOfMeasure__MH = 1127,
	eml22__UnitOfMeasure__mH = 1128,
	eml22__UnitOfMeasure__MHz = 1129,
	eml22__UnitOfMeasure__mHz = 1130,
	eml22__UnitOfMeasure__mi = 1131,
	eml22__UnitOfMeasure__mi_x002fgal_x005bUK_x005d = 1132,
	eml22__UnitOfMeasure__mi_x002fgal_x005bUS_x005d = 1133,
	eml22__UnitOfMeasure__mi_x002fh = 1134,
	eml22__UnitOfMeasure__mi_x002fin = 1135,
	eml22__UnitOfMeasure__mi_x005bnaut_x005d = 1136,
	eml22__UnitOfMeasure__mi_x005bnautUK_x005d = 1137,
	eml22__UnitOfMeasure__mi_x005bUS_x005d = 1138,
	eml22__UnitOfMeasure__mi_x005bUS_x005d2 = 1139,
	eml22__UnitOfMeasure__mi2 = 1140,
	eml22__UnitOfMeasure__mi3 = 1141,
	eml22__UnitOfMeasure__Mibyte = 1142,
	eml22__UnitOfMeasure__mil = 1143,
	eml22__UnitOfMeasure__mil_x002fa = 1144,
	eml22__UnitOfMeasure__mila = 1145,
	eml22__UnitOfMeasure__min_ = 1146,
	eml22__UnitOfMeasure__min_x002fft = 1147,
	eml22__UnitOfMeasure__min_x002fm = 1148,
	eml22__UnitOfMeasure__mina = 1149,
	eml22__UnitOfMeasure__MJ = 1150,
	eml22__UnitOfMeasure__mJ = 1151,
	eml22__UnitOfMeasure__MJ_x002fa = 1152,
	eml22__UnitOfMeasure__mJ_x002fcm2 = 1153,
	eml22__UnitOfMeasure__MJ_x002fkg = 1154,
	eml22__UnitOfMeasure__MJ_x002fkmol = 1155,
	eml22__UnitOfMeasure__MJ_x002fm = 1156,
	eml22__UnitOfMeasure__mJ_x002fm2 = 1157,
	eml22__UnitOfMeasure__MJ_x002fm3 = 1158,
	eml22__UnitOfMeasure__mL = 1159,
	eml22__UnitOfMeasure__mL_x002fgal_x005bUK_x005d = 1160,
	eml22__UnitOfMeasure__mL_x002fgal_x005bUS_x005d = 1161,
	eml22__UnitOfMeasure__mL_x002fmL = 1162,
	eml22__UnitOfMeasure__mm = 1163,
	eml22__UnitOfMeasure__Mm = 1164,
	eml22__UnitOfMeasure__mm_x002f_x0028mm_x002eK_x0029 = 1165,
	eml22__UnitOfMeasure__mm_x002fa = 1166,
	eml22__UnitOfMeasure__mm_x002fs = 1167,
	eml22__UnitOfMeasure__mm2 = 1168,
	eml22__UnitOfMeasure__mm2_x002fmm2 = 1169,
	eml22__UnitOfMeasure__mm2_x002fs = 1170,
	eml22__UnitOfMeasure__mm3 = 1171,
	eml22__UnitOfMeasure__mm3_x002fJ = 1172,
	eml22__UnitOfMeasure__mmHg_x005b0degC_x005d = 1173,
	eml22__UnitOfMeasure__mmol = 1174,
	eml22__UnitOfMeasure__MN = 1175,
	eml22__UnitOfMeasure__mN = 1176,
	eml22__UnitOfMeasure__mN_x002em2 = 1177,
	eml22__UnitOfMeasure__mN_x002fkm = 1178,
	eml22__UnitOfMeasure__mN_x002fm = 1179,
	eml22__UnitOfMeasure__Mohm = 1180,
	eml22__UnitOfMeasure__mohm = 1181,
	eml22__UnitOfMeasure__mol = 1182,
	eml22__UnitOfMeasure__mol_x002em2_x002f_x0028mol_x002es_x0029 = 1183,
	eml22__UnitOfMeasure__mol_x002f_x0028s_x002em2_x0029 = 1184,
	eml22__UnitOfMeasure__mol_x002fm2 = 1185,
	eml22__UnitOfMeasure__mol_x002fm3 = 1186,
	eml22__UnitOfMeasure__mol_x002fmol = 1187,
	eml22__UnitOfMeasure__mol_x002fs = 1188,
	eml22__UnitOfMeasure__MP = 1189,
	eml22__UnitOfMeasure__mP = 1190,
	eml22__UnitOfMeasure__MPa = 1191,
	eml22__UnitOfMeasure__mPa = 1192,
	eml22__UnitOfMeasure__mPa_x002es = 1193,
	eml22__UnitOfMeasure__MPa_x002es_x002fm = 1194,
	eml22__UnitOfMeasure__MPa_x002fh = 1195,
	eml22__UnitOfMeasure__MPa_x002fm = 1196,
	eml22__UnitOfMeasure__Mpsi = 1197,
	eml22__UnitOfMeasure__mrad = 1198,
	eml22__UnitOfMeasure__Mrad = 1199,
	eml22__UnitOfMeasure__Mrd = 1200,
	eml22__UnitOfMeasure__mrd = 1201,
	eml22__UnitOfMeasure__mrem = 1202,
	eml22__UnitOfMeasure__mrem_x002fh = 1203,
	eml22__UnitOfMeasure__ms = 1204,
	eml22__UnitOfMeasure__MS = 1205,
	eml22__UnitOfMeasure__mS = 1206,
	eml22__UnitOfMeasure__ms_x002fcm = 1207,
	eml22__UnitOfMeasure__mS_x002fcm = 1208,
	eml22__UnitOfMeasure__ms_x002fft = 1209,
	eml22__UnitOfMeasure__ms_x002fin = 1210,
	eml22__UnitOfMeasure__mS_x002fm = 1211,
	eml22__UnitOfMeasure__ms_x002fm = 1212,
	eml22__UnitOfMeasure__ms_x002fs = 1213,
	eml22__UnitOfMeasure__mSv = 1214,
	eml22__UnitOfMeasure__mSv_x002fh = 1215,
	eml22__UnitOfMeasure__mT = 1216,
	eml22__UnitOfMeasure__mT_x002fdm = 1217,
	eml22__UnitOfMeasure__mV = 1218,
	eml22__UnitOfMeasure__MV = 1219,
	eml22__UnitOfMeasure__mV_x002fft = 1220,
	eml22__UnitOfMeasure__mV_x002fm = 1221,
	eml22__UnitOfMeasure__mW = 1222,
	eml22__UnitOfMeasure__MW = 1223,
	eml22__UnitOfMeasure__MW_x002eh = 1224,
	eml22__UnitOfMeasure__MW_x002eh_x002fkg = 1225,
	eml22__UnitOfMeasure__MW_x002eh_x002fm3 = 1226,
	eml22__UnitOfMeasure__mW_x002fm2 = 1227,
	eml22__UnitOfMeasure__mWb = 1228,
	eml22__UnitOfMeasure__MWb = 1229,
	eml22__UnitOfMeasure__N_x002em = 1230,
	eml22__UnitOfMeasure__N_x002em_x002fm = 1231,
	eml22__UnitOfMeasure__N_x002em2 = 1232,
	eml22__UnitOfMeasure__N_x002es_x002fm2 = 1233,
	eml22__UnitOfMeasure__N_x002fm = 1234,
	eml22__UnitOfMeasure__N_x002fm2 = 1235,
	eml22__UnitOfMeasure__N_x002fm3 = 1236,
	eml22__UnitOfMeasure__N_x002fmm2 = 1237,
	eml22__UnitOfMeasure__N_x002fN = 1238,
	eml22__UnitOfMeasure__nA = 1239,
	eml22__UnitOfMeasure__na = 1240,
	eml22__UnitOfMeasure__nAPI = 1241,
	eml22__UnitOfMeasure__nC = 1242,
	eml22__UnitOfMeasure__ncal_x005bth_x005d = 1243,
	eml22__UnitOfMeasure__nCi = 1244,
	eml22__UnitOfMeasure__nEuc = 1245,
	eml22__UnitOfMeasure__neV = 1246,
	eml22__UnitOfMeasure__nF = 1247,
	eml22__UnitOfMeasure__ng = 1248,
	eml22__UnitOfMeasure__ng_x002fg = 1249,
	eml22__UnitOfMeasure__ng_x002fmg = 1250,
	eml22__UnitOfMeasure__ngauss = 1251,
	eml22__UnitOfMeasure__nGy = 1252,
	eml22__UnitOfMeasure__nH = 1253,
	eml22__UnitOfMeasure__nHz = 1254,
	eml22__UnitOfMeasure__nJ = 1255,
	eml22__UnitOfMeasure__nm = 1256,
	eml22__UnitOfMeasure__nm_x002fs = 1257,
	eml22__UnitOfMeasure__nN = 1258,
	eml22__UnitOfMeasure__nohm = 1259,
	eml22__UnitOfMeasure__nohm_x002emil2_x002fft = 1260,
	eml22__UnitOfMeasure__nohm_x002emm2_x002fm = 1261,
	eml22__UnitOfMeasure__nP = 1262,
	eml22__UnitOfMeasure__nPa = 1263,
	eml22__UnitOfMeasure__nrd = 1264,
	eml22__UnitOfMeasure__nS = 1265,
	eml22__UnitOfMeasure__ns = 1266,
	eml22__UnitOfMeasure__ns_x002fft = 1267,
	eml22__UnitOfMeasure__ns_x002fm = 1268,
	eml22__UnitOfMeasure__nT = 1269,
	eml22__UnitOfMeasure__nV = 1270,
	eml22__UnitOfMeasure__nW = 1271,
	eml22__UnitOfMeasure__nWb = 1272,
	eml22__UnitOfMeasure__Oe = 1273,
	eml22__UnitOfMeasure__ohm = 1274,
	eml22__UnitOfMeasure__ohm_x002ecm = 1275,
	eml22__UnitOfMeasure__ohm_x002em = 1276,
	eml22__UnitOfMeasure__ohm_x002em2_x002fm = 1277,
	eml22__UnitOfMeasure__ohm_x002fm = 1278,
	eml22__UnitOfMeasure__ozf = 1279,
	eml22__UnitOfMeasure__ozm = 1280,
	eml22__UnitOfMeasure__ozm_x005btroy_x005d = 1281,
	eml22__UnitOfMeasure__Pa = 1282,
	eml22__UnitOfMeasure__pA = 1283,
	eml22__UnitOfMeasure__Pa_x002es = 1284,
	eml22__UnitOfMeasure__Pa_x002es_x002em3_x002fkg = 1285,
	eml22__UnitOfMeasure__Pa_x002es_x002fm3 = 1286,
	eml22__UnitOfMeasure__Pa_x002es2_x002fm3 = 1287,
	eml22__UnitOfMeasure__Pa_x002fh = 1288,
	eml22__UnitOfMeasure__Pa_x002fm = 1289,
	eml22__UnitOfMeasure__Pa_x002fm3 = 1290,
	eml22__UnitOfMeasure__Pa_x002fs = 1291,
	eml22__UnitOfMeasure__Pa2 = 1292,
	eml22__UnitOfMeasure__Pa2_x002f_x0028Pa_x002es_x0029 = 1293,
	eml22__UnitOfMeasure__pC = 1294,
	eml22__UnitOfMeasure__pcal_x005bth_x005d = 1295,
	eml22__UnitOfMeasure__pCi = 1296,
	eml22__UnitOfMeasure__pCi_x002fg = 1297,
	eml22__UnitOfMeasure__pdl = 1298,
	eml22__UnitOfMeasure__pdl_x002ecm2 = 1299,
	eml22__UnitOfMeasure__pdl_x002eft = 1300,
	eml22__UnitOfMeasure__pdl_x002fcm = 1301,
	eml22__UnitOfMeasure__pEuc = 1302,
	eml22__UnitOfMeasure__peV = 1303,
	eml22__UnitOfMeasure__pF = 1304,
	eml22__UnitOfMeasure__pg = 1305,
	eml22__UnitOfMeasure__pgauss = 1306,
	eml22__UnitOfMeasure__pGy = 1307,
	eml22__UnitOfMeasure__pHz = 1308,
	eml22__UnitOfMeasure__pJ = 1309,
	eml22__UnitOfMeasure__pm = 1310,
	eml22__UnitOfMeasure__pN = 1311,
	eml22__UnitOfMeasure__pohm = 1312,
	eml22__UnitOfMeasure__pP = 1313,
	eml22__UnitOfMeasure__pPa = 1314,
	eml22__UnitOfMeasure__ppk = 1315,
	eml22__UnitOfMeasure__ppm = 1316,
	eml22__UnitOfMeasure__ppm_x005bmass_x005d = 1317,
	eml22__UnitOfMeasure__ppm_x005bvol_x005d = 1318,
	eml22__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegC = 1319,
	eml22__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegF = 1320,
	eml22__UnitOfMeasure__prd = 1321,
	eml22__UnitOfMeasure__pS = 1322,
	eml22__UnitOfMeasure__ps = 1323,
	eml22__UnitOfMeasure__psi = 1324,
	eml22__UnitOfMeasure__psi_x002ed_x002fbbl = 1325,
	eml22__UnitOfMeasure__psi_x002es = 1326,
	eml22__UnitOfMeasure__psi_x002fft = 1327,
	eml22__UnitOfMeasure__psi_x002fh = 1328,
	eml22__UnitOfMeasure__psi_x002fm = 1329,
	eml22__UnitOfMeasure__psi_x002fmin = 1330,
	eml22__UnitOfMeasure__psi2 = 1331,
	eml22__UnitOfMeasure__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1332,
	eml22__UnitOfMeasure__psi2_x002fcP = 1333,
	eml22__UnitOfMeasure__pT = 1334,
	eml22__UnitOfMeasure__pt_x005bUK_x005d = 1335,
	eml22__UnitOfMeasure__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 1336,
	eml22__UnitOfMeasure__pt_x005bUS_x005d = 1337,
	eml22__UnitOfMeasure__pV = 1338,
	eml22__UnitOfMeasure__pW = 1339,
	eml22__UnitOfMeasure__pWb = 1340,
	eml22__UnitOfMeasure__qt_x005bUK_x005d = 1341,
	eml22__UnitOfMeasure__qt_x005bUS_x005d = 1342,
	eml22__UnitOfMeasure__quad = 1343,
	eml22__UnitOfMeasure__quad_x002fa = 1344,
	eml22__UnitOfMeasure__rad = 1345,
	eml22__UnitOfMeasure__rad_x002fft = 1346,
	eml22__UnitOfMeasure__rad_x002fft3 = 1347,
	eml22__UnitOfMeasure__rad_x002fm = 1348,
	eml22__UnitOfMeasure__rad_x002fm3 = 1349,
	eml22__UnitOfMeasure__rad_x002fs = 1350,
	eml22__UnitOfMeasure__rad_x002fs2 = 1351,
	eml22__UnitOfMeasure__rd = 1352,
	eml22__UnitOfMeasure__rem = 1353,
	eml22__UnitOfMeasure__rem_x002fh = 1354,
	eml22__UnitOfMeasure__rev = 1355,
	eml22__UnitOfMeasure__rev_x002fft = 1356,
	eml22__UnitOfMeasure__rev_x002fm = 1357,
	eml22__UnitOfMeasure__rev_x002fs = 1358,
	eml22__UnitOfMeasure__rod_x005bUS_x005d = 1359,
	eml22__UnitOfMeasure__rpm = 1360,
	eml22__UnitOfMeasure__rpm_x002fs = 1361,
	eml22__UnitOfMeasure__s_x002fcm = 1362,
	eml22__UnitOfMeasure__s_x002fft = 1363,
	eml22__UnitOfMeasure__s_x002fft3 = 1364,
	eml22__UnitOfMeasure__s_x002fin = 1365,
	eml22__UnitOfMeasure__s_x002fkg = 1366,
	eml22__UnitOfMeasure__s_x002fL = 1367,
	eml22__UnitOfMeasure__S_x002fm = 1368,
	eml22__UnitOfMeasure__s_x002fm = 1369,
	eml22__UnitOfMeasure__s_x002fm3 = 1370,
	eml22__UnitOfMeasure__s_x002fqt_x005bUK_x005d = 1371,
	eml22__UnitOfMeasure__s_x002fqt_x005bUS_x005d = 1372,
	eml22__UnitOfMeasure__s_x002fs = 1373,
	eml22__UnitOfMeasure__sack_x005b94lbm_x005d = 1374,
	eml22__UnitOfMeasure__seca = 1375,
	eml22__UnitOfMeasure__section = 1376,
	eml22__UnitOfMeasure__sr = 1377,
	eml22__UnitOfMeasure__St = 1378,
	eml22__UnitOfMeasure__Sv = 1379,
	eml22__UnitOfMeasure__Sv_x002fh = 1380,
	eml22__UnitOfMeasure__Sv_x002fs = 1381,
	eml22__UnitOfMeasure__t_x002fa = 1382,
	eml22__UnitOfMeasure__t_x002fd = 1383,
	eml22__UnitOfMeasure__t_x002fh = 1384,
	eml22__UnitOfMeasure__T_x002fm = 1385,
	eml22__UnitOfMeasure__t_x002fm3 = 1386,
	eml22__UnitOfMeasure__t_x002fmin = 1387,
	eml22__UnitOfMeasure__TA = 1388,
	eml22__UnitOfMeasure__Ta_x005bt_x005d = 1389,
	eml22__UnitOfMeasure__TBq = 1390,
	eml22__UnitOfMeasure__TC = 1391,
	eml22__UnitOfMeasure__Tcal_x005bth_x005d = 1392,
	eml22__UnitOfMeasure__TD_x005bAPI_x005d = 1393,
	eml22__UnitOfMeasure__TD_x005bAPI_x005d_x002em = 1394,
	eml22__UnitOfMeasure__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 1395,
	eml22__UnitOfMeasure__TEuc = 1396,
	eml22__UnitOfMeasure__TeV = 1397,
	eml22__UnitOfMeasure__TF = 1398,
	eml22__UnitOfMeasure__Tg = 1399,
	eml22__UnitOfMeasure__Tgauss = 1400,
	eml22__UnitOfMeasure__TGy = 1401,
	eml22__UnitOfMeasure__TH = 1402,
	eml22__UnitOfMeasure__therm_x005bEC_x005d = 1403,
	eml22__UnitOfMeasure__therm_x005bUK_x005d = 1404,
	eml22__UnitOfMeasure__therm_x005bUS_x005d = 1405,
	eml22__UnitOfMeasure__THz = 1406,
	eml22__UnitOfMeasure__TJ = 1407,
	eml22__UnitOfMeasure__TJ_x002fa = 1408,
	eml22__UnitOfMeasure__Tm = 1409,
	eml22__UnitOfMeasure__TN = 1410,
	eml22__UnitOfMeasure__Tohm = 1411,
	eml22__UnitOfMeasure__ton_x005bUK_x005d = 1412,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fa = 1413,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fd = 1414,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fh = 1415,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fmin = 1416,
	eml22__UnitOfMeasure__ton_x005bUS_x005d = 1417,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fa = 1418,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fd = 1419,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fft2 = 1420,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fh = 1421,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fmin = 1422,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d = 1423,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d_x002eft2 = 1424,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d_x002fft = 1425,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d_x002fft2 = 1426,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d = 1427,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002eft = 1428,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002eft2 = 1429,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002emi = 1430,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fbbl = 1431,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fft = 1432,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002fft = 1433,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002fft2 = 1434,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002fin2 = 1435,
	eml22__UnitOfMeasure__tonRefrig = 1436,
	eml22__UnitOfMeasure__torr = 1437,
	eml22__UnitOfMeasure__TP = 1438,
	eml22__UnitOfMeasure__TPa = 1439,
	eml22__UnitOfMeasure__Trd = 1440,
	eml22__UnitOfMeasure__TS = 1441,
	eml22__UnitOfMeasure__TT = 1442,
	eml22__UnitOfMeasure__TV = 1443,
	eml22__UnitOfMeasure__TW = 1444,
	eml22__UnitOfMeasure__TW_x002eh = 1445,
	eml22__UnitOfMeasure__TWb = 1446,
	eml22__UnitOfMeasure__uA = 1447,
	eml22__UnitOfMeasure__uA_x002fcm2 = 1448,
	eml22__UnitOfMeasure__uA_x002fin2 = 1449,
	eml22__UnitOfMeasure__ubar = 1450,
	eml22__UnitOfMeasure__uC = 1451,
	eml22__UnitOfMeasure__ucal_x005bth_x005d = 1452,
	eml22__UnitOfMeasure__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 1453,
	eml22__UnitOfMeasure__ucal_x005bth_x005d_x002fs = 1454,
	eml22__UnitOfMeasure__uCi = 1455,
	eml22__UnitOfMeasure__uEuc = 1456,
	eml22__UnitOfMeasure__ueV = 1457,
	eml22__UnitOfMeasure__uF = 1458,
	eml22__UnitOfMeasure__uF_x002fm = 1459,
	eml22__UnitOfMeasure__ug = 1460,
	eml22__UnitOfMeasure__ug_x002fcm3 = 1461,
	eml22__UnitOfMeasure__ug_x002fg = 1462,
	eml22__UnitOfMeasure__ug_x002fmg = 1463,
	eml22__UnitOfMeasure__ugauss = 1464,
	eml22__UnitOfMeasure__uGy = 1465,
	eml22__UnitOfMeasure__uH = 1466,
	eml22__UnitOfMeasure__uH_x002fm = 1467,
	eml22__UnitOfMeasure__uHz = 1468,
	eml22__UnitOfMeasure__uJ = 1469,
	eml22__UnitOfMeasure__um = 1470,
	eml22__UnitOfMeasure__um_x002fs = 1471,
	eml22__UnitOfMeasure__um2 = 1472,
	eml22__UnitOfMeasure__um2_x002em = 1473,
	eml22__UnitOfMeasure__umHg_x005b0degC_x005d = 1474,
	eml22__UnitOfMeasure__umol = 1475,
	eml22__UnitOfMeasure__uN = 1476,
	eml22__UnitOfMeasure__uohm = 1477,
	eml22__UnitOfMeasure__uohm_x002fft = 1478,
	eml22__UnitOfMeasure__uohm_x002fm = 1479,
	eml22__UnitOfMeasure__uP = 1480,
	eml22__UnitOfMeasure__uPa = 1481,
	eml22__UnitOfMeasure__upsi = 1482,
	eml22__UnitOfMeasure__urad = 1483,
	eml22__UnitOfMeasure__urd = 1484,
	eml22__UnitOfMeasure__us = 1485,
	eml22__UnitOfMeasure__uS = 1486,
	eml22__UnitOfMeasure__us_x002fft = 1487,
	eml22__UnitOfMeasure__us_x002fin = 1488,
	eml22__UnitOfMeasure__us_x002fm = 1489,
	eml22__UnitOfMeasure__uT = 1490,
	eml22__UnitOfMeasure__uV = 1491,
	eml22__UnitOfMeasure__uV_x002fft = 1492,
	eml22__UnitOfMeasure__uV_x002fm = 1493,
	eml22__UnitOfMeasure__uW = 1494,
	eml22__UnitOfMeasure__uW_x002fm3 = 1495,
	eml22__UnitOfMeasure__uWb = 1496,
	eml22__UnitOfMeasure__V_x002fB = 1497,
	eml22__UnitOfMeasure__V_x002fdB = 1498,
	eml22__UnitOfMeasure__V_x002fm = 1499,
	eml22__UnitOfMeasure__W_x002em2_x002eK_x002f_x0028J_x002eK_x0029 = 1500,
	eml22__UnitOfMeasure__W_x002f_x0028m_x002eK_x0029 = 1501,
	eml22__UnitOfMeasure__W_x002f_x0028m2_x002eK_x0029 = 1502,
	eml22__UnitOfMeasure__W_x002f_x0028m2_x002esr_x0029 = 1503,
	eml22__UnitOfMeasure__W_x002f_x0028m3_x002eK_x0029 = 1504,
	eml22__UnitOfMeasure__W_x002fcm2 = 1505,
	eml22__UnitOfMeasure__W_x002fK = 1506,
	eml22__UnitOfMeasure__W_x002fkW = 1507,
	eml22__UnitOfMeasure__W_x002fm2 = 1508,
	eml22__UnitOfMeasure__W_x002fm3 = 1509,
	eml22__UnitOfMeasure__W_x002fmm2 = 1510,
	eml22__UnitOfMeasure__W_x002fsr = 1511,
	eml22__UnitOfMeasure__W_x002fW = 1512,
	eml22__UnitOfMeasure__Wb = 1513,
	eml22__UnitOfMeasure__Wb_x002em = 1514,
	eml22__UnitOfMeasure__Wb_x002fm = 1515,
	eml22__UnitOfMeasure__Wb_x002fmm = 1516,
	eml22__UnitOfMeasure__wk = 1517,
	eml22__UnitOfMeasure__yd = 1518,
	eml22__UnitOfMeasure__yd_x005bBnA_x005d = 1519,
	eml22__UnitOfMeasure__yd_x005bBnB_x005d = 1520,
	eml22__UnitOfMeasure__yd_x005bCla_x005d = 1521,
	eml22__UnitOfMeasure__yd_x005bInd_x005d = 1522,
	eml22__UnitOfMeasure__yd_x005bInd37_x005d = 1523,
	eml22__UnitOfMeasure__yd_x005bInd62_x005d = 1524,
	eml22__UnitOfMeasure__yd_x005bInd75_x005d = 1525,
	eml22__UnitOfMeasure__yd_x005bSe_x005d = 1526,
	eml22__UnitOfMeasure__yd_x005bSeT_x005d = 1527,
	eml22__UnitOfMeasure__yd_x005bUS_x005d = 1528,
	eml22__UnitOfMeasure__yd2 = 1529,
	eml22__UnitOfMeasure__yd3 = 1530
};
#endif

/* eml2_2ForGsoap.h:5250 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom (-1087)

/* eml22:AbsorbedDoseUom */
enum eml22__AbsorbedDoseUom {
	eml22__AbsorbedDoseUom__cGy = 0,
	eml22__AbsorbedDoseUom__crd = 1,
	eml22__AbsorbedDoseUom__dGy = 2,
	eml22__AbsorbedDoseUom__drd = 3,
	eml22__AbsorbedDoseUom__EGy = 4,
	eml22__AbsorbedDoseUom__Erd = 5,
	eml22__AbsorbedDoseUom__fGy = 6,
	eml22__AbsorbedDoseUom__frd = 7,
	eml22__AbsorbedDoseUom__GGy = 8,
	eml22__AbsorbedDoseUom__Grd = 9,
	eml22__AbsorbedDoseUom__Gy = 10,
	eml22__AbsorbedDoseUom__kGy = 11,
	eml22__AbsorbedDoseUom__krd = 12,
	eml22__AbsorbedDoseUom__mGy = 13,
	eml22__AbsorbedDoseUom__MGy = 14,
	eml22__AbsorbedDoseUom__Mrd = 15,
	eml22__AbsorbedDoseUom__mrd = 16,
	eml22__AbsorbedDoseUom__nGy = 17,
	eml22__AbsorbedDoseUom__nrd = 18,
	eml22__AbsorbedDoseUom__pGy = 19,
	eml22__AbsorbedDoseUom__prd = 20,
	eml22__AbsorbedDoseUom__rd = 21,
	eml22__AbsorbedDoseUom__TGy = 22,
	eml22__AbsorbedDoseUom__Trd = 23,
	eml22__AbsorbedDoseUom__uGy = 24,
	eml22__AbsorbedDoseUom__urd = 25
};
#endif

/* eml2_2ForGsoap.h:5361 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom (-1088)

/* eml22:ActivityOfRadioactivityUom */
enum eml22__ActivityOfRadioactivityUom {
	eml22__ActivityOfRadioactivityUom__Bq = 0,
	eml22__ActivityOfRadioactivityUom__Ci = 1,
	eml22__ActivityOfRadioactivityUom__GBq = 2,
	eml22__ActivityOfRadioactivityUom__MBq = 3,
	eml22__ActivityOfRadioactivityUom__mCi = 4,
	eml22__ActivityOfRadioactivityUom__nCi = 5,
	eml22__ActivityOfRadioactivityUom__pCi = 6,
	eml22__ActivityOfRadioactivityUom__TBq = 7,
	eml22__ActivityOfRadioactivityUom__uCi = 8
};
#endif

/* eml2_2ForGsoap.h:5404 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom (-1089)

/* eml22:AmountOfSubstancePerAmountOfSubstanceUom */
enum eml22__AmountOfSubstancePerAmountOfSubstanceUom {
	eml22__AmountOfSubstancePerAmountOfSubstanceUom___x0025 = 0,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom___x0025_x005bmolar_x005d = 1,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__Euc = 2,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__mol_x002fmol = 3,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__nEuc = 4,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__ppk = 5,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__ppm = 6
};
#endif

/* eml2_2ForGsoap.h:5439 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom (-1090)

/* eml22:AmountOfSubstancePerAreaUom */
enum eml22__AmountOfSubstancePerAreaUom {
	eml22__AmountOfSubstancePerAreaUom__mol_x002fm2 = 0
};
#endif

/* eml2_2ForGsoap.h:5450 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom (-1091)

/* eml22:AmountOfSubstancePerTimePerAreaUom */
enum eml22__AmountOfSubstancePerTimePerAreaUom {
	eml22__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028h_x002eft2_x0029 = 0,
	eml22__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028s_x002eft2_x0029 = 1,
	eml22__AmountOfSubstancePerTimePerAreaUom__mol_x002f_x0028s_x002em2_x0029 = 2
};
#endif

/* eml2_2ForGsoap.h:5469 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom (-1092)

/* eml22:AmountOfSubstancePerTimeUom */
enum eml22__AmountOfSubstancePerTimeUom {
	eml22__AmountOfSubstancePerTimeUom__kat = 0,
	eml22__AmountOfSubstancePerTimeUom__kmol_x002fh = 1,
	eml22__AmountOfSubstancePerTimeUom__kmol_x002fs = 2,
	eml22__AmountOfSubstancePerTimeUom__lbmol_x002fh = 3,
	eml22__AmountOfSubstancePerTimeUom__lbmol_x002fs = 4,
	eml22__AmountOfSubstancePerTimeUom__mol_x002fs = 5
};
#endif

/* eml2_2ForGsoap.h:5500 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom (-1093)

/* eml22:AmountOfSubstancePerVolumeUom */
enum eml22__AmountOfSubstancePerVolumeUom {
	eml22__AmountOfSubstancePerVolumeUom__kmol_x002fm3 = 0,
	eml22__AmountOfSubstancePerVolumeUom__lbmol_x002fft3 = 1,
	eml22__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUK_x005d = 2,
	eml22__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUS_x005d = 3,
	eml22__AmountOfSubstancePerVolumeUom__mol_x002fm3 = 4
};
#endif

/* eml2_2ForGsoap.h:5527 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom (-1094)

/* eml22:AmountOfSubstanceUom */
enum eml22__AmountOfSubstanceUom {
	eml22__AmountOfSubstanceUom__kmol = 0,
	eml22__AmountOfSubstanceUom__lbmol = 1,
	eml22__AmountOfSubstanceUom__mmol = 2,
	eml22__AmountOfSubstanceUom__mol = 3,
	eml22__AmountOfSubstanceUom__umol = 4
};
#endif

/* eml2_2ForGsoap.h:5554 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom (-1095)

/* eml22:AnglePerLengthUom */
enum eml22__AnglePerLengthUom {
	eml22__AnglePerLengthUom__0_x002e01_x0020dega_x002fft = 0,
	eml22__AnglePerLengthUom__1_x002f30_x0020dega_x002fft = 1,
	eml22__AnglePerLengthUom__1_x002f30_x0020dega_x002fm = 2,
	eml22__AnglePerLengthUom__dega_x002fft = 3,
	eml22__AnglePerLengthUom__dega_x002fm = 4,
	eml22__AnglePerLengthUom__rad_x002fft = 5,
	eml22__AnglePerLengthUom__rad_x002fm = 6,
	eml22__AnglePerLengthUom__rev_x002fft = 7,
	eml22__AnglePerLengthUom__rev_x002fm = 8
};
#endif

/* eml2_2ForGsoap.h:5597 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom (-1096)

/* eml22:AnglePerVolumeUom */
enum eml22__AnglePerVolumeUom {
	eml22__AnglePerVolumeUom__rad_x002fft3 = 0,
	eml22__AnglePerVolumeUom__rad_x002fm3 = 1
};
#endif

/* eml2_2ForGsoap.h:5612 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom (-1097)

/* eml22:AngularAccelerationUom */
enum eml22__AngularAccelerationUom {
	eml22__AngularAccelerationUom__rad_x002fs2 = 0,
	eml22__AngularAccelerationUom__rpm_x002fs = 1
};
#endif

/* eml2_2ForGsoap.h:5627 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom (-1098)

/* eml22:AngularVelocityUom */
enum eml22__AngularVelocityUom {
	eml22__AngularVelocityUom__dega_x002fh = 0,
	eml22__AngularVelocityUom__dega_x002fmin = 1,
	eml22__AngularVelocityUom__dega_x002fs = 2,
	eml22__AngularVelocityUom__rad_x002fs = 3,
	eml22__AngularVelocityUom__rev_x002fs = 4,
	eml22__AngularVelocityUom__rpm = 5
};
#endif

/* eml2_2ForGsoap.h:5658 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom (-1099)

/* eml22:APIGammaRayUom */
enum eml22__APIGammaRayUom {
	eml22__APIGammaRayUom__gAPI = 0
};
#endif

/* eml2_2ForGsoap.h:5669 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom (-1100)

/* eml22:APIGravityUom */
enum eml22__APIGravityUom {
	eml22__APIGravityUom__dAPI = 0
};
#endif

/* eml2_2ForGsoap.h:5680 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom (-1101)

/* eml22:APINeutronUom */
enum eml22__APINeutronUom {
	eml22__APINeutronUom__nAPI = 0
};
#endif

/* eml2_2ForGsoap.h:5691 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom (-1102)

/* eml22:AreaPerAmountOfSubstanceUom */
enum eml22__AreaPerAmountOfSubstanceUom {
	eml22__AreaPerAmountOfSubstanceUom__m2_x002fmol = 0
};
#endif

/* eml2_2ForGsoap.h:5702 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom (-1103)

/* eml22:AreaPerAreaUom */
enum eml22__AreaPerAreaUom {
	eml22__AreaPerAreaUom___x0025 = 0,
	eml22__AreaPerAreaUom___x0025_x005barea_x005d = 1,
	eml22__AreaPerAreaUom__cEuc = 2,
	eml22__AreaPerAreaUom__Euc = 3,
	eml22__AreaPerAreaUom__in2_x002fft2 = 4,
	eml22__AreaPerAreaUom__in2_x002fin2 = 5,
	eml22__AreaPerAreaUom__m2_x002fm2 = 6,
	eml22__AreaPerAreaUom__mm2_x002fmm2 = 7
};
#endif

/* eml2_2ForGsoap.h:5741 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom (-1104)

/* eml22:AreaPerCountUom */
enum eml22__AreaPerCountUom {
	eml22__AreaPerCountUom__b_x002felectron = 0
};
#endif

/* eml2_2ForGsoap.h:5749 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom (-1105)

/* eml22:AreaPerMassUom */
enum eml22__AreaPerMassUom {
	eml22__AreaPerMassUom__cm2_x002fg = 0,
	eml22__AreaPerMassUom__ft2_x002flbm = 1,
	eml22__AreaPerMassUom__m2_x002fg = 2,
	eml22__AreaPerMassUom__m2_x002fkg = 3
};
#endif

/* eml2_2ForGsoap.h:5772 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom (-1106)

/* eml22:AreaPerTimeUom */
enum eml22__AreaPerTimeUom {
	eml22__AreaPerTimeUom__cm2_x002fs = 0,
	eml22__AreaPerTimeUom__ft2_x002fh = 1,
	eml22__AreaPerTimeUom__ft2_x002fs = 2,
	eml22__AreaPerTimeUom__in2_x002fs = 3,
	eml22__AreaPerTimeUom__m2_x002fd = 4,
	eml22__AreaPerTimeUom__m2_x002fh = 5,
	eml22__AreaPerTimeUom__m2_x002fs = 6,
	eml22__AreaPerTimeUom__mm2_x002fs = 7
};
#endif

/* eml2_2ForGsoap.h:5811 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom (-1107)

/* eml22:AreaPerVolumeUom */
enum eml22__AreaPerVolumeUom {
	eml22__AreaPerVolumeUom__1_x002fm = 0,
	eml22__AreaPerVolumeUom__b_x002fcm3 = 1,
	eml22__AreaPerVolumeUom__cu = 2,
	eml22__AreaPerVolumeUom__ft2_x002fin3 = 3,
	eml22__AreaPerVolumeUom__m2_x002fcm3 = 4,
	eml22__AreaPerVolumeUom__m2_x002fm3 = 5
};
#endif

/* eml2_2ForGsoap.h:5842 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom (-1108)

/* eml22:AreaUom */
enum eml22__AreaUom {
	eml22__AreaUom__b = 'b',
	eml22__AreaUom__acre = 'c',
	eml22__AreaUom__cm2 = 'd',
	eml22__AreaUom__ft2 = 'e',
	eml22__AreaUom__ha = 'f',
	eml22__AreaUom__in2 = 'g',
	eml22__AreaUom__km2 = 'h',
	eml22__AreaUom__m2 = 'i',
	eml22__AreaUom__mi_x005bUS_x005d2 = 'j',
	eml22__AreaUom__mi2 = 'k',
	eml22__AreaUom__mm2 = 'l',
	eml22__AreaUom__section = 'm',
	eml22__AreaUom__um2 = 'n',
	eml22__AreaUom__yd2 = 'o'
};
#endif

/* eml2_2ForGsoap.h:5905 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom (-1109)

/* eml22:AttenuationPerFrequencyIntervalUom */
enum eml22__AttenuationPerFrequencyIntervalUom {
	eml22__AttenuationPerFrequencyIntervalUom__B_x002fO = 0,
	eml22__AttenuationPerFrequencyIntervalUom__dB_x002fO = 1
};
#endif

/* eml2_2ForGsoap.h:5920 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom (-1110)

/* eml22:CapacitanceUom */
enum eml22__CapacitanceUom {
	eml22__CapacitanceUom__F = 'F',
	eml22__CapacitanceUom__cF = 'G',
	eml22__CapacitanceUom__dF = 'H',
	eml22__CapacitanceUom__EF = 'I',
	eml22__CapacitanceUom__fF = 'J',
	eml22__CapacitanceUom__GF = 'K',
	eml22__CapacitanceUom__kF = 'L',
	eml22__CapacitanceUom__mF = 'M',
	eml22__CapacitanceUom__MF = 'N',
	eml22__CapacitanceUom__nF = 'O',
	eml22__CapacitanceUom__pF = 'P',
	eml22__CapacitanceUom__TF = 'Q',
	eml22__CapacitanceUom__uF = 'R'
};
#endif

/* eml2_2ForGsoap.h:5979 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom (-1111)

/* eml22:CationExchangeCapacityUom */
enum eml22__CationExchangeCapacityUom {
	eml22__CationExchangeCapacityUom___x002e01_x0020meq_x002fg = 0
};
#endif

/* eml2_2ForGsoap.h:5987 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom (-1112)

/* eml22:DataTransferSpeedUom */
enum eml22__DataTransferSpeedUom {
	eml22__DataTransferSpeedUom__bit_x002fs = 0,
	eml22__DataTransferSpeedUom__byte_x002fs = 1
};
#endif

/* eml2_2ForGsoap.h:6002 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom (-1113)

/* eml22:DiffusionCoefficientUom */
enum eml22__DiffusionCoefficientUom {
	eml22__DiffusionCoefficientUom__m2_x002fs = 0
};
#endif

/* eml2_2ForGsoap.h:6013 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom (-1114)

/* eml22:DiffusiveTimeOfFlightUom */
enum eml22__DiffusiveTimeOfFlightUom {
	eml22__DiffusiveTimeOfFlightUom__h_x00280_x002e5_x0029 = 0,
	eml22__DiffusiveTimeOfFlightUom__s_x00280_x002e5_x0029 = 1
};
#endif

/* eml2_2ForGsoap.h:6025 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom (-1115)

/* eml22:DigitalStorageUom */
enum eml22__DigitalStorageUom {
	eml22__DigitalStorageUom__bit = 0,
	eml22__DigitalStorageUom__byte = 1,
	eml22__DigitalStorageUom__Kibyte = 2,
	eml22__DigitalStorageUom__Mibyte = 3
};
#endif

/* eml2_2ForGsoap.h:6048 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom (-1116)

/* eml22:DimensionlessUom */
enum eml22__DimensionlessUom {
	eml22__DimensionlessUom___x0025 = 0,
	eml22__DimensionlessUom__cEuc = 1,
	eml22__DimensionlessUom__dEuc = 2,
	eml22__DimensionlessUom__EEuc = 3,
	eml22__DimensionlessUom__Euc = 4,
	eml22__DimensionlessUom__fEuc = 5,
	eml22__DimensionlessUom__GEuc = 6,
	eml22__DimensionlessUom__kEuc = 7,
	eml22__DimensionlessUom__MEuc = 8,
	eml22__DimensionlessUom__mEuc = 9,
	eml22__DimensionlessUom__nEuc = 10,
	eml22__DimensionlessUom__pEuc = 11,
	eml22__DimensionlessUom__ppk = 12,
	eml22__DimensionlessUom__ppm = 13,
	eml22__DimensionlessUom__TEuc = 14,
	eml22__DimensionlessUom__uEuc = 15
};
#endif

/* eml2_2ForGsoap.h:6119 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom (-1117)

/* eml22:DipoleMomentUom */
enum eml22__DipoleMomentUom {
	eml22__DipoleMomentUom__C_x002em = 0
};
#endif

/* eml2_2ForGsoap.h:6130 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom (-1118)

/* eml22:DoseEquivalentUom */
enum eml22__DoseEquivalentUom {
	eml22__DoseEquivalentUom__mrem = 0,
	eml22__DoseEquivalentUom__mSv = 1,
	eml22__DoseEquivalentUom__rem = 2,
	eml22__DoseEquivalentUom__Sv = 3
};
#endif

/* eml2_2ForGsoap.h:6153 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom (-1119)

/* eml22:DynamicViscosityUom */
enum eml22__DynamicViscosityUom {
	eml22__DynamicViscosityUom__P = 'P',
	eml22__DynamicViscosityUom__cP = 'Q',
	eml22__DynamicViscosityUom__dP = 'R',
	eml22__DynamicViscosityUom__dyne_x002es_x002fcm2 = 'S',
	eml22__DynamicViscosityUom__EP = 'T',
	eml22__DynamicViscosityUom__fP = 'U',
	eml22__DynamicViscosityUom__GP = 'V',
	eml22__DynamicViscosityUom__kgf_x002es_x002fm2 = 'W',
	eml22__DynamicViscosityUom__kP = 'X',
	eml22__DynamicViscosityUom__lbf_x002es_x002fft2 = 'Y',
	eml22__DynamicViscosityUom__lbf_x002es_x002fin2 = 'Z',
	eml22__DynamicViscosityUom__mP = 91,
	eml22__DynamicViscosityUom__MP = 92,
	eml22__DynamicViscosityUom__mPa_x002es = 93,
	eml22__DynamicViscosityUom__N_x002es_x002fm2 = 94,
	eml22__DynamicViscosityUom__nP = 95,
	eml22__DynamicViscosityUom__Pa_x002es = 96,
	eml22__DynamicViscosityUom__pP = 'a',
	eml22__DynamicViscosityUom__psi_x002es = 'b',
	eml22__DynamicViscosityUom__TP = 'c',
	eml22__DynamicViscosityUom__uP = 'd'
};
#endif

/* eml2_2ForGsoap.h:6244 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom (-1120)

/* eml22:ElectricalResistivityUom */
enum eml22__ElectricalResistivityUom {
	eml22__ElectricalResistivityUom__kohm_x002em = 0,
	eml22__ElectricalResistivityUom__nohm_x002emil2_x002fft = 1,
	eml22__ElectricalResistivityUom__nohm_x002emm2_x002fm = 2,
	eml22__ElectricalResistivityUom__ohm_x002ecm = 3,
	eml22__ElectricalResistivityUom__ohm_x002em = 4,
	eml22__ElectricalResistivityUom__ohm_x002em2_x002fm = 5
};
#endif

/* eml2_2ForGsoap.h:6275 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom (-1121)

/* eml22:ElectricChargePerAreaUom */
enum eml22__ElectricChargePerAreaUom {
	eml22__ElectricChargePerAreaUom__C_x002fcm2 = 0,
	eml22__ElectricChargePerAreaUom__C_x002fm2 = 1,
	eml22__ElectricChargePerAreaUom__C_x002fmm2 = 2,
	eml22__ElectricChargePerAreaUom__mC_x002fm2 = 3
};
#endif

/* eml2_2ForGsoap.h:6298 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom (-1122)

/* eml22:ElectricChargePerMassUom */
enum eml22__ElectricChargePerMassUom {
	eml22__ElectricChargePerMassUom__A_x002es_x002fkg = 0,
	eml22__ElectricChargePerMassUom__C_x002fg = 1,
	eml22__ElectricChargePerMassUom__C_x002fkg = 2
};
#endif

/* eml2_2ForGsoap.h:6317 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom (-1123)

/* eml22:ElectricChargePerVolumeUom */
enum eml22__ElectricChargePerVolumeUom {
	eml22__ElectricChargePerVolumeUom__A_x002es_x002fm3 = 0,
	eml22__ElectricChargePerVolumeUom__C_x002fcm3 = 1,
	eml22__ElectricChargePerVolumeUom__C_x002fm3 = 2,
	eml22__ElectricChargePerVolumeUom__C_x002fmm3 = 3
};
#endif

/* eml2_2ForGsoap.h:6340 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom (-1124)

/* eml22:ElectricChargeUom */
enum eml22__ElectricChargeUom {
	eml22__ElectricChargeUom__C = 'C',
	eml22__ElectricChargeUom__A_x002eh = 'D',
	eml22__ElectricChargeUom__A_x002es = 'E',
	eml22__ElectricChargeUom__cC = 'F',
	eml22__ElectricChargeUom__dC = 'G',
	eml22__ElectricChargeUom__EC = 'H',
	eml22__ElectricChargeUom__fC = 'I',
	eml22__ElectricChargeUom__GC = 'J',
	eml22__ElectricChargeUom__kC = 'K',
	eml22__ElectricChargeUom__MC = 'L',
	eml22__ElectricChargeUom__mC = 'M',
	eml22__ElectricChargeUom__nC = 'N',
	eml22__ElectricChargeUom__pC = 'O',
	eml22__ElectricChargeUom__TC = 'P',
	eml22__ElectricChargeUom__uC = 'Q'
};
#endif

/* eml2_2ForGsoap.h:6407 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom (-1125)

/* eml22:ElectricConductanceUom */
enum eml22__ElectricConductanceUom {
	eml22__ElectricConductanceUom__S = 'S',
	eml22__ElectricConductanceUom__cS = 'T',
	eml22__ElectricConductanceUom__dS = 'U',
	eml22__ElectricConductanceUom__ES = 'V',
	eml22__ElectricConductanceUom__fS = 'W',
	eml22__ElectricConductanceUom__GS = 'X',
	eml22__ElectricConductanceUom__kS = 'Y',
	eml22__ElectricConductanceUom__mS = 'Z',
	eml22__ElectricConductanceUom__MS = 91,
	eml22__ElectricConductanceUom__nS = 92,
	eml22__ElectricConductanceUom__pS = 93,
	eml22__ElectricConductanceUom__TS = 94,
	eml22__ElectricConductanceUom__uS = 95
};
#endif

/* eml2_2ForGsoap.h:6466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom (-1126)

/* eml22:ElectricConductivityUom */
enum eml22__ElectricConductivityUom {
	eml22__ElectricConductivityUom__kS_x002fm = 0,
	eml22__ElectricConductivityUom__mS_x002fcm = 1,
	eml22__ElectricConductivityUom__mS_x002fm = 2,
	eml22__ElectricConductivityUom__S_x002fm = 3
};
#endif

/* eml2_2ForGsoap.h:6489 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom (-1127)

/* eml22:ElectricCurrentDensityUom */
enum eml22__ElectricCurrentDensityUom {
	eml22__ElectricCurrentDensityUom__A_x002fcm2 = 0,
	eml22__ElectricCurrentDensityUom__A_x002fft2 = 1,
	eml22__ElectricCurrentDensityUom__A_x002fm2 = 2,
	eml22__ElectricCurrentDensityUom__A_x002fmm2 = 3,
	eml22__ElectricCurrentDensityUom__mA_x002fcm2 = 4,
	eml22__ElectricCurrentDensityUom__mA_x002fft2 = 5,
	eml22__ElectricCurrentDensityUom__uA_x002fcm2 = 6,
	eml22__ElectricCurrentDensityUom__uA_x002fin2 = 7
};
#endif

/* eml2_2ForGsoap.h:6528 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom (-1128)

/* eml22:ElectricCurrentUom */
enum eml22__ElectricCurrentUom {
	eml22__ElectricCurrentUom__A = 'A',
	eml22__ElectricCurrentUom__cA = 'B',
	eml22__ElectricCurrentUom__dA = 'C',
	eml22__ElectricCurrentUom__EA = 'D',
	eml22__ElectricCurrentUom__fA = 'E',
	eml22__ElectricCurrentUom__GA = 'F',
	eml22__ElectricCurrentUom__kA = 'G',
	eml22__ElectricCurrentUom__MA = 'H',
	eml22__ElectricCurrentUom__mA = 'I',
	eml22__ElectricCurrentUom__nA = 'J',
	eml22__ElectricCurrentUom__pA = 'K',
	eml22__ElectricCurrentUom__TA = 'L',
	eml22__ElectricCurrentUom__uA = 'M'
};
#endif

/* eml2_2ForGsoap.h:6587 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom (-1129)

/* eml22:ElectricFieldStrengthUom */
enum eml22__ElectricFieldStrengthUom {
	eml22__ElectricFieldStrengthUom__mV_x002fft = 0,
	eml22__ElectricFieldStrengthUom__mV_x002fm = 1,
	eml22__ElectricFieldStrengthUom__uV_x002fft = 2,
	eml22__ElectricFieldStrengthUom__uV_x002fm = 3,
	eml22__ElectricFieldStrengthUom__V_x002fm = 4
};
#endif

/* eml2_2ForGsoap.h:6614 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom (-1130)

/* eml22:ElectricPotentialDifferenceUom */
enum eml22__ElectricPotentialDifferenceUom {
	eml22__ElectricPotentialDifferenceUom__V = 'V',
	eml22__ElectricPotentialDifferenceUom__cV = 'W',
	eml22__ElectricPotentialDifferenceUom__dV = 'X',
	eml22__ElectricPotentialDifferenceUom__fV = 'Y',
	eml22__ElectricPotentialDifferenceUom__GV = 'Z',
	eml22__ElectricPotentialDifferenceUom__kV = 91,
	eml22__ElectricPotentialDifferenceUom__mV = 92,
	eml22__ElectricPotentialDifferenceUom__MV = 93,
	eml22__ElectricPotentialDifferenceUom__nV = 94,
	eml22__ElectricPotentialDifferenceUom__pV = 95,
	eml22__ElectricPotentialDifferenceUom__TV = 96,
	eml22__ElectricPotentialDifferenceUom__uV = 'a'
};
#endif

/* eml2_2ForGsoap.h:6669 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom (-1131)

/* eml22:ElectricResistancePerLengthUom */
enum eml22__ElectricResistancePerLengthUom {
	eml22__ElectricResistancePerLengthUom__ohm_x002fm = 0,
	eml22__ElectricResistancePerLengthUom__uohm_x002fft = 1,
	eml22__ElectricResistancePerLengthUom__uohm_x002fm = 2
};
#endif

/* eml2_2ForGsoap.h:6688 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom (-1132)

/* eml22:ElectricResistanceUom */
enum eml22__ElectricResistanceUom {
	eml22__ElectricResistanceUom__cohm = 0,
	eml22__ElectricResistanceUom__dohm = 1,
	eml22__ElectricResistanceUom__Eohm = 2,
	eml22__ElectricResistanceUom__fohm = 3,
	eml22__ElectricResistanceUom__Gohm = 4,
	eml22__ElectricResistanceUom__kohm = 5,
	eml22__ElectricResistanceUom__Mohm = 6,
	eml22__ElectricResistanceUom__mohm = 7,
	eml22__ElectricResistanceUom__nohm = 8,
	eml22__ElectricResistanceUom__ohm = 9,
	eml22__ElectricResistanceUom__pohm = 10,
	eml22__ElectricResistanceUom__Tohm = 11,
	eml22__ElectricResistanceUom__uohm = 12
};
#endif

/* eml2_2ForGsoap.h:6747 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom (-1133)

/* eml22:ElectromagneticMomentUom */
enum eml22__ElectromagneticMomentUom {
	eml22__ElectromagneticMomentUom__A_x002em2 = 0
};
#endif

/* eml2_2ForGsoap.h:6758 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom (-1134)

/* eml22:EnergyLengthPerAreaUom */
enum eml22__EnergyLengthPerAreaUom {
	eml22__EnergyLengthPerAreaUom__J_x002em_x002fm2 = 0,
	eml22__EnergyLengthPerAreaUom__kcal_x005bth_x005d_x002em_x002fcm2 = 1
};
#endif

/* eml2_2ForGsoap.h:6773 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom (-1135)

/* eml22:EnergyLengthPerTimeAreaTemperatureUom */
enum eml22__EnergyLengthPerTimeAreaTemperatureUom {
	eml22__EnergyLengthPerTimeAreaTemperatureUom__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml22__EnergyLengthPerTimeAreaTemperatureUom__J_x002em_x002f_x0028s_x002em2_x002edeltaK_x0029 = 1,
	eml22__EnergyLengthPerTimeAreaTemperatureUom__kJ_x002em_x002f_x0028h_x002em2_x002edeltaK_x0029 = 2,
	eml22__EnergyLengthPerTimeAreaTemperatureUom__W_x002f_x0028m_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:6796 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom (-1136)

/* eml22:EnergyPerAreaUom */
enum eml22__EnergyPerAreaUom {
	eml22__EnergyPerAreaUom__erg_x002fcm2 = 0,
	eml22__EnergyPerAreaUom__J_x002fcm2 = 1,
	eml22__EnergyPerAreaUom__J_x002fm2 = 2,
	eml22__EnergyPerAreaUom__kgf_x002em_x002fcm2 = 3,
	eml22__EnergyPerAreaUom__lbf_x002eft_x002fin2 = 4,
	eml22__EnergyPerAreaUom__mJ_x002fcm2 = 5,
	eml22__EnergyPerAreaUom__mJ_x002fm2 = 6,
	eml22__EnergyPerAreaUom__N_x002fm = 7
};
#endif

/* eml2_2ForGsoap.h:6835 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom (-1137)

/* eml22:EnergyPerLengthUom */
enum eml22__EnergyPerLengthUom {
	eml22__EnergyPerLengthUom__J_x002fm = 0,
	eml22__EnergyPerLengthUom__MJ_x002fm = 1
};
#endif

/* eml2_2ForGsoap.h:6850 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom (-1138)

/* eml22:EnergyPerMassPerTimeUom */
enum eml22__EnergyPerMassPerTimeUom {
	eml22__EnergyPerMassPerTimeUom__mrem_x002fh = 0,
	eml22__EnergyPerMassPerTimeUom__mSv_x002fh = 1,
	eml22__EnergyPerMassPerTimeUom__rem_x002fh = 2,
	eml22__EnergyPerMassPerTimeUom__Sv_x002fh = 3,
	eml22__EnergyPerMassPerTimeUom__Sv_x002fs = 4
};
#endif

/* eml2_2ForGsoap.h:6877 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom (-1139)

/* eml22:EnergyPerMassUom */
enum eml22__EnergyPerMassUom {
	eml22__EnergyPerMassUom__Btu_x005bIT_x005d_x002flbm = 0,
	eml22__EnergyPerMassUom__cal_x005bth_x005d_x002fg = 1,
	eml22__EnergyPerMassUom__cal_x005bth_x005d_x002fkg = 2,
	eml22__EnergyPerMassUom__cal_x005bth_x005d_x002flbm = 3,
	eml22__EnergyPerMassUom__erg_x002fg = 4,
	eml22__EnergyPerMassUom__erg_x002fkg = 5,
	eml22__EnergyPerMassUom__hp_x002eh_x002flbm = 6,
	eml22__EnergyPerMassUom__J_x002fg = 7,
	eml22__EnergyPerMassUom__J_x002fkg = 8,
	eml22__EnergyPerMassUom__kcal_x005bth_x005d_x002fg = 9,
	eml22__EnergyPerMassUom__kcal_x005bth_x005d_x002fkg = 10,
	eml22__EnergyPerMassUom__kJ_x002fkg = 11,
	eml22__EnergyPerMassUom__kW_x002eh_x002fkg = 12,
	eml22__EnergyPerMassUom__lbf_x002eft_x002flbm = 13,
	eml22__EnergyPerMassUom__MJ_x002fkg = 14,
	eml22__EnergyPerMassUom__MW_x002eh_x002fkg = 15
};
#endif

/* eml2_2ForGsoap.h:6948 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom (-1140)

/* eml22:EnergyPerVolumeUom */
enum eml22__EnergyPerVolumeUom {
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fbbl = 0,
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fft3 = 1,
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 2,
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 3,
	eml22__EnergyPerVolumeUom__cal_x005bth_x005d_x002fcm3 = 4,
	eml22__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmL = 5,
	eml22__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmm3 = 6,
	eml22__EnergyPerVolumeUom__erg_x002fcm3 = 7,
	eml22__EnergyPerVolumeUom__erg_x002fm3 = 8,
	eml22__EnergyPerVolumeUom__hp_x002eh_x002fbbl = 9,
	eml22__EnergyPerVolumeUom__J_x002fdm3 = 10,
	eml22__EnergyPerVolumeUom__J_x002fm3 = 11,
	eml22__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fcm3 = 12,
	eml22__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fm3 = 13,
	eml22__EnergyPerVolumeUom__kJ_x002fdm3 = 14,
	eml22__EnergyPerVolumeUom__kJ_x002fm3 = 15,
	eml22__EnergyPerVolumeUom__kW_x002eh_x002fdm3 = 16,
	eml22__EnergyPerVolumeUom__kW_x002eh_x002fm3 = 17,
	eml22__EnergyPerVolumeUom__lbf_x002eft_x002fbbl = 18,
	eml22__EnergyPerVolumeUom__lbf_x002eft_x002fgal_x005bUS_x005d = 19,
	eml22__EnergyPerVolumeUom__MJ_x002fm3 = 20,
	eml22__EnergyPerVolumeUom__MW_x002eh_x002fm3 = 21,
	eml22__EnergyPerVolumeUom__tonf_x005bUS_x005d_x002emi_x002fbbl = 22
};
#endif

/* eml2_2ForGsoap.h:7047 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom (-1141)

/* eml22:EnergyUom */
enum eml22__EnergyUom {
	eml22__EnergyUom__J = 'J',
	eml22__EnergyUom__1E6_x0020Btu_x005bIT_x005d = 'K',
	eml22__EnergyUom__aJ = 'L',
	eml22__EnergyUom__Btu_x005bIT_x005d = 'M',
	eml22__EnergyUom__Btu_x005bth_x005d = 'N',
	eml22__EnergyUom__Btu_x005bUK_x005d = 'O',
	eml22__EnergyUom__cal_x005bIT_x005d = 'P',
	eml22__EnergyUom__cal_x005bth_x005d = 'Q',
	eml22__EnergyUom__ccal_x005bth_x005d = 'R',
	eml22__EnergyUom__ceV = 'S',
	eml22__EnergyUom__cJ = 'T',
	eml22__EnergyUom__dcal_x005bth_x005d = 'U',
	eml22__EnergyUom__deV = 'V',
	eml22__EnergyUom__dJ = 'W',
	eml22__EnergyUom__Ecal_x005bth_x005d = 'X',
	eml22__EnergyUom__EeV = 'Y',
	eml22__EnergyUom__EJ = 'Z',
	eml22__EnergyUom__erg = 91,
	eml22__EnergyUom__eV = 92,
	eml22__EnergyUom__fcal_x005bth_x005d = 93,
	eml22__EnergyUom__feV = 94,
	eml22__EnergyUom__fJ = 95,
	eml22__EnergyUom__Gcal_x005bth_x005d = 96,
	eml22__EnergyUom__GeV = 'a',
	eml22__EnergyUom__GJ = 'b',
	eml22__EnergyUom__GW_x002eh = 'c',
	eml22__EnergyUom__hp_x002eh = 'd',
	eml22__EnergyUom__hp_x005bmetric_x005d_x002eh = 'e',
	eml22__EnergyUom__kcal_x005bth_x005d = 'f',
	eml22__EnergyUom__keV = 'g',
	eml22__EnergyUom__kJ = 'h',
	eml22__EnergyUom__kW_x002eh = 'i',
	eml22__EnergyUom__mcal_x005bth_x005d = 'j',
	eml22__EnergyUom__Mcal_x005bth_x005d = 'k',
	eml22__EnergyUom__meV = 'l',
	eml22__EnergyUom__MeV = 'm',
	eml22__EnergyUom__MJ = 'n',
	eml22__EnergyUom__mJ = 'o',
	eml22__EnergyUom__MW_x002eh = 'p',
	eml22__EnergyUom__ncal_x005bth_x005d = 'q',
	eml22__EnergyUom__neV = 'r',
	eml22__EnergyUom__nJ = 's',
	eml22__EnergyUom__pcal_x005bth_x005d = 't',
	eml22__EnergyUom__peV = 'u',
	eml22__EnergyUom__pJ = 'v',
	eml22__EnergyUom__quad = 'w',
	eml22__EnergyUom__Tcal_x005bth_x005d = 'x',
	eml22__EnergyUom__TeV = 'y',
	eml22__EnergyUom__therm_x005bEC_x005d = 'z',
	eml22__EnergyUom__therm_x005bUK_x005d = 123,
	eml22__EnergyUom__therm_x005bUS_x005d = 124,
	eml22__EnergyUom__TJ = 125,
	eml22__EnergyUom__TW_x002eh = 126,
	eml22__EnergyUom__ucal_x005bth_x005d = 127,
	eml22__EnergyUom__ueV = 128,
	eml22__EnergyUom__uJ = 129
};
#endif

/* eml2_2ForGsoap.h:7278 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom (-1142)

/* eml22:ForceAreaUom */
enum eml22__ForceAreaUom {
	eml22__ForceAreaUom__dyne_x002ecm2 = 0,
	eml22__ForceAreaUom__kgf_x002em2 = 1,
	eml22__ForceAreaUom__kN_x002em2 = 2,
	eml22__ForceAreaUom__lbf_x002ein2 = 3,
	eml22__ForceAreaUom__mN_x002em2 = 4,
	eml22__ForceAreaUom__N_x002em2 = 5,
	eml22__ForceAreaUom__pdl_x002ecm2 = 6,
	eml22__ForceAreaUom__tonf_x005bUK_x005d_x002eft2 = 7,
	eml22__ForceAreaUom__tonf_x005bUS_x005d_x002eft2 = 8
};
#endif

/* eml2_2ForGsoap.h:7321 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom (-1143)

/* eml22:ForceLengthPerLengthUom */
enum eml22__ForceLengthPerLengthUom {
	eml22__ForceLengthPerLengthUom__kgf_x002em_x002fm = 0,
	eml22__ForceLengthPerLengthUom__lbf_x002eft_x002fin = 1,
	eml22__ForceLengthPerLengthUom__lbf_x002ein_x002fin = 2,
	eml22__ForceLengthPerLengthUom__N_x002em_x002fm = 3,
	eml22__ForceLengthPerLengthUom__tonf_x005bUS_x005d_x002emi_x002fft = 4
};
#endif

/* eml2_2ForGsoap.h:7348 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom (-1144)

/* eml22:ForcePerForceUom */
enum eml22__ForcePerForceUom {
	eml22__ForcePerForceUom___x0025 = 0,
	eml22__ForcePerForceUom__Euc = 1,
	eml22__ForcePerForceUom__kgf_x002fkgf = 2,
	eml22__ForcePerForceUom__lbf_x002flbf = 3,
	eml22__ForcePerForceUom__N_x002fN = 4
};
#endif

/* eml2_2ForGsoap.h:7375 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom (-1145)

/* eml22:ForcePerLengthUom */
enum eml22__ForcePerLengthUom {
	eml22__ForcePerLengthUom__0_x002e01_x0020lbf_x002fft = 0,
	eml22__ForcePerLengthUom__1_x002f30_x0020lbf_x002fm = 1,
	eml22__ForcePerLengthUom__1_x002f30_x0020N_x002fm = 2,
	eml22__ForcePerLengthUom__dyne_x002fcm = 3,
	eml22__ForcePerLengthUom__kgf_x002fcm = 4,
	eml22__ForcePerLengthUom__kN_x002fm = 5,
	eml22__ForcePerLengthUom__lbf_x002fft = 6,
	eml22__ForcePerLengthUom__lbf_x002fin = 7,
	eml22__ForcePerLengthUom__mN_x002fkm = 8,
	eml22__ForcePerLengthUom__mN_x002fm = 9,
	eml22__ForcePerLengthUom__N_x002fm = 10,
	eml22__ForcePerLengthUom__pdl_x002fcm = 11,
	eml22__ForcePerLengthUom__tonf_x005bUK_x005d_x002fft = 12,
	eml22__ForcePerLengthUom__tonf_x005bUS_x005d_x002fft = 13
};
#endif

/* eml2_2ForGsoap.h:7438 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom (-1146)

/* eml22:ForcePerVolumeUom */
enum eml22__ForcePerVolumeUom {
	eml22__ForcePerVolumeUom__0_x002e001_x0020psi_x002fft = 0,
	eml22__ForcePerVolumeUom__0_x002e01_x0020psi_x002fft = 1,
	eml22__ForcePerVolumeUom__atm_x002fft = 2,
	eml22__ForcePerVolumeUom__atm_x002fhm = 3,
	eml22__ForcePerVolumeUom__atm_x002fm = 4,
	eml22__ForcePerVolumeUom__bar_x002fkm = 5,
	eml22__ForcePerVolumeUom__bar_x002fm = 6,
	eml22__ForcePerVolumeUom__GPa_x002fcm = 7,
	eml22__ForcePerVolumeUom__kPa_x002fhm = 8,
	eml22__ForcePerVolumeUom__kPa_x002fm = 9,
	eml22__ForcePerVolumeUom__lbf_x002fft3 = 10,
	eml22__ForcePerVolumeUom__lbf_x002fgal_x005bUS_x005d = 11,
	eml22__ForcePerVolumeUom__MPa_x002fm = 12,
	eml22__ForcePerVolumeUom__N_x002fm3 = 13,
	eml22__ForcePerVolumeUom__Pa_x002fm = 14,
	eml22__ForcePerVolumeUom__psi_x002fft = 15,
	eml22__ForcePerVolumeUom__psi_x002fm = 16
};
#endif

/* eml2_2ForGsoap.h:7513 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom (-1147)

/* eml22:ForceUom */
enum eml22__ForceUom {
	eml22__ForceUom__N = 'N',
	eml22__ForceUom__10_x0020kN = 'O',
	eml22__ForceUom__cN = 'P',
	eml22__ForceUom__daN = 'Q',
	eml22__ForceUom__dN = 'R',
	eml22__ForceUom__dyne = 'S',
	eml22__ForceUom__EN = 'T',
	eml22__ForceUom__fN = 'U',
	eml22__ForceUom__gf = 'V',
	eml22__ForceUom__GN = 'W',
	eml22__ForceUom__hN = 'X',
	eml22__ForceUom__kdyne = 'Y',
	eml22__ForceUom__kgf = 'Z',
	eml22__ForceUom__klbf = 91,
	eml22__ForceUom__kN = 92,
	eml22__ForceUom__lbf = 93,
	eml22__ForceUom__Mgf = 94,
	eml22__ForceUom__mN = 95,
	eml22__ForceUom__MN = 96,
	eml22__ForceUom__nN = 'a',
	eml22__ForceUom__ozf = 'b',
	eml22__ForceUom__pdl = 'c',
	eml22__ForceUom__pN = 'd',
	eml22__ForceUom__TN = 'e',
	eml22__ForceUom__tonf_x005bUK_x005d = 'f',
	eml22__ForceUom__tonf_x005bUS_x005d = 'g',
	eml22__ForceUom__uN = 'h'
};
#endif

/* eml2_2ForGsoap.h:7628 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom (-1148)

/* eml22:FrequencyIntervalUom */
enum eml22__FrequencyIntervalUom {
	eml22__FrequencyIntervalUom__O = 'O'
};
#endif

/* eml2_2ForGsoap.h:7639 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom (-1149)

/* eml22:FrequencyUom */
enum eml22__FrequencyUom {
	eml22__FrequencyUom__cHz = 0,
	eml22__FrequencyUom__dHz = 1,
	eml22__FrequencyUom__EHz = 2,
	eml22__FrequencyUom__fHz = 3,
	eml22__FrequencyUom__GHz = 4,
	eml22__FrequencyUom__Hz = 5,
	eml22__FrequencyUom__kHz = 6,
	eml22__FrequencyUom__mHz = 7,
	eml22__FrequencyUom__MHz = 8,
	eml22__FrequencyUom__nHz = 9,
	eml22__FrequencyUom__pHz = 10,
	eml22__FrequencyUom__THz = 11,
	eml22__FrequencyUom__uHz = 12
};
#endif

/* eml2_2ForGsoap.h:7698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom (-1150)

/* eml22:HeatCapacityUom */
enum eml22__HeatCapacityUom {
	eml22__HeatCapacityUom__J_x002fdeltaK = 0
};
#endif

/* eml2_2ForGsoap.h:7709 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom (-1151)

/* eml22:HeatFlowRateUom */
enum eml22__HeatFlowRateUom {
	eml22__HeatFlowRateUom__W = 'W',
	eml22__HeatFlowRateUom__1E6_x0020Btu_x005bIT_x005d_x002fh = 'X',
	eml22__HeatFlowRateUom__Btu_x005bIT_x005d_x002fh = 'Y',
	eml22__HeatFlowRateUom__Btu_x005bIT_x005d_x002fmin = 'Z',
	eml22__HeatFlowRateUom__Btu_x005bIT_x005d_x002fs = 91,
	eml22__HeatFlowRateUom__cal_x005bth_x005d_x002fh = 92,
	eml22__HeatFlowRateUom__EJ_x002fa = 93,
	eml22__HeatFlowRateUom__erg_x002fa = 94,
	eml22__HeatFlowRateUom__GW = 95,
	eml22__HeatFlowRateUom__J_x002fs = 96,
	eml22__HeatFlowRateUom__kcal_x005bth_x005d_x002fh = 'a',
	eml22__HeatFlowRateUom__kW = 'b',
	eml22__HeatFlowRateUom__lbf_x002eft_x002fmin = 'c',
	eml22__HeatFlowRateUom__lbf_x002eft_x002fs = 'd',
	eml22__HeatFlowRateUom__MJ_x002fa = 'e',
	eml22__HeatFlowRateUom__mW = 'f',
	eml22__HeatFlowRateUom__MW = 'g',
	eml22__HeatFlowRateUom__nW = 'h',
	eml22__HeatFlowRateUom__quad_x002fa = 'i',
	eml22__HeatFlowRateUom__TJ_x002fa = 'j',
	eml22__HeatFlowRateUom__TW = 'k',
	eml22__HeatFlowRateUom__ucal_x005bth_x005d_x002fs = 'l',
	eml22__HeatFlowRateUom__uW = 'm'
};
#endif

/* eml2_2ForGsoap.h:7808 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom (-1152)

/* eml22:HeatTransferCoefficientUom */
enum eml22__HeatTransferCoefficientUom {
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaR_x0029 = 1,
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 2,
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edeltaF_x0029 = 3,
	eml22__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edeltaC_x0029 = 4,
	eml22__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edeltaC_x0029 = 5,
	eml22__HeatTransferCoefficientUom__J_x002f_x0028s_x002em2_x002edeltaC_x0029 = 6,
	eml22__HeatTransferCoefficientUom__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 7,
	eml22__HeatTransferCoefficientUom__kJ_x002f_x0028h_x002em2_x002edeltaK_x0029 = 8,
	eml22__HeatTransferCoefficientUom__kW_x002f_x0028m2_x002edeltaK_x0029 = 9,
	eml22__HeatTransferCoefficientUom__W_x002f_x0028m2_x002edeltaK_x0029 = 10
};
#endif

/* eml2_2ForGsoap.h:7859 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom (-1153)

/* eml22:IlluminanceUom */
enum eml22__IlluminanceUom {
	eml22__IlluminanceUom__footcandle = 0,
	eml22__IlluminanceUom__klx = 1,
	eml22__IlluminanceUom__lm_x002fm2 = 2,
	eml22__IlluminanceUom__lx = 3
};
#endif

/* eml2_2ForGsoap.h:7882 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom (-1154)

/* eml22:InductanceUom */
enum eml22__InductanceUom {
	eml22__InductanceUom__H = 'H',
	eml22__InductanceUom__cH = 'I',
	eml22__InductanceUom__dH = 'J',
	eml22__InductanceUom__EH = 'K',
	eml22__InductanceUom__fH = 'L',
	eml22__InductanceUom__GH = 'M',
	eml22__InductanceUom__kH = 'N',
	eml22__InductanceUom__MH = 'O',
	eml22__InductanceUom__mH = 'P',
	eml22__InductanceUom__nH = 'Q',
	eml22__InductanceUom__TH = 'R',
	eml22__InductanceUom__uH = 'S'
};
#endif

/* eml2_2ForGsoap.h:7937 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom (-1155)

/* eml22:IsothermalCompressibilityUom */
enum eml22__IsothermalCompressibilityUom {
	eml22__IsothermalCompressibilityUom__dm3_x002f_x0028kW_x002eh_x0029 = 0,
	eml22__IsothermalCompressibilityUom__dm3_x002fMJ = 1,
	eml22__IsothermalCompressibilityUom__m3_x002f_x0028kW_x002eh_x0029 = 2,
	eml22__IsothermalCompressibilityUom__m3_x002fJ = 3,
	eml22__IsothermalCompressibilityUom__mm3_x002fJ = 4,
	eml22__IsothermalCompressibilityUom__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 5
};
#endif

/* eml2_2ForGsoap.h:7968 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom (-1156)

/* eml22:KinematicViscosityUom */
enum eml22__KinematicViscosityUom {
	eml22__KinematicViscosityUom__cm2_x002fs = 0,
	eml22__KinematicViscosityUom__cSt = 1,
	eml22__KinematicViscosityUom__ft2_x002fh = 2,
	eml22__KinematicViscosityUom__ft2_x002fs = 3,
	eml22__KinematicViscosityUom__in2_x002fs = 4,
	eml22__KinematicViscosityUom__m2_x002fh = 5,
	eml22__KinematicViscosityUom__m2_x002fs = 6,
	eml22__KinematicViscosityUom__mm2_x002fs = 7,
	eml22__KinematicViscosityUom__Pa_x002es_x002em3_x002fkg = 8,
	eml22__KinematicViscosityUom__St = 9
};
#endif

/* eml2_2ForGsoap.h:8015 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom (-1157)

/* eml22:LengthPerLengthUom */
enum eml22__LengthPerLengthUom {
	eml22__LengthPerLengthUom___x0025 = 0,
	eml22__LengthPerLengthUom__0_x002e01_x0020ft_x002fft = 1,
	eml22__LengthPerLengthUom__1_x002f30_x0020m_x002fm = 2,
	eml22__LengthPerLengthUom__Euc = 3,
	eml22__LengthPerLengthUom__ft_x002fft = 4,
	eml22__LengthPerLengthUom__ft_x002fin = 5,
	eml22__LengthPerLengthUom__ft_x002fm = 6,
	eml22__LengthPerLengthUom__ft_x002fmi = 7,
	eml22__LengthPerLengthUom__km_x002fcm = 8,
	eml22__LengthPerLengthUom__m_x002fcm = 9,
	eml22__LengthPerLengthUom__m_x002fkm = 10,
	eml22__LengthPerLengthUom__m_x002fm = 11,
	eml22__LengthPerLengthUom__mi_x002fin = 12
};
#endif

/* eml2_2ForGsoap.h:8074 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom (-1158)

/* eml22:LengthPerMassUom */
enum eml22__LengthPerMassUom {
	eml22__LengthPerMassUom__ft_x002flbm = 0,
	eml22__LengthPerMassUom__m_x002fkg = 1
};
#endif

/* eml2_2ForGsoap.h:8089 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom (-1159)

/* eml22:LengthPerPressureUom */
enum eml22__LengthPerPressureUom {
	eml22__LengthPerPressureUom__ft_x002fpsi = 0,
	eml22__LengthPerPressureUom__m_x002fkPa = 1,
	eml22__LengthPerPressureUom__m_x002fPa = 2
};
#endif

/* eml2_2ForGsoap.h:8108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom (-1160)

/* eml22:LengthPerTemperatureUom */
enum eml22__LengthPerTemperatureUom {
	eml22__LengthPerTemperatureUom__ft_x002fdeltaF = 0,
	eml22__LengthPerTemperatureUom__m_x002fdeltaK = 1
};
#endif

/* eml2_2ForGsoap.h:8123 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom (-1161)

/* eml22:LengthPerTimeUom */
enum eml22__LengthPerTimeUom {
	eml22__LengthPerTimeUom__1000_x0020ft_x002fh = 0,
	eml22__LengthPerTimeUom__1000_x0020ft_x002fs = 1,
	eml22__LengthPerTimeUom__cm_x002fa = 2,
	eml22__LengthPerTimeUom__cm_x002fs = 3,
	eml22__LengthPerTimeUom__dm_x002fs = 4,
	eml22__LengthPerTimeUom__ft_x002fd = 5,
	eml22__LengthPerTimeUom__ft_x002fh = 6,
	eml22__LengthPerTimeUom__ft_x002fmin = 7,
	eml22__LengthPerTimeUom__ft_x002fms = 8,
	eml22__LengthPerTimeUom__ft_x002fs = 9,
	eml22__LengthPerTimeUom__ft_x002fus = 10,
	eml22__LengthPerTimeUom__in_x002fa = 11,
	eml22__LengthPerTimeUom__in_x002fmin = 12,
	eml22__LengthPerTimeUom__in_x002fs = 13,
	eml22__LengthPerTimeUom__km_x002fh = 14,
	eml22__LengthPerTimeUom__km_x002fs = 15,
	eml22__LengthPerTimeUom__knot = 16,
	eml22__LengthPerTimeUom__m_x002fd = 17,
	eml22__LengthPerTimeUom__m_x002fh = 18,
	eml22__LengthPerTimeUom__m_x002fmin = 19,
	eml22__LengthPerTimeUom__m_x002fms = 20,
	eml22__LengthPerTimeUom__m_x002fs = 21,
	eml22__LengthPerTimeUom__mi_x002fh = 22,
	eml22__LengthPerTimeUom__mil_x002fa = 23,
	eml22__LengthPerTimeUom__mm_x002fa = 24,
	eml22__LengthPerTimeUom__mm_x002fs = 25,
	eml22__LengthPerTimeUom__nm_x002fs = 26,
	eml22__LengthPerTimeUom__um_x002fs = 27
};
#endif

/* eml2_2ForGsoap.h:8242 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom (-1162)

/* eml22:LengthPerVolumeUom */
enum eml22__LengthPerVolumeUom {
	eml22__LengthPerVolumeUom__ft_x002fbbl = 0,
	eml22__LengthPerVolumeUom__ft_x002fft3 = 1,
	eml22__LengthPerVolumeUom__ft_x002fgal_x005bUS_x005d = 2,
	eml22__LengthPerVolumeUom__km_x002fdm3 = 3,
	eml22__LengthPerVolumeUom__km_x002fL = 4,
	eml22__LengthPerVolumeUom__m_x002fm3 = 5,
	eml22__LengthPerVolumeUom__mi_x002fgal_x005bUK_x005d = 6,
	eml22__LengthPerVolumeUom__mi_x002fgal_x005bUS_x005d = 7
};
#endif

/* eml2_2ForGsoap.h:8281 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom (-1163)

/* eml22:LengthUom */
enum eml22__LengthUom {
	eml22__LengthUom__m = 'm',
	eml22__LengthUom__0_x002e1_x0020ft = 'n',
	eml22__LengthUom__0_x002e1_x0020ft_x005bUS_x005d = 'o',
	eml22__LengthUom__0_x002e1_x0020in = 'p',
	eml22__LengthUom__0_x002e1_x0020yd = 'q',
	eml22__LengthUom__1_x002f16_x0020in = 'r',
	eml22__LengthUom__1_x002f2_x0020ft = 's',
	eml22__LengthUom__1_x002f32_x0020in = 't',
	eml22__LengthUom__1_x002f64_x0020in = 'u',
	eml22__LengthUom__10_x0020ft = 'v',
	eml22__LengthUom__10_x0020in = 'w',
	eml22__LengthUom__10_x0020km = 'x',
	eml22__LengthUom__100_x0020ft = 'y',
	eml22__LengthUom__100_x0020km = 'z',
	eml22__LengthUom__1000_x0020ft = 123,
	eml22__LengthUom__30_x0020ft = 124,
	eml22__LengthUom__30_x0020m = 125,
	eml22__LengthUom__angstrom = 126,
	eml22__LengthUom__chain = 127,
	eml22__LengthUom__chain_x005bBnA_x005d = 128,
	eml22__LengthUom__chain_x005bBnB_x005d = 129,
	eml22__LengthUom__chain_x005bCla_x005d = 130,
	eml22__LengthUom__chain_x005bInd37_x005d = 131,
	eml22__LengthUom__chain_x005bSe_x005d = 132,
	eml22__LengthUom__chain_x005bSeT_x005d = 133,
	eml22__LengthUom__chain_x005bUS_x005d = 134,
	eml22__LengthUom__cm = 135,
	eml22__LengthUom__dam = 136,
	eml22__LengthUom__dm = 137,
	eml22__LengthUom__Em = 138,
	eml22__LengthUom__fathom = 139,
	eml22__LengthUom__fm = 140,
	eml22__LengthUom__ft = 141,
	eml22__LengthUom__ft_x005bBnA_x005d = 142,
	eml22__LengthUom__ft_x005bBnB_x005d = 143,
	eml22__LengthUom__ft_x005bBr36_x005d = 144,
	eml22__LengthUom__ft_x005bBr65_x005d = 145,
	eml22__LengthUom__ft_x005bCla_x005d = 146,
	eml22__LengthUom__ft_x005bGC_x005d = 147,
	eml22__LengthUom__ft_x005bInd_x005d = 148,
	eml22__LengthUom__ft_x005bInd37_x005d = 149,
	eml22__LengthUom__ft_x005bInd62_x005d = 150,
	eml22__LengthUom__ft_x005bInd75_x005d = 151,
	eml22__LengthUom__ft_x005bSe_x005d = 152,
	eml22__LengthUom__ft_x005bSeT_x005d = 153,
	eml22__LengthUom__ft_x005bUS_x005d = 154,
	eml22__LengthUom__fur_x005bUS_x005d = 155,
	eml22__LengthUom__Gm = 156,
	eml22__LengthUom__hm = 157,
	eml22__LengthUom__in = 158,
	eml22__LengthUom__in_x005bUS_x005d = 159,
	eml22__LengthUom__km = 160,
	eml22__LengthUom__link = 161,
	eml22__LengthUom__link_x005bBnA_x005d = 162,
	eml22__LengthUom__link_x005bBnB_x005d = 163,
	eml22__LengthUom__link_x005bCla_x005d = 164,
	eml22__LengthUom__link_x005bSe_x005d = 165,
	eml22__LengthUom__link_x005bSeT_x005d = 166,
	eml22__LengthUom__link_x005bUS_x005d = 167,
	eml22__LengthUom__m_x005bGer_x005d = 168,
	eml22__LengthUom__mi = 169,
	eml22__LengthUom__mi_x005bnaut_x005d = 170,
	eml22__LengthUom__mi_x005bnautUK_x005d = 171,
	eml22__LengthUom__mi_x005bUS_x005d = 172,
	eml22__LengthUom__mil = 173,
	eml22__LengthUom__mm = 174,
	eml22__LengthUom__Mm = 175,
	eml22__LengthUom__nm = 176,
	eml22__LengthUom__pm = 177,
	eml22__LengthUom__rod_x005bUS_x005d = 178,
	eml22__LengthUom__Tm = 179,
	eml22__LengthUom__um = 180,
	eml22__LengthUom__yd = 181,
	eml22__LengthUom__yd_x005bBnA_x005d = 182,
	eml22__LengthUom__yd_x005bBnB_x005d = 183,
	eml22__LengthUom__yd_x005bCla_x005d = 184,
	eml22__LengthUom__yd_x005bInd_x005d = 185,
	eml22__LengthUom__yd_x005bInd37_x005d = 186,
	eml22__LengthUom__yd_x005bInd62_x005d = 187,
	eml22__LengthUom__yd_x005bInd75_x005d = 188,
	eml22__LengthUom__yd_x005bSe_x005d = 189,
	eml22__LengthUom__yd_x005bSeT_x005d = 190,
	eml22__LengthUom__yd_x005bUS_x005d = 191
};
#endif

/* eml2_2ForGsoap.h:8620 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom (-1164)

/* eml22:LightExposureUom */
enum eml22__LightExposureUom {
	eml22__LightExposureUom__footcandle_x002es = 0,
	eml22__LightExposureUom__lx_x002es = 1
};
#endif

/* eml2_2ForGsoap.h:8635 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom (-1165)

/* eml22:LinearAccelerationUom */
enum eml22__LinearAccelerationUom {
	eml22__LinearAccelerationUom__cm_x002fs2 = 0,
	eml22__LinearAccelerationUom__ft_x002fs2 = 1,
	eml22__LinearAccelerationUom__Gal = 2,
	eml22__LinearAccelerationUom__gn = 3,
	eml22__LinearAccelerationUom__in_x002fs2 = 4,
	eml22__LinearAccelerationUom__m_x002fs2 = 5,
	eml22__LinearAccelerationUom__mGal = 6,
	eml22__LinearAccelerationUom__mgn = 7
};
#endif

/* eml2_2ForGsoap.h:8674 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom (-1166)

/* eml22:LinearThermalExpansionUom */
enum eml22__LinearThermalExpansionUom {
	eml22__LinearThermalExpansionUom__1_x002fdeltaK = 0,
	eml22__LinearThermalExpansionUom__in_x002f_x0028in_x002edeltaF_x0029 = 1,
	eml22__LinearThermalExpansionUom__m_x002f_x0028m_x002edeltaK_x0029 = 2,
	eml22__LinearThermalExpansionUom__mm_x002f_x0028mm_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:8697 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom (-1167)

/* eml22:LogarithmicPowerRatioPerLengthUom */
enum eml22__LogarithmicPowerRatioPerLengthUom {
	eml22__LogarithmicPowerRatioPerLengthUom__B_x002fm = 0,
	eml22__LogarithmicPowerRatioPerLengthUom__dB_x002fft = 1,
	eml22__LogarithmicPowerRatioPerLengthUom__dB_x002fkm = 2,
	eml22__LogarithmicPowerRatioPerLengthUom__dB_x002fm = 3
};
#endif

/* eml2_2ForGsoap.h:8720 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom (-1168)

/* eml22:LogarithmicPowerRatioUom */
enum eml22__LogarithmicPowerRatioUom {
	eml22__LogarithmicPowerRatioUom__B = 'B',
	eml22__LogarithmicPowerRatioUom__dB = 'C'
};
#endif

/* eml2_2ForGsoap.h:8735 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom (-1169)

/* eml22:LuminanceUom */
enum eml22__LuminanceUom {
	eml22__LuminanceUom__cd_x002fm2 = 0
};
#endif

/* eml2_2ForGsoap.h:8746 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom (-1170)

/* eml22:LuminousEfficacyUom */
enum eml22__LuminousEfficacyUom {
	eml22__LuminousEfficacyUom__lm_x002fW = 0
};
#endif

/* eml2_2ForGsoap.h:8757 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom (-1171)

/* eml22:LuminousFluxUom */
enum eml22__LuminousFluxUom {
	eml22__LuminousFluxUom__lm = 0
};
#endif

/* eml2_2ForGsoap.h:8768 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom (-1172)

/* eml22:LuminousIntensityUom */
enum eml22__LuminousIntensityUom {
	eml22__LuminousIntensityUom__cd = 0,
	eml22__LuminousIntensityUom__kcd = 1
};
#endif

/* eml2_2ForGsoap.h:8783 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom (-1173)

/* eml22:MagneticDipoleMomentUom */
enum eml22__MagneticDipoleMomentUom {
	eml22__MagneticDipoleMomentUom__Wb_x002em = 0
};
#endif

/* eml2_2ForGsoap.h:8794 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom (-1174)

/* eml22:MagneticFieldStrengthUom */
enum eml22__MagneticFieldStrengthUom {
	eml22__MagneticFieldStrengthUom__A_x002fm = 0,
	eml22__MagneticFieldStrengthUom__A_x002fmm = 1,
	eml22__MagneticFieldStrengthUom__Oe = 2
};
#endif

/* eml2_2ForGsoap.h:8813 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom (-1175)

/* eml22:MagneticFluxDensityPerLengthUom */
enum eml22__MagneticFluxDensityPerLengthUom {
	eml22__MagneticFluxDensityPerLengthUom__gauss_x002fcm = 0,
	eml22__MagneticFluxDensityPerLengthUom__mT_x002fdm = 1,
	eml22__MagneticFluxDensityPerLengthUom__T_x002fm = 2
};
#endif

/* eml2_2ForGsoap.h:8832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom (-1176)

/* eml22:MagneticFluxDensityUom */
enum eml22__MagneticFluxDensityUom {
	eml22__MagneticFluxDensityUom__T = 'T',
	eml22__MagneticFluxDensityUom__cgauss = 'U',
	eml22__MagneticFluxDensityUom__cT = 'V',
	eml22__MagneticFluxDensityUom__dgauss = 'W',
	eml22__MagneticFluxDensityUom__dT = 'X',
	eml22__MagneticFluxDensityUom__Egauss = 'Y',
	eml22__MagneticFluxDensityUom__ET = 'Z',
	eml22__MagneticFluxDensityUom__fgauss = 91,
	eml22__MagneticFluxDensityUom__fT = 92,
	eml22__MagneticFluxDensityUom__gauss = 93,
	eml22__MagneticFluxDensityUom__Ggauss = 94,
	eml22__MagneticFluxDensityUom__GT = 95,
	eml22__MagneticFluxDensityUom__kgauss = 96,
	eml22__MagneticFluxDensityUom__kT = 'a',
	eml22__MagneticFluxDensityUom__mgauss = 'b',
	eml22__MagneticFluxDensityUom__Mgauss = 'c',
	eml22__MagneticFluxDensityUom__mT = 'd',
	eml22__MagneticFluxDensityUom__ngauss = 'e',
	eml22__MagneticFluxDensityUom__nT = 'f',
	eml22__MagneticFluxDensityUom__pgauss = 'g',
	eml22__MagneticFluxDensityUom__pT = 'h',
	eml22__MagneticFluxDensityUom__Tgauss = 'i',
	eml22__MagneticFluxDensityUom__TT = 'j',
	eml22__MagneticFluxDensityUom__ugauss = 'k',
	eml22__MagneticFluxDensityUom__uT = 'l'
};
#endif

/* eml2_2ForGsoap.h:8939 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom (-1177)

/* eml22:MagneticFluxUom */
enum eml22__MagneticFluxUom {
	eml22__MagneticFluxUom__cWb = 0,
	eml22__MagneticFluxUom__dWb = 1,
	eml22__MagneticFluxUom__EWb = 2,
	eml22__MagneticFluxUom__fWb = 3,
	eml22__MagneticFluxUom__GWb = 4,
	eml22__MagneticFluxUom__kWb = 5,
	eml22__MagneticFluxUom__mWb = 6,
	eml22__MagneticFluxUom__MWb = 7,
	eml22__MagneticFluxUom__nWb = 8,
	eml22__MagneticFluxUom__pWb = 9,
	eml22__MagneticFluxUom__TWb = 10,
	eml22__MagneticFluxUom__uWb = 11,
	eml22__MagneticFluxUom__Wb = 12
};
#endif

/* eml2_2ForGsoap.h:8998 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom (-1178)

/* eml22:MagneticPermeabilityUom */
enum eml22__MagneticPermeabilityUom {
	eml22__MagneticPermeabilityUom__H_x002fm = 0,
	eml22__MagneticPermeabilityUom__uH_x002fm = 1
};
#endif

/* eml2_2ForGsoap.h:9013 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom (-1179)

/* eml22:MagneticVectorPotentialUom */
enum eml22__MagneticVectorPotentialUom {
	eml22__MagneticVectorPotentialUom__Wb_x002fm = 0,
	eml22__MagneticVectorPotentialUom__Wb_x002fmm = 1
};
#endif

/* eml2_2ForGsoap.h:9028 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom (-1180)

/* eml22:MassLengthUom */
enum eml22__MassLengthUom {
	eml22__MassLengthUom__kg_x002em = 0,
	eml22__MassLengthUom__lbm_x002eft = 1
};
#endif

/* eml2_2ForGsoap.h:9043 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom (-1181)

/* eml22:MassPerAreaUom */
enum eml22__MassPerAreaUom {
	eml22__MassPerAreaUom__0_x002e01_x0020lbm_x002fft2 = 0,
	eml22__MassPerAreaUom__kg_x002fm2 = 1,
	eml22__MassPerAreaUom__lbm_x002fft2 = 2,
	eml22__MassPerAreaUom__Mg_x002fm2 = 3,
	eml22__MassPerAreaUom__ton_x005bUS_x005d_x002fft2 = 4
};
#endif

/* eml2_2ForGsoap.h:9070 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom (-1182)

/* eml22:MassPerEnergyUom */
enum eml22__MassPerEnergyUom {
	eml22__MassPerEnergyUom__kg_x002f_x0028kW_x002eh_x0029 = 0,
	eml22__MassPerEnergyUom__kg_x002fJ = 1,
	eml22__MassPerEnergyUom__kg_x002fMJ = 2,
	eml22__MassPerEnergyUom__lbm_x002f_x0028hp_x002eh_x0029 = 3,
	eml22__MassPerEnergyUom__mg_x002fJ = 4
};
#endif

/* eml2_2ForGsoap.h:9097 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom (-1183)

/* eml22:MassPerLengthUom */
enum eml22__MassPerLengthUom {
	eml22__MassPerLengthUom__kg_x002em_x002fcm2 = 0,
	eml22__MassPerLengthUom__kg_x002fm = 1,
	eml22__MassPerLengthUom__klbm_x002fin = 2,
	eml22__MassPerLengthUom__lbm_x002fft = 3,
	eml22__MassPerLengthUom__Mg_x002fin = 4
};
#endif

/* eml2_2ForGsoap.h:9124 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom (-1184)

/* eml22:MassPerMassUom */
enum eml22__MassPerMassUom {
	eml22__MassPerMassUom___x0025 = 0,
	eml22__MassPerMassUom___x0025_x005bmass_x005d = 1,
	eml22__MassPerMassUom__Euc = 2,
	eml22__MassPerMassUom__g_x002fkg = 3,
	eml22__MassPerMassUom__g_x002ft = 4,
	eml22__MassPerMassUom__kg_x002fkg = 5,
	eml22__MassPerMassUom__kg_x002fsack_x005b94lbm_x005d = 6,
	eml22__MassPerMassUom__kg_x002ft = 7,
	eml22__MassPerMassUom__mg_x002fg = 8,
	eml22__MassPerMassUom__mg_x002fkg = 9,
	eml22__MassPerMassUom__ng_x002fg = 10,
	eml22__MassPerMassUom__ng_x002fmg = 11,
	eml22__MassPerMassUom__ppk = 12,
	eml22__MassPerMassUom__ppm = 13,
	eml22__MassPerMassUom__ppm_x005bmass_x005d = 14,
	eml22__MassPerMassUom__ug_x002fg = 15,
	eml22__MassPerMassUom__ug_x002fmg = 16
};
#endif

/* eml2_2ForGsoap.h:9199 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom (-1185)

/* eml22:MassPerTimePerAreaUom */
enum eml22__MassPerTimePerAreaUom {
	eml22__MassPerTimePerAreaUom__g_x002eft_x002f_x0028cm3_x002es_x0029 = 0,
	eml22__MassPerTimePerAreaUom__g_x002em_x002f_x0028cm3_x002es_x0029 = 1,
	eml22__MassPerTimePerAreaUom__kg_x002f_x0028m2_x002es_x0029 = 2,
	eml22__MassPerTimePerAreaUom__kPa_x002es_x002fm = 3,
	eml22__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002eh_x0029 = 4,
	eml22__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002es_x0029 = 5,
	eml22__MassPerTimePerAreaUom__MPa_x002es_x002fm = 6
};
#endif

/* eml2_2ForGsoap.h:9234 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom (-1186)

/* eml22:MassPerTimePerLengthUom */
enum eml22__MassPerTimePerLengthUom {
	eml22__MassPerTimePerLengthUom__kg_x002f_x0028m_x002es_x0029 = 0,
	eml22__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002eh_x0029 = 1,
	eml22__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002es_x0029 = 2,
	eml22__MassPerTimePerLengthUom__Pa_x002es = 3
};
#endif

/* eml2_2ForGsoap.h:9257 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom (-1187)

/* eml22:MassPerTimeUom */
enum eml22__MassPerTimeUom {
	eml22__MassPerTimeUom__1E6_x0020lbm_x002fa = 0,
	eml22__MassPerTimeUom__g_x002fs = 1,
	eml22__MassPerTimeUom__kg_x002fd = 2,
	eml22__MassPerTimeUom__kg_x002fh = 3,
	eml22__MassPerTimeUom__kg_x002fmin = 4,
	eml22__MassPerTimeUom__kg_x002fs = 5,
	eml22__MassPerTimeUom__lbm_x002fd = 6,
	eml22__MassPerTimeUom__lbm_x002fh = 7,
	eml22__MassPerTimeUom__lbm_x002fmin = 8,
	eml22__MassPerTimeUom__lbm_x002fs = 9,
	eml22__MassPerTimeUom__Mg_x002fa = 10,
	eml22__MassPerTimeUom__Mg_x002fd = 11,
	eml22__MassPerTimeUom__Mg_x002fh = 12,
	eml22__MassPerTimeUom__Mg_x002fmin = 13,
	eml22__MassPerTimeUom__t_x002fa = 14,
	eml22__MassPerTimeUom__t_x002fd = 15,
	eml22__MassPerTimeUom__t_x002fh = 16,
	eml22__MassPerTimeUom__t_x002fmin = 17,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fa = 18,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fd = 19,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fh = 20,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fmin = 21,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fa = 22,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fd = 23,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fh = 24,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fmin = 25
};
#endif

/* eml2_2ForGsoap.h:9368 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom (-1188)

/* eml22:MassPerVolumePerLengthUom */
enum eml22__MassPerVolumePerLengthUom {
	eml22__MassPerVolumePerLengthUom__g_x002fcm4 = 0,
	eml22__MassPerVolumePerLengthUom__kg_x002fdm4 = 1,
	eml22__MassPerVolumePerLengthUom__kg_x002fm4 = 2,
	eml22__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 3,
	eml22__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 4,
	eml22__MassPerVolumePerLengthUom__lbm_x002fft4 = 5,
	eml22__MassPerVolumePerLengthUom__Pa_x002es2_x002fm3 = 6
};
#endif

/* eml2_2ForGsoap.h:9403 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom (-1189)

/* eml22:MassPerVolumePerPressureUom */
enum eml22__MassPerVolumePerPressureUom {
	eml22__MassPerVolumePerPressureUom__kg_x002fm3_x002ekPa = 0,
	eml22__MassPerVolumePerPressureUom__lb_x002fft_x002epsi = 1
};
#endif

/* eml2_2ForGsoap.h:9412 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom (-1190)

/* eml22:MassPerVolumePerTemperatureUom */
enum eml22__MassPerVolumePerTemperatureUom {
	eml22__MassPerVolumePerTemperatureUom__kg_x002fm3_x002edegC = 0,
	eml22__MassPerVolumePerTemperatureUom__kg_x002fm3_x002eK = 1,
	eml22__MassPerVolumePerTemperatureUom__lb_x002fft_x002edegF = 2
};
#endif

/* eml2_2ForGsoap.h:9422 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom (-1191)

/* eml22:MassPerVolumeUom */
enum eml22__MassPerVolumeUom {
	eml22__MassPerVolumeUom__0_x002e001_x0020lbm_x002fbbl = 0,
	eml22__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 1,
	eml22__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 2,
	eml22__MassPerVolumeUom__0_x002e01_x0020grain_x002fft3 = 3,
	eml22__MassPerVolumeUom__0_x002e1_x0020lbm_x002fbbl = 4,
	eml22__MassPerVolumeUom__10_x0020Mg_x002fm3 = 5,
	eml22__MassPerVolumeUom__g_x002fcm3 = 6,
	eml22__MassPerVolumeUom__g_x002fdm3 = 7,
	eml22__MassPerVolumeUom__g_x002fgal_x005bUK_x005d = 8,
	eml22__MassPerVolumeUom__g_x002fgal_x005bUS_x005d = 9,
	eml22__MassPerVolumeUom__g_x002fL = 10,
	eml22__MassPerVolumeUom__g_x002fm3 = 11,
	eml22__MassPerVolumeUom__grain_x002fft3 = 12,
	eml22__MassPerVolumeUom__grain_x002fgal_x005bUS_x005d = 13,
	eml22__MassPerVolumeUom__kg_x002fdm3 = 14,
	eml22__MassPerVolumeUom__kg_x002fL = 15,
	eml22__MassPerVolumeUom__kg_x002fm3 = 16,
	eml22__MassPerVolumeUom__lbm_x002fbbl = 17,
	eml22__MassPerVolumeUom__lbm_x002fft3 = 18,
	eml22__MassPerVolumeUom__lbm_x002fgal_x005bUK_x005d = 19,
	eml22__MassPerVolumeUom__lbm_x002fgal_x005bUS_x005d = 20,
	eml22__MassPerVolumeUom__lbm_x002fin3 = 21,
	eml22__MassPerVolumeUom__mg_x002fdm3 = 22,
	eml22__MassPerVolumeUom__mg_x002fgal_x005bUS_x005d = 23,
	eml22__MassPerVolumeUom__mg_x002fL = 24,
	eml22__MassPerVolumeUom__mg_x002fm3 = 25,
	eml22__MassPerVolumeUom__Mg_x002fm3 = 26,
	eml22__MassPerVolumeUom__t_x002fm3 = 27,
	eml22__MassPerVolumeUom__ug_x002fcm3 = 28
};
#endif

/* eml2_2ForGsoap.h:9545 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUom (-1192)

/* eml22:MassUom */
enum eml22__MassUom {
	eml22__MassUom__g = 'g',
	eml22__MassUom__t = 't',
	eml22__MassUom__ag = 'u',
	eml22__MassUom__cg = 'v',
	eml22__MassUom__ct = 'w',
	eml22__MassUom__cwt_x005bUK_x005d = 'x',
	eml22__MassUom__cwt_x005bUS_x005d = 'y',
	eml22__MassUom__Eg = 'z',
	eml22__MassUom__fg = 123,
	eml22__MassUom__Gg = 124,
	eml22__MassUom__grain = 125,
	eml22__MassUom__hg = 126,
	eml22__MassUom__kg = 127,
	eml22__MassUom__klbm = 128,
	eml22__MassUom__lbm = 129,
	eml22__MassUom__mg = 130,
	eml22__MassUom__Mg = 131,
	eml22__MassUom__ng = 132,
	eml22__MassUom__ozm = 133,
	eml22__MassUom__ozm_x005btroy_x005d = 134,
	eml22__MassUom__pg = 135,
	eml22__MassUom__sack_x005b94lbm_x005d = 136,
	eml22__MassUom__Tg = 137,
	eml22__MassUom__ton_x005bUK_x005d = 138,
	eml22__MassUom__ton_x005bUS_x005d = 139,
	eml22__MassUom__ug = 140
};
#endif

/* eml2_2ForGsoap.h:9656 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom (-1193)

/* eml22:MobilityUom */
enum eml22__MobilityUom {
	eml22__MobilityUom__D_x002f_x0028Pa_x002es_x0029 = 0,
	eml22__MobilityUom__D_x002fcP = 1,
	eml22__MobilityUom__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 2,
	eml22__MobilityUom__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 3,
	eml22__MobilityUom__mD_x002f_x0028Pa_x002es_x0029 = 4,
	eml22__MobilityUom__mD_x002fcP = 5,
	eml22__MobilityUom__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 6
};
#endif

/* eml2_2ForGsoap.h:9691 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom (-1194)

/* eml22:MolarEnergyUom */
enum eml22__MolarEnergyUom {
	eml22__MolarEnergyUom__Btu_x005bIT_x005d_x002flbmol = 0,
	eml22__MolarEnergyUom__J_x002fmol = 1,
	eml22__MolarEnergyUom__kcal_x005bth_x005d_x002fmol = 2,
	eml22__MolarEnergyUom__kJ_x002fkmol = 3,
	eml22__MolarEnergyUom__MJ_x002fkmol = 4
};
#endif

/* eml2_2ForGsoap.h:9718 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom (-1195)

/* eml22:MolarHeatCapacityUom */
enum eml22__MolarHeatCapacityUom {
	eml22__MolarHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edeltaF_x0029 = 0,
	eml22__MolarHeatCapacityUom__cal_x005bth_x005d_x002f_x0028mol_x002edeltaC_x0029 = 1,
	eml22__MolarHeatCapacityUom__J_x002f_x0028mol_x002edeltaK_x0029 = 2,
	eml22__MolarHeatCapacityUom__kJ_x002f_x0028kmol_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:9741 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom (-1196)

/* eml22:MolarVolumeUom */
enum eml22__MolarVolumeUom {
	eml22__MolarVolumeUom__dm3_x002fkmol = 0,
	eml22__MolarVolumeUom__ft3_x002flbmol = 1,
	eml22__MolarVolumeUom__L_x002fkmol = 2,
	eml22__MolarVolumeUom__L_x002fmol = 3,
	eml22__MolarVolumeUom__m3_x002fkmol = 4,
	eml22__MolarVolumeUom__m3_x002fmol = 5
};
#endif

/* eml2_2ForGsoap.h:9772 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom (-1197)

/* eml22:MolecularWeightUom */
enum eml22__MolecularWeightUom {
	eml22__MolecularWeightUom__g_x002fmol = 0,
	eml22__MolecularWeightUom__kg_x002fmol = 1,
	eml22__MolecularWeightUom__lbm_x002flbmol = 2
};
#endif

/* eml2_2ForGsoap.h:9791 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom (-1198)

/* eml22:MomentOfForceUom */
enum eml22__MomentOfForceUom {
	eml22__MomentOfForceUom__J = 'J',
	eml22__MomentOfForceUom__1000_x0020lbf_x002eft = 'K',
	eml22__MomentOfForceUom__daN_x002em = 'L',
	eml22__MomentOfForceUom__dN_x002em = 'M',
	eml22__MomentOfForceUom__kgf_x002em = 'N',
	eml22__MomentOfForceUom__kN_x002em = 'O',
	eml22__MomentOfForceUom__lbf_x002eft = 'P',
	eml22__MomentOfForceUom__lbf_x002ein = 'Q',
	eml22__MomentOfForceUom__lbm_x002eft2_x002fs2 = 'R',
	eml22__MomentOfForceUom__N_x002em = 'S',
	eml22__MomentOfForceUom__pdl_x002eft = 'T',
	eml22__MomentOfForceUom__tonf_x005bUS_x005d_x002eft = 'U',
	eml22__MomentOfForceUom__tonf_x005bUS_x005d_x002emi = 'V'
};
#endif

/* eml2_2ForGsoap.h:9850 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom (-1199)

/* eml22:MomentOfInertiaUom */
enum eml22__MomentOfInertiaUom {
	eml22__MomentOfInertiaUom__kg_x002em2 = 0,
	eml22__MomentOfInertiaUom__lbm_x002eft2 = 1
};
#endif

/* eml2_2ForGsoap.h:9865 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom (-1200)

/* eml22:MomentumUom */
enum eml22__MomentumUom {
	eml22__MomentumUom__kg_x002em_x002fs = 0,
	eml22__MomentumUom__lbm_x002eft_x002fs = 1
};
#endif

/* eml2_2ForGsoap.h:9880 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom (-1201)

/* eml22:NormalizedPowerUom */
enum eml22__NormalizedPowerUom {
	eml22__NormalizedPowerUom__B_x002eW = 0,
	eml22__NormalizedPowerUom__dB_x002emW = 1,
	eml22__NormalizedPowerUom__dB_x002eMW = 2,
	eml22__NormalizedPowerUom__dB_x002eW = 3
};
#endif

/* eml2_2ForGsoap.h:9903 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom (-1202)

/* eml22:PermeabilityLengthUom */
enum eml22__PermeabilityLengthUom {
	eml22__PermeabilityLengthUom__D_x002eft = 0,
	eml22__PermeabilityLengthUom__D_x002em = 1,
	eml22__PermeabilityLengthUom__mD_x002eft = 2,
	eml22__PermeabilityLengthUom__mD_x002em = 3,
	eml22__PermeabilityLengthUom__TD_x005bAPI_x005d_x002em = 4
};
#endif

/* eml2_2ForGsoap.h:9930 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom (-1203)

/* eml22:PermeabilityRockUom */
enum eml22__PermeabilityRockUom {
	eml22__PermeabilityRockUom__D = 'D',
	eml22__PermeabilityRockUom__D_x005bAPI_x005d = 'E',
	eml22__PermeabilityRockUom__mD = 'F',
	eml22__PermeabilityRockUom__TD_x005bAPI_x005d = 'G'
};
#endif

/* eml2_2ForGsoap.h:9953 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom (-1204)

/* eml22:PermittivityUom */
enum eml22__PermittivityUom {
	eml22__PermittivityUom__F_x002fm = 0,
	eml22__PermittivityUom__uF_x002fm = 1
};
#endif

/* eml2_2ForGsoap.h:9968 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom (-1205)

/* eml22:PlaneAngleUom */
enum eml22__PlaneAngleUom {
	eml22__PlaneAngleUom__0_x002e001_x0020seca = 0,
	eml22__PlaneAngleUom__ccgr = 1,
	eml22__PlaneAngleUom__cgr = 2,
	eml22__PlaneAngleUom__dega = 3,
	eml22__PlaneAngleUom__gon = 4,
	eml22__PlaneAngleUom__krad = 5,
	eml22__PlaneAngleUom__mila = 6,
	eml22__PlaneAngleUom__mina = 7,
	eml22__PlaneAngleUom__Mrad = 8,
	eml22__PlaneAngleUom__mrad = 9,
	eml22__PlaneAngleUom__rad = 10,
	eml22__PlaneAngleUom__rev = 11,
	eml22__PlaneAngleUom__seca = 12,
	eml22__PlaneAngleUom__urad = 13
};
#endif

/* eml2_2ForGsoap.h:10031 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom (-1206)

/* eml22:PotentialDifferencePerPowerDropUom */
enum eml22__PotentialDifferencePerPowerDropUom {
	eml22__PotentialDifferencePerPowerDropUom__V_x002fB = 0,
	eml22__PotentialDifferencePerPowerDropUom__V_x002fdB = 1
};
#endif

/* eml2_2ForGsoap.h:10046 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom (-1207)

/* eml22:PowerPerAreaUom */
enum eml22__PowerPerAreaUom {
	eml22__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 0,
	eml22__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 1,
	eml22__PowerPerAreaUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 2,
	eml22__PowerPerAreaUom__hp_x002fin2 = 3,
	eml22__PowerPerAreaUom__hp_x005bhyd_x005d_x002fin2 = 4,
	eml22__PowerPerAreaUom__kW_x002fcm2 = 5,
	eml22__PowerPerAreaUom__kW_x002fm2 = 6,
	eml22__PowerPerAreaUom__mW_x002fm2 = 7,
	eml22__PowerPerAreaUom__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 8,
	eml22__PowerPerAreaUom__W_x002fcm2 = 9,
	eml22__PowerPerAreaUom__W_x002fm2 = 10,
	eml22__PowerPerAreaUom__W_x002fmm2 = 11
};
#endif

/* eml2_2ForGsoap.h:10101 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom (-1208)

/* eml22:PowerPerPowerUom */
enum eml22__PowerPerPowerUom {
	eml22__PowerPerPowerUom___x0025 = 0,
	eml22__PowerPerPowerUom__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 1,
	eml22__PowerPerPowerUom__Euc = 2,
	eml22__PowerPerPowerUom__W_x002fkW = 3,
	eml22__PowerPerPowerUom__W_x002fW = 4
};
#endif

/* eml2_2ForGsoap.h:10128 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom (-1209)

/* eml22:PowerPerVolumeUom */
enum eml22__PowerPerVolumeUom {
	eml22__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 0,
	eml22__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 1,
	eml22__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 2,
	eml22__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 3,
	eml22__PowerPerVolumeUom__hp_x002fft3 = 4,
	eml22__PowerPerVolumeUom__kW_x002fm3 = 5,
	eml22__PowerPerVolumeUom__uW_x002fm3 = 6,
	eml22__PowerPerVolumeUom__W_x002fm3 = 7
};
#endif

/* eml2_2ForGsoap.h:10167 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom (-1210)

/* eml22:PowerUom */
enum eml22__PowerUom {
	eml22__PowerUom__W = 'W',
	eml22__PowerUom__cW = 'X',
	eml22__PowerUom__dW = 'Y',
	eml22__PowerUom__EW = 'Z',
	eml22__PowerUom__fW = 91,
	eml22__PowerUom__GW = 92,
	eml22__PowerUom__hp = 93,
	eml22__PowerUom__hp_x005belec_x005d = 94,
	eml22__PowerUom__hp_x005bhyd_x005d = 95,
	eml22__PowerUom__hp_x005bmetric_x005d = 96,
	eml22__PowerUom__kW = 'a',
	eml22__PowerUom__MW = 'b',
	eml22__PowerUom__mW = 'c',
	eml22__PowerUom__nW = 'd',
	eml22__PowerUom__pW = 'e',
	eml22__PowerUom__tonRefrig = 'f',
	eml22__PowerUom__TW = 'g',
	eml22__PowerUom__uW = 'h'
};
#endif

/* eml2_2ForGsoap.h:10246 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom (-1211)

/* eml22:PressurePerPressureUom */
enum eml22__PressurePerPressureUom {
	eml22__PressurePerPressureUom__atm_x002fatm = 0,
	eml22__PressurePerPressureUom__bar_x002fbar = 1,
	eml22__PressurePerPressureUom__Euc = 2,
	eml22__PressurePerPressureUom__kPa_x002fkPa = 3,
	eml22__PressurePerPressureUom__MPa_x002fMPa = 4,
	eml22__PressurePerPressureUom__Pa_x002fPa = 5,
	eml22__PressurePerPressureUom__psi_x002fpsi = 6
};
#endif

/* eml2_2ForGsoap.h:10281 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom (-1212)

/* eml22:PressurePerTimeUom */
enum eml22__PressurePerTimeUom {
	eml22__PressurePerTimeUom__atm_x002fh = 0,
	eml22__PressurePerTimeUom__bar_x002fh = 1,
	eml22__PressurePerTimeUom__kPa_x002fh = 2,
	eml22__PressurePerTimeUom__kPa_x002fmin = 3,
	eml22__PressurePerTimeUom__MPa_x002fh = 4,
	eml22__PressurePerTimeUom__Pa_x002fh = 5,
	eml22__PressurePerTimeUom__Pa_x002fs = 6,
	eml22__PressurePerTimeUom__psi_x002fh = 7,
	eml22__PressurePerTimeUom__psi_x002fmin = 8
};
#endif

/* eml2_2ForGsoap.h:10324 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom (-1213)

/* eml22:PressurePerVolumeUom */
enum eml22__PressurePerVolumeUom {
	eml22__PressurePerVolumeUom__Pa_x002fm3 = 0,
	eml22__PressurePerVolumeUom__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1
};
#endif

/* eml2_2ForGsoap.h:10339 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom (-1214)

/* eml22:PressureSquaredPerForceTimePerAreaUom */
enum eml22__PressureSquaredPerForceTimePerAreaUom {
	eml22__PressureSquaredPerForceTimePerAreaUom__0_x002e001_x0020kPa2_x002fcP = 0,
	eml22__PressureSquaredPerForceTimePerAreaUom__bar2_x002fcP = 1,
	eml22__PressureSquaredPerForceTimePerAreaUom__kPa2_x002fcP = 2,
	eml22__PressureSquaredPerForceTimePerAreaUom__Pa2_x002f_x0028Pa_x002es_x0029 = 3,
	eml22__PressureSquaredPerForceTimePerAreaUom__psi2_x002fcP = 4
};
#endif

/* eml2_2ForGsoap.h:10366 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom (-1215)

/* eml22:PressureSquaredUom */
enum eml22__PressureSquaredUom {
	eml22__PressureSquaredUom__bar2 = 0,
	eml22__PressureSquaredUom__GPa2 = 1,
	eml22__PressureSquaredUom__kPa2 = 2,
	eml22__PressureSquaredUom__kpsi2 = 3,
	eml22__PressureSquaredUom__Pa2 = 4,
	eml22__PressureSquaredUom__psi2 = 5
};
#endif

/* eml2_2ForGsoap.h:10397 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom (-1216)

/* eml22:PressureTimePerVolumeUom */
enum eml22__PressureTimePerVolumeUom {
	eml22__PressureTimePerVolumeUom__Pa_x002es_x002fm3 = 0,
	eml22__PressureTimePerVolumeUom__psi_x002ed_x002fbbl = 1
};
#endif

/* eml2_2ForGsoap.h:10412 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom (-1217)

/* eml22:PressureUom */
enum eml22__PressureUom {
	eml22__PressureUom__0_x002e01_x0020lbf_x002fft2 = 0,
	eml22__PressureUom__at = 1,
	eml22__PressureUom__atm = 2,
	eml22__PressureUom__bar = 3,
	eml22__PressureUom__cmH2O_x005b4degC_x005d = 4,
	eml22__PressureUom__cPa = 5,
	eml22__PressureUom__dPa = 6,
	eml22__PressureUom__dyne_x002fcm2 = 7,
	eml22__PressureUom__EPa = 8,
	eml22__PressureUom__fPa = 9,
	eml22__PressureUom__GPa = 10,
	eml22__PressureUom__hbar = 11,
	eml22__PressureUom__inH2O_x005b39degF_x005d = 12,
	eml22__PressureUom__inH2O_x005b60degF_x005d = 13,
	eml22__PressureUom__inHg_x005b32degF_x005d = 14,
	eml22__PressureUom__inHg_x005b60degF_x005d = 15,
	eml22__PressureUom__kgf_x002fcm2 = 16,
	eml22__PressureUom__kgf_x002fm2 = 17,
	eml22__PressureUom__kgf_x002fmm2 = 18,
	eml22__PressureUom__kN_x002fm2 = 19,
	eml22__PressureUom__kPa = 20,
	eml22__PressureUom__kpsi = 21,
	eml22__PressureUom__lbf_x002fft2 = 22,
	eml22__PressureUom__mbar = 23,
	eml22__PressureUom__mmHg_x005b0degC_x005d = 24,
	eml22__PressureUom__mPa = 25,
	eml22__PressureUom__MPa = 26,
	eml22__PressureUom__Mpsi = 27,
	eml22__PressureUom__N_x002fm2 = 28,
	eml22__PressureUom__N_x002fmm2 = 29,
	eml22__PressureUom__nPa = 30,
	eml22__PressureUom__Pa = 31,
	eml22__PressureUom__pPa = 32,
	eml22__PressureUom__psi = 33,
	eml22__PressureUom__tonf_x005bUK_x005d_x002fft2 = 34,
	eml22__PressureUom__tonf_x005bUS_x005d_x002fft2 = 35,
	eml22__PressureUom__tonf_x005bUS_x005d_x002fin2 = 36,
	eml22__PressureUom__torr = 37,
	eml22__PressureUom__TPa = 38,
	eml22__PressureUom__ubar = 39,
	eml22__PressureUom__umHg_x005b0degC_x005d = 40,
	eml22__PressureUom__uPa = 41,
	eml22__PressureUom__upsi = 42
};
#endif

/* eml2_2ForGsoap.h:10591 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom (-1218)

/* eml22:QuantityOfLightUom */
enum eml22__QuantityOfLightUom {
	eml22__QuantityOfLightUom__lm_x002es = 0
};
#endif

/* eml2_2ForGsoap.h:10602 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom (-1219)

/* eml22:RadianceUom */
enum eml22__RadianceUom {
	eml22__RadianceUom__W_x002f_x0028m2_x002esr_x0029 = 0
};
#endif

/* eml2_2ForGsoap.h:10613 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom (-1220)

/* eml22:RadiantIntensityUom */
enum eml22__RadiantIntensityUom {
	eml22__RadiantIntensityUom__W_x002fsr = 0
};
#endif

/* eml2_2ForGsoap.h:10624 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom (-1221)

/* eml22:ReciprocalAreaUom */
enum eml22__ReciprocalAreaUom {
	eml22__ReciprocalAreaUom__1_x002fft2 = 0,
	eml22__ReciprocalAreaUom__1_x002fkm2 = 1,
	eml22__ReciprocalAreaUom__1_x002fm2 = 2,
	eml22__ReciprocalAreaUom__1_x002fmi2 = 3
};
#endif

/* eml2_2ForGsoap.h:10647 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom (-1222)

/* eml22:ReciprocalElectricPotentialDifferenceUom */
enum eml22__ReciprocalElectricPotentialDifferenceUom {
	eml22__ReciprocalElectricPotentialDifferenceUom__1_x002fuV = 0,
	eml22__ReciprocalElectricPotentialDifferenceUom__1_x002fV = 1
};
#endif

/* eml2_2ForGsoap.h:10662 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom (-1223)

/* eml22:ReciprocalForceUom */
enum eml22__ReciprocalForceUom {
	eml22__ReciprocalForceUom__1_x002flbf = 0,
	eml22__ReciprocalForceUom__1_x002fN = 1
};
#endif

/* eml2_2ForGsoap.h:10677 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom (-1224)

/* eml22:ReciprocalLengthUom */
enum eml22__ReciprocalLengthUom {
	eml22__ReciprocalLengthUom__1_x002fangstrom = 0,
	eml22__ReciprocalLengthUom__1_x002fcm = 1,
	eml22__ReciprocalLengthUom__1_x002fft = 2,
	eml22__ReciprocalLengthUom__1_x002fin = 3,
	eml22__ReciprocalLengthUom__1_x002fm = 4,
	eml22__ReciprocalLengthUom__1_x002fmi = 5,
	eml22__ReciprocalLengthUom__1_x002fmm = 6,
	eml22__ReciprocalLengthUom__1_x002fnm = 7,
	eml22__ReciprocalLengthUom__1_x002fyd = 8,
	eml22__ReciprocalLengthUom__1E_9_x00201_x002fft = 9
};
#endif

/* eml2_2ForGsoap.h:10724 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom (-1225)

/* eml22:ReciprocalMassTimeUom */
enum eml22__ReciprocalMassTimeUom {
	eml22__ReciprocalMassTimeUom__1_x002f_x0028kg_x002es_x0029 = 0,
	eml22__ReciprocalMassTimeUom__Bq_x002fkg = 1,
	eml22__ReciprocalMassTimeUom__pCi_x002fg = 2
};
#endif

/* eml2_2ForGsoap.h:10743 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom (-1226)

/* eml22:ReciprocalMassUom */
enum eml22__ReciprocalMassUom {
	eml22__ReciprocalMassUom__1_x002fg = 0,
	eml22__ReciprocalMassUom__1_x002fkg = 1,
	eml22__ReciprocalMassUom__1_x002flbm = 2
};
#endif

/* eml2_2ForGsoap.h:10762 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom (-1227)

/* eml22:ReciprocalPressureUom */
enum eml22__ReciprocalPressureUom {
	eml22__ReciprocalPressureUom__1_x002fbar = 0,
	eml22__ReciprocalPressureUom__1_x002fkPa = 1,
	eml22__ReciprocalPressureUom__1_x002fPa = 2,
	eml22__ReciprocalPressureUom__1_x002fpPa = 3,
	eml22__ReciprocalPressureUom__1_x002fpsi = 4,
	eml22__ReciprocalPressureUom__1_x002fupsi = 5
};
#endif

/* eml2_2ForGsoap.h:10793 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom (-1228)

/* eml22:ReciprocalTimeUom */
enum eml22__ReciprocalTimeUom {
	eml22__ReciprocalTimeUom__1_x002fa = 0,
	eml22__ReciprocalTimeUom__1_x002fd = 1,
	eml22__ReciprocalTimeUom__1_x002fh = 2,
	eml22__ReciprocalTimeUom__1_x002fmin = 3,
	eml22__ReciprocalTimeUom__1_x002fms = 4,
	eml22__ReciprocalTimeUom__1_x002fs = 5,
	eml22__ReciprocalTimeUom__1_x002fus = 6,
	eml22__ReciprocalTimeUom__1_x002fwk = 7
};
#endif

/* eml2_2ForGsoap.h:10832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom (-1229)

/* eml22:ReciprocalVolumeUom */
enum eml22__ReciprocalVolumeUom {
	eml22__ReciprocalVolumeUom__1_x002fbbl = 0,
	eml22__ReciprocalVolumeUom__1_x002fft3 = 1,
	eml22__ReciprocalVolumeUom__1_x002fgal_x005bUK_x005d = 2,
	eml22__ReciprocalVolumeUom__1_x002fgal_x005bUS_x005d = 3,
	eml22__ReciprocalVolumeUom__1_x002fL = 4,
	eml22__ReciprocalVolumeUom__1_x002fm3 = 5
};
#endif

/* eml2_2ForGsoap.h:10863 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom (-1230)

/* eml22:ReluctanceUom */
enum eml22__ReluctanceUom {
	eml22__ReluctanceUom__1_x002fH = 0
};
#endif

/* eml2_2ForGsoap.h:10874 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom (-1231)

/* eml22:SecondMomentOfAreaUom */
enum eml22__SecondMomentOfAreaUom {
	eml22__SecondMomentOfAreaUom__cm4 = 0,
	eml22__SecondMomentOfAreaUom__in4 = 1,
	eml22__SecondMomentOfAreaUom__m4 = 2
};
#endif

/* eml2_2ForGsoap.h:10893 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom (-1232)

/* eml22:SignalingEventPerTimeUom */
enum eml22__SignalingEventPerTimeUom {
	eml22__SignalingEventPerTimeUom__Bd = 0
};
#endif

/* eml2_2ForGsoap.h:10904 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom (-1233)

/* eml22:SolidAngleUom */
enum eml22__SolidAngleUom {
	eml22__SolidAngleUom__sr = 0
};
#endif

/* eml2_2ForGsoap.h:10915 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom (-1234)

/* eml22:SpecificHeatCapacityUom */
enum eml22__SpecificHeatCapacityUom {
	eml22__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaF_x0029 = 0,
	eml22__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaR_x0029 = 1,
	eml22__SpecificHeatCapacityUom__cal_x005bth_x005d_x002f_x0028g_x002edeltaK_x0029 = 2,
	eml22__SpecificHeatCapacityUom__J_x002f_x0028g_x002edeltaK_x0029 = 3,
	eml22__SpecificHeatCapacityUom__J_x002f_x0028kg_x002edeltaK_x0029 = 4,
	eml22__SpecificHeatCapacityUom__kcal_x005bth_x005d_x002f_x0028kg_x002edeltaC_x0029 = 5,
	eml22__SpecificHeatCapacityUom__kJ_x002f_x0028kg_x002edeltaK_x0029 = 6,
	eml22__SpecificHeatCapacityUom__kW_x002eh_x002f_x0028kg_x002edeltaC_x0029 = 7
};
#endif

/* eml2_2ForGsoap.h:10954 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom (-1235)

/* eml22:TemperatureIntervalPerLengthUom */
enum eml22__TemperatureIntervalPerLengthUom {
	eml22__TemperatureIntervalPerLengthUom__0_x002e01_x0020deltaF_x002fft = 0,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fft = 1,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fhm = 2,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fkm = 3,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fm = 4,
	eml22__TemperatureIntervalPerLengthUom__deltaF_x002fft = 5,
	eml22__TemperatureIntervalPerLengthUom__deltaF_x002fm = 6,
	eml22__TemperatureIntervalPerLengthUom__deltaK_x002fkm = 7,
	eml22__TemperatureIntervalPerLengthUom__deltaK_x002fm = 8
};
#endif

/* eml2_2ForGsoap.h:10997 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom (-1236)

/* eml22:TemperatureIntervalPerPressureUom */
enum eml22__TemperatureIntervalPerPressureUom {
	eml22__TemperatureIntervalPerPressureUom__deltaC_x002fkPa = 0,
	eml22__TemperatureIntervalPerPressureUom__deltaF_x002fpsi = 1,
	eml22__TemperatureIntervalPerPressureUom__deltaK_x002fPa = 2
};
#endif

/* eml2_2ForGsoap.h:11016 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom (-1237)

/* eml22:TemperatureIntervalPerTimeUom */
enum eml22__TemperatureIntervalPerTimeUom {
	eml22__TemperatureIntervalPerTimeUom__deltaC_x002fh = 0,
	eml22__TemperatureIntervalPerTimeUom__deltaC_x002fmin = 1,
	eml22__TemperatureIntervalPerTimeUom__deltaC_x002fs = 2,
	eml22__TemperatureIntervalPerTimeUom__deltaF_x002fh = 3,
	eml22__TemperatureIntervalPerTimeUom__deltaF_x002fmin = 4,
	eml22__TemperatureIntervalPerTimeUom__deltaF_x002fs = 5,
	eml22__TemperatureIntervalPerTimeUom__deltaK_x002fs = 6
};
#endif

/* eml2_2ForGsoap.h:11051 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom (-1238)

/* eml22:TemperatureIntervalUom */
enum eml22__TemperatureIntervalUom {
	eml22__TemperatureIntervalUom__deltaC = 0,
	eml22__TemperatureIntervalUom__deltaF = 1,
	eml22__TemperatureIntervalUom__deltaK = 2,
	eml22__TemperatureIntervalUom__deltaR = 3
};
#endif

/* eml2_2ForGsoap.h:11074 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom (-1239)

/* eml22:ThermalConductanceUom */
enum eml22__ThermalConductanceUom {
	eml22__ThermalConductanceUom__W_x002fdeltaK = 0
};
#endif

/* eml2_2ForGsoap.h:11085 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom (-1240)

/* eml22:ThermalConductivityUom */
enum eml22__ThermalConductivityUom {
	eml22__ThermalConductivityUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edeltaF_x0029 = 0,
	eml22__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edeltaC_x0029 = 1,
	eml22__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edeltaC_x0029 = 2,
	eml22__ThermalConductivityUom__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edeltaC_x0029 = 3,
	eml22__ThermalConductivityUom__W_x002f_x0028m_x002edeltaK_x0029 = 4
};
#endif

/* eml2_2ForGsoap.h:11112 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom (-1241)

/* eml22:ThermalDiffusivityUom */
enum eml22__ThermalDiffusivityUom {
	eml22__ThermalDiffusivityUom__cm2_x002fs = 0,
	eml22__ThermalDiffusivityUom__ft2_x002fh = 1,
	eml22__ThermalDiffusivityUom__ft2_x002fs = 2,
	eml22__ThermalDiffusivityUom__in2_x002fs = 3,
	eml22__ThermalDiffusivityUom__m2_x002fh = 4,
	eml22__ThermalDiffusivityUom__m2_x002fs = 5,
	eml22__ThermalDiffusivityUom__mm2_x002fs = 6
};
#endif

/* eml2_2ForGsoap.h:11147 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom (-1242)

/* eml22:ThermalInsulanceUom */
enum eml22__ThermalInsulanceUom {
	eml22__ThermalInsulanceUom__deltaC_x002em2_x002eh_x002fkcal_x005bth_x005d = 0,
	eml22__ThermalInsulanceUom__deltaF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 1,
	eml22__ThermalInsulanceUom__deltaK_x002em2_x002fkW = 2,
	eml22__ThermalInsulanceUom__deltaK_x002em2_x002fW = 3
};
#endif

/* eml2_2ForGsoap.h:11170 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom (-1243)

/* eml22:ThermalResistanceUom */
enum eml22__ThermalResistanceUom {
	eml22__ThermalResistanceUom__deltaK_x002fW = 0
};
#endif

/* eml2_2ForGsoap.h:11181 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-1244)

/* eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUom */
enum eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom {
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degC_x002fdegC = 0,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degF_x002fdegF = 1,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degR_x002fdegR = 2,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__Euc = 3,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__K_x002fK = 4
};
#endif

/* eml2_2ForGsoap.h:11208 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom (-1245)

/* eml22:ThermodynamicTemperatureUom */
enum eml22__ThermodynamicTemperatureUom {
	eml22__ThermodynamicTemperatureUom__K = 'K',
	eml22__ThermodynamicTemperatureUom__degC = 'L',
	eml22__ThermodynamicTemperatureUom__degF = 'M',
	eml22__ThermodynamicTemperatureUom__degR = 'N'
};
#endif

/* eml2_2ForGsoap.h:11231 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom (-1246)

/* eml22:TimePerLengthUom */
enum eml22__TimePerLengthUom {
	eml22__TimePerLengthUom__0_x002e001_x0020h_x002fft = 0,
	eml22__TimePerLengthUom__h_x002fkm = 1,
	eml22__TimePerLengthUom__min_x002fft = 2,
	eml22__TimePerLengthUom__min_x002fm = 3,
	eml22__TimePerLengthUom__ms_x002fcm = 4,
	eml22__TimePerLengthUom__ms_x002fft = 5,
	eml22__TimePerLengthUom__ms_x002fin = 6,
	eml22__TimePerLengthUom__ms_x002fm = 7,
	eml22__TimePerLengthUom__ns_x002fft = 8,
	eml22__TimePerLengthUom__ns_x002fm = 9,
	eml22__TimePerLengthUom__s_x002fcm = 10,
	eml22__TimePerLengthUom__s_x002fft = 11,
	eml22__TimePerLengthUom__s_x002fin = 12,
	eml22__TimePerLengthUom__s_x002fm = 13,
	eml22__TimePerLengthUom__us_x002fft = 14,
	eml22__TimePerLengthUom__us_x002fin = 15,
	eml22__TimePerLengthUom__us_x002fm = 16
};
#endif

/* eml2_2ForGsoap.h:11306 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom (-1247)

/* eml22:TimePerMassUom */
enum eml22__TimePerMassUom {
	eml22__TimePerMassUom__s_x002fkg = 0
};
#endif

/* eml2_2ForGsoap.h:11317 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom (-1248)

/* eml22:TimePerTimeUom */
enum eml22__TimePerTimeUom {
	eml22__TimePerTimeUom___x0025 = 0,
	eml22__TimePerTimeUom__Euc = 1,
	eml22__TimePerTimeUom__ms_x002fs = 2,
	eml22__TimePerTimeUom__s_x002fs = 3
};
#endif

/* eml2_2ForGsoap.h:11340 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom (-1249)

/* eml22:TimePerVolumeUom */
enum eml22__TimePerVolumeUom {
	eml22__TimePerVolumeUom__0_x002e001_x0020d_x002fft3 = 0,
	eml22__TimePerVolumeUom__d_x002fbbl = 1,
	eml22__TimePerVolumeUom__d_x002fft3 = 2,
	eml22__TimePerVolumeUom__d_x002fm3 = 3,
	eml22__TimePerVolumeUom__h_x002fft3 = 4,
	eml22__TimePerVolumeUom__h_x002fm3 = 5,
	eml22__TimePerVolumeUom__s_x002fft3 = 6,
	eml22__TimePerVolumeUom__s_x002fL = 7,
	eml22__TimePerVolumeUom__s_x002fm3 = 8,
	eml22__TimePerVolumeUom__s_x002fqt_x005bUK_x005d = 9,
	eml22__TimePerVolumeUom__s_x002fqt_x005bUS_x005d = 10
};
#endif

/* eml2_2ForGsoap.h:11391 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom (-1250)

/* eml22:TimeUom */
enum eml22__TimeUom {
	eml22__TimeUom__a = 'a',
	eml22__TimeUom__d = 'd',
	eml22__TimeUom__h = 'h',
	eml22__TimeUom__s = 's',
	eml22__TimeUom__1_x002f2_x0020ms = 't',
	eml22__TimeUom__100_x0020ka_x005bt_x005d = 'u',
	eml22__TimeUom__a_x005bt_x005d = 'v',
	eml22__TimeUom__ca = 'w',
	eml22__TimeUom__cs = 'x',
	eml22__TimeUom__ds = 'y',
	eml22__TimeUom__Ea_x005bt_x005d = 'z',
	eml22__TimeUom__fa = 123,
	eml22__TimeUom__Ga_x005bt_x005d = 124,
	eml22__TimeUom__hs = 125,
	eml22__TimeUom__ka_x005bt_x005d = 126,
	eml22__TimeUom__Ma_x005bt_x005d = 127,
	eml22__TimeUom__min_ = 128,
	eml22__TimeUom__ms = 129,
	eml22__TimeUom__na = 130,
	eml22__TimeUom__ns = 131,
	eml22__TimeUom__ps = 132,
	eml22__TimeUom__Ta_x005bt_x005d = 133,
	eml22__TimeUom__us = 134,
	eml22__TimeUom__wk = 135
};
#endif

/* eml2_2ForGsoap.h:11497 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom (-1251)

/* eml22:VerticalCoordinateUom */
enum eml22__VerticalCoordinateUom {
	eml22__VerticalCoordinateUom__m = 'm',
	eml22__VerticalCoordinateUom__ft = 'n',
	eml22__VerticalCoordinateUom__ftUS = 'o',
	eml22__VerticalCoordinateUom__ftBr_x002865_x0029 = 'p'
};
#endif

/* eml2_2ForGsoap.h:11520 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom (-1252)

/* eml22:VolumeFlowRatePerVolumeFlowRateUom */
enum eml22__VolumeFlowRatePerVolumeFlowRateUom {
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0025 = 0,
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 1,
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 2,
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 3,
	eml22__VolumeFlowRatePerVolumeFlowRateUom__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 4,
	eml22__VolumeFlowRatePerVolumeFlowRateUom__Euc = 5
};
#endif

/* eml2_2ForGsoap.h:11551 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom (-1253)

/* eml22:VolumePerAreaUom */
enum eml22__VolumePerAreaUom {
	eml22__VolumePerAreaUom__1E6_x0020bbl_x002facre = 0,
	eml22__VolumePerAreaUom__bbl_x002facre = 1,
	eml22__VolumePerAreaUom__ft3_x002fft2 = 2,
	eml22__VolumePerAreaUom__m3_x002fm2 = 3
};
#endif

/* eml2_2ForGsoap.h:11574 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom (-1254)

/* eml22:VolumePerLengthUom */
enum eml22__VolumePerLengthUom {
	eml22__VolumePerLengthUom__0_x002e01_x0020dm3_x002fkm = 0,
	eml22__VolumePerLengthUom__0_x002e01_x0020L_x002fkm = 1,
	eml22__VolumePerLengthUom__bbl_x002fft = 2,
	eml22__VolumePerLengthUom__bbl_x002fin = 3,
	eml22__VolumePerLengthUom__bbl_x002fmi = 4,
	eml22__VolumePerLengthUom__dm3_x002fm = 5,
	eml22__VolumePerLengthUom__ft3_x002fft = 6,
	eml22__VolumePerLengthUom__gal_x005bUK_x005d_x002fmi = 7,
	eml22__VolumePerLengthUom__gal_x005bUS_x005d_x002fft = 8,
	eml22__VolumePerLengthUom__gal_x005bUS_x005d_x002fmi = 9,
	eml22__VolumePerLengthUom__in3_x002fft = 10,
	eml22__VolumePerLengthUom__L_x002fm = 11,
	eml22__VolumePerLengthUom__m3_x002fkm = 12,
	eml22__VolumePerLengthUom__m3_x002fm = 13
};
#endif

/* eml2_2ForGsoap.h:11637 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom (-1255)

/* eml22:VolumePerMassUom */
enum eml22__VolumePerMassUom {
	eml22__VolumePerMassUom__0_x002e01_x0020L_x002fkg = 0,
	eml22__VolumePerMassUom__bbl_x002fton_x005bUK_x005d = 1,
	eml22__VolumePerMassUom__bbl_x002fton_x005bUS_x005d = 2,
	eml22__VolumePerMassUom__cm3_x002fg = 3,
	eml22__VolumePerMassUom__dm3_x002fkg = 4,
	eml22__VolumePerMassUom__dm3_x002ft = 5,
	eml22__VolumePerMassUom__ft3_x002fkg = 6,
	eml22__VolumePerMassUom__ft3_x002flbm = 7,
	eml22__VolumePerMassUom__ft3_x002fsack_x005b94lbm_x005d = 8,
	eml22__VolumePerMassUom__gal_x005bUK_x005d_x002flbm = 9,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002flbm = 10,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 11,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 12,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 13,
	eml22__VolumePerMassUom__L_x002fkg = 14,
	eml22__VolumePerMassUom__L_x002ft = 15,
	eml22__VolumePerMassUom__L_x002fton_x005bUK_x005d = 16,
	eml22__VolumePerMassUom__m3_x002fg = 17,
	eml22__VolumePerMassUom__m3_x002fkg = 18,
	eml22__VolumePerMassUom__m3_x002ft = 19,
	eml22__VolumePerMassUom__m3_x002fton_x005bUK_x005d = 20,
	eml22__VolumePerMassUom__m3_x002fton_x005bUS_x005d = 21
};
#endif

/* eml2_2ForGsoap.h:11732 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom (-1256)

/* eml22:VolumePerPressureUom */
enum eml22__VolumePerPressureUom {
	eml22__VolumePerPressureUom__bbl_x002fpsi = 0,
	eml22__VolumePerPressureUom__m3_x002fkPa = 1,
	eml22__VolumePerPressureUom__m3_x002fPa = 2
};
#endif

/* eml2_2ForGsoap.h:11751 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom (-1257)

/* eml22:VolumePerRotationUom */
enum eml22__VolumePerRotationUom {
	eml22__VolumePerRotationUom__ft3_x002frad = 0,
	eml22__VolumePerRotationUom__m3_x002frad = 1,
	eml22__VolumePerRotationUom__m3_x002frev = 2
};
#endif

/* eml2_2ForGsoap.h:11770 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom (-1258)

/* eml22:VolumePerTimeLengthUom */
enum eml22__VolumePerTimeLengthUom {
	eml22__VolumePerTimeLengthUom__1000_x0020bbl_x002eft_x002fd = 0,
	eml22__VolumePerTimeLengthUom__1000_x0020m4_x002fd = 1,
	eml22__VolumePerTimeLengthUom__m4_x002fs = 2
};
#endif

/* eml2_2ForGsoap.h:11789 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom (-1259)

/* eml22:VolumePerTimePerAreaUom */
enum eml22__VolumePerTimePerAreaUom {
	eml22__VolumePerTimePerAreaUom__ft3_x002f_x0028min_x002eft2_x0029 = 0,
	eml22__VolumePerTimePerAreaUom__ft3_x002f_x0028s_x002eft2_x0029 = 1,
	eml22__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 2,
	eml22__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 3,
	eml22__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 4,
	eml22__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 5,
	eml22__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 6,
	eml22__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 7,
	eml22__VolumePerTimePerAreaUom__m3_x002f_x0028s_x002em2_x0029 = 8
};
#endif

/* eml2_2ForGsoap.h:11832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom (-1260)

/* eml22:VolumePerTimePerLengthUom */
enum eml22__VolumePerTimePerLengthUom {
	eml22__VolumePerTimePerLengthUom__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 0,
	eml22__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028d_x002em_x0029 = 1,
	eml22__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028h_x002em_x0029 = 2,
	eml22__VolumePerTimePerLengthUom__bbl_x002f_x0028d_x002eft_x0029 = 3,
	eml22__VolumePerTimePerLengthUom__ft3_x002f_x0028d_x002eft_x0029 = 4,
	eml22__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 5,
	eml22__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 6,
	eml22__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 7,
	eml22__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 8,
	eml22__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 9,
	eml22__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 10,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028d_x002em_x0029 = 11,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028h_x002em_x0029 = 12,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002eft_x0029 = 13,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002em_x0029 = 14
};
#endif

/* eml2_2ForGsoap.h:11899 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom (-1261)

/* eml22:VolumePerTimePerPressureLengthUom */
enum eml22__VolumePerTimePerPressureLengthUom {
	eml22__VolumePerTimePerPressureLengthUom__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 0,
	eml22__VolumePerTimePerPressureLengthUom__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 1,
	eml22__VolumePerTimePerPressureLengthUom__m2_x002f_x0028kPa_x002ed_x0029 = 2,
	eml22__VolumePerTimePerPressureLengthUom__m2_x002f_x0028Pa_x002es_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:11922 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom (-1262)

/* eml22:VolumePerTimePerPressureUom */
enum eml22__VolumePerTimePerPressureUom {
	eml22__VolumePerTimePerPressureUom__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 0,
	eml22__VolumePerTimePerPressureUom__bbl_x002f_x0028kPa_x002ed_x0029 = 1,
	eml22__VolumePerTimePerPressureUom__bbl_x002f_x0028psi_x002ed_x0029 = 2,
	eml22__VolumePerTimePerPressureUom__L_x002f_x0028bar_x002emin_x0029 = 3,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002ed_x0029 = 4,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002eh_x0029 = 5,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002emin_x0029 = 6,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002ed_x0029 = 7,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002eh_x0029 = 8,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028Pa_x002es_x0029 = 9,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028psi_x002ed_x0029 = 10
};
#endif

/* eml2_2ForGsoap.h:11973 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom (-1263)

/* eml22:VolumePerTimePerTimeUom */
enum eml22__VolumePerTimePerTimeUom {
	eml22__VolumePerTimePerTimeUom__bbl_x002fd2 = 0,
	eml22__VolumePerTimePerTimeUom__bbl_x002fh2 = 1,
	eml22__VolumePerTimePerTimeUom__dm3_x002fs2 = 2,
	eml22__VolumePerTimePerTimeUom__ft3_x002fd2 = 3,
	eml22__VolumePerTimePerTimeUom__ft3_x002fh2 = 4,
	eml22__VolumePerTimePerTimeUom__ft3_x002fmin2 = 5,
	eml22__VolumePerTimePerTimeUom__ft3_x002fs2 = 6,
	eml22__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fh2 = 7,
	eml22__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fmin2 = 8,
	eml22__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fh2 = 9,
	eml22__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fmin2 = 10,
	eml22__VolumePerTimePerTimeUom__L_x002fs2 = 11,
	eml22__VolumePerTimePerTimeUom__m3_x002fd2 = 12,
	eml22__VolumePerTimePerTimeUom__m3_x002fs2 = 13
};
#endif

/* eml2_2ForGsoap.h:12036 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom (-1264)

/* eml22:VolumePerTimePerVolumeUom */
enum eml22__VolumePerTimePerVolumeUom {
	eml22__VolumePerTimePerVolumeUom__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 0,
	eml22__VolumePerTimePerVolumeUom__m3_x002f_x0028s_x002em3_x0029 = 1
};
#endif

/* eml2_2ForGsoap.h:12051 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom (-1265)

/* eml22:VolumePerTimeUom */
enum eml22__VolumePerTimeUom {
	eml22__VolumePerTimeUom__1_x002f30_x0020cm3_x002fmin = 0,
	eml22__VolumePerTimeUom__1000_x0020bbl_x002fd = 1,
	eml22__VolumePerTimeUom__1000_x0020ft3_x002fd = 2,
	eml22__VolumePerTimeUom__1000_x0020m3_x002fd = 3,
	eml22__VolumePerTimeUom__1000_x0020m3_x002fh = 4,
	eml22__VolumePerTimeUom__1E6_x0020bbl_x002fd = 5,
	eml22__VolumePerTimeUom__1E6_x0020ft3_x002fd = 6,
	eml22__VolumePerTimeUom__1E6_x0020m3_x002fd = 7,
	eml22__VolumePerTimeUom__bbl_x002fd = 8,
	eml22__VolumePerTimeUom__bbl_x002fh = 9,
	eml22__VolumePerTimeUom__bbl_x002fmin = 10,
	eml22__VolumePerTimeUom__cm3_x002fh = 11,
	eml22__VolumePerTimeUom__cm3_x002fmin = 12,
	eml22__VolumePerTimeUom__cm3_x002fs = 13,
	eml22__VolumePerTimeUom__dm3_x002fs = 14,
	eml22__VolumePerTimeUom__ft3_x002fd = 15,
	eml22__VolumePerTimeUom__ft3_x002fh = 16,
	eml22__VolumePerTimeUom__ft3_x002fmin = 17,
	eml22__VolumePerTimeUom__ft3_x002fs = 18,
	eml22__VolumePerTimeUom__gal_x005bUK_x005d_x002fd = 19,
	eml22__VolumePerTimeUom__gal_x005bUK_x005d_x002fh = 20,
	eml22__VolumePerTimeUom__gal_x005bUK_x005d_x002fmin = 21,
	eml22__VolumePerTimeUom__gal_x005bUS_x005d_x002fd = 22,
	eml22__VolumePerTimeUom__gal_x005bUS_x005d_x002fh = 23,
	eml22__VolumePerTimeUom__gal_x005bUS_x005d_x002fmin = 24,
	eml22__VolumePerTimeUom__L_x002fh = 25,
	eml22__VolumePerTimeUom__L_x002fmin = 26,
	eml22__VolumePerTimeUom__L_x002fs = 27,
	eml22__VolumePerTimeUom__m3_x002fd = 28,
	eml22__VolumePerTimeUom__m3_x002fh = 29,
	eml22__VolumePerTimeUom__m3_x002fmin = 30,
	eml22__VolumePerTimeUom__m3_x002fs = 31
};
#endif

/* eml2_2ForGsoap.h:12186 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom (-1266)

/* eml22:VolumePerVolumeUom */
enum eml22__VolumePerVolumeUom {
	eml22__VolumePerVolumeUom___x0025 = 0,
	eml22__VolumePerVolumeUom___x0025_x005bvol_x005d = 1,
	eml22__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fft3 = 2,
	eml22__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fm3 = 3,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 4,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 5,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 6,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 7,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 8,
	eml22__VolumePerVolumeUom__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 9,
	eml22__VolumePerVolumeUom__0_x002e01_x0020bbl_x002fbbl = 10,
	eml22__VolumePerVolumeUom__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 11,
	eml22__VolumePerVolumeUom__0_x002e1_x0020L_x002fbbl = 12,
	eml22__VolumePerVolumeUom__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 13,
	eml22__VolumePerVolumeUom__1000_x0020ft3_x002fbbl = 14,
	eml22__VolumePerVolumeUom__1000_x0020m3_x002fm3 = 15,
	eml22__VolumePerVolumeUom__1E_6_x0020acre_x002eft_x002fbbl = 16,
	eml22__VolumePerVolumeUom__1E_6_x0020bbl_x002fft3 = 17,
	eml22__VolumePerVolumeUom__1E_6_x0020bbl_x002fm3 = 18,
	eml22__VolumePerVolumeUom__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 19,
	eml22__VolumePerVolumeUom__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 20,
	eml22__VolumePerVolumeUom__1E6_x0020ft3_x002fbbl = 21,
	eml22__VolumePerVolumeUom__bbl_x002f_x0028acre_x002eft_x0029 = 22,
	eml22__VolumePerVolumeUom__bbl_x002fbbl = 23,
	eml22__VolumePerVolumeUom__bbl_x002fft3 = 24,
	eml22__VolumePerVolumeUom__bbl_x002fm3 = 25,
	eml22__VolumePerVolumeUom__cEuc = 26,
	eml22__VolumePerVolumeUom__cm3_x002fcm3 = 27,
	eml22__VolumePerVolumeUom__cm3_x002fL = 28,
	eml22__VolumePerVolumeUom__cm3_x002fm3 = 29,
	eml22__VolumePerVolumeUom__dm3_x002fm3 = 30,
	eml22__VolumePerVolumeUom__Euc = 31,
	eml22__VolumePerVolumeUom__ft3_x002fbbl = 32,
	eml22__VolumePerVolumeUom__ft3_x002fft3 = 33,
	eml22__VolumePerVolumeUom__gal_x005bUK_x005d_x002fft3 = 34,
	eml22__VolumePerVolumeUom__gal_x005bUS_x005d_x002fbbl = 35,
	eml22__VolumePerVolumeUom__gal_x005bUS_x005d_x002fft3 = 36,
	eml22__VolumePerVolumeUom__L_x002fm3 = 37,
	eml22__VolumePerVolumeUom__m3_x002f_x0028ha_x002em_x0029 = 38,
	eml22__VolumePerVolumeUom__m3_x002fbbl = 39,
	eml22__VolumePerVolumeUom__m3_x002fm3 = 40,
	eml22__VolumePerVolumeUom__mL_x002fgal_x005bUK_x005d = 41,
	eml22__VolumePerVolumeUom__mL_x002fgal_x005bUS_x005d = 42,
	eml22__VolumePerVolumeUom__mL_x002fmL = 43,
	eml22__VolumePerVolumeUom__ppk = 44,
	eml22__VolumePerVolumeUom__ppm = 45,
	eml22__VolumePerVolumeUom__ppm_x005bvol_x005d = 46
};
#endif

/* eml2_2ForGsoap.h:12381 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom (-1267)

/* eml22:VolumetricHeatTransferCoefficientUom */
enum eml22__VolumetricHeatTransferCoefficientUom {
	eml22__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edeltaF_x0029 = 0,
	eml22__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edeltaF_x0029 = 1,
	eml22__VolumetricHeatTransferCoefficientUom__kW_x002f_x0028m3_x002edeltaK_x0029 = 2,
	eml22__VolumetricHeatTransferCoefficientUom__W_x002f_x0028m3_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:12404 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom (-1268)

/* eml22:VolumetricThermalExpansionUom */
enum eml22__VolumetricThermalExpansionUom {
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaC = 0,
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaF = 1,
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaK = 2,
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaR = 3,
	eml22__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaC_x0029 = 4,
	eml22__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaF_x0029 = 5,
	eml22__VolumetricThermalExpansionUom__m3_x002f_x0028m3_x002edeltaK_x0029 = 6,
	eml22__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaC = 7,
	eml22__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaF = 8
};
#endif

/* eml2_2ForGsoap.h:12447 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom (-1269)

/* eml22:VolumeUom */
enum eml22__VolumeUom {
	eml22__VolumeUom__L = 'L',
	eml22__VolumeUom__1000_x0020bbl = 'M',
	eml22__VolumeUom__1000_x0020ft3 = 'N',
	eml22__VolumeUom__1000_x0020gal_x005bUK_x005d = 'O',
	eml22__VolumeUom__1000_x0020gal_x005bUS_x005d = 'P',
	eml22__VolumeUom__1000_x0020m3 = 'Q',
	eml22__VolumeUom__1E_6_x0020gal_x005bUS_x005d = 'R',
	eml22__VolumeUom__1E12_x0020ft3 = 'S',
	eml22__VolumeUom__1E6_x0020bbl = 'T',
	eml22__VolumeUom__1E6_x0020ft3 = 'U',
	eml22__VolumeUom__1E6_x0020m3 = 'V',
	eml22__VolumeUom__1E9_x0020bbl = 'W',
	eml22__VolumeUom__1E9_x0020ft3 = 'X',
	eml22__VolumeUom__acre_x002eft = 'Y',
	eml22__VolumeUom__bbl = 'Z',
	eml22__VolumeUom__cm3 = 91,
	eml22__VolumeUom__dm3 = 92,
	eml22__VolumeUom__floz_x005bUK_x005d = 93,
	eml22__VolumeUom__floz_x005bUS_x005d = 94,
	eml22__VolumeUom__ft3 = 95,
	eml22__VolumeUom__gal_x005bUK_x005d = 96,
	eml22__VolumeUom__gal_x005bUS_x005d = 'a',
	eml22__VolumeUom__ha_x002em = 'b',
	eml22__VolumeUom__hL = 'c',
	eml22__VolumeUom__in3 = 'd',
	eml22__VolumeUom__km3 = 'e',
	eml22__VolumeUom__m3 = 'f',
	eml22__VolumeUom__mi3 = 'g',
	eml22__VolumeUom__mL = 'h',
	eml22__VolumeUom__mm3 = 'i',
	eml22__VolumeUom__pt_x005bUK_x005d = 'j',
	eml22__VolumeUom__pt_x005bUS_x005d = 'k',
	eml22__VolumeUom__qt_x005bUK_x005d = 'l',
	eml22__VolumeUom__qt_x005bUS_x005d = 'm',
	eml22__VolumeUom__um2_x002em = 'n',
	eml22__VolumeUom__yd3 = 'o'
};
#endif

/* eml2_2ForGsoap.h:12598 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom (-1270)

/* eml22:LegacyMassPerVolumeUom */
enum eml22__LegacyMassPerVolumeUom {
	eml22__LegacyMassPerVolumeUom__kg_x002fscm = 0,
	eml22__LegacyMassPerVolumeUom__lbm_x002f1000scf = 1,
	eml22__LegacyMassPerVolumeUom__lbm_x002f1E6scf = 2
};
#endif

/* eml2_2ForGsoap.h:12608 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom (-1271)

/* eml22:LegacyPressurePerVolumeUom */
enum eml22__LegacyPressurePerVolumeUom {
	eml22__LegacyPressurePerVolumeUom__Pa_x002fscm = 0,
	eml22__LegacyPressurePerVolumeUom__psi_x002f1000scf = 1,
	eml22__LegacyPressurePerVolumeUom__psi_x002f1E6scf = 2
};
#endif

/* eml2_2ForGsoap.h:12618 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom (-1272)

/* eml22:LegacyPressureUom */
enum eml22__LegacyPressureUom {
	eml22__LegacyPressureUom__psia = 0,
	eml22__LegacyPressureUom__psig = 1
};
#endif

/* eml2_2ForGsoap.h:12627 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom (-1273)

/* eml22:LegacyVolumePerAreaUom */
enum eml22__LegacyVolumePerAreaUom {
	eml22__LegacyVolumePerAreaUom__1E6stb_x002facre = 0,
	eml22__LegacyVolumePerAreaUom__scf_x002fft2 = 1,
	eml22__LegacyVolumePerAreaUom__scm_x002fm2 = 2,
	eml22__LegacyVolumePerAreaUom__stb_x002facre = 3
};
#endif

/* eml2_2ForGsoap.h:12638 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom (-1274)

/* eml22:LegacyVolumePerTimeUom */
enum eml22__LegacyVolumePerTimeUom {
	eml22__LegacyVolumePerTimeUom__1000scf_x002fd = 0,
	eml22__LegacyVolumePerTimeUom__1000scf_x002fmo = 1,
	eml22__LegacyVolumePerTimeUom__1000scm_x002fd = 2,
	eml22__LegacyVolumePerTimeUom__1000scm_x002fmo = 3,
	eml22__LegacyVolumePerTimeUom__1000stb_x002fd = 4,
	eml22__LegacyVolumePerTimeUom__1000stb_x002fmo = 5,
	eml22__LegacyVolumePerTimeUom__1E6scf_x002fd = 6,
	eml22__LegacyVolumePerTimeUom__1E6scf_x002fmo = 7,
	eml22__LegacyVolumePerTimeUom__1E6scm_x002fd = 8,
	eml22__LegacyVolumePerTimeUom__1E6scm_x002fmo = 9,
	eml22__LegacyVolumePerTimeUom__1E6stb_x002fd = 10,
	eml22__LegacyVolumePerTimeUom__1E6stb_x002fmo = 11,
	eml22__LegacyVolumePerTimeUom__scf_x002fd = 12,
	eml22__LegacyVolumePerTimeUom__scm_x002fd = 13,
	eml22__LegacyVolumePerTimeUom__scm_x002fh = 14,
	eml22__LegacyVolumePerTimeUom__scm_x002fmo = 15,
	eml22__LegacyVolumePerTimeUom__scm_x002fs = 16,
	eml22__LegacyVolumePerTimeUom__stb_x002fd = 17,
	eml22__LegacyVolumePerTimeUom__stb_x002fmo = 18
};
#endif

/* eml2_2ForGsoap.h:12664 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom (-1275)

/* eml22:LegacyVolumePerVolumeUom */
enum eml22__LegacyVolumePerVolumeUom {
	eml22__LegacyVolumePerVolumeUom__1000scf_x002fstb = 0,
	eml22__LegacyVolumePerVolumeUom__1E6scf_x002fstb = 1,
	eml22__LegacyVolumePerVolumeUom__1E6stb_x002facre_x002eft = 2,
	eml22__LegacyVolumePerVolumeUom__acre_x002eft_x002f1E6stb = 3,
	eml22__LegacyVolumePerVolumeUom__bbl_x002f1000scf = 4,
	eml22__LegacyVolumePerVolumeUom__bbl_x002f1E6scf = 5,
	eml22__LegacyVolumePerVolumeUom__bbl_x002fscf = 6,
	eml22__LegacyVolumePerVolumeUom__bbl_x002fstb = 7,
	eml22__LegacyVolumePerVolumeUom__ft3_x002fscf = 8,
	eml22__LegacyVolumePerVolumeUom__ft3_x002fstb = 9,
	eml22__LegacyVolumePerVolumeUom__galUS_x002f1000scf = 10,
	eml22__LegacyVolumePerVolumeUom__m3_x002fscm = 11,
	eml22__LegacyVolumePerVolumeUom__ml_x002fscm = 12,
	eml22__LegacyVolumePerVolumeUom__scf_x002fbbl = 13,
	eml22__LegacyVolumePerVolumeUom__scf_x002fft3 = 14,
	eml22__LegacyVolumePerVolumeUom__scf_x002fscf = 15,
	eml22__LegacyVolumePerVolumeUom__scf_x002fstb = 16,
	eml22__LegacyVolumePerVolumeUom__scm_x002fm3 = 17,
	eml22__LegacyVolumePerVolumeUom__scm_x002fscm = 18,
	eml22__LegacyVolumePerVolumeUom__scm_x002fstb = 19,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1000scf = 20,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1000scm = 21,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1E6scf = 22,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1E6scm = 23,
	eml22__LegacyVolumePerVolumeUom__stb_x002fbbl = 24,
	eml22__LegacyVolumePerVolumeUom__stb_x002fscm = 25,
	eml22__LegacyVolumePerVolumeUom__stb_x002fstb = 26
};
#endif

/* eml2_2ForGsoap.h:12698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom (-1276)

/* eml22:LegacyVolumeUom */
enum eml22__LegacyVolumeUom {
	eml22__LegacyVolumeUom__1000scm = 0,
	eml22__LegacyVolumeUom__1000stb = 1,
	eml22__LegacyVolumeUom__1E6scf = 2,
	eml22__LegacyVolumeUom__1E6scm = 3,
	eml22__LegacyVolumeUom__1E6stb = 4,
	eml22__LegacyVolumeUom__1E9scf = 5,
	eml22__LegacyVolumeUom__kscf = 6,
	eml22__LegacyVolumeUom__scf = 7,
	eml22__LegacyVolumeUom__scm = 8,
	eml22__LegacyVolumeUom__stb = 9
};
#endif

/* eml2_2ForGsoap.h:12790 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreShape
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreShape (-1280)

/* witsml2:WellboreShape */
enum witsml2__WellboreShape {
	witsml2__WellboreShape__build_x0020and_x0020hold = 0,
	witsml2__WellboreShape__deviated = 1,
	witsml2__WellboreShape__double_x0020kickoff = 2,
	witsml2__WellboreShape__horizontal = 3,
	witsml2__WellboreShape__S_shaped = 4,
	witsml2__WellboreShape__vertical = 5
};
#endif

/* eml2_2ForGsoap.h:12824 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreType (-1281)

/* witsml2:WellboreType */
enum witsml2__WellboreType {
	witsml2__WellboreType__bypass = 0,
	witsml2__WellboreType__initial = 1,
	witsml2__WellboreType__redrill = 2,
	witsml2__WellboreType__reentry = 3,
	witsml2__WellboreType__respud = 4,
	witsml2__WellboreType__sidetrack = 5
};
#endif

/* eml2_2ForGsoap.h:12858 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ElevCodeEnum
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ElevCodeEnum (-1282)

/* witsml2:ElevCodeEnum */
enum witsml2__ElevCodeEnum {
	witsml2__ElevCodeEnum__CF = 0,
	witsml2__ElevCodeEnum__CV = 1,
	witsml2__ElevCodeEnum__DF = 2,
	witsml2__ElevCodeEnum__GL = 3,
	witsml2__ElevCodeEnum__KB = 4,
	witsml2__ElevCodeEnum__RB = 5,
	witsml2__ElevCodeEnum__RT = 6,
	witsml2__ElevCodeEnum__SF = 7,
	witsml2__ElevCodeEnum__LAT = 8,
	witsml2__ElevCodeEnum__SL = 9,
	witsml2__ElevCodeEnum__MHHW = 10,
	witsml2__ElevCodeEnum__MHW = 11,
	witsml2__ElevCodeEnum__MLLW = 12,
	witsml2__ElevCodeEnum__MLW = 13,
	witsml2__ElevCodeEnum__MTL = 14,
	witsml2__ElevCodeEnum__KO = 15,
	witsml2__ElevCodeEnum__unknown = 16
};
#endif

/* eml2_2ForGsoap.h:12936 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellDirection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellDirection (-1283)

/* witsml2:WellDirection */
enum witsml2__WellDirection {
	witsml2__WellDirection__huff_n_puff = 0,
	witsml2__WellDirection__injector = 1,
	witsml2__WellDirection__producer = 2,
	witsml2__WellDirection__uncertain = 3
};
#endif

/* eml2_2ForGsoap.h:12962 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellFluid (-1284)

/* witsml2:WellFluid */
enum witsml2__WellFluid {
	witsml2__WellFluid__air = 0,
	witsml2__WellFluid__condensate = 1,
	witsml2__WellFluid__dry = 2,
	witsml2__WellFluid__gas = 3,
	witsml2__WellFluid__gas_water = 4,
	witsml2__WellFluid__non_x0020HC_x0020gas = 5,
	witsml2__WellFluid__non_x0020HC_x0020gas_x0020_x002d__x0020CO2 = 6,
	witsml2__WellFluid__oil = 7,
	witsml2__WellFluid__oil_gas = 8,
	witsml2__WellFluid__oil_water = 9,
	witsml2__WellFluid__steam = 10,
	witsml2__WellFluid__water = 11,
	witsml2__WellFluid__water_x0020_x002d__x0020brine = 12,
	witsml2__WellFluid__water_x0020_x002d__x0020fresh_x0020water = 13
};
#endif

/* eml2_2ForGsoap.h:13028 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellPurpose
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellPurpose (-1285)

/* witsml2:WellPurpose */
enum witsml2__WellPurpose {
	witsml2__WellPurpose__appraisal = 0,
	witsml2__WellPurpose__appraisal_x0020_x002d__x0020confirmation_x0020appraisal = 1,
	witsml2__WellPurpose__appraisal_x0020_x002d__x0020exploratory_x0020appraisal = 2,
	witsml2__WellPurpose__exploration = 3,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020deeper_pool_x0020wildcat = 4,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020new_field_x0020wildcat = 5,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020new_pool_x0020wildcat = 6,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020outpost_x0020wildcat = 7,
	witsml2__WellPurpose__exploration_x0020_x002d__x0020shallower_pool_x0020wildcat = 8,
	witsml2__WellPurpose__development = 9,
	witsml2__WellPurpose__development_x0020_x002d__x0020infill_x0020development = 10,
	witsml2__WellPurpose__development_x0020_x002d__x0020injector = 11,
	witsml2__WellPurpose__development_x0020_x002d__x0020producer = 12,
	witsml2__WellPurpose__fluid_x0020storage = 13,
	witsml2__WellPurpose__fluid_x0020storage_x0020_x002d__x0020gas_x0020storage = 14,
	witsml2__WellPurpose__general_x0020srvc = 15,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020borehole_x0020re_acquisition = 16,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020observation = 17,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020relief = 18,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020research = 19,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020drill_x0020test = 20,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020research_x0020_x002d__x0020strat_x0020test = 21,
	witsml2__WellPurpose__general_x0020srvc_x0020_x002d__x0020waste_x0020disposal = 22,
	witsml2__WellPurpose__mineral = 23
};
#endif

/* eml2_2ForGsoap.h:13134 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BhaStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BhaStatus (-1286)

/* witsml2:BhaStatus */
enum witsml2__BhaStatus {
	witsml2__BhaStatus__final_ = 0,
	witsml2__BhaStatus__progress = 1,
	witsml2__BhaStatus__plan = 2
};
#endif

/* eml2_2ForGsoap.h:13147 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudSubClass
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudSubClass (-1287)

/* witsml2:MudSubClass */
enum witsml2__MudSubClass {
	witsml2__MudSubClass__aerated_x0020mud = 0,
	witsml2__MudSubClass__air = 1,
	witsml2__MudSubClass__brackish_x0020water = 2,
	witsml2__MudSubClass__brine = 3,
	witsml2__MudSubClass__caesium_x0020formate = 4,
	witsml2__MudSubClass__diesel_x0020oil_based = 5,
	witsml2__MudSubClass__ester_x0020synthetic_based = 6,
	witsml2__MudSubClass__freshwater = 7,
	witsml2__MudSubClass__glycol_x0020mud = 8,
	witsml2__MudSubClass__gyp_x0020mud = 9,
	witsml2__MudSubClass__internal_olefin_x0020synthetic_based = 10,
	witsml2__MudSubClass__lightly_x0020treated_x0020non_dispersed = 11,
	witsml2__MudSubClass__lignite_x002flignosulfonate_x0020mud = 12,
	witsml2__MudSubClass__lime_x0020mud = 13,
	witsml2__MudSubClass__linear_x0020paraffin_x0020synthetic_based = 14,
	witsml2__MudSubClass__linear_alpha_olefin_x0020synthetic_based = 15,
	witsml2__MudSubClass__low_x0020solids = 16,
	witsml2__MudSubClass__low_x0020toxicity_x0020mineral_x0020oil_based = 17,
	witsml2__MudSubClass__mineral_x0020oil_based = 18,
	witsml2__MudSubClass__mist = 19,
	witsml2__MudSubClass__mixed_metal_x0020oxide_x0020mud = 20,
	witsml2__MudSubClass__native_x002fnatural_x0020mud = 21,
	witsml2__MudSubClass__natural_x0020gas = 22,
	witsml2__MudSubClass__nitrogen_aerated_x0020mud = 23,
	witsml2__MudSubClass__non_aqueous_x0020_x0028invert_x0020emulsion_x0029_x0020drilling_x0020fluids = 24,
	witsml2__MudSubClass__non_dispersed = 25,
	witsml2__MudSubClass__pneumatic_x0020_x0028gaseous_x0029_x0020drilling_x0020fluids = 26,
	witsml2__MudSubClass__polymer_x0020mud = 27,
	witsml2__MudSubClass__potassium_x0020formate = 28,
	witsml2__MudSubClass__potassium_treated_x0020mud = 29,
	witsml2__MudSubClass__salt_x0020water_x0020mud = 30,
	witsml2__MudSubClass__saturated_x0020salt_x0020mud = 31,
	witsml2__MudSubClass__sea_x0020water = 32,
	witsml2__MudSubClass__seawater_x0020mud = 33,
	witsml2__MudSubClass__silicate_x0020mud = 34,
	witsml2__MudSubClass__sodium_x0020formate = 35,
	witsml2__MudSubClass__spud_x0020mud = 36,
	witsml2__MudSubClass__stable_x0020foam = 37,
	witsml2__MudSubClass__stiff_x0020foam = 38,
	witsml2__MudSubClass__water_based_x0020drilling_x0020fluids = 39
};
#endif

/* eml2_2ForGsoap.h:13197 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudClass
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudClass (-1288)

/* witsml2:MudClass */
enum witsml2__MudClass {
	witsml2__MudClass__oil_based = 0,
	witsml2__MudClass__water_based = 1,
	witsml2__MudClass__other = 2,
	witsml2__MudClass__pneumatic = 3
};
#endif

/* eml2_2ForGsoap.h:13217 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityClassType (-1289)

/* witsml2:DrillActivityClassType */
enum witsml2__DrillActivityClassType {
	witsml2__DrillActivityClassType__planned = 0,
	witsml2__DrillActivityClassType__unplanned = 1,
	witsml2__DrillActivityClassType__downtime = 2
};
#endif

/* eml2_2ForGsoap.h:13230 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityCode (-1290)

/* witsml2:DrillActivityCode */
enum witsml2__DrillActivityCode {
	witsml2__DrillActivityCode__abandonment = 0,
	witsml2__DrillActivityCode__abandonment_x0020_x002d__x0020log_x0020plugs = 1,
	witsml2__DrillActivityCode__abandonment_x0020_x002d__x0020run_x0020plugs = 2,
	witsml2__DrillActivityCode__abandonment_x0020_x002d__x0020wait_x0020on_x0020cement = 3,
	witsml2__DrillActivityCode__casing = 4,
	witsml2__DrillActivityCode__cement = 5,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020circulate = 6,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020other = 7,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020rig_x0020up = 8,
	witsml2__DrillActivityCode__cement_x0020_x002d__x0020wait_x0020on_x0020cement = 9,
	witsml2__DrillActivityCode__circulate = 10,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020boulder_x0020or_x0020gravel = 11,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020casing = 12,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020cementing = 13,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020circulate_x0020samples = 14,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020coring = 15,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020drilling = 16,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020fishing = 17,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020gumbo_x0020attack = 18,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020logging = 19,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020lost_x0020circulation = 20,
	witsml2__DrillActivityCode__circulate_x0020_x002d__x0020well_x0020control = 21,
	witsml2__DrillActivityCode__completion_x0020operations = 22,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020gravel_x0020packing = 23,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020logging = 24,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020rig_x0020up = 25,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020running_x0020liner = 26,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020tear_x0020down = 27,
	witsml2__DrillActivityCode__completion_x0020operations_x0020_x002d__x0020testing = 28,
	witsml2__DrillActivityCode__cond_x0020mud = 29,
	witsml2__DrillActivityCode__coring = 30,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020conventional = 31,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020flow_x0020check = 32,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020laydown_x0020barrel = 33,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020oriented = 34,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020plastic_x0020sleeve = 35,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020rig_x0020up_x0020core_x0020barrel = 36,
	witsml2__DrillActivityCode__coring_x0020_x002d__x0020sponge = 37,
	witsml2__DrillActivityCode__cut = 38,
	witsml2__DrillActivityCode__deviation_x0020survey = 39,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020dir_x0020multi_shot = 40,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020dir_x0020single_x0020shot = 41,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020drift = 42,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020gyro = 43,
	witsml2__DrillActivityCode__deviation_x0020survey_x0020_x002d__x0020MWD = 44,
	witsml2__DrillActivityCode__dir_x0020work = 45,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020horizontal_x0020drilling = 46,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020motor_x0020drilling = 47,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020orient = 48,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020rotary_x0020drilling = 49,
	witsml2__DrillActivityCode__dir_x0020work_x0020_x002d__x0020slant_x0020drilling = 50,
	witsml2__DrillActivityCode__drilling = 51,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020casing = 52,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020connection = 53,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020drill_x0020cement = 54,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020flow_x0020check = 55,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020hole_x0020opening = 56,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020new_x0020hole = 57,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020sidetracking = 58,
	witsml2__DrillActivityCode__drilling_x0020_x002d__x0020under_reaming = 59,
	witsml2__DrillActivityCode__DST = 60,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020cased_x0020hole = 61,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020lay_x0020down_x0020tools = 62,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020open_x0020hole = 63,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020open_x0020hole_x0020closed_x0020chamber = 64,
	witsml2__DrillActivityCode__DST_x0020_x002d__x0020rig_x0020up_x0020tools = 'A',
	witsml2__DrillActivityCode__fishing = 'B',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020BHA = 'C',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020casing = 'D',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020cones = 'E',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020other = 'F',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020stuck_x0020pipe = 'G',
	witsml2__DrillActivityCode__fishing_x0020_x002d__x0020wireline_x0020tools = 'H',
	witsml2__DrillActivityCode__float_x0020equip = 'I',
	witsml2__DrillActivityCode__HSE = 'J',
	witsml2__DrillActivityCode__HSE_x0020_x002d__x0020hold_x0020drill = 'K',
	witsml2__DrillActivityCode__HSE_x0020_x002d__x0020incident = 'L',
	witsml2__DrillActivityCode__HSE_x0020_x002d__x0020safety_x0020meeting = 'M',
	witsml2__DrillActivityCode__mill = 'N',
	witsml2__DrillActivityCode__mill_x0020_x002d__x0020cut_x0020casing_x0020or_x0020tubing = 'O',
	witsml2__DrillActivityCode__mill_x0020_x002d__x0020milling = 'P',
	witsml2__DrillActivityCode__miscellaneous = 'Q',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP = 'R',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020diverter = 'S',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020manifold = 'T',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020other = 'U',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020PVT_x0020system = 'V',
	witsml2__DrillActivityCode__nipple_x0020up_x0020BOP_x0020_x002d__x0020stack = 'W',
	witsml2__DrillActivityCode__plug_x0020back = 'X',
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020abandonment = 'Y',
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020kick_x0020off_x0020plug = 'Z',
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020lost_x0020circulation = 91,
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020wait_x0020on_x0020cement = 92,
	witsml2__DrillActivityCode__plug_x0020back_x0020_x002d__x0020well_x0020control = 93,
	witsml2__DrillActivityCode__pressure_x0020test = 94,
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020BOP_x0020manifold = 95,
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020BOP_x0020stack = 96,
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020form_x0020integrity_x0020test = 'a',
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020form_x0020leak_x0020off_x0020test = 'b',
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020packer = 'c',
	witsml2__DrillActivityCode__pressure_x0020test_x0020_x002d__x0020PIT = 'd',
	witsml2__DrillActivityCode__reaming = 'e',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020back_x0020reaming = 'f',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020coring = 'g',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020drill = 'h',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020logging = 'i',
	witsml2__DrillActivityCode__reaming_x0020_x002d__x0020under_reaming = 'j',
	witsml2__DrillActivityCode__rig_x0020move = 'k',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020anchor_x0020handling = 'l',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020inter_pad_x0020move = 'm',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020inter_well_x0020move = 'n',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020jack_x0020up_x0020or_x0020down = 'o',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020other = 'p',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020position_x0020rig = 'q',
	witsml2__DrillActivityCode__rig_x0020move_x0020_x002d__x0020skid_x0020rig = 'r',
	witsml2__DrillActivityCode__rig_x0020release = 's',
	witsml2__DrillActivityCode__rig_x0020release_x0020_x002d__x0020cut_x0020casing = 't',
	witsml2__DrillActivityCode__rig_x0020release_x0020_x002d__x0020install_x0020capping_x0020assembly = 'u',
	witsml2__DrillActivityCode__rig_x0020release_x0020_x002d__x0020MOB_x0020or_x0020DE_MOB = 'v',
	witsml2__DrillActivityCode__rig_x0020repairs = 'w',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020drawworks = 'x',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020electrical = 'y',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020mud_x0020system = 'z',
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020other = 123,
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020rotary = 124,
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020subsea_x0020equipment = 125,
	witsml2__DrillActivityCode__rig_x0020repairs_x0020_x002d__x0020well_x0020control_x0020equipment = 126,
	witsml2__DrillActivityCode__rig_x0020service = 127,
	witsml2__DrillActivityCode__rig_x0020service_x0020_x002d__x0020lubricate_x0020rig = 128,
	witsml2__DrillActivityCode__rig_x0020service_x0020_x002d__x0020test_x0020equipment = 129,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down = 130,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020rig_x0020up = 131,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020site_x0020work = 132,
	witsml2__DrillActivityCode__rig_x0020up_x0020or_x0020tear_x0020down_x0020_x002d__x0020tear_x0020down = 133,
	witsml2__DrillActivityCode__run_x0020casing = 134,
	witsml2__DrillActivityCode__run_x0020liner = 135,
	witsml2__DrillActivityCode__run_x0020or_x0020pull_x0020riser = 136,
	witsml2__DrillActivityCode__run_x0020or_x0020pull_x0020riser_x0020_x002d__x0020other = 137,
	witsml2__DrillActivityCode__run_x0020or_x0020pull_x0020riser_x0020_x002d__x0020run_x0020or_x0020pull_x0020riser = 138,
	witsml2__DrillActivityCode__set = 139,
	witsml2__DrillActivityCode__slip_x0020drilling_x0020line = 140,
	witsml2__DrillActivityCode__squeeze_x0020cement = 141,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020casing_x0020repair = 142,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020casing_x0020shoe = 143,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020parted_x0020casing = 144,
	witsml2__DrillActivityCode__squeeze_x0020cement_x0020_x002d__x0020perforations_x0020DST = 145,
	witsml2__DrillActivityCode__stuck_x0020pipe = 146,
	witsml2__DrillActivityCode__surface_x0020string_x0020handling = 147,
	witsml2__DrillActivityCode__test_x0020completion = 148,
	witsml2__DrillActivityCode__testing_x0020general = 149,
	witsml2__DrillActivityCode__testing_x0020general_x0020_x002d__x0020equipment = 150,
	witsml2__DrillActivityCode__testing_x0020general_x0020_x002d__x0020flow = 151,
	witsml2__DrillActivityCode__tripping = 152,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020back_reaming = 153,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020flow_x0020check = 154,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020short_x0020trip_x0020in = 155,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020short_x0020trip_x0020out = 156,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020trip_x0020in_x0020_x0028from_x0020surface_x0029 = 157,
	witsml2__DrillActivityCode__tripping_x0020_x002d__x0020trip_x0020out_x0020_x0028to_x0020surface_x0029 = 158,
	witsml2__DrillActivityCode__wait = 159,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020daylight = 160,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020environmental_x0020or_x0020regulatory = 161,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020equipment = 162,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020holiday = 163,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020ice = 164,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020on_x0020orders = 165,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020operator = 166,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020other = 167,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020partners = 168,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020service_x0020company = 169,
	witsml2__DrillActivityCode__wait_x0020_x002d__x0020weather = 170,
	witsml2__DrillActivityCode__well_x0020control = 171,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020mix = 172,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020shut_x0020in = 173,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020strip = 174,
	witsml2__DrillActivityCode__well_x0020control_x0020_x002d__x0020well_x0020kill = 175,
	witsml2__DrillActivityCode__well_x0020srvc = 176,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020casing_x0020repair = 177,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020clean_x0020well_x0020to_x0020compl_x0020fluid = 178,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020coiled_x0020tubing_x0020work = 179,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020gravel_x0020pack = 180,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020install_x0020or_x0020test_x0020xmas_x0020tree = 181,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020kill_x0020well = 182,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020land = 183,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020perforate = 184,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020pull_x0020completion = 185,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020pull_x0020suspension_x0020plugs = 186,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020run_x0020completion = 187,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020run_x0020screens = 188,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020sand_x0020control = 189,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020stimulation = 190,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020subsea_x0020work = 191,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020surface_x0020line_x0020work = 192,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020suspend_x0020well_x0020or_x0020pull_x0020BOPs = 193,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020test_x0020well = 194,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020wash = 195,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020wireline_x0020work = 196,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020work_x0020tubulars = 197,
	witsml2__DrillActivityCode__well_x0020srvc_x0020_x002d__x0020workstring_x0020run = 198,
	witsml2__DrillActivityCode__wireline_x0020logs = 199,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020abandonment = 200,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020evaluation = 201,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020form_x0020tester = 202,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020other = 203,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020side_x0020wall_x0020cores = 204,
	witsml2__DrillActivityCode__wireline_x0020logs_x0020_x002d__x0020velocity = 205
};
#endif

/* eml2_2ForGsoap.h:13446 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeakType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeakType (-1291)

/* witsml2:GasPeakType */
enum witsml2__GasPeakType {
	witsml2__GasPeakType__circulating_x0020background_x0020gas = 0,
	witsml2__GasPeakType__connection_x0020gas = 1,
	witsml2__GasPeakType__drilling_x0020background_x0020gas = 2,
	witsml2__GasPeakType__drilling_x0020gas_x0020peak = 3,
	witsml2__GasPeakType__flow_x0020check_x0020gas = 4,
	witsml2__GasPeakType__no_x0020readings = 5,
	witsml2__GasPeakType__other = 6,
	witsml2__GasPeakType__shut_x0020down_x0020gas = 7,
	witsml2__GasPeakType__trip_x0020gas = 8
};
#endif

/* eml2_2ForGsoap.h:13465 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InnerBarrelType (-1292)

/* witsml2:InnerBarrelType */
enum witsml2__InnerBarrelType {
	witsml2__InnerBarrelType__undifferentiated = 0,
	witsml2__InnerBarrelType__aluminum = 1,
	witsml2__InnerBarrelType__gel = 2,
	witsml2__InnerBarrelType__fiberglass = 3
};
#endif

/* eml2_2ForGsoap.h:13491 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ItemState
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ItemState (-1293)

/* witsml2:ItemState */
enum witsml2__ItemState {
	witsml2__ItemState__actual = 0,
	witsml2__ItemState__model = 1,
	witsml2__ItemState__plan = 2
};
#endif

/* eml2_2ForGsoap.h:13513 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReportVersion (-1294)

/* witsml2:OpsReportVersion */
enum witsml2__OpsReportVersion {
	witsml2__OpsReportVersion__preliminary = 0,
	witsml2__OpsReportVersion__normal = 1,
	witsml2__OpsReportVersion__final_ = 2
};
#endif

/* eml2_2ForGsoap.h:13535 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PresTestType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PresTestType (-1295)

/* witsml2:PresTestType */
enum witsml2__PresTestType {
	witsml2__PresTestType__leak_x0020off_x0020test = 0,
	witsml2__PresTestType__formation_x0020integrity_x0020test = 1
};
#endif

/* eml2_2ForGsoap.h:13553 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ReadingKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ReadingKind (-1296)

/* witsml2:ReadingKind */
enum witsml2__ReadingKind {
	witsml2__ReadingKind__measured = 0,
	witsml2__ReadingKind__estimated = 1,
	witsml2__ReadingKind__unknown = 2
};
#endif

/* eml2_2ForGsoap.h:13575 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StateDetailActivity (-1297)

/* witsml2:StateDetailActivity */
enum witsml2__StateDetailActivity {
	witsml2__StateDetailActivity__injury = 0,
	witsml2__StateDetailActivity__operation_x0020failed = 1,
	witsml2__StateDetailActivity__kick = 2,
	witsml2__StateDetailActivity__circulation_x0020loss = 3,
	witsml2__StateDetailActivity__mud_x0020loss = 4,
	witsml2__StateDetailActivity__stuck_x0020equipment = 5,
	witsml2__StateDetailActivity__equipment_x0020failure = 6,
	witsml2__StateDetailActivity__equipment_x0020hang = 7,
	witsml2__StateDetailActivity__success = 8
};
#endif

/* eml2_2ForGsoap.h:13621 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellControlIncidentType (-1298)

/* witsml2:WellControlIncidentType */
enum witsml2__WellControlIncidentType {
	witsml2__WellControlIncidentType__shallow_x0020gas_x0020kick = 0,
	witsml2__WellControlIncidentType__water_x0020kick = 1,
	witsml2__WellControlIncidentType__oil_x0020kick = 2,
	witsml2__WellControlIncidentType__gas_x0020kick = 3
};
#endif

/* eml2_2ForGsoap.h:13647 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellKillingProcedureType (-1299)

/* witsml2:WellKillingProcedureType */
enum witsml2__WellKillingProcedureType {
	witsml2__WellKillingProcedureType__drillers_x0020method = 0,
	witsml2__WellKillingProcedureType__wait_x0020and_x0020weight = 1,
	witsml2__WellKillingProcedureType__bullheading = 2,
	witsml2__WellKillingProcedureType__lubricate_x0020and_x0020bleed = 3,
	witsml2__WellKillingProcedureType__forward_x0020circulation = 4,
	witsml2__WellKillingProcedureType__reverse_x0020circulation = 5
};
#endif

/* eml2_2ForGsoap.h:13683 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellTestType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellTestType (-1300)

/* witsml2:WellTestType */
enum witsml2__WellTestType {
	witsml2__WellTestType__drill_x0020stem_x0020test = 0,
	witsml2__WellTestType__production_x0020test = 1
};
#endif

/* eml2_2ForGsoap.h:13701 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BearingType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BearingType (-1301)

/* witsml2:BearingType */
enum witsml2__BearingType {
	witsml2__BearingType__oil_x0020seal = 0,
	witsml2__BearingType__mud_x0020lube = 1,
	witsml2__BearingType__other = 2
};
#endif

/* eml2_2ForGsoap.h:13714 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitDullCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitDullCode (-1302)

/* witsml2:BitDullCode */
enum witsml2__BitDullCode {
	witsml2__BitDullCode__BC = 0,
	witsml2__BitDullCode__BT = 1,
	witsml2__BitDullCode__BU = 2,
	witsml2__BitDullCode__CC = 3,
	witsml2__BitDullCode__CD = 4,
	witsml2__BitDullCode__CI = 5,
	witsml2__BitDullCode__CR = 6,
	witsml2__BitDullCode__CT = 7,
	witsml2__BitDullCode__ER = 8,
	witsml2__BitDullCode__FC = 9,
	witsml2__BitDullCode__HC = 10,
	witsml2__BitDullCode__JD = 11,
	witsml2__BitDullCode__LC = 12,
	witsml2__BitDullCode__LN = 13,
	witsml2__BitDullCode__LT = 14,
	witsml2__BitDullCode__NO = 15,
	witsml2__BitDullCode__OC = 16,
	witsml2__BitDullCode__PB = 17,
	witsml2__BitDullCode__PN = 18,
	witsml2__BitDullCode__RG = 19,
	witsml2__BitDullCode__RO = 20,
	witsml2__BitDullCode__SD = 21,
	witsml2__BitDullCode__SS = 22,
	witsml2__BitDullCode__TR = 23,
	witsml2__BitDullCode__WO = 24,
	witsml2__BitDullCode__WT = 25
};
#endif

/* eml2_2ForGsoap.h:13828 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitReasonPulled (-1303)

/* witsml2:BitReasonPulled */
enum witsml2__BitReasonPulled {
	witsml2__BitReasonPulled__BHA = 0,
	witsml2__BitReasonPulled__CM = 1,
	witsml2__BitReasonPulled__CP = 2,
	witsml2__BitReasonPulled__DMF = 3,
	witsml2__BitReasonPulled__DP = 4,
	witsml2__BitReasonPulled__DST = 5,
	witsml2__BitReasonPulled__DTF = 6,
	witsml2__BitReasonPulled__FM = 7,
	witsml2__BitReasonPulled__HP = 8,
	witsml2__BitReasonPulled__HR = 9,
	witsml2__BitReasonPulled__LOG = 10,
	witsml2__BitReasonPulled__PP = 11,
	witsml2__BitReasonPulled__PR = 12,
	witsml2__BitReasonPulled__RIG = 13,
	witsml2__BitReasonPulled__TD = 14,
	witsml2__BitReasonPulled__TQ = 15,
	witsml2__BitReasonPulled__TW = 16,
	witsml2__BitReasonPulled__WC = 17
};
#endif

/* eml2_2ForGsoap.h:13910 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitType (-1304)

/* witsml2:BitType */
enum witsml2__BitType {
	witsml2__BitType__diamond = 0,
	witsml2__BitType__diamond_x0020core = 1,
	witsml2__BitType__insert_x0020roller_x0020cone = 2,
	witsml2__BitType__PDC = 3,
	witsml2__BitType__PDC_x0020core = 4,
	witsml2__BitType__roller_x0020cone = 5
};
#endif

/* eml2_2ForGsoap.h:13944 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BladeShapeType (-1305)

/* witsml2:BladeShapeType */
enum witsml2__BladeShapeType {
	witsml2__BladeShapeType__dynamic = 0,
	witsml2__BladeShapeType__melon = 1,
	witsml2__BladeShapeType__spiral = 2,
	witsml2__BladeShapeType__straight = 3,
	witsml2__BladeShapeType__variable = 4
};
#endif

/* eml2_2ForGsoap.h:13959 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BladeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BladeType (-1306)

/* witsml2:BladeType */
enum witsml2__BladeType {
	witsml2__BladeType__clamp_on = 0,
	witsml2__BladeType__integral = 1,
	witsml2__BladeType__sleeve = 2,
	witsml2__BladeType__welded = 3
};
#endif

/* eml2_2ForGsoap.h:13973 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoxPinConfig (-1307)

/* witsml2:BoxPinConfig */
enum witsml2__BoxPinConfig {
	witsml2__BoxPinConfig__bottom_x0020box = 0,
	witsml2__BoxPinConfig__top_x0020box = 1,
	witsml2__BoxPinConfig__top_x0020pin = 2,
	witsml2__BoxPinConfig__bottom_x0020pin_x0020top_x0020box = 3,
	witsml2__BoxPinConfig__bottom_x0020pin = 4
};
#endif

/* eml2_2ForGsoap.h:13988 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionPosition (-1308)

/* witsml2:ConnectionPosition */
enum witsml2__ConnectionPosition {
	witsml2__ConnectionPosition__both = 0,
	witsml2__ConnectionPosition__bottom = 1,
	witsml2__ConnectionPosition__top = 2
};
#endif

/* eml2_2ForGsoap.h:14010 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DeflectionMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DeflectionMethod (-1309)

/* witsml2:DeflectionMethod */
enum witsml2__DeflectionMethod {
	witsml2__DeflectionMethod__hybrid = 0,
	witsml2__DeflectionMethod__point_x0020bit = 1,
	witsml2__DeflectionMethod__push_x0020bit = 2
};
#endif

/* eml2_2ForGsoap.h:14032 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpenerType (-1310)

/* witsml2:HoleOpenerType */
enum witsml2__HoleOpenerType {
	witsml2__HoleOpenerType__under_reamer = 0,
	witsml2__HoleOpenerType__fixed_x0020blade = 1
};
#endif

/* eml2_2ForGsoap.h:14044 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IadcBearingWearCode (-1311)

/* witsml2:IadcBearingWearCode */
enum witsml2__IadcBearingWearCode {
	witsml2__IadcBearingWearCode__0 = 0,
	witsml2__IadcBearingWearCode__1 = 1,
	witsml2__IadcBearingWearCode__2 = 2,
	witsml2__IadcBearingWearCode__3 = 3,
	witsml2__IadcBearingWearCode__4 = 4,
	witsml2__IadcBearingWearCode__5 = 5,
	witsml2__IadcBearingWearCode__6 = 6,
	witsml2__IadcBearingWearCode__7 = 7,
	witsml2__IadcBearingWearCode__8 = 8,
	witsml2__IadcBearingWearCode__E = 'E',
	witsml2__IadcBearingWearCode__F = 'F',
	witsml2__IadcBearingWearCode__N = 'N',
	witsml2__IadcBearingWearCode__X = 'X'
};
#endif

/* eml2_2ForGsoap.h:14067 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IadcIntegerCode (-1312)

/* witsml2:IadcIntegerCode */
enum witsml2__IadcIntegerCode {
	witsml2__IadcIntegerCode__0 = 0,
	witsml2__IadcIntegerCode__1 = 1,
	witsml2__IadcIntegerCode__2 = 2,
	witsml2__IadcIntegerCode__3 = 3,
	witsml2__IadcIntegerCode__4 = 4,
	witsml2__IadcIntegerCode__5 = 5,
	witsml2__IadcIntegerCode__6 = 6,
	witsml2__IadcIntegerCode__7 = 7,
	witsml2__IadcIntegerCode__8 = 8
};
#endif

/* eml2_2ForGsoap.h:14086 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__JarAction
#define SOAP_TYPE_gsoap_eml2_2_witsml2__JarAction (-1313)

/* witsml2:JarAction */
enum witsml2__JarAction {
	witsml2__JarAction__up = 0,
	witsml2__JarAction__down = 1,
	witsml2__JarAction__both = 2,
	witsml2__JarAction__vibrating = 3
};
#endif

/* eml2_2ForGsoap.h:14100 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__JarType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__JarType (-1314)

/* witsml2:JarType */
enum witsml2__JarType {
	witsml2__JarType__mechanical = 0,
	witsml2__JarType__hydraulic = 1,
	witsml2__JarType__hydro_x0020mechanical = 2
};
#endif

/* eml2_2ForGsoap.h:14113 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MaterialType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MaterialType (-1315)

/* witsml2:MaterialType */
enum witsml2__MaterialType {
	witsml2__MaterialType__aluminum = 0,
	witsml2__MaterialType__beryllium_x0020copper = 1,
	witsml2__MaterialType__chrome_x0020alloy = 2,
	witsml2__MaterialType__composite = 3,
	witsml2__MaterialType__other = 4,
	witsml2__MaterialType__non_magnetic_x0020steel = 5,
	witsml2__MaterialType__plastic = 6,
	witsml2__MaterialType__steel = 7,
	witsml2__MaterialType__steel_x0020alloy = 8,
	witsml2__MaterialType__titanium = 9
};
#endif

/* eml2_2ForGsoap.h:14133 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MeasurementType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MeasurementType (-1316)

/* witsml2:MeasurementType */
enum witsml2__MeasurementType {
	witsml2__MeasurementType__acceleration = 0,
	witsml2__MeasurementType__acoustic_x0020caliper = 1,
	witsml2__MeasurementType__acoustic_x0020casing_x0020collar_x0020locator = 2,
	witsml2__MeasurementType__acoustic_x0020impedance = 3,
	witsml2__MeasurementType__acoustic_x0020porosity = 4,
	witsml2__MeasurementType__acoustic_x0020velocity = 5,
	witsml2__MeasurementType__acoustic_x0020wave_x0020matrix_x0020travel_x0020time = 6,
	witsml2__MeasurementType__acoustic_x0020wave_x0020travel_x0020time = 7,
	witsml2__MeasurementType__amplitude = 8,
	witsml2__MeasurementType__amplitude_x0020of_x0020acoustic_x0020wave = 9,
	witsml2__MeasurementType__amplitude_x0020of_x0020E_M_x0020wave = 10,
	witsml2__MeasurementType__amplitude_x0020ratio = 11,
	witsml2__MeasurementType__area = 12,
	witsml2__MeasurementType__attenuation = 13,
	witsml2__MeasurementType__attenuation_x0020of_x0020acoustic_x0020wave = 14,
	witsml2__MeasurementType__attenuation_x0020of_x0020E_M_x0020wave = 15,
	witsml2__MeasurementType__auxiliary = 16,
	witsml2__MeasurementType__average_x0020porosity = 17,
	witsml2__MeasurementType__azimuth = 18,
	witsml2__MeasurementType__barite_x0020mud_x0020correction = 19,
	witsml2__MeasurementType__bed_x0020thickness_x0020correction = 20,
	witsml2__MeasurementType__bit_x0020size = 21,
	witsml2__MeasurementType__blocked = 22,
	witsml2__MeasurementType__borehole_x0020environment_x0020correction = 23,
	witsml2__MeasurementType__borehole_x0020fluid_x0020correction = 24,
	witsml2__MeasurementType__borehole_x0020size_x0020correction = 25,
	witsml2__MeasurementType__bromide_x0020mud_x0020correction = 26,
	witsml2__MeasurementType__bulk_x0020compressibility = 27,
	witsml2__MeasurementType__bulk_x0020density = 28,
	witsml2__MeasurementType__bulk_x0020volume = 29,
	witsml2__MeasurementType__bulk_x0020volume_x0020gas = 30,
	witsml2__MeasurementType__bulk_x0020volume_x0020hydrocarbon = 31,
	witsml2__MeasurementType__bulk_x0020volume_x0020oil = 32,
	witsml2__MeasurementType__bulk_x0020volume_x0020water = 33,
	witsml2__MeasurementType__C_x002fO_x0020ratio = 34,
	witsml2__MeasurementType__caliper = 35,
	witsml2__MeasurementType__cased_x0020hole_x0020correction = 36,
	witsml2__MeasurementType__casing_x0020collar_x0020locator = 37,
	witsml2__MeasurementType__casing_x0020correction = 38,
	witsml2__MeasurementType__casing_x0020diameter_x0020correction = 39,
	witsml2__MeasurementType__casing_x0020inspection = 40,
	witsml2__MeasurementType__casing_x0020thickness_x0020correction = 41,
	witsml2__MeasurementType__casing_x0020weight_x0020correction = 42,
	witsml2__MeasurementType__cement_x0020correction = 43,
	witsml2__MeasurementType__cement_x0020density_x0020correction = 44,
	witsml2__MeasurementType__cement_x0020evaluation = 45,
	witsml2__MeasurementType__cement_x0020thickness_x0020correction = 46,
	witsml2__MeasurementType__cement_x0020type_x0020correction = 47,
	witsml2__MeasurementType__CH_x0020density_x0020porosity = 48,
	witsml2__MeasurementType__CH_x0020dolomite_x0020density_x0020porosity = 49,
	witsml2__MeasurementType__CH_x0020dolomite_x0020neutron_x0020porosity = 50,
	witsml2__MeasurementType__CH_x0020limestone_x0020density_x0020porosity = 51,
	witsml2__MeasurementType__CH_x0020limestone_x0020neutron_x0020porosity = 52,
	witsml2__MeasurementType__CH_x0020neutron_x0020porosity = 53,
	witsml2__MeasurementType__CH_x0020sandstone_x0020density_x0020porosity = 54,
	witsml2__MeasurementType__CH_x0020sandstone_x0020neutron_x0020porosity = 55,
	witsml2__MeasurementType__compressional_x0020wave_x0020dolomite_x0020porosity = 56,
	witsml2__MeasurementType__compressional_x0020wave_x0020limestone_x0020porosity = 57,
	witsml2__MeasurementType__compressional_x0020wave_x0020matrix_x0020travel_x0020time = 58,
	witsml2__MeasurementType__compressional_x0020wave_x0020sandstone_x0020porosity = 59,
	witsml2__MeasurementType__compressional_x0020wave_x0020travel_x0020time = 60,
	witsml2__MeasurementType__conductivity = 61,
	witsml2__MeasurementType__conductivity_x0020from_x0020attenuation = 62,
	witsml2__MeasurementType__conductivity_x0020from_x0020phase_x0020shift = 63,
	witsml2__MeasurementType__connate_x0020water_x0020conductivity = 64,
	witsml2__MeasurementType__connate_x0020water_x0020resistivity = 'A',
	witsml2__MeasurementType__conventional_x0020core_x0020porosity = 'B',
	witsml2__MeasurementType__core_x0020matrix_x0020density = 'C',
	witsml2__MeasurementType__core_x0020permeability = 'D',
	witsml2__MeasurementType__core_x0020porosity = 'E',
	witsml2__MeasurementType__corrected = 'F',
	witsml2__MeasurementType__count_x0020rate = 'G',
	witsml2__MeasurementType__count_x0020rate_x0020ratio = 'H',
	witsml2__MeasurementType__cross_x0020plot_x0020porosity = 'I',
	witsml2__MeasurementType__decay_x0020time = 'J',
	witsml2__MeasurementType__deep_x0020conductivity = 'K',
	witsml2__MeasurementType__deep_x0020induction_x0020conductivity = 'L',
	witsml2__MeasurementType__deep_x0020induction_x0020resistivity = 'M',
	witsml2__MeasurementType__deep_x0020laterolog_x0020conductivity = 'N',
	witsml2__MeasurementType__deep_x0020laterolog_x0020resistivity = 'O',
	witsml2__MeasurementType__deep_x0020resistivity = 'P',
	witsml2__MeasurementType__density = 'Q',
	witsml2__MeasurementType__density_x0020porosity = 'R',
	witsml2__MeasurementType__depth = 'S',
	witsml2__MeasurementType__depth_x0020adjusted = 'T',
	witsml2__MeasurementType__depth_x0020derived_x0020from_x0020velocity = 'U',
	witsml2__MeasurementType__deviation = 'V',
	witsml2__MeasurementType__dielectric = 'W',
	witsml2__MeasurementType__diffusion_x0020correction = 'X',
	witsml2__MeasurementType__dip = 'Y',
	witsml2__MeasurementType__dipmeter = 'Z',
	witsml2__MeasurementType__dipmeter_x0020conductivity = 91,
	witsml2__MeasurementType__dipmeter_x0020resistivity = 92,
	witsml2__MeasurementType__dolomite_x0020acoustic_x0020porosity = 93,
	witsml2__MeasurementType__dolomite_x0020density_x0020porosity = 94,
	witsml2__MeasurementType__dolomite_x0020neutron_x0020porosity = 95,
	witsml2__MeasurementType__edited = 96,
	witsml2__MeasurementType__effective_x0020porosity = 'a',
	witsml2__MeasurementType__electric_x0020current = 'b',
	witsml2__MeasurementType__electric_x0020potential = 'c',
	witsml2__MeasurementType__electromagnetic_x0020wave_x0020matrix_x0020travel_x0020time = 'd',
	witsml2__MeasurementType__electromagnetic_x0020wave_x0020travel_x0020time = 'e',
	witsml2__MeasurementType__element = 'f',
	witsml2__MeasurementType__elemental_x0020ratio = 'g',
	witsml2__MeasurementType__enhanced = 'h',
	witsml2__MeasurementType__filtered = 'i',
	witsml2__MeasurementType__flowmeter = 'j',
	witsml2__MeasurementType__fluid_x0020density = 'k',
	witsml2__MeasurementType__fluid_x0020velocity = 'l',
	witsml2__MeasurementType__fluid_x0020viscosity = 'm',
	witsml2__MeasurementType__flushed_x0020zone_x0020conductivity = 'n',
	witsml2__MeasurementType__flushed_x0020zone_x0020resistivity = 'o',
	witsml2__MeasurementType__flushed_x0020zone_x0020saturation = 'p',
	witsml2__MeasurementType__force = 'q',
	witsml2__MeasurementType__formation_x0020density_x0020correction = 'r',
	witsml2__MeasurementType__formation_x0020properties_x0020correction = 's',
	witsml2__MeasurementType__formation_x0020salinity_x0020correction = 't',
	witsml2__MeasurementType__formation_x0020saturation_x0020correction = 'u',
	witsml2__MeasurementType__formation_x0020volume_x0020factor_x0020correction = 'v',
	witsml2__MeasurementType__formation_x0020water_x0020density_x0020correction = 'w',
	witsml2__MeasurementType__formation_x0020water_x0020saturation_x0020correction = 'x',
	witsml2__MeasurementType__free_x0020fluid_x0020index = 'y',
	witsml2__MeasurementType__friction_x0020effect_x0020correction = 'z',
	witsml2__MeasurementType__gamma_x0020ray = 123,
	witsml2__MeasurementType__gamma_x0020ray_x0020minus_x0020uranium = 124,
	witsml2__MeasurementType__gas_x0020saturation = 125,
	witsml2__MeasurementType__gradiomanometer = 126,
	witsml2__MeasurementType__high_x0020frequency_x0020conductivity = 127,
	witsml2__MeasurementType__high_x0020frequency_x0020electromagnetic = 128,
	witsml2__MeasurementType__high_x0020frequency_x0020electromagnetic_x0020porosity = 129,
	witsml2__MeasurementType__high_x0020frequency_x0020E_M_x0020phase_x0020shift = 130,
	witsml2__MeasurementType__high_x0020frequency_x0020resistivity = 131,
	witsml2__MeasurementType__hydrocarbon_x0020correction = 132,
	witsml2__MeasurementType__hydrocarbon_x0020density_x0020correction = 133,
	witsml2__MeasurementType__hydrocarbon_x0020gravity_x0020correction = 134,
	witsml2__MeasurementType__hydrocarbon_x0020saturation = 135,
	witsml2__MeasurementType__hydrocarbon_x0020viscosity_x0020correction = 136,
	witsml2__MeasurementType__image = 137,
	witsml2__MeasurementType__interpretation_x0020variable = 138,
	witsml2__MeasurementType__iron_x0020mud_x0020correction = 139,
	witsml2__MeasurementType__joined = 140,
	witsml2__MeasurementType__KCl_x0020mud_x0020correction = 141,
	witsml2__MeasurementType__length = 142,
	witsml2__MeasurementType__limestone_x0020acoustic_x0020porosity = 143,
	witsml2__MeasurementType__limestone_x0020density_x0020porosity = 144,
	witsml2__MeasurementType__limestone_x0020neutron_x0020porosity = 145,
	witsml2__MeasurementType__lithology_x0020correction = 146,
	witsml2__MeasurementType__log_x0020derived_x0020permeability = 147,
	witsml2__MeasurementType__log_x0020matrix_x0020density = 148,
	witsml2__MeasurementType__magnetic_x0020casing_x0020collar_x0020locator = 149,
	witsml2__MeasurementType__matrix_x0020density = 150,
	witsml2__MeasurementType__matrix_x0020travel_x0020time = 151,
	witsml2__MeasurementType__measured_x0020depth = 152,
	witsml2__MeasurementType__mechanical_x0020caliper = 153,
	witsml2__MeasurementType__mechanical_x0020casing_x0020collar_x0020locator = 154,
	witsml2__MeasurementType__medium_x0020conductivity = 155,
	witsml2__MeasurementType__medium_x0020induction_x0020conductivity = 156,
	witsml2__MeasurementType__medium_x0020induction_x0020resistivity = 157,
	witsml2__MeasurementType__medium_x0020laterolog_x0020conductivity = 158,
	witsml2__MeasurementType__medium_x0020laterolog_x0020resistivity = 159,
	witsml2__MeasurementType__medium_x0020resistivity = 160,
	witsml2__MeasurementType__micro_x0020conductivity = 161,
	witsml2__MeasurementType__micro_x0020inverse_x0020conductivity = 162,
	witsml2__MeasurementType__micro_x0020inverse_x0020resistivity = 163,
	witsml2__MeasurementType__micro_x0020laterolog_x0020conductivity = 164,
	witsml2__MeasurementType__micro_x0020laterolog_x0020resistivity = 165,
	witsml2__MeasurementType__micro_x0020normal_x0020conductivity = 166,
	witsml2__MeasurementType__micro_x0020normal_x0020resistivity = 167,
	witsml2__MeasurementType__micro_x0020resistivity = 168,
	witsml2__MeasurementType__micro_x0020spherically_x0020focused_x0020conductivity = 169,
	witsml2__MeasurementType__micro_x0020spherically_x0020focused_x0020resistivity = 170,
	witsml2__MeasurementType__mineral = 171,
	witsml2__MeasurementType__mud_x0020cake_x0020conductivity = 172,
	witsml2__MeasurementType__mud_x0020cake_x0020correction = 173,
	witsml2__MeasurementType__mud_x0020cake_x0020density_x0020correction = 174,
	witsml2__MeasurementType__mud_x0020cake_x0020resistivity = 175,
	witsml2__MeasurementType__mud_x0020cake_x0020resistivity_x0020correction = 176,
	witsml2__MeasurementType__mud_x0020cake_x0020thickness_x0020correction = 177,
	witsml2__MeasurementType__mud_x0020composition_x0020correction = 178,
	witsml2__MeasurementType__mud_x0020conductivity = 179,
	witsml2__MeasurementType__mud_x0020filtrate_x0020conductivity = 180,
	witsml2__MeasurementType__mud_x0020filtrate_x0020correction = 181,
	witsml2__MeasurementType__mud_x0020filtrate_x0020density_x0020correction = 182,
	witsml2__MeasurementType__mud_x0020filtrate_x0020resistivity = 183,
	witsml2__MeasurementType__mud_x0020filtrate_x0020resistivity_x0020correction = 184,
	witsml2__MeasurementType__mud_x0020filtrate_x0020salinity_x0020correction = 185,
	witsml2__MeasurementType__mud_x0020resistivity = 186,
	witsml2__MeasurementType__mud_x0020salinity_x0020correction = 187,
	witsml2__MeasurementType__mud_x0020viscosity_x0020correction = 188,
	witsml2__MeasurementType__mud_x0020weight_x0020correction = 189,
	witsml2__MeasurementType__neutron_x0020die_x0020away_x0020time = 190,
	witsml2__MeasurementType__neutron_x0020porosity = 191,
	witsml2__MeasurementType__nuclear_x0020caliper = 192,
	witsml2__MeasurementType__nuclear_x0020magnetic_x0020decay_x0020time = 193,
	witsml2__MeasurementType__nuclear_x0020magnetism_x0020log_x0020permeability = 194,
	witsml2__MeasurementType__nuclear_x0020magnetism_x0020porosity = 195,
	witsml2__MeasurementType__OH_x0020density_x0020porosity = 196,
	witsml2__MeasurementType__OH_x0020dolomite_x0020density_x0020porosity = 197,
	witsml2__MeasurementType__OH_x0020dolomite_x0020neutron_x0020porosity = 198,
	witsml2__MeasurementType__OH_x0020limestone_x0020density_x0020porosity = 199,
	witsml2__MeasurementType__OH_x0020limestone_x0020neutron_x0020porosity = 200,
	witsml2__MeasurementType__OH_x0020neutron_x0020porosity = 201,
	witsml2__MeasurementType__OH_x0020sandstone_x0020density_x0020porosity = 202,
	witsml2__MeasurementType__OH_x0020sandstone_x0020neutron_x0020porosity = 203,
	witsml2__MeasurementType__oil_x0020based_x0020mud_x0020correction = 204,
	witsml2__MeasurementType__oil_x0020saturation = 205,
	witsml2__MeasurementType__perforating = 206,
	witsml2__MeasurementType__permeability = 207,
	witsml2__MeasurementType__phase_x0020shift = 208,
	witsml2__MeasurementType__photoelectric_x0020absorption = 209,
	witsml2__MeasurementType__photoelectric_x0020absorption_x0020correction = 210,
	witsml2__MeasurementType__physical_x0020measurement_x0020correction = 211,
	witsml2__MeasurementType__plane_x0020angle = 212,
	witsml2__MeasurementType__porosity = 213,
	witsml2__MeasurementType__porosity_x0020correction = 214,
	witsml2__MeasurementType__potassium = 215,
	witsml2__MeasurementType__pressure = 216,
	witsml2__MeasurementType__pressure_x0020correction = 217,
	witsml2__MeasurementType__processed = 218,
	witsml2__MeasurementType__pulsed_x0020neutron_x0020porosity = 219,
	witsml2__MeasurementType__quality = 220,
	witsml2__MeasurementType__ratio = 221,
	witsml2__MeasurementType__raw = 222,
	witsml2__MeasurementType__relative_x0020bearing = 223,
	witsml2__MeasurementType__resistivity = 224,
	witsml2__MeasurementType__resistivity_x0020factor_x0020correction = 225,
	witsml2__MeasurementType__resistivity_x0020from_x0020attenuation = 226,
	witsml2__MeasurementType__resistivity_x0020from_x0020phase_x0020shift = 227,
	witsml2__MeasurementType__resistivity_x0020phase_x0020shift = 228,
	witsml2__MeasurementType__resistivity_x0020ratio = 229,
	witsml2__MeasurementType__salinity = 230,
	witsml2__MeasurementType__sampling = 231,
	witsml2__MeasurementType__sandstone_x0020acoustic_x0020porosity = 232,
	witsml2__MeasurementType__sandstone_x0020density_x0020porosity = 233,
	witsml2__MeasurementType__sandstone_x0020neutron_x0020porosity = 234,
	witsml2__MeasurementType__saturation = 235,
	witsml2__MeasurementType__shale_x0020volume = 236,
	witsml2__MeasurementType__shallow_x0020conductivity = 237,
	witsml2__MeasurementType__shallow_x0020induction_x0020conductivity = 238,
	witsml2__MeasurementType__shallow_x0020induction_x0020resistivity = 239,
	witsml2__MeasurementType__shallow_x0020laterolog_x0020conductivity = 240,
	witsml2__MeasurementType__shallow_x0020laterolog_x0020resistivity = 241,
	witsml2__MeasurementType__shallow_x0020resistivity = 242,
	witsml2__MeasurementType__shear_x0020wave_x0020dolomite_x0020porosity = 243,
	witsml2__MeasurementType__shear_x0020wave_x0020limestone_x0020porosity = 244,
	witsml2__MeasurementType__shear_x0020wave_x0020matrix_x0020travel_x0020time = 245,
	witsml2__MeasurementType__shear_x0020wave_x0020sandstone_x0020porosity = 246,
	witsml2__MeasurementType__shear_x0020wave_x0020travel_x0020time = 247,
	witsml2__MeasurementType__shifted = 248,
	witsml2__MeasurementType__sidewall_x0020core_x0020porosity = 249,
	witsml2__MeasurementType__sigma = 250,
	witsml2__MeasurementType__sigma_x0020formation = 251,
	witsml2__MeasurementType__sigma_x0020gas = 252,
	witsml2__MeasurementType__sigma_x0020hydrocarbon = 253,
	witsml2__MeasurementType__sigma_x0020matrix = 254,
	witsml2__MeasurementType__sigma_x0020oil = 255,
	witsml2__MeasurementType__sigma_x0020water = 256,
	witsml2__MeasurementType__slippage_x0020velocity_x0020correction = 257,
	witsml2__MeasurementType__smoothed = 258,
	witsml2__MeasurementType__spectral_x0020gamma_x0020ray = 259,
	witsml2__MeasurementType__spherically_x0020focused_x0020conductivity = 260,
	witsml2__MeasurementType__spherically_x0020focused_x0020resistivity = 261,
	witsml2__MeasurementType__spontaneous_x0020potential = 262,
	witsml2__MeasurementType__spreading_x0020loss_x0020correction = 263,
	witsml2__MeasurementType__synthetic_x0020well_x0020log_x0020trace = 264,
	witsml2__MeasurementType__temperature = 265,
	witsml2__MeasurementType__temperature_x0020correction = 266,
	witsml2__MeasurementType__tension = 267,
	witsml2__MeasurementType__Th_x002fK_x0020ratio = 268,
	witsml2__MeasurementType__thorium = 269,
	witsml2__MeasurementType__time = 270,
	witsml2__MeasurementType__tool_x0020diameter_x0020correction = 271,
	witsml2__MeasurementType__tool_x0020eccentricity_x0020correction = 272,
	witsml2__MeasurementType__total_x0020gamma_x0020ray = 273,
	witsml2__MeasurementType__total_x0020porosity = 274,
	witsml2__MeasurementType__tracer_x0020survey = 275,
	witsml2__MeasurementType__travel_x0020time = 276,
	witsml2__MeasurementType__true_x0020conductivity = 277,
	witsml2__MeasurementType__true_x0020resistivity = 278,
	witsml2__MeasurementType__true_x0020vertical_x0020depth = 279,
	witsml2__MeasurementType__tube_x0020wave_x0020dolomite_x0020porosity = 280,
	witsml2__MeasurementType__tube_x0020wave_x0020limestone_x0020porosity = 281,
	witsml2__MeasurementType__tube_x0020wave_x0020matrix_x0020travel_x0020time = 282,
	witsml2__MeasurementType__tube_x0020wave_x0020sandstone_x0020porosity = 283,
	witsml2__MeasurementType__tube_x0020wave_x0020travel_x0020time = 284,
	witsml2__MeasurementType__uranium = 285,
	witsml2__MeasurementType__velocity = 286,
	witsml2__MeasurementType__volume = 287,
	witsml2__MeasurementType__water_x0020based_x0020fluid_x0020correction = 288,
	witsml2__MeasurementType__water_x0020holdup_x0020correction = 289,
	witsml2__MeasurementType__water_x0020saturated_x0020conductivity = 290,
	witsml2__MeasurementType__water_x0020saturated_x0020resistivity = 291,
	witsml2__MeasurementType__water_x0020saturation = 292
};
#endif

/* eml2_2ForGsoap.h:15303 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NozzleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NozzleType (-1317)

/* witsml2:NozzleType */
enum witsml2__NozzleType {
	witsml2__NozzleType__extended = 0,
	witsml2__NozzleType__normal = 1
};
#endif

/* eml2_2ForGsoap.h:15315 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubularAssembly
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubularAssembly (-1318)

/* witsml2:TubularAssembly */
enum witsml2__TubularAssembly {
	witsml2__TubularAssembly__drilling = 0,
	witsml2__TubularAssembly__directional_x0020drilling = 1,
	witsml2__TubularAssembly__fishing = 2,
	witsml2__TubularAssembly__condition_x0020mud = 3,
	witsml2__TubularAssembly__tubing_x0020conveyed_x0020logging = 4,
	witsml2__TubularAssembly__cementing = 5,
	witsml2__TubularAssembly__casing = 6,
	witsml2__TubularAssembly__clean_x0020out = 7,
	witsml2__TubularAssembly__completion_x0020or_x0020testing = 8,
	witsml2__TubularAssembly__coring = 9,
	witsml2__TubularAssembly__hole_x0020opening_x0020or_x0020underreaming = 10,
	witsml2__TubularAssembly__milling_x0020or_x0020dressing_x0020or_x0020cutting = 11,
	witsml2__TubularAssembly__wiper_x0020or_x0020check_x0020or_x0020reaming = 12,
	witsml2__TubularAssembly__unknown = 13
};
#endif

/* eml2_2ForGsoap.h:15342 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponentType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponentType (-1319)

/* witsml2:TubularComponentType */
enum witsml2__TubularComponentType {
	witsml2__TubularComponentType__accelerator = 0,
	witsml2__TubularComponentType__adjustable_x0020kickoff = 1,
	witsml2__TubularComponentType__bit_x0020core_x0020diamond = 2,
	witsml2__TubularComponentType__bit_x0020core_x0020PDC = 3,
	witsml2__TubularComponentType__bit_x0020diamond_x0020fixed_x0020cut = 4,
	witsml2__TubularComponentType__bit_x0020hole_x0020opener = 5,
	witsml2__TubularComponentType__bit_x0020insert_x0020roller_x0020cone = 6,
	witsml2__TubularComponentType__bit_x0020mill_x0020tooth_x0020roller_x0020cone = 7,
	witsml2__TubularComponentType__bit_x0020PDC_x0020fixed_x0020cutter = 8,
	witsml2__TubularComponentType__bit_x0020under_x0020reamer = 9,
	witsml2__TubularComponentType__bridge_x0020plug = 10,
	witsml2__TubularComponentType__bull_x0020plug = 11,
	witsml2__TubularComponentType__bullnose = 12,
	witsml2__TubularComponentType__casing = 13,
	witsml2__TubularComponentType__casing_x0020crossover = 14,
	witsml2__TubularComponentType__casing_x0020cutter = 15,
	witsml2__TubularComponentType__casing_x0020head = 16,
	witsml2__TubularComponentType__casing_x0020inflatable_x0020packer = 17,
	witsml2__TubularComponentType__casing_x0020shoe_x0020screw_in = 18,
	witsml2__TubularComponentType__catch_x0020assembly = 19,
	witsml2__TubularComponentType__coiled_x0020tubing_x0020in_x0020hole = 20,
	witsml2__TubularComponentType__coiled_x0020tubing_x0020on_x0020coil = 21,
	witsml2__TubularComponentType__core_x0020barrel = 22,
	witsml2__TubularComponentType__core_x0020orientation_x0020barrel = 23,
	witsml2__TubularComponentType__die_x0020collar = 24,
	witsml2__TubularComponentType__die_x0020collar_x0020LH = 25,
	witsml2__TubularComponentType__directional_x0020guidance_x0020system = 26,
	witsml2__TubularComponentType__drill_x0020collar = 27,
	witsml2__TubularComponentType__drill_x0020collar_x0020short = 28,
	witsml2__TubularComponentType__drill_x0020pipe = 29,
	witsml2__TubularComponentType__drill_x0020pipe_x0020compressive = 30,
	witsml2__TubularComponentType__drill_x0020pipe_x0020LH = 31,
	witsml2__TubularComponentType__drill_x0020stem_x0020test_x0020BHA = 32,
	witsml2__TubularComponentType__drive_x0020pipe = 33,
	witsml2__TubularComponentType__dual_x0020catch_x0020assembly = 34,
	witsml2__TubularComponentType__extension_x0020bowl_x0020overshot = 35,
	witsml2__TubularComponentType__extension_x0020sub_overshot = 36,
	witsml2__TubularComponentType__float_x0020collar = 37,
	witsml2__TubularComponentType__float_x0020shoe = 38,
	witsml2__TubularComponentType__flow_x0020head = 39,
	witsml2__TubularComponentType__guide_x0020shoe = 40,
	witsml2__TubularComponentType__hanger_x0020casing_x0020subsea = 41,
	witsml2__TubularComponentType__hanger_x0020casing_x0020surface = 42,
	witsml2__TubularComponentType__hanger_x0020liner = 43,
	witsml2__TubularComponentType__hanger_x0020mud_x0020line = 44,
	witsml2__TubularComponentType__hanger_x0020tubing = 45,
	witsml2__TubularComponentType__heavy_x0020weight_x0020drill_x0020pipe = 46,
	witsml2__TubularComponentType__heavy_x0020weight_x0020drill_x0020pipe_x0020LH = 47,
	witsml2__TubularComponentType__jar = 48,
	witsml2__TubularComponentType__junk_x0020basket = 49,
	witsml2__TubularComponentType__junk_x0020basket_x0020reverse_x0020circulation = 50,
	witsml2__TubularComponentType__kelly = 51,
	witsml2__TubularComponentType__keyseat_x0020wiper_x0020tool = 52,
	witsml2__TubularComponentType__landing_x0020float_x0020collar = 53,
	witsml2__TubularComponentType__lead_x0020impression_x0020block = 54,
	witsml2__TubularComponentType__liner = 55,
	witsml2__TubularComponentType__logging_x0020while_x0020drilling_x0020tool = 56,
	witsml2__TubularComponentType__magnet = 57,
	witsml2__TubularComponentType__mill_x0020casing_x0020cutting = 58,
	witsml2__TubularComponentType__mill_x0020dress = 59,
	witsml2__TubularComponentType__mill_x0020flat_x0020bottom = 60,
	witsml2__TubularComponentType__mill_x0020hollow = 61,
	witsml2__TubularComponentType__mill_x0020packer_x0020picker_x0020assembly = 62,
	witsml2__TubularComponentType__mill_x0020pilot = 63,
	witsml2__TubularComponentType__mill_x0020polish = 64,
	witsml2__TubularComponentType__mill_x0020section = 'A',
	witsml2__TubularComponentType__mill_x0020taper = 'B',
	witsml2__TubularComponentType__mill_x0020washover = 'C',
	witsml2__TubularComponentType__mill_x0020watermelon = 'D',
	witsml2__TubularComponentType__millout_x0020extension = 'E',
	witsml2__TubularComponentType__motor = 'F',
	witsml2__TubularComponentType__motor_x0020instrumented = 'G',
	witsml2__TubularComponentType__motor_x0020steerable = 'H',
	witsml2__TubularComponentType__mule_x0020shoe = 'I',
	witsml2__TubularComponentType__multilateral_x0020hanger_x0020running_x0020tool = 'J',
	witsml2__TubularComponentType__MWD_x0020hang_x0020off_x0020sub = 'K',
	witsml2__TubularComponentType__MWD_x0020pulser = 'L',
	witsml2__TubularComponentType__non_magnetic_x0020collar = 'M',
	witsml2__TubularComponentType__non_magnetic_x0020stabilizer = 'N',
	witsml2__TubularComponentType__other = 'O',
	witsml2__TubularComponentType__overshot = 'P',
	witsml2__TubularComponentType__overshot_x0020LH = 'Q',
	witsml2__TubularComponentType__oversize_x0020lip_x0020guide_x0020overshot = 'R',
	witsml2__TubularComponentType__packer = 'S',
	witsml2__TubularComponentType__packer_x0020retrieve_x0020TT_x0020squeeze = 'T',
	witsml2__TubularComponentType__packer_x0020RTTS = 'U',
	witsml2__TubularComponentType__packer_x0020storm_x0020valve_x0020RTTS = 'V',
	witsml2__TubularComponentType__pipe_x0020cutter = 'W',
	witsml2__TubularComponentType__polished_x0020bore_x0020receptacle = 'X',
	witsml2__TubularComponentType__ported_x0020stinger = 'Y',
	witsml2__TubularComponentType__prepacked_x0020screens = 'Z',
	witsml2__TubularComponentType__reamer = 91,
	witsml2__TubularComponentType__reversing_x0020tool = 92,
	witsml2__TubularComponentType__riser_x0020high_x0020pressure = 93,
	witsml2__TubularComponentType__riser_x0020marine = 94,
	witsml2__TubularComponentType__riser_x0020production = 95,
	witsml2__TubularComponentType__rotary_x0020steering_x0020tool = 96,
	witsml2__TubularComponentType__running_x0020tool = 'a',
	witsml2__TubularComponentType__safety_x0020joint = 'b',
	witsml2__TubularComponentType__safety_x0020joint_x0020LH = 'c',
	witsml2__TubularComponentType__scab_x0020liner_x0020bit_x0020guide = 'd',
	witsml2__TubularComponentType__scraper = 'e',
	witsml2__TubularComponentType__scratchers = 'f',
	witsml2__TubularComponentType__slotted_x0020liner = 'g',
	witsml2__TubularComponentType__spear = 'h',
	witsml2__TubularComponentType__stabilizer = 'i',
	witsml2__TubularComponentType__stabilizer_x0020inline = 'j',
	witsml2__TubularComponentType__stabilizer_x0020near_x0020bit = 'k',
	witsml2__TubularComponentType__stabilizer_x0020near_x0020bit_x0020roller_x0020reamer = 'l',
	witsml2__TubularComponentType__stabilizer_x0020non_rotating = 'm',
	witsml2__TubularComponentType__stabilizer_x0020steerable = 'n',
	witsml2__TubularComponentType__stabilizer_x0020string = 'o',
	witsml2__TubularComponentType__stabilizer_x0020string_x0020roller_x0020reamer = 'p',
	witsml2__TubularComponentType__stabilizer_x0020turbo_x0020back = 'q',
	witsml2__TubularComponentType__stabilizer_x0020variable_x0020blade = 'r',
	witsml2__TubularComponentType__stage_x0020cement_x0020collar = 's',
	witsml2__TubularComponentType__sub_bar_x0020catcher = 't',
	witsml2__TubularComponentType__sub_bent = 'u',
	witsml2__TubularComponentType__sub_bit = 'v',
	witsml2__TubularComponentType__sub_bumper = 'w',
	witsml2__TubularComponentType__sub_catcher = 'x',
	witsml2__TubularComponentType__sub_circulation = 'y',
	witsml2__TubularComponentType__sub_cone = 'z',
	witsml2__TubularComponentType__sub_crossover = 123,
	witsml2__TubularComponentType__sub_dart = 124,
	witsml2__TubularComponentType__sub_filter = 125,
	witsml2__TubularComponentType__sub_float = 126,
	witsml2__TubularComponentType__sub_jetting = 127,
	witsml2__TubularComponentType__sub_junk = 128,
	witsml2__TubularComponentType__sub_orienting = 129,
	witsml2__TubularComponentType__sub_ported = 130,
	witsml2__TubularComponentType__sub_pressure_x0020relief = 131,
	witsml2__TubularComponentType__sub_pump_x0020out = 132,
	witsml2__TubularComponentType__sub_restrictor = 133,
	witsml2__TubularComponentType__sub_saver = 134,
	witsml2__TubularComponentType__sub_shock = 135,
	witsml2__TubularComponentType__sub_side_x0020entry = 136,
	witsml2__TubularComponentType__sub_stop = 137,
	witsml2__TubularComponentType__surface_x0020pipe = 138,
	witsml2__TubularComponentType__taper_x0020tap = 139,
	witsml2__TubularComponentType__taper_x0020tap_x0020LH = 140,
	witsml2__TubularComponentType__thruster = 141,
	witsml2__TubularComponentType__tieback_x0020polished_x0020bore_x0020receptacle = 142,
	witsml2__TubularComponentType__tieback_x0020stinger = 143,
	witsml2__TubularComponentType__tubing = 144,
	witsml2__TubularComponentType__tubing_conveyed_x0020perforating_x0020gun = 145,
	witsml2__TubularComponentType__turbine = 146,
	witsml2__TubularComponentType__unknown = 147,
	witsml2__TubularComponentType__washover_x0020pipe = 148,
	witsml2__TubularComponentType__whipstock = 149,
	witsml2__TubularComponentType__whipstock_x0020anchor = 150
};
#endif

/* eml2_2ForGsoap.h:15503 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagLocation (-1320)

/* witsml2:NameTagLocation */
enum witsml2__NameTagLocation {
	witsml2__NameTagLocation__body = 0,
	witsml2__NameTagLocation__box = 1,
	witsml2__NameTagLocation__other = 2,
	witsml2__NameTagLocation__pin = 3
};
#endif

/* eml2_2ForGsoap.h:15517 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagNumberingScheme
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagNumberingScheme (-1321)

/* witsml2:NameTagNumberingScheme */
enum witsml2__NameTagNumberingScheme {
	witsml2__NameTagNumberingScheme__ANSI_x002fAIM_BC10 = 0,
	witsml2__NameTagNumberingScheme__ANSI_x002fAIM_BC2 = 1,
	witsml2__NameTagNumberingScheme__ANSI_x002fAIM_BC6 = 2,
	witsml2__NameTagNumberingScheme__EAN_x002eUCC = 3,
	witsml2__NameTagNumberingScheme__EPC64 = 4,
	witsml2__NameTagNumberingScheme__EPC96 = 5,
	witsml2__NameTagNumberingScheme__F2F = 6,
	witsml2__NameTagNumberingScheme__MFM = 7,
	witsml2__NameTagNumberingScheme__MSRCID = 8,
	witsml2__NameTagNumberingScheme__serial_x0020number = 9
};
#endif

/* eml2_2ForGsoap.h:15537 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagTechnology (-1322)

/* witsml2:NameTagTechnology */
enum witsml2__NameTagTechnology {
	witsml2__NameTagTechnology__intrinsic = 0,
	witsml2__NameTagTechnology__labeled = 1,
	witsml2__NameTagTechnology__painted = 2,
	witsml2__NameTagTechnology__stamped = 3,
	witsml2__NameTagTechnology__tagged = 4,
	witsml2__NameTagTechnology__temporary = 5
};
#endif

/* eml2_2ForGsoap.h:15553 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobType (-1323)

/* witsml2:CementJobType */
enum witsml2__CementJobType {
	witsml2__CementJobType__primary = 0,
	witsml2__CementJobType__plug = 1,
	witsml2__CementJobType__squeeze = 2
};
#endif

/* eml2_2ForGsoap.h:15566 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreFluidLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreFluidLocation (-1324)

/* witsml2:WellboreFluidLocation */
enum witsml2__WellboreFluidLocation {
	witsml2__WellboreFluidLocation__annulus = 0,
	witsml2__WellboreFluidLocation__deadend = 1,
	witsml2__WellboreFluidLocation__in_x0020pipe = 2,
	witsml2__WellboreFluidLocation__rat_x0020hole = 3
};
#endif

/* eml2_2ForGsoap.h:15580 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__HoleCasingType (-1325)

/* witsml2:HoleCasingType */
enum witsml2__HoleCasingType {
	witsml2__HoleCasingType__blow_x0020out_x0020preventer = 0,
	witsml2__HoleCasingType__casing = 1,
	witsml2__HoleCasingType__conductor = 2,
	witsml2__HoleCasingType__curved_x0020conductor = 3,
	witsml2__HoleCasingType__liner = 4,
	witsml2__HoleCasingType__open_x0020hole = 5,
	witsml2__HoleCasingType__riser = 6,
	witsml2__HoleCasingType__tubing = 7
};
#endif

/* eml2_2ForGsoap.h:15598 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelDerivation (-1326)

/* witsml2:ChannelDerivation */
enum witsml2__ChannelDerivation {
	witsml2__ChannelDerivation__raw = 0,
	witsml2__ChannelDerivation__simulated = 1,
	witsml2__ChannelDerivation__spliced = 2,
	witsml2__ChannelDerivation__sampled = 3,
	witsml2__ChannelDerivation__model = 4
};
#endif

/* eml2_2ForGsoap.h:15628 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndexType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndexType (-1327)

/* witsml2:ChannelIndexType */
enum witsml2__ChannelIndexType {
	witsml2__ChannelIndexType__measured_x0020depth = 0,
	witsml2__ChannelIndexType__true_x0020vertical_x0020depth = 1,
	witsml2__ChannelIndexType__pass_x0020indexed_x0020depth = 2,
	witsml2__ChannelIndexType__date_x0020time = 3,
	witsml2__ChannelIndexType__elapsed_x0020time = 4,
	witsml2__ChannelIndexType__temperature = 5,
	witsml2__ChannelIndexType__pressure = 6
};
#endif

/* eml2_2ForGsoap.h:15666 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelState
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelState (-1328)

/* witsml2:ChannelState */
enum witsml2__ChannelState {
	witsml2__ChannelState__calculated = 0,
	witsml2__ChannelState__final_ = 1,
	witsml2__ChannelState__memory = 2,
	witsml2__ChannelState__processed = 3,
	witsml2__ChannelState__real_x0020time = 4
};
#endif

/* eml2_2ForGsoap.h:15696 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelStatus (-1329)

/* witsml2:ChannelStatus */
enum witsml2__ChannelStatus {
	witsml2__ChannelStatus__active = 0,
	witsml2__ChannelStatus__closed = 1,
	witsml2__ChannelStatus__inactive = 2
};
#endif

/* eml2_2ForGsoap.h:15718 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EtpDataType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EtpDataType (-1330)

/* witsml2:EtpDataType */
enum witsml2__EtpDataType {
	witsml2__EtpDataType__boolean = 0,
	witsml2__EtpDataType__bytes = 1,
	witsml2__EtpDataType__double_ = 2,
	witsml2__EtpDataType__float_ = 3,
	witsml2__EtpDataType__int_ = 4,
	witsml2__EtpDataType__long_ = 5,
	witsml2__EtpDataType__null = 6,
	witsml2__EtpDataType__string = 7,
	witsml2__EtpDataType__vector = 8
};
#endif

/* eml2_2ForGsoap.h:15764 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IndexDirection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IndexDirection (-1331)

/* witsml2:IndexDirection */
enum witsml2__IndexDirection {
	witsml2__IndexDirection__decreasing = 0,
	witsml2__IndexDirection__increasing = 1
};
#endif

/* eml2_2ForGsoap.h:15782 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LoggingMethod (-1332)

/* witsml2:LoggingMethod */
enum witsml2__LoggingMethod {
	witsml2__LoggingMethod__computed = 0,
	witsml2__LoggingMethod__distributed = 1,
	witsml2__LoggingMethod__LWD = 2,
	witsml2__LoggingMethod__mixed = 3,
	witsml2__LoggingMethod__MWD = 4,
	witsml2__LoggingMethod__surface = 5,
	witsml2__LoggingMethod__wireline = 6
};
#endif

/* eml2_2ForGsoap.h:15820 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BackupScaleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BackupScaleType (-1333)

/* witsml2:BackupScaleType */
enum witsml2__BackupScaleType {
	witsml2__BackupScaleType__x10 = 0,
	witsml2__BackupScaleType__offscale_x0020left_x002fright = 1,
	witsml2__BackupScaleType__other = 2
};
#endif

/* eml2_2ForGsoap.h:15833 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CalibrationPointRole
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CalibrationPointRole (-1334)

/* witsml2:CalibrationPointRole */
enum witsml2__CalibrationPointRole {
	witsml2__CalibrationPointRole__left_x0020edge = 0,
	witsml2__CalibrationPointRole__right_x0020edge = 1,
	witsml2__CalibrationPointRole__fraction = 2,
	witsml2__CalibrationPointRole__other = 3
};
#endif

/* eml2_2ForGsoap.h:15859 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FileNameType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FileNameType (-1335)

/* witsml2:FileNameType */
enum witsml2__FileNameType {
	witsml2__FileNameType__file_x0020name = 0,
	witsml2__FileNameType__path_x0020name = 1,
	witsml2__FileNameType__universal_x0020resource_x0020locator = 2,
	witsml2__FileNameType__other = 3
};
#endif

/* eml2_2ForGsoap.h:15885 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LineStyle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LineStyle (-1336)

/* witsml2:LineStyle */
enum witsml2__LineStyle {
	witsml2__LineStyle__dashed = 0,
	witsml2__LineStyle__solid = 1,
	witsml2__LineStyle__dotted = 2,
	witsml2__LineStyle__short_x0020dashed = 3,
	witsml2__LineStyle__long_x0020dashed = 4
};
#endif

/* eml2_2ForGsoap.h:15900 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogRectangleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogRectangleType (-1337)

/* witsml2:LogRectangleType */
enum witsml2__LogRectangleType {
	witsml2__LogRectangleType__header = 0,
	witsml2__LogRectangleType__alternate = 1
};
#endif

/* eml2_2ForGsoap.h:15915 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogSectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogSectionType (-1338)

/* witsml2:LogSectionType */
enum witsml2__LogSectionType {
	witsml2__LogSectionType__main = 0,
	witsml2__LogSectionType__repeat = 1,
	witsml2__LogSectionType__calibration = 2,
	witsml2__LogSectionType__tie_x0020in = 3,
	witsml2__LogSectionType__going_x0020in_x0020hole = 4,
	witsml2__LogSectionType__other = 5
};
#endif

/* eml2_2ForGsoap.h:15937 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogTrackType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogTrackType (-1339)

/* witsml2:LogTrackType */
enum witsml2__LogTrackType {
	witsml2__LogTrackType__curves = 0,
	witsml2__LogTrackType__data = 1,
	witsml2__LogTrackType__depth = 2,
	witsml2__LogTrackType__traces = 3,
	witsml2__LogTrackType__other = 4
};
#endif

/* eml2_2ForGsoap.h:15958 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MessageDigestType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MessageDigestType (-1340)

/* witsml2:MessageDigestType */
enum witsml2__MessageDigestType {
	witsml2__MessageDigestType__MD5 = 0,
	witsml2__MessageDigestType__SHA1 = 1,
	witsml2__MessageDigestType__other = 2
};
#endif

/* eml2_2ForGsoap.h:15977 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MimeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MimeType (-1341)

/* witsml2:MimeType */
enum witsml2__MimeType {
	witsml2__MimeType__image_x002ftiff = 0,
	witsml2__MimeType__image_x002fgif = 1,
	witsml2__MimeType__image_x002fpng = 2,
	witsml2__MimeType__image_x002fxml_x002bsvg = 3,
	witsml2__MimeType__other = 4
};
#endif

/* eml2_2ForGsoap.h:16007 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ScaleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ScaleType (-1342)

/* witsml2:ScaleType */
enum witsml2__ScaleType {
	witsml2__ScaleType__linear = 0,
	witsml2__ScaleType__logarithmic = 1
};
#endif

/* eml2_2ForGsoap.h:16019 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventClassType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventClassType (-1343)

/* witsml2:EventClassType */
enum witsml2__EventClassType {
	witsml2__EventClassType__daily_x0020cost = 0,
	witsml2__EventClassType__daily_x0020report = 1,
	witsml2__EventClassType__failure_x0020_x0028downhole_x0020equipment_x0020only_x0029 = 2,
	witsml2__EventClassType__job = 3,
	witsml2__EventClassType__job_x0020plan_x0020_x0028phases_x0029 = 4,
	witsml2__EventClassType__mud_x0020attributes = 5,
	witsml2__EventClassType__npt_x0020_x0028lost_x0020time_x0020event_x0029 = 6,
	witsml2__EventClassType__time_x0020log_x0020_x0028time_x0020measure_x0029 = 7
};
#endif

/* eml2_2ForGsoap.h:16037 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogIndexType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogIndexType (-1344)

/* witsml2:LogIndexType */
enum witsml2__LogIndexType {
	witsml2__LogIndexType__date_x0020time = 0,
	witsml2__LogIndexType__elapsed_x0020time = 1,
	witsml2__LogIndexType__length = 2,
	witsml2__LogIndexType__measured_x0020depth = 3,
	witsml2__LogIndexType__vertical_x0020depth = 4,
	witsml2__LogIndexType__other = 5
};
#endif

/* eml2_2ForGsoap.h:16071 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerfConveyanceMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerfConveyanceMethod (-1345)

/* witsml2:PerfConveyanceMethod */
enum witsml2__PerfConveyanceMethod {
	witsml2__PerfConveyanceMethod__slick_x0020line = 0,
	witsml2__PerfConveyanceMethod__tubing_x0020conveyed = 1,
	witsml2__PerfConveyanceMethod__wireline = 2
};
#endif

/* eml2_2ForGsoap.h:16084 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeType (-1346)

/* witsml2:BoreholeType */
enum witsml2__BoreholeType {
	witsml2__BoreholeType__cavern = 0,
	witsml2__BoreholeType__cavity = 1,
	witsml2__BoreholeType__normalborehole = 2,
	witsml2__BoreholeType__underream = 3
};
#endif

/* eml2_2ForGsoap.h:16098 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionTypes (-1347)

/* witsml2:CasingConnectionTypes */
enum witsml2__CasingConnectionTypes {
	witsml2__CasingConnectionTypes__landed = 0,
	witsml2__CasingConnectionTypes__self_sealing_threaded = 1,
	witsml2__CasingConnectionTypes__welded = 2
};
#endif

/* eml2_2ForGsoap.h:16111 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Coating
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Coating (-1348)

/* witsml2:Coating */
enum witsml2__Coating {
	witsml2__Coating__bare = 0,
	witsml2__Coating__carbonnitrided = 1,
	witsml2__Coating__carburized = 2,
	witsml2__Coating__carburized_hardened = 3,
	witsml2__Coating__cementlined = 4,
	witsml2__Coating__chrome = 5,
	witsml2__Coating__chrome_plated = 6,
	witsml2__Coating__chromeplated_grooved = 7,
	witsml2__Coating__chromeplated_heavy = 8,
	witsml2__Coating__corrosion_x0020coating = 9,
	witsml2__Coating__dblgalv = 10,
	witsml2__Coating__duolin20wr = 11,
	witsml2__Coating__duoline = 12,
	witsml2__Coating__duoline10 = 13,
	witsml2__Coating__duoline20 = 14,
	witsml2__Coating__epdm = 15,
	witsml2__Coating__fiberglass_lined = 16,
	witsml2__Coating__galvanized = 17,
	witsml2__Coating__hardened = 18,
	witsml2__Coating__hard_lined = 19,
	witsml2__Coating__ins = 20,
	witsml2__Coating__ipc = 21,
	witsml2__Coating__ipc_epoxy = 22,
	witsml2__Coating__ipc_epxthk = 23,
	witsml2__Coating__ipc_epxthn = 24,
	witsml2__Coating__ipc_nylon = 25,
	witsml2__Coating__ipc_rwrap = 26,
	witsml2__Coating__ipc_s505 = 27,
	witsml2__Coating__ipc_s650 = 28,
	witsml2__Coating__ipc_tk70 = 29,
	witsml2__Coating__ipc_tk75 = 30,
	witsml2__Coating__lp = 31,
	witsml2__Coating__moly = 32,
	witsml2__Coating__mtr = 33,
	witsml2__Coating__n_x002fa = 34,
	witsml2__Coating__nickel_carbide = 35,
	witsml2__Coating__nickel_plated = 36,
	witsml2__Coating__nitrided = 37,
	witsml2__Coating__nitrile = 38,
	witsml2__Coating__pap = 39,
	witsml2__Coating__pelined = 40,
	witsml2__Coating__phosphate = 41,
	witsml2__Coating__phosphorus = 42,
	witsml2__Coating__plastic = 43,
	witsml2__Coating__plunger_lubricant = 44,
	witsml2__Coating__polished_rodliner = 45,
	witsml2__Coating__polypropylene = 46,
	witsml2__Coating__ppw_x002fnitrl = 47,
	witsml2__Coating__pvclined = 48,
	witsml2__Coating__rodguide_1 = 49,
	witsml2__Coating__rodguide_2 = 50,
	witsml2__Coating__rodguide_2_x002e = 51,
	witsml2__Coating__rodguide_3 = 52,
	witsml2__Coating__rodguide_4 = 53,
	witsml2__Coating__rodguide_5 = 54,
	witsml2__Coating__rodguide_6 = 55,
	witsml2__Coating__rodguide_7 = 56,
	witsml2__Coating__rodguide_fx = 57,
	witsml2__Coating__rodguide_so = 58,
	witsml2__Coating__rodguide_so1 = 59,
	witsml2__Coating__rodguide_so2 = 60,
	witsml2__Coating__rodguide_so3 = 61,
	witsml2__Coating__rodguide_so4 = 62,
	witsml2__Coating__rodguide_so5 = 63,
	witsml2__Coating__rodguide_so6 = 64,
	witsml2__Coating__rodguide_so8 = 'A',
	witsml2__Coating__rodguide_sp = 'B',
	witsml2__Coating__spray_metal = 'C',
	witsml2__Coating__spray_metal_monel = 'D',
	witsml2__Coating__spraymetal_monel = 'E',
	witsml2__Coating__spraymetal_nickel = 'F',
	witsml2__Coating__spraymetal_od_x002fnickelplated_id = 'G',
	witsml2__Coating__spraymetal_steel = 'H',
	witsml2__Coating__spraymetal_thick = 'I',
	witsml2__Coating__sslined = 'J',
	witsml2__Coating__teflon = 'K',
	witsml2__Coating__teflon_red = 'L',
	witsml2__Coating__teflon_tan = 'M',
	witsml2__Coating__teflon_yellow = 'N',
	witsml2__Coating__thermo = 'O',
	witsml2__Coating__tk_4 = 'P',
	witsml2__Coating__tk_99 = 'Q',
	witsml2__Coating__tuffr = 'R',
	witsml2__Coating__tungsten_x0020plated = 'S',
	witsml2__Coating__zincplated = 'T'
};
#endif

/* eml2_2ForGsoap.h:16206 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionFormType (-1349)

/* witsml2:ConnectionFormType */
enum witsml2__ConnectionFormType {
	witsml2__ConnectionFormType__box = 0,
	witsml2__ConnectionFormType__flange = 1,
	witsml2__ConnectionFormType__mandrel = 2,
	witsml2__ConnectionFormType__pin = 3,
	witsml2__ConnectionFormType__welded = 4
};
#endif

/* eml2_2ForGsoap.h:16221 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringType (-1350)

/* witsml2:DownholeStringType */
enum witsml2__DownholeStringType {
	witsml2__DownholeStringType__casing = 0,
	witsml2__DownholeStringType__others = 1,
	witsml2__DownholeStringType__rod = 2,
	witsml2__DownholeStringType__tubing = 3,
	witsml2__DownholeStringType__wellhead = 4
};
#endif

/* eml2_2ForGsoap.h:16236 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentType (-1351)

/* witsml2:EquipmentType */
enum witsml2__EquipmentType {
	witsml2__EquipmentType__bridge_x0020plug = 0,
	witsml2__EquipmentType__bull_x0020plug = 1,
	witsml2__EquipmentType__capillary_x0020tubing = 2,
	witsml2__EquipmentType__casing_x0020crossover = 3,
	witsml2__EquipmentType__casing_x0020hanger = 4,
	witsml2__EquipmentType__casing_x0020head = 5,
	witsml2__EquipmentType__casing_x0020liner_expandable = 6,
	witsml2__EquipmentType__casing_x0020shoe = 7,
	witsml2__EquipmentType__casing_x0020spool = 8,
	witsml2__EquipmentType__casing_x002fcasing_x0020liner = 9,
	witsml2__EquipmentType__cement_x0020_x0028behind_x0020casing_x0029 = 10,
	witsml2__EquipmentType__cement_x0020basket = 11,
	witsml2__EquipmentType__cement_x0020retainer = 12,
	witsml2__EquipmentType__cement_x0020squeeze = 13,
	witsml2__EquipmentType__cement_x0020stage_x0020tool = 14,
	witsml2__EquipmentType__chemical_x0020injection_x0020mandrel = 15,
	witsml2__EquipmentType__chemical_x0020injection_x0020valve = 16,
	witsml2__EquipmentType__corrosion_x0020coupon_x0020carrier = 17,
	witsml2__EquipmentType__dip_x0020tube = 18,
	witsml2__EquipmentType__downhole_x0020choke = 19,
	witsml2__EquipmentType__downhole_x0020sensor = 20,
	witsml2__EquipmentType__ESP_x0020assembly = 21,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020discharge = 22,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020intake = 23,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020motor_x0020base = 24,
	witsml2__EquipmentType__ESP_x0020bolt_x0020on_x0020motor_x0020head = 25,
	witsml2__EquipmentType__ESP_x0020cable = 26,
	witsml2__EquipmentType__ESP_x0020gas_x0020handler = 27,
	witsml2__EquipmentType__ESP_x0020gas_x0020separator = 28,
	witsml2__EquipmentType__ESP_x0020lower_x0020pigtail = 29,
	witsml2__EquipmentType__ESP_x0020motor = 30,
	witsml2__EquipmentType__ESP_x0020motor_x0020base_x0020centralizer = 31,
	witsml2__EquipmentType__ESP_x0020motor_x0020flat_x0020cable = 32,
	witsml2__EquipmentType__ESP_x0020motor_x0020shroud = 33,
	witsml2__EquipmentType__ESP_x0020promotor = 34,
	witsml2__EquipmentType__ESP_x0020pump = 35,
	witsml2__EquipmentType__ESP_x0020pump_x0020discharge_x0020sensor_x0020sub = 36,
	witsml2__EquipmentType__ESP_x0020seal = 37,
	witsml2__EquipmentType__expansion_x0020joint = 38,
	witsml2__EquipmentType__external_x0020cementing_x0020port = 39,
	witsml2__EquipmentType__fill = 40,
	witsml2__EquipmentType__fish = 41,
	witsml2__EquipmentType__float_x0020collar = 42,
	witsml2__EquipmentType__float_x0020shoe_x002fguide_x0020shoe = 43,
	witsml2__EquipmentType__gas_x0020anchor = 44,
	witsml2__EquipmentType__gas_x0020lift_x0020mandrel = 45,
	witsml2__EquipmentType__gas_x0020lift_x0020valve = 46,
	witsml2__EquipmentType__gravel_x0020pack_x0020screen = 47,
	witsml2__EquipmentType__hydraulic_x0020pump = 48,
	witsml2__EquipmentType__injection_x0020mandrel = 49,
	witsml2__EquipmentType__injection_x0020valve = 50,
	witsml2__EquipmentType__junk_x0020in_x0020wellbore = 51,
	witsml2__EquipmentType__landing_x0020collar = 52,
	witsml2__EquipmentType__liner_x0020entry_x0020guide = 53,
	witsml2__EquipmentType__liner_x0020hanger = 54,
	witsml2__EquipmentType__mule_x0020shoe = 55,
	witsml2__EquipmentType__notched_x0020collar = 56,
	witsml2__EquipmentType__on_off_x0020tool = 57,
	witsml2__EquipmentType__overshot = 58,
	witsml2__EquipmentType__packer = 59,
	witsml2__EquipmentType__packer_x0020plug = 60,
	witsml2__EquipmentType__packer_multiple_x0020strings = 61,
	witsml2__EquipmentType__packoff_x0020_x0028tubing_x0029 = 62,
	witsml2__EquipmentType__pcp_flex_x0020shaft_x0020intake = 63,
	witsml2__EquipmentType__pcp_gear_x0020reducer_x0020_x0028subsurface_x0029 = 64,
	witsml2__EquipmentType__pcp_no_x0020turn_x0020tool_x002ftorque_x0020anchor = 'A',
	witsml2__EquipmentType__pcp_rotor = 'B',
	witsml2__EquipmentType__pcp_stator = 'C',
	witsml2__EquipmentType__pcp_tag_x0020bar = 'D',
	witsml2__EquipmentType__plug_x0020__x0020cement = 'E',
	witsml2__EquipmentType__plug_x0020__x0020mud = 'F',
	witsml2__EquipmentType__plunger_x0020lift_x0020ball = 'G',
	witsml2__EquipmentType__plunger_x0020lift_x0020bottom_x0020hole_x0020bumper_x0020assembly = 'H',
	witsml2__EquipmentType__plunger_x0020lift_x0020bumper_x0020spring = 'I',
	witsml2__EquipmentType__plunger_x0020lift_x0020collar_x0020stop = 'J',
	witsml2__EquipmentType__plunger_x0020lift_x0020plunger = 'K',
	witsml2__EquipmentType__polished_x0020rod = 'L',
	witsml2__EquipmentType__polished_x0020rod_x0020liner = 'M',
	witsml2__EquipmentType__ported_x0020collar = 'N',
	witsml2__EquipmentType__profile_x0020nipple = 'O',
	witsml2__EquipmentType__profile_x0020nipple_x0020plug = 'P',
	witsml2__EquipmentType__pump_out_x0020plug = 'Q',
	witsml2__EquipmentType__sand_x0020screen_tubing = 'R',
	witsml2__EquipmentType__sand_x0020separator = 'S',
	witsml2__EquipmentType__screen_x0020liner_x002finsert = 'T',
	witsml2__EquipmentType__seal_x0020assembly = 'U',
	witsml2__EquipmentType__seal_x0020bore_x0020extension = 'V',
	witsml2__EquipmentType__seat_x0020nipple_x002fshoe = 'W',
	witsml2__EquipmentType__shear_x0020tool = 'X',
	witsml2__EquipmentType__sliding_x0020sleeve = 'Y',
	witsml2__EquipmentType__steam_x0020cup_x0020mandrel = 'Z',
	witsml2__EquipmentType__steam_x0020deflectors = 91,
	witsml2__EquipmentType__strainer_x0020nipple = 92,
	witsml2__EquipmentType__subsurface_x0020safety_x0020valve = 93,
	witsml2__EquipmentType__sucker_x0020rod = 94,
	witsml2__EquipmentType__sucker_x0020rod_x0020backoff_x0020coupling = 95,
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_insert = 96,
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_jacket = 'a',
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_tubing_x0020pump_x0020barrel = 'b',
	witsml2__EquipmentType__sucker_x0020rod_x0020pump_tubing_x0020pump_x0020plunger = 'c',
	witsml2__EquipmentType__sucker_x0020rod_x0020sub = 'd',
	witsml2__EquipmentType__sucker_x0020rod_continuous = 'e',
	witsml2__EquipmentType__sucker_x0020rod_ribbon = 'f',
	witsml2__EquipmentType__sucker_x0020rod_sinker_x0020bar = 'g',
	witsml2__EquipmentType__tcp_x0020gun = 'h',
	witsml2__EquipmentType__tubing = 'i',
	witsml2__EquipmentType__tubing_x0020_x0028coiled_x0029 = 'j',
	witsml2__EquipmentType__tubing_x0020anchor_x002fcatcher = 'k',
	witsml2__EquipmentType__tubing_x0020crossover = 'l',
	witsml2__EquipmentType__tubing_x0020drain = 'm',
	witsml2__EquipmentType__tubing_x0020hanger = 'n',
	witsml2__EquipmentType__tubing_x0020head_x0020_x0028spool_x0029 = 'o',
	witsml2__EquipmentType__tubing_x0020purge_x0020check_x0020valve = 'p',
	witsml2__EquipmentType__tubing_x0020sub = 'q',
	witsml2__EquipmentType__wellbore_x0020notes = 'r',
	witsml2__EquipmentType__whipstock = 's',
	witsml2__EquipmentType__wireline_x0020re_entry_x0020guide_x0020_x0028bell_x0020collar_x0029 = 't',
	witsml2__EquipmentType__y_tool = 'u'
};
#endif

/* eml2_2ForGsoap.h:16364 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyType (-1352)

/* witsml2:GeologyType */
enum witsml2__GeologyType {
	witsml2__GeologyType__aquifer = 0,
	witsml2__GeologyType__reservoir = 1
};
#endif

/* eml2_2ForGsoap.h:16376 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GradeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GradeType (-1353)

/* witsml2:GradeType */
enum witsml2__GradeType {
	witsml2__GradeType__35 = 35,
	witsml2__GradeType__45 = 45,
	witsml2__GradeType__46 = 46,
	witsml2__GradeType__50 = 50,
	witsml2__GradeType__75 = 'K',
	witsml2__GradeType__95 = 95,
	witsml2__GradeType__13CR = 96,
	witsml2__GradeType__13CR__x002080 = 'a',
	witsml2__GradeType__13CR__x002085 = 'b',
	witsml2__GradeType__13CR__x002095 = 'c',
	witsml2__GradeType__13CR_110 = 'd',
	witsml2__GradeType__620C = 'e',
	witsml2__GradeType__750N = 'f',
	witsml2__GradeType__75A = 'g',
	witsml2__GradeType__780M = 'h',
	witsml2__GradeType__960M = 'i',
	witsml2__GradeType__970N = 'j',
	witsml2__GradeType__A53 = 'k',
	witsml2__GradeType__A53A = 'l',
	witsml2__GradeType__A53B = 'm',
	witsml2__GradeType__Armco_95 = 'n',
	witsml2__GradeType__B = 'o',
	witsml2__GradeType__C = 'p',
	witsml2__GradeType__C_110 = 'q',
	witsml2__GradeType__C_75 = 'r',
	witsml2__GradeType__C_90 = 's',
	witsml2__GradeType__C_95 = 't',
	witsml2__GradeType__D = 'u',
	witsml2__GradeType__DE = 'v',
	witsml2__GradeType__DER = 'w',
	witsml2__GradeType__DR = 'x',
	witsml2__GradeType__DWR = 'y',
	witsml2__GradeType__E = 'z',
	witsml2__GradeType__E_75 = 123,
	witsml2__GradeType__EL = 124,
	witsml2__GradeType__F_25 = 125,
	witsml2__GradeType__FG = 126,
	witsml2__GradeType__FS_80 = 127,
	witsml2__GradeType__FSS_95 = 128,
	witsml2__GradeType__G = 129,
	witsml2__GradeType__G_105 = 130,
	witsml2__GradeType__GT_80S = 131,
	witsml2__GradeType__H2S_90 = 132,
	witsml2__GradeType__H2S_95 = 133,
	witsml2__GradeType__H_40 = 134,
	witsml2__GradeType__HC_95 = 135,
	witsml2__GradeType__HCK_55 = 136,
	witsml2__GradeType__HCL_80 = 137,
	witsml2__GradeType__HCN_80 = 138,
	witsml2__GradeType__HCP_110 = 139,
	witsml2__GradeType__HCQ_125 = 140,
	witsml2__GradeType__HO_70 = 141,
	witsml2__GradeType__HS = 142,
	witsml2__GradeType__J_20 = 143,
	witsml2__GradeType__J_55 = 144,
	witsml2__GradeType__K = 145,
	witsml2__GradeType__K_40 = 146,
	witsml2__GradeType__K_55 = 147,
	witsml2__GradeType__KD = 148,
	witsml2__GradeType__KD_63 = 149,
	witsml2__GradeType__L_80 = 150,
	witsml2__GradeType__LS_140 = 151,
	witsml2__GradeType__LS_50 = 152,
	witsml2__GradeType__LS_65 = 153,
	witsml2__GradeType__M_65 = 154,
	witsml2__GradeType__M_90 = 155,
	witsml2__GradeType__M_95 = 156,
	witsml2__GradeType__MAV_50 = 157,
	witsml2__GradeType__MD_56 = 158,
	witsml2__GradeType__MMS = 159,
	witsml2__GradeType__N_105 = 160,
	witsml2__GradeType__N_23 = 161,
	witsml2__GradeType__N_30 = 162,
	witsml2__GradeType__N_40 = 163,
	witsml2__GradeType__N_54 = 164,
	witsml2__GradeType__N_75 = 165,
	witsml2__GradeType__N_78 = 166,
	witsml2__GradeType__N_80 = 167,
	witsml2__GradeType__N_90 = 168,
	witsml2__GradeType__N_96 = 169,
	witsml2__GradeType__N_97 = 170,
	witsml2__GradeType__P_105 = 171,
	witsml2__GradeType__P_110 = 172,
	witsml2__GradeType__PCP_x0020_x0020900 = 173,
	witsml2__GradeType__PCP_x00201000 = 174,
	witsml2__GradeType__PCP_x00201500 = 175,
	witsml2__GradeType__PCP_x00202500 = 176,
	witsml2__GradeType__PH_6 = 177,
	witsml2__GradeType__Plus = 178,
	witsml2__GradeType__Q_125 = 179,
	witsml2__GradeType__QT_1000 = 180,
	witsml2__GradeType__QT_1200 = 181,
	witsml2__GradeType__QT_700 = 182,
	witsml2__GradeType__QT_800 = 183,
	witsml2__GradeType__QT_900 = 184,
	witsml2__GradeType__S = 185,
	witsml2__GradeType__S_135 = 186,
	witsml2__GradeType__S_59 = 187,
	witsml2__GradeType__S_60 = 188,
	witsml2__GradeType__S_67 = 189,
	witsml2__GradeType__S_80 = 190,
	witsml2__GradeType__S_87 = 191,
	witsml2__GradeType__S_88 = 192,
	witsml2__GradeType__S_95 = 193,
	witsml2__GradeType__SC_90 = 194,
	witsml2__GradeType__SE = 195,
	witsml2__GradeType__SER = 196,
	witsml2__GradeType__SM = 197,
	witsml2__GradeType__SOO_95 = 198,
	witsml2__GradeType__Stainless = 199,
	witsml2__GradeType__SWR = 200,
	witsml2__GradeType__T = 201,
	witsml2__GradeType__T_66 = 202,
	witsml2__GradeType__T_95 = 203,
	witsml2__GradeType__T_D61 = 204,
	witsml2__GradeType__T_D63 = 205,
	witsml2__GradeType__T_K65 = 206,
	witsml2__GradeType__UHS = 207,
	witsml2__GradeType__USS_125 = 208,
	witsml2__GradeType__USS_140 = 209,
	witsml2__GradeType__USS_50 = 210,
	witsml2__GradeType__USS_95 = 211,
	witsml2__GradeType__V_150 = 212,
	witsml2__GradeType__WC_50 = 213,
	witsml2__GradeType__X = 214,
	witsml2__GradeType__X_140 = 215,
	witsml2__GradeType__X_42 = 216,
	witsml2__GradeType__X_46 = 217,
	witsml2__GradeType__X_52 = 218,
	witsml2__GradeType__X_56 = 219,
	witsml2__GradeType__X_60 = 220,
	witsml2__GradeType__X_70 = 221,
	witsml2__GradeType__X_95 = 222,
	witsml2__GradeType__XD = 223
};
#endif

/* eml2_2ForGsoap.h:16520 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionTypes (-1354)

/* witsml2:OtherConnectionTypes */
enum witsml2__OtherConnectionTypes {
	witsml2__OtherConnectionTypes__cemented_in_place = 0,
	witsml2__OtherConnectionTypes__dogscompressionfit_sealed = 1
};
#endif

/* eml2_2ForGsoap.h:16532 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationToolType (-1355)

/* witsml2:PerforationToolType */
enum witsml2__PerforationToolType {
	witsml2__PerforationToolType__casing_x0020gun = 0,
	witsml2__PerforationToolType__coiled_x0020tubing_x0020jet_x0020tool = 1,
	witsml2__PerforationToolType__drilled = 2,
	witsml2__PerforationToolType__mandrel = 3,
	witsml2__PerforationToolType__n_x002fa = 4,
	witsml2__PerforationToolType__slots_machine_x0020cut = 5,
	witsml2__PerforationToolType__slots_undercut = 6,
	witsml2__PerforationToolType__strip_x0020gun = 7,
	witsml2__PerforationToolType__tcp_x0020gun = 8,
	witsml2__PerforationToolType__through_x0020tubing_x0020gun = 9
};
#endif

/* eml2_2ForGsoap.h:16552 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionTypes (-1356)

/* witsml2:RodConnectionTypes */
enum witsml2__RodConnectionTypes {
	witsml2__RodConnectionTypes__eating_x0020nipple_cup = 0,
	witsml2__RodConnectionTypes__latched = 1,
	witsml2__RodConnectionTypes__seating_x0020nipple_mechanical = 2,
	witsml2__RodConnectionTypes__slipfit_x0020sealed = 3,
	witsml2__RodConnectionTypes__threaded = 4,
	witsml2__RodConnectionTypes__welded = 5
};
#endif

/* eml2_2ForGsoap.h:16568 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SubStringType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SubStringType (-1357)

/* witsml2:SubStringType */
enum witsml2__SubStringType {
	witsml2__SubStringType__abandoned_x0020junk_x002ffish = 0,
	witsml2__SubStringType__capillary_x0020string_x0020_x0028inside_x0020tubing_x0029 = 1,
	witsml2__SubStringType__capillary_x0020string_x0020_x0028tubing_x002fcasing_x0020annulus_x0029 = 2,
	witsml2__SubStringType__conductor_x0020casing = 3,
	witsml2__SubStringType__drill_x0020string = 4,
	witsml2__SubStringType__flowline = 5,
	witsml2__SubStringType__geological_x0020objects = 6,
	witsml2__SubStringType__inner_x0020liner = 7,
	witsml2__SubStringType__intermediate_x0020casing = 8,
	witsml2__SubStringType__production_x0020casing = 9,
	witsml2__SubStringType__production_x0020liner = 10,
	witsml2__SubStringType__protective_x0020casing = 11,
	witsml2__SubStringType__surface_x0020casing = 12,
	witsml2__SubStringType__wellbore_x0020notes = 13,
	witsml2__SubStringType__y_tool_x0020string = 14
};
#endif

/* eml2_2ForGsoap.h:16593 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionTypes (-1358)

/* witsml2:TubingConnectionTypes */
enum witsml2__TubingConnectionTypes {
	witsml2__TubingConnectionTypes__dogscompressionfit_notsealed = 0,
	witsml2__TubingConnectionTypes__landed = 1,
	witsml2__TubingConnectionTypes__latched = 2,
	witsml2__TubingConnectionTypes__radial = 3,
	witsml2__TubingConnectionTypes__selfsealing_threaded = 4,
	witsml2__TubingConnectionTypes__slipfit_sealed = 5,
	witsml2__TubingConnectionTypes__threaded = 6
};
#endif

/* eml2_2ForGsoap.h:16610 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOpType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOpType (-1359)

/* witsml2:PumpOpType */
enum witsml2__PumpOpType {
	witsml2__PumpOpType__drilling = 0,
	witsml2__PumpOpType__reaming = 1,
	witsml2__PumpOpType__circulating = 2,
	witsml2__PumpOpType__slow_x0020pump = 3
};
#endif

/* eml2_2ForGsoap.h:16624 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ScrType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ScrType (-1360)

/* witsml2:ScrType */
enum witsml2__ScrType {
	witsml2__ScrType__string_x0020annulus = 0,
	witsml2__ScrType__string_x0020kill_x0020line = 1,
	witsml2__ScrType__string_x0020choke_x0020line = 2,
	witsml2__ScrType__unknown = 3
};
#endif

/* eml2_2ForGsoap.h:16641 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraftType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraftType (-1361)

/* witsml2:SupportCraftType */
enum witsml2__SupportCraftType {
	witsml2__SupportCraftType__barge = 0,
	witsml2__SupportCraftType__standby_x0020boat = 1,
	witsml2__SupportCraftType__helicopter = 2,
	witsml2__SupportCraftType__supply_x0020boat = 3,
	witsml2__SupportCraftType__truck = 4,
	witsml2__SupportCraftType__crew_x0020vehicle = 5,
	witsml2__SupportCraftType__tug_x0020boat = 6
};
#endif

/* eml2_2ForGsoap.h:16658 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AziRef
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AziRef (-1362)

/* witsml2:AziRef */
enum witsml2__AziRef {
	witsml2__AziRef__magnetic_x0020north = 0,
	witsml2__AziRef__grid_x0020north = 1,
	witsml2__AziRef__true_x0020north = 2
};
#endif

/* eml2_2ForGsoap.h:16680 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationStatus (-1363)

/* witsml2:TrajStationStatus */
enum witsml2__TrajStationStatus {
	witsml2__TrajStationStatus__open = 0,
	witsml2__TrajStationStatus__rejected = 1,
	witsml2__TrajStationStatus__position = 2
};
#endif

/* eml2_2ForGsoap.h:16702 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationType (-1364)

/* witsml2:TrajStationType */
enum witsml2__TrajStationType {
	witsml2__TrajStationType__azimuth_x0020on_x0020plane = 0,
	witsml2__TrajStationType__buildrate_x0020to_x0020delta_MD = 1,
	witsml2__TrajStationType__buildrate_x0020to_x0020INCL = 2,
	witsml2__TrajStationType__buildrate_x0020to_x0020MD = 3,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020AZI = 4,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020delta_MD = 5,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020INCL = 6,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020INCL_x0020and_x0020AZI = 7,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020MD = 8,
	witsml2__TrajStationType__buildrate_x0020and_x0020turnrate_x0020to_x0020TVD = 9,
	witsml2__TrajStationType__buildrate_x0020TVD = 10,
	witsml2__TrajStationType__casing_x0020MD = 11,
	witsml2__TrajStationType__casing_x0020TVD = 12,
	witsml2__TrajStationType__DLS = 13,
	witsml2__TrajStationType__DLS_x0020to_x0020AZI_x0020and_x0020MD = 14,
	witsml2__TrajStationType__DLS_x0020to_x0020AZI_TVD = 15,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL = 16,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020AZI = 17,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020MD = 18,
	witsml2__TrajStationType__DLS_x0020to_x0020INCL_x0020and_x0020TVD = 19,
	witsml2__TrajStationType__DLS_x0020to_x0020NS = 20,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020AZI = 21,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020delta_MD = 22,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020INCL = 23,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020INCL_AZI = 24,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020MD = 25,
	witsml2__TrajStationType__DLS_x0020and_x0020toolface_x0020to_x0020TVD = 26,
	witsml2__TrajStationType__formation_x0020MD = 27,
	witsml2__TrajStationType__formation_x0020TVD = 28,
	witsml2__TrajStationType__hold_x0020to_x0020delta_MD = 29,
	witsml2__TrajStationType__hold_x0020to_x0020MD = 30,
	witsml2__TrajStationType__hold_x0020to_x0020TVD = 31,
	witsml2__TrajStationType__INCL_x0020AZI_x0020and_x0020TVD = 32,
	witsml2__TrajStationType__interpolated = 33,
	witsml2__TrajStationType__marker_x0020MD = 34,
	witsml2__TrajStationType__marker_x0020TVD = 35,
	witsml2__TrajStationType__MD_x0020and_x0020INCL = 36,
	witsml2__TrajStationType__MD_x0020INCL_x0020and_x0020AZI = 37,
	witsml2__TrajStationType__N_x0020E_x0020and_x0020TVD = 38,
	witsml2__TrajStationType__NS_x0020EW_x0020and_x0020TVD = 39,
	witsml2__TrajStationType__target_x0020center = 40,
	witsml2__TrajStationType__target_x0020offset = 41,
	witsml2__TrajStationType__tie_x0020in_x0020point = 42,
	witsml2__TrajStationType__turnrate_x0020to_x0020AZI = 43,
	witsml2__TrajStationType__turnrate_x0020to_x0020delta_MD = 44,
	witsml2__TrajStationType__turnrate_x0020to_x0020MD = 45,
	witsml2__TrajStationType__turnrate_x0020to_x0020TVD = 46,
	witsml2__TrajStationType__unknown = 47
};
#endif

/* eml2_2ForGsoap.h:16904 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStnCalcAlgorithm (-1365)

/* witsml2:TrajStnCalcAlgorithm */
enum witsml2__TrajStnCalcAlgorithm {
	witsml2__TrajStnCalcAlgorithm__average_x0020angle = 0,
	witsml2__TrajStnCalcAlgorithm__balanced_x0020tangential = 1,
	witsml2__TrajStnCalcAlgorithm__constant_x0020tool_x0020face = 2,
	witsml2__TrajStnCalcAlgorithm__custom = 3,
	witsml2__TrajStnCalcAlgorithm__inertial = 4,
	witsml2__TrajStnCalcAlgorithm__minimum_x0020curvature = 5,
	witsml2__TrajStnCalcAlgorithm__radius_x0020of_x0020curvature = 6,
	witsml2__TrajStnCalcAlgorithm__tangential = 7
};
#endif

/* eml2_2ForGsoap.h:16922 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TypeSurveyTool (-1366)

/* witsml2:TypeSurveyTool */
enum witsml2__TypeSurveyTool {
	witsml2__TypeSurveyTool__gyroscopic_x0020inertial = 0,
	witsml2__TypeSurveyTool__gyroscopic_x0020MWD = 1,
	witsml2__TypeSurveyTool__gyroscopic_x0020north_x0020seeking = 2,
	witsml2__TypeSurveyTool__magnetic_x0020multiple_shot = 3,
	witsml2__TypeSurveyTool__magnetic_x0020MWD = 4,
	witsml2__TypeSurveyTool__magnetic_x0020single_shot = 5
};
#endif

/* eml2_2ForGsoap.h:16935 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AccelerometerAxisCombination
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AccelerometerAxisCombination (-1367)

/* witsml2:AccelerometerAxisCombination */
enum witsml2__AccelerometerAxisCombination {
	witsml2__AccelerometerAxisCombination__xy = 0,
	witsml2__AccelerometerAxisCombination__xyz = 1
};
#endif

/* eml2_2ForGsoap.h:16944 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AuthorizationStatus (-1368)

/* witsml2:AuthorizationStatus */
enum witsml2__AuthorizationStatus {
	witsml2__AuthorizationStatus__agreed = 0,
	witsml2__AuthorizationStatus__provisional = 1,
	witsml2__AuthorizationStatus__obsolete = 2
};
#endif

/* eml2_2ForGsoap.h:16954 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsidered
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsidered (-1369)

/* witsml2:CorrectionConsidered */
enum witsml2__CorrectionConsidered {
	witsml2__CorrectionConsidered__depth = 0,
	witsml2__CorrectionConsidered__dual_x0020inclinometer = 1,
	witsml2__CorrectionConsidered__sag = 2,
	witsml2__CorrectionConsidered__cosag = 3,
	witsml2__CorrectionConsidered__axial_x0020magnetic_x0020interference = 4,
	witsml2__CorrectionConsidered__drill_x0020string_x0020magnetic_x0020interference = 5,
	witsml2__CorrectionConsidered__international_x0020geomagnetic_x0020reference_x0020field = 6,
	witsml2__CorrectionConsidered__high_x0020resolution_x0020geomagnetic_x0020model = 7,
	witsml2__CorrectionConsidered__in_x0020field_x0020referencing_x00201 = 8,
	witsml2__CorrectionConsidered__in_x0020field_x0020referencing_x00202 = 9,
	witsml2__CorrectionConsidered__in_x0020hole_x0020referencing = 10,
	witsml2__CorrectionConsidered__single_x0020station_x0020analysis = 11,
	witsml2__CorrectionConsidered__multi_x0020station_x0020analysis = 12
};
#endif

/* eml2_2ForGsoap.h:16974 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorKind (-1370)

/* witsml2:ErrorKind */
enum witsml2__ErrorKind {
	witsml2__ErrorKind__alignment = 0,
	witsml2__ErrorKind__azimuth_x0020reference = 1,
	witsml2__ErrorKind__depth = 2,
	witsml2__ErrorKind__magnetic = 3,
	witsml2__ErrorKind__reading = 4,
	witsml2__ErrorKind__sensor = 5
};
#endif

/* eml2_2ForGsoap.h:16987 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorPropagationMode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorPropagationMode (-1371)

/* witsml2:ErrorPropagationMode */
enum witsml2__ErrorPropagationMode {
	witsml2__ErrorPropagationMode__B = 'B',
	witsml2__ErrorPropagationMode__G = 'G',
	witsml2__ErrorPropagationMode__R = 'R',
	witsml2__ErrorPropagationMode__S = 'S',
	witsml2__ErrorPropagationMode__W = 'W'
};
#endif

/* eml2_2ForGsoap.h:16999 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GyroAxisCombination
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GyroAxisCombination (-1372)

/* witsml2:GyroAxisCombination */
enum witsml2__GyroAxisCombination {
	witsml2__GyroAxisCombination__z = 'z',
	witsml2__GyroAxisCombination__xy = 123,
	witsml2__GyroAxisCombination__xyz = 124
};
#endif

/* eml2_2ForGsoap.h:17009 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GyroMode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GyroMode (-1373)

/* witsml2:GyroMode */
enum witsml2__GyroMode {
	witsml2__GyroMode__continuous = 0,
	witsml2__GyroMode__stationary = 1
};
#endif

/* eml2_2ForGsoap.h:17021 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MisalignmentMode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MisalignmentMode (-1374)

/* witsml2:MisalignmentMode */
enum witsml2__MisalignmentMode {
	witsml2__MisalignmentMode__1 = 1,
	witsml2__MisalignmentMode__2 = 2,
	witsml2__MisalignmentMode__3 = 3
};
#endif

/* eml2_2ForGsoap.h:17031 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingCondition
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingCondition (-1375)

/* witsml2:OperatingCondition */
enum witsml2__OperatingCondition {
	witsml2__OperatingCondition__bent_x0020sub = 0,
	witsml2__OperatingCondition__cable_x0020conveyed = 1,
	witsml2__OperatingCondition__casing = 2,
	witsml2__OperatingCondition__casing_x0020collar_x0020locator = 3,
	witsml2__OperatingCondition__centrollers = 4,
	witsml2__OperatingCondition__drill_x0020pipe = 5,
	witsml2__OperatingCondition__dropped = 6,
	witsml2__OperatingCondition__fast_x0020logging_x0020speed = 7,
	witsml2__OperatingCondition__floating = 8,
	witsml2__OperatingCondition__large_x0020inside_x0020diameter = 9,
	witsml2__OperatingCondition__single_x0020shot = 10,
	witsml2__OperatingCondition__slow_x0020logging_x0020speed = 11
};
#endif

/* eml2_2ForGsoap.h:17050 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolKind (-1376)

/* witsml2:ToolKind */
enum witsml2__ToolKind {
	witsml2__ToolKind__gyroscopic = 0,
	witsml2__ToolKind__magnetic = 1,
	witsml2__ToolKind__utility = 2
};
#endif

/* eml2_2ForGsoap.h:17060 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKind (-1377)

/* witsml2:ToolSubKind */
enum witsml2__ToolSubKind {
	witsml2__ToolSubKind__blind = 0,
	witsml2__ToolSubKind__blind_x0020plus_x0020trend = 1,
	witsml2__ToolSubKind__camera_x0020based_x0020film_x0020gyro_x0020multi_x0020shot = 2,
	witsml2__ToolSubKind__camera_x0020based_x0020film_x0020gyro_x0020single_x0020shot = 3,
	witsml2__ToolSubKind__camera_x0020based_x0020film_x0020magnetic_x0020multi_x0020shot = 4,
	witsml2__ToolSubKind__camera_x0020based_x0020film_x0020magnetic_x0020single_x0020shot = 5,
	witsml2__ToolSubKind__dipmeter = 6,
	witsml2__ToolSubKind__electro_x0020magnetic_x0020survey = 7,
	witsml2__ToolSubKind__ferranti_x0020inertial_x0020navigation_x0020system = 8,
	witsml2__ToolSubKind__gyro_x0020suspicious = 9,
	witsml2__ToolSubKind__gyro_x0020while_x0020drilling = 10,
	witsml2__ToolSubKind__inclinometer_x0020actual = 11,
	witsml2__ToolSubKind__inclinometer_x0020planned = 12,
	witsml2__ToolSubKind__inclinometer_x0020plus_x0020trend = 13,
	witsml2__ToolSubKind__magnetic_x0020while_x0020drilling = 14,
	witsml2__ToolSubKind__north_x0020seeking_x0020gyro = 15,
	witsml2__ToolSubKind__ring_x0020laser_x0020inertial_x0020guidance_x0020surveyor = 16,
	witsml2__ToolSubKind__surface_x0020readout_x0020gyro_x0020multi_x0020shot = 17,
	witsml2__ToolSubKind__surface_x0020readout_x0020gyro_x0020single_x0020shot = 18,
	witsml2__ToolSubKind__zero_x0020error = 19,
	witsml2__ToolSubKind__unknown = 20
};
#endif

/* eml2_2ForGsoap.h:17091 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BopType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BopType (-1378)

/* witsml2:BopType */
enum witsml2__BopType {
	witsml2__BopType__annular_x0020preventer = 0,
	witsml2__BopType__shear_x0020ram = 1,
	witsml2__BopType__blind_x0020ram = 2,
	witsml2__BopType__pipe_x0020ram = 3,
	witsml2__BopType__drilling_x0020spool = 4,
	witsml2__BopType__flexible_x0020joint = 5,
	witsml2__BopType__connector = 6
};
#endif

/* eml2_2ForGsoap.h:17108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DerrickType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DerrickType (-1379)

/* witsml2:DerrickType */
enum witsml2__DerrickType {
	witsml2__DerrickType__double_ = 0,
	witsml2__DerrickType__quadruple = 1,
	witsml2__DerrickType__slant = 2,
	witsml2__DerrickType__triple = 3
};
#endif

/* eml2_2ForGsoap.h:17134 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrawWorksType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrawWorksType (-1380)

/* witsml2:DrawWorksType */
enum witsml2__DrawWorksType {
	witsml2__DrawWorksType__mechanical = 0,
	witsml2__DrawWorksType__standard_x0020electric = 1,
	witsml2__DrawWorksType__diesel_x0020electric = 2,
	witsml2__DrawWorksType__ram_x0020rig = 3
};
#endif

/* eml2_2ForGsoap.h:17148 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DriveType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DriveType (-1381)

/* witsml2:DriveType */
enum witsml2__DriveType {
	witsml2__DriveType__coiled_x0020tubing = 0,
	witsml2__DriveType__rotary_x0020kelly_x0020drive = 1,
	witsml2__DriveType__top_x0020drive = 2
};
#endif

/* eml2_2ForGsoap.h:17170 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PitType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PitType (-1382)

/* witsml2:PitType */
enum witsml2__PitType {
	witsml2__PitType__bulk = 0,
	witsml2__PitType__chemical = 1,
	witsml2__PitType__drilling = 2,
	witsml2__PitType__mix = 3,
	witsml2__PitType__mud_x0020cleaning = 4,
	witsml2__PitType__sand_x0020trap = 5,
	witsml2__PitType__slug = 6,
	witsml2__PitType__storage = 7,
	witsml2__PitType__surge_x0020tank = 8,
	witsml2__PitType__trip_x0020tank = 9
};
#endif

/* eml2_2ForGsoap.h:17193 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpType (-1383)

/* witsml2:PumpType */
enum witsml2__PumpType {
	witsml2__PumpType__centrifugal = 0,
	witsml2__PumpType__duplex = 1,
	witsml2__PumpType__triplex = 2
};
#endif

/* eml2_2ForGsoap.h:17215 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RigType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RigType (-1384)

/* witsml2:RigType */
enum witsml2__RigType {
	witsml2__RigType__barge = 0,
	witsml2__RigType__coiled_x0020tubing = 1,
	witsml2__RigType__floater = 2,
	witsml2__RigType__jackup = 3,
	witsml2__RigType__land = 4,
	witsml2__RigType__platform = 5,
	witsml2__RigType__semi_submersible = 6
};
#endif

/* eml2_2ForGsoap.h:17253 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurfEquipType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurfEquipType (-1385)

/* witsml2:SurfEquipType */
enum witsml2__SurfEquipType {
	witsml2__SurfEquipType__IADC = 0,
	witsml2__SurfEquipType__custom = 1,
	witsml2__SurfEquipType__coiled_x0020tubing = 2,
	witsml2__SurfEquipType__unknown = 3
};
#endif

/* eml2_2ForGsoap.h:17270 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskAffectedPersonnel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskAffectedPersonnel (-1386)

/* witsml2:RiskAffectedPersonnel */
enum witsml2__RiskAffectedPersonnel {
	witsml2__RiskAffectedPersonnel__cementer = 0,
	witsml2__RiskAffectedPersonnel__company_x0020man = 1,
	witsml2__RiskAffectedPersonnel__contractor = 2,
	witsml2__RiskAffectedPersonnel__directional_x0020driller = 3,
	witsml2__RiskAffectedPersonnel__driller = 4,
	witsml2__RiskAffectedPersonnel__drilling_x0020engineer = 5,
	witsml2__RiskAffectedPersonnel__drilling_x0020superintendent = 6,
	witsml2__RiskAffectedPersonnel__drilling_x0020team = 7,
	witsml2__RiskAffectedPersonnel__facility_x0020engineer = 8,
	witsml2__RiskAffectedPersonnel__field_x0020service_x0020manager = 9,
	witsml2__RiskAffectedPersonnel__foreman = 10,
	witsml2__RiskAffectedPersonnel__general_x0020service_x0020supervisor = 11,
	witsml2__RiskAffectedPersonnel__geologist = 12,
	witsml2__RiskAffectedPersonnel__member = 13,
	witsml2__RiskAffectedPersonnel__mud_x0020engineer = 14,
	witsml2__RiskAffectedPersonnel__mud_x0020logger = 15,
	witsml2__RiskAffectedPersonnel__MWD_x0020or_x0020LWD_x0020engineer = 16,
	witsml2__RiskAffectedPersonnel__perform_x0020engineer = 17,
	witsml2__RiskAffectedPersonnel__petrophysicist = 18,
	witsml2__RiskAffectedPersonnel__production_x0020engineer = 19,
	witsml2__RiskAffectedPersonnel__remotely_x0020operated_x0020vehicle_x0020engineer = 20,
	witsml2__RiskAffectedPersonnel__safety_x0020manager = 21,
	witsml2__RiskAffectedPersonnel__sales_x0020engineer = 22,
	witsml2__RiskAffectedPersonnel__service_x0020supervisor = 23,
	witsml2__RiskAffectedPersonnel__technical_x0020support = 24,
	witsml2__RiskAffectedPersonnel__tool_x0020pusher = 25,
	witsml2__RiskAffectedPersonnel__wireline_x0020engineer = 26
};
#endif

/* eml2_2ForGsoap.h:17310 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskCategory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskCategory (-1387)

/* witsml2:RiskCategory */
enum witsml2__RiskCategory {
	witsml2__RiskCategory__hydraulics = 0,
	witsml2__RiskCategory__mechanical = 1,
	witsml2__RiskCategory__time_x0020related = 2,
	witsml2__RiskCategory__wellbore_x0020stability = 3,
	witsml2__RiskCategory__directional_x0020drilling = 4,
	witsml2__RiskCategory__bit = 5,
	witsml2__RiskCategory__equipment_x0020failure = 6,
	witsml2__RiskCategory__completion = 7,
	witsml2__RiskCategory__casing = 8,
	witsml2__RiskCategory__other = 9,
	witsml2__RiskCategory__HSE = 10
};
#endif

/* eml2_2ForGsoap.h:17337 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskSubCategory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskSubCategory (-1388)

/* witsml2:RiskSubCategory */
enum witsml2__RiskSubCategory {
	witsml2__RiskSubCategory__gas_x0020kick = 0,
	witsml2__RiskSubCategory__shallow_x0020water_x0020influx = 1,
	witsml2__RiskSubCategory__other_x0020influx_x0020or_x0020kicks = 2,
	witsml2__RiskSubCategory__loss_x0020circulation = 3,
	witsml2__RiskSubCategory__poor_x0020hole_x0020cleaning = 4,
	witsml2__RiskSubCategory__good_x0020hole_x0020cleaning_x0020at_x0020high_x0020ROP = 5,
	witsml2__RiskSubCategory__high_x0020mud_x0020weight = 6,
	witsml2__RiskSubCategory__special_x0020additives_x0020needed = 7,
	witsml2__RiskSubCategory__gumbo_x0020problems = 8,
	witsml2__RiskSubCategory__high_x0020ECD_x0020__x0020rheology_x0020related = 9,
	witsml2__RiskSubCategory__excessive_x0020circulation = 10,
	witsml2__RiskSubCategory__performing_x0020a_x0020kill = 11,
	witsml2__RiskSubCategory__mud_x0020weight_x0020change = 12,
	witsml2__RiskSubCategory__excessive_x0020pipe_x0020cement_x0020scaling = 13,
	witsml2__RiskSubCategory__pit_x0020gain_x0020or_x0020loss = 14,
	witsml2__RiskSubCategory__mud_x0020stability_x0020problems = 15,
	witsml2__RiskSubCategory__shallow_x0020gas_x0020flow = 16,
	witsml2__RiskSubCategory__twist_x0020off = 17,
	witsml2__RiskSubCategory__stuck_x0020pipe = 18,
	witsml2__RiskSubCategory__wireline_x0020stuck_x0020in_x0020hole = 19,
	witsml2__RiskSubCategory__stick_x0020and_x0020slip = 20,
	witsml2__RiskSubCategory__vibration_x0020__x0020axial = 21,
	witsml2__RiskSubCategory__vibration_x0020__x0020torsional = 22,
	witsml2__RiskSubCategory__vibration_x0020__x0020transverse = 23,
	witsml2__RiskSubCategory__vibration_x0020unknown_x0020or_x0020rough_x0020drilling = 24,
	witsml2__RiskSubCategory__uneven_x0020wear_x0020of_x0020BHA = 25,
	witsml2__RiskSubCategory__uneven_x0020wear_x0020of_x0020drillstring = 26,
	witsml2__RiskSubCategory__excessive_x0020torque = 27,
	witsml2__RiskSubCategory__excessive_x0020drag = 28,
	witsml2__RiskSubCategory__reaming_x0020greater_x0020than_x00202_x0020hours = 29,
	witsml2__RiskSubCategory__washouts = 30,
	witsml2__RiskSubCategory__tight_x0020hole_x0020or_x0020overPull = 31,
	witsml2__RiskSubCategory__failed_x0020inspections_x0020or_x0020fatigue_x0020wear = 32,
	witsml2__RiskSubCategory__mechanical = 33,
	witsml2__RiskSubCategory__drilling_x0020greater_x0020than_x00201000_x0020feet_x002fday = 34,
	witsml2__RiskSubCategory__drilling_x0020greater_x0020than_x00202000_x0020feet_x002fday = 35,
	witsml2__RiskSubCategory__drilling_x0020less_x0020than_x002020_x0020feet_x002fday = 36,
	witsml2__RiskSubCategory__trips_x0020greater_x0020than_x002024_x0020hours = 37,
	witsml2__RiskSubCategory__excessive_x0020time_x0020for_x0020BHA_x0020makeup = 38,
	witsml2__RiskSubCategory__waiting_x0020on_x0020decisions = 39,
	witsml2__RiskSubCategory__waiting_x0020on_x0020weather = 40,
	witsml2__RiskSubCategory__waiting_x0020on_x0020tools = 41,
	witsml2__RiskSubCategory__sloughing_x0020or_x0020packoffs = 42,
	witsml2__RiskSubCategory__ballooning = 43,
	witsml2__RiskSubCategory__fracture_x0020problems = 44,
	witsml2__RiskSubCategory__unstable_x0020zones = 45,
	witsml2__RiskSubCategory__formation_x0020integrity_x0020test = 46,
	witsml2__RiskSubCategory__leak_off_x0020test = 47,
	witsml2__RiskSubCategory__tectonics = 48,
	witsml2__RiskSubCategory__pore_x0020pressure = 49,
	witsml2__RiskSubCategory__breakouts = 50,
	witsml2__RiskSubCategory__bed_x0020parallel = 51,
	witsml2__RiskSubCategory__wellbore_x0020stability = 52,
	witsml2__RiskSubCategory__excessive_x0020doglegs = 53,
	witsml2__RiskSubCategory__sidetrack = 54,
	witsml2__RiskSubCategory__BHA_x0020change_x0020for_x0020directional = 55,
	witsml2__RiskSubCategory__wrong_x0020total_x0020flow_x0020area = 56,
	witsml2__RiskSubCategory__well_x0020collision_x0020__x0020actual = 57,
	witsml2__RiskSubCategory__well_x0020collision_x0020__x0020technical = 58,
	witsml2__RiskSubCategory__geosteering = 59,
	witsml2__RiskSubCategory__abnormal_x0020tendency_x0020changes = 60,
	witsml2__RiskSubCategory__resurveying = 61,
	witsml2__RiskSubCategory__in_field_x0020referencing_x0020_x0028IFR_x0029_x0020actions = 62,
	witsml2__RiskSubCategory__bit_x0020or_x0020BHA_x0020performance = 63,
	witsml2__RiskSubCategory__drilling_x0020optimization = 64,
	witsml2__RiskSubCategory__bit_x0020balling = 'A',
	witsml2__RiskSubCategory__lost_x0020cones_x0020or_x0020broken_x0020cutters = 'B',
	witsml2__RiskSubCategory__excessive_x0020bit_x0020wear_x0020or_x0020gauge = 'C',
	witsml2__RiskSubCategory__low_x0020rate_x0020of_x0020bit_x0020penetration = 'D',
	witsml2__RiskSubCategory__high_x0020rate_x0020of_x0020bit_x0020penetration = 'E',
	witsml2__RiskSubCategory__downhole_x0020tool = 'F',
	witsml2__RiskSubCategory__surface_x0020system = 'G',
	witsml2__RiskSubCategory__motor_x0020or_x0020rotary_x0020steerable_x0020system_x0020failure = 'H',
	witsml2__RiskSubCategory__topdrive_x0020failure = 'I',
	witsml2__RiskSubCategory__hoisting_x0020equipment_x0020failure = 'J',
	witsml2__RiskSubCategory__circulating_x0020equipment_x0020failure = 'K',
	witsml2__RiskSubCategory__electrical_x0020system_x0020failure = 'L',
	witsml2__RiskSubCategory__blow_x0020out_x0020preventer_x0020events = 'M',
	witsml2__RiskSubCategory__surface_x0020instrumentation_x0020problems = 'N',
	witsml2__RiskSubCategory__rig_x0020communications = 'O',
	witsml2__RiskSubCategory__completion_x0020equipment_x0020failure = 'P',
	witsml2__RiskSubCategory__miscellaneous_x0020rig_x0020equipment = 'Q',
	witsml2__RiskSubCategory__tool_x0020or_x0020equipment_x0020failure = 'R',
	witsml2__RiskSubCategory__squeeze_x0020jobs = 'S',
	witsml2__RiskSubCategory__casing_x0020surge_x0020losses = 'T',
	witsml2__RiskSubCategory__stuck_x0020casing_x0020or_x0020completion = 'U',
	witsml2__RiskSubCategory__shoe_x0020failures = 'V',
	witsml2__RiskSubCategory__early_x0020cement_x0020setup = 'W',
	witsml2__RiskSubCategory__casing_x0020collapse = 'X',
	witsml2__RiskSubCategory__milling = 'Y',
	witsml2__RiskSubCategory__excessive_x0020casing_x0020wear_x0020or_x0020cuttings = 'Z',
	witsml2__RiskSubCategory__excessive_x0020formation_x0020damage_x0020or_x0020skin = 91,
	witsml2__RiskSubCategory__casing_x0020rotation_x0020or_x0020reciprocation_x0020rqd = 92,
	witsml2__RiskSubCategory__broaching = 93,
	witsml2__RiskSubCategory__completion_x0020or_x0020casing = 94,
	witsml2__RiskSubCategory__stratigraphy = 95,
	witsml2__RiskSubCategory__fishing = 96,
	witsml2__RiskSubCategory__junk_x0020in_x0020hole = 'a',
	witsml2__RiskSubCategory__delay_x0020due_x0020to_x0020political_x0020unrest = 'b',
	witsml2__RiskSubCategory__rig_x0020move = 'c',
	witsml2__RiskSubCategory__gas_x0020hydrates = 'd',
	witsml2__RiskSubCategory__pending_x0020analysis = 'e',
	witsml2__RiskSubCategory__riser_x0020disconnect = 'f',
	witsml2__RiskSubCategory__other = 'g',
	witsml2__RiskSubCategory__personnel = 'h',
	witsml2__RiskSubCategory__environmental = 'i',
	witsml2__RiskSubCategory__automotive = 'j',
	witsml2__RiskSubCategory__asset = 'k',
	witsml2__RiskSubCategory__information = 'l',
	witsml2__RiskSubCategory__time = 'm',
	witsml2__RiskSubCategory__HSE = 'n'
};
#endif

/* eml2_2ForGsoap.h:17503 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskType (-1389)

/* witsml2:RiskType */
enum witsml2__RiskType {
	witsml2__RiskType__risk = 0,
	witsml2__RiskType__event = 1,
	witsml2__RiskType__near_x0020miss = 2,
	witsml2__RiskType__best_x0020practice = 3,
	witsml2__RiskType__lessons_x0020learned = 4,
	witsml2__RiskType__other = 5
};
#endif

/* eml2_2ForGsoap.h:17519 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PIDXCommodityCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PIDXCommodityCode (-1390)

/* witsml2:PIDXCommodityCode */
enum witsml2__PIDXCommodityCode {
	witsml2__PIDXCommodityCode__71131001 = 71131001LL,
	witsml2__PIDXCommodityCode__71131002 = 71131002LL,
	witsml2__PIDXCommodityCode__71131003 = 71131003LL,
	witsml2__PIDXCommodityCode__71131004 = 71131004LL,
	witsml2__PIDXCommodityCode__71131005 = 71131005LL,
	witsml2__PIDXCommodityCode__71131006 = 71131006LL,
	witsml2__PIDXCommodityCode__71131007 = 71131007LL,
	witsml2__PIDXCommodityCode__71131008 = 71131008LL,
	witsml2__PIDXCommodityCode__71131009 = 71131009LL,
	witsml2__PIDXCommodityCode__71131010 = 71131010LL,
	witsml2__PIDXCommodityCode__71131011 = 71131011LL,
	witsml2__PIDXCommodityCode__71131012 = 71131012LL,
	witsml2__PIDXCommodityCode__71131013 = 71131013LL,
	witsml2__PIDXCommodityCode__71131014 = 71131014LL,
	witsml2__PIDXCommodityCode__71131015 = 71131015LL,
	witsml2__PIDXCommodityCode__71131016 = 71131016LL,
	witsml2__PIDXCommodityCode__71131018 = 71131018LL,
	witsml2__PIDXCommodityCode__71131019 = 71131019LL
};
#endif

/* eml2_2ForGsoap.h:17547 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ProppantAgentKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ProppantAgentKind (-1391)

/* witsml2:ProppantAgentKind */
enum witsml2__ProppantAgentKind {
	witsml2__ProppantAgentKind__ceramic = 0,
	witsml2__ProppantAgentKind__resin_x0020coated_x0020ceramic = 1,
	witsml2__ProppantAgentKind__resin_x0020coated_x0020sand = 2,
	witsml2__ProppantAgentKind__sand = 3
};
#endif

/* eml2_2ForGsoap.h:17561 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditiveKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditiveKind (-1392)

/* witsml2:StimAdditiveKind */
enum witsml2__StimAdditiveKind {
	witsml2__StimAdditiveKind__acid = 0,
	witsml2__StimAdditiveKind__activator = 1,
	witsml2__StimAdditiveKind__biocide = 2,
	witsml2__StimAdditiveKind__breaker = 3,
	witsml2__StimAdditiveKind__breaker_x0020aid = 4,
	witsml2__StimAdditiveKind__buffer = 5,
	witsml2__StimAdditiveKind__clay_x0020stabilizer = 6,
	witsml2__StimAdditiveKind__corrosion_x0020inhibitor = 7,
	witsml2__StimAdditiveKind__corrosion_x0020inhibitor_x0020aid = 8,
	witsml2__StimAdditiveKind__crosslinker = 9,
	witsml2__StimAdditiveKind__delaying_x0020agent = 10,
	witsml2__StimAdditiveKind__fibers = 11,
	witsml2__StimAdditiveKind__fluid_x0020loss_x0020additive = 12,
	witsml2__StimAdditiveKind__foamer = 13,
	witsml2__StimAdditiveKind__friction_x0020reducer = 14,
	witsml2__StimAdditiveKind__gelling_x0020agent = 15,
	witsml2__StimAdditiveKind__iron_x0020control_x0020additive = 16,
	witsml2__StimAdditiveKind__mutual_x0020solvent = 17,
	witsml2__StimAdditiveKind__salt = 18,
	witsml2__StimAdditiveKind__stabilizer = 19,
	witsml2__StimAdditiveKind__surfactant = 20
};
#endif

/* eml2_2ForGsoap.h:17592 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTestAnalysisMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTestAnalysisMethod (-1393)

/* witsml2:StimFetTestAnalysisMethod */
enum witsml2__StimFetTestAnalysisMethod {
	witsml2__StimFetTestAnalysisMethod__average = 0,
	witsml2__StimFetTestAnalysisMethod__delta_x0020pressure_x0020over_x0020g_time = 1,
	witsml2__StimFetTestAnalysisMethod__delta_x0020pressure_x0020over_x0020linear_x0020time = 2,
	witsml2__StimFetTestAnalysisMethod__delta_x0020pressure_x0020over_x0020radial_x0020time = 3,
	witsml2__StimFetTestAnalysisMethod__gdk_x00202_d = 4,
	witsml2__StimFetTestAnalysisMethod__horner = 5,
	witsml2__StimFetTestAnalysisMethod__linear = 6,
	witsml2__StimFetTestAnalysisMethod__log_log = 7,
	witsml2__StimFetTestAnalysisMethod__nolte = 8,
	witsml2__StimFetTestAnalysisMethod__other = 9,
	witsml2__StimFetTestAnalysisMethod__pdl_x0020coefficient = 10,
	witsml2__StimFetTestAnalysisMethod__perkins_x0020and_x0020kern_x00202_d = 11,
	witsml2__StimFetTestAnalysisMethod__radial_x00202_d = 12,
	witsml2__StimFetTestAnalysisMethod__square_x0020root = 13,
	witsml2__StimFetTestAnalysisMethod__third_party_x0020software = 14
};
#endif

/* eml2_2ForGsoap.h:17617 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPathType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPathType (-1394)

/* witsml2:StimFlowPathType */
enum witsml2__StimFlowPathType {
	witsml2__StimFlowPathType__annulus = 0,
	witsml2__StimFlowPathType__casing = 1,
	witsml2__StimFlowPathType__drill_x0020pipe = 2,
	witsml2__StimFlowPathType__open_x0020hole = 3,
	witsml2__StimFlowPathType__tubing = 4,
	witsml2__StimFlowPathType__tubing_x0020and_x0020annulus = 5
};
#endif

/* eml2_2ForGsoap.h:17651 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidKind (-1395)

/* witsml2:StimFluidKind */
enum witsml2__StimFluidKind {
	witsml2__StimFluidKind__acid_based = 0,
	witsml2__StimFluidKind__gas = 1,
	witsml2__StimFluidKind__oil_based = 2,
	witsml2__StimFluidKind__water_based = 3
};
#endif

/* eml2_2ForGsoap.h:17674 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidSubtype
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidSubtype (-1396)

/* witsml2:StimFluidSubtype */
enum witsml2__StimFluidSubtype {
	witsml2__StimFluidSubtype__acid = 0,
	witsml2__StimFluidSubtype__base = 1,
	witsml2__StimFluidSubtype__carbon_x0020dioxide = 2,
	witsml2__StimFluidSubtype__carbon_x0020dioxide_x0020and_x0020nitrogen = 3,
	witsml2__StimFluidSubtype__carbon_x0020dioxide_x0020and_x0020water = 4,
	witsml2__StimFluidSubtype__condensate = 5,
	witsml2__StimFluidSubtype__cross_linked_x0020gel = 6,
	witsml2__StimFluidSubtype__crude_x0020oil = 7,
	witsml2__StimFluidSubtype__diesel = 8,
	witsml2__StimFluidSubtype__foam = 9,
	witsml2__StimFluidSubtype__fracturing_x0020oil = 10,
	witsml2__StimFluidSubtype__fresh_x0020water = 11,
	witsml2__StimFluidSubtype__gelled_x0020acid = 12,
	witsml2__StimFluidSubtype__gelled_x0020condensate = 13,
	witsml2__StimFluidSubtype__gelled_x0020crude = 14,
	witsml2__StimFluidSubtype__gelled_x0020diesel = 15,
	witsml2__StimFluidSubtype__gelled_x0020oil = 16,
	witsml2__StimFluidSubtype__gelled_x0020salt_x0020water = 17,
	witsml2__StimFluidSubtype__hot_x0020condensate = 18,
	witsml2__StimFluidSubtype__hot_x0020fresh_x0020water = 19,
	witsml2__StimFluidSubtype__hot_x0020oil = 20,
	witsml2__StimFluidSubtype__hot_x0020salt_x0020water = 21,
	witsml2__StimFluidSubtype__hybrid = 22,
	witsml2__StimFluidSubtype__linear_x0020gel = 23,
	witsml2__StimFluidSubtype__liquefied_x0020petroleum_x0020gas = 24,
	witsml2__StimFluidSubtype__nitrogen = 25,
	witsml2__StimFluidSubtype__oil = 26,
	witsml2__StimFluidSubtype__other = 27,
	witsml2__StimFluidSubtype__produced_x0020water = 28,
	witsml2__StimFluidSubtype__salt_x0020water = 29,
	witsml2__StimFluidSubtype__slick_x0020water = 30
};
#endif

/* eml2_2ForGsoap.h:17715 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversionMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversionMethod (-1397)

/* witsml2:StimJobDiversionMethod */
enum witsml2__StimJobDiversionMethod {
	witsml2__StimJobDiversionMethod__ball_x0020sealer = 0,
	witsml2__StimJobDiversionMethod__bands = 1,
	witsml2__StimJobDiversionMethod__chemical = 2,
	witsml2__StimJobDiversionMethod__fibers = 3,
	witsml2__StimJobDiversionMethod__other = 4,
	witsml2__StimJobDiversionMethod__packer = 5,
	witsml2__StimJobDiversionMethod__solid_x0020particle = 6,
	witsml2__StimJobDiversionMethod__straddle_x0020packer = 7
};
#endif

/* eml2_2ForGsoap.h:17733 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialKind (-1398)

/* witsml2:StimMaterialKind */
enum witsml2__StimMaterialKind {
	witsml2__StimMaterialKind__additive = 0,
	witsml2__StimMaterialKind__brine = 1,
	witsml2__StimMaterialKind__CO2 = 2,
	witsml2__StimMaterialKind__gel = 3,
	witsml2__StimMaterialKind__N2 = 4,
	witsml2__StimMaterialKind__other = 5,
	witsml2__StimMaterialKind__proppant_x0020agent = 6,
	witsml2__StimMaterialKind__water = 7
};
#endif

/* eml2_2ForGsoap.h:17751 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluid (-1399)

/* witsml2:ShowFluid */
enum witsml2__ShowFluid {
	witsml2__ShowFluid__gas = 0,
	witsml2__ShowFluid__oil = 1
};
#endif

/* eml2_2ForGsoap.h:17763 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluorescence (-1400)

/* witsml2:ShowFluorescence */
enum witsml2__ShowFluorescence {
	witsml2__ShowFluorescence__faint = 0,
	witsml2__ShowFluorescence__bright = 1,
	witsml2__ShowFluorescence__none = 2
};
#endif

/* eml2_2ForGsoap.h:17776 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowLevel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowLevel (-1401)

/* witsml2:ShowLevel */
enum witsml2__ShowLevel {
	witsml2__ShowLevel__blooming = 0,
	witsml2__ShowLevel__streaming = 1
};
#endif

/* eml2_2ForGsoap.h:17788 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowRating
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowRating (-1402)

/* witsml2:ShowRating */
enum witsml2__ShowRating {
	witsml2__ShowRating__none = 0,
	witsml2__ShowRating__very_x0020poor = 1,
	witsml2__ShowRating__poor = 2,
	witsml2__ShowRating__fair = 3,
	witsml2__ShowRating__good = 4,
	witsml2__ShowRating__very_x0020good = 5
};
#endif

/* eml2_2ForGsoap.h:17804 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowSpeed (-1403)

/* witsml2:ShowSpeed */
enum witsml2__ShowSpeed {
	witsml2__ShowSpeed__slow = 0,
	witsml2__ShowSpeed__moderately_x0020fast = 1,
	witsml2__ShowSpeed__fast = 2,
	witsml2__ShowSpeed__instantaneous = 3,
	witsml2__ShowSpeed__none = 4
};
#endif

/* eml2_2ForGsoap.h:17819 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ConcentrationParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ConcentrationParameterKind (-1404)

/* witsml2:ConcentrationParameterKind */
enum witsml2__ConcentrationParameterKind {
	witsml2__ConcentrationParameterKind__cuttings_x0020gas = 0
};
#endif

/* eml2_2ForGsoap.h:17833 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ForceParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ForceParameterKind (-1405)

/* witsml2:ForceParameterKind */
enum witsml2__ForceParameterKind {
	witsml2__ForceParameterKind__overpull_x0020on_x0020connection = 0,
	witsml2__ForceParameterKind__overpull_x0020on_x0020trip = 1
};
#endif

/* eml2_2ForGsoap.h:17851 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameterKind (-1406)

/* witsml2:MudLogStringParameterKind */
enum witsml2__MudLogStringParameterKind {
	witsml2__MudLogStringParameterKind__bit_x0020parameters = 0,
	witsml2__MudLogStringParameterKind__bit_x0020type_x0020comment = 1,
	witsml2__MudLogStringParameterKind__casing_x0020point_x0020comment = 2,
	witsml2__MudLogStringParameterKind__chromatograph_x0020comment = 3,
	witsml2__MudLogStringParameterKind__circulation_x0020system_x0020comment = 4,
	witsml2__MudLogStringParameterKind__core_x0020interval_x0020comment = 5,
	witsml2__MudLogStringParameterKind__drilling_x0020data_x0020comment = 6,
	witsml2__MudLogStringParameterKind__gas_x0020peaks_x0020comment = 7,
	witsml2__MudLogStringParameterKind__gas_x0020ratio_x0020comment = 8,
	witsml2__MudLogStringParameterKind__general_x0020engineering_x0020comment = 9,
	witsml2__MudLogStringParameterKind__lithlog_x0020comment = 10,
	witsml2__MudLogStringParameterKind__LWD_x0020comment = 11,
	witsml2__MudLogStringParameterKind__marker_x0020or_x0020formation_x0020top_x0020comment = 12,
	witsml2__MudLogStringParameterKind__midnight_x0020depth_x0020date = 13,
	witsml2__MudLogStringParameterKind__mud_x0020check_x0020comment = 14,
	witsml2__MudLogStringParameterKind__mud_x0020data_x0020comment = 15,
	witsml2__MudLogStringParameterKind__mudlog_x0020comment = 16,
	witsml2__MudLogStringParameterKind__pressure_x0020data_x0020comment = 17,
	witsml2__MudLogStringParameterKind__shale_x0020density_x0020comment = 18,
	witsml2__MudLogStringParameterKind__short_x0020trip_x0020comment = 19,
	witsml2__MudLogStringParameterKind__show_x0020report_x0020comment = 20,
	witsml2__MudLogStringParameterKind__sidewall_x0020core_x0020comment = 21,
	witsml2__MudLogStringParameterKind__sliding_x0020Interval = 22,
	witsml2__MudLogStringParameterKind__steam_x0020still_x0020results_x0020comment = 23,
	witsml2__MudLogStringParameterKind__survey_x0020comment = 24,
	witsml2__MudLogStringParameterKind__temperature_x0020data_x0020comment = 25,
	witsml2__MudLogStringParameterKind__temperature_x0020trend_x0020comment = 26,
	witsml2__MudLogStringParameterKind__unknown = 27,
	witsml2__MudLogStringParameterKind__wireline_x0020log_x0020comment = 28
};
#endif

/* eml2_2ForGsoap.h:17890 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PressureGradientParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PressureGradientParameterKind (-1407)

/* witsml2:PressureGradientParameterKind */
enum witsml2__PressureGradientParameterKind {
	witsml2__PressureGradientParameterKind__direct_x0020pore_x0020pressure_x0020gradient_x0020measurement = 0,
	witsml2__PressureGradientParameterKind__fracture_x0020pressure_x0020gradient_x0020estimate = 1,
	witsml2__PressureGradientParameterKind__kick_x0020pressure_x0020gradient = 2,
	witsml2__PressureGradientParameterKind__lost_x0020returns = 3,
	witsml2__PressureGradientParameterKind__overburden_x0020gradient = 4,
	witsml2__PressureGradientParameterKind__pore_x0020pressure_x0020gradient_x0020estimate = 5
};
#endif

/* eml2_2ForGsoap.h:17906 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PressureParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PressureParameterKind (-1408)

/* witsml2:PressureParameterKind */
enum witsml2__PressureParameterKind {
	witsml2__PressureParameterKind__direct_x0020fracture_x0020pressure_x0020measurement = 0,
	witsml2__PressureParameterKind__pore_x0020pressure_x0020estimate_x0020while_x0020drilling = 1
};
#endif

/* eml2_2ForGsoap.h:17918 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatus (-1409)

/* witsml2:CompletionStatus */
enum witsml2__CompletionStatus {
	witsml2__CompletionStatus__active = 0,
	witsml2__CompletionStatus__inactive = 1,
	witsml2__CompletionStatus__permanently_x0020abandoned = 2,
	witsml2__CompletionStatus__planned = 3,
	witsml2__CompletionStatus__suspended = 4,
	witsml2__CompletionStatus__temporarily_x0020abandoned = 5,
	witsml2__CompletionStatus__testing = 6
};
#endif

/* eml2_2ForGsoap.h:17935 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatus (-1410)

/* witsml2:PerforationStatus */
enum witsml2__PerforationStatus {
	witsml2__PerforationStatus__open = 0,
	witsml2__PerforationStatus__proposed = 1,
	witsml2__PerforationStatus__squeezed = 2
};
#endif

/* eml2_2ForGsoap.h:17948 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PhysicalStatus (-1411)

/* witsml2:PhysicalStatus */
enum witsml2__PhysicalStatus {
	witsml2__PhysicalStatus__closed = 0,
	witsml2__PhysicalStatus__open = 1,
	witsml2__PhysicalStatus__proposed = 2
};
#endif

/* eml2_2ForGsoap.h:17969 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind (-1412)

/* eml22:ExistenceKind */
enum eml22__ExistenceKind {
	eml22__ExistenceKind__actual = 0,
	eml22__ExistenceKind__planned = 1,
	eml22__ExistenceKind__simulated = 2
};
#endif

/* eml2_2ForGsoap.h:17991 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank (-1413)

/* eml22:GeochronologicalRank */
enum eml22__GeochronologicalRank {
	eml22__GeochronologicalRank__eon = 0,
	eml22__GeochronologicalRank__era = 1,
	eml22__GeochronologicalRank__period = 2,
	eml22__GeochronologicalRank__epoch = 3,
	eml22__GeochronologicalRank__age = 4,
	eml22__GeochronologicalRank__chron = 5
};
#endif

/* eml2_2ForGsoap.h:18007 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind (-1414)

/* eml22:LithologyKind */
enum eml22__LithologyKind {
	eml22__LithologyKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml22__LithologyKind__alkali_x0020olivine_x0020basalt = 1,
	eml22__LithologyKind__amphibolite = 2,
	eml22__LithologyKind__andesite = 3,
	eml22__LithologyKind__anhydrite = 4,
	eml22__LithologyKind__anorthositic_x0020rock = 5,
	eml22__LithologyKind__anthracite = 6,
	eml22__LithologyKind__aplite = 7,
	eml22__LithologyKind__arenite = 8,
	eml22__LithologyKind__argillaceous = 9,
	eml22__LithologyKind__arkose = 10,
	eml22__LithologyKind__basalt = 11,
	eml22__LithologyKind__basanite = 12,
	eml22__LithologyKind__bauxite = 13,
	eml22__LithologyKind__bituminous_x0020coal = 14,
	eml22__LithologyKind__blueschist_x0020metamorphic_x0020rock = 15,
	eml22__LithologyKind__boninite = 16,
	eml22__LithologyKind__breccia = 17,
	eml22__LithologyKind__carbonate_x0020ooze = 18,
	eml22__LithologyKind__carbonatite = 19,
	eml22__LithologyKind__chalk = 20,
	eml22__LithologyKind__chert = 21,
	eml22__LithologyKind__clay = 22,
	eml22__LithologyKind__claystone = 23,
	eml22__LithologyKind__coal = 24,
	eml22__LithologyKind__conglomerate = 25,
	eml22__LithologyKind__dacite = 26,
	eml22__LithologyKind__diabase = 27,
	eml22__LithologyKind__diamictite = 28,
	eml22__LithologyKind__diorite = 29,
	eml22__LithologyKind__dioritoid = 30,
	eml22__LithologyKind__doleritic_x0020rock = 31,
	eml22__LithologyKind__dolomite = 32,
	eml22__LithologyKind__dolomitic = 33,
	eml22__LithologyKind__eclogite = 34,
	eml22__LithologyKind__exotic_x0020alkaline_x0020rock = 35,
	eml22__LithologyKind__feldspar = 36,
	eml22__LithologyKind__feldspathic_x0020arenite = 37,
	eml22__LithologyKind__fine_x0020grained_x0020igneous_x0020rock = 38,
	eml22__LithologyKind__foid_x0020dioritoid = 39,
	eml22__LithologyKind__foid_x0020gabbroid = 40,
	eml22__LithologyKind__foid_x0020syenitoid = 41,
	eml22__LithologyKind__foidite = 42,
	eml22__LithologyKind__foiditoid = 43,
	eml22__LithologyKind__foidolite = 44,
	eml22__LithologyKind__foliated_x0020metamorphic_x0020rock = 45,
	eml22__LithologyKind__fragmental_x0020igneous_x0020rock = 46,
	eml22__LithologyKind__gabbro = 47,
	eml22__LithologyKind__gabbroic_x0020rock = 48,
	eml22__LithologyKind__gabbroid = 49,
	eml22__LithologyKind__glauconite = 50,
	eml22__LithologyKind__gneiss = 51,
	eml22__LithologyKind__granite = 52,
	eml22__LithologyKind__granodiorite = 53,
	eml22__LithologyKind__granofels = 54,
	eml22__LithologyKind__granulite = 55,
	eml22__LithologyKind__gravel = 56,
	eml22__LithologyKind__greenstone = 57,
	eml22__LithologyKind__gumbo = 58,
	eml22__LithologyKind__gypsum = 59,
	eml22__LithologyKind__halite = 60,
	eml22__LithologyKind__hornfels = 61,
	eml22__LithologyKind__igneous_x0020rock = 62,
	eml22__LithologyKind__impact_x0020generated_x0020material = 63,
	eml22__LithologyKind__impure_x0020dolomite = 64,
	eml22__LithologyKind__impure_x0020limestone = 'A',
	eml22__LithologyKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 'B',
	eml22__LithologyKind__iron_x0020rich_x0020sedimentary_x0020rock = 'C',
	eml22__LithologyKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 'D',
	eml22__LithologyKind__komatiitic_x0020rock = 'E',
	eml22__LithologyKind__latitic_x0020rock = 'F',
	eml22__LithologyKind__lignite = 'G',
	eml22__LithologyKind__lime_x0020boundstone = 'H',
	eml22__LithologyKind__lime_x0020framestone = 'I',
	eml22__LithologyKind__lime_x0020grainstone = 'J',
	eml22__LithologyKind__lime_x0020mudstone = 'K',
	eml22__LithologyKind__lime_x0020packstone = 'L',
	eml22__LithologyKind__lime_x0020wackestone = 'M',
	eml22__LithologyKind__limestone = 'N',
	eml22__LithologyKind__marble = 'O',
	eml22__LithologyKind__marl = 'P',
	eml22__LithologyKind__metamorphic_x0020rock = 'Q',
	eml22__LithologyKind__mica_x0020schist = 'R',
	eml22__LithologyKind__migmatite = 'S',
	eml22__LithologyKind__monzogabbro = 'T',
	eml22__LithologyKind__mud = 'U',
	eml22__LithologyKind__mudstone = 'V',
	eml22__LithologyKind__mylonitic_x0020rock = 'W',
	eml22__LithologyKind__no_x0020description = 'X',
	eml22__LithologyKind__no_x0020sample = 'Y',
	eml22__LithologyKind__ooze = 'Z',
	eml22__LithologyKind__ophiolite = 91,
	eml22__LithologyKind__organic_x0020bearing_x0020mudstone = 92,
	eml22__LithologyKind__peat = 93,
	eml22__LithologyKind__pegmatite = 94,
	eml22__LithologyKind__peridotite = 95,
	eml22__LithologyKind__phaneritic_x0020igneous_x0020rock = 96,
	eml22__LithologyKind__phonolite = 'a',
	eml22__LithologyKind__phonolitoid = 'b',
	eml22__LithologyKind__phosphate = 'c',
	eml22__LithologyKind__phosphate_x0020rock = 'd',
	eml22__LithologyKind__phyllite = 'e',
	eml22__LithologyKind__porphyry = 'f',
	eml22__LithologyKind__potassium_x0020and_x0020magnesium_x0020salts = 'g',
	eml22__LithologyKind__pyroclastic_x0020breccia = 'h',
	eml22__LithologyKind__pyroclastic_x0020rock = 'i',
	eml22__LithologyKind__pyroxenite = 'j',
	eml22__LithologyKind__quartz_x0020arenite = 'k',
	eml22__LithologyKind__quartzite = 'l',
	eml22__LithologyKind__rhyolite = 'm',
	eml22__LithologyKind__rock_x0020salt = 'n',
	eml22__LithologyKind__sand = 'o',
	eml22__LithologyKind__sandstone = 'p',
	eml22__LithologyKind__sandy = 'q',
	eml22__LithologyKind__sapropel = 'r',
	eml22__LithologyKind__schist = 's',
	eml22__LithologyKind__serpentinite = 't',
	eml22__LithologyKind__shale = 'u',
	eml22__LithologyKind__siliceous_x0020ooze = 'v',
	eml22__LithologyKind__silt = 'w',
	eml22__LithologyKind__siltstone = 'x',
	eml22__LithologyKind__skarn = 'y',
	eml22__LithologyKind__slate = 'z',
	eml22__LithologyKind__spilite = 123,
	eml22__LithologyKind__syenite = 124,
	eml22__LithologyKind__syenitoid = 125,
	eml22__LithologyKind__sylvite = 126,
	eml22__LithologyKind__tephrite = 127,
	eml22__LithologyKind__tephritoid = 128,
	eml22__LithologyKind__tholeiitic_x0020basalt = 129,
	eml22__LithologyKind__tonalite = 130,
	eml22__LithologyKind__trachyte = 131,
	eml22__LithologyKind__trachytic_x0020rock = 132,
	eml22__LithologyKind__trachytoid = 133,
	eml22__LithologyKind__travertine = 134,
	eml22__LithologyKind__tuff = 135,
	eml22__LithologyKind__tuffite = 136,
	eml22__LithologyKind__ultrabasic = 137,
	eml22__LithologyKind__undifferentiated = 138,
	eml22__LithologyKind__unknown = 139,
	eml22__LithologyKind__wacke = 140
};
#endif

/* eml2_2ForGsoap.h:18155 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind (-1415)

/* eml22:LithologyQualifierKind */
enum eml22__LithologyQualifierKind {
	eml22__LithologyQualifierKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml22__LithologyQualifierKind__alkali_x0020olivine_x0020basalt = 1,
	eml22__LithologyQualifierKind__amphibolite = 2,
	eml22__LithologyQualifierKind__amphibolitic = 3,
	eml22__LithologyQualifierKind__andesite = 4,
	eml22__LithologyQualifierKind__andesitic = 5,
	eml22__LithologyQualifierKind__anhydrite = 6,
	eml22__LithologyQualifierKind__anhydritic = 7,
	eml22__LithologyQualifierKind__ankerite = 8,
	eml22__LithologyQualifierKind__ankeritic = 9,
	eml22__LithologyQualifierKind__anorthositic_x0020rock = 10,
	eml22__LithologyQualifierKind__anthracite = 11,
	eml22__LithologyQualifierKind__anthracitic = 12,
	eml22__LithologyQualifierKind__aplite = 13,
	eml22__LithologyQualifierKind__aplitic = 14,
	eml22__LithologyQualifierKind__arenite = 15,
	eml22__LithologyQualifierKind__arenitic = 16,
	eml22__LithologyQualifierKind__argillaceous = 17,
	eml22__LithologyQualifierKind__arkose = 18,
	eml22__LithologyQualifierKind__arkosic = 19,
	eml22__LithologyQualifierKind__barite = 20,
	eml22__LithologyQualifierKind__baritic = 21,
	eml22__LithologyQualifierKind__basalt = 22,
	eml22__LithologyQualifierKind__basaltic = 23,
	eml22__LithologyQualifierKind__basanite = 24,
	eml22__LithologyQualifierKind__basanitic = 25,
	eml22__LithologyQualifierKind__bauxite = 26,
	eml22__LithologyQualifierKind__bauxitic = 27,
	eml22__LithologyQualifierKind__belemnites = 28,
	eml22__LithologyQualifierKind__belemnitic = 29,
	eml22__LithologyQualifierKind__bioturbated = 30,
	eml22__LithologyQualifierKind__bioturbation = 31,
	eml22__LithologyQualifierKind__bitumen = 32,
	eml22__LithologyQualifierKind__bituminous = 33,
	eml22__LithologyQualifierKind__bituminous_x0020coal = 34,
	eml22__LithologyQualifierKind__blueschist_x0020metamorphic_x0020rock = 35,
	eml22__LithologyQualifierKind__boninite = 36,
	eml22__LithologyQualifierKind__breccia = 37,
	eml22__LithologyQualifierKind__brecciated = 38,
	eml22__LithologyQualifierKind__bryozoan = 39,
	eml22__LithologyQualifierKind__bryozoans = 40,
	eml22__LithologyQualifierKind__burrowed = 41,
	eml22__LithologyQualifierKind__burrows = 42,
	eml22__LithologyQualifierKind__calcareous = 43,
	eml22__LithologyQualifierKind__calcite = 44,
	eml22__LithologyQualifierKind__calcite_x0020concretion = 45,
	eml22__LithologyQualifierKind__calcitic = 46,
	eml22__LithologyQualifierKind__carbonaceous = 47,
	eml22__LithologyQualifierKind__carbonate_x0020ooze = 48,
	eml22__LithologyQualifierKind__carbonatite = 49,
	eml22__LithologyQualifierKind__carbonatitic = 50,
	eml22__LithologyQualifierKind__chalk = 51,
	eml22__LithologyQualifierKind__chalky = 52,
	eml22__LithologyQualifierKind__chamosite = 53,
	eml22__LithologyQualifierKind__chamositic = 54,
	eml22__LithologyQualifierKind__chert = 55,
	eml22__LithologyQualifierKind__cherty = 56,
	eml22__LithologyQualifierKind__chlorite = 57,
	eml22__LithologyQualifierKind__chloritic = 58,
	eml22__LithologyQualifierKind__clay = 59,
	eml22__LithologyQualifierKind__claystone = 60,
	eml22__LithologyQualifierKind__coal = 61,
	eml22__LithologyQualifierKind__concretionary = 62,
	eml22__LithologyQualifierKind__concretions = 63,
	eml22__LithologyQualifierKind__conglomerate = 64,
	eml22__LithologyQualifierKind__conglomeratic = 'A',
	eml22__LithologyQualifierKind__coral_x0020fragments = 'B',
	eml22__LithologyQualifierKind__coralline = 'C',
	eml22__LithologyQualifierKind__crinoidal = 'D',
	eml22__LithologyQualifierKind__crinoids = 'E',
	eml22__LithologyQualifierKind__dacite = 'F',
	eml22__LithologyQualifierKind__dacitic = 'G',
	eml22__LithologyQualifierKind__diabase = 'H',
	eml22__LithologyQualifierKind__diabasic = 'I',
	eml22__LithologyQualifierKind__diamictite = 'J',
	eml22__LithologyQualifierKind__diamictitic = 'K',
	eml22__LithologyQualifierKind__diatomaceous = 'L',
	eml22__LithologyQualifierKind__diatoms = 'M',
	eml22__LithologyQualifierKind__diorite = 'N',
	eml22__LithologyQualifierKind__dioritic = 'O',
	eml22__LithologyQualifierKind__dioritoid = 'P',
	eml22__LithologyQualifierKind__dioritoidic = 'Q',
	eml22__LithologyQualifierKind__doleritic_x0020rock = 'R',
	eml22__LithologyQualifierKind__dolomite = 'S',
	eml22__LithologyQualifierKind__dolomite_x0020concretion = 'T',
	eml22__LithologyQualifierKind__dolomite_x0020stringer = 'U',
	eml22__LithologyQualifierKind__dolomitic = 'V',
	eml22__LithologyQualifierKind__eclogite = 'W',
	eml22__LithologyQualifierKind__eclogitic = 'X',
	eml22__LithologyQualifierKind__exotic_x0020alkaline_x0020rock = 'Y',
	eml22__LithologyQualifierKind__feldspar = 'Z',
	eml22__LithologyQualifierKind__feldsparic = 91,
	eml22__LithologyQualifierKind__feldspathic = 92,
	eml22__LithologyQualifierKind__feldspathic_x0020arenite = 93,
	eml22__LithologyQualifierKind__ferruginous = 94,
	eml22__LithologyQualifierKind__fine_x0020grained_x0020igneous_x0020rock = 95,
	eml22__LithologyQualifierKind__foid_x0020dioritoid = 96,
	eml22__LithologyQualifierKind__foid_x0020gabbroid = 'a',
	eml22__LithologyQualifierKind__foid_x0020syenitoid = 'b',
	eml22__LithologyQualifierKind__foidite = 'c',
	eml22__LithologyQualifierKind__foiditic = 'd',
	eml22__LithologyQualifierKind__foiditoid = 'e',
	eml22__LithologyQualifierKind__foidolite = 'f',
	eml22__LithologyQualifierKind__foidolitic = 'g',
	eml22__LithologyQualifierKind__foliated_x0020metamorphic_x0020rock = 'h',
	eml22__LithologyQualifierKind__foraminifera = 'i',
	eml22__LithologyQualifierKind__foraminiferous = 'j',
	eml22__LithologyQualifierKind__forams = 'k',
	eml22__LithologyQualifierKind__fossil_x0020fragments = 'l',
	eml22__LithologyQualifierKind__fossiliferous = 'm',
	eml22__LithologyQualifierKind__fossils_x0020undifferentiated = 'n',
	eml22__LithologyQualifierKind__fragmental_x0020igneous_x0020rock = 'o',
	eml22__LithologyQualifierKind__gabbro = 'p',
	eml22__LithologyQualifierKind__gabbroic = 'q',
	eml22__LithologyQualifierKind__gabbroic_x0020rock = 'r',
	eml22__LithologyQualifierKind__gabbroid = 's',
	eml22__LithologyQualifierKind__gabbroidic = 't',
	eml22__LithologyQualifierKind__gilsonite = 'u',
	eml22__LithologyQualifierKind__gilsonitic = 'v',
	eml22__LithologyQualifierKind__glauconite = 'w',
	eml22__LithologyQualifierKind__glauconitic = 'x',
	eml22__LithologyQualifierKind__gneiss = 'y',
	eml22__LithologyQualifierKind__gneissic = 'z',
	eml22__LithologyQualifierKind__granite = 123,
	eml22__LithologyQualifierKind__granitic = 124,
	eml22__LithologyQualifierKind__granodiorite = 125,
	eml22__LithologyQualifierKind__granodioritic = 126,
	eml22__LithologyQualifierKind__granofels = 127,
	eml22__LithologyQualifierKind__granulite = 128,
	eml22__LithologyQualifierKind__granulitic = 129,
	eml22__LithologyQualifierKind__gravel = 130,
	eml22__LithologyQualifierKind__gravelly = 131,
	eml22__LithologyQualifierKind__greenstone = 132,
	eml22__LithologyQualifierKind__gumbo = 133,
	eml22__LithologyQualifierKind__gypsiferous = 134,
	eml22__LithologyQualifierKind__gypsum = 135,
	eml22__LithologyQualifierKind__halite = 136,
	eml22__LithologyQualifierKind__halitic = 137,
	eml22__LithologyQualifierKind__hornfels = 138,
	eml22__LithologyQualifierKind__hornfelsic = 139,
	eml22__LithologyQualifierKind__igneous = 140,
	eml22__LithologyQualifierKind__igneous_x0020rock = 141,
	eml22__LithologyQualifierKind__illite = 142,
	eml22__LithologyQualifierKind__illitic = 143,
	eml22__LithologyQualifierKind__impact_x0020generated_x0020material = 144,
	eml22__LithologyQualifierKind__impure_x0020dolomite = 145,
	eml22__LithologyQualifierKind__impure_x0020limestone = 146,
	eml22__LithologyQualifierKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 147,
	eml22__LithologyQualifierKind__iron_x0020rich_x0020sedimentary_x0020rock = 148,
	eml22__LithologyQualifierKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 149,
	eml22__LithologyQualifierKind__kaolinite = 150,
	eml22__LithologyQualifierKind__kaolinitic = 151,
	eml22__LithologyQualifierKind__komatiitic_x0020rock = 152,
	eml22__LithologyQualifierKind__latitic_x0020rock = 153,
	eml22__LithologyQualifierKind__lignite = 154,
	eml22__LithologyQualifierKind__lignitic = 155,
	eml22__LithologyQualifierKind__lime_x0020boundstone = 156,
	eml22__LithologyQualifierKind__lime_x0020framestone = 157,
	eml22__LithologyQualifierKind__lime_x0020grainstone = 158,
	eml22__LithologyQualifierKind__lime_x0020mudstone = 159,
	eml22__LithologyQualifierKind__lime_x0020packstone = 160,
	eml22__LithologyQualifierKind__lime_x0020wackestone = 161,
	eml22__LithologyQualifierKind__limestone = 162,
	eml22__LithologyQualifierKind__limestone_x0020stringer = 163,
	eml22__LithologyQualifierKind__lithic = 164,
	eml22__LithologyQualifierKind__lithic_x0020fragments = 165,
	eml22__LithologyQualifierKind__marble = 166,
	eml22__LithologyQualifierKind__marcasite = 167,
	eml22__LithologyQualifierKind__marcasitic = 168,
	eml22__LithologyQualifierKind__marl = 169,
	eml22__LithologyQualifierKind__marly = 170,
	eml22__LithologyQualifierKind__metamorphic_x0020rock = 171,
	eml22__LithologyQualifierKind__mica = 172,
	eml22__LithologyQualifierKind__mica_x0020schist = 173,
	eml22__LithologyQualifierKind__micaceous = 174,
	eml22__LithologyQualifierKind__microfossiliferous = 175,
	eml22__LithologyQualifierKind__microfossils = 176,
	eml22__LithologyQualifierKind__migmatite = 177,
	eml22__LithologyQualifierKind__migmatitic = 178,
	eml22__LithologyQualifierKind__monzogabbro = 179,
	eml22__LithologyQualifierKind__monzogabbroic = 180,
	eml22__LithologyQualifierKind__mud = 181,
	eml22__LithologyQualifierKind__muddy = 182,
	eml22__LithologyQualifierKind__mudstone = 183,
	eml22__LithologyQualifierKind__mylonitic_x0020rock = 184,
	eml22__LithologyQualifierKind__no_x0020sample = 185,
	eml22__LithologyQualifierKind__oncolite = 186,
	eml22__LithologyQualifierKind__oncoliths = 187,
	eml22__LithologyQualifierKind__oncolitic = 188,
	eml22__LithologyQualifierKind__ooids = 189,
	eml22__LithologyQualifierKind__ooliths = 190,
	eml22__LithologyQualifierKind__oolitic = 191,
	eml22__LithologyQualifierKind__ooze = 192,
	eml22__LithologyQualifierKind__ophiolite = 193,
	eml22__LithologyQualifierKind__ophiolitic = 194,
	eml22__LithologyQualifierKind__organic_x0020bearing_x0020mudstone = 195,
	eml22__LithologyQualifierKind__ostracodal = 196,
	eml22__LithologyQualifierKind__ostracods = 197,
	eml22__LithologyQualifierKind__peat = 198,
	eml22__LithologyQualifierKind__peaty = 199,
	eml22__LithologyQualifierKind__pebble = 200,
	eml22__LithologyQualifierKind__pebbly = 201,
	eml22__LithologyQualifierKind__pegmatite = 202,
	eml22__LithologyQualifierKind__pegmatitic = 203,
	eml22__LithologyQualifierKind__pelletal = 204,
	eml22__LithologyQualifierKind__pellets = 205,
	eml22__LithologyQualifierKind__peloidal = 206,
	eml22__LithologyQualifierKind__peloids = 207,
	eml22__LithologyQualifierKind__peridotite = 208,
	eml22__LithologyQualifierKind__peridotitic = 209,
	eml22__LithologyQualifierKind__phaneritic_x0020igneous_x0020rock = 210,
	eml22__LithologyQualifierKind__phonolite = 211,
	eml22__LithologyQualifierKind__phonolitic = 212,
	eml22__LithologyQualifierKind__phonolitoid = 213,
	eml22__LithologyQualifierKind__phosphate = 214,
	eml22__LithologyQualifierKind__phosphate_x0020rock = 215,
	eml22__LithologyQualifierKind__phosphatic = 216,
	eml22__LithologyQualifierKind__phyllite = 217,
	eml22__LithologyQualifierKind__phyllitic = 218,
	eml22__LithologyQualifierKind__pisolite = 219,
	eml22__LithologyQualifierKind__pisoliths = 220,
	eml22__LithologyQualifierKind__pisolitic = 221,
	eml22__LithologyQualifierKind__plant_x0020remains = 222,
	eml22__LithologyQualifierKind__porphyritic = 223,
	eml22__LithologyQualifierKind__porphyry = 224,
	eml22__LithologyQualifierKind__potassium_x0020and_x0020magnesium_x0020salts = 225,
	eml22__LithologyQualifierKind__pyrite = 226,
	eml22__LithologyQualifierKind__pyritic = 227,
	eml22__LithologyQualifierKind__pyroclastic_x0020breccia = 228,
	eml22__LithologyQualifierKind__pyroclastic_x0020rock = 229,
	eml22__LithologyQualifierKind__pyroxenite = 230,
	eml22__LithologyQualifierKind__pyroxenitic = 231,
	eml22__LithologyQualifierKind__quartiferous = 232,
	eml22__LithologyQualifierKind__quartz = 233,
	eml22__LithologyQualifierKind__quartz_x0020arenite = 234,
	eml22__LithologyQualifierKind__quartzite = 235,
	eml22__LithologyQualifierKind__quartzitic = 236,
	eml22__LithologyQualifierKind__radiolaria = 237,
	eml22__LithologyQualifierKind__radiolarian = 238,
	eml22__LithologyQualifierKind__rhyolite = 239,
	eml22__LithologyQualifierKind__rhyolitic = 240,
	eml22__LithologyQualifierKind__rock_x0020salt = 241,
	eml22__LithologyQualifierKind__rootlets = 242,
	eml22__LithologyQualifierKind__salty = 243,
	eml22__LithologyQualifierKind__sand = 244,
	eml22__LithologyQualifierKind__sandstone = 245,
	eml22__LithologyQualifierKind__sandy = 246,
	eml22__LithologyQualifierKind__sapropel = 247,
	eml22__LithologyQualifierKind__sapropelic = 248,
	eml22__LithologyQualifierKind__schist = 249,
	eml22__LithologyQualifierKind__schisty = 250,
	eml22__LithologyQualifierKind__sepentinitic = 251,
	eml22__LithologyQualifierKind__serpentinite = 252,
	eml22__LithologyQualifierKind__shale = 253,
	eml22__LithologyQualifierKind__shaly = 254,
	eml22__LithologyQualifierKind__shell_x0020fragments = 255,
	eml22__LithologyQualifierKind__shelly = 256,
	eml22__LithologyQualifierKind__siderite = 257,
	eml22__LithologyQualifierKind__siderite_x0020concretion = 258,
	eml22__LithologyQualifierKind__sideritic = 259,
	eml22__LithologyQualifierKind__siliceous_x0020ooze = 260,
	eml22__LithologyQualifierKind__silt = 261,
	eml22__LithologyQualifierKind__siltstone = 262,
	eml22__LithologyQualifierKind__silty = 263,
	eml22__LithologyQualifierKind__skarn = 264,
	eml22__LithologyQualifierKind__skarny = 265,
	eml22__LithologyQualifierKind__slate = 266,
	eml22__LithologyQualifierKind__slaty = 267,
	eml22__LithologyQualifierKind__smectite = 268,
	eml22__LithologyQualifierKind__smectitic = 269,
	eml22__LithologyQualifierKind__spicular = 270,
	eml22__LithologyQualifierKind__spicules = 271,
	eml22__LithologyQualifierKind__spilite = 272,
	eml22__LithologyQualifierKind__spilitic = 273,
	eml22__LithologyQualifierKind__stylolites = 274,
	eml22__LithologyQualifierKind__stylolitic = 275,
	eml22__LithologyQualifierKind__syenite = 276,
	eml22__LithologyQualifierKind__syenitic = 277,
	eml22__LithologyQualifierKind__syenitoid = 278,
	eml22__LithologyQualifierKind__sylvite = 279,
	eml22__LithologyQualifierKind__sylvitic = 280,
	eml22__LithologyQualifierKind__tarry = 281,
	eml22__LithologyQualifierKind__tephrite = 282,
	eml22__LithologyQualifierKind__tephritic = 283,
	eml22__LithologyQualifierKind__tephritoid = 284,
	eml22__LithologyQualifierKind__tholeiitic_x0020basalt = 285,
	eml22__LithologyQualifierKind__tonalite = 286,
	eml22__LithologyQualifierKind__tonalitic = 287,
	eml22__LithologyQualifierKind__trachyte = 288,
	eml22__LithologyQualifierKind__trachytic = 289,
	eml22__LithologyQualifierKind__trachytic_x0020rock = 290,
	eml22__LithologyQualifierKind__trachytoid = 291,
	eml22__LithologyQualifierKind__travertine = 292,
	eml22__LithologyQualifierKind__tuff = 293,
	eml22__LithologyQualifierKind__tuffaceous = 294,
	eml22__LithologyQualifierKind__tuffite = 295,
	eml22__LithologyQualifierKind__tuffitic = 296,
	eml22__LithologyQualifierKind__ultrabasic = 297,
	eml22__LithologyQualifierKind__undifferentiated = 298,
	eml22__LithologyQualifierKind__unknown = 299,
	eml22__LithologyQualifierKind__wacke = 300
};
#endif

/* eml2_2ForGsoap.h:18466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank (-1416)

/* eml22:LithostratigraphicRank */
enum eml22__LithostratigraphicRank {
	eml22__LithostratigraphicRank__group = 0,
	eml22__LithostratigraphicRank__formation = 1,
	eml22__LithostratigraphicRank__member = 2,
	eml22__LithostratigraphicRank__bed = 3
};
#endif

/* eml2_2ForGsoap.h:18510 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind (-1417)

/* eml22:MatrixCementKind */
enum eml22__MatrixCementKind {
	eml22__MatrixCementKind__ankerite = 0,
	eml22__MatrixCementKind__calcite = 1,
	eml22__MatrixCementKind__chlorite = 2,
	eml22__MatrixCementKind__dolomite = 3,
	eml22__MatrixCementKind__illite = 4,
	eml22__MatrixCementKind__kaolinite = 5,
	eml22__MatrixCementKind__quartz = 6,
	eml22__MatrixCementKind__siderite = 7,
	eml22__MatrixCementKind__smectite = 8
};
#endif

/* eml2_2ForGsoap.h:18529 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass
#define SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass (-1418)

/* eml22:MeasureClass */
enum eml22__MeasureClass {
	eml22__MeasureClass__absorbed_x0020dose = 0,
	eml22__MeasureClass__activity_x0020of_x0020radioactivity = 1,
	eml22__MeasureClass__amount_x0020of_x0020substance = 2,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml22__MeasureClass__angle_x0020per_x0020length = 8,
	eml22__MeasureClass__angle_x0020per_x0020volume = 9,
	eml22__MeasureClass__angular_x0020acceleration = 10,
	eml22__MeasureClass__angular_x0020velocity = 11,
	eml22__MeasureClass__api_x0020gamma_x0020ray = 12,
	eml22__MeasureClass__api_x0020gravity = 13,
	eml22__MeasureClass__api_x0020neutron = 14,
	eml22__MeasureClass__area = 15,
	eml22__MeasureClass__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml22__MeasureClass__area_x0020per_x0020area = 17,
	eml22__MeasureClass__area_x0020per_x0020count = 18,
	eml22__MeasureClass__area_x0020per_x0020mass = 19,
	eml22__MeasureClass__area_x0020per_x0020time = 20,
	eml22__MeasureClass__area_x0020per_x0020volume = 21,
	eml22__MeasureClass__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml22__MeasureClass__capacitance = 23,
	eml22__MeasureClass__cation_x0020exchange_x0020capacity = 24,
	eml22__MeasureClass__data_x0020transfer_x0020speed = 25,
	eml22__MeasureClass__diffusion_x0020coefficient = 26,
	eml22__MeasureClass__diffusive_x0020time_x0020of_x0020flight = 27,
	eml22__MeasureClass__digital_x0020storage = 28,
	eml22__MeasureClass__dimensionless = 29,
	eml22__MeasureClass__dipole_x0020moment = 30,
	eml22__MeasureClass__dose_x0020equivalent = 31,
	eml22__MeasureClass__dynamic_x0020viscosity = 32,
	eml22__MeasureClass__electric_x0020charge = 33,
	eml22__MeasureClass__electric_x0020charge_x0020per_x0020area = 34,
	eml22__MeasureClass__electric_x0020charge_x0020per_x0020mass = 35,
	eml22__MeasureClass__electric_x0020charge_x0020per_x0020volume = 36,
	eml22__MeasureClass__electric_x0020conductance = 37,
	eml22__MeasureClass__electric_x0020conductivity = 38,
	eml22__MeasureClass__electric_x0020current = 39,
	eml22__MeasureClass__electric_x0020current_x0020density = 40,
	eml22__MeasureClass__electric_x0020field_x0020strength = 41,
	eml22__MeasureClass__electric_x0020potential_x0020difference = 42,
	eml22__MeasureClass__electric_x0020resistance = 43,
	eml22__MeasureClass__electric_x0020resistance_x0020per_x0020length = 44,
	eml22__MeasureClass__electrical_x0020resistivity = 45,
	eml22__MeasureClass__electromagnetic_x0020moment = 46,
	eml22__MeasureClass__energy = 47,
	eml22__MeasureClass__energy_x0020length_x0020per_x0020area = 48,
	eml22__MeasureClass__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml22__MeasureClass__energy_x0020per_x0020area = 50,
	eml22__MeasureClass__energy_x0020per_x0020length = 51,
	eml22__MeasureClass__energy_x0020per_x0020mass = 52,
	eml22__MeasureClass__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml22__MeasureClass__energy_x0020per_x0020volume = 54,
	eml22__MeasureClass__force = 55,
	eml22__MeasureClass__force_x0020area = 56,
	eml22__MeasureClass__force_x0020length_x0020per_x0020length = 57,
	eml22__MeasureClass__force_x0020per_x0020force = 58,
	eml22__MeasureClass__force_x0020per_x0020length = 59,
	eml22__MeasureClass__force_x0020per_x0020volume = 60,
	eml22__MeasureClass__frequency = 61,
	eml22__MeasureClass__frequency_x0020interval = 62,
	eml22__MeasureClass__heat_x0020capacity = 63,
	eml22__MeasureClass__heat_x0020flow_x0020rate = 64,
	eml22__MeasureClass__heat_x0020transfer_x0020coefficient = 'A',
	eml22__MeasureClass__illuminance = 'B',
	eml22__MeasureClass__inductance = 'C',
	eml22__MeasureClass__isothermal_x0020compressibility = 'D',
	eml22__MeasureClass__kinematic_x0020viscosity = 'E',
	eml22__MeasureClass__length = 'F',
	eml22__MeasureClass__length_x0020per_x0020length = 'G',
	eml22__MeasureClass__length_x0020per_x0020mass = 'H',
	eml22__MeasureClass__length_x0020per_x0020pressure = 'I',
	eml22__MeasureClass__length_x0020per_x0020temperature = 'J',
	eml22__MeasureClass__length_x0020per_x0020time = 'K',
	eml22__MeasureClass__length_x0020per_x0020volume = 'L',
	eml22__MeasureClass__light_x0020exposure = 'M',
	eml22__MeasureClass__linear_x0020acceleration = 'N',
	eml22__MeasureClass__linear_x0020thermal_x0020expansion = 'O',
	eml22__MeasureClass__logarithmic_x0020power_x0020ratio = 'P',
	eml22__MeasureClass__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml22__MeasureClass__luminance = 'R',
	eml22__MeasureClass__luminous_x0020efficacy = 'S',
	eml22__MeasureClass__luminous_x0020flux = 'T',
	eml22__MeasureClass__luminous_x0020intensity = 'U',
	eml22__MeasureClass__magnetic_x0020dipole_x0020moment = 'V',
	eml22__MeasureClass__magnetic_x0020field_x0020strength = 'W',
	eml22__MeasureClass__magnetic_x0020flux = 'X',
	eml22__MeasureClass__magnetic_x0020flux_x0020density = 'Y',
	eml22__MeasureClass__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml22__MeasureClass__magnetic_x0020permeability = 91,
	eml22__MeasureClass__magnetic_x0020vector_x0020potential = 92,
	eml22__MeasureClass__mass = 93,
	eml22__MeasureClass__mass_x0020length = 94,
	eml22__MeasureClass__mass_x0020per_x0020area = 95,
	eml22__MeasureClass__mass_x0020per_x0020energy = 96,
	eml22__MeasureClass__mass_x0020per_x0020length = 'a',
	eml22__MeasureClass__mass_x0020per_x0020mass = 'b',
	eml22__MeasureClass__mass_x0020per_x0020time = 'c',
	eml22__MeasureClass__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml22__MeasureClass__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml22__MeasureClass__mass_x0020per_x0020volume = 'f',
	eml22__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml22__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml22__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml22__MeasureClass__mobility = 'j',
	eml22__MeasureClass__molar_x0020energy = 'k',
	eml22__MeasureClass__molar_x0020heat_x0020capacity = 'l',
	eml22__MeasureClass__molar_x0020volume = 'm',
	eml22__MeasureClass__molecular_x0020weight = 'n',
	eml22__MeasureClass__moment_x0020of_x0020force = 'o',
	eml22__MeasureClass__moment_x0020of_x0020inertia = 'p',
	eml22__MeasureClass__momentum = 'q',
	eml22__MeasureClass__normalized_x0020power = 'r',
	eml22__MeasureClass__permeability_x0020length = 's',
	eml22__MeasureClass__permeability_x0020rock = 't',
	eml22__MeasureClass__permittivity = 'u',
	eml22__MeasureClass__plane_x0020angle = 'v',
	eml22__MeasureClass__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml22__MeasureClass__power = 'x',
	eml22__MeasureClass__power_x0020per_x0020area = 'y',
	eml22__MeasureClass__power_x0020per_x0020power = 'z',
	eml22__MeasureClass__power_x0020per_x0020volume = 123,
	eml22__MeasureClass__pressure = 124,
	eml22__MeasureClass__pressure_x0020per_x0020pressure = 125,
	eml22__MeasureClass__pressure_x0020per_x0020time = 126,
	eml22__MeasureClass__pressure_x0020per_x0020volume = 127,
	eml22__MeasureClass__pressure_x0020squared = 128,
	eml22__MeasureClass__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml22__MeasureClass__pressure_x0020time_x0020per_x0020volume = 130,
	eml22__MeasureClass__quantity_x0020of_x0020light = 131,
	eml22__MeasureClass__radiance = 132,
	eml22__MeasureClass__radiant_x0020intensity = 133,
	eml22__MeasureClass__reciprocal_x0020area = 134,
	eml22__MeasureClass__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml22__MeasureClass__reciprocal_x0020force = 136,
	eml22__MeasureClass__reciprocal_x0020length = 137,
	eml22__MeasureClass__reciprocal_x0020mass = 138,
	eml22__MeasureClass__reciprocal_x0020mass_x0020time = 139,
	eml22__MeasureClass__reciprocal_x0020pressure = 140,
	eml22__MeasureClass__reciprocal_x0020time = 141,
	eml22__MeasureClass__reciprocal_x0020volume = 142,
	eml22__MeasureClass__reluctance = 143,
	eml22__MeasureClass__second_x0020moment_x0020of_x0020area = 144,
	eml22__MeasureClass__signaling_x0020event_x0020per_x0020time = 145,
	eml22__MeasureClass__solid_x0020angle = 146,
	eml22__MeasureClass__specific_x0020heat_x0020capacity = 147,
	eml22__MeasureClass__temperature_x0020interval = 148,
	eml22__MeasureClass__temperature_x0020interval_x0020per_x0020length = 149,
	eml22__MeasureClass__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml22__MeasureClass__temperature_x0020interval_x0020per_x0020time = 151,
	eml22__MeasureClass__thermal_x0020conductance = 152,
	eml22__MeasureClass__thermal_x0020conductivity = 153,
	eml22__MeasureClass__thermal_x0020diffusivity = 154,
	eml22__MeasureClass__thermal_x0020insulance = 155,
	eml22__MeasureClass__thermal_x0020resistance = 156,
	eml22__MeasureClass__thermodynamic_x0020temperature = 157,
	eml22__MeasureClass__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml22__MeasureClass__time = 159,
	eml22__MeasureClass__time_x0020per_x0020length = 160,
	eml22__MeasureClass__time_x0020per_x0020mass = 161,
	eml22__MeasureClass__time_x0020per_x0020time = 162,
	eml22__MeasureClass__time_x0020per_x0020volume = 163,
	eml22__MeasureClass__vertical_x0020coordinate = 164,
	eml22__MeasureClass__volume = 165,
	eml22__MeasureClass__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml22__MeasureClass__volume_x0020per_x0020area = 167,
	eml22__MeasureClass__volume_x0020per_x0020length = 168,
	eml22__MeasureClass__volume_x0020per_x0020mass = 169,
	eml22__MeasureClass__volume_x0020per_x0020pressure = 170,
	eml22__MeasureClass__volume_x0020per_x0020rotation = 171,
	eml22__MeasureClass__volume_x0020per_x0020time = 172,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020length = 173,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml22__MeasureClass__volume_x0020per_x0020volume = 180,
	eml22__MeasureClass__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml22__MeasureClass__volumetric_x0020thermal_x0020expansion = 182,
	eml22__MeasureClass__unitless = 183
};
#endif

/* eml2_2ForGsoap.h:18720 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind (-1419)

/* eml22:QuantityClassKind */
enum eml22__QuantityClassKind {
	eml22__QuantityClassKind__absorbed_x0020dose = 0,
	eml22__QuantityClassKind__activity_x0020of_x0020radioactivity = 1,
	eml22__QuantityClassKind__amount_x0020of_x0020substance = 2,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml22__QuantityClassKind__angle_x0020per_x0020length = 8,
	eml22__QuantityClassKind__angle_x0020per_x0020volume = 9,
	eml22__QuantityClassKind__angular_x0020acceleration = 10,
	eml22__QuantityClassKind__angular_x0020velocity = 11,
	eml22__QuantityClassKind__api_x0020gamma_x0020ray = 12,
	eml22__QuantityClassKind__api_x0020gravity = 13,
	eml22__QuantityClassKind__api_x0020neutron = 14,
	eml22__QuantityClassKind__area = 15,
	eml22__QuantityClassKind__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml22__QuantityClassKind__area_x0020per_x0020area = 17,
	eml22__QuantityClassKind__area_x0020per_x0020count = 18,
	eml22__QuantityClassKind__area_x0020per_x0020mass = 19,
	eml22__QuantityClassKind__area_x0020per_x0020time = 20,
	eml22__QuantityClassKind__area_x0020per_x0020volume = 21,
	eml22__QuantityClassKind__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml22__QuantityClassKind__capacitance = 23,
	eml22__QuantityClassKind__cation_x0020exchange_x0020capacity = 24,
	eml22__QuantityClassKind__data_x0020transfer_x0020speed = 25,
	eml22__QuantityClassKind__diffusion_x0020coefficient = 26,
	eml22__QuantityClassKind__diffusive_x0020time_x0020of_x0020flight = 27,
	eml22__QuantityClassKind__digital_x0020storage = 28,
	eml22__QuantityClassKind__dimensionless = 29,
	eml22__QuantityClassKind__dipole_x0020moment = 30,
	eml22__QuantityClassKind__dose_x0020equivalent = 31,
	eml22__QuantityClassKind__dynamic_x0020viscosity = 32,
	eml22__QuantityClassKind__electric_x0020charge = 33,
	eml22__QuantityClassKind__electric_x0020charge_x0020per_x0020area = 34,
	eml22__QuantityClassKind__electric_x0020charge_x0020per_x0020mass = 35,
	eml22__QuantityClassKind__electric_x0020charge_x0020per_x0020volume = 36,
	eml22__QuantityClassKind__electric_x0020conductance = 37,
	eml22__QuantityClassKind__electric_x0020conductivity = 38,
	eml22__QuantityClassKind__electric_x0020current = 39,
	eml22__QuantityClassKind__electric_x0020current_x0020density = 40,
	eml22__QuantityClassKind__electric_x0020field_x0020strength = 41,
	eml22__QuantityClassKind__electric_x0020potential_x0020difference = 42,
	eml22__QuantityClassKind__electric_x0020resistance = 43,
	eml22__QuantityClassKind__electric_x0020resistance_x0020per_x0020length = 44,
	eml22__QuantityClassKind__electrical_x0020resistivity = 45,
	eml22__QuantityClassKind__electromagnetic_x0020moment = 46,
	eml22__QuantityClassKind__energy = 47,
	eml22__QuantityClassKind__energy_x0020length_x0020per_x0020area = 48,
	eml22__QuantityClassKind__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml22__QuantityClassKind__energy_x0020per_x0020area = 50,
	eml22__QuantityClassKind__energy_x0020per_x0020length = 51,
	eml22__QuantityClassKind__energy_x0020per_x0020mass = 52,
	eml22__QuantityClassKind__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml22__QuantityClassKind__energy_x0020per_x0020volume = 54,
	eml22__QuantityClassKind__force = 55,
	eml22__QuantityClassKind__force_x0020area = 56,
	eml22__QuantityClassKind__force_x0020length_x0020per_x0020length = 57,
	eml22__QuantityClassKind__force_x0020per_x0020force = 58,
	eml22__QuantityClassKind__force_x0020per_x0020length = 59,
	eml22__QuantityClassKind__force_x0020per_x0020volume = 60,
	eml22__QuantityClassKind__frequency = 61,
	eml22__QuantityClassKind__frequency_x0020interval = 62,
	eml22__QuantityClassKind__heat_x0020capacity = 63,
	eml22__QuantityClassKind__heat_x0020flow_x0020rate = 64,
	eml22__QuantityClassKind__heat_x0020transfer_x0020coefficient = 'A',
	eml22__QuantityClassKind__illuminance = 'B',
	eml22__QuantityClassKind__inductance = 'C',
	eml22__QuantityClassKind__isothermal_x0020compressibility = 'D',
	eml22__QuantityClassKind__kinematic_x0020viscosity = 'E',
	eml22__QuantityClassKind__length = 'F',
	eml22__QuantityClassKind__length_x0020per_x0020length = 'G',
	eml22__QuantityClassKind__length_x0020per_x0020mass = 'H',
	eml22__QuantityClassKind__length_x0020per_x0020pressure = 'I',
	eml22__QuantityClassKind__length_x0020per_x0020temperature = 'J',
	eml22__QuantityClassKind__length_x0020per_x0020time = 'K',
	eml22__QuantityClassKind__length_x0020per_x0020volume = 'L',
	eml22__QuantityClassKind__light_x0020exposure = 'M',
	eml22__QuantityClassKind__linear_x0020acceleration = 'N',
	eml22__QuantityClassKind__linear_x0020thermal_x0020expansion = 'O',
	eml22__QuantityClassKind__logarithmic_x0020power_x0020ratio = 'P',
	eml22__QuantityClassKind__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml22__QuantityClassKind__luminance = 'R',
	eml22__QuantityClassKind__luminous_x0020efficacy = 'S',
	eml22__QuantityClassKind__luminous_x0020flux = 'T',
	eml22__QuantityClassKind__luminous_x0020intensity = 'U',
	eml22__QuantityClassKind__magnetic_x0020dipole_x0020moment = 'V',
	eml22__QuantityClassKind__magnetic_x0020field_x0020strength = 'W',
	eml22__QuantityClassKind__magnetic_x0020flux = 'X',
	eml22__QuantityClassKind__magnetic_x0020flux_x0020density = 'Y',
	eml22__QuantityClassKind__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml22__QuantityClassKind__magnetic_x0020permeability = 91,
	eml22__QuantityClassKind__magnetic_x0020vector_x0020potential = 92,
	eml22__QuantityClassKind__mass = 93,
	eml22__QuantityClassKind__mass_x0020length = 94,
	eml22__QuantityClassKind__mass_x0020per_x0020area = 95,
	eml22__QuantityClassKind__mass_x0020per_x0020energy = 96,
	eml22__QuantityClassKind__mass_x0020per_x0020length = 'a',
	eml22__QuantityClassKind__mass_x0020per_x0020mass = 'b',
	eml22__QuantityClassKind__mass_x0020per_x0020time = 'c',
	eml22__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml22__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml22__QuantityClassKind__mass_x0020per_x0020volume = 'f',
	eml22__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml22__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml22__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml22__QuantityClassKind__mobility = 'j',
	eml22__QuantityClassKind__molar_x0020energy = 'k',
	eml22__QuantityClassKind__molar_x0020heat_x0020capacity = 'l',
	eml22__QuantityClassKind__molar_x0020volume = 'm',
	eml22__QuantityClassKind__molecular_x0020weight = 'n',
	eml22__QuantityClassKind__moment_x0020of_x0020force = 'o',
	eml22__QuantityClassKind__moment_x0020of_x0020inertia = 'p',
	eml22__QuantityClassKind__momentum = 'q',
	eml22__QuantityClassKind__normalized_x0020power = 'r',
	eml22__QuantityClassKind__permeability_x0020length = 's',
	eml22__QuantityClassKind__permeability_x0020rock = 't',
	eml22__QuantityClassKind__permittivity = 'u',
	eml22__QuantityClassKind__plane_x0020angle = 'v',
	eml22__QuantityClassKind__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml22__QuantityClassKind__power = 'x',
	eml22__QuantityClassKind__power_x0020per_x0020area = 'y',
	eml22__QuantityClassKind__power_x0020per_x0020power = 'z',
	eml22__QuantityClassKind__power_x0020per_x0020volume = 123,
	eml22__QuantityClassKind__pressure = 124,
	eml22__QuantityClassKind__pressure_x0020per_x0020pressure = 125,
	eml22__QuantityClassKind__pressure_x0020per_x0020time = 126,
	eml22__QuantityClassKind__pressure_x0020per_x0020volume = 127,
	eml22__QuantityClassKind__pressure_x0020squared = 128,
	eml22__QuantityClassKind__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml22__QuantityClassKind__pressure_x0020time_x0020per_x0020volume = 130,
	eml22__QuantityClassKind__quantity_x0020of_x0020light = 131,
	eml22__QuantityClassKind__radiance = 132,
	eml22__QuantityClassKind__radiant_x0020intensity = 133,
	eml22__QuantityClassKind__reciprocal_x0020area = 134,
	eml22__QuantityClassKind__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml22__QuantityClassKind__reciprocal_x0020force = 136,
	eml22__QuantityClassKind__reciprocal_x0020length = 137,
	eml22__QuantityClassKind__reciprocal_x0020mass = 138,
	eml22__QuantityClassKind__reciprocal_x0020mass_x0020time = 139,
	eml22__QuantityClassKind__reciprocal_x0020pressure = 140,
	eml22__QuantityClassKind__reciprocal_x0020time = 141,
	eml22__QuantityClassKind__reciprocal_x0020volume = 142,
	eml22__QuantityClassKind__reluctance = 143,
	eml22__QuantityClassKind__second_x0020moment_x0020of_x0020area = 144,
	eml22__QuantityClassKind__signaling_x0020event_x0020per_x0020time = 145,
	eml22__QuantityClassKind__solid_x0020angle = 146,
	eml22__QuantityClassKind__specific_x0020heat_x0020capacity = 147,
	eml22__QuantityClassKind__temperature_x0020interval = 148,
	eml22__QuantityClassKind__temperature_x0020interval_x0020per_x0020length = 149,
	eml22__QuantityClassKind__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml22__QuantityClassKind__temperature_x0020interval_x0020per_x0020time = 151,
	eml22__QuantityClassKind__thermal_x0020conductance = 152,
	eml22__QuantityClassKind__thermal_x0020conductivity = 153,
	eml22__QuantityClassKind__thermal_x0020diffusivity = 154,
	eml22__QuantityClassKind__thermal_x0020insulance = 155,
	eml22__QuantityClassKind__thermal_x0020resistance = 156,
	eml22__QuantityClassKind__thermodynamic_x0020temperature = 157,
	eml22__QuantityClassKind__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml22__QuantityClassKind__time = 159,
	eml22__QuantityClassKind__time_x0020per_x0020length = 160,
	eml22__QuantityClassKind__time_x0020per_x0020mass = 161,
	eml22__QuantityClassKind__time_x0020per_x0020time = 162,
	eml22__QuantityClassKind__time_x0020per_x0020volume = 163,
	eml22__QuantityClassKind__vertical_x0020coordinate = 164,
	eml22__QuantityClassKind__volume = 165,
	eml22__QuantityClassKind__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml22__QuantityClassKind__volume_x0020per_x0020area = 167,
	eml22__QuantityClassKind__volume_x0020per_x0020length = 168,
	eml22__QuantityClassKind__volume_x0020per_x0020mass = 169,
	eml22__QuantityClassKind__volume_x0020per_x0020pressure = 170,
	eml22__QuantityClassKind__volume_x0020per_x0020rotation = 171,
	eml22__QuantityClassKind__volume_x0020per_x0020time = 172,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020length = 173,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml22__QuantityClassKind__volume_x0020per_x0020volume = 180,
	eml22__QuantityClassKind__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml22__QuantityClassKind__volumetric_x0020thermal_x0020expansion = 182,
	eml22__QuantityClassKind__unitless = 183,
	eml22__QuantityClassKind__not_x0020a_x0020measure = 184
};
#endif

/* eml2_2ForGsoap.h:18923 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition (-1420)

/* eml22:ReferenceCondition */
enum eml22__ReferenceCondition {
	eml22__ReferenceCondition__0_x0020degC_x00201_x0020atm = 0,
	eml22__ReferenceCondition__0_x0020degC_x00201_x0020bar = 1,
	eml22__ReferenceCondition__15_x0020degC_x00201_x0020atm = 2,
	eml22__ReferenceCondition__15_x0020degC_x00201_x0020bar = 3,
	eml22__ReferenceCondition__20_x0020degC_x00201_x0020atm = 4,
	eml22__ReferenceCondition__20_x0020degC_x00201_x0020bar = 5,
	eml22__ReferenceCondition__25_x0020degC_x00201_x0020bar = 6,
	eml22__ReferenceCondition__60_x0020degF_x00201_x0020atm = 7,
	eml22__ReferenceCondition__60_x0020degF_x002030_x0020in_x0020Hg = 8,
	eml22__ReferenceCondition__ambient = 9
};
#endif

/* eml2_2ForGsoap.h:18953 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference (-1421)

/* eml22:WellboreDatumReference */
enum eml22__WellboreDatumReference {
	eml22__WellboreDatumReference__ground_x0020level = 0,
	eml22__WellboreDatumReference__kelly_x0020bushing = 1,
	eml22__WellboreDatumReference__mean_x0020sea_x0020level = 2,
	eml22__WellboreDatumReference__derrick_x0020floor = 3,
	eml22__WellboreDatumReference__casing_x0020flange = 4,
	eml22__WellboreDatumReference__crown_x0020valve = 5,
	eml22__WellboreDatumReference__rotary_x0020bushing = 6,
	eml22__WellboreDatumReference__rotary_x0020table = 7,
	eml22__WellboreDatumReference__sea_x0020floor = 8,
	eml22__WellboreDatumReference__lowest_x0020astronomical_x0020tide = 9,
	eml22__WellboreDatumReference__mean_x0020higher_x0020high_x0020water = 10,
	eml22__WellboreDatumReference__mean_x0020high_x0020water = 11,
	eml22__WellboreDatumReference__mean_x0020lower_x0020low_x0020water = 12,
	eml22__WellboreDatumReference__mean_x0020low_x0020water = 13,
	eml22__WellboreDatumReference__mean_x0020tide_x0020level = 14,
	eml22__WellboreDatumReference__kickoff_x0020point = 15
};
#endif

/* eml2_2ForGsoap.h:19006 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus (-1422)

/* eml22:WellStatus */
enum eml22__WellStatus {
	eml22__WellStatus__abandoned = 0,
	eml22__WellStatus__active = 1,
	eml22__WellStatus__active_x0020_x002d__x0020injecting = 2,
	eml22__WellStatus__active_x0020_x002d__x0020producing = 3,
	eml22__WellStatus__completed = 4,
	eml22__WellStatus__drilling = 5,
	eml22__WellStatus__partially_x0020plugged = 6,
	eml22__WellStatus__permitted = 7,
	eml22__WellStatus__plugged_x0020and_x0020abandoned = 8,
	eml22__WellStatus__proposed = 9,
	eml22__WellStatus__sold = 10,
	eml22__WellStatus__suspended = 11,
	eml22__WellStatus__temporarily_x0020abandoned = 12,
	eml22__WellStatus__testing = 13,
	eml22__WellStatus__tight = 14,
	eml22__WellStatus__working_x0020over = 15,
	eml22__WellStatus__unknown = 16
};
#endif

/* eml2_2ForGsoap.h:19083 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityParameterKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityParameterKind (-1423)

/* eml22:ActivityParameterKind */
enum eml22__ActivityParameterKind {
	eml22__ActivityParameterKind__dataObject = 0,
	eml22__ActivityParameterKind__double_ = 1,
	eml22__ActivityParameterKind__integer = 2,
	eml22__ActivityParameterKind__string = 3,
	eml22__ActivityParameterKind__timestamp = 4,
	eml22__ActivityParameterKind__subActivity = 5
};
#endif

/* eml2_2ForGsoap.h:19099 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind (-1424)

/* eml22:ReferencePressureKind */
enum eml22__ReferencePressureKind {
	eml22__ReferencePressureKind__absolute = 0,
	eml22__ReferencePressureKind__ambient = 1,
	eml22__ReferencePressureKind__legal = 2
};
#endif

/* eml2_2ForGsoap.h:19118 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d (-1425)

/* eml22:AxisOrder2d */
enum eml22__AxisOrder2d {
	eml22__AxisOrder2d__easting_x0020northing = 0,
	eml22__AxisOrder2d__northing_x0020easting = 1,
	eml22__AxisOrder2d__westing_x0020southing = 2,
	eml22__AxisOrder2d__southing_x0020westing = 3,
	eml22__AxisOrder2d__northing_x0020westing = 4,
	eml22__AxisOrder2d__westing_x0020northing = 5
};
#endif

/* eml2_2ForGsoap.h:19152 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EastOrWest
#define SOAP_TYPE_gsoap_eml2_2_eml22__EastOrWest (-1426)

/* eml22:EastOrWest */
enum eml22__EastOrWest {
	eml22__EastOrWest__east = 0,
	eml22__EastOrWest__west = 1
};
#endif

/* eml2_2ForGsoap.h:19170 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_2_eml22__NorthOrSouth (-1427)

/* eml22:NorthOrSouth */
enum eml22__NorthOrSouth {
	eml22__NorthOrSouth__north = 0,
	eml22__NorthOrSouth__south = 1
};
#endif

/* eml2_2ForGsoap.h:19188 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_2_eml22__PrincipalMeridian (-1428)

/* eml22:PrincipalMeridian */
enum eml22__PrincipalMeridian {
	eml22__PrincipalMeridian__1st_x0020Principal_x0020Meridian = 0,
	eml22__PrincipalMeridian__2nd_x0020Principal_x0020Meridian = 1,
	eml22__PrincipalMeridian__3rd_x0020Principal_x0020Meridian = 2,
	eml22__PrincipalMeridian__4th_x0020Principal_x0020Meridian = 3,
	eml22__PrincipalMeridian__5th_x0020Principal_x0020Meridian = 4,
	eml22__PrincipalMeridian__6th_x0020Principal_x0020Meridian = 5,
	eml22__PrincipalMeridian__Black_x0020Hills_x0020Meridian = 6,
	eml22__PrincipalMeridian__Boise_x0020Meridian = 7,
	eml22__PrincipalMeridian__Chickasaw_x0020Meridian = 8,
	eml22__PrincipalMeridian__Choctaw_x0020Meridian = 9,
	eml22__PrincipalMeridian__Cimarron_x0020Meridian = 10,
	eml22__PrincipalMeridian__Copper_x0020River_x0020Meridian = 11,
	eml22__PrincipalMeridian__Fairbanks_x0020Meridian = 12,
	eml22__PrincipalMeridian__Gila_x0020and_x0020Salt_x0020River_x0020Meridian = 13,
	eml22__PrincipalMeridian__Humboldt_x0020Meridian = 14,
	eml22__PrincipalMeridian__Huntsville_x0020Meridian = 15,
	eml22__PrincipalMeridian__Indian_x0020Meridian = 16,
	eml22__PrincipalMeridian__Kateel_x0020River_x0020Meridian = 17,
	eml22__PrincipalMeridian__Lousiana_x0020Meridian = 18,
	eml22__PrincipalMeridian__Michigan_x0020Meridian = 19,
	eml22__PrincipalMeridian__Montana_x0020Meridian = 20,
	eml22__PrincipalMeridian__Mount_x0020Diablo_x0020Meridian = 21,
	eml22__PrincipalMeridian__Navajo_x0020Meridian = 22,
	eml22__PrincipalMeridian__New_x0020Mexico_x0020Meridian = 23,
	eml22__PrincipalMeridian__Saint_x0020Helena_x0020Meridian = 24,
	eml22__PrincipalMeridian__Saint_x0020Stephens_x0020Meridian = 25,
	eml22__PrincipalMeridian__Salt_x0020Lake_x0020Meridian = 26,
	eml22__PrincipalMeridian__San_x0020Bernardo_x0020Meridian = 27,
	eml22__PrincipalMeridian__Seward_x0020Meridian = 28,
	eml22__PrincipalMeridian__Tallahassee_x0020Meridian = 29,
	eml22__PrincipalMeridian__Uintah_x0020Meridian = 30,
	eml22__PrincipalMeridian__Umiat_x0020Meridian = 31,
	eml22__PrincipalMeridian__Ute_x0020Meridian = 32,
	eml22__PrincipalMeridian__Washington_x0020Meridian = 33,
	eml22__PrincipalMeridian__Williamette_x0020Meridian = 34,
	eml22__PrincipalMeridian__Wind_x0020River_x0020Meridian = 35
};
#endif

/* eml2_2ForGsoap.h:19339 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection (-1429)

/* eml22:VerticalDirection */
enum eml22__VerticalDirection {
	eml22__VerticalDirection__up = 0,
	eml22__VerticalDirection__down = 1
};
#endif

/* eml2_2ForGsoap.h:46160 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition (-2184)

/* gml:RelatedTimeType-relativePosition */
enum _gml__RelatedTimeType_relativePosition {
	_gml__RelatedTimeType_relativePosition__Before = 0,
	_gml__RelatedTimeType_relativePosition__After = 1,
	_gml__RelatedTimeType_relativePosition__Begins = 2,
	_gml__RelatedTimeType_relativePosition__Ends = 3,
	_gml__RelatedTimeType_relativePosition__During = 4,
	_gml__RelatedTimeType_relativePosition__Equals = 5,
	_gml__RelatedTimeType_relativePosition__Contains = 6,
	_gml__RelatedTimeType_relativePosition__Overlaps = 7,
	_gml__RelatedTimeType_relativePosition__Meets = 8,
	_gml__RelatedTimeType_relativePosition__OverlappedBy = 9,
	_gml__RelatedTimeType_relativePosition__MetBy = 10,
	_gml__RelatedTimeType_relativePosition__BegunBy = 11,
	_gml__RelatedTimeType_relativePosition__EndedBy = 12
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/struct_tm.h:80 */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-13)

typedef struct tm xsd__dateTime;
#endif

/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* eml2_2ForGsoap.h:215 */
class witsml2__AbstractWellLocation;	/* eml2_2ForGsoap.h:251 */
class witsml2__ReferencePoint;	/* eml2_2ForGsoap.h:260 */
class witsml2__RefWellbore;	/* eml2_2ForGsoap.h:263 */
class witsml2__RefWellboreRig;	/* eml2_2ForGsoap.h:266 */
class witsml2__WellDatum;	/* eml2_2ForGsoap.h:272 */
class witsml2__DrillingParams;	/* eml2_2ForGsoap.h:281 */
class witsml2__Fluid;	/* eml2_2ForGsoap.h:284 */
class witsml2__RheometerViscosity;	/* eml2_2ForGsoap.h:290 */
class __witsml2__AbstractBottomHoleTemperature_sequence;	/* eml2_2ForGsoap.h:20532 */
class witsml2__AbstractBottomHoleTemperature;	/* eml2_2ForGsoap.h:293 */
class witsml2__DrillActivity;	/* eml2_2ForGsoap.h:302 */
class witsml2__DrillReportControlIncidentInfo;	/* eml2_2ForGsoap.h:308 */
class witsml2__DrillReportCoreInfo;	/* eml2_2ForGsoap.h:311 */
class witsml2__DrillReportEquipFailureInfo;	/* eml2_2ForGsoap.h:314 */
class witsml2__DrillReportFormTestInfo;	/* eml2_2ForGsoap.h:317 */
class witsml2__DrillReportGasReadingInfo;	/* eml2_2ForGsoap.h:320 */
class witsml2__DrillReportLithShowInfo;	/* eml2_2ForGsoap.h:323 */
class witsml2__DrillReportLogInfo;	/* eml2_2ForGsoap.h:326 */
class witsml2__DrillReportPerfInfo;	/* eml2_2ForGsoap.h:329 */
class witsml2__DrillReportPorePressure;	/* eml2_2ForGsoap.h:332 */
class witsml2__DrillReportStatusInfo;	/* eml2_2ForGsoap.h:335 */
class witsml2__DrillReportStratInfo;	/* eml2_2ForGsoap.h:338 */
class witsml2__DrillReportSurveyStation;	/* eml2_2ForGsoap.h:341 */
class witsml2__DrillReportWellboreInfo;	/* eml2_2ForGsoap.h:344 */
class witsml2__DrillReportWellTestInfo;	/* eml2_2ForGsoap.h:347 */
class witsml2__Rheometer;	/* eml2_2ForGsoap.h:350 */
class witsml2__AbstractRotarySteerableTool;	/* eml2_2ForGsoap.h:356 */
class witsml2__Bend;	/* eml2_2ForGsoap.h:359 */
class witsml2__BitRecord;	/* eml2_2ForGsoap.h:368 */
class witsml2__Connection;	/* eml2_2ForGsoap.h:371 */
class witsml2__HoleOpener;	/* eml2_2ForGsoap.h:374 */
class witsml2__Jar;	/* eml2_2ForGsoap.h:377 */
class witsml2__Motor;	/* eml2_2ForGsoap.h:380 */
class witsml2__MwdTool;	/* eml2_2ForGsoap.h:383 */
class witsml2__Nozzle;	/* eml2_2ForGsoap.h:386 */
class witsml2__RotarySteerableTool;	/* eml2_2ForGsoap.h:389 */
class witsml2__Sensor;	/* eml2_2ForGsoap.h:392 */
class witsml2__Stabilizer;	/* eml2_2ForGsoap.h:395 */
class witsml2__TubularComponent;	/* eml2_2ForGsoap.h:401 */
class witsml2__NameTag;	/* eml2_2ForGsoap.h:404 */
class witsml2__AbstractCementJob;	/* eml2_2ForGsoap.h:407 */
class witsml2__AbstractCementStage;	/* eml2_2ForGsoap.h:410 */
class witsml2__CementAdditive;	/* eml2_2ForGsoap.h:413 */
class witsml2__CementingFluid;	/* eml2_2ForGsoap.h:419 */
class witsml2__CementPumpScheduleStep;	/* eml2_2ForGsoap.h:434 */
class witsml2__FluidLocation;	/* eml2_2ForGsoap.h:443 */
class witsml2__WellboreGeometrySection;	/* eml2_2ForGsoap.h:449 */
class witsml2__AbstractIndexValue;	/* eml2_2ForGsoap.h:452 */
class witsml2__AbstractLogDataContext;	/* eml2_2ForGsoap.h:455 */
class witsml2__ChannelData;	/* eml2_2ForGsoap.h:461 */
class witsml2__ChannelIndex;	/* eml2_2ForGsoap.h:464 */
class witsml2__LogChannelAxis;	/* eml2_2ForGsoap.h:482 */
class witsml2__PointMetadata;	/* eml2_2ForGsoap.h:491 */
class witsml2__DepthRegCalibrationPoint;	/* eml2_2ForGsoap.h:497 */
class witsml2__DepthRegLogRect;	/* eml2_2ForGsoap.h:503 */
class witsml2__DepthRegLogSection;	/* eml2_2ForGsoap.h:506 */
class witsml2__DepthRegParameter;	/* eml2_2ForGsoap.h:509 */
class witsml2__DepthRegPoint;	/* eml2_2ForGsoap.h:512 */
class witsml2__DepthRegRectangle;	/* eml2_2ForGsoap.h:515 */
class witsml2__DepthRegTrack;	/* eml2_2ForGsoap.h:518 */
class witsml2__DepthRegTrackCurve;	/* eml2_2ForGsoap.h:521 */
class witsml2__AbstractEventExtension;	/* eml2_2ForGsoap.h:524 */
class witsml2__BoreholeStringReference;	/* eml2_2ForGsoap.h:533 */
class witsml2__DownholeComponentReference;	/* eml2_2ForGsoap.h:545 */
class witsml2__DownholeStringReference;	/* eml2_2ForGsoap.h:551 */
class witsml2__MemberObject;	/* eml2_2ForGsoap.h:566 */
class witsml2__Participant;	/* eml2_2ForGsoap.h:569 */
class witsml2__Perforating;	/* eml2_2ForGsoap.h:572 */
class witsml2__AbstractConnectionType;	/* eml2_2ForGsoap.h:587 */
class witsml2__Assembly;	/* eml2_2ForGsoap.h:590 */
class witsml2__Borehole;	/* eml2_2ForGsoap.h:593 */
class witsml2__BoreholeString;	/* eml2_2ForGsoap.h:596 */
class witsml2__BoreholeStringSet;	/* eml2_2ForGsoap.h:599 */
class witsml2__DownholeString;	/* eml2_2ForGsoap.h:608 */
class witsml2__DownholeStringSet;	/* eml2_2ForGsoap.h:611 */
class witsml2__Equipment;	/* eml2_2ForGsoap.h:614 */
class witsml2__EquipmentSet;	/* eml2_2ForGsoap.h:620 */
class witsml2__EventInfo;	/* eml2_2ForGsoap.h:623 */
class witsml2__EventRefInfo;	/* eml2_2ForGsoap.h:626 */
class witsml2__ExtPropNameValue;	/* eml2_2ForGsoap.h:629 */
class witsml2__GeologyFeature;	/* eml2_2ForGsoap.h:632 */
class witsml2__ObjectSequence;	/* eml2_2ForGsoap.h:635 */
class witsml2__PerfHole;	/* eml2_2ForGsoap.h:641 */
class witsml2__PerforationSet;	/* eml2_2ForGsoap.h:644 */
class witsml2__PerforationSets;	/* eml2_2ForGsoap.h:647 */
class witsml2__PerfSlot;	/* eml2_2ForGsoap.h:650 */
class witsml2__ReferenceContainer;	/* eml2_2ForGsoap.h:653 */
class witsml2__StringAccessory;	/* eml2_2ForGsoap.h:659 */
class witsml2__StringEquipment;	/* eml2_2ForGsoap.h:662 */
class witsml2__StringEquipmentSet;	/* eml2_2ForGsoap.h:665 */
class __witsml2__AbstractItemWtOrVolPerUnit_sequence;	/* eml2_2ForGsoap.h:26496 */
class witsml2__AbstractItemWtOrVolPerUnit;	/* eml2_2ForGsoap.h:671 */
class witsml2__AnchorState;	/* eml2_2ForGsoap.h:674 */
class witsml2__DayCost;	/* eml2_2ForGsoap.h:677 */
class witsml2__Hse;	/* eml2_2ForGsoap.h:680 */
class witsml2__Incident;	/* eml2_2ForGsoap.h:683 */
class witsml2__Inventory;	/* eml2_2ForGsoap.h:686 */
class witsml2__MudLosses;	/* eml2_2ForGsoap.h:695 */
class witsml2__MudVolume;	/* eml2_2ForGsoap.h:698 */
class witsml2__Personnel;	/* eml2_2ForGsoap.h:704 */
class witsml2__PitVolume;	/* eml2_2ForGsoap.h:707 */
class witsml2__PumpOp;	/* eml2_2ForGsoap.h:710 */
class witsml2__RigResponse;	/* eml2_2ForGsoap.h:713 */
class witsml2__Scr;	/* eml2_2ForGsoap.h:716 */
class witsml2__ShakerOp;	/* eml2_2ForGsoap.h:719 */
class witsml2__ShakerScreen;	/* eml2_2ForGsoap.h:722 */
class witsml2__SupportCraft;	/* eml2_2ForGsoap.h:725 */
class witsml2__Weather;	/* eml2_2ForGsoap.h:728 */
class witsml2__RefWellboreTrajectoryStation;	/* eml2_2ForGsoap.h:731 */
class witsml2__StnTrajCorUsed;	/* eml2_2ForGsoap.h:734 */
class witsml2__StnTrajMatrixCov;	/* eml2_2ForGsoap.h:737 */
class witsml2__StnTrajRawData;	/* eml2_2ForGsoap.h:740 */
class witsml2__StnTrajValid;	/* eml2_2ForGsoap.h:743 */
class witsml2__TrajectoryStation;	/* eml2_2ForGsoap.h:749 */
class witsml2__AbstractOperatingRange;	/* eml2_2ForGsoap.h:752 */
class witsml2__Authorization;	/* eml2_2ForGsoap.h:755 */
class witsml2__AzimuthFormula;	/* eml2_2ForGsoap.h:758 */
class witsml2__ErrorTermValue;	/* eml2_2ForGsoap.h:776 */
class witsml2__Gyro;	/* eml2_2ForGsoap.h:779 */
class witsml2__GyroToolConfiguration;	/* eml2_2ForGsoap.h:782 */
class witsml2__OperatingConstraints;	/* eml2_2ForGsoap.h:785 */
class witsml2__Parameter;	/* eml2_2ForGsoap.h:788 */
class witsml2__XyAccelerometer;	/* eml2_2ForGsoap.h:806 */
class witsml2__Bop;	/* eml2_2ForGsoap.h:809 */
class witsml2__BopComponent;	/* eml2_2ForGsoap.h:812 */
class witsml2__Centrifuge;	/* eml2_2ForGsoap.h:815 */
class witsml2__Degasser;	/* eml2_2ForGsoap.h:818 */
class witsml2__Hydrocyclone;	/* eml2_2ForGsoap.h:821 */
class witsml2__MudPump;	/* eml2_2ForGsoap.h:824 */
class witsml2__Pit;	/* eml2_2ForGsoap.h:827 */
class witsml2__Shaker;	/* eml2_2ForGsoap.h:836 */
class witsml2__SurfaceEquipment;	/* eml2_2ForGsoap.h:839 */
class witsml2__ISO13503_USCORE2CrushTestData;	/* eml2_2ForGsoap.h:845 */
class witsml2__ISO13503_USCORE2SieveAnalysisData;	/* eml2_2ForGsoap.h:848 */
class witsml2__StimEvent;	/* eml2_2ForGsoap.h:854 */
class witsml2__StimFetTest;	/* eml2_2ForGsoap.h:857 */
class witsml2__StimFlowPath;	/* eml2_2ForGsoap.h:860 */
class witsml2__StimFluid;	/* eml2_2ForGsoap.h:863 */
class witsml2__StimISO13503_USCORE2Properties;	/* eml2_2ForGsoap.h:866 */
class witsml2__StimISO13503_USCORE5Point;	/* eml2_2ForGsoap.h:869 */
class witsml2__StimJobDiagnosticSession;	/* eml2_2ForGsoap.h:875 */
class __witsml2__StimJobDiversion_sequence;	/* eml2_2ForGsoap.h:30557 */
class witsml2__StimJobDiversion;	/* eml2_2ForGsoap.h:878 */
class witsml2__StimJobLogCatalog;	/* eml2_2ForGsoap.h:881 */
class witsml2__StimJobMaterialCatalog;	/* eml2_2ForGsoap.h:884 */
class witsml2__StimJobStep;	/* eml2_2ForGsoap.h:890 */
class witsml2__StimMaterial;	/* eml2_2ForGsoap.h:893 */
class witsml2__StimMaterialQuantity;	/* eml2_2ForGsoap.h:896 */
class witsml2__StimPerforationClusterSet;	/* eml2_2ForGsoap.h:902 */
class witsml2__StimPressureFlowRate;	/* eml2_2ForGsoap.h:905 */
class witsml2__StimPumpFlowBackTest;	/* eml2_2ForGsoap.h:911 */
class witsml2__StimPumpFlowBackTestStep;	/* eml2_2ForGsoap.h:914 */
class witsml2__StimReservoirInterval;	/* eml2_2ForGsoap.h:917 */
class witsml2__StimShutInPressure;	/* eml2_2ForGsoap.h:920 */
class witsml2__StimStepDownTest;	/* eml2_2ForGsoap.h:923 */
class witsml2__StimStepTest;	/* eml2_2ForGsoap.h:926 */
class witsml2__StimTubular;	/* eml2_2ForGsoap.h:929 */
class witsml2__SurveySection;	/* eml2_2ForGsoap.h:935 */
class witsml2__CuttingsIntervalLithology;	/* eml2_2ForGsoap.h:944 */
class witsml2__CuttingsIntervalShow;	/* eml2_2ForGsoap.h:947 */
class witsml2__InterpretedIntervalLithology;	/* eml2_2ForGsoap.h:959 */
class witsml2__LithologyQualifier;	/* eml2_2ForGsoap.h:962 */
class witsml2__Chromatograph;	/* eml2_2ForGsoap.h:977 */
class __witsml2__DrillingParameters_sequence;	/* eml2_2ForGsoap.h:32451 */
class witsml2__DrillingParameters;	/* eml2_2ForGsoap.h:980 */
class __witsml2__DxcStatistics_sequence;	/* eml2_2ForGsoap.h:32516 */
class witsml2__DxcStatistics;	/* eml2_2ForGsoap.h:983 */
class __witsml2__EcdStatistics_sequence;	/* eml2_2ForGsoap.h:32551 */
class witsml2__EcdStatistics;	/* eml2_2ForGsoap.h:986 */
class witsml2__GasInMud;	/* eml2_2ForGsoap.h:989 */
class witsml2__GasPeak;	/* eml2_2ForGsoap.h:992 */
class __witsml2__MudDensityStatistics_sequence;	/* eml2_2ForGsoap.h:32665 */
class witsml2__MudDensityStatistics;	/* eml2_2ForGsoap.h:995 */
class __witsml2__MudGas_sequence;	/* eml2_2ForGsoap.h:32700 */
class witsml2__MudGas;	/* eml2_2ForGsoap.h:998 */
class witsml2__MudLogParameter;	/* eml2_2ForGsoap.h:1007 */
class witsml2__MudlogReportInterval;	/* eml2_2ForGsoap.h:1019 */
class __witsml2__RopStatistics_sequence;	/* eml2_2ForGsoap.h:32820 */
class witsml2__RopStatistics;	/* eml2_2ForGsoap.h:1025 */
class __witsml2__RpmStatistics_sequence;	/* eml2_2ForGsoap.h:32865 */
class witsml2__RpmStatistics;	/* eml2_2ForGsoap.h:1028 */
class __witsml2__TorqueCurrentStatistics_sequence;	/* eml2_2ForGsoap.h:32900 */
class witsml2__TorqueCurrentStatistics;	/* eml2_2ForGsoap.h:1031 */
class __witsml2__TorqueStatistics_sequence;	/* eml2_2ForGsoap.h:32935 */
class witsml2__TorqueStatistics;	/* eml2_2ForGsoap.h:1034 */
class __witsml2__WobStatistics_sequence;	/* eml2_2ForGsoap.h:32970 */
class witsml2__WobStatistics;	/* eml2_2ForGsoap.h:1037 */
class witsml2__CompletionStatusHistory;	/* eml2_2ForGsoap.h:1046 */
class witsml2__ContactIntervalSet;	/* eml2_2ForGsoap.h:1052 */
class witsml2__GravelPackInterval;	/* eml2_2ForGsoap.h:1055 */
class witsml2__IntervalStatusHistory;	/* eml2_2ForGsoap.h:1058 */
class witsml2__OpenHoleInterval;	/* eml2_2ForGsoap.h:1061 */
class witsml2__PerforationSetInterval;	/* eml2_2ForGsoap.h:1064 */
class witsml2__PerforationStatusHistory;	/* eml2_2ForGsoap.h:1067 */
class witsml2__SlotsInterval;	/* eml2_2ForGsoap.h:1070 */
class eml22__AbstractObject;	/* eml2_2ForGsoap.h:1076 */
class eml22__Citation;	/* eml2_2ForGsoap.h:1079 */
class eml22__CustomData;	/* eml2_2ForGsoap.h:1082 */
class eml22__ExtensionNameValue;	/* eml2_2ForGsoap.h:1085 */
class eml22__ObjectAlias;	/* eml2_2ForGsoap.h:1088 */
class eml22__AbstractValueArray;	/* eml2_2ForGsoap.h:1106 */
class eml22__Cost;	/* eml2_2ForGsoap.h:1121 */
class eml22__DummyType;	/* eml2_2ForGsoap.h:1127 */
class eml22__JaggedArray;	/* eml2_2ForGsoap.h:1160 */
class eml22__MdInterval;	/* eml2_2ForGsoap.h:1163 */
class eml22__TvdInterval;	/* eml2_2ForGsoap.h:1178 */
class eml22__DataObjectReference;	/* eml2_2ForGsoap.h:2285 */
class eml22__ExternalDataset;	/* eml2_2ForGsoap.h:2291 */
class eml22__ExternalDatasetPart;	/* eml2_2ForGsoap.h:2294 */
class eml22__AbstractActivityParameter;	/* eml2_2ForGsoap.h:2297 */
class eml22__AbstractParameterKey;	/* eml2_2ForGsoap.h:2300 */
class eml22__ParameterTemplate;	/* eml2_2ForGsoap.h:2321 */
class eml22__GeologicTime;	/* eml2_2ForGsoap.h:2333 */
class eml22__TimeIndex;	/* eml2_2ForGsoap.h:2342 */
class eml22__TimeIndices;	/* eml2_2ForGsoap.h:2345 */
class eml22__TimeSeriesParentage;	/* eml2_2ForGsoap.h:2351 */
class eml22__AbstractPressureValue;	/* eml2_2ForGsoap.h:2357 */
union _eml22__union_AbstractTemperaturePressure;	/* eml2_2ForGsoap.h:34204 */
class eml22__AbstractTemperaturePressure;	/* eml2_2ForGsoap.h:2360 */
class eml22__DensityValue;	/* eml2_2ForGsoap.h:2363 */
class eml22__FlowRateValue;	/* eml2_2ForGsoap.h:2366 */
class eml22__PressureValue;	/* eml2_2ForGsoap.h:2372 */
class eml22__VolumeValue;	/* eml2_2ForGsoap.h:2387 */
class eml22__AbstractGeodeticCrs;	/* eml2_2ForGsoap.h:2390 */
class eml22__AbstractProjectedCrs;	/* eml2_2ForGsoap.h:2393 */
class eml22__AbstractVerticalCrs;	/* eml2_2ForGsoap.h:2396 */
class eml22__PublicLandSurveySystem;	/* eml2_2ForGsoap.h:2441 */
class eml22__FailingRule;	/* eml2_2ForGsoap.h:2465 */
class eml22__IndexRange;	/* eml2_2ForGsoap.h:2468 */
class eml22__AbstractGraphicalInformation;	/* eml2_2ForGsoap.h:2471 */
class gml__AbstractGMLType;	/* eml2_2ForGsoap.h:2492 */
class gml__ReferenceType;	/* eml2_2ForGsoap.h:2498 */
union _gml__union_TimePrimitivePropertyType;	/* eml2_2ForGsoap.h:34651 */
class __gml__TimePrimitivePropertyType_sequence;	/* eml2_2ForGsoap.h:34640 */
class gml__TimePrimitivePropertyType;	/* eml2_2ForGsoap.h:2516 */
class __gml__EllipsoidalCSPropertyType_sequence;	/* eml2_2ForGsoap.h:34710 */
class gml__EllipsoidalCSPropertyType;	/* eml2_2ForGsoap.h:2519 */
class __gml__CoordinateSystemAxisPropertyType_sequence;	/* eml2_2ForGsoap.h:34770 */
class gml__CoordinateSystemAxisPropertyType;	/* eml2_2ForGsoap.h:2528 */
class __gml__CartesianCSPropertyType_sequence;	/* eml2_2ForGsoap.h:34830 */
class gml__CartesianCSPropertyType;	/* eml2_2ForGsoap.h:2534 */
class __gml__SphericalCSPropertyType_sequence;	/* eml2_2ForGsoap.h:34890 */
class gml__SphericalCSPropertyType;	/* eml2_2ForGsoap.h:2540 */
class __gml__GeodeticDatumPropertyType_sequence;	/* eml2_2ForGsoap.h:34950 */
class gml__GeodeticDatumPropertyType;	/* eml2_2ForGsoap.h:2546 */
class __gml__PrimeMeridianPropertyType_sequence;	/* eml2_2ForGsoap.h:35010 */
class gml__PrimeMeridianPropertyType;	/* eml2_2ForGsoap.h:2555 */
class __gml__EllipsoidPropertyType_sequence;	/* eml2_2ForGsoap.h:35070 */
class gml__EllipsoidPropertyType;	/* eml2_2ForGsoap.h:2567 */
union _gml__union_GeneralConversionPropertyType;	/* eml2_2ForGsoap.h:35142 */
class __gml__GeneralConversionPropertyType_sequence;	/* eml2_2ForGsoap.h:35130 */
class gml__GeneralConversionPropertyType;	/* eml2_2ForGsoap.h:2582 */
union _gml__union_CRSPropertyType;	/* eml2_2ForGsoap.h:35208 */
class __gml__CRSPropertyType_sequence;	/* eml2_2ForGsoap.h:35197 */
class gml__CRSPropertyType;	/* eml2_2ForGsoap.h:2591 */
class __gml__GeodeticCRSPropertyType_sequence;	/* eml2_2ForGsoap.h:35263 */
class gml__GeodeticCRSPropertyType;	/* eml2_2ForGsoap.h:2594 */
class __gml__VerticalCSPropertyType_sequence;	/* eml2_2ForGsoap.h:35320 */
class gml__VerticalCSPropertyType;	/* eml2_2ForGsoap.h:2600 */
class __gml__VerticalDatumPropertyType_sequence;	/* eml2_2ForGsoap.h:35380 */
class gml__VerticalDatumPropertyType;	/* eml2_2ForGsoap.h:2606 */
class __gml__domainOfValidity_sequence;	/* eml2_2ForGsoap.h:35441 */
class _gml__domainOfValidity;	/* eml2_2ForGsoap.h:2612 */
class _gml__secondDefiningParameter;	/* eml2_2ForGsoap.h:2615 */
union _gml__union_SecondDefiningParameter;	/* eml2_2ForGsoap.h:35531 */
class _gml__SecondDefiningParameter;	/* eml2_2ForGsoap.h:2618 */
union _gml__union_coordinateOperationAccuracy;	/* eml2_2ForGsoap.h:35563 */
class __gml__coordinateOperationAccuracy_sequence;	/* eml2_2ForGsoap.h:35555 */
class _gml__coordinateOperationAccuracy;	/* eml2_2ForGsoap.h:2621 */
union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:35639 */
class __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35631 */
class gmd__EX_USCOREGeographicExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:2627 */
class __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35693 */
class gmd__EX_USCORETemporalExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:2633 */
class __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35749 */
class gmd__EX_USCOREVerticalExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:2639 */
class __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35805 */
class gmd__MD_USCOREIdentifier_USCOREPropertyType;	/* eml2_2ForGsoap.h:2651 */
class __gmd__CI_USCORECitation_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35861 */
class gmd__CI_USCORECitation_USCOREPropertyType;	/* eml2_2ForGsoap.h:2657 */
class __gmd__CI_USCOREDate_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35917 */
class gmd__CI_USCOREDate_USCOREPropertyType;	/* eml2_2ForGsoap.h:2663 */
class __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35973 */
class gmd__CI_USCOREDateTypeCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:2669 */
class __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:35999 */
class gmd__CI_USCOREResponsibleParty_USCOREPropertyType;	/* eml2_2ForGsoap.h:2672 */
class __gmd__CI_USCOREContact_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36055 */
class gmd__CI_USCOREContact_USCOREPropertyType;	/* eml2_2ForGsoap.h:2678 */
class __gmd__CI_USCORETelephone_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36111 */
class gmd__CI_USCORETelephone_USCOREPropertyType;	/* eml2_2ForGsoap.h:2684 */
class __gmd__CI_USCOREAddress_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36167 */
class gmd__CI_USCOREAddress_USCOREPropertyType;	/* eml2_2ForGsoap.h:2690 */
class __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36223 */
class gmd__CI_USCOREOnlineResource_USCOREPropertyType;	/* eml2_2ForGsoap.h:2696 */
class __gmd__URL_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36279 */
class gmd__URL_USCOREPropertyType;	/* eml2_2ForGsoap.h:2702 */
class __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36305 */
class gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:2705 */
class __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36331 */
class gmd__CI_USCORERoleCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:2708 */
class __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36357 */
class gmd__CI_USCOREPresentationFormCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:2711 */
class __gmd__CI_USCORESeries_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36383 */
class gmd__CI_USCORESeries_USCOREPropertyType;	/* eml2_2ForGsoap.h:2714 */
class __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36439 */
class gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:2720 */
union _gmd__union_DQ_USCOREResult_USCOREPropertyType;	/* eml2_2ForGsoap.h:36473 */
class __gmd__DQ_USCOREResult_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36465 */
class gmd__DQ_USCOREResult_USCOREPropertyType;	/* eml2_2ForGsoap.h:2723 */
union _gts__union_TM_USCOREPrimitive_USCOREPropertyType;	/* eml2_2ForGsoap.h:36546 */
class __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36535 */
class gts__TM_USCOREPrimitive_USCOREPropertyType;	/* eml2_2ForGsoap.h:2729 */
class gco__AbstractObject_USCOREType;	/* eml2_2ForGsoap.h:2732 */
union _gco__union_CharacterString_USCOREPropertyType;	/* eml2_2ForGsoap.h:36660 */
class __gco__CharacterString_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36631 */
class gco__CharacterString_USCOREPropertyType;	/* eml2_2ForGsoap.h:2735 */
class __gco__Boolean_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36684 */
class gco__Boolean_USCOREPropertyType;	/* eml2_2ForGsoap.h:2738 */
class __gco__Real_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36710 */
class gco__Real_USCOREPropertyType;	/* eml2_2ForGsoap.h:2741 */
union _gco__union_Date_USCOREPropertyType;	/* eml2_2ForGsoap.h:36744 */
class gco__Date_USCOREPropertyType;	/* eml2_2ForGsoap.h:2744 */
class __gco__DateTime_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36766 */
class gco__DateTime_USCOREPropertyType;	/* eml2_2ForGsoap.h:2750 */
union _gsr__union_SC_USCORECRS_USCOREPropertyType;	/* eml2_2ForGsoap.h:36811 */
class __gsr__SC_USCORECRS_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:36800 */
class gsr__SC_USCORECRS_USCOREPropertyType;	/* eml2_2ForGsoap.h:2753 */
class witsml2__Attachment;	/* eml2_2ForGsoap.h:245 */
class witsml2__Wellbore;	/* eml2_2ForGsoap.h:248 */
class witsml2__GeodeticWellLocation;	/* eml2_2ForGsoap.h:254 */
class witsml2__ProjectedWellLocation;	/* eml2_2ForGsoap.h:257 */
class witsml2__Well;	/* eml2_2ForGsoap.h:269 */
class witsml2__BhaRun;	/* eml2_2ForGsoap.h:278 */
class witsml2__FluidsReport;	/* eml2_2ForGsoap.h:287 */
class __witsml2__BottomHoleCirculatingTemperature_sequence_;	/* eml2_2ForGsoap.h:37574 */
class witsml2__BottomHoleCirculatingTemperature;	/* eml2_2ForGsoap.h:296 */
class __witsml2__BottomHoleStaticTemperature_sequence_;	/* eml2_2ForGsoap.h:37610 */
class witsml2__BottomHoleStaticTemperature;	/* eml2_2ForGsoap.h:299 */
class witsml2__DrillReport;	/* eml2_2ForGsoap.h:305 */
class __witsml2__BendAngle_sequence;	/* eml2_2ForGsoap.h:37751 */
class witsml2__BendAngle;	/* eml2_2ForGsoap.h:362 */
class __witsml2__BendOffset_sequence;	/* eml2_2ForGsoap.h:37782 */
class witsml2__BendOffset;	/* eml2_2ForGsoap.h:365 */
class witsml2__Tubular;	/* eml2_2ForGsoap.h:398 */
class witsml2__CementDesignStage;	/* eml2_2ForGsoap.h:416 */
class witsml2__CementJob;	/* eml2_2ForGsoap.h:422 */
class witsml2__CementJobDesign;	/* eml2_2ForGsoap.h:425 */
class witsml2__CementJobEvaluation;	/* eml2_2ForGsoap.h:428 */
class witsml2__CementJobReport;	/* eml2_2ForGsoap.h:431 */
class witsml2__CementStageDesign;	/* eml2_2ForGsoap.h:437 */
class witsml2__CementStageReport;	/* eml2_2ForGsoap.h:440 */
class witsml2__WellboreGeometry;	/* eml2_2ForGsoap.h:446 */
class witsml2__Channel;	/* eml2_2ForGsoap.h:458 */
class witsml2__ChannelSet;	/* eml2_2ForGsoap.h:467 */
class witsml2__ChannelValueContext;	/* eml2_2ForGsoap.h:470 */
class witsml2__DepthIndexValue;	/* eml2_2ForGsoap.h:473 */
class witsml2__IndexRangeContext;	/* eml2_2ForGsoap.h:476 */
class witsml2__Log;	/* eml2_2ForGsoap.h:479 */
class witsml2__ObjectContext;	/* eml2_2ForGsoap.h:485 */
class witsml2__PassIndexedDepth;	/* eml2_2ForGsoap.h:488 */
class witsml2__TimeIndexValue;	/* eml2_2ForGsoap.h:494 */
class witsml2__DepthRegImage;	/* eml2_2ForGsoap.h:500 */
class witsml2__AcidizefracExtension;	/* eml2_2ForGsoap.h:527 */
class witsml2__BHPExtension;	/* eml2_2ForGsoap.h:530 */
class witsml2__CementExtension;	/* eml2_2ForGsoap.h:536 */
class witsml2__CleanFillExtension;	/* eml2_2ForGsoap.h:539 */
class witsml2__DirectionalSurveyExtension;	/* eml2_2ForGsoap.h:542 */
class witsml2__DownholeExtension;	/* eml2_2ForGsoap.h:548 */
class witsml2__FluidReportExtension;	/* eml2_2ForGsoap.h:557 */
class witsml2__JobExtension;	/* eml2_2ForGsoap.h:560 */
class witsml2__LostCirculationExtension;	/* eml2_2ForGsoap.h:563 */
class witsml2__PerforatingExtension;	/* eml2_2ForGsoap.h:575 */
class witsml2__PressureTestExtension;	/* eml2_2ForGsoap.h:578 */
class witsml2__WaitingOnExtension;	/* eml2_2ForGsoap.h:581 */
class witsml2__WellCMLedger;	/* eml2_2ForGsoap.h:584 */
class witsml2__CasingConnectionType;	/* eml2_2ForGsoap.h:602 */
class witsml2__DownholeComponent;	/* eml2_2ForGsoap.h:605 */
class witsml2__EquipmentConnection;	/* eml2_2ForGsoap.h:617 */
class witsml2__OtherConnectionType;	/* eml2_2ForGsoap.h:638 */
class witsml2__RodConnectionType;	/* eml2_2ForGsoap.h:656 */
class witsml2__TubingConnectionType;	/* eml2_2ForGsoap.h:668 */
class witsml2__ItemVolPerUnit;	/* eml2_2ForGsoap.h:689 */
class witsml2__ItemWtPerUnit;	/* eml2_2ForGsoap.h:692 */
class witsml2__OpsReport;	/* eml2_2ForGsoap.h:701 */
class witsml2__Trajectory;	/* eml2_2ForGsoap.h:746 */
class witsml2__ContinuousAzimuthFormula;	/* eml2_2ForGsoap.h:764 */
class witsml2__CustomOperatingRange;	/* eml2_2ForGsoap.h:767 */
class witsml2__ErrorTerm;	/* eml2_2ForGsoap.h:770 */
class witsml2__ErrorTermDictionary;	/* eml2_2ForGsoap.h:773 */
class witsml2__PlaneAngleOperatingRange;	/* eml2_2ForGsoap.h:791 */
class witsml2__ToolErrorModel;	/* eml2_2ForGsoap.h:794 */
class witsml2__ToolErrorModelDictionary;	/* eml2_2ForGsoap.h:797 */
class witsml2__WeightingFunction;	/* eml2_2ForGsoap.h:800 */
class witsml2__WeightingFunctionDictionary;	/* eml2_2ForGsoap.h:803 */
class witsml2__Rig;	/* eml2_2ForGsoap.h:830 */
class witsml2__RigUtilization;	/* eml2_2ForGsoap.h:833 */
class witsml2__Risk;	/* eml2_2ForGsoap.h:842 */
class witsml2__StimAdditive;	/* eml2_2ForGsoap.h:851 */
class witsml2__StimJob;	/* eml2_2ForGsoap.h:872 */
class witsml2__StimJobStage;	/* eml2_2ForGsoap.h:887 */
class witsml2__StimPerforationCluster;	/* eml2_2ForGsoap.h:899 */
class witsml2__StimProppantAgent;	/* eml2_2ForGsoap.h:908 */
class witsml2__SurveyProgram;	/* eml2_2ForGsoap.h:932 */
class witsml2__CuttingsGeology;	/* eml2_2ForGsoap.h:938 */
class witsml2__CuttingsGeologyInterval;	/* eml2_2ForGsoap.h:941 */
class witsml2__InterpretedGeology;	/* eml2_2ForGsoap.h:953 */
class witsml2__InterpretedGeologyInterval;	/* eml2_2ForGsoap.h:956 */
class witsml2__ShowEvaluation;	/* eml2_2ForGsoap.h:968 */
class witsml2__ShowEvaluationInterval;	/* eml2_2ForGsoap.h:971 */
class witsml2__WellboreGeology;	/* eml2_2ForGsoap.h:974 */
class witsml2__MudLogConcentrationParameter;	/* eml2_2ForGsoap.h:1001 */
class witsml2__MudLogForceParameter;	/* eml2_2ForGsoap.h:1004 */
class witsml2__MudLogPressureGradientParameter;	/* eml2_2ForGsoap.h:1010 */
class witsml2__MudLogPressureParameter;	/* eml2_2ForGsoap.h:1013 */
class witsml2__MudLogReport;	/* eml2_2ForGsoap.h:1016 */
class witsml2__MudLogStringParameter;	/* eml2_2ForGsoap.h:1022 */
class witsml2__WellboreMarker;	/* eml2_2ForGsoap.h:1040 */
class witsml2__WellboreMarkerSet;	/* eml2_2ForGsoap.h:1043 */
class witsml2__WellCompletion;	/* eml2_2ForGsoap.h:1049 */
class witsml2__WellboreCompletion;	/* eml2_2ForGsoap.h:1073 */
class eml22__AbstractBooleanArray;	/* eml2_2ForGsoap.h:1091 */
class eml22__AbstractNumericArray;	/* eml2_2ForGsoap.h:1100 */
class eml22__AbstractStringArray;	/* eml2_2ForGsoap.h:1103 */
class eml22__EpcExternalPartReference;	/* eml2_2ForGsoap.h:2288 */
class eml22__Activity;	/* eml2_2ForGsoap.h:2303 */
class eml22__ActivityTemplate;	/* eml2_2ForGsoap.h:2306 */
class eml22__DataObjectParameter;	/* eml2_2ForGsoap.h:2309 */
class eml22__DoubleQuantityParameter;	/* eml2_2ForGsoap.h:2312 */
class eml22__IntegerQuantityParameter;	/* eml2_2ForGsoap.h:2315 */
class eml22__ObjectParameterKey;	/* eml2_2ForGsoap.h:2318 */
class eml22__StringParameter;	/* eml2_2ForGsoap.h:2324 */
class eml22__TimeIndexParameter;	/* eml2_2ForGsoap.h:2327 */
class eml22__TimeIndexParameterKey;	/* eml2_2ForGsoap.h:2330 */
class eml22__PropertyKind;	/* eml2_2ForGsoap.h:2336 */
class eml22__PropertyKindDictionary;	/* eml2_2ForGsoap.h:2339 */
class eml22__TimeSeries;	/* eml2_2ForGsoap.h:2348 */
class eml22__AbsolutePressure;	/* eml2_2ForGsoap.h:2354 */
class eml22__GaugePressure;	/* eml2_2ForGsoap.h:2369 */
union _eml22__union_ReferenceTemperaturePressure_;	/* eml2_2ForGsoap.h:45253 */
class eml22__ReferenceTemperaturePressure;	/* eml2_2ForGsoap.h:2378 */
class eml22__RelativePressure;	/* eml2_2ForGsoap.h:2381 */
class eml22__TemperaturePressure;	/* eml2_2ForGsoap.h:2384 */
class eml22__GeodeticCrs;	/* eml2_2ForGsoap.h:2405 */
class eml22__GeodeticEpsgCrs;	/* eml2_2ForGsoap.h:2408 */
class eml22__GeodeticGmlCrs;	/* eml2_2ForGsoap.h:2411 */
class eml22__GeodeticLocalAuthorityCrs;	/* eml2_2ForGsoap.h:2414 */
class eml22__GeodeticUnknownCrs;	/* eml2_2ForGsoap.h:2417 */
class eml22__GeodeticWktCrs;	/* eml2_2ForGsoap.h:2420 */
class eml22__ProjectedCrs;	/* eml2_2ForGsoap.h:2423 */
class eml22__ProjectedEpsgCrs;	/* eml2_2ForGsoap.h:2426 */
class eml22__ProjectedGmlCrs;	/* eml2_2ForGsoap.h:2429 */
class eml22__ProjectedLocalAuthorityCrs;	/* eml2_2ForGsoap.h:2432 */
class eml22__ProjectedUnknownCrs;	/* eml2_2ForGsoap.h:2435 */
class eml22__ProjectedWktCrs;	/* eml2_2ForGsoap.h:2438 */
class eml22__VerticalCrs;	/* eml2_2ForGsoap.h:2444 */
class eml22__VerticalEpsgCrs;	/* eml2_2ForGsoap.h:2447 */
class eml22__VerticalGmlCrs;	/* eml2_2ForGsoap.h:2450 */
class eml22__VerticalLocalAuthorityCrs;	/* eml2_2ForGsoap.h:2453 */
class eml22__VerticalUnknownCrs;	/* eml2_2ForGsoap.h:2456 */
class eml22__VerticalWktCrs;	/* eml2_2ForGsoap.h:2459 */
class eml22__DataAssuranceRecord;	/* eml2_2ForGsoap.h:2462 */
class eml22__GraphicalInformationSet;	/* eml2_2ForGsoap.h:2474 */
class gml__DefinitionBaseType;	/* eml2_2ForGsoap.h:2489 */
class gml__StringOrRefType;	/* eml2_2ForGsoap.h:2495 */
class gml__CodeType;	/* eml2_2ForGsoap.h:2504 */
class gml__AbstractTimeObjectType;	/* eml2_2ForGsoap.h:2510 */
class gml__RelatedTimeType;	/* eml2_2ForGsoap.h:2513 */
class gml__MeasureType;	/* eml2_2ForGsoap.h:2564 */
class gmd__EX_USCOREExtent_USCOREType;	/* eml2_2ForGsoap.h:2624 */
class gmd__AbstractEX_USCOREGeographicExtent_USCOREType;	/* eml2_2ForGsoap.h:2630 */
class gmd__EX_USCORETemporalExtent_USCOREType;	/* eml2_2ForGsoap.h:2636 */
class gmd__EX_USCOREVerticalExtent_USCOREType;	/* eml2_2ForGsoap.h:2642 */
class gmd__AbstractDQ_USCOREElement_USCOREType;	/* eml2_2ForGsoap.h:2648 */
class gmd__MD_USCOREIdentifier_USCOREType;	/* eml2_2ForGsoap.h:2654 */
class gmd__CI_USCORECitation_USCOREType;	/* eml2_2ForGsoap.h:2660 */
class gmd__CI_USCOREDate_USCOREType;	/* eml2_2ForGsoap.h:2666 */
class gmd__CI_USCOREResponsibleParty_USCOREType;	/* eml2_2ForGsoap.h:2675 */
class gmd__CI_USCOREContact_USCOREType;	/* eml2_2ForGsoap.h:2681 */
class gmd__CI_USCORETelephone_USCOREType;	/* eml2_2ForGsoap.h:2687 */
class gmd__CI_USCOREAddress_USCOREType;	/* eml2_2ForGsoap.h:2693 */
class gmd__CI_USCOREOnlineResource_USCOREType;	/* eml2_2ForGsoap.h:2699 */
class gmd__CI_USCORESeries_USCOREType;	/* eml2_2ForGsoap.h:2717 */
class gmd__AbstractDQ_USCOREResult_USCOREType;	/* eml2_2ForGsoap.h:2726 */
class gco__CodeListValue_USCOREType;	/* eml2_2ForGsoap.h:2747 */
class witsml2__WellElevationCoord;	/* eml2_2ForGsoap.h:275 */
class witsml2__AzimuthRange;	/* eml2_2ForGsoap.h:761 */
class eml22__AbstractFloatingPointArray;	/* eml2_2ForGsoap.h:1094 */
class eml22__AbstractIntegerArray;	/* eml2_2ForGsoap.h:1097 */
class eml22__BooleanArrayFromIndexArray;	/* eml2_2ForGsoap.h:1112 */
class eml22__BooleanConstantArray;	/* eml2_2ForGsoap.h:1115 */
class eml22__BooleanExternalArray;	/* eml2_2ForGsoap.h:1118 */
class eml22__GenericMeasure;	/* eml2_2ForGsoap.h:1142 */
class eml22__MeasuredDepthCoord;	/* eml2_2ForGsoap.h:1166 */
class eml22__StringConstantArray;	/* eml2_2ForGsoap.h:1169 */
class eml22__StringExternalArray;	/* eml2_2ForGsoap.h:1172 */
class eml22__WellVerticalDepthCoord;	/* eml2_2ForGsoap.h:1181 */
class eml22__AbsorbedDoseMeasure;	/* eml2_2ForGsoap.h:1184 */
class eml22__AbsorbedDoseMeasureExt;	/* eml2_2ForGsoap.h:1187 */
class eml22__ActivityOfRadioactivityMeasure;	/* eml2_2ForGsoap.h:1190 */
class eml22__ActivityOfRadioactivityMeasureExt;	/* eml2_2ForGsoap.h:1193 */
class eml22__AmountOfSubstanceMeasure;	/* eml2_2ForGsoap.h:1196 */
class eml22__AmountOfSubstanceMeasureExt;	/* eml2_2ForGsoap.h:1199 */
class eml22__AmountOfSubstancePerAmountOfSubstanceMeasure;	/* eml2_2ForGsoap.h:1202 */
class eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt;	/* eml2_2ForGsoap.h:1205 */
class eml22__AmountOfSubstancePerAreaMeasure;	/* eml2_2ForGsoap.h:1208 */
class eml22__AmountOfSubstancePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1211 */
class eml22__AmountOfSubstancePerTimeMeasure;	/* eml2_2ForGsoap.h:1214 */
class eml22__AmountOfSubstancePerTimeMeasureExt;	/* eml2_2ForGsoap.h:1217 */
class eml22__AmountOfSubstancePerTimePerAreaMeasure;	/* eml2_2ForGsoap.h:1220 */
class eml22__AmountOfSubstancePerTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1223 */
class eml22__AmountOfSubstancePerVolumeMeasure;	/* eml2_2ForGsoap.h:1226 */
class eml22__AmountOfSubstancePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1229 */
class eml22__AnglePerLengthMeasure;	/* eml2_2ForGsoap.h:1232 */
class eml22__AnglePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1235 */
class eml22__AnglePerVolumeMeasure;	/* eml2_2ForGsoap.h:1238 */
class eml22__AnglePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1241 */
class eml22__AngularAccelerationMeasure;	/* eml2_2ForGsoap.h:1244 */
class eml22__AngularAccelerationMeasureExt;	/* eml2_2ForGsoap.h:1247 */
class eml22__AngularVelocityMeasure;	/* eml2_2ForGsoap.h:1250 */
class eml22__AngularVelocityMeasureExt;	/* eml2_2ForGsoap.h:1253 */
class eml22__APIGammaRayMeasure;	/* eml2_2ForGsoap.h:1256 */
class eml22__APIGammaRayMeasureExt;	/* eml2_2ForGsoap.h:1259 */
class eml22__APIGravityMeasure;	/* eml2_2ForGsoap.h:1262 */
class eml22__APIGravityMeasureExt;	/* eml2_2ForGsoap.h:1265 */
class eml22__APINeutronMeasure;	/* eml2_2ForGsoap.h:1268 */
class eml22__APINeutronMeasureExt;	/* eml2_2ForGsoap.h:1271 */
class eml22__AreaMeasure;	/* eml2_2ForGsoap.h:1274 */
class eml22__AreaMeasureExt;	/* eml2_2ForGsoap.h:1277 */
class eml22__AreaPerAmountOfSubstanceMeasure;	/* eml2_2ForGsoap.h:1280 */
class eml22__AreaPerAmountOfSubstanceMeasureExt;	/* eml2_2ForGsoap.h:1283 */
class eml22__AreaPerAreaMeasure;	/* eml2_2ForGsoap.h:1286 */
class eml22__AreaPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1289 */
class eml22__AreaPerCountMeasure;	/* eml2_2ForGsoap.h:1292 */
class eml22__AreaPerCountMeasureExt;	/* eml2_2ForGsoap.h:1295 */
class eml22__AreaPerMassMeasure;	/* eml2_2ForGsoap.h:1298 */
class eml22__AreaPerMassMeasureExt;	/* eml2_2ForGsoap.h:1301 */
class eml22__AreaPerTimeMeasure;	/* eml2_2ForGsoap.h:1304 */
class eml22__AreaPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1307 */
class eml22__AreaPerVolumeMeasure;	/* eml2_2ForGsoap.h:1310 */
class eml22__AreaPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1313 */
class eml22__AttenuationPerFrequencyIntervalMeasure;	/* eml2_2ForGsoap.h:1316 */
class eml22__AttenuationPerFrequencyIntervalMeasureExt;	/* eml2_2ForGsoap.h:1319 */
class eml22__CapacitanceMeasure;	/* eml2_2ForGsoap.h:1322 */
class eml22__CapacitanceMeasureExt;	/* eml2_2ForGsoap.h:1325 */
class eml22__CationExchangeCapacityMeasure;	/* eml2_2ForGsoap.h:1328 */
class eml22__CationExchangeCapacityMeasureExt;	/* eml2_2ForGsoap.h:1331 */
class eml22__DataTransferSpeedMeasure;	/* eml2_2ForGsoap.h:1334 */
class eml22__DataTransferSpeedMeasureExt;	/* eml2_2ForGsoap.h:1337 */
class eml22__DiffusionCoefficientMeasure;	/* eml2_2ForGsoap.h:1340 */
class eml22__DiffusionCoefficientMeasureExt;	/* eml2_2ForGsoap.h:1343 */
class eml22__DiffusiveTimeOfFlightMeasure;	/* eml2_2ForGsoap.h:1346 */
class eml22__DiffusiveTimeOfFlightMeasureExt;	/* eml2_2ForGsoap.h:1349 */
class eml22__DigitalStorageMeasure;	/* eml2_2ForGsoap.h:1352 */
class eml22__DigitalStorageMeasureExt;	/* eml2_2ForGsoap.h:1355 */
class eml22__DimensionlessMeasure;	/* eml2_2ForGsoap.h:1358 */
class eml22__DimensionlessMeasureExt;	/* eml2_2ForGsoap.h:1361 */
class eml22__DipoleMomentMeasure;	/* eml2_2ForGsoap.h:1364 */
class eml22__DipoleMomentMeasureExt;	/* eml2_2ForGsoap.h:1367 */
class eml22__DoseEquivalentMeasure;	/* eml2_2ForGsoap.h:1370 */
class eml22__DoseEquivalentMeasureExt;	/* eml2_2ForGsoap.h:1373 */
class eml22__DynamicViscosityMeasure;	/* eml2_2ForGsoap.h:1376 */
class eml22__DynamicViscosityMeasureExt;	/* eml2_2ForGsoap.h:1379 */
class eml22__ElectricalResistivityMeasure;	/* eml2_2ForGsoap.h:1382 */
class eml22__ElectricalResistivityMeasureExt;	/* eml2_2ForGsoap.h:1385 */
class eml22__ElectricChargeMeasure;	/* eml2_2ForGsoap.h:1388 */
class eml22__ElectricChargeMeasureExt;	/* eml2_2ForGsoap.h:1391 */
class eml22__ElectricChargePerAreaMeasure;	/* eml2_2ForGsoap.h:1394 */
class eml22__ElectricChargePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1397 */
class eml22__ElectricChargePerMassMeasure;	/* eml2_2ForGsoap.h:1400 */
class eml22__ElectricChargePerMassMeasureExt;	/* eml2_2ForGsoap.h:1403 */
class eml22__ElectricChargePerVolumeMeasure;	/* eml2_2ForGsoap.h:1406 */
class eml22__ElectricChargePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1409 */
class eml22__ElectricConductanceMeasure;	/* eml2_2ForGsoap.h:1412 */
class eml22__ElectricConductanceMeasureExt;	/* eml2_2ForGsoap.h:1415 */
class eml22__ElectricConductivityMeasure;	/* eml2_2ForGsoap.h:1418 */
class eml22__ElectricConductivityMeasureExt;	/* eml2_2ForGsoap.h:1421 */
class eml22__ElectricCurrentDensityMeasure;	/* eml2_2ForGsoap.h:1424 */
class eml22__ElectricCurrentDensityMeasureExt;	/* eml2_2ForGsoap.h:1427 */
class eml22__ElectricCurrentMeasure;	/* eml2_2ForGsoap.h:1430 */
class eml22__ElectricCurrentMeasureExt;	/* eml2_2ForGsoap.h:1433 */
class eml22__ElectricFieldStrengthMeasure;	/* eml2_2ForGsoap.h:1436 */
class eml22__ElectricFieldStrengthMeasureExt;	/* eml2_2ForGsoap.h:1439 */
class eml22__ElectricPotentialDifferenceMeasure;	/* eml2_2ForGsoap.h:1442 */
class eml22__ElectricPotentialDifferenceMeasureExt;	/* eml2_2ForGsoap.h:1445 */
class eml22__ElectricResistanceMeasure;	/* eml2_2ForGsoap.h:1448 */
class eml22__ElectricResistanceMeasureExt;	/* eml2_2ForGsoap.h:1451 */
class eml22__ElectricResistancePerLengthMeasure;	/* eml2_2ForGsoap.h:1454 */
class eml22__ElectricResistancePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1457 */
class eml22__ElectromagneticMomentMeasure;	/* eml2_2ForGsoap.h:1460 */
class eml22__ElectromagneticMomentMeasureExt;	/* eml2_2ForGsoap.h:1463 */
class eml22__EnergyLengthPerAreaMeasure;	/* eml2_2ForGsoap.h:1466 */
class eml22__EnergyLengthPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1469 */
class eml22__EnergyLengthPerTimeAreaTemperatureMeasure;	/* eml2_2ForGsoap.h:1472 */
class eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1475 */
class eml22__EnergyMeasure;	/* eml2_2ForGsoap.h:1478 */
class eml22__EnergyMeasureExt;	/* eml2_2ForGsoap.h:1481 */
class eml22__EnergyPerAreaMeasure;	/* eml2_2ForGsoap.h:1484 */
class eml22__EnergyPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1487 */
class eml22__EnergyPerLengthMeasure;	/* eml2_2ForGsoap.h:1490 */
class eml22__EnergyPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1493 */
class eml22__EnergyPerMassMeasure;	/* eml2_2ForGsoap.h:1496 */
class eml22__EnergyPerMassMeasureExt;	/* eml2_2ForGsoap.h:1499 */
class eml22__EnergyPerMassPerTimeMeasure;	/* eml2_2ForGsoap.h:1502 */
class eml22__EnergyPerMassPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1505 */
class eml22__EnergyPerVolumeMeasure;	/* eml2_2ForGsoap.h:1508 */
class eml22__EnergyPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1511 */
class eml22__ForceAreaMeasure;	/* eml2_2ForGsoap.h:1514 */
class eml22__ForceAreaMeasureExt;	/* eml2_2ForGsoap.h:1517 */
class eml22__ForceLengthPerLengthMeasure;	/* eml2_2ForGsoap.h:1520 */
class eml22__ForceLengthPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1523 */
class eml22__ForceMeasure;	/* eml2_2ForGsoap.h:1526 */
class eml22__ForceMeasureExt;	/* eml2_2ForGsoap.h:1529 */
class eml22__ForcePerForceMeasure;	/* eml2_2ForGsoap.h:1532 */
class eml22__ForcePerForceMeasureExt;	/* eml2_2ForGsoap.h:1535 */
class eml22__ForcePerLengthMeasure;	/* eml2_2ForGsoap.h:1538 */
class eml22__ForcePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1541 */
class eml22__ForcePerVolumeMeasure;	/* eml2_2ForGsoap.h:1544 */
class eml22__ForcePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1547 */
class eml22__FrequencyIntervalMeasure;	/* eml2_2ForGsoap.h:1550 */
class eml22__FrequencyIntervalMeasureExt;	/* eml2_2ForGsoap.h:1553 */
class eml22__FrequencyMeasure;	/* eml2_2ForGsoap.h:1556 */
class eml22__FrequencyMeasureExt;	/* eml2_2ForGsoap.h:1559 */
class eml22__HeatCapacityMeasure;	/* eml2_2ForGsoap.h:1562 */
class eml22__HeatCapacityMeasureExt;	/* eml2_2ForGsoap.h:1565 */
class eml22__HeatFlowRateMeasure;	/* eml2_2ForGsoap.h:1568 */
class eml22__HeatFlowRateMeasureExt;	/* eml2_2ForGsoap.h:1571 */
class eml22__HeatTransferCoefficientMeasure;	/* eml2_2ForGsoap.h:1574 */
class eml22__HeatTransferCoefficientMeasureExt;	/* eml2_2ForGsoap.h:1577 */
class eml22__IlluminanceMeasure;	/* eml2_2ForGsoap.h:1580 */
class eml22__IlluminanceMeasureExt;	/* eml2_2ForGsoap.h:1583 */
class eml22__InductanceMeasure;	/* eml2_2ForGsoap.h:1586 */
class eml22__InductanceMeasureExt;	/* eml2_2ForGsoap.h:1589 */
class eml22__IsothermalCompressibilityMeasure;	/* eml2_2ForGsoap.h:1592 */
class eml22__IsothermalCompressibilityMeasureExt;	/* eml2_2ForGsoap.h:1595 */
class eml22__KinematicViscosityMeasure;	/* eml2_2ForGsoap.h:1598 */
class eml22__KinematicViscosityMeasureExt;	/* eml2_2ForGsoap.h:1601 */
class eml22__LengthMeasure;	/* eml2_2ForGsoap.h:1604 */
class eml22__LengthMeasureExt;	/* eml2_2ForGsoap.h:1607 */
class eml22__LengthPerLengthMeasure;	/* eml2_2ForGsoap.h:1610 */
class eml22__LengthPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1613 */
class eml22__LengthPerMassMeasure;	/* eml2_2ForGsoap.h:1616 */
class eml22__LengthPerMassMeasureExt;	/* eml2_2ForGsoap.h:1619 */
class eml22__LengthPerPressureMeasure;	/* eml2_2ForGsoap.h:1622 */
class eml22__LengthPerPressureMeasureExt;	/* eml2_2ForGsoap.h:1625 */
class eml22__LengthPerTemperatureMeasure;	/* eml2_2ForGsoap.h:1628 */
class eml22__LengthPerTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1631 */
class eml22__LengthPerTimeMeasure;	/* eml2_2ForGsoap.h:1634 */
class eml22__LengthPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1637 */
class eml22__LengthPerVolumeMeasure;	/* eml2_2ForGsoap.h:1640 */
class eml22__LengthPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1643 */
class eml22__LightExposureMeasure;	/* eml2_2ForGsoap.h:1646 */
class eml22__LightExposureMeasureExt;	/* eml2_2ForGsoap.h:1649 */
class eml22__LinearAccelerationMeasure;	/* eml2_2ForGsoap.h:1652 */
class eml22__LinearAccelerationMeasureExt;	/* eml2_2ForGsoap.h:1655 */
class eml22__LinearThermalExpansionMeasure;	/* eml2_2ForGsoap.h:1658 */
class eml22__LinearThermalExpansionMeasureExt;	/* eml2_2ForGsoap.h:1661 */
class eml22__LogarithmicPowerRatioMeasure;	/* eml2_2ForGsoap.h:1664 */
class eml22__LogarithmicPowerRatioMeasureExt;	/* eml2_2ForGsoap.h:1667 */
class eml22__LogarithmicPowerRatioPerLengthMeasure;	/* eml2_2ForGsoap.h:1670 */
class eml22__LogarithmicPowerRatioPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1673 */
class eml22__LuminanceMeasure;	/* eml2_2ForGsoap.h:1676 */
class eml22__LuminanceMeasureExt;	/* eml2_2ForGsoap.h:1679 */
class eml22__LuminousEfficacyMeasure;	/* eml2_2ForGsoap.h:1682 */
class eml22__LuminousEfficacyMeasureExt;	/* eml2_2ForGsoap.h:1685 */
class eml22__LuminousFluxMeasure;	/* eml2_2ForGsoap.h:1688 */
class eml22__LuminousFluxMeasureExt;	/* eml2_2ForGsoap.h:1691 */
class eml22__LuminousIntensityMeasure;	/* eml2_2ForGsoap.h:1694 */
class eml22__LuminousIntensityMeasureExt;	/* eml2_2ForGsoap.h:1697 */
class eml22__MagneticDipoleMomentMeasure;	/* eml2_2ForGsoap.h:1700 */
class eml22__MagneticDipoleMomentMeasureExt;	/* eml2_2ForGsoap.h:1703 */
class eml22__MagneticFieldStrengthMeasure;	/* eml2_2ForGsoap.h:1706 */
class eml22__MagneticFieldStrengthMeasureExt;	/* eml2_2ForGsoap.h:1709 */
class eml22__MagneticFluxDensityMeasure;	/* eml2_2ForGsoap.h:1712 */
class eml22__MagneticFluxDensityMeasureExt;	/* eml2_2ForGsoap.h:1715 */
class eml22__MagneticFluxDensityPerLengthMeasure;	/* eml2_2ForGsoap.h:1718 */
class eml22__MagneticFluxDensityPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1721 */
class eml22__MagneticFluxMeasure;	/* eml2_2ForGsoap.h:1724 */
class eml22__MagneticFluxMeasureExt;	/* eml2_2ForGsoap.h:1727 */
class eml22__MagneticPermeabilityMeasure;	/* eml2_2ForGsoap.h:1730 */
class eml22__MagneticPermeabilityMeasureExt;	/* eml2_2ForGsoap.h:1733 */
class eml22__MagneticVectorPotentialMeasure;	/* eml2_2ForGsoap.h:1736 */
class eml22__MagneticVectorPotentialMeasureExt;	/* eml2_2ForGsoap.h:1739 */
class eml22__MassLengthMeasure;	/* eml2_2ForGsoap.h:1742 */
class eml22__MassLengthMeasureExt;	/* eml2_2ForGsoap.h:1745 */
class eml22__MassMeasure;	/* eml2_2ForGsoap.h:1748 */
class eml22__MassMeasureExt;	/* eml2_2ForGsoap.h:1751 */
class eml22__MassPerAreaMeasure;	/* eml2_2ForGsoap.h:1754 */
class eml22__MassPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1757 */
class eml22__MassPerEnergyMeasure;	/* eml2_2ForGsoap.h:1760 */
class eml22__MassPerEnergyMeasureExt;	/* eml2_2ForGsoap.h:1763 */
class eml22__MassPerLengthMeasure;	/* eml2_2ForGsoap.h:1766 */
class eml22__MassPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1769 */
class eml22__MassPerMassMeasure;	/* eml2_2ForGsoap.h:1772 */
class eml22__MassPerMassMeasureExt;	/* eml2_2ForGsoap.h:1775 */
class eml22__MassPerTimeMeasure;	/* eml2_2ForGsoap.h:1778 */
class eml22__MassPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1781 */
class eml22__MassPerTimePerAreaMeasure;	/* eml2_2ForGsoap.h:1784 */
class eml22__MassPerTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1787 */
class eml22__MassPerTimePerLengthMeasure;	/* eml2_2ForGsoap.h:1790 */
class eml22__MassPerTimePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1793 */
class eml22__MassPerVolumeMeasure;	/* eml2_2ForGsoap.h:1796 */
class eml22__MassPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1799 */
class eml22__MassPerVolumePerLengthMeasure;	/* eml2_2ForGsoap.h:1802 */
class eml22__MassPerVolumePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1805 */
class eml22__MassPerVolumePerPressureMeasure;	/* eml2_2ForGsoap.h:1808 */
class eml22__MassPerVolumePerPressureMeasureExt;	/* eml2_2ForGsoap.h:1811 */
class eml22__MassPerVolumePerTemperatureMeasure;	/* eml2_2ForGsoap.h:1814 */
class eml22__MassPerVolumePerTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1817 */
class eml22__MobilityMeasure;	/* eml2_2ForGsoap.h:1820 */
class eml22__MobilityMeasureExt;	/* eml2_2ForGsoap.h:1823 */
class eml22__MolarEnergyMeasure;	/* eml2_2ForGsoap.h:1826 */
class eml22__MolarEnergyMeasureExt;	/* eml2_2ForGsoap.h:1829 */
class eml22__MolarHeatCapacityMeasure;	/* eml2_2ForGsoap.h:1832 */
class eml22__MolarHeatCapacityMeasureExt;	/* eml2_2ForGsoap.h:1835 */
class eml22__MolarVolumeMeasure;	/* eml2_2ForGsoap.h:1838 */
class eml22__MolarVolumeMeasureExt;	/* eml2_2ForGsoap.h:1841 */
class eml22__MolecularWeightMeasure;	/* eml2_2ForGsoap.h:1844 */
class eml22__MolecularWeightMeasureExt;	/* eml2_2ForGsoap.h:1847 */
class eml22__MomentOfForceMeasure;	/* eml2_2ForGsoap.h:1850 */
class eml22__MomentOfForceMeasureExt;	/* eml2_2ForGsoap.h:1853 */
class eml22__MomentOfInertiaMeasure;	/* eml2_2ForGsoap.h:1856 */
class eml22__MomentOfInertiaMeasureExt;	/* eml2_2ForGsoap.h:1859 */
class eml22__MomentumMeasure;	/* eml2_2ForGsoap.h:1862 */
class eml22__MomentumMeasureExt;	/* eml2_2ForGsoap.h:1865 */
class eml22__NormalizedPowerMeasure;	/* eml2_2ForGsoap.h:1868 */
class eml22__NormalizedPowerMeasureExt;	/* eml2_2ForGsoap.h:1871 */
class eml22__PermeabilityLengthMeasure;	/* eml2_2ForGsoap.h:1874 */
class eml22__PermeabilityLengthMeasureExt;	/* eml2_2ForGsoap.h:1877 */
class eml22__PermeabilityRockMeasure;	/* eml2_2ForGsoap.h:1880 */
class eml22__PermeabilityRockMeasureExt;	/* eml2_2ForGsoap.h:1883 */
class eml22__PermittivityMeasure;	/* eml2_2ForGsoap.h:1886 */
class eml22__PermittivityMeasureExt;	/* eml2_2ForGsoap.h:1889 */
class eml22__PlaneAngleMeasure;	/* eml2_2ForGsoap.h:1892 */
class eml22__PlaneAngleMeasureExt;	/* eml2_2ForGsoap.h:1895 */
class eml22__PotentialDifferencePerPowerDropMeasure;	/* eml2_2ForGsoap.h:1898 */
class eml22__PotentialDifferencePerPowerDropMeasureExt;	/* eml2_2ForGsoap.h:1901 */
class eml22__PowerMeasure;	/* eml2_2ForGsoap.h:1904 */
class eml22__PowerMeasureExt;	/* eml2_2ForGsoap.h:1907 */
class eml22__PowerPerAreaMeasure;	/* eml2_2ForGsoap.h:1910 */
class eml22__PowerPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1913 */
class eml22__PowerPerPowerMeasure;	/* eml2_2ForGsoap.h:1916 */
class eml22__PowerPerPowerMeasureExt;	/* eml2_2ForGsoap.h:1919 */
class eml22__PowerPerVolumeMeasure;	/* eml2_2ForGsoap.h:1922 */
class eml22__PowerPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1925 */
class eml22__PressureMeasure;	/* eml2_2ForGsoap.h:1928 */
class eml22__PressureMeasureExt;	/* eml2_2ForGsoap.h:1931 */
class eml22__PressurePerPressureMeasure;	/* eml2_2ForGsoap.h:1934 */
class eml22__PressurePerPressureMeasureExt;	/* eml2_2ForGsoap.h:1937 */
class eml22__PressurePerTimeMeasure;	/* eml2_2ForGsoap.h:1940 */
class eml22__PressurePerTimeMeasureExt;	/* eml2_2ForGsoap.h:1943 */
class eml22__PressurePerVolumeMeasure;	/* eml2_2ForGsoap.h:1946 */
class eml22__PressurePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1949 */
class eml22__PressureSquaredMeasure;	/* eml2_2ForGsoap.h:1952 */
class eml22__PressureSquaredMeasureExt;	/* eml2_2ForGsoap.h:1955 */
class eml22__PressureSquaredPerForceTimePerAreaMeasure;	/* eml2_2ForGsoap.h:1958 */
class eml22__PressureSquaredPerForceTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1961 */
class eml22__PressureTimePerVolumeMeasure;	/* eml2_2ForGsoap.h:1964 */
class eml22__PressureTimePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1967 */
class eml22__QuantityOfLightMeasure;	/* eml2_2ForGsoap.h:1970 */
class eml22__QuantityOfLightMeasureExt;	/* eml2_2ForGsoap.h:1973 */
class eml22__RadianceMeasure;	/* eml2_2ForGsoap.h:1976 */
class eml22__RadianceMeasureExt;	/* eml2_2ForGsoap.h:1979 */
class eml22__RadiantIntensityMeasure;	/* eml2_2ForGsoap.h:1982 */
class eml22__RadiantIntensityMeasureExt;	/* eml2_2ForGsoap.h:1985 */
class eml22__ReciprocalAreaMeasure;	/* eml2_2ForGsoap.h:1988 */
class eml22__ReciprocalAreaMeasureExt;	/* eml2_2ForGsoap.h:1991 */
class eml22__ReciprocalElectricPotentialDifferenceMeasure;	/* eml2_2ForGsoap.h:1994 */
class eml22__ReciprocalElectricPotentialDifferenceMeasureExt;	/* eml2_2ForGsoap.h:1997 */
class eml22__ReciprocalForceMeasure;	/* eml2_2ForGsoap.h:2000 */
class eml22__ReciprocalForceMeasureExt;	/* eml2_2ForGsoap.h:2003 */
class eml22__ReciprocalLengthMeasure;	/* eml2_2ForGsoap.h:2006 */
class eml22__ReciprocalLengthMeasureExt;	/* eml2_2ForGsoap.h:2009 */
class eml22__ReciprocalMassMeasure;	/* eml2_2ForGsoap.h:2012 */
class eml22__ReciprocalMassMeasureExt;	/* eml2_2ForGsoap.h:2015 */
class eml22__ReciprocalMassTimeMeasure;	/* eml2_2ForGsoap.h:2018 */
class eml22__ReciprocalMassTimeMeasureExt;	/* eml2_2ForGsoap.h:2021 */
class eml22__ReciprocalPressureMeasure;	/* eml2_2ForGsoap.h:2024 */
class eml22__ReciprocalPressureMeasureExt;	/* eml2_2ForGsoap.h:2027 */
class eml22__ReciprocalTimeMeasure;	/* eml2_2ForGsoap.h:2030 */
class eml22__ReciprocalTimeMeasureExt;	/* eml2_2ForGsoap.h:2033 */
class eml22__ReciprocalVolumeMeasure;	/* eml2_2ForGsoap.h:2036 */
class eml22__ReciprocalVolumeMeasureExt;	/* eml2_2ForGsoap.h:2039 */
class eml22__ReluctanceMeasure;	/* eml2_2ForGsoap.h:2042 */
class eml22__ReluctanceMeasureExt;	/* eml2_2ForGsoap.h:2045 */
class eml22__SecondMomentOfAreaMeasure;	/* eml2_2ForGsoap.h:2048 */
class eml22__SecondMomentOfAreaMeasureExt;	/* eml2_2ForGsoap.h:2051 */
class eml22__SignalingEventPerTimeMeasure;	/* eml2_2ForGsoap.h:2054 */
class eml22__SignalingEventPerTimeMeasureExt;	/* eml2_2ForGsoap.h:2057 */
class eml22__SolidAngleMeasure;	/* eml2_2ForGsoap.h:2060 */
class eml22__SolidAngleMeasureExt;	/* eml2_2ForGsoap.h:2063 */
class eml22__SpecificHeatCapacityMeasure;	/* eml2_2ForGsoap.h:2066 */
class eml22__SpecificHeatCapacityMeasureExt;	/* eml2_2ForGsoap.h:2069 */
class eml22__TemperatureIntervalMeasure;	/* eml2_2ForGsoap.h:2072 */
class eml22__TemperatureIntervalMeasureExt;	/* eml2_2ForGsoap.h:2075 */
class eml22__TemperatureIntervalPerLengthMeasure;	/* eml2_2ForGsoap.h:2078 */
class eml22__TemperatureIntervalPerLengthMeasureExt;	/* eml2_2ForGsoap.h:2081 */
class eml22__TemperatureIntervalPerPressureMeasure;	/* eml2_2ForGsoap.h:2084 */
class eml22__TemperatureIntervalPerPressureMeasureExt;	/* eml2_2ForGsoap.h:2087 */
class eml22__TemperatureIntervalPerTimeMeasure;	/* eml2_2ForGsoap.h:2090 */
class eml22__TemperatureIntervalPerTimeMeasureExt;	/* eml2_2ForGsoap.h:2093 */
class eml22__ThermalConductanceMeasure;	/* eml2_2ForGsoap.h:2096 */
class eml22__ThermalConductanceMeasureExt;	/* eml2_2ForGsoap.h:2099 */
class eml22__ThermalConductivityMeasure;	/* eml2_2ForGsoap.h:2102 */
class eml22__ThermalConductivityMeasureExt;	/* eml2_2ForGsoap.h:2105 */
class eml22__ThermalDiffusivityMeasure;	/* eml2_2ForGsoap.h:2108 */
class eml22__ThermalDiffusivityMeasureExt;	/* eml2_2ForGsoap.h:2111 */
class eml22__ThermalInsulanceMeasure;	/* eml2_2ForGsoap.h:2114 */
class eml22__ThermalInsulanceMeasureExt;	/* eml2_2ForGsoap.h:2117 */
class eml22__ThermalResistanceMeasure;	/* eml2_2ForGsoap.h:2120 */
class eml22__ThermalResistanceMeasureExt;	/* eml2_2ForGsoap.h:2123 */
class eml22__ThermodynamicTemperatureMeasure;	/* eml2_2ForGsoap.h:2126 */
class eml22__ThermodynamicTemperatureMeasureExt;	/* eml2_2ForGsoap.h:2129 */
class eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure;	/* eml2_2ForGsoap.h:2132 */
class eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt;	/* eml2_2ForGsoap.h:2135 */
class eml22__TimeMeasure;	/* eml2_2ForGsoap.h:2138 */
class eml22__TimeMeasureExt;	/* eml2_2ForGsoap.h:2141 */
class eml22__TimePerLengthMeasure;	/* eml2_2ForGsoap.h:2144 */
class eml22__TimePerLengthMeasureExt;	/* eml2_2ForGsoap.h:2147 */
class eml22__TimePerMassMeasure;	/* eml2_2ForGsoap.h:2150 */
class eml22__TimePerMassMeasureExt;	/* eml2_2ForGsoap.h:2153 */
class eml22__TimePerTimeMeasure;	/* eml2_2ForGsoap.h:2156 */
class eml22__TimePerTimeMeasureExt;	/* eml2_2ForGsoap.h:2159 */
class eml22__TimePerVolumeMeasure;	/* eml2_2ForGsoap.h:2162 */
class eml22__TimePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:2165 */
class eml22__UnitlessMeasure;	/* eml2_2ForGsoap.h:2168 */
class eml22__VerticalCoordinateMeasure;	/* eml2_2ForGsoap.h:2171 */
class eml22__VerticalCoordinateMeasureExt;	/* eml2_2ForGsoap.h:2174 */
class eml22__VolumeFlowRatePerVolumeFlowRateMeasure;	/* eml2_2ForGsoap.h:2177 */
class eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt;	/* eml2_2ForGsoap.h:2180 */
class eml22__VolumeMeasure;	/* eml2_2ForGsoap.h:2183 */
class eml22__VolumeMeasureExt;	/* eml2_2ForGsoap.h:2186 */
class eml22__VolumePerAreaMeasure;	/* eml2_2ForGsoap.h:2189 */
class eml22__VolumePerAreaMeasureExt;	/* eml2_2ForGsoap.h:2192 */
class eml22__VolumePerLengthMeasure;	/* eml2_2ForGsoap.h:2195 */
class eml22__VolumePerLengthMeasureExt;	/* eml2_2ForGsoap.h:2198 */
class eml22__VolumePerMassMeasure;	/* eml2_2ForGsoap.h:2201 */
class eml22__VolumePerMassMeasureExt;	/* eml2_2ForGsoap.h:2204 */
class eml22__VolumePerPressureMeasure;	/* eml2_2ForGsoap.h:2207 */
class eml22__VolumePerPressureMeasureExt;	/* eml2_2ForGsoap.h:2210 */
class eml22__VolumePerRotationMeasure;	/* eml2_2ForGsoap.h:2213 */
class eml22__VolumePerRotationMeasureExt;	/* eml2_2ForGsoap.h:2216 */
class eml22__VolumePerTimeLengthMeasure;	/* eml2_2ForGsoap.h:2219 */
class eml22__VolumePerTimeLengthMeasureExt;	/* eml2_2ForGsoap.h:2222 */
class eml22__VolumePerTimeMeasure;	/* eml2_2ForGsoap.h:2225 */
class eml22__VolumePerTimeMeasureExt;	/* eml2_2ForGsoap.h:2228 */
class eml22__VolumePerTimePerAreaMeasure;	/* eml2_2ForGsoap.h:2231 */
class eml22__VolumePerTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:2234 */
class eml22__VolumePerTimePerLengthMeasure;	/* eml2_2ForGsoap.h:2237 */
class eml22__VolumePerTimePerLengthMeasureExt;	/* eml2_2ForGsoap.h:2240 */
class eml22__VolumePerTimePerPressureLengthMeasure;	/* eml2_2ForGsoap.h:2243 */
class eml22__VolumePerTimePerPressureLengthMeasureExt;	/* eml2_2ForGsoap.h:2246 */
class eml22__VolumePerTimePerPressureMeasure;	/* eml2_2ForGsoap.h:2249 */
class eml22__VolumePerTimePerPressureMeasureExt;	/* eml2_2ForGsoap.h:2252 */
class eml22__VolumePerTimePerTimeMeasure;	/* eml2_2ForGsoap.h:2255 */
class eml22__VolumePerTimePerTimeMeasureExt;	/* eml2_2ForGsoap.h:2258 */
class eml22__VolumePerTimePerVolumeMeasure;	/* eml2_2ForGsoap.h:2261 */
class eml22__VolumePerTimePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:2264 */
class eml22__VolumePerVolumeMeasure;	/* eml2_2ForGsoap.h:2267 */
class eml22__VolumePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:2270 */
class eml22__VolumetricHeatTransferCoefficientMeasure;	/* eml2_2ForGsoap.h:2273 */
class eml22__VolumetricHeatTransferCoefficientMeasureExt;	/* eml2_2ForGsoap.h:2276 */
class eml22__VolumetricThermalExpansionMeasure;	/* eml2_2ForGsoap.h:2279 */
class eml22__VolumetricThermalExpansionMeasureExt;	/* eml2_2ForGsoap.h:2282 */
class eml22__ReferencePressure;	/* eml2_2ForGsoap.h:2375 */
class eml22__DistanceEastWest;	/* eml2_2ForGsoap.h:2399 */
class eml22__DistanceNorthSouth;	/* eml2_2ForGsoap.h:2402 */
class gml__DefinitionType;	/* eml2_2ForGsoap.h:2486 */
class gml__CodeWithAuthorityType;	/* eml2_2ForGsoap.h:2501 */
class gml__AbstractTimePrimitiveType;	/* eml2_2ForGsoap.h:2507 */
class gml__AngleType;	/* eml2_2ForGsoap.h:2561 */
class gml__LengthType;	/* eml2_2ForGsoap.h:2573 */
class gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType;	/* eml2_2ForGsoap.h:2645 */
class witsml2__TimestampedCommentString;	/* eml2_2ForGsoap.h:353 */
class witsml2__EventType;	/* eml2_2ForGsoap.h:554 */
class witsml2__GeochronologicalUnit;	/* eml2_2ForGsoap.h:950 */
class witsml2__LithostratigraphicUnit;	/* eml2_2ForGsoap.h:965 */
class eml22__AuthorityQualifiedName;	/* eml2_2ForGsoap.h:1109 */
class eml22__FloatingPointConstantArray;	/* eml2_2ForGsoap.h:1133 */
class eml22__FloatingPointExternalArray;	/* eml2_2ForGsoap.h:1136 */
class eml22__FloatingPointLatticeArray;	/* eml2_2ForGsoap.h:1139 */
class eml22__IntegerArrayFromBooleanMaskArray;	/* eml2_2ForGsoap.h:1145 */
class eml22__IntegerConstantArray;	/* eml2_2ForGsoap.h:1148 */
class eml22__IntegerExternalArray;	/* eml2_2ForGsoap.h:1151 */
class eml22__IntegerLatticeArray;	/* eml2_2ForGsoap.h:1154 */
class eml22__IntegerRangeArray;	/* eml2_2ForGsoap.h:1157 */
class eml22__StringMeasure;	/* eml2_2ForGsoap.h:1175 */
class gml__IdentifiedObjectType;	/* eml2_2ForGsoap.h:2483 */
class eml22__DoubleExternalArray;	/* eml2_2ForGsoap.h:1124 */
class eml22__FloatExternalArray;	/* eml2_2ForGsoap.h:1130 */
class gml__AbstractCRSType;	/* eml2_2ForGsoap.h:2480 */
class gml__AbstractCoordinateSystemType;	/* eml2_2ForGsoap.h:2525 */
class gml__CoordinateSystemAxisType;	/* eml2_2ForGsoap.h:2531 */
class gml__AbstractDatumType;	/* eml2_2ForGsoap.h:2552 */
class gml__PrimeMeridianType;	/* eml2_2ForGsoap.h:2558 */
class gml__EllipsoidType;	/* eml2_2ForGsoap.h:2570 */
class gml__AbstractCoordinateOperationType;	/* eml2_2ForGsoap.h:2588 */
union _gml__union_GeodeticCRSType;	/* eml2_2ForGsoap.h:55930 */
class gml__GeodeticCRSType;	/* eml2_2ForGsoap.h:2477 */
class gml__EllipsoidalCSType;	/* eml2_2ForGsoap.h:2522 */
class gml__CartesianCSType;	/* eml2_2ForGsoap.h:2537 */
class gml__SphericalCSType;	/* eml2_2ForGsoap.h:2543 */
class gml__GeodeticDatumType;	/* eml2_2ForGsoap.h:2549 */
class gml__AbstractGeneralDerivedCRSType;	/* eml2_2ForGsoap.h:2579 */
class gml__AbstractGeneralConversionType;	/* eml2_2ForGsoap.h:2585 */
class gml__VerticalCRSType;	/* eml2_2ForGsoap.h:2597 */
class gml__VerticalCSType;	/* eml2_2ForGsoap.h:2603 */
class gml__VerticalDatumType;	/* eml2_2ForGsoap.h:2609 */
union _gml__union_ProjectedCRSType;	/* eml2_2ForGsoap.h:56405 */
class gml__ProjectedCRSType;	/* eml2_2ForGsoap.h:2576 */

/* eml2_2ForGsoap.h:215 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__base64Binary
#define SOAP_TYPE_gsoap_eml2_2_xsd__base64Binary (-8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XSD type 'xsd:string'
        char *id;
        /// Optional element 'type' of XSD type 'xsd:string'
        char *type;
        /// Optional element 'options' of XSD type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* custom/struct_tm.h:70 */
#ifndef SOAP_TYPE_gsoap_eml2_2_tm
#define SOAP_TYPE_gsoap_eml2_2_tm (-12)
#if 0 /* Volatile: declared external of the data binding interface and not redeclared here */
struct SOAP_CMAC tm {
      public:
        /** Required element 'tm-sec' of XSD type 'xsd:int' */
        int tm_sec;
        /** Required element 'tm-min' of XSD type 'xsd:int' */
        int tm_min;
        /** Required element 'tm-hour' of XSD type 'xsd:int' */
        int tm_hour;
        /** Required element 'tm-mday' of XSD type 'xsd:int' */
        int tm_mday;
        /** Required element 'tm-mon' of XSD type 'xsd:int' */
        int tm_mon;
        /** Required element 'tm-year' of XSD type 'xsd:int' */
        int tm_year;
        /** Required element 'tm-isdst' of XSD type 'xsd:int' */
        int tm_isdst;
};
#endif
#endif

/* eml2_2ForGsoap.h:251 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractWellLocation (-21)
/* Type witsml2__AbstractWellLocation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractWellLocation': */
class SOAP_CMAC witsml2__AbstractWellLocation {
      public:
        /// Optional element 'witsml2:Original' of XSD type 'xsd:boolean'
        bool *Original;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractWellLocation, default initialized and not managed by a soap context
        virtual witsml2__AbstractWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractWellLocation); }
      public:
        /// Constructor with initializations
        witsml2__AbstractWellLocation() : Original(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__AbstractWellLocation() { }
        /// Friend allocator used by soap_new_witsml2__AbstractWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractWellLocation * SOAP_FMAC2 soap_instantiate_witsml2__AbstractWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:260 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ReferencePoint (-24)
/* complex XSD type 'witsml2:ReferencePoint': */
class SOAP_CMAC witsml2__ReferencePoint {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:MeasuredDepth' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MeasuredDepth;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Elevation' of XSD type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *Elevation;
        /// Required element 'witsml2:Location' of XSD type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> Location;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ReferencePoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ReferencePoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ReferencePoint, default initialized and not managed by a soap context
        virtual witsml2__ReferencePoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ReferencePoint); }
      public:
        /// Constructor with initializations
        witsml2__ReferencePoint() : Name(), Type(), MeasuredDepth(), Description(), ExtensionNameValue(), Elevation(), Location(), uid(), soap() { }
        virtual ~witsml2__ReferencePoint() { }
        /// Friend allocator used by soap_new_witsml2__ReferencePoint(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ReferencePoint * SOAP_FMAC2 soap_instantiate_witsml2__ReferencePoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:263 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellbore
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellbore (-25)
/* complex XSD type 'witsml2:RefWellbore': */
class SOAP_CMAC witsml2__RefWellbore {
      public:
        /// Required element 'witsml2:WellboreReference' of XSD type 'eml22:String64'
        std::string WellboreReference;
        /// Optional element 'witsml2:WellParent' of XSD type 'eml22:String64'
        std::string *WellParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellbore
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellbore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RefWellbore, default initialized and not managed by a soap context
        virtual witsml2__RefWellbore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RefWellbore); }
      public:
        /// Constructor with initializations
        witsml2__RefWellbore() : WellboreReference(), WellParent(), soap() { }
        virtual ~witsml2__RefWellbore() { }
        /// Friend allocator used by soap_new_witsml2__RefWellbore(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RefWellbore * SOAP_FMAC2 soap_instantiate_witsml2__RefWellbore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:266 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreRig (-26)
/* complex XSD type 'witsml2:RefWellboreRig': */
class SOAP_CMAC witsml2__RefWellboreRig {
      public:
        /// Required element 'witsml2:RigReference' of XSD type 'eml22:String64'
        std::string RigReference;
        /// Optional element 'witsml2:WellboreParent' of XSD type 'eml22:String64'
        std::string *WellboreParent;
        /// Optional element 'witsml2:WellParent' of XSD type 'eml22:String64'
        std::string *WellParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreRig
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreRig; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RefWellboreRig, default initialized and not managed by a soap context
        virtual witsml2__RefWellboreRig *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RefWellboreRig); }
      public:
        /// Constructor with initializations
        witsml2__RefWellboreRig() : RigReference(), WellboreParent(), WellParent(), soap() { }
        virtual ~witsml2__RefWellboreRig() { }
        /// Friend allocator used by soap_new_witsml2__RefWellboreRig(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RefWellboreRig * SOAP_FMAC2 soap_instantiate_witsml2__RefWellboreRig(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:272 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellDatum (-28)
/* complex XSD type 'witsml2:WellDatum': */
class SOAP_CMAC witsml2__WellDatum {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Optional element 'witsml2:Code' of XSD type 'eml22:WellboreDatumReference'
        enum eml22__WellboreDatumReference *Code;
        /// Optional element 'witsml2:Kind' of XSD type 'eml22:String64'
        std::vector<std::string> Kind;
        /// Optional element 'witsml2:MeasuredDepth' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MeasuredDepth;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Wellbore' of XSD type 'witsml2:RefWellbore'
        witsml2__RefWellbore *Wellbore;
        /// Optional element 'witsml2:Rig' of XSD type 'witsml2:RefWellboreRig'
        witsml2__RefWellboreRig *Rig;
        /// Optional element 'witsml2:Elevation' of XSD type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *Elevation;
        /// Optional element 'witsml2:HorizontalLocation' of XSD type 'witsml2:AbstractWellLocation'
        witsml2__AbstractWellLocation *HorizontalLocation;
        /// Required element 'witsml2:Crs' of XSD type 'eml22:AbstractVerticalCrs'
        eml22__AbstractVerticalCrs *Crs;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellDatum
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellDatum; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellDatum, default initialized and not managed by a soap context
        virtual witsml2__WellDatum *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellDatum); }
      public:
        /// Constructor with initializations
        witsml2__WellDatum() : Name(), Code(), Kind(), MeasuredDepth(), Comment(), ExtensionNameValue(), Wellbore(), Rig(), Elevation(), HorizontalLocation(), Crs(), uid(), soap() { }
        virtual ~witsml2__WellDatum() { }
        /// Friend allocator used by soap_new_witsml2__WellDatum(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellDatum * SOAP_FMAC2 soap_instantiate_witsml2__WellDatum(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:281 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParams (-31)
/* complex XSD type 'witsml2:DrillingParams': */
class SOAP_CMAC witsml2__DrillingParams {
      public:
        /// Optional element 'witsml2:ETimOpBit' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimOpBit;
        /// Optional element 'witsml2:MdHoleStart' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHoleStart;
        /// Required element 'witsml2:MdHoleStop' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHoleStop;
        /// Optional element 'witsml2:Tubular' of XSD type 'eml22:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:HkldRot' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *HkldRot;
        /// Optional element 'witsml2:OverPull' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *OverPull;
        /// Optional element 'witsml2:SlackOff' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *SlackOff;
        /// Optional element 'witsml2:HkldUp' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *HkldUp;
        /// Optional element 'witsml2:HkldDn' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *HkldDn;
        /// Optional element 'witsml2:TqOnBotAv' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqOnBotAv;
        /// Optional element 'witsml2:TqOnBotMx' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqOnBotMx;
        /// Optional element 'witsml2:TqOnBotMn' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqOnBotMn;
        /// Optional element 'witsml2:TqOffBotAv' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqOffBotAv;
        /// Optional element 'witsml2:TqDhAv' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqDhAv;
        /// Optional element 'witsml2:WtAboveJar' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WtAboveJar;
        /// Optional element 'witsml2:WtBelowJar' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WtBelowJar;
        /// Optional element 'witsml2:WtMud' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *WtMud;
        /// Optional element 'witsml2:FlowratePumpAv' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowratePumpAv;
        /// Optional element 'witsml2:FlowratePumpMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowratePumpMx;
        /// Optional element 'witsml2:FlowratePumpMn' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowratePumpMn;
        /// Optional element 'witsml2:VelNozzleAv' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *VelNozzleAv;
        /// Optional element 'witsml2:PowBit' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *PowBit;
        /// Optional element 'witsml2:PresDropBit' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresDropBit;
        /// Optional element 'witsml2:CTimHold' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *CTimHold;
        /// Optional element 'witsml2:CTimSteering' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *CTimSteering;
        /// Optional element 'witsml2:CTimDrillRot' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *CTimDrillRot;
        /// Optional element 'witsml2:CTimDrillSlid' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *CTimDrillSlid;
        /// Optional element 'witsml2:CTimCirc' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *CTimCirc;
        /// Optional element 'witsml2:CTimReam' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *CTimReam;
        /// Optional element 'witsml2:DistDrillRot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml2:DistDrillSlid' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml2:DistReam' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistReam;
        /// Optional element 'witsml2:DistHold' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistHold;
        /// Optional element 'witsml2:DistSteering' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistSteering;
        /// Optional element 'witsml2:RpmAv' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RpmAv;
        /// Optional element 'witsml2:RpmMx' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RpmMx;
        /// Optional element 'witsml2:RpmMn' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RpmMn;
        /// Optional element 'witsml2:RpmAvDh' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RpmAvDh;
        /// Optional element 'witsml2:RopAv' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml2:RopMx' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopMx;
        /// Optional element 'witsml2:RopMn' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopMn;
        /// Optional element 'witsml2:WobAv' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WobAv;
        /// Optional element 'witsml2:WobMx' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WobMx;
        /// Optional element 'witsml2:WobMn' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WobMn;
        /// Optional element 'witsml2:WobAvDh' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WobAvDh;
        /// Optional element 'witsml2:ReasonTrip' of XSD type 'eml22:String2000'
        std::string *ReasonTrip;
        /// Optional element 'witsml2:ObjectiveBha' of XSD type 'eml22:String2000'
        std::string *ObjectiveBha;
        /// Optional element 'witsml2:AziTop' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AziTop;
        /// Optional element 'witsml2:AziBottom' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AziBottom;
        /// Optional element 'witsml2:InclStart' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *InclStart;
        /// Optional element 'witsml2:InclMx' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *InclMx;
        /// Optional element 'witsml2:InclMn' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *InclMn;
        /// Optional element 'witsml2:InclStop' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *InclStop;
        /// Optional element 'witsml2:TempMudDhMx' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempMudDhMx;
        /// Optional element 'witsml2:PresPumpAv' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresPumpAv;
        /// Optional element 'witsml2:FlowrateBit' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateBit;
        /// Optional element 'witsml2:MudClass' of XSD type 'witsml2:MudClass'
        enum witsml2__MudClass *MudClass;
        /// Optional element 'witsml2:MudSubClass' of XSD type 'witsml2:MudSubClass'
        enum witsml2__MudSubClass *MudSubClass;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParams
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParams; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillingParams, default initialized and not managed by a soap context
        virtual witsml2__DrillingParams *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillingParams); }
      public:
        /// Constructor with initializations
        witsml2__DrillingParams() : ETimOpBit(), MdHoleStart(), MdHoleStop(), Tubular(), HkldRot(), OverPull(), SlackOff(), HkldUp(), HkldDn(), TqOnBotAv(), TqOnBotMx(), TqOnBotMn(), TqOffBotAv(), TqDhAv(), WtAboveJar(), WtBelowJar(), WtMud(), FlowratePumpAv(), FlowratePumpMx(), FlowratePumpMn(), VelNozzleAv(), PowBit(), PresDropBit(), CTimHold(), CTimSteering(), CTimDrillRot(), CTimDrillSlid(), CTimCirc(), CTimReam(), DistDrillRot(), DistDrillSlid(), DistReam(), DistHold(), DistSteering(), RpmAv(), RpmMx(), RpmMn(), RpmAvDh(), RopAv(), RopMx(), RopMn(), WobAv(), WobMx(), WobMn(), WobAvDh(), ReasonTrip(), ObjectiveBha(), AziTop(), AziBottom(), InclStart(), InclMx(), InclMn(), InclStop(), TempMudDhMx(), PresPumpAv(), FlowrateBit(), MudClass(), MudSubClass(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillingParams() { }
        /// Friend allocator used by soap_new_witsml2__DrillingParams(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillingParams * SOAP_FMAC2 soap_instantiate_witsml2__DrillingParams(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:284 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Fluid (-32)
/* complex XSD type 'witsml2:Fluid': */
class SOAP_CMAC witsml2__Fluid {
      public:
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:LocationSample' of XSD type 'eml22:String64'
        std::string *LocationSample;
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Ecd' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Ecd;
        /// Optional element 'witsml2:KickToleranceVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *KickToleranceVolume;
        /// Optional element 'witsml2:KickToleranceIntensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *KickToleranceIntensity;
        /// Optional element 'witsml2:TempFlowLine' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempFlowLine;
        /// Optional element 'witsml2:PresBopRating' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBopRating;
        /// Optional element 'witsml2:MudClass' of XSD type 'witsml2:MudClass'
        enum witsml2__MudClass *MudClass;
        /// Optional element 'witsml2:Density' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:VisFunnel' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *VisFunnel;
        /// Optional element 'witsml2:TempVis' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempVis;
        /// Optional element 'witsml2:Pv' of XSD type 'eml22:DynamicViscosityMeasure'
        eml22__DynamicViscosityMeasure *Pv;
        /// Optional element 'witsml2:Yp' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Yp;
        /// Optional element 'witsml2:Gel10Sec' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel10Sec;
        /// Optional element 'witsml2:Gel10Min' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel10Min;
        /// Optional element 'witsml2:Gel30Min' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel30Min;
        /// Optional element 'witsml2:FilterCakeLtlp' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FilterCakeLtlp;
        /// Optional element 'witsml2:FiltrateLtlp' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FiltrateLtlp;
        /// Optional element 'witsml2:TempHthp' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempHthp;
        /// Optional element 'witsml2:PresHthp' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresHthp;
        /// Optional element 'witsml2:FiltrateHthp' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FiltrateHthp;
        /// Optional element 'witsml2:FilterCakeHthp' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FilterCakeHthp;
        /// Optional element 'witsml2:SolidsPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SolidsPc;
        /// Optional element 'witsml2:WaterPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *WaterPc;
        /// Optional element 'witsml2:OilPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *OilPc;
        /// Optional element 'witsml2:SandPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SandPc;
        /// Optional element 'witsml2:SolidsLowGravPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SolidsLowGravPc;
        /// Optional element 'witsml2:SolidsLowGrav' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *SolidsLowGrav;
        /// Optional element 'witsml2:SolidsCalcPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SolidsCalcPc;
        /// Optional element 'witsml2:BaritePc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *BaritePc;
        /// Optional element 'witsml2:Lcm' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Lcm;
        /// Optional element 'witsml2:Mbt' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *Mbt;
        /// Optional element 'witsml2:Ph' of XSD type 'xsd:double'
        double *Ph;
        /// Optional element 'witsml2:TempPh' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempPh;
        /// Optional element 'witsml2:Pm' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Pm;
        /// Optional element 'witsml2:PmFiltrate' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *PmFiltrate;
        /// Optional element 'witsml2:Mf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Mf;
        /// Optional element 'witsml2:AlkalinityP1' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *AlkalinityP1;
        /// Optional element 'witsml2:AlkalinityP2' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *AlkalinityP2;
        /// Optional element 'witsml2:Chloride' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Chloride;
        /// Optional element 'witsml2:Calcium' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Calcium;
        /// Optional element 'witsml2:Magnesium' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Magnesium;
        /// Optional element 'witsml2:Potassium' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Potassium;
        /// Optional element 'witsml2:BrinePc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *BrinePc;
        /// Optional element 'witsml2:BrineDensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *BrineDensity;
        /// Optional element 'witsml2:Lime' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Lime;
        /// Optional element 'witsml2:ElectStab' of XSD type 'eml22:ElectricPotentialDifferenceMeasure'
        eml22__ElectricPotentialDifferenceMeasure *ElectStab;
        /// Optional element 'witsml2:CalciumChloridePc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *CalciumChloridePc;
        /// Optional element 'witsml2:CalciumChloride' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *CalciumChloride;
        /// Optional element 'witsml2:Company' of XSD type 'eml22:String64'
        std::string *Company;
        /// Optional element 'witsml2:Engineer' of XSD type 'eml22:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:Asg' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *Asg;
        /// Optional element 'witsml2:SolidsHiGravPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SolidsHiGravPc;
        /// Optional element 'witsml2:SolidsHiGrav' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *SolidsHiGrav;
        /// Optional element 'witsml2:Polymer' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Polymer;
        /// Optional element 'witsml2:PolyType' of XSD type 'eml22:String64'
        std::string *PolyType;
        /// Optional element 'witsml2:SolCorPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SolCorPc;
        /// Optional element 'witsml2:OilCtg' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *OilCtg;
        /// Optional element 'witsml2:OilCtgDry' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *OilCtgDry;
        /// Optional element 'witsml2:HardnessCa' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *HardnessCa;
        /// Optional element 'witsml2:Sulfide' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Sulfide;
        /// Optional element 'witsml2:AverageCuttingSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *AverageCuttingSize;
        /// Optional element 'witsml2:Carbonate' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Carbonate;
        /// Optional element 'witsml2:Iron' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Iron;
        /// Optional element 'witsml2:MetalRecovered' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *MetalRecovered;
        /// Optional element 'witsml2:Turbidity' of XSD type 'xsd:double'
        double *Turbidity;
        /// Optional element 'witsml2:OilGrease' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *OilGrease;
        /// Optional element 'witsml2:Salt' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Salt;
        /// Optional element 'witsml2:SaltPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SaltPc;
        /// Optional element 'witsml2:Tct' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *Tct;
        /// Optional element 'witsml2:WaterPhaseSalinity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *WaterPhaseSalinity;
        /// Optional element 'witsml2:WholeMudCalcium' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *WholeMudCalcium;
        /// Optional element 'witsml2:WholeMudChloride' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *WholeMudChloride;
        /// Optional element 'witsml2:ZincOxide' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *ZincOxide;
        /// Optional element 'witsml2:SodiumChloride' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *SodiumChloride;
        /// Optional element 'witsml2:SodiumChloridePc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SodiumChloridePc;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Rheometer' of XSD type 'witsml2:Rheometer'
        std::vector<witsml2__Rheometer *> Rheometer;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Fluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Fluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Fluid, default initialized and not managed by a soap context
        virtual witsml2__Fluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Fluid); }
      public:
        /// Constructor with initializations
        witsml2__Fluid() : Type(), LocationSample(), DTim(), Md(), Tvd(), Ecd(), KickToleranceVolume(), KickToleranceIntensity(), TempFlowLine(), PresBopRating(), MudClass(), Density(), VisFunnel(), TempVis(), Pv(), Yp(), Gel10Sec(), Gel10Min(), Gel30Min(), FilterCakeLtlp(), FiltrateLtlp(), TempHthp(), PresHthp(), FiltrateHthp(), FilterCakeHthp(), SolidsPc(), WaterPc(), OilPc(), SandPc(), SolidsLowGravPc(), SolidsLowGrav(), SolidsCalcPc(), BaritePc(), Lcm(), Mbt(), Ph(), TempPh(), Pm(), PmFiltrate(), Mf(), AlkalinityP1(), AlkalinityP2(), Chloride(), Calcium(), Magnesium(), Potassium(), BrinePc(), BrineDensity(), Lime(), ElectStab(), CalciumChloridePc(), CalciumChloride(), Company(), Engineer(), Asg(), SolidsHiGravPc(), SolidsHiGrav(), Polymer(), PolyType(), SolCorPc(), OilCtg(), OilCtgDry(), HardnessCa(), Sulfide(), AverageCuttingSize(), Carbonate(), Iron(), MetalRecovered(), Turbidity(), OilGrease(), Salt(), SaltPc(), Tct(), WaterPhaseSalinity(), WholeMudCalcium(), WholeMudChloride(), ZincOxide(), SodiumChloride(), SodiumChloridePc(), Comments(), ExtensionNameValue(), Rheometer(), uid(), soap() { }
        virtual ~witsml2__Fluid() { }
        /// Friend allocator used by soap_new_witsml2__Fluid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Fluid * SOAP_FMAC2 soap_instantiate_witsml2__Fluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:290 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RheometerViscosity (-34)
/* complex XSD type 'witsml2:RheometerViscosity': */
class SOAP_CMAC witsml2__RheometerViscosity {
      public:
        /// Required element 'witsml2:Speed' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *Speed;
        /// Required element 'witsml2:Viscosity' of XSD type 'xsd:double'
        double Viscosity;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RheometerViscosity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RheometerViscosity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RheometerViscosity, default initialized and not managed by a soap context
        virtual witsml2__RheometerViscosity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RheometerViscosity); }
      public:
        /// Constructor with initializations
        witsml2__RheometerViscosity() : Speed(), Viscosity(), uid(), soap() { }
        virtual ~witsml2__RheometerViscosity() { }
        /// Friend allocator used by soap_new_witsml2__RheometerViscosity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RheometerViscosity * SOAP_FMAC2 soap_instantiate_witsml2__RheometerViscosity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20532 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractBottomHoleTemperature_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractBottomHoleTemperature_sequence (-1472)
/* Wrapper: */
class SOAP_CMAC __witsml2__AbstractBottomHoleTemperature_sequence {
      public:
        /// Required element 'witsml2:BottomHoleTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *BottomHoleTemperature;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractBottomHoleTemperature_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractBottomHoleTemperature_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__AbstractBottomHoleTemperature_sequence, default initialized and not managed by a soap context
        virtual __witsml2__AbstractBottomHoleTemperature_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__AbstractBottomHoleTemperature_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__AbstractBottomHoleTemperature_sequence() : BottomHoleTemperature() { }
        virtual ~__witsml2__AbstractBottomHoleTemperature_sequence() { }
        /// Friend allocator used by soap_new___witsml2__AbstractBottomHoleTemperature_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__AbstractBottomHoleTemperature_sequence * SOAP_FMAC2 soap_instantiate___witsml2__AbstractBottomHoleTemperature_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:293 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractBottomHoleTemperature (-35)
/* Type witsml2__AbstractBottomHoleTemperature is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractBottomHoleTemperature': */
class SOAP_CMAC witsml2__AbstractBottomHoleTemperature {
      public:
        __witsml2__AbstractBottomHoleTemperature_sequence *__AbstractBottomHoleTemperature_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractBottomHoleTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractBottomHoleTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractBottomHoleTemperature, default initialized and not managed by a soap context
        virtual witsml2__AbstractBottomHoleTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractBottomHoleTemperature); }
      public:
        /// Constructor with initializations
        witsml2__AbstractBottomHoleTemperature() : __AbstractBottomHoleTemperature_sequence(), soap() { }
        virtual ~witsml2__AbstractBottomHoleTemperature() { }
        /// Friend allocator used by soap_new_witsml2__AbstractBottomHoleTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractBottomHoleTemperature * SOAP_FMAC2 soap_instantiate_witsml2__AbstractBottomHoleTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:302 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivity (-38)
/* complex XSD type 'witsml2:DrillActivity': */
class SOAP_CMAC witsml2__DrillActivity {
      public:
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:Duration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *Duration;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Phase' of XSD type 'eml22:String64'
        std::string *Phase;
        /// Optional element 'witsml2:ActivityCode' of XSD type 'witsml2:DrillActivityCode'
        enum witsml2__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml2:DetailActivity' of XSD type 'eml22:String64'
        std::string *DetailActivity;
        /// Optional element 'witsml2:TypeActivityClass' of XSD type 'witsml2:DrillActivityClassType'
        enum witsml2__DrillActivityClassType *TypeActivityClass;
        /// Optional element 'witsml2:ActivityMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *ActivityMdInterval;
        /// Optional element 'witsml2:ActivityTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *ActivityTvdInterval;
        /// Optional element 'witsml2:BitMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *BitMdInterval;
        /// Optional element 'witsml2:State' of XSD type 'eml22:String64'
        std::string *State;
        /// Optional element 'witsml2:StateDetailActivity' of XSD type 'witsml2:StateDetailActivity'
        enum witsml2__StateDetailActivity *StateDetailActivity;
        /// Optional element 'witsml2:Operator' of XSD type 'eml22:String64'
        std::string *Operator;
        /// Optional element 'witsml2:Tubular' of XSD type 'eml22:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:Optimum' of XSD type 'xsd:boolean'
        bool *Optimum;
        /// Optional element 'witsml2:Productive' of XSD type 'xsd:boolean'
        bool *Productive;
        /// Optional element 'witsml2:ItemState' of XSD type 'witsml2:ItemState'
        enum witsml2__ItemState *ItemState;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ProprietaryCode' of XSD type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> ProprietaryCode;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillActivity, default initialized and not managed by a soap context
        virtual witsml2__DrillActivity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillActivity); }
      public:
        /// Constructor with initializations
        witsml2__DrillActivity() : DTimStart(), DTimEnd(), Duration(), Md(), Tvd(), Phase(), ActivityCode(), DetailActivity(), TypeActivityClass(), ActivityMdInterval(), ActivityTvdInterval(), BitMdInterval(), State(), StateDetailActivity(), Operator(), Tubular(), Optimum(), Productive(), ItemState(), Comments(), ExtensionNameValue(), ProprietaryCode(), uid(), soap() { }
        virtual ~witsml2__DrillActivity() { }
        /// Friend allocator used by soap_new_witsml2__DrillActivity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillActivity * SOAP_FMAC2 soap_instantiate_witsml2__DrillActivity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:308 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportControlIncidentInfo (-40)
/* complex XSD type 'witsml2:DrillReportControlIncidentInfo': */
class SOAP_CMAC witsml2__DrillReportControlIncidentInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:MdInflow' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdInflow;
        /// Optional element 'witsml2:TvdInflow' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdInflow;
        /// Optional element 'witsml2:Phase' of XSD type 'eml22:String64'
        std::string *Phase;
        /// Optional element 'witsml2:ActivityCode' of XSD type 'witsml2:DrillActivityCode'
        enum witsml2__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml2:DetailActivity' of XSD type 'eml22:String64'
        std::string *DetailActivity;
        /// Optional element 'witsml2:ETimLost' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimLost;
        /// Optional element 'witsml2:DTimRegained' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRegained;
        /// Optional element 'witsml2:DiaBit' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaBit;
        /// Optional element 'witsml2:MdBit' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:WtMud' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *WtMud;
        /// Required element 'witsml2:PorePressure' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *PorePressure;
        /// Optional element 'witsml2:DiaCsgLast' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml2:MdCsgLast' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml2:VolMudGained' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudGained;
        /// Optional element 'witsml2:PresShutInCasing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresShutInCasing;
        /// Optional element 'witsml2:PresShutInDrill' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresShutInDrill;
        /// Optional element 'witsml2:IncidentType' of XSD type 'witsml2:WellControlIncidentType'
        enum witsml2__WellControlIncidentType *IncidentType;
        /// Optional element 'witsml2:KillingType' of XSD type 'witsml2:WellKillingProcedureType'
        enum witsml2__WellKillingProcedureType *KillingType;
        /// Optional element 'witsml2:Formation' of XSD type 'eml22:String2000'
        std::string *Formation;
        /// Optional element 'witsml2:TempBottom' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempBottom;
        /// Optional element 'witsml2:PresMaxChoke' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresMaxChoke;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ProprietaryCode' of XSD type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> ProprietaryCode;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportControlIncidentInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportControlIncidentInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportControlIncidentInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportControlIncidentInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportControlIncidentInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportControlIncidentInfo() : DTim(), MdInflow(), TvdInflow(), Phase(), ActivityCode(), DetailActivity(), ETimLost(), DTimRegained(), DiaBit(), MdBit(), WtMud(), PorePressure(), DiaCsgLast(), MdCsgLast(), VolMudGained(), PresShutInCasing(), PresShutInDrill(), IncidentType(), KillingType(), Formation(), TempBottom(), PresMaxChoke(), Description(), ExtensionNameValue(), ProprietaryCode(), uid(), soap() { }
        virtual ~witsml2__DrillReportControlIncidentInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportControlIncidentInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportControlIncidentInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportControlIncidentInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:311 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportCoreInfo (-41)
/* complex XSD type 'witsml2:DrillReportCoreInfo': */
class SOAP_CMAC witsml2__DrillReportCoreInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:CoreNumber' of XSD type 'eml22:String64'
        std::string *CoreNumber;
        /// Optional element 'witsml2:CoredMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *CoredMdInterval;
        /// Optional element 'witsml2:CoredTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *CoredTvdInterval;
        /// Optional element 'witsml2:LenRecovered' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenRecovered;
        /// Optional element 'witsml2:RecoverPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *RecoverPc;
        /// Optional element 'witsml2:LenBarrel' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenBarrel;
        /// Optional element 'witsml2:InnerBarrelType' of XSD type 'witsml2:InnerBarrelType'
        enum witsml2__InnerBarrelType *InnerBarrelType;
        /// Optional element 'witsml2:CoreDescription' of XSD type 'eml22:String2000'
        std::string *CoreDescription;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportCoreInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportCoreInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportCoreInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportCoreInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportCoreInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportCoreInfo() : DTim(), CoreNumber(), CoredMdInterval(), CoredTvdInterval(), LenRecovered(), RecoverPc(), LenBarrel(), InnerBarrelType(), CoreDescription(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportCoreInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportCoreInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportCoreInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportCoreInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:314 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportEquipFailureInfo (-42)
/* complex XSD type 'witsml2:DrillReportEquipFailureInfo': */
class SOAP_CMAC witsml2__DrillReportEquipFailureInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:EquipClass' of XSD type 'eml22:String64'
        std::string *EquipClass;
        /// Optional element 'witsml2:ETimMissProduction' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimMissProduction;
        /// Optional element 'witsml2:DTimRepair' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRepair;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportEquipFailureInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportEquipFailureInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportEquipFailureInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportEquipFailureInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportEquipFailureInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportEquipFailureInfo() : DTim(), Md(), Tvd(), EquipClass(), ETimMissProduction(), DTimRepair(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportEquipFailureInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportEquipFailureInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportEquipFailureInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportEquipFailureInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:317 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportFormTestInfo (-43)
/* complex XSD type 'witsml2:DrillReportFormTestInfo': */
class SOAP_CMAC witsml2__DrillReportFormTestInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:PresPore' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresPore;
        /// Optional element 'witsml2:GoodSeal' of XSD type 'xsd:boolean'
        bool *GoodSeal;
        /// Optional element 'witsml2:MdSample' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdSample;
        /// Optional element 'witsml2:DominateComponent' of XSD type 'eml22:String64'
        std::string *DominateComponent;
        /// Optional element 'witsml2:DensityHC' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensityHC;
        /// Optional element 'witsml2:VolumeSample' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumeSample;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportFormTestInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportFormTestInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportFormTestInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportFormTestInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportFormTestInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportFormTestInfo() : DTim(), Md(), Tvd(), PresPore(), GoodSeal(), MdSample(), DominateComponent(), DensityHC(), VolumeSample(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportFormTestInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportFormTestInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportFormTestInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportFormTestInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:320 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportGasReadingInfo (-44)
/* complex XSD type 'witsml2:DrillReportGasReadingInfo': */
class SOAP_CMAC witsml2__DrillReportGasReadingInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:ReadingType' of XSD type 'witsml2:GasPeakType'
        enum witsml2__GasPeakType *ReadingType;
        /// Optional element 'witsml2:GasReadingMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *GasReadingMdInterval;
        /// Optional element 'witsml2:GasReadingTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *GasReadingTvdInterval;
        /// Optional element 'witsml2:GasHigh' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *GasHigh;
        /// Optional element 'witsml2:GasLow' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *GasLow;
        /// Optional element 'witsml2:Meth' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Meth;
        /// Optional element 'witsml2:Eth' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Eth;
        /// Optional element 'witsml2:Prop' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Prop;
        /// Optional element 'witsml2:Ibut' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Ibut;
        /// Optional element 'witsml2:Nbut' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Nbut;
        /// Optional element 'witsml2:Ipent' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Ipent;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportGasReadingInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportGasReadingInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportGasReadingInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportGasReadingInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportGasReadingInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportGasReadingInfo() : DTim(), ReadingType(), GasReadingMdInterval(), GasReadingTvdInterval(), GasHigh(), GasLow(), Meth(), Eth(), Prop(), Ibut(), Nbut(), Ipent(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportGasReadingInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportGasReadingInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportGasReadingInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportGasReadingInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:323 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLithShowInfo (-45)
/* complex XSD type 'witsml2:DrillReportLithShowInfo': */
class SOAP_CMAC witsml2__DrillReportLithShowInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:ShowMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *ShowMdInterval;
        /// Optional element 'witsml2:ShowTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *ShowTvdInterval;
        /// Optional element 'witsml2:Show' of XSD type 'eml22:String2000'
        std::string *Show;
        /// Optional element 'witsml2:Lithology' of XSD type 'eml22:String2000'
        std::string *Lithology;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLithShowInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLithShowInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportLithShowInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportLithShowInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportLithShowInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportLithShowInfo() : DTim(), ShowMdInterval(), ShowTvdInterval(), Show(), Lithology(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportLithShowInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportLithShowInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportLithShowInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportLithShowInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:326 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLogInfo (-46)
/* complex XSD type 'witsml2:DrillReportLogInfo': */
class SOAP_CMAC witsml2__DrillReportLogInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:RunNumber' of XSD type 'eml22:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:ServiceCompany' of XSD type 'eml22:String64'
        std::string *ServiceCompany;
        /// Optional element 'witsml2:LoggedMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *LoggedMdInterval;
        /// Optional element 'witsml2:LoggedTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *LoggedTvdInterval;
        /// Optional element 'witsml2:Tool' of XSD type 'eml22:String64'
        std::string *Tool;
        /// Optional element 'witsml2:MdTempTool' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdTempTool;
        /// Optional element 'witsml2:TvdTempTool' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdTempTool;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:BottomHoleTemperature' of XSD type 'witsml2:AbstractBottomHoleTemperature'
        witsml2__AbstractBottomHoleTemperature *BottomHoleTemperature;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLogInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLogInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportLogInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportLogInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportLogInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportLogInfo() : DTim(), RunNumber(), ServiceCompany(), LoggedMdInterval(), LoggedTvdInterval(), Tool(), MdTempTool(), TvdTempTool(), ExtensionNameValue(), BottomHoleTemperature(), uid(), soap() { }
        virtual ~witsml2__DrillReportLogInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportLogInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportLogInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportLogInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:329 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPerfInfo (-47)
/* complex XSD type 'witsml2:DrillReportPerfInfo': */
class SOAP_CMAC witsml2__DrillReportPerfInfo {
      public:
        /// Optional element 'witsml2:DTimOpen' of XSD type 'eml22:TimeStamp'
        struct tm *DTimOpen;
        /// Optional element 'witsml2:DTimClose' of XSD type 'eml22:TimeStamp'
        struct tm *DTimClose;
        /// Optional element 'witsml2:PerforationMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml2:PerforationTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *PerforationTvdInterval;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPerfInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPerfInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportPerfInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportPerfInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportPerfInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportPerfInfo() : DTimOpen(), DTimClose(), PerforationMdInterval(), PerforationTvdInterval(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportPerfInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportPerfInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportPerfInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportPerfInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:332 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPorePressure (-48)
/* complex XSD type 'witsml2:DrillReportPorePressure': */
class SOAP_CMAC witsml2__DrillReportPorePressure {
      public:
        /// Required element 'witsml2:ReadingKind' of XSD type 'witsml2:ReadingKind'
        enum witsml2__ReadingKind ReadingKind;
        /// Required element 'witsml2:EquivalentMudWeight' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *EquivalentMudWeight;
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPorePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPorePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportPorePressure, default initialized and not managed by a soap context
        virtual witsml2__DrillReportPorePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportPorePressure); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportPorePressure() : ReadingKind(), EquivalentMudWeight(), DTim(), Md(), Tvd(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportPorePressure() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportPorePressure(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportPorePressure * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportPorePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:335 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStatusInfo (-49)
/* complex XSD type 'witsml2:DrillReportStatusInfo': */
class SOAP_CMAC witsml2__DrillReportStatusInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:MdPlugTop' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdPlugTop;
        /// Optional element 'witsml2:DiaHole' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaHole;
        /// Optional element 'witsml2:MdDiaHoleStart' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdDiaHoleStart;
        /// Optional element 'witsml2:DiaPilot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaPilot;
        /// Optional element 'witsml2:MdDiaPilotPlan' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdDiaPilotPlan;
        /// Optional element 'witsml2:TvdDiaPilotPlan' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdDiaPilotPlan;
        /// Optional element 'witsml2:TypeWellbore' of XSD type 'witsml2:WellboreType'
        enum witsml2__WellboreType *TypeWellbore;
        /// Optional element 'witsml2:MdKickoff' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdKickoff;
        /// Optional element 'witsml2:TvdKickoff' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *TvdKickoff;
        /// Optional element 'witsml2:StrengthForm' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *StrengthForm;
        /// Optional element 'witsml2:MdStrengthForm' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdStrengthForm;
        /// Optional element 'witsml2:TvdStrengthForm' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdStrengthForm;
        /// Optional element 'witsml2:DiaCsgLast' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml2:MdCsgLast' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml2:TvdCsgLast' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdCsgLast;
        /// Optional element 'witsml2:PresTestType' of XSD type 'witsml2:PresTestType'
        enum witsml2__PresTestType *PresTestType;
        /// Optional element 'witsml2:MdPlanned' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml2:DistDrill' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrill;
        /// Optional element 'witsml2:Sum24Hr' of XSD type 'eml22:String2000'
        std::string *Sum24Hr;
        /// Optional element 'witsml2:Forecast24Hr' of XSD type 'eml22:String2000'
        std::string *Forecast24Hr;
        /// Optional element 'witsml2:RopCurrent' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopCurrent;
        /// Optional element 'witsml2:Rig' of XSD type 'eml22:String64'
        std::string *Rig;
        /// Optional element 'witsml2:ETimStart' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimStart;
        /// Optional element 'witsml2:ETimSpud' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimSpud;
        /// Optional element 'witsml2:ETimLoc' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimLoc;
        /// Optional element 'witsml2:ETimDrill' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimDrill;
        /// Optional element 'witsml2:RopAv' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml2:Supervisor' of XSD type 'eml22:String64'
        std::string *Supervisor;
        /// Optional element 'witsml2:Engineer' of XSD type 'eml22:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:Geologist' of XSD type 'eml22:String64'
        std::string *Geologist;
        /// Optional element 'witsml2:ETimDrillRot' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimDrillRot;
        /// Optional element 'witsml2:ETimDrillSlid' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimDrillSlid;
        /// Optional element 'witsml2:ETimCirc' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimCirc;
        /// Optional element 'witsml2:ETimReam' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimReam;
        /// Optional element 'witsml2:ETimHold' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimHold;
        /// Optional element 'witsml2:ETimSteering' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimSteering;
        /// Optional element 'witsml2:DistDrillRot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml2:DistDrillSlid' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml2:DistReam' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistReam;
        /// Optional element 'witsml2:DistHold' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistHold;
        /// Optional element 'witsml2:DistSteering' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistSteering;
        /// Optional element 'witsml2:NumPob' of XSD type 'xsd:int'
        int *NumPob;
        /// Optional element 'witsml2:NumContract' of XSD type 'xsd:int'
        int *NumContract;
        /// Optional element 'witsml2:NumOperator' of XSD type 'xsd:int'
        int *NumOperator;
        /// Optional element 'witsml2:NumService' of XSD type 'xsd:int'
        int *NumService;
        /// Optional element 'witsml2:NumAFE' of XSD type 'eml22:String64'
        std::string *NumAFE;
        /// Optional element 'witsml2:ConditionHole' of XSD type 'eml22:String64'
        std::string *ConditionHole;
        /// Optional element 'witsml2:TvdLot' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdLot;
        /// Optional element 'witsml2:PresLotEmw' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *PresLotEmw;
        /// Optional element 'witsml2:PresKickTol' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresKickTol;
        /// Optional element 'witsml2:VolKickTol' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolKickTol;
        /// Optional element 'witsml2:Maasp' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Maasp;
        /// Optional element 'witsml2:Tubular' of XSD type 'eml22:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ParentWellbore' of XSD type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> ParentWellbore;
        /// Optional element 'witsml2:ElevKelly' of XSD type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *ElevKelly;
        /// Optional element 'witsml2:CostDay' of XSD type 'eml22:Cost'
        eml22__Cost *CostDay;
        /// Optional element 'witsml2:CostDayMud' of XSD type 'eml22:Cost'
        eml22__Cost *CostDayMud;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStatusInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStatusInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportStatusInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportStatusInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportStatusInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportStatusInfo() : DTim(), Md(), Tvd(), MdPlugTop(), DiaHole(), MdDiaHoleStart(), DiaPilot(), MdDiaPilotPlan(), TvdDiaPilotPlan(), TypeWellbore(), MdKickoff(), TvdKickoff(), StrengthForm(), MdStrengthForm(), TvdStrengthForm(), DiaCsgLast(), MdCsgLast(), TvdCsgLast(), PresTestType(), MdPlanned(), DistDrill(), Sum24Hr(), Forecast24Hr(), RopCurrent(), Rig(), ETimStart(), ETimSpud(), ETimLoc(), ETimDrill(), RopAv(), Supervisor(), Engineer(), Geologist(), ETimDrillRot(), ETimDrillSlid(), ETimCirc(), ETimReam(), ETimHold(), ETimSteering(), DistDrillRot(), DistDrillSlid(), DistReam(), DistHold(), DistSteering(), NumPob(), NumContract(), NumOperator(), NumService(), NumAFE(), ConditionHole(), TvdLot(), PresLotEmw(), PresKickTol(), VolKickTol(), Maasp(), Tubular(), ExtensionNameValue(), ParentWellbore(), ElevKelly(), CostDay(), CostDayMud(), uid(), soap() { }
        virtual ~witsml2__DrillReportStatusInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportStatusInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportStatusInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportStatusInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:338 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStratInfo (-50)
/* complex XSD type 'witsml2:DrillReportStratInfo': */
class SOAP_CMAC witsml2__DrillReportStratInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:MdTop' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdTop;
        /// Optional element 'witsml2:TvdTop' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdTop;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStratInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStratInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportStratInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportStratInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportStratInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportStratInfo() : DTim(), MdTop(), TvdTop(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportStratInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportStratInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportStratInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportStratInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:341 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportSurveyStation (-51)
/* complex XSD type 'witsml2:DrillReportSurveyStation': */
class SOAP_CMAC witsml2__DrillReportSurveyStation {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTim;
        /// Required element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Incl' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Incl;
        /// Optional element 'witsml2:Azi' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Azi;
        /// Optional element 'witsml2:VertSect' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *VertSect;
        /// Optional element 'witsml2:Dls' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *Dls;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Location' of XSD type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> Location;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportSurveyStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportSurveyStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportSurveyStation, default initialized and not managed by a soap context
        virtual witsml2__DrillReportSurveyStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportSurveyStation); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportSurveyStation() : DTim(), Md(), Tvd(), Incl(), Azi(), VertSect(), Dls(), ExtensionNameValue(), Location(), uid(), soap() { }
        virtual ~witsml2__DrillReportSurveyStation() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportSurveyStation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportSurveyStation * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportSurveyStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:344 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellboreInfo (-52)
/* complex XSD type 'witsml2:DrillReportWellboreInfo': */
class SOAP_CMAC witsml2__DrillReportWellboreInfo {
      public:
        /// Optional element 'witsml2:DTimSpud' of XSD type 'eml22:TimeStamp'
        struct tm *DTimSpud;
        /// Optional element 'witsml2:DTimPreSpud' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPreSpud;
        /// Optional element 'witsml2:DateDrillComplete' of XSD type 'xsd:date'
        std::string *DateDrillComplete;
        /// Optional element 'witsml2:Operator' of XSD type 'eml22:String64'
        std::string *Operator;
        /// Optional element 'witsml2:DrillContractor' of XSD type 'eml22:String64'
        std::string *DrillContractor;
        /// Optional element 'witsml2:RigAlias' of XSD type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> RigAlias;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellboreInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellboreInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportWellboreInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportWellboreInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportWellboreInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportWellboreInfo() : DTimSpud(), DTimPreSpud(), DateDrillComplete(), Operator(), DrillContractor(), RigAlias(), soap() { }
        virtual ~witsml2__DrillReportWellboreInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportWellboreInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportWellboreInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportWellboreInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:347 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellTestInfo (-53)
/* complex XSD type 'witsml2:DrillReportWellTestInfo': */
class SOAP_CMAC witsml2__DrillReportWellTestInfo {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:TestType' of XSD type 'witsml2:WellTestType'
        enum witsml2__WellTestType *TestType;
        /// Optional element 'witsml2:TestNumber' of XSD type 'xsd:int'
        int *TestNumber;
        /// Optional element 'witsml2:TestMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *TestMdInterval;
        /// Optional element 'witsml2:TestTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TestTvdInterval;
        /// Optional element 'witsml2:ChokeOrificeSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ChokeOrificeSize;
        /// Optional element 'witsml2:DensityOil' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensityOil;
        /// Optional element 'witsml2:DensityWater' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensityWater;
        /// Optional element 'witsml2:DensityGas' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensityGas;
        /// Optional element 'witsml2:FlowRateOil' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowRateOil;
        /// Optional element 'witsml2:FlowRateWater' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowRateWater;
        /// Optional element 'witsml2:FlowRateGas' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowRateGas;
        /// Optional element 'witsml2:PresShutIn' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresShutIn;
        /// Optional element 'witsml2:PresFlowing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresFlowing;
        /// Optional element 'witsml2:PresBottom' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBottom;
        /// Optional element 'witsml2:GasOilRatio' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *GasOilRatio;
        /// Optional element 'witsml2:WaterOilRatio' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *WaterOilRatio;
        /// Optional element 'witsml2:Chloride' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *Chloride;
        /// Optional element 'witsml2:CarbonDioxide' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *CarbonDioxide;
        /// Optional element 'witsml2:HydrogenSulfide' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *HydrogenSulfide;
        /// Optional element 'witsml2:VolOilTotal' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolOilTotal;
        /// Optional element 'witsml2:VolGasTotal' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolGasTotal;
        /// Optional element 'witsml2:VolWaterTotal' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolWaterTotal;
        /// Optional element 'witsml2:VolOilStored' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolOilStored;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellTestInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellTestInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReportWellTestInfo, default initialized and not managed by a soap context
        virtual witsml2__DrillReportWellTestInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReportWellTestInfo); }
      public:
        /// Constructor with initializations
        witsml2__DrillReportWellTestInfo() : DTim(), TestType(), TestNumber(), TestMdInterval(), TestTvdInterval(), ChokeOrificeSize(), DensityOil(), DensityWater(), DensityGas(), FlowRateOil(), FlowRateWater(), FlowRateGas(), PresShutIn(), PresFlowing(), PresBottom(), GasOilRatio(), WaterOilRatio(), Chloride(), CarbonDioxide(), HydrogenSulfide(), VolOilTotal(), VolGasTotal(), VolWaterTotal(), VolOilStored(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DrillReportWellTestInfo() { }
        /// Friend allocator used by soap_new_witsml2__DrillReportWellTestInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReportWellTestInfo * SOAP_FMAC2 soap_instantiate_witsml2__DrillReportWellTestInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:350 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Rheometer (-54)
/* complex XSD type 'witsml2:Rheometer': */
class SOAP_CMAC witsml2__Rheometer {
      public:
        /// Optional element 'witsml2:TempRheom' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempRheom;
        /// Optional element 'witsml2:PresRheom' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresRheom;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Viscosity' of XSD type 'witsml2:RheometerViscosity'
        std::vector<witsml2__RheometerViscosity *> Viscosity;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Rheometer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Rheometer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Rheometer, default initialized and not managed by a soap context
        virtual witsml2__Rheometer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Rheometer); }
      public:
        /// Constructor with initializations
        witsml2__Rheometer() : TempRheom(), PresRheom(), ExtensionNameValue(), Viscosity(), uid(), soap() { }
        virtual ~witsml2__Rheometer() { }
        /// Friend allocator used by soap_new_witsml2__Rheometer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Rheometer * SOAP_FMAC2 soap_instantiate_witsml2__Rheometer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:356 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractRotarySteerableTool (-56)
/* Type witsml2__AbstractRotarySteerableTool is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractRotarySteerableTool': */
class SOAP_CMAC witsml2__AbstractRotarySteerableTool {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractRotarySteerableTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractRotarySteerableTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractRotarySteerableTool, default initialized and not managed by a soap context
        virtual witsml2__AbstractRotarySteerableTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractRotarySteerableTool); }
      public:
        /// Constructor with initializations
        witsml2__AbstractRotarySteerableTool() : soap() { }
        virtual ~witsml2__AbstractRotarySteerableTool() { }
        /// Friend allocator used by soap_new_witsml2__AbstractRotarySteerableTool(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractRotarySteerableTool * SOAP_FMAC2 soap_instantiate_witsml2__AbstractRotarySteerableTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:359 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Bend
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Bend (-57)
/* complex XSD type 'witsml2:Bend': */
class SOAP_CMAC witsml2__Bend {
      public:
        /// Optional element 'witsml2:Angle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Angle;
        /// Optional element 'witsml2:DistBendBot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistBendBot;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Bend
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Bend; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Bend, default initialized and not managed by a soap context
        virtual witsml2__Bend *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Bend); }
      public:
        /// Constructor with initializations
        witsml2__Bend() : Angle(), DistBendBot(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Bend() { }
        /// Friend allocator used by soap_new_witsml2__Bend(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Bend * SOAP_FMAC2 soap_instantiate_witsml2__Bend(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:368 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitRecord (-60)
/* complex XSD type 'witsml2:BitRecord': */
class SOAP_CMAC witsml2__BitRecord {
      public:
        /// Optional element 'witsml2:NumBit' of XSD type 'eml22:String64'
        std::string *NumBit;
        /// Required element 'witsml2:DiaBit' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaBit;
        /// Optional element 'witsml2:DiaPassThru' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaPassThru;
        /// Optional element 'witsml2:DiaPilot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaPilot;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:TypeBit' of XSD type 'witsml2:BitType'
        enum witsml2__BitType *TypeBit;
        /// Optional element 'witsml2:CodeMfg' of XSD type 'eml22:String64'
        std::string *CodeMfg;
        /// Optional element 'witsml2:CodeIADC' of XSD type 'eml22:String64'
        std::string *CodeIADC;
        /// Optional element 'witsml2:CondInitInner' of XSD type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondInitInner;
        /// Optional element 'witsml2:CondInitOuter' of XSD type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondInitOuter;
        /// Optional element 'witsml2:CondInitDull' of XSD type 'witsml2:BitDullCode'
        enum witsml2__BitDullCode *CondInitDull;
        /// Optional element 'witsml2:CondInitLocation' of XSD type 'eml22:String64'
        std::string *CondInitLocation;
        /// Optional element 'witsml2:CondInitBearing' of XSD type 'witsml2:IadcBearingWearCode'
        enum witsml2__IadcBearingWearCode *CondInitBearing;
        /// Optional element 'witsml2:CondInitGauge' of XSD type 'eml22:String64'
        std::string *CondInitGauge;
        /// Optional element 'witsml2:CondInitOther' of XSD type 'eml22:String64'
        std::string *CondInitOther;
        /// Optional element 'witsml2:CondInitReason' of XSD type 'witsml2:BitReasonPulled'
        enum witsml2__BitReasonPulled *CondInitReason;
        /// Optional element 'witsml2:CondFinalInner' of XSD type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondFinalInner;
        /// Optional element 'witsml2:CondFinalOuter' of XSD type 'witsml2:IadcIntegerCode'
        enum witsml2__IadcIntegerCode *CondFinalOuter;
        /// Optional element 'witsml2:CondFinalDull' of XSD type 'witsml2:BitDullCode'
        enum witsml2__BitDullCode *CondFinalDull;
        /// Optional element 'witsml2:CondFinalLocation' of XSD type 'eml22:String64'
        std::string *CondFinalLocation;
        /// Optional element 'witsml2:CondFinalBearing' of XSD type 'witsml2:IadcBearingWearCode'
        enum witsml2__IadcBearingWearCode *CondFinalBearing;
        /// Optional element 'witsml2:CondFinalGauge' of XSD type 'eml22:String64'
        std::string *CondFinalGauge;
        /// Optional element 'witsml2:CondFinalOther' of XSD type 'eml22:String64'
        std::string *CondFinalOther;
        /// Optional element 'witsml2:CondFinalReason' of XSD type 'witsml2:BitReasonPulled'
        enum witsml2__BitReasonPulled *CondFinalReason;
        /// Optional element 'witsml2:Drive' of XSD type 'eml22:String64'
        std::string *Drive;
        /// Optional element 'witsml2:BitClass' of XSD type 'eml22:String64'
        std::string *BitClass;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Cost' of XSD type 'eml22:Cost'
        eml22__Cost *Cost;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BitRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BitRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BitRecord, default initialized and not managed by a soap context
        virtual witsml2__BitRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BitRecord); }
      public:
        /// Constructor with initializations
        witsml2__BitRecord() : NumBit(), DiaBit(), DiaPassThru(), DiaPilot(), Manufacturer(), TypeBit(), CodeMfg(), CodeIADC(), CondInitInner(), CondInitOuter(), CondInitDull(), CondInitLocation(), CondInitBearing(), CondInitGauge(), CondInitOther(), CondInitReason(), CondFinalInner(), CondFinalOuter(), CondFinalDull(), CondFinalLocation(), CondFinalBearing(), CondFinalGauge(), CondFinalOther(), CondFinalReason(), Drive(), BitClass(), ExtensionNameValue(), Cost(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__BitRecord() { }
        /// Friend allocator used by soap_new_witsml2__BitRecord(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BitRecord * SOAP_FMAC2 soap_instantiate_witsml2__BitRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:371 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Connection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Connection (-61)
/* Type witsml2__Connection is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Connection': */
class SOAP_CMAC witsml2__Connection {
      public:
        /// Optional element 'witsml2:Id' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Id;
        /// Optional element 'witsml2:Od' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Od;
        /// Optional element 'witsml2:Len' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Len;
        /// Optional element 'witsml2:TypeThread' of XSD type 'eml22:String64'
        std::string *TypeThread;
        /// Optional element 'witsml2:SizeThread' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeThread;
        /// Optional element 'witsml2:TensYield' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *TensYield;
        /// Optional element 'witsml2:TqYield' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqYield;
        /// Optional element 'witsml2:Position' of XSD type 'witsml2:ConnectionPosition'
        enum witsml2__ConnectionPosition *Position;
        /// Optional element 'witsml2:CriticalCrossSection' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *CriticalCrossSection;
        /// Optional element 'witsml2:PresLeak' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresLeak;
        /// Optional element 'witsml2:TqMakeup' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqMakeup;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Connection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Connection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Connection, default initialized and not managed by a soap context
        virtual witsml2__Connection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Connection); }
      public:
        /// Constructor with initializations
        witsml2__Connection() : Id(), Od(), Len(), TypeThread(), SizeThread(), TensYield(), TqYield(), Position(), CriticalCrossSection(), PresLeak(), TqMakeup(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Connection() { }
        /// Friend allocator used by soap_new_witsml2__Connection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Connection * SOAP_FMAC2 soap_instantiate_witsml2__Connection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:374 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpener
#define SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpener (-62)
/* complex XSD type 'witsml2:HoleOpener': */
class SOAP_CMAC witsml2__HoleOpener {
      public:
        /// Optional element 'witsml2:TypeHoleOpener' of XSD type 'witsml2:HoleOpenerType'
        enum witsml2__HoleOpenerType *TypeHoleOpener;
        /// Optional element 'witsml2:NumCutter' of XSD type 'xsd:int'
        int *NumCutter;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:DiaHoleOpener' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaHoleOpener;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpener
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpener; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__HoleOpener, default initialized and not managed by a soap context
        virtual witsml2__HoleOpener *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__HoleOpener); }
      public:
        /// Constructor with initializations
        witsml2__HoleOpener() : TypeHoleOpener(), NumCutter(), Manufacturer(), DiaHoleOpener(), ExtensionAny(), soap() { }
        virtual ~witsml2__HoleOpener() { }
        /// Friend allocator used by soap_new_witsml2__HoleOpener(struct soap*, int)
        friend SOAP_FMAC1 witsml2__HoleOpener * SOAP_FMAC2 soap_instantiate_witsml2__HoleOpener(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:377 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Jar
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Jar (-63)
/* complex XSD type 'witsml2:Jar': */
class SOAP_CMAC witsml2__Jar {
      public:
        /// Optional element 'witsml2:ForUpSet' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ForUpSet;
        /// Optional element 'witsml2:ForDownSet' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ForDownSet;
        /// Optional element 'witsml2:ForUpTrip' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ForUpTrip;
        /// Optional element 'witsml2:ForDownTrip' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ForDownTrip;
        /// Optional element 'witsml2:ForPmpOpen' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ForPmpOpen;
        /// Optional element 'witsml2:ForSealFric' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ForSealFric;
        /// Optional element 'witsml2:TypeJar' of XSD type 'witsml2:JarType'
        enum witsml2__JarType *TypeJar;
        /// Optional element 'witsml2:JarAction' of XSD type 'witsml2:JarAction'
        enum witsml2__JarAction *JarAction;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Jar
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Jar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Jar, default initialized and not managed by a soap context
        virtual witsml2__Jar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Jar); }
      public:
        /// Constructor with initializations
        witsml2__Jar() : ForUpSet(), ForDownSet(), ForUpTrip(), ForDownTrip(), ForPmpOpen(), ForSealFric(), TypeJar(), JarAction(), ExtensionAny(), soap() { }
        virtual ~witsml2__Jar() { }
        /// Friend allocator used by soap_new_witsml2__Jar(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Jar * SOAP_FMAC2 soap_instantiate_witsml2__Jar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:380 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Motor
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Motor (-64)
/* complex XSD type 'witsml2:Motor': */
class SOAP_CMAC witsml2__Motor {
      public:
        /// Optional element 'witsml2:OffsetTool' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OffsetTool;
        /// Optional element 'witsml2:PresLossFact' of XSD type 'xsd:double'
        double *PresLossFact;
        /// Optional element 'witsml2:FlowrateMn' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateMn;
        /// Optional element 'witsml2:FlowrateMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateMx;
        /// Optional element 'witsml2:DiaRotorNozzle' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaRotorNozzle;
        /// Optional element 'witsml2:ClearanceBearBox' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ClearanceBearBox;
        /// Optional element 'witsml2:LobesRotor' of XSD type 'xsd:int'
        int *LobesRotor;
        /// Optional element 'witsml2:LobesStator' of XSD type 'xsd:int'
        int *LobesStator;
        /// Optional element 'witsml2:TypeBearing' of XSD type 'witsml2:BearingType'
        enum witsml2__BearingType *TypeBearing;
        /// Optional element 'witsml2:TempOpMx' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempOpMx;
        /// Optional element 'witsml2:RotorCatcher' of XSD type 'xsd:boolean'
        bool *RotorCatcher;
        /// Optional element 'witsml2:DumpValve' of XSD type 'xsd:boolean'
        bool *DumpValve;
        /// Optional element 'witsml2:DiaNozzle' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaNozzle;
        /// Optional element 'witsml2:Rotatable' of XSD type 'xsd:boolean'
        bool *Rotatable;
        /// Optional element 'witsml2:BendSettingsMn' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *BendSettingsMn;
        /// Optional element 'witsml2:BendSettingsMx' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *BendSettingsMx;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Motor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Motor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Motor, default initialized and not managed by a soap context
        virtual witsml2__Motor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Motor); }
      public:
        /// Constructor with initializations
        witsml2__Motor() : OffsetTool(), PresLossFact(), FlowrateMn(), FlowrateMx(), DiaRotorNozzle(), ClearanceBearBox(), LobesRotor(), LobesStator(), TypeBearing(), TempOpMx(), RotorCatcher(), DumpValve(), DiaNozzle(), Rotatable(), BendSettingsMn(), BendSettingsMx(), ExtensionAny(), soap() { }
        virtual ~witsml2__Motor() { }
        /// Friend allocator used by soap_new_witsml2__Motor(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Motor * SOAP_FMAC2 soap_instantiate_witsml2__Motor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:383 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MwdTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MwdTool (-65)
/* complex XSD type 'witsml2:MwdTool': */
class SOAP_CMAC witsml2__MwdTool {
      public:
        /// Optional element 'witsml2:FlowrateMn' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateMn;
        /// Optional element 'witsml2:FlowrateMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateMx;
        /// Optional element 'witsml2:TempMx' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempMx;
        /// Optional element 'witsml2:IdEquv' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdEquv;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Sensor' of XSD type 'witsml2:Sensor'
        std::vector<witsml2__Sensor *> Sensor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MwdTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MwdTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MwdTool, default initialized and not managed by a soap context
        virtual witsml2__MwdTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MwdTool); }
      public:
        /// Constructor with initializations
        witsml2__MwdTool() : FlowrateMn(), FlowrateMx(), TempMx(), IdEquv(), ExtensionAny(), Sensor(), soap() { }
        virtual ~witsml2__MwdTool() { }
        /// Friend allocator used by soap_new_witsml2__MwdTool(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MwdTool * SOAP_FMAC2 soap_instantiate_witsml2__MwdTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:386 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Nozzle (-66)
/* complex XSD type 'witsml2:Nozzle': */
class SOAP_CMAC witsml2__Nozzle {
      public:
        /// Optional element 'witsml2:Index' of XSD type 'xsd:int'
        int *Index;
        /// Optional element 'witsml2:DiaNozzle' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaNozzle;
        /// Optional element 'witsml2:TypeNozzle' of XSD type 'witsml2:NozzleType'
        enum witsml2__NozzleType *TypeNozzle;
        /// Optional element 'witsml2:Len' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Len;
        /// Optional element 'witsml2:Orientation' of XSD type 'eml22:String64'
        std::string *Orientation;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Nozzle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Nozzle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Nozzle, default initialized and not managed by a soap context
        virtual witsml2__Nozzle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Nozzle); }
      public:
        /// Constructor with initializations
        witsml2__Nozzle() : Index(), DiaNozzle(), TypeNozzle(), Len(), Orientation(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Nozzle() { }
        /// Friend allocator used by soap_new_witsml2__Nozzle(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Nozzle * SOAP_FMAC2 soap_instantiate_witsml2__Nozzle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:389 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RotarySteerableTool (-67)
/* complex XSD type 'witsml2:RotarySteerableTool': */
class SOAP_CMAC witsml2__RotarySteerableTool {
      public:
        /// Required element 'witsml2:DeflectionMethod' of XSD type 'witsml2:DeflectionMethod'
        enum witsml2__DeflectionMethod DeflectionMethod;
        /// Optional element 'witsml2:HoleSizeMn' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HoleSizeMn;
        /// Optional element 'witsml2:HoleSizeMx' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HoleSizeMx;
        /// Optional element 'witsml2:WobMx' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WobMx;
        /// Optional element 'witsml2:OperatingSpeed' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *OperatingSpeed;
        /// Optional element 'witsml2:SpeedMx' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *SpeedMx;
        /// Optional element 'witsml2:FlowRateMn' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowRateMn;
        /// Optional element 'witsml2:FlowRateMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowRateMx;
        /// Optional element 'witsml2:DownLinkFlowRateMn' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *DownLinkFlowRateMn;
        /// Optional element 'witsml2:DownLinkFlowRateMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *DownLinkFlowRateMx;
        /// Optional element 'witsml2:PressLossFact' of XSD type 'xsd:double'
        double *PressLossFact;
        /// Optional element 'witsml2:PadCount' of XSD type 'xsd:int'
        int *PadCount;
        /// Optional element 'witsml2:PadLen' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PadLen;
        /// Optional element 'witsml2:PadWidth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PadWidth;
        /// Optional element 'witsml2:PadOffset' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PadOffset;
        /// Optional element 'witsml2:OpenPadOd' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OpenPadOd;
        /// Optional element 'witsml2:ClosePadOd' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ClosePadOd;
        /// Required element 'witsml2:AbstractRotarySteerableTool' of XSD type 'witsml2:AbstractRotarySteerableTool'
        witsml2__AbstractRotarySteerableTool *AbstractRotarySteerableTool;
        /// Optional element 'witsml2:Sensor' of XSD type 'witsml2:Sensor'
        std::vector<witsml2__Sensor *> Sensor;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RotarySteerableTool
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RotarySteerableTool; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RotarySteerableTool, default initialized and not managed by a soap context
        virtual witsml2__RotarySteerableTool *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RotarySteerableTool); }
      public:
        /// Constructor with initializations
        witsml2__RotarySteerableTool() : DeflectionMethod(), HoleSizeMn(), HoleSizeMx(), WobMx(), OperatingSpeed(), SpeedMx(), FlowRateMn(), FlowRateMx(), DownLinkFlowRateMn(), DownLinkFlowRateMx(), PressLossFact(), PadCount(), PadLen(), PadWidth(), PadOffset(), OpenPadOd(), ClosePadOd(), AbstractRotarySteerableTool(), Sensor(), ExtensionAny(), soap() { }
        virtual ~witsml2__RotarySteerableTool() { }
        /// Friend allocator used by soap_new_witsml2__RotarySteerableTool(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RotarySteerableTool * SOAP_FMAC2 soap_instantiate_witsml2__RotarySteerableTool(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:392 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Sensor (-68)
/* complex XSD type 'witsml2:Sensor': */
class SOAP_CMAC witsml2__Sensor {
      public:
        /// Optional element 'witsml2:TypeMeasurement' of XSD type 'witsml2:MeasurementType'
        enum witsml2__MeasurementType *TypeMeasurement;
        /// Optional element 'witsml2:OffsetBot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OffsetBot;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Sensor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Sensor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Sensor, default initialized and not managed by a soap context
        virtual witsml2__Sensor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Sensor); }
      public:
        /// Constructor with initializations
        witsml2__Sensor() : TypeMeasurement(), OffsetBot(), Comments(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Sensor() { }
        /// Friend allocator used by soap_new_witsml2__Sensor(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Sensor * SOAP_FMAC2 soap_instantiate_witsml2__Sensor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:395 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Stabilizer (-69)
/* complex XSD type 'witsml2:Stabilizer': */
class SOAP_CMAC witsml2__Stabilizer {
      public:
        /// Optional element 'witsml2:LenBlade' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenBlade;
        /// Optional element 'witsml2:LenBladeGauge' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenBladeGauge;
        /// Optional element 'witsml2:OdBladeMx' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdBladeMx;
        /// Optional element 'witsml2:OdBladeMn' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdBladeMn;
        /// Optional element 'witsml2:DistBladeBot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistBladeBot;
        /// Optional element 'witsml2:ShapeBlade' of XSD type 'witsml2:BladeShapeType'
        enum witsml2__BladeShapeType *ShapeBlade;
        /// Optional element 'witsml2:FactFric' of XSD type 'xsd:double'
        double *FactFric;
        /// Optional element 'witsml2:TypeBlade' of XSD type 'witsml2:BladeType'
        enum witsml2__BladeType *TypeBlade;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Stabilizer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Stabilizer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Stabilizer, default initialized and not managed by a soap context
        virtual witsml2__Stabilizer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Stabilizer); }
      public:
        /// Constructor with initializations
        witsml2__Stabilizer() : LenBlade(), LenBladeGauge(), OdBladeMx(), OdBladeMn(), DistBladeBot(), ShapeBlade(), FactFric(), TypeBlade(), ExtensionNameValue(), ExtensionAny(), uid(), soap() { }
        virtual ~witsml2__Stabilizer() { }
        /// Friend allocator used by soap_new_witsml2__Stabilizer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Stabilizer * SOAP_FMAC2 soap_instantiate_witsml2__Stabilizer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:401 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponent (-71)
/* complex XSD type 'witsml2:TubularComponent': */
class SOAP_CMAC witsml2__TubularComponent {
      public:
        /// Required element 'witsml2:TypeTubularComponent' of XSD type 'witsml2:TubularComponentType'
        enum witsml2__TubularComponentType TypeTubularComponent;
        /// Required element 'witsml2:Sequence' of XSD type 'xsd:int'
        int Sequence;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Required element 'witsml2:Id' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Id;
        /// Required element 'witsml2:Od' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Od;
        /// Optional element 'witsml2:OdMx' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdMx;
        /// Required element 'witsml2:Len' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Len;
        /// Optional element 'witsml2:LenJointAv' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenJointAv;
        /// Optional element 'witsml2:NumJointStand' of XSD type 'xsd:int'
        int *NumJointStand;
        /// Optional element 'witsml2:WtPerLen' of XSD type 'eml22:MassPerLengthMeasure'
        eml22__MassPerLengthMeasure *WtPerLen;
        /// Optional element 'witsml2:Grade' of XSD type 'eml22:String64'
        std::string *Grade;
        /// Optional element 'witsml2:OdDrift' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdDrift;
        /// Optional element 'witsml2:TensYield' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *TensYield;
        /// Optional element 'witsml2:TqYield' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqYield;
        /// Optional element 'witsml2:StressFatigue' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *StressFatigue;
        /// Optional element 'witsml2:LenFishneck' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenFishneck;
        /// Optional element 'witsml2:IdFishneck' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdFishneck;
        /// Optional element 'witsml2:OdFishneck' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdFishneck;
        /// Optional element 'witsml2:Disp' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Disp;
        /// Optional element 'witsml2:PresBurst' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBurst;
        /// Optional element 'witsml2:PresCollapse' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCollapse;
        /// Optional element 'witsml2:ClassService' of XSD type 'eml22:String64'
        std::string *ClassService;
        /// Optional element 'witsml2:WearWall' of XSD type 'eml22:LengthPerLengthMeasure'
        eml22__LengthPerLengthMeasure *WearWall;
        /// Optional element 'witsml2:ThickWall' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ThickWall;
        /// Optional element 'witsml2:ConfigCon' of XSD type 'witsml2:BoxPinConfig'
        enum witsml2__BoxPinConfig *ConfigCon;
        /// Optional element 'witsml2:BendStiffness' of XSD type 'eml22:ForcePerLengthMeasure'
        eml22__ForcePerLengthMeasure *BendStiffness;
        /// Optional element 'witsml2:AxialStiffness' of XSD type 'eml22:ForcePerLengthMeasure'
        eml22__ForcePerLengthMeasure *AxialStiffness;
        /// Optional element 'witsml2:TorsionalStiffness' of XSD type 'eml22:ForcePerLengthMeasure'
        eml22__ForcePerLengthMeasure *TorsionalStiffness;
        /// Optional element 'witsml2:TypeMaterial' of XSD type 'witsml2:MaterialType'
        enum witsml2__MaterialType *TypeMaterial;
        /// Optional element 'witsml2:DoglegMx' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *DoglegMx;
        /// Optional element 'witsml2:Vendor' of XSD type 'eml22:String64'
        std::string *Vendor;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:AreaNozzleFlow' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *AreaNozzleFlow;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Connection' of XSD type 'witsml2:Connection'
        std::vector<witsml2__Connection *> Connection;
        /// Optional element 'witsml2:Jar' of XSD type 'witsml2:Jar'
        witsml2__Jar *Jar;
        /// Optional element 'witsml2:MwdTool' of XSD type 'witsml2:MwdTool'
        witsml2__MwdTool *MwdTool;
        /// Optional element 'witsml2:BitRecord' of XSD type 'witsml2:BitRecord'
        witsml2__BitRecord *BitRecord;
        /// Optional element 'witsml2:Motor' of XSD type 'witsml2:Motor'
        witsml2__Motor *Motor;
        /// Optional element 'witsml2:Stabilizer' of XSD type 'witsml2:Stabilizer'
        std::vector<witsml2__Stabilizer *> Stabilizer;
        /// Optional element 'witsml2:Bend' of XSD type 'witsml2:Bend'
        std::vector<witsml2__Bend *> Bend;
        /// Optional element 'witsml2:HoleOpener' of XSD type 'witsml2:HoleOpener'
        witsml2__HoleOpener *HoleOpener;
        /// Optional element 'witsml2:RotarySteerableTool' of XSD type 'witsml2:RotarySteerableTool'
        witsml2__RotarySteerableTool *RotarySteerableTool;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Nozzle' of XSD type 'witsml2:Nozzle'
        std::vector<witsml2__Nozzle *> Nozzle;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TubularComponent, default initialized and not managed by a soap context
        virtual witsml2__TubularComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TubularComponent); }
      public:
        /// Constructor with initializations
        witsml2__TubularComponent() : TypeTubularComponent(), Sequence(), Description(), Id(), Od(), OdMx(), Len(), LenJointAv(), NumJointStand(), WtPerLen(), Grade(), OdDrift(), TensYield(), TqYield(), StressFatigue(), LenFishneck(), IdFishneck(), OdFishneck(), Disp(), PresBurst(), PresCollapse(), ClassService(), WearWall(), ThickWall(), ConfigCon(), BendStiffness(), AxialStiffness(), TorsionalStiffness(), TypeMaterial(), DoglegMx(), Vendor(), Model(), NameTag(), AreaNozzleFlow(), ExtensionNameValue(), Connection(), Jar(), MwdTool(), BitRecord(), Motor(), Stabilizer(), Bend(), HoleOpener(), RotarySteerableTool(), ExtensionAny(), Nozzle(), uid(), soap() { }
        virtual ~witsml2__TubularComponent() { }
        /// Friend allocator used by soap_new_witsml2__TubularComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TubularComponent * SOAP_FMAC2 soap_instantiate_witsml2__TubularComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:404 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTag (-72)
/* complex XSD type 'witsml2:NameTag': */
class SOAP_CMAC witsml2__NameTag {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Required element 'witsml2:NumberingScheme' of XSD type 'witsml2:NameTagNumberingScheme'
        enum witsml2__NameTagNumberingScheme NumberingScheme;
        /// Optional element 'witsml2:Technology' of XSD type 'witsml2:NameTagTechnology'
        enum witsml2__NameTagTechnology *Technology;
        /// Optional element 'witsml2:Location' of XSD type 'witsml2:NameTagLocation'
        enum witsml2__NameTagLocation *Location;
        /// Optional element 'witsml2:InstallationDate' of XSD type 'eml22:TimeStamp'
        struct tm *InstallationDate;
        /// Optional element 'witsml2:InstallationCompany' of XSD type 'eml22:String64'
        std::string *InstallationCompany;
        /// Optional element 'witsml2:MountingCode' of XSD type 'eml22:String64'
        std::string *MountingCode;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__NameTag
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__NameTag; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__NameTag, default initialized and not managed by a soap context
        virtual witsml2__NameTag *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__NameTag); }
      public:
        /// Constructor with initializations
        witsml2__NameTag() : Name(), NumberingScheme(), Technology(), Location(), InstallationDate(), InstallationCompany(), MountingCode(), Comment(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__NameTag() { }
        /// Friend allocator used by soap_new_witsml2__NameTag(struct soap*, int)
        friend SOAP_FMAC1 witsml2__NameTag * SOAP_FMAC2 soap_instantiate_witsml2__NameTag(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:407 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementJob
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementJob (-73)
/* Type witsml2__AbstractCementJob is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractCementJob': */
class SOAP_CMAC witsml2__AbstractCementJob {
      public:
        /// Optional element 'witsml2:CementEngr' of XSD type 'eml22:String64'
        std::string *CementEngr;
        /// Optional element 'witsml2:ETimWaitingOnCement' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimWaitingOnCement;
        /// Optional element 'witsml2:PlugInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *PlugInterval;
        /// Optional element 'witsml2:MdHole' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHole;
        /// Optional element 'witsml2:Contractor' of XSD type 'eml22:String64'
        std::string *Contractor;
        /// Optional element 'witsml2:RpmPipe' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RpmPipe;
        /// Optional element 'witsml2:TqInitPipeRot' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqInitPipeRot;
        /// Optional element 'witsml2:TqPipeAv' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqPipeAv;
        /// Optional element 'witsml2:TqPipeMx' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *TqPipeMx;
        /// Optional element 'witsml2:OverPull' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *OverPull;
        /// Optional element 'witsml2:SlackOff' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *SlackOff;
        /// Optional element 'witsml2:RpmPipeRecip' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RpmPipeRecip;
        /// Optional element 'witsml2:LenPipeRecipStroke' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenPipeRecipStroke;
        /// Optional element 'witsml2:Reciprocating' of XSD type 'xsd:boolean'
        bool *Reciprocating;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementJob
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementJob; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractCementJob, default initialized and not managed by a soap context
        virtual witsml2__AbstractCementJob *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractCementJob); }
      public:
        /// Constructor with initializations
        witsml2__AbstractCementJob() : CementEngr(), ETimWaitingOnCement(), PlugInterval(), MdHole(), Contractor(), RpmPipe(), TqInitPipeRot(), TqPipeAv(), TqPipeMx(), OverPull(), SlackOff(), RpmPipeRecip(), LenPipeRecipStroke(), Reciprocating(), soap() { }
        virtual ~witsml2__AbstractCementJob() { }
        /// Friend allocator used by soap_new_witsml2__AbstractCementJob(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractCementJob * SOAP_FMAC2 soap_instantiate_witsml2__AbstractCementJob(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:410 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementStage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementStage (-74)
/* Type witsml2__AbstractCementStage is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractCementStage': */
class SOAP_CMAC witsml2__AbstractCementStage {
      public:
        /// Optional element 'witsml2:AnnularFlowAfter' of XSD type 'xsd:boolean'
        bool *AnnularFlowAfter;
        /// Optional element 'witsml2:ReciprocationSlackoff' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ReciprocationSlackoff;
        /// Optional element 'witsml2:BotPlug' of XSD type 'xsd:boolean'
        bool *BotPlug;
        /// Optional element 'witsml2:BotPlugNumber' of XSD type 'xsd:int'
        int *BotPlugNumber;
        /// Optional element 'witsml2:DiaTailPipe' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaTailPipe;
        /// Optional element 'witsml2:DisplacementFluidRefId' of XSD type 'eml22:UuidString'
        std::string *DisplacementFluidRefId;
        /// Optional element 'witsml2:ETimPresHeld' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimPresHeld;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:FlowrateMudCirc' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateMudCirc;
        /// Optional element 'witsml2:Gel10Min' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel10Min;
        /// Optional element 'witsml2:Gel10Sec' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel10Sec;
        /// Optional element 'witsml2:MdCircOut' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdCircOut;
        /// Optional element 'witsml2:MdCoilTbg' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdCoilTbg;
        /// Optional element 'witsml2:MdString' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdString;
        /// Optional element 'witsml2:MdTool' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdTool;
        /// Optional element 'witsml2:MixMethod' of XSD type 'eml22:String64'
        std::string *MixMethod;
        /// Required element 'witsml2:NumStage' of XSD type 'xsd:int'
        int NumStage;
        /// Optional element 'witsml2:ReciprocationOverpull' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *ReciprocationOverpull;
        /// Optional element 'witsml2:PillBelowPlug' of XSD type 'xsd:boolean'
        bool *PillBelowPlug;
        /// Optional element 'witsml2:PlugCatcher' of XSD type 'xsd:boolean'
        bool *PlugCatcher;
        /// Optional element 'witsml2:PresBackPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBackPressure;
        /// Optional element 'witsml2:PresBump' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBump;
        /// Optional element 'witsml2:PresCoilTbgEnd' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCoilTbgEnd;
        /// Optional element 'witsml2:PresCoilTbgStart' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCoilTbgStart;
        /// Optional element 'witsml2:PresCsgEnd' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCsgEnd;
        /// Optional element 'witsml2:PresCsgStart' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCsgStart;
        /// Optional element 'witsml2:PresDisplace' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresDisplace;
        /// Optional element 'witsml2:PresHeld' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresHeld;
        /// Optional element 'witsml2:PresMudCirc' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresMudCirc;
        /// Optional element 'witsml2:PresTbgEnd' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresTbgEnd;
        /// Optional element 'witsml2:PresTbgStart' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresTbgStart;
        /// Optional element 'witsml2:PvMud' of XSD type 'eml22:DynamicViscosityMeasure'
        eml22__DynamicViscosityMeasure *PvMud;
        /// Optional element 'witsml2:SqueezeObjective' of XSD type 'eml22:String64'
        std::string *SqueezeObjective;
        /// Optional element 'witsml2:StageMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *StageMdInterval;
        /// Optional element 'witsml2:TailPipePerf' of XSD type 'xsd:boolean'
        bool *TailPipePerf;
        /// Optional element 'witsml2:TailPipeUsed' of XSD type 'xsd:boolean'
        bool *TailPipeUsed;
        /// Optional element 'witsml2:TempBHCT' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempBHCT;
        /// Optional element 'witsml2:TempBHST' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempBHST;
        /// Optional element 'witsml2:TopPlug' of XSD type 'xsd:boolean'
        bool *TopPlug;
        /// Optional element 'witsml2:TypeOriginalMud' of XSD type 'eml22:String64'
        std::string *TypeOriginalMud;
        /// Required element 'witsml2:TypeStage' of XSD type 'eml22:String64'
        std::string TypeStage;
        /// Optional element 'witsml2:VolCircPrior' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolCircPrior;
        /// Optional element 'witsml2:VolCsgIn' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolCsgIn;
        /// Optional element 'witsml2:VolCsgOut' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolCsgOut;
        /// Optional element 'witsml2:VolDisplaceFluid' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolDisplaceFluid;
        /// Optional element 'witsml2:VolExcess' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolExcess;
        /// Optional element 'witsml2:VolExcessMethod' of XSD type 'eml22:String64'
        std::string *VolExcessMethod;
        /// Optional element 'witsml2:VolMudLost' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudLost;
        /// Optional element 'witsml2:VolReturns' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolReturns;
        /// Optional element 'witsml2:WtMud' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *WtMud;
        /// Optional element 'witsml2:YpMud' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *YpMud;
        /// Optional element 'witsml2:OriginalFluidLocation' of XSD type 'witsml2:FluidLocation'
        std::vector<witsml2__FluidLocation *> OriginalFluidLocation;
        /// Optional element 'witsml2:EndingFluidLocation' of XSD type 'witsml2:FluidLocation'
        std::vector<witsml2__FluidLocation *> EndingFluidLocation;
        /// Optional element 'witsml2:Step' of XSD type 'witsml2:CementPumpScheduleStep'
        std::vector<witsml2__CementPumpScheduleStep *> Step;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementStage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementStage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractCementStage, default initialized and not managed by a soap context
        virtual witsml2__AbstractCementStage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractCementStage); }
      public:
        /// Constructor with initializations
        witsml2__AbstractCementStage() : AnnularFlowAfter(), ReciprocationSlackoff(), BotPlug(), BotPlugNumber(), DiaTailPipe(), DisplacementFluidRefId(), ETimPresHeld(), ExtensionNameValue(), FlowrateMudCirc(), Gel10Min(), Gel10Sec(), MdCircOut(), MdCoilTbg(), MdString(), MdTool(), MixMethod(), NumStage(), ReciprocationOverpull(), PillBelowPlug(), PlugCatcher(), PresBackPressure(), PresBump(), PresCoilTbgEnd(), PresCoilTbgStart(), PresCsgEnd(), PresCsgStart(), PresDisplace(), PresHeld(), PresMudCirc(), PresTbgEnd(), PresTbgStart(), PvMud(), SqueezeObjective(), StageMdInterval(), TailPipePerf(), TailPipeUsed(), TempBHCT(), TempBHST(), TopPlug(), TypeOriginalMud(), TypeStage(), VolCircPrior(), VolCsgIn(), VolCsgOut(), VolDisplaceFluid(), VolExcess(), VolExcessMethod(), VolMudLost(), VolReturns(), WtMud(), YpMud(), OriginalFluidLocation(), EndingFluidLocation(), Step(), soap() { }
        virtual ~witsml2__AbstractCementStage() { }
        /// Friend allocator used by soap_new_witsml2__AbstractCementStage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractCementStage * SOAP_FMAC2 soap_instantiate_witsml2__AbstractCementStage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:413 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementAdditive (-75)
/* complex XSD type 'witsml2:CementAdditive': */
class SOAP_CMAC witsml2__CementAdditive {
      public:
        /// Required element 'witsml2:NameAdd' of XSD type 'eml22:String64'
        std::string NameAdd;
        /// Optional element 'witsml2:TypeAdd' of XSD type 'eml22:String64'
        std::string *TypeAdd;
        /// Optional element 'witsml2:FormAdd' of XSD type 'eml22:String64'
        std::string *FormAdd;
        /// Optional element 'witsml2:DensAdd' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensAdd;
        /// Required element 'witsml2:Additive' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *Additive;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementAdditive
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementAdditive; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementAdditive, default initialized and not managed by a soap context
        virtual witsml2__CementAdditive *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementAdditive); }
      public:
        /// Constructor with initializations
        witsml2__CementAdditive() : NameAdd(), TypeAdd(), FormAdd(), DensAdd(), Additive(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__CementAdditive() { }
        /// Friend allocator used by soap_new_witsml2__CementAdditive(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementAdditive * SOAP_FMAC2 soap_instantiate_witsml2__CementAdditive(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:419 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementingFluid (-77)
/* complex XSD type 'witsml2:CementingFluid': */
class SOAP_CMAC witsml2__CementingFluid {
      public:
        /// Optional element 'witsml2:ETimTransitions' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimTransitions;
        /// Optional element 'witsml2:ETimZeroGel' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimZeroGel;
        /// Optional element 'witsml2:TypeFluid' of XSD type 'eml22:String64'
        std::string *TypeFluid;
        /// Optional element 'witsml2:FluidIndex' of XSD type 'xsd:unsignedLong'
        ULONG64 *FluidIndex;
        /// Optional element 'witsml2:DescFluid' of XSD type 'eml22:String64'
        std::string *DescFluid;
        /// Optional element 'witsml2:Purpose' of XSD type 'eml22:String64'
        std::string *Purpose;
        /// Optional element 'witsml2:ClassSlurryDryBlend' of XSD type 'eml22:String64'
        std::string *ClassSlurryDryBlend;
        /// Optional element 'witsml2:SlurryPlacementInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *SlurryPlacementInterval;
        /// Optional element 'witsml2:SourceWater' of XSD type 'eml22:String64'
        std::string *SourceWater;
        /// Optional element 'witsml2:VolWater' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolWater;
        /// Optional element 'witsml2:VolCement' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolCement;
        /// Optional element 'witsml2:RatioMixWater' of XSD type 'eml22:VolumePerMassMeasure'
        eml22__VolumePerMassMeasure *RatioMixWater;
        /// Optional element 'witsml2:VolFluid' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolFluid;
        /// Optional element 'witsml2:ExcessPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *ExcessPc;
        /// Optional element 'witsml2:VolYield' of XSD type 'eml22:VolumePerMassMeasure'
        eml22__VolumePerMassMeasure *VolYield;
        /// Optional element 'witsml2:Density' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:SolidVolumeFraction' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *SolidVolumeFraction;
        /// Optional element 'witsml2:VolPumped' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolPumped;
        /// Optional element 'witsml2:VolOther' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolOther;
        /// Optional element 'witsml2:FluidRheologicalModel' of XSD type 'eml22:String64'
        std::string *FluidRheologicalModel;
        /// Optional element 'witsml2:Viscosity' of XSD type 'eml22:DynamicViscosityMeasure'
        eml22__DynamicViscosityMeasure *Viscosity;
        /// Optional element 'witsml2:Yp' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Yp;
        /// Optional element 'witsml2:N' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *N;
        /// Optional element 'witsml2:K' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *K;
        /// Optional element 'witsml2:Gel10SecReading' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Gel10SecReading;
        /// Optional element 'witsml2:Gel10SecStrength' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel10SecStrength;
        /// Optional element 'witsml2:Gel1MinReading' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Gel1MinReading;
        /// Optional element 'witsml2:Gel1MinStrength' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel1MinStrength;
        /// Optional element 'witsml2:Gel10MinReading' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Gel10MinReading;
        /// Optional element 'witsml2:Gel10MinStrength' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Gel10MinStrength;
        /// Optional element 'witsml2:TypeBaseFluid' of XSD type 'eml22:String64'
        std::string *TypeBaseFluid;
        /// Optional element 'witsml2:DensBaseFluid' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensBaseFluid;
        /// Optional element 'witsml2:DryBlendName' of XSD type 'eml22:String64'
        std::string *DryBlendName;
        /// Optional element 'witsml2:DryBlendDescription' of XSD type 'eml22:String64'
        std::string *DryBlendDescription;
        /// Optional element 'witsml2:MassDryBlend' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *MassDryBlend;
        /// Optional element 'witsml2:DensDryBlend' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensDryBlend;
        /// Optional element 'witsml2:MassSackDryBlend' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *MassSackDryBlend;
        /// Optional element 'witsml2:FoamUsed' of XSD type 'xsd:boolean'
        bool *FoamUsed;
        /// Optional element 'witsml2:TypeGasFoam' of XSD type 'eml22:String64'
        std::string *TypeGasFoam;
        /// Optional element 'witsml2:VolGasFoam' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolGasFoam;
        /// Optional element 'witsml2:RatioConstGasMethodAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *RatioConstGasMethodAv;
        /// Optional element 'witsml2:DensConstGasMethod' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensConstGasMethod;
        /// Optional element 'witsml2:RatioConstGasMethodStart' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *RatioConstGasMethodStart;
        /// Optional element 'witsml2:RatioConstGasMethodEnd' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *RatioConstGasMethodEnd;
        /// Optional element 'witsml2:DensConstGasFoam' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensConstGasFoam;
        /// Optional element 'witsml2:ETimThickening' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimThickening;
        /// Optional element 'witsml2:TempThickening' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempThickening;
        /// Optional element 'witsml2:PresTestThickening' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresTestThickening;
        /// Optional element 'witsml2:ConsTestThickening' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *ConsTestThickening;
        /// Optional element 'witsml2:PcFreeWater' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PcFreeWater;
        /// Optional element 'witsml2:TempFreeWater' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempFreeWater;
        /// Optional element 'witsml2:VolTestFluidLoss' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolTestFluidLoss;
        /// Optional element 'witsml2:TempFluidLoss' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempFluidLoss;
        /// Optional element 'witsml2:PresTestFluidLoss' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresTestFluidLoss;
        /// Optional element 'witsml2:TimeFluidLoss' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *TimeFluidLoss;
        /// Optional element 'witsml2:VolAPIFluidLoss' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolAPIFluidLoss;
        /// Optional element 'witsml2:ETimComprStren1' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimComprStren1;
        /// Optional element 'witsml2:ETimComprStren2' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimComprStren2;
        /// Optional element 'witsml2:PresComprStren1' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresComprStren1;
        /// Optional element 'witsml2:PresComprStren2' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresComprStren2;
        /// Optional element 'witsml2:TempComprStren1' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempComprStren1;
        /// Optional element 'witsml2:TempComprStren2' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempComprStren2;
        /// Optional element 'witsml2:DensAtPres' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensAtPres;
        /// Optional element 'witsml2:VolReserved' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolReserved;
        /// Optional element 'witsml2:VolTotSlurry' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolTotSlurry;
        /// Optional element 'witsml2:CementAdditive' of XSD type 'witsml2:CementAdditive'
        std::vector<witsml2__CementAdditive *> CementAdditive;
        /// Optional element 'witsml2:Rheometer' of XSD type 'witsml2:Rheometer'
        std::vector<witsml2__Rheometer *> Rheometer;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementingFluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementingFluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementingFluid, default initialized and not managed by a soap context
        virtual witsml2__CementingFluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementingFluid); }
      public:
        /// Constructor with initializations
        witsml2__CementingFluid() : ETimTransitions(), ETimZeroGel(), TypeFluid(), FluidIndex(), DescFluid(), Purpose(), ClassSlurryDryBlend(), SlurryPlacementInterval(), SourceWater(), VolWater(), VolCement(), RatioMixWater(), VolFluid(), ExcessPc(), VolYield(), Density(), SolidVolumeFraction(), VolPumped(), VolOther(), FluidRheologicalModel(), Viscosity(), Yp(), N(), K(), Gel10SecReading(), Gel10SecStrength(), Gel1MinReading(), Gel1MinStrength(), Gel10MinReading(), Gel10MinStrength(), TypeBaseFluid(), DensBaseFluid(), DryBlendName(), DryBlendDescription(), MassDryBlend(), DensDryBlend(), MassSackDryBlend(), FoamUsed(), TypeGasFoam(), VolGasFoam(), RatioConstGasMethodAv(), DensConstGasMethod(), RatioConstGasMethodStart(), RatioConstGasMethodEnd(), DensConstGasFoam(), ETimThickening(), TempThickening(), PresTestThickening(), ConsTestThickening(), PcFreeWater(), TempFreeWater(), VolTestFluidLoss(), TempFluidLoss(), PresTestFluidLoss(), TimeFluidLoss(), VolAPIFluidLoss(), ETimComprStren1(), ETimComprStren2(), PresComprStren1(), PresComprStren2(), TempComprStren1(), TempComprStren2(), DensAtPres(), VolReserved(), VolTotSlurry(), CementAdditive(), Rheometer(), uid(), soap() { }
        virtual ~witsml2__CementingFluid() { }
        /// Friend allocator used by soap_new_witsml2__CementingFluid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementingFluid * SOAP_FMAC2 soap_instantiate_witsml2__CementingFluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:434 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementPumpScheduleStep (-82)
/* complex XSD type 'witsml2:CementPumpScheduleStep': */
class SOAP_CMAC witsml2__CementPumpScheduleStep {
      public:
        /// Required element 'witsml2:FluidReferenceId' of XSD type 'eml22:UuidString'
        std::string FluidReferenceId;
        /// Optional element 'witsml2:RatioFluidExcess' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *RatioFluidExcess;
        /// Optional element 'witsml2:ETimPump' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimPump;
        /// Optional element 'witsml2:RatePump' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *RatePump;
        /// Optional element 'witsml2:VolPump' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolPump;
        /// Optional element 'witsml2:StrokePump' of XSD type 'xsd:int'
        int *StrokePump;
        /// Optional element 'witsml2:PresBack' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBack;
        /// Optional element 'witsml2:ETimShutdown' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimShutdown;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementPumpScheduleStep
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementPumpScheduleStep; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementPumpScheduleStep, default initialized and not managed by a soap context
        virtual witsml2__CementPumpScheduleStep *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementPumpScheduleStep); }
      public:
        /// Constructor with initializations
        witsml2__CementPumpScheduleStep() : FluidReferenceId(), RatioFluidExcess(), ETimPump(), RatePump(), VolPump(), StrokePump(), PresBack(), ETimShutdown(), Comments(), uid(), soap() { }
        virtual ~witsml2__CementPumpScheduleStep() { }
        /// Friend allocator used by soap_new_witsml2__CementPumpScheduleStep(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementPumpScheduleStep * SOAP_FMAC2 soap_instantiate_witsml2__CementPumpScheduleStep(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:443 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FluidLocation (-85)
/* complex XSD type 'witsml2:FluidLocation': */
class SOAP_CMAC witsml2__FluidLocation {
      public:
        /// Required element 'witsml2:FluidReferenceId' of XSD type 'eml22:UuidString'
        std::string FluidReferenceId;
        /// Required element 'witsml2:MDFluidBase' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MDFluidBase;
        /// Required element 'witsml2:MDFluidTop' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MDFluidTop;
        /// Required element 'witsml2:Volume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Volume;
        /// Required element 'witsml2:LocationType' of XSD type 'witsml2:WellboreFluidLocation'
        enum witsml2__WellboreFluidLocation LocationType;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__FluidLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__FluidLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__FluidLocation, default initialized and not managed by a soap context
        virtual witsml2__FluidLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__FluidLocation); }
      public:
        /// Constructor with initializations
        witsml2__FluidLocation() : FluidReferenceId(), MDFluidBase(), MDFluidTop(), Volume(), LocationType(), uid(), soap() { }
        virtual ~witsml2__FluidLocation() { }
        /// Friend allocator used by soap_new_witsml2__FluidLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__FluidLocation * SOAP_FMAC2 soap_instantiate_witsml2__FluidLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:449 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometrySection (-87)
/* complex XSD type 'witsml2:WellboreGeometrySection': */
class SOAP_CMAC witsml2__WellboreGeometrySection {
      public:
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'witsml2:TypeHoleCasing' of XSD type 'witsml2:HoleCasingType'
        enum witsml2__HoleCasingType *TypeHoleCasing;
        /// Optional element 'witsml2:SectionMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *SectionMdInterval;
        /// Optional element 'witsml2:SectionTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *SectionTvdInterval;
        /// Optional element 'witsml2:IdSection' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdSection;
        /// Optional element 'witsml2:OdSection' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdSection;
        /// Optional element 'witsml2:WtPerLen' of XSD type 'eml22:MassPerLengthMeasure'
        eml22__MassPerLengthMeasure *WtPerLen;
        /// Optional element 'witsml2:Grade' of XSD type 'eml22:String64'
        std::string *Grade;
        /// Optional element 'witsml2:CurveConductor' of XSD type 'xsd:boolean'
        bool *CurveConductor;
        /// Optional element 'witsml2:DiaDrift' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaDrift;
        /// Optional element 'witsml2:FactFric' of XSD type 'xsd:double'
        double *FactFric;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:BhaRun' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> BhaRun;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometrySection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometrySection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreGeometrySection, default initialized and not managed by a soap context
        virtual witsml2__WellboreGeometrySection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreGeometrySection); }
      public:
        /// Constructor with initializations
        witsml2__WellboreGeometrySection() : Citation(), TypeHoleCasing(), SectionMdInterval(), SectionTvdInterval(), IdSection(), OdSection(), WtPerLen(), Grade(), CurveConductor(), DiaDrift(), FactFric(), ExtensionNameValue(), BhaRun(), uid(), soap() { }
        virtual ~witsml2__WellboreGeometrySection() { }
        /// Friend allocator used by soap_new_witsml2__WellboreGeometrySection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreGeometrySection * SOAP_FMAC2 soap_instantiate_witsml2__WellboreGeometrySection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:452 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractIndexValue (-88)
/* Type witsml2__AbstractIndexValue is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractIndexValue': */
class SOAP_CMAC witsml2__AbstractIndexValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractIndexValue, default initialized and not managed by a soap context
        virtual witsml2__AbstractIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractIndexValue); }
      public:
        /// Constructor with initializations
        witsml2__AbstractIndexValue() : soap() { }
        virtual ~witsml2__AbstractIndexValue() { }
        /// Friend allocator used by soap_new_witsml2__AbstractIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractIndexValue * SOAP_FMAC2 soap_instantiate_witsml2__AbstractIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:455 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractLogDataContext (-89)
/* Type witsml2__AbstractLogDataContext is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractLogDataContext': */
class SOAP_CMAC witsml2__AbstractLogDataContext {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractLogDataContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractLogDataContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractLogDataContext, default initialized and not managed by a soap context
        virtual witsml2__AbstractLogDataContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractLogDataContext); }
      public:
        /// Constructor with initializations
        witsml2__AbstractLogDataContext() : soap() { }
        virtual ~witsml2__AbstractLogDataContext() { }
        /// Friend allocator used by soap_new_witsml2__AbstractLogDataContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractLogDataContext * SOAP_FMAC2 soap_instantiate_witsml2__AbstractLogDataContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:461 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelData (-91)
/* complex XSD type 'witsml2:ChannelData': */
class SOAP_CMAC witsml2__ChannelData {
      public:
        /// Optional element 'witsml2:Data' of XSD type 'xsd:string'
        std::string *Data;
        /// Optional element 'witsml2:FileUri' of XSD type 'xsd:anyURI'
        std::string *FileUri;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelData, default initialized and not managed by a soap context
        virtual witsml2__ChannelData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelData); }
      public:
        /// Constructor with initializations
        witsml2__ChannelData() : Data(), FileUri(), soap() { }
        virtual ~witsml2__ChannelData() { }
        /// Friend allocator used by soap_new_witsml2__ChannelData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelData * SOAP_FMAC2 soap_instantiate_witsml2__ChannelData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:464 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndex (-92)
/* complex XSD type 'witsml2:ChannelIndex': */
class SOAP_CMAC witsml2__ChannelIndex {
      public:
        /// Required element 'witsml2:IndexType' of XSD type 'witsml2:ChannelIndexType'
        enum witsml2__ChannelIndexType IndexType;
        /// Required element 'witsml2:Uom' of XSD type 'eml22:UnitOfMeasureExt'
        std::string Uom;
        /// Required element 'witsml2:Direction' of XSD type 'witsml2:IndexDirection'
        enum witsml2__IndexDirection Direction;
        /// Required element 'witsml2:Mnemonic' of XSD type 'eml22:String64'
        std::string Mnemonic;
        /// Optional element 'witsml2:DatumReference' of XSD type 'eml22:String64'
        std::string *DatumReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelIndex, default initialized and not managed by a soap context
        virtual witsml2__ChannelIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelIndex); }
      public:
        /// Constructor with initializations
        witsml2__ChannelIndex() : IndexType(), Uom(), Direction(), Mnemonic(), DatumReference(), soap() { }
        virtual ~witsml2__ChannelIndex() { }
        /// Friend allocator used by soap_new_witsml2__ChannelIndex(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelIndex * SOAP_FMAC2 soap_instantiate_witsml2__ChannelIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:482 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogChannelAxis (-98)
/* complex XSD type 'witsml2:LogChannelAxis': */
class SOAP_CMAC witsml2__LogChannelAxis {
      public:
        /// Required element 'witsml2:AxisStart' of XSD type 'xsd:double'
        double AxisStart;
        /// Required element 'witsml2:AxisSpacing' of XSD type 'xsd:double'
        double AxisSpacing;
        /// Required element 'witsml2:AxisCount' of XSD type 'xsd:unsignedLong'
        ULONG64 AxisCount;
        /// Optional element 'witsml2:AxisName' of XSD type 'eml22:String64'
        std::string *AxisName;
        /// Required element 'witsml2:AxisPropertyKind' of XSD type 'eml22:String64'
        std::string AxisPropertyKind;
        /// Required element 'witsml2:AxisUom' of XSD type 'eml22:UnitOfMeasureExt'
        std::string AxisUom;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__LogChannelAxis
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__LogChannelAxis; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LogChannelAxis, default initialized and not managed by a soap context
        virtual witsml2__LogChannelAxis *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LogChannelAxis); }
      public:
        /// Constructor with initializations
        witsml2__LogChannelAxis() : AxisStart(), AxisSpacing(), AxisCount(), AxisName(), AxisPropertyKind(), AxisUom(), uid(), soap() { }
        virtual ~witsml2__LogChannelAxis() { }
        /// Friend allocator used by soap_new_witsml2__LogChannelAxis(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LogChannelAxis * SOAP_FMAC2 soap_instantiate_witsml2__LogChannelAxis(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:491 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PointMetadata (-101)
/* complex XSD type 'witsml2:PointMetadata': */
class SOAP_CMAC witsml2__PointMetadata {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Required element 'witsml2:EtpDataType' of XSD type 'witsml2:EtpDataType'
        enum witsml2__EtpDataType EtpDataType;
        /// Required element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PointMetadata
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PointMetadata; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PointMetadata, default initialized and not managed by a soap context
        virtual witsml2__PointMetadata *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PointMetadata); }
      public:
        /// Constructor with initializations
        witsml2__PointMetadata() : Name(), EtpDataType(), Description(), soap() { }
        virtual ~witsml2__PointMetadata() { }
        /// Friend allocator used by soap_new_witsml2__PointMetadata(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PointMetadata * SOAP_FMAC2 soap_instantiate_witsml2__PointMetadata(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:497 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegCalibrationPoint (-103)
/* complex XSD type 'witsml2:DepthRegCalibrationPoint': */
class SOAP_CMAC witsml2__DepthRegCalibrationPoint {
      public:
        /// Required element 'witsml2:Index' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *Index;
        /// Required element 'witsml2:Track' of XSD type 'eml22:String64'
        std::string Track;
        /// Required element 'witsml2:Role' of XSD type 'witsml2:CalibrationPointRole'
        enum witsml2__CalibrationPointRole Role;
        /// Optional element 'witsml2:CurveName' of XSD type 'eml22:String64'
        std::string *CurveName;
        /// Optional element 'witsml2:Fraction' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *Fraction;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::vector<std::string> Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Parameter' of XSD type 'witsml2:DepthRegParameter'
        std::vector<witsml2__DepthRegParameter *> Parameter;
        /// Required element 'witsml2:Point' of XSD type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Point;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegCalibrationPoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegCalibrationPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegCalibrationPoint, default initialized and not managed by a soap context
        virtual witsml2__DepthRegCalibrationPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegCalibrationPoint); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegCalibrationPoint() : Index(), Track(), Role(), CurveName(), Fraction(), Comment(), ExtensionNameValue(), Parameter(), Point(), uid(), soap() { }
        virtual ~witsml2__DepthRegCalibrationPoint() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegCalibrationPoint(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegCalibrationPoint * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegCalibrationPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:503 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogRect (-105)
/* complex XSD type 'witsml2:DepthRegLogRect': */
class SOAP_CMAC witsml2__DepthRegLogRect {
      public:
        /// Optional element 'witsml2:Type' of XSD type 'witsml2:LogRectangleType'
        enum witsml2__LogRectangleType *Type;
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Position' of XSD type 'witsml2:DepthRegRectangle'
        witsml2__DepthRegRectangle *Position;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogRect
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogRect; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegLogRect, default initialized and not managed by a soap context
        virtual witsml2__DepthRegLogRect *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegLogRect); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegLogRect() : Type(), Name(), ExtensionNameValue(), Position(), uid(), soap() { }
        virtual ~witsml2__DepthRegLogRect() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegLogRect(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegLogRect * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegLogRect(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:506 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogSection (-106)
/* complex XSD type 'witsml2:DepthRegLogSection': */
class SOAP_CMAC witsml2__DepthRegLogSection {
      public:
        /// Required element 'witsml2:LogSectionSequenceNumber' of XSD type 'xsd:unsignedLong'
        ULONG64 LogSectionSequenceNumber;
        /// Optional element 'witsml2:LogSectionType' of XSD type 'witsml2:LogSectionType'
        enum witsml2__LogSectionType *LogSectionType;
        /// Optional element 'witsml2:LogSectionName' of XSD type 'eml22:String64'
        std::string *LogSectionName;
        /// Optional element 'witsml2:LogMatrix' of XSD type 'eml22:String64'
        std::string *LogMatrix;
        /// Optional element 'witsml2:ScaleNumerator' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ScaleNumerator;
        /// Optional element 'witsml2:ScaleDenominator' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *ScaleDenominator;
        /// Required element 'witsml2:IndexType' of XSD type 'witsml2:LogIndexType'
        enum witsml2__LogIndexType IndexType;
        /// Required element 'witsml2:IndexUom' of XSD type 'eml22:String64'
        std::string IndexUom;
        /// Optional element 'witsml2:IndexReference' of XSD type 'eml22:WellboreDatumReference'
        enum eml22__WellboreDatumReference *IndexReference;
        /// Optional element 'witsml2:Log' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Log;
        /// Required element 'witsml2:MinInterval' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *MinInterval;
        /// Required element 'witsml2:MaxInterval' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *MaxInterval;
        /// Optional element 'witsml2:VerticalLabel' of XSD type 'eml22:String2000'
        std::string *VerticalLabel;
        /// Optional element 'witsml2:VerticalRatio' of XSD type 'eml22:String2000'
        std::string *VerticalRatio;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:UpperCurveScaleRect' of XSD type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> UpperCurveScaleRect;
        /// Optional element 'witsml2:CalibrationPoint' of XSD type 'witsml2:DepthRegCalibrationPoint'
        std::vector<witsml2__DepthRegCalibrationPoint *> CalibrationPoint;
        /// Optional element 'witsml2:WhiteSpace' of XSD type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> WhiteSpace;
        /// Optional element 'witsml2:LowerCurveScaleRect' of XSD type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> LowerCurveScaleRect;
        /// Optional element 'witsml2:LogSectionRect' of XSD type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> LogSectionRect;
        /// Optional element 'witsml2:Parameter' of XSD type 'witsml2:DepthRegParameter'
        std::vector<witsml2__DepthRegParameter *> Parameter;
        /// Optional element 'witsml2:Track' of XSD type 'witsml2:DepthRegTrack'
        std::vector<witsml2__DepthRegTrack *> Track;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogSection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogSection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegLogSection, default initialized and not managed by a soap context
        virtual witsml2__DepthRegLogSection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegLogSection); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegLogSection() : LogSectionSequenceNumber(), LogSectionType(), LogSectionName(), LogMatrix(), ScaleNumerator(), ScaleDenominator(), IndexType(), IndexUom(), IndexReference(), Log(), MinInterval(), MaxInterval(), VerticalLabel(), VerticalRatio(), Comment(), ExtensionNameValue(), UpperCurveScaleRect(), CalibrationPoint(), WhiteSpace(), LowerCurveScaleRect(), LogSectionRect(), Parameter(), Track(), uid(), soap() { }
        virtual ~witsml2__DepthRegLogSection() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegLogSection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegLogSection * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegLogSection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:509 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegParameter (-107)
/* complex XSD type 'witsml2:DepthRegParameter': */
class SOAP_CMAC witsml2__DepthRegParameter {
      public:
        /// Required element 'witsml2:Mnemonic' of XSD type 'eml22:String64'
        std::string Mnemonic;
        /// Optional element 'witsml2:Dictionary' of XSD type 'eml22:String64'
        std::string *Dictionary;
        /// Optional element 'witsml2:TopIndex' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *TopIndex;
        /// Optional element 'witsml2:BottomIndex' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *BottomIndex;
        /// Required element 'witsml2:Value' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *Value;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegParameter, default initialized and not managed by a soap context
        virtual witsml2__DepthRegParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegParameter); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegParameter() : Mnemonic(), Dictionary(), TopIndex(), BottomIndex(), Value(), Description(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__DepthRegParameter() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegParameter * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:512 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegPoint
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegPoint (-108)
/* complex XSD type 'witsml2:DepthRegPoint': */
class SOAP_CMAC witsml2__DepthRegPoint {
      public:
        /// Required element 'witsml2:X' of XSD type 'xsd:unsignedLong'
        ULONG64 X;
        /// Required element 'witsml2:Y' of XSD type 'xsd:unsignedLong'
        ULONG64 Y;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegPoint
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegPoint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegPoint, default initialized and not managed by a soap context
        virtual witsml2__DepthRegPoint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegPoint); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegPoint() : X(), Y(), soap() { }
        virtual ~witsml2__DepthRegPoint() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegPoint(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegPoint * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegPoint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:515 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegRectangle (-109)
/* complex XSD type 'witsml2:DepthRegRectangle': */
class SOAP_CMAC witsml2__DepthRegRectangle {
      public:
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Ul' of XSD type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Ul;
        /// Optional element 'witsml2:Ur' of XSD type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Ur;
        /// Optional element 'witsml2:Ll' of XSD type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Ll;
        /// Optional element 'witsml2:Lr' of XSD type 'witsml2:DepthRegPoint'
        witsml2__DepthRegPoint *Lr;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegRectangle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegRectangle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegRectangle, default initialized and not managed by a soap context
        virtual witsml2__DepthRegRectangle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegRectangle); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegRectangle() : ExtensionNameValue(), Ul(), Ur(), Ll(), Lr(), uid(), soap() { }
        virtual ~witsml2__DepthRegRectangle() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegRectangle(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegRectangle * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegRectangle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:518 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrack (-110)
/* complex XSD type 'witsml2:DepthRegTrack': */
class SOAP_CMAC witsml2__DepthRegTrack {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Required element 'witsml2:Type' of XSD type 'witsml2:LogTrackType'
        enum witsml2__LogTrackType Type;
        /// Required element 'witsml2:LeftEdge' of XSD type 'xsd:unsignedLong'
        ULONG64 LeftEdge;
        /// Required element 'witsml2:RightEdge' of XSD type 'xsd:unsignedLong'
        ULONG64 RightEdge;
        /// Optional element 'witsml2:TrackCurveScaleRect' of XSD type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> TrackCurveScaleRect;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:AssociatedCurve' of XSD type 'witsml2:DepthRegTrackCurve'
        std::vector<witsml2__DepthRegTrackCurve *> AssociatedCurve;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrack
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegTrack, default initialized and not managed by a soap context
        virtual witsml2__DepthRegTrack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegTrack); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegTrack() : Name(), Type(), LeftEdge(), RightEdge(), TrackCurveScaleRect(), ExtensionNameValue(), AssociatedCurve(), uid(), soap() { }
        virtual ~witsml2__DepthRegTrack() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegTrack(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegTrack * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegTrack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:521 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrackCurve (-111)
/* complex XSD type 'witsml2:DepthRegTrackCurve': */
class SOAP_CMAC witsml2__DepthRegTrackCurve {
      public:
        /// Required element 'witsml2:CurveInfo' of XSD type 'eml22:String64'
        std::string CurveInfo;
        /// Required element 'witsml2:LineStyle' of XSD type 'witsml2:LineStyle'
        enum witsml2__LineStyle LineStyle;
        /// Required element 'witsml2:LineWeight' of XSD type 'eml22:String64'
        std::string LineWeight;
        /// Required element 'witsml2:LineColor' of XSD type 'eml22:String64'
        std::string LineColor;
        /// Required element 'witsml2:CurveScaleType' of XSD type 'witsml2:ScaleType'
        enum witsml2__ScaleType CurveScaleType;
        /// Required element 'witsml2:CurveUnit' of XSD type 'eml22:TypeEnum'
        std::string CurveUnit;
        /// Required element 'witsml2:CurveLeftScaleValue' of XSD type 'xsd:double'
        double CurveLeftScaleValue;
        /// Required element 'witsml2:CurveRightScaleValue' of XSD type 'xsd:double'
        double CurveRightScaleValue;
        /// Required element 'witsml2:CurveBackupScaleType' of XSD type 'witsml2:BackupScaleType'
        enum witsml2__BackupScaleType CurveBackupScaleType;
        /// Optional element 'witsml2:CurveScaleRect' of XSD type 'witsml2:DepthRegRectangle'
        std::vector<witsml2__DepthRegRectangle *> CurveScaleRect;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrackCurve
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrackCurve; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegTrackCurve, default initialized and not managed by a soap context
        virtual witsml2__DepthRegTrackCurve *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegTrackCurve); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegTrackCurve() : CurveInfo(), LineStyle(), LineWeight(), LineColor(), CurveScaleType(), CurveUnit(), CurveLeftScaleValue(), CurveRightScaleValue(), CurveBackupScaleType(), CurveScaleRect(), Description(), uid(), soap() { }
        virtual ~witsml2__DepthRegTrackCurve() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegTrackCurve(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegTrackCurve * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegTrackCurve(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:524 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractEventExtension (-112)
/* Type witsml2__AbstractEventExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractEventExtension': */
class SOAP_CMAC witsml2__AbstractEventExtension {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractEventExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractEventExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractEventExtension, default initialized and not managed by a soap context
        virtual witsml2__AbstractEventExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractEventExtension); }
      public:
        /// Constructor with initializations
        witsml2__AbstractEventExtension() : soap() { }
        virtual ~witsml2__AbstractEventExtension() { }
        /// Friend allocator used by soap_new_witsml2__AbstractEventExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractEventExtension * SOAP_FMAC2 soap_instantiate_witsml2__AbstractEventExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:533 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringReference (-115)
/* complex XSD type 'witsml2:BoreholeStringReference': */
class SOAP_CMAC witsml2__BoreholeStringReference {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> StringEquipmentReferenceId;
        /// required attribute 'boreholeStringReferenceId' of XSD type 'eml22:String64'
        std::string boreholeStringReferenceId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BoreholeStringReference, default initialized and not managed by a soap context
        virtual witsml2__BoreholeStringReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BoreholeStringReference); }
      public:
        /// Constructor with initializations
        witsml2__BoreholeStringReference() : StringEquipmentReferenceId(), boreholeStringReferenceId(), soap() { }
        virtual ~witsml2__BoreholeStringReference() { }
        /// Friend allocator used by soap_new_witsml2__BoreholeStringReference(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BoreholeStringReference * SOAP_FMAC2 soap_instantiate_witsml2__BoreholeStringReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:545 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponentReference
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponentReference (-119)
/* complex XSD type 'witsml2:DownholeComponentReference': */
class SOAP_CMAC witsml2__DownholeComponentReference {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> StringEquipmentReferenceId;
        /// Optional element 'witsml2:PerforationSetReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> PerforationSetReferenceId;
        /// Optional element 'witsml2:BoreholeStringReference' of XSD type 'witsml2:BoreholeStringReference'
        std::vector<witsml2__BoreholeStringReference *> BoreholeStringReference;
        /// Optional element 'witsml2:DownholeStringsReference' of XSD type 'witsml2:DownholeStringReference'
        std::vector<witsml2__DownholeStringReference *> DownholeStringsReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponentReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponentReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeComponentReference, default initialized and not managed by a soap context
        virtual witsml2__DownholeComponentReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeComponentReference); }
      public:
        /// Constructor with initializations
        witsml2__DownholeComponentReference() : StringEquipmentReferenceId(), PerforationSetReferenceId(), BoreholeStringReference(), DownholeStringsReference(), soap() { }
        virtual ~witsml2__DownholeComponentReference() { }
        /// Friend allocator used by soap_new_witsml2__DownholeComponentReference(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeComponentReference * SOAP_FMAC2 soap_instantiate_witsml2__DownholeComponentReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:551 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringReference (-121)
/* complex XSD type 'witsml2:DownholeStringReference': */
class SOAP_CMAC witsml2__DownholeStringReference {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> StringEquipmentReferenceId;
        /// required attribute 'downholeStringReferenceId' of XSD type 'eml22:String64'
        std::string downholeStringReferenceId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeStringReference, default initialized and not managed by a soap context
        virtual witsml2__DownholeStringReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeStringReference); }
      public:
        /// Constructor with initializations
        witsml2__DownholeStringReference() : StringEquipmentReferenceId(), downholeStringReferenceId(), soap() { }
        virtual ~witsml2__DownholeStringReference() { }
        /// Friend allocator used by soap_new_witsml2__DownholeStringReference(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeStringReference * SOAP_FMAC2 soap_instantiate_witsml2__DownholeStringReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:566 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MemberObject (-126)
/* complex XSD type 'witsml2:MemberObject': */
class SOAP_CMAC witsml2__MemberObject {
      public:
        /// Optional element 'witsml2:IndexType' of XSD type 'witsml2:LogIndexType'
        enum witsml2__LogIndexType *IndexType;
        /// Optional element 'witsml2:RangeMin' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *RangeMin;
        /// Optional element 'witsml2:RangeMax' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *RangeMax;
        /// Optional element 'witsml2:RangeDateTimeMin' of XSD type 'eml22:TimeStamp'
        struct tm *RangeDateTimeMin;
        /// Optional element 'witsml2:RangeDateTimeMax' of XSD type 'eml22:TimeStamp'
        struct tm *RangeDateTimeMax;
        /// Optional element 'witsml2:MnemonicList' of XSD type 'xsd:string'
        std::string *MnemonicList;
        /// Optional element 'witsml2:ReferenceDepth' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *ReferenceDepth;
        /// Optional element 'witsml2:ReferenceDateTime' of XSD type 'eml22:TimeStamp'
        struct tm *ReferenceDateTime;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Required element 'witsml2:Sequence3' of XSD type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *Sequence3;
        /// Required element 'witsml2:ObjectReference' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ObjectReference;
        /// Required element 'witsml2:Sequence1' of XSD type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *Sequence1;
        /// Required element 'witsml2:Sequence2' of XSD type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *Sequence2;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MemberObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MemberObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MemberObject, default initialized and not managed by a soap context
        virtual witsml2__MemberObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MemberObject); }
      public:
        /// Constructor with initializations
        witsml2__MemberObject() : IndexType(), RangeMin(), RangeMax(), RangeDateTimeMin(), RangeDateTimeMax(), MnemonicList(), ReferenceDepth(), ReferenceDateTime(), ExtensionNameValue(), Sequence3(), ObjectReference(), Sequence1(), Sequence2(), uid(), soap() { }
        virtual ~witsml2__MemberObject() { }
        /// Friend allocator used by soap_new_witsml2__MemberObject(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MemberObject * SOAP_FMAC2 soap_instantiate_witsml2__MemberObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:569 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Participant
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Participant (-127)
/* complex XSD type 'witsml2:Participant': */
class SOAP_CMAC witsml2__Participant {
      public:
        /// Optional element 'witsml2:ExtNameValues' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtNameValues;
        /// Optional element 'witsml2:Participant' of XSD type 'witsml2:MemberObject'
        std::vector<witsml2__MemberObject *> Participant;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Participant
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Participant; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Participant, default initialized and not managed by a soap context
        virtual witsml2__Participant *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Participant); }
      public:
        /// Constructor with initializations
        witsml2__Participant() : ExtNameValues(), Participant(), soap() { }
        virtual ~witsml2__Participant() { }
        /// Friend allocator used by soap_new_witsml2__Participant(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Participant * SOAP_FMAC2 soap_instantiate_witsml2__Participant(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:572 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Perforating (-128)
/* complex XSD type 'witsml2:Perforating': */
class SOAP_CMAC witsml2__Perforating {
      public:
        /// Optional element 'witsml2:StageNumber' of XSD type 'xsd:int'
        int *StageNumber;
        /// Optional element 'witsml2:BottomPackerSet' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *BottomPackerSet;
        /// Optional element 'witsml2:PerforationFluidType' of XSD type 'eml22:String64'
        std::string *PerforationFluidType;
        /// Optional element 'witsml2:HydrostaticPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *HydrostaticPressure;
        /// Optional element 'witsml2:SurfacePressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *SurfacePressure;
        /// Optional element 'witsml2:ReservoirPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *ReservoirPressure;
        /// Optional element 'witsml2:FluidDensity' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *FluidDensity;
        /// Optional element 'witsml2:FluidLevel' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *FluidLevel;
        /// Optional element 'witsml2:ConveyanceMethod' of XSD type 'witsml2:PerfConveyanceMethod'
        enum witsml2__PerfConveyanceMethod *ConveyanceMethod;
        /// Optional element 'witsml2:ShotsPlanned' of XSD type 'xsd:int'
        int *ShotsPlanned;
        /// Optional element 'witsml2:ShotsDensity' of XSD type 'eml22:ReciprocalLengthMeasure'
        eml22__ReciprocalLengthMeasure *ShotsDensity;
        /// Optional element 'witsml2:ShotsMisfired' of XSD type 'xsd:int'
        int *ShotsMisfired;
        /// Optional element 'witsml2:Orientation' of XSD type 'eml22:String64'
        std::string *Orientation;
        /// Optional element 'witsml2:OrientationMethod' of XSD type 'eml22:String64'
        std::string *OrientationMethod;
        /// Optional element 'witsml2:PerforationCompany' of XSD type 'eml22:String64'
        std::string *PerforationCompany;
        /// Optional element 'witsml2:CarrierManufacturer' of XSD type 'eml22:String64'
        std::string *CarrierManufacturer;
        /// Optional element 'witsml2:CarrierSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *CarrierSize;
        /// Optional element 'witsml2:CarrierDescription' of XSD type 'eml22:String2000'
        std::string *CarrierDescription;
        /// Optional element 'witsml2:ChargeManufacturer' of XSD type 'eml22:String64'
        std::string *ChargeManufacturer;
        /// Optional element 'witsml2:ChargeSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ChargeSize;
        /// Optional element 'witsml2:ChargeWeight' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *ChargeWeight;
        /// Optional element 'witsml2:ChargeType' of XSD type 'eml22:String64'
        std::string *ChargeType;
        /// Optional element 'witsml2:RefLog' of XSD type 'eml22:String64'
        std::string *RefLog;
        /// Optional element 'witsml2:GunCentralized' of XSD type 'eml22:String64'
        std::string *GunCentralized;
        /// Optional element 'witsml2:GunSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *GunSize;
        /// Optional element 'witsml2:GunDesciption' of XSD type 'eml22:String2000'
        std::string *GunDesciption;
        /// Optional element 'witsml2:GunLeftInHole' of XSD type 'xsd:boolean'
        bool *GunLeftInHole;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Perforating
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Perforating; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Perforating, default initialized and not managed by a soap context
        virtual witsml2__Perforating *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Perforating); }
      public:
        /// Constructor with initializations
        witsml2__Perforating() : StageNumber(), BottomPackerSet(), PerforationFluidType(), HydrostaticPressure(), SurfacePressure(), ReservoirPressure(), FluidDensity(), FluidLevel(), ConveyanceMethod(), ShotsPlanned(), ShotsDensity(), ShotsMisfired(), Orientation(), OrientationMethod(), PerforationCompany(), CarrierManufacturer(), CarrierSize(), CarrierDescription(), ChargeManufacturer(), ChargeSize(), ChargeWeight(), ChargeType(), RefLog(), GunCentralized(), GunSize(), GunDesciption(), GunLeftInHole(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Perforating() { }
        /// Friend allocator used by soap_new_witsml2__Perforating(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Perforating * SOAP_FMAC2 soap_instantiate_witsml2__Perforating(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:587 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractConnectionType (-133)
/* Type witsml2__AbstractConnectionType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractConnectionType': */
class SOAP_CMAC witsml2__AbstractConnectionType {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractConnectionType, default initialized and not managed by a soap context
        virtual witsml2__AbstractConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractConnectionType); }
      public:
        /// Constructor with initializations
        witsml2__AbstractConnectionType() : soap() { }
        virtual ~witsml2__AbstractConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__AbstractConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__AbstractConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:590 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Assembly
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Assembly (-134)
/* complex XSD type 'witsml2:Assembly': */
class SOAP_CMAC witsml2__Assembly {
      public:
        /// Optional element 'witsml2:Part' of XSD type 'witsml2:StringEquipment'
        std::vector<witsml2__StringEquipment *> Part;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Assembly
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Assembly; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Assembly, default initialized and not managed by a soap context
        virtual witsml2__Assembly *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Assembly); }
      public:
        /// Constructor with initializations
        witsml2__Assembly() : Part(), soap() { }
        virtual ~witsml2__Assembly() { }
        /// Friend allocator used by soap_new_witsml2__Assembly(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Assembly * SOAP_FMAC2 soap_instantiate_witsml2__Assembly(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:593 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Borehole (-135)
/* complex XSD type 'witsml2:Borehole': */
class SOAP_CMAC witsml2__Borehole {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:TypeBorehole' of XSD type 'witsml2:BoreholeType'
        enum witsml2__BoreholeType *TypeBorehole;
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:BoreholeDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *BoreholeDiameter;
        /// Optional element 'witsml2:DescriptionPermanent' of XSD type 'eml22:String2000'
        std::string *DescriptionPermanent;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:EquipmentEventHistory' of XSD type 'witsml2:EventInfo'
        witsml2__EventInfo *EquipmentEventHistory;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Borehole
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Borehole; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Borehole, default initialized and not managed by a soap context
        virtual witsml2__Borehole *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Borehole); }
      public:
        /// Constructor with initializations
        witsml2__Borehole() : Name(), TypeBorehole(), MdInterval(), TvdInterval(), BoreholeDiameter(), DescriptionPermanent(), ExtensionNameValue(), EquipmentEventHistory(), uid(), soap() { }
        virtual ~witsml2__Borehole() { }
        /// Friend allocator used by soap_new_witsml2__Borehole(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Borehole * SOAP_FMAC2 soap_instantiate_witsml2__Borehole(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:596 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeString (-136)
/* complex XSD type 'witsml2:BoreholeString': */
class SOAP_CMAC witsml2__BoreholeString {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:Accessories' of XSD type 'witsml2:StringAccessory'
        witsml2__StringAccessory *Accessories;
        /// Optional element 'witsml2:Borehole' of XSD type 'witsml2:Borehole'
        std::vector<witsml2__Borehole *> Borehole;
        /// Optional element 'witsml2:GeologyFeature' of XSD type 'witsml2:GeologyFeature'
        std::vector<witsml2__GeologyFeature *> GeologyFeature;
        /// Required element 'witsml2:ReferenceWellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ReferenceWellbore;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BoreholeString, default initialized and not managed by a soap context
        virtual witsml2__BoreholeString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BoreholeString); }
      public:
        /// Constructor with initializations
        witsml2__BoreholeString() : Name(), Accessories(), Borehole(), GeologyFeature(), ReferenceWellbore(), uid(), soap() { }
        virtual ~witsml2__BoreholeString() { }
        /// Friend allocator used by soap_new_witsml2__BoreholeString(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BoreholeString * SOAP_FMAC2 soap_instantiate_witsml2__BoreholeString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:599 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringSet (-137)
/* complex XSD type 'witsml2:BoreholeStringSet': */
class SOAP_CMAC witsml2__BoreholeStringSet {
      public:
        /// Required element 'witsml2:BoreholeString' of XSD type 'witsml2:BoreholeString'
        std::vector<witsml2__BoreholeString *> BoreholeString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BoreholeStringSet, default initialized and not managed by a soap context
        virtual witsml2__BoreholeStringSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BoreholeStringSet); }
      public:
        /// Constructor with initializations
        witsml2__BoreholeStringSet() : BoreholeString(), soap() { }
        virtual ~witsml2__BoreholeStringSet() { }
        /// Friend allocator used by soap_new_witsml2__BoreholeStringSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BoreholeStringSet * SOAP_FMAC2 soap_instantiate_witsml2__BoreholeStringSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:608 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeString (-140)
/* Type witsml2__DownholeString is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DownholeString': */
class SOAP_CMAC witsml2__DownholeString {
      public:
        /// Required element 'witsml2:StringType' of XSD type 'witsml2:DownholeStringType'
        enum witsml2__DownholeStringType StringType;
        /// Optional element 'witsml2:SubStringType' of XSD type 'witsml2:SubStringType'
        enum witsml2__SubStringType *SubStringType;
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:StringInstallDate' of XSD type 'eml22:TimeStamp'
        struct tm *StringInstallDate;
        /// Optional element 'witsml2:ParentStringsName' of XSD type 'eml22:String64'
        std::string *ParentStringsName;
        /// Optional element 'witsml2:StringMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *StringMdInterval;
        /// Optional element 'witsml2:AxisOffset' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *AxisOffset;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Accessories' of XSD type 'witsml2:StringAccessory'
        witsml2__StringAccessory *Accessories;
        /// Optional element 'witsml2:StringEquipmentSet' of XSD type 'witsml2:StringEquipmentSet'
        witsml2__StringEquipmentSet *StringEquipmentSet;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Required element 'witsml2:ReferenceWellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ReferenceWellbore;
        /// Optional element 'witsml2:ParentString' of XSD type 'witsml2:DownholeString'
        witsml2__DownholeString *ParentString;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeString, default initialized and not managed by a soap context
        virtual witsml2__DownholeString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeString); }
      public:
        /// Constructor with initializations
        witsml2__DownholeString() : StringType(), SubStringType(), Name(), StringInstallDate(), ParentStringsName(), StringMdInterval(), AxisOffset(), ExtensionNameValue(), Accessories(), StringEquipmentSet(), ExtensionAny(), ReferenceWellbore(), ParentString(), uid(), soap() { }
        virtual ~witsml2__DownholeString() { }
        /// Friend allocator used by soap_new_witsml2__DownholeString(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeString * SOAP_FMAC2 soap_instantiate_witsml2__DownholeString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:611 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringSet (-141)
/* complex XSD type 'witsml2:DownholeStringSet': */
class SOAP_CMAC witsml2__DownholeStringSet {
      public:
        /// Required element 'witsml2:DownholeString' of XSD type 'witsml2:DownholeString'
        std::vector<witsml2__DownholeString *> DownholeString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeStringSet, default initialized and not managed by a soap context
        virtual witsml2__DownholeStringSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeStringSet); }
      public:
        /// Constructor with initializations
        witsml2__DownholeStringSet() : DownholeString(), soap() { }
        virtual ~witsml2__DownholeStringSet() { }
        /// Friend allocator used by soap_new_witsml2__DownholeStringSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeStringSet * SOAP_FMAC2 soap_instantiate_witsml2__DownholeStringSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:614 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Equipment (-142)
/* complex XSD type 'witsml2:Equipment': */
class SOAP_CMAC witsml2__Equipment {
      public:
        /// Optional element 'witsml2:EquipmentName' of XSD type 'eml22:String64'
        std::string *EquipmentName;
        /// Required element 'witsml2:EquipmentType' of XSD type 'witsml2:EquipmentTypeExt'
        std::string EquipmentType;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:CatalogId' of XSD type 'eml22:String64'
        std::string *CatalogId;
        /// Optional element 'witsml2:CatalogName' of XSD type 'eml22:String64'
        std::string *CatalogName;
        /// Optional element 'witsml2:BrandName' of XSD type 'eml22:String64'
        std::string *BrandName;
        /// Optional element 'witsml2:ModelType' of XSD type 'eml22:String64'
        std::string *ModelType;
        /// Optional element 'witsml2:Series' of XSD type 'eml22:String64'
        std::string *Series;
        /// Optional element 'witsml2:IsSerialized' of XSD type 'xsd:boolean'
        bool *IsSerialized;
        /// Optional element 'witsml2:SerialNumber' of XSD type 'eml22:String64'
        std::string *SerialNumber;
        /// Optional element 'witsml2:PartNo' of XSD type 'eml22:String64'
        std::string *PartNo;
        /// Optional element 'witsml2:SurfaceCondition' of XSD type 'eml22:String64'
        std::string *SurfaceCondition;
        /// Optional element 'witsml2:Material' of XSD type 'eml22:String64'
        std::string *Material;
        /// Optional element 'witsml2:Grade' of XSD type 'witsml2:GradeType'
        enum witsml2__GradeType *Grade;
        /// Optional element 'witsml2:UnitWeight' of XSD type 'eml22:MassPerLengthMeasure'
        eml22__MassPerLengthMeasure *UnitWeight;
        /// Optional element 'witsml2:CoatingLinerApplied' of XSD type 'xsd:boolean'
        bool *CoatingLinerApplied;
        /// Optional element 'witsml2:OutsideCoating' of XSD type 'witsml2:Coating'
        enum witsml2__Coating *OutsideCoating;
        /// Optional element 'witsml2:InsideCoating' of XSD type 'witsml2:Coating'
        enum witsml2__Coating *InsideCoating;
        /// Optional element 'witsml2:UnitLength' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *UnitLength;
        /// Optional element 'witsml2:MajorOd' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MajorOd;
        /// Optional element 'witsml2:MinorOd' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MinorOd;
        /// Optional element 'witsml2:Od' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Od;
        /// Optional element 'witsml2:MaxOd' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MaxOd;
        /// Optional element 'witsml2:MinOd' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MinOd;
        /// Optional element 'witsml2:MajorId' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MajorId;
        /// Optional element 'witsml2:MinorId' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MinorId;
        /// Optional element 'witsml2:Id' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Id;
        /// Optional element 'witsml2:MaxId' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MaxId;
        /// Optional element 'witsml2:MinId' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MinId;
        /// Optional element 'witsml2:Drift' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Drift;
        /// Optional element 'witsml2:NominalSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *NominalSize;
        /// Optional element 'witsml2:NameService' of XSD type 'eml22:String64'
        std::string *NameService;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:DescriptionPermanent' of XSD type 'eml22:String2000'
        std::string *DescriptionPermanent;
        /// Optional element 'witsml2:Remark' of XSD type 'eml22:String2000'
        std::string *Remark;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Property' of XSD type 'witsml2:ExtPropNameValue'
        std::vector<witsml2__ExtPropNameValue *> Property;
        /// Optional element 'witsml2:SlotAsManufactured' of XSD type 'witsml2:PerfSlot'
        std::vector<witsml2__PerfSlot *> SlotAsManufactured;
        /// Optional element 'witsml2:HoleAsManufactured' of XSD type 'witsml2:PerfHole'
        std::vector<witsml2__PerfHole *> HoleAsManufactured;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Equipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Equipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Equipment, default initialized and not managed by a soap context
        virtual witsml2__Equipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Equipment); }
      public:
        /// Constructor with initializations
        witsml2__Equipment() : EquipmentName(), EquipmentType(), Manufacturer(), Model(), CatalogId(), CatalogName(), BrandName(), ModelType(), Series(), IsSerialized(), SerialNumber(), PartNo(), SurfaceCondition(), Material(), Grade(), UnitWeight(), CoatingLinerApplied(), OutsideCoating(), InsideCoating(), UnitLength(), MajorOd(), MinorOd(), Od(), MaxOd(), MinOd(), MajorId(), MinorId(), Id(), MaxId(), MinId(), Drift(), NominalSize(), NameService(), Description(), DescriptionPermanent(), Remark(), ExtensionNameValue(), ExtensionAny(), Property(), SlotAsManufactured(), HoleAsManufactured(), uid(), soap() { }
        virtual ~witsml2__Equipment() { }
        /// Friend allocator used by soap_new_witsml2__Equipment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Equipment * SOAP_FMAC2 soap_instantiate_witsml2__Equipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:620 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentSet (-144)
/* complex XSD type 'witsml2:EquipmentSet': */
class SOAP_CMAC witsml2__EquipmentSet {
      public:
        /// Required element 'witsml2:Equipment' of XSD type 'witsml2:Equipment'
        std::vector<witsml2__Equipment *> Equipment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EquipmentSet, default initialized and not managed by a soap context
        virtual witsml2__EquipmentSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EquipmentSet); }
      public:
        /// Constructor with initializations
        witsml2__EquipmentSet() : Equipment(), soap() { }
        virtual ~witsml2__EquipmentSet() { }
        /// Friend allocator used by soap_new_witsml2__EquipmentSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EquipmentSet * SOAP_FMAC2 soap_instantiate_witsml2__EquipmentSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:623 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventInfo (-145)
/* complex XSD type 'witsml2:EventInfo': */
class SOAP_CMAC witsml2__EventInfo {
      public:
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:BeginEvent' of XSD type 'witsml2:EventRefInfo'
        witsml2__EventRefInfo *BeginEvent;
        /// Optional element 'witsml2:EndEvent' of XSD type 'witsml2:EventRefInfo'
        witsml2__EventRefInfo *EndEvent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__EventInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__EventInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EventInfo, default initialized and not managed by a soap context
        virtual witsml2__EventInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EventInfo); }
      public:
        /// Constructor with initializations
        witsml2__EventInfo() : ExtensionNameValue(), BeginEvent(), EndEvent(), soap() { }
        virtual ~witsml2__EventInfo() { }
        /// Friend allocator used by soap_new_witsml2__EventInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EventInfo * SOAP_FMAC2 soap_instantiate_witsml2__EventInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:626 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventRefInfo (-146)
/* complex XSD type 'witsml2:EventRefInfo': */
class SOAP_CMAC witsml2__EventRefInfo {
      public:
        /// Optional element 'witsml2:EventReferenceId' of XSD type 'eml22:String64'
        std::string *EventReferenceId;
        /// Optional element 'witsml2:EventDate' of XSD type 'eml22:TimeStamp'
        struct tm *EventDate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__EventRefInfo
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__EventRefInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EventRefInfo, default initialized and not managed by a soap context
        virtual witsml2__EventRefInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EventRefInfo); }
      public:
        /// Constructor with initializations
        witsml2__EventRefInfo() : EventReferenceId(), EventDate(), soap() { }
        virtual ~witsml2__EventRefInfo() { }
        /// Friend allocator used by soap_new_witsml2__EventRefInfo(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EventRefInfo * SOAP_FMAC2 soap_instantiate_witsml2__EventRefInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:629 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ExtPropNameValue (-147)
/* complex XSD type 'witsml2:ExtPropNameValue': */
class SOAP_CMAC witsml2__ExtPropNameValue {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:Value' of XSD type 'eml22:String2000'
        std::string *Value;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ExtPropNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ExtPropNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ExtPropNameValue, default initialized and not managed by a soap context
        virtual witsml2__ExtPropNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ExtPropNameValue); }
      public:
        /// Constructor with initializations
        witsml2__ExtPropNameValue() : Name(), Value(), uid(), soap() { }
        virtual ~witsml2__ExtPropNameValue() { }
        /// Friend allocator used by soap_new_witsml2__ExtPropNameValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ExtPropNameValue * SOAP_FMAC2 soap_instantiate_witsml2__ExtPropNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:632 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyFeature (-148)
/* complex XSD type 'witsml2:GeologyFeature': */
class SOAP_CMAC witsml2__GeologyFeature {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:GeologyType' of XSD type 'witsml2:GeologyType'
        enum witsml2__GeologyType *GeologyType;
        /// Optional element 'witsml2:FeatureMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *FeatureMdInterval;
        /// Optional element 'witsml2:FeatureTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *FeatureTvdInterval;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GeologyFeature, default initialized and not managed by a soap context
        virtual witsml2__GeologyFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GeologyFeature); }
      public:
        /// Constructor with initializations
        witsml2__GeologyFeature() : Name(), GeologyType(), FeatureMdInterval(), FeatureTvdInterval(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__GeologyFeature() { }
        /// Friend allocator used by soap_new_witsml2__GeologyFeature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GeologyFeature * SOAP_FMAC2 soap_instantiate_witsml2__GeologyFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:635 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectSequence (-149)
/* complex XSD type 'witsml2:ObjectSequence': */
class SOAP_CMAC witsml2__ObjectSequence {
      public:
        /// required attribute 'description' of XSD type 'eml22:String2000'
        std::string description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectSequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectSequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ObjectSequence, default initialized and not managed by a soap context
        virtual witsml2__ObjectSequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ObjectSequence); }
      public:
        /// Constructor with initializations
        witsml2__ObjectSequence() : description(), soap() { }
        virtual ~witsml2__ObjectSequence() { }
        /// Friend allocator used by soap_new_witsml2__ObjectSequence(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ObjectSequence * SOAP_FMAC2 soap_instantiate_witsml2__ObjectSequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:641 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerfHole (-151)
/* complex XSD type 'witsml2:PerfHole': */
class SOAP_CMAC witsml2__PerfHole {
      public:
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:HoleDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HoleDiameter;
        /// Optional element 'witsml2:HoleAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *HoleAngle;
        /// Optional element 'witsml2:HolePattern' of XSD type 'eml22:String64'
        std::string *HolePattern;
        /// Optional element 'witsml2:Remarks' of XSD type 'eml22:String2000'
        std::string *Remarks;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:HoleDensity' of XSD type 'eml22:ReciprocalLengthMeasure'
        eml22__ReciprocalLengthMeasure *HoleDensity;
        /// Optional element 'witsml2:HoleCount' of XSD type 'xsd:int'
        int *HoleCount;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerfHole
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerfHole; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerfHole, default initialized and not managed by a soap context
        virtual witsml2__PerfHole *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerfHole); }
      public:
        /// Constructor with initializations
        witsml2__PerfHole() : MdInterval(), TvdInterval(), HoleDiameter(), HoleAngle(), HolePattern(), Remarks(), ExtensionNameValue(), HoleDensity(), HoleCount(), uid(), soap() { }
        virtual ~witsml2__PerfHole() { }
        /// Friend allocator used by soap_new_witsml2__PerfHole(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerfHole * SOAP_FMAC2 soap_instantiate_witsml2__PerfHole(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:644 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSet (-152)
/* complex XSD type 'witsml2:PerforationSet': */
class SOAP_CMAC witsml2__PerforationSet {
      public:
        /// Optional element 'witsml2:BoreholeStringReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> BoreholeStringReferenceId;
        /// Optional element 'witsml2:DownholeStringReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> DownholeStringReferenceId;
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:HoleDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HoleDiameter;
        /// Optional element 'witsml2:HoleAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *HoleAngle;
        /// Optional element 'witsml2:HolePattern' of XSD type 'eml22:String64'
        std::string *HolePattern;
        /// Optional element 'witsml2:HoleDensity' of XSD type 'eml22:ReciprocalLengthMeasure'
        eml22__ReciprocalLengthMeasure *HoleDensity;
        /// Optional element 'witsml2:HoleCount' of XSD type 'xsd:int'
        int *HoleCount;
        /// Optional element 'witsml2:FrictionFactor' of XSD type 'xsd:double'
        double *FrictionFactor;
        /// Optional element 'witsml2:FrictionPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FrictionPres;
        /// Optional element 'witsml2:DischargeCoefficient' of XSD type 'xsd:double'
        double *DischargeCoefficient;
        /// Optional element 'witsml2:PerforationTool' of XSD type 'witsml2:PerforationToolType'
        enum witsml2__PerforationToolType *PerforationTool;
        /// Optional element 'witsml2:PerforationPenetration' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PerforationPenetration;
        /// Optional element 'witsml2:CrushZoneDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *CrushZoneDiameter;
        /// Optional element 'witsml2:CrushDamageRatio' of XSD type 'eml22:String64'
        std::string *CrushDamageRatio;
        /// Optional element 'witsml2:PerforationDate' of XSD type 'eml22:TimeStamp'
        struct tm *PerforationDate;
        /// Optional element 'witsml2:PermanentRemarks' of XSD type 'eml22:String2000'
        std::string *PermanentRemarks;
        /// Optional element 'witsml2:EventHistory' of XSD type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationSet, default initialized and not managed by a soap context
        virtual witsml2__PerforationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationSet); }
      public:
        /// Constructor with initializations
        witsml2__PerforationSet() : BoreholeStringReferenceId(), DownholeStringReferenceId(), MdInterval(), TvdInterval(), HoleDiameter(), HoleAngle(), HolePattern(), HoleDensity(), HoleCount(), FrictionFactor(), FrictionPres(), DischargeCoefficient(), PerforationTool(), PerforationPenetration(), CrushZoneDiameter(), CrushDamageRatio(), PerforationDate(), PermanentRemarks(), EventHistory(), uid(), soap() { }
        virtual ~witsml2__PerforationSet() { }
        /// Friend allocator used by soap_new_witsml2__PerforationSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationSet * SOAP_FMAC2 soap_instantiate_witsml2__PerforationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:647 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSets
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSets (-153)
/* complex XSD type 'witsml2:PerforationSets': */
class SOAP_CMAC witsml2__PerforationSets {
      public:
        /// Required element 'witsml2:PerforationSet' of XSD type 'witsml2:PerforationSet'
        std::vector<witsml2__PerforationSet *> PerforationSet;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSets
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSets; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationSets, default initialized and not managed by a soap context
        virtual witsml2__PerforationSets *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationSets); }
      public:
        /// Constructor with initializations
        witsml2__PerforationSets() : PerforationSet(), soap() { }
        virtual ~witsml2__PerforationSets() { }
        /// Friend allocator used by soap_new_witsml2__PerforationSets(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationSets * SOAP_FMAC2 soap_instantiate_witsml2__PerforationSets(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:650 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerfSlot (-154)
/* complex XSD type 'witsml2:PerfSlot': */
class SOAP_CMAC witsml2__PerfSlot {
      public:
        /// Optional element 'witsml2:SlotHeight' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SlotHeight;
        /// Optional element 'witsml2:SlotWidth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SlotWidth;
        /// Optional element 'witsml2:SlotCenterDistance' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SlotCenterDistance;
        /// Optional element 'witsml2:SlotCount' of XSD type 'xsd:int'
        int *SlotCount;
        /// Optional element 'witsml2:Remarks' of XSD type 'eml22:String2000'
        std::string *Remarks;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerfSlot
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerfSlot; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerfSlot, default initialized and not managed by a soap context
        virtual witsml2__PerfSlot *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerfSlot); }
      public:
        /// Constructor with initializations
        witsml2__PerfSlot() : SlotHeight(), SlotWidth(), SlotCenterDistance(), SlotCount(), Remarks(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__PerfSlot() { }
        /// Friend allocator used by soap_new_witsml2__PerfSlot(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerfSlot * SOAP_FMAC2 soap_instantiate_witsml2__PerfSlot(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:653 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ReferenceContainer (-155)
/* complex XSD type 'witsml2:ReferenceContainer': */
class SOAP_CMAC witsml2__ReferenceContainer {
      public:
        /// Required element 'witsml2:StringReferenceId' of XSD type 'eml22:String64'
        std::string StringReferenceId;
        /// Required element 'witsml2:EquipmentReferenceId' of XSD type 'eml22:String64'
        std::string EquipmentReferenceId;
        /// Required element 'witsml2:AccesoryEquipmentReferenceId' of XSD type 'eml22:String64'
        std::string AccesoryEquipmentReferenceId;
        /// Required element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string Comment;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ReferenceContainer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ReferenceContainer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ReferenceContainer, default initialized and not managed by a soap context
        virtual witsml2__ReferenceContainer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ReferenceContainer); }
      public:
        /// Constructor with initializations
        witsml2__ReferenceContainer() : StringReferenceId(), EquipmentReferenceId(), AccesoryEquipmentReferenceId(), Comment(), uid(), soap() { }
        virtual ~witsml2__ReferenceContainer() { }
        /// Friend allocator used by soap_new_witsml2__ReferenceContainer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ReferenceContainer * SOAP_FMAC2 soap_instantiate_witsml2__ReferenceContainer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:659 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StringAccessory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StringAccessory (-157)
/* complex XSD type 'witsml2:StringAccessory': */
class SOAP_CMAC witsml2__StringAccessory {
      public:
        /// Required element 'witsml2:Accessory' of XSD type 'witsml2:StringEquipment'
        std::vector<witsml2__StringEquipment *> Accessory;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StringAccessory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StringAccessory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StringAccessory, default initialized and not managed by a soap context
        virtual witsml2__StringAccessory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StringAccessory); }
      public:
        /// Constructor with initializations
        witsml2__StringAccessory() : Accessory(), soap() { }
        virtual ~witsml2__StringAccessory() { }
        /// Friend allocator used by soap_new_witsml2__StringAccessory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StringAccessory * SOAP_FMAC2 soap_instantiate_witsml2__StringAccessory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:662 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipment (-158)
/* Type witsml2__StringEquipment is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StringEquipment': */
class SOAP_CMAC witsml2__StringEquipment {
      public:
        /// Optional element 'witsml2:EquipmentType' of XSD type 'witsml2:EquipmentTypeExt'
        std::string *EquipmentType;
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String2000'
        std::string *Name;
        /// Optional element 'witsml2:EquipmentEventHistory' of XSD type 'witsml2:EventInfo'
        std::vector<witsml2__EventInfo *> EquipmentEventHistory;
        /// Optional element 'witsml2:Status' of XSD type 'eml22:String64'
        std::string *Status;
        /// Optional element 'witsml2:RunNo' of XSD type 'eml22:String64'
        std::string *RunNo;
        /// Optional element 'witsml2:PreviousRunDays' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *PreviousRunDays;
        /// Optional element 'witsml2:ObjectCondition' of XSD type 'eml22:String64'
        std::string *ObjectCondition;
        /// Optional element 'witsml2:SurfaceCondition' of XSD type 'eml22:String64'
        std::string *SurfaceCondition;
        /// Optional element 'witsml2:Count' of XSD type 'xsd:int'
        int *Count;
        /// Optional element 'witsml2:Length' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Length;
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:TvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TvdInterval;
        /// Optional element 'witsml2:OutsideString' of XSD type 'xsd:boolean'
        bool *OutsideString;
        /// Optional element 'witsml2:TensileMax' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *TensileMax;
        /// Optional element 'witsml2:PresRating' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresRating;
        /// Optional element 'witsml2:PresCollapse' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCollapse;
        /// Optional element 'witsml2:PresBurst' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBurst;
        /// Optional element 'witsml2:HeatRating' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *HeatRating;
        /// Optional element 'witsml2:IsLinetoSurface' of XSD type 'xsd:boolean'
        bool *IsLinetoSurface;
        /// Optional element 'witsml2:IsCentralized' of XSD type 'xsd:boolean'
        bool *IsCentralized;
        /// Optional element 'witsml2:HasScratchers' of XSD type 'xsd:boolean'
        bool *HasScratchers;
        /// Optional element 'witsml2:PerforationSetRefId' of XSD type 'eml22:String64'
        std::vector<std::string> PerforationSetRefId;
        /// Optional element 'witsml2:PermanentRemarks' of XSD type 'eml22:String2000'
        std::string *PermanentRemarks;
        /// Optional element 'witsml2:UsageComment' of XSD type 'eml22:String2000'
        std::string *UsageComment;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Assembly' of XSD type 'witsml2:Assembly'
        witsml2__Assembly *Assembly;
        /// Optional element 'witsml2:OrderOfObject' of XSD type 'witsml2:ObjectSequence'
        witsml2__ObjectSequence *OrderOfObject;
        /// Optional element 'witsml2:InsideComponent' of XSD type 'witsml2:ReferenceContainer'
        std::vector<witsml2__ReferenceContainer *> InsideComponent;
        /// Optional element 'witsml2:OutsideComponent' of XSD type 'witsml2:ReferenceContainer'
        std::vector<witsml2__ReferenceContainer *> OutsideComponent;
        /// Optional element 'witsml2:ConnectionNext' of XSD type 'witsml2:EquipmentConnection'
        std::vector<witsml2__EquipmentConnection *> ConnectionNext;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// required attribute 'equipmentReferenceUid' of XSD type 'eml22:String64'
        std::string equipmentReferenceUid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StringEquipment, default initialized and not managed by a soap context
        virtual witsml2__StringEquipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StringEquipment); }
      public:
        /// Constructor with initializations
        witsml2__StringEquipment() : EquipmentType(), Name(), EquipmentEventHistory(), Status(), RunNo(), PreviousRunDays(), ObjectCondition(), SurfaceCondition(), Count(), Length(), MdInterval(), TvdInterval(), OutsideString(), TensileMax(), PresRating(), PresCollapse(), PresBurst(), HeatRating(), IsLinetoSurface(), IsCentralized(), HasScratchers(), PerforationSetRefId(), PermanentRemarks(), UsageComment(), ExtensionNameValue(), Assembly(), OrderOfObject(), InsideComponent(), OutsideComponent(), ConnectionNext(), uid(), equipmentReferenceUid(), soap() { }
        virtual ~witsml2__StringEquipment() { }
        /// Friend allocator used by soap_new_witsml2__StringEquipment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StringEquipment * SOAP_FMAC2 soap_instantiate_witsml2__StringEquipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:665 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipmentSet (-159)
/* complex XSD type 'witsml2:StringEquipmentSet': */
class SOAP_CMAC witsml2__StringEquipmentSet {
      public:
        /// Required element 'witsml2:StringEquipment' of XSD type 'witsml2:StringEquipment'
        std::vector<witsml2__StringEquipment *> StringEquipment;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipmentSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipmentSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StringEquipmentSet, default initialized and not managed by a soap context
        virtual witsml2__StringEquipmentSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StringEquipmentSet); }
      public:
        /// Constructor with initializations
        witsml2__StringEquipmentSet() : StringEquipment(), soap() { }
        virtual ~witsml2__StringEquipmentSet() { }
        /// Friend allocator used by soap_new_witsml2__StringEquipmentSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StringEquipmentSet * SOAP_FMAC2 soap_instantiate_witsml2__StringEquipmentSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:26496 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractItemWtOrVolPerUnit_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractItemWtOrVolPerUnit_sequence (-1615)
/* Wrapper: */
class SOAP_CMAC __witsml2__AbstractItemWtOrVolPerUnit_sequence {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractItemWtOrVolPerUnit_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__AbstractItemWtOrVolPerUnit_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__AbstractItemWtOrVolPerUnit_sequence, default initialized and not managed by a soap context
        virtual __witsml2__AbstractItemWtOrVolPerUnit_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__AbstractItemWtOrVolPerUnit_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__AbstractItemWtOrVolPerUnit_sequence() { }
        virtual ~__witsml2__AbstractItemWtOrVolPerUnit_sequence() { }
        /// Friend allocator used by soap_new___witsml2__AbstractItemWtOrVolPerUnit_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__AbstractItemWtOrVolPerUnit_sequence * SOAP_FMAC2 soap_instantiate___witsml2__AbstractItemWtOrVolPerUnit_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:671 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractItemWtOrVolPerUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractItemWtOrVolPerUnit (-161)
/* Type witsml2__AbstractItemWtOrVolPerUnit is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractItemWtOrVolPerUnit': */
class SOAP_CMAC witsml2__AbstractItemWtOrVolPerUnit {
      public:
        __witsml2__AbstractItemWtOrVolPerUnit_sequence *__AbstractItemWtOrVolPerUnit_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractItemWtOrVolPerUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractItemWtOrVolPerUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractItemWtOrVolPerUnit, default initialized and not managed by a soap context
        virtual witsml2__AbstractItemWtOrVolPerUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractItemWtOrVolPerUnit); }
      public:
        /// Constructor with initializations
        witsml2__AbstractItemWtOrVolPerUnit() : __AbstractItemWtOrVolPerUnit_sequence(), soap() { }
        virtual ~witsml2__AbstractItemWtOrVolPerUnit() { }
        /// Friend allocator used by soap_new_witsml2__AbstractItemWtOrVolPerUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractItemWtOrVolPerUnit * SOAP_FMAC2 soap_instantiate_witsml2__AbstractItemWtOrVolPerUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:674 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AnchorState (-162)
/* complex XSD type 'witsml2:AnchorState': */
class SOAP_CMAC witsml2__AnchorState {
      public:
        /// Required element 'witsml2:AnchorName' of XSD type 'eml22:String64'
        std::string AnchorName;
        /// Optional element 'witsml2:AnchorAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AnchorAngle;
        /// Optional element 'witsml2:AnchorTension' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *AnchorTension;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AnchorState
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AnchorState; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AnchorState, default initialized and not managed by a soap context
        virtual witsml2__AnchorState *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AnchorState); }
      public:
        /// Constructor with initializations
        witsml2__AnchorState() : AnchorName(), AnchorAngle(), AnchorTension(), Description(), soap() { }
        virtual ~witsml2__AnchorState() { }
        /// Friend allocator used by soap_new_witsml2__AnchorState(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AnchorState * SOAP_FMAC2 soap_instantiate_witsml2__AnchorState(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:677 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DayCost (-163)
/* complex XSD type 'witsml2:DayCost': */
class SOAP_CMAC witsml2__DayCost {
      public:
        /// Optional element 'witsml2:NumAFE' of XSD type 'eml22:String64'
        std::string *NumAFE;
        /// Optional element 'witsml2:CostGroup' of XSD type 'eml22:String64'
        std::string *CostGroup;
        /// Required element 'witsml2:CostClass' of XSD type 'eml22:String64'
        std::string CostClass;
        /// Required element 'witsml2:CostCode' of XSD type 'eml22:String64'
        std::string CostCode;
        /// Optional element 'witsml2:CostSubCode' of XSD type 'eml22:String64'
        std::string *CostSubCode;
        /// Optional element 'witsml2:CostItemDescription' of XSD type 'eml22:String64'
        std::string *CostItemDescription;
        /// Optional element 'witsml2:ItemKind' of XSD type 'eml22:UomEnum'
        std::string *ItemKind;
        /// Optional element 'witsml2:ItemSize' of XSD type 'xsd:double'
        double *ItemSize;
        /// Optional element 'witsml2:QtyItem' of XSD type 'xsd:int'
        int *QtyItem;
        /// Optional element 'witsml2:NumInvoice' of XSD type 'eml22:String64'
        std::string *NumInvoice;
        /// Optional element 'witsml2:NumPO' of XSD type 'eml22:String64'
        std::string *NumPO;
        /// Optional element 'witsml2:NumTicket' of XSD type 'eml22:String64'
        std::string *NumTicket;
        /// Optional element 'witsml2:IsCarryOver' of XSD type 'xsd:boolean'
        bool *IsCarryOver;
        /// Optional element 'witsml2:IsRental' of XSD type 'xsd:boolean'
        bool *IsRental;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:NumSerial' of XSD type 'eml22:String64'
        std::string *NumSerial;
        /// Optional element 'witsml2:NameVendor' of XSD type 'eml22:String64'
        std::string *NameVendor;
        /// Optional element 'witsml2:NumVendor' of XSD type 'eml22:String64'
        std::string *NumVendor;
        /// Optional element 'witsml2:Pool' of XSD type 'eml22:String64'
        std::string *Pool;
        /// Optional element 'witsml2:Estimated' of XSD type 'xsd:boolean'
        bool *Estimated;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:CostAmount' of XSD type 'eml22:Cost'
        eml22__Cost *CostAmount;
        /// Optional element 'witsml2:CostPerItem' of XSD type 'eml22:Cost'
        eml22__Cost *CostPerItem;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DayCost
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DayCost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DayCost, default initialized and not managed by a soap context
        virtual witsml2__DayCost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DayCost); }
      public:
        /// Constructor with initializations
        witsml2__DayCost() : NumAFE(), CostGroup(), CostClass(), CostCode(), CostSubCode(), CostItemDescription(), ItemKind(), ItemSize(), QtyItem(), NumInvoice(), NumPO(), NumTicket(), IsCarryOver(), IsRental(), NameTag(), NumSerial(), NameVendor(), NumVendor(), Pool(), Estimated(), ExtensionNameValue(), CostAmount(), CostPerItem(), uid(), soap() { }
        virtual ~witsml2__DayCost() { }
        /// Friend allocator used by soap_new_witsml2__DayCost(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DayCost * SOAP_FMAC2 soap_instantiate_witsml2__DayCost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:680 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Hse
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Hse (-164)
/* complex XSD type 'witsml2:Hse': */
class SOAP_CMAC witsml2__Hse {
      public:
        /// Optional element 'witsml2:DaysIncFree' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *DaysIncFree;
        /// Optional element 'witsml2:LastCsgPresTest' of XSD type 'eml22:TimeStamp'
        struct tm *LastCsgPresTest;
        /// Optional element 'witsml2:PresLastCsg' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresLastCsg;
        /// Optional element 'witsml2:LastBopPresTest' of XSD type 'eml22:TimeStamp'
        struct tm *LastBopPresTest;
        /// Optional element 'witsml2:NextBopPresTest' of XSD type 'eml22:TimeStamp'
        struct tm *NextBopPresTest;
        /// Optional element 'witsml2:PresStdPipe' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresStdPipe;
        /// Optional element 'witsml2:PresKellyHose' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresKellyHose;
        /// Optional element 'witsml2:PresDiverter' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresDiverter;
        /// Optional element 'witsml2:PresAnnular' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresAnnular;
        /// Optional element 'witsml2:PresRams' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresRams;
        /// Optional element 'witsml2:PresChokeLine' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresChokeLine;
        /// Optional element 'witsml2:PresChokeMan' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresChokeMan;
        /// Optional element 'witsml2:LastFireBoatDrill' of XSD type 'eml22:TimeStamp'
        struct tm *LastFireBoatDrill;
        /// Optional element 'witsml2:LastAbandonDrill' of XSD type 'eml22:TimeStamp'
        struct tm *LastAbandonDrill;
        /// Optional element 'witsml2:LastRigInspection' of XSD type 'eml22:TimeStamp'
        struct tm *LastRigInspection;
        /// Optional element 'witsml2:LastSafetyMeeting' of XSD type 'eml22:TimeStamp'
        struct tm *LastSafetyMeeting;
        /// Optional element 'witsml2:LastSafetyInspection' of XSD type 'eml22:TimeStamp'
        struct tm *LastSafetyInspection;
        /// Optional element 'witsml2:LastTripDrill' of XSD type 'eml22:TimeStamp'
        struct tm *LastTripDrill;
        /// Optional element 'witsml2:LastDiverterDrill' of XSD type 'eml22:TimeStamp'
        struct tm *LastDiverterDrill;
        /// Optional element 'witsml2:LastBopDrill' of XSD type 'eml22:TimeStamp'
        struct tm *LastBopDrill;
        /// Optional element 'witsml2:RegAgencyInsp' of XSD type 'xsd:boolean'
        bool *RegAgencyInsp;
        /// Optional element 'witsml2:NonComplianceIssued' of XSD type 'xsd:boolean'
        bool *NonComplianceIssued;
        /// Optional element 'witsml2:NumStopCards' of XSD type 'xsd:int'
        int *NumStopCards;
        /// Optional element 'witsml2:FluidDischarged' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidDischarged;
        /// Optional element 'witsml2:VolCtgDischarged' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolCtgDischarged;
        /// Optional element 'witsml2:VolOilCtgDischarge' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolOilCtgDischarge;
        /// Optional element 'witsml2:WasteDischarged' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *WasteDischarged;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:Incident' of XSD type 'witsml2:Incident'
        std::vector<witsml2__Incident *> Incident;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Hse
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Hse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Hse, default initialized and not managed by a soap context
        virtual witsml2__Hse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Hse); }
      public:
        /// Constructor with initializations
        witsml2__Hse() : DaysIncFree(), LastCsgPresTest(), PresLastCsg(), LastBopPresTest(), NextBopPresTest(), PresStdPipe(), PresKellyHose(), PresDiverter(), PresAnnular(), PresRams(), PresChokeLine(), PresChokeMan(), LastFireBoatDrill(), LastAbandonDrill(), LastRigInspection(), LastSafetyMeeting(), LastSafetyInspection(), LastTripDrill(), LastDiverterDrill(), LastBopDrill(), RegAgencyInsp(), NonComplianceIssued(), NumStopCards(), FluidDischarged(), VolCtgDischarged(), VolOilCtgDischarge(), WasteDischarged(), Comments(), Incident(), soap() { }
        virtual ~witsml2__Hse() { }
        /// Friend allocator used by soap_new_witsml2__Hse(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Hse * SOAP_FMAC2 soap_instantiate_witsml2__Hse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:683 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Incident
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Incident (-165)
/* complex XSD type 'witsml2:Incident': */
class SOAP_CMAC witsml2__Incident {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTim;
        /// Optional element 'witsml2:Reporter' of XSD type 'eml22:String64'
        std::string *Reporter;
        /// Optional element 'witsml2:NumMinorInjury' of XSD type 'xsd:int'
        int *NumMinorInjury;
        /// Optional element 'witsml2:NumMajorInjury' of XSD type 'xsd:int'
        int *NumMajorInjury;
        /// Optional element 'witsml2:NumFatality' of XSD type 'xsd:int'
        int *NumFatality;
        /// Optional element 'witsml2:IsNearMiss' of XSD type 'xsd:boolean'
        bool *IsNearMiss;
        /// Optional element 'witsml2:DescLocation' of XSD type 'eml22:String64'
        std::string *DescLocation;
        /// Optional element 'witsml2:DescAccident' of XSD type 'eml22:String2000'
        std::string *DescAccident;
        /// Optional element 'witsml2:RemedialActionDesc' of XSD type 'eml22:String2000'
        std::string *RemedialActionDesc;
        /// Optional element 'witsml2:CauseDesc' of XSD type 'eml22:String2000'
        std::string *CauseDesc;
        /// Optional element 'witsml2:ETimLostGross' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimLostGross;
        /// Optional element 'witsml2:CostLossGross' of XSD type 'eml22:Cost'
        eml22__Cost *CostLossGross;
        /// Optional element 'witsml2:ResponsibleCompany' of XSD type 'eml22:String64'
        std::string *ResponsibleCompany;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Incident
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Incident; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Incident, default initialized and not managed by a soap context
        virtual witsml2__Incident *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Incident); }
      public:
        /// Constructor with initializations
        witsml2__Incident() : DTim(), Reporter(), NumMinorInjury(), NumMajorInjury(), NumFatality(), IsNearMiss(), DescLocation(), DescAccident(), RemedialActionDesc(), CauseDesc(), ETimLostGross(), CostLossGross(), ResponsibleCompany(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Incident() { }
        /// Friend allocator used by soap_new_witsml2__Incident(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Incident * SOAP_FMAC2 soap_instantiate_witsml2__Incident(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:686 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Inventory (-166)
/* complex XSD type 'witsml2:Inventory': */
class SOAP_CMAC witsml2__Inventory {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Required element 'witsml2:ItemWtOrVolPerUnit' of XSD type 'witsml2:AbstractItemWtOrVolPerUnit'
        witsml2__AbstractItemWtOrVolPerUnit *ItemWtOrVolPerUnit;
        /// Optional element 'witsml2:PricePerUnit' of XSD type 'eml22:Cost'
        eml22__Cost *PricePerUnit;
        /// Optional element 'witsml2:QtyStart' of XSD type 'xsd:int'
        int *QtyStart;
        /// Optional element 'witsml2:QtyAdjustment' of XSD type 'xsd:int'
        int *QtyAdjustment;
        /// Optional element 'witsml2:QtyReceived' of XSD type 'xsd:int'
        int *QtyReceived;
        /// Optional element 'witsml2:QtyReturned' of XSD type 'xsd:int'
        int *QtyReturned;
        /// Optional element 'witsml2:QtyUsed' of XSD type 'xsd:int'
        int *QtyUsed;
        /// Optional element 'witsml2:CostItem' of XSD type 'eml22:Cost'
        eml22__Cost *CostItem;
        /// Optional element 'witsml2:QtyOnLocation' of XSD type 'xsd:int'
        int *QtyOnLocation;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Inventory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Inventory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Inventory, default initialized and not managed by a soap context
        virtual witsml2__Inventory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Inventory); }
      public:
        /// Constructor with initializations
        witsml2__Inventory() : Name(), ItemWtOrVolPerUnit(), PricePerUnit(), QtyStart(), QtyAdjustment(), QtyReceived(), QtyReturned(), QtyUsed(), CostItem(), QtyOnLocation(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Inventory() { }
        /// Friend allocator used by soap_new_witsml2__Inventory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Inventory * SOAP_FMAC2 soap_instantiate_witsml2__Inventory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:695 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLosses
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLosses (-169)
/* complex XSD type 'witsml2:MudLosses': */
class SOAP_CMAC witsml2__MudLosses {
      public:
        /// Optional element 'witsml2:VolLostShakerSurf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostShakerSurf;
        /// Optional element 'witsml2:VolLostMudCleanerSurf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostMudCleanerSurf;
        /// Optional element 'witsml2:VolLostPitsSurf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostPitsSurf;
        /// Optional element 'witsml2:VolLostTrippingSurf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostTrippingSurf;
        /// Optional element 'witsml2:VolLostOtherSurf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostOtherSurf;
        /// Optional element 'witsml2:VolTotMudLostSurf' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolTotMudLostSurf;
        /// Optional element 'witsml2:VolLostCircHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostCircHole;
        /// Optional element 'witsml2:VolLostCsgHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostCsgHole;
        /// Optional element 'witsml2:VolLostCmtHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostCmtHole;
        /// Optional element 'witsml2:VolLostBhdCsgHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostBhdCsgHole;
        /// Optional element 'witsml2:VolLostAbandonHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostAbandonHole;
        /// Optional element 'witsml2:VolLostOtherHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolLostOtherHole;
        /// Optional element 'witsml2:VolTotMudLostHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolTotMudLostHole;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLosses
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLosses; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLosses, default initialized and not managed by a soap context
        virtual witsml2__MudLosses *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLosses); }
      public:
        /// Constructor with initializations
        witsml2__MudLosses() : VolLostShakerSurf(), VolLostMudCleanerSurf(), VolLostPitsSurf(), VolLostTrippingSurf(), VolLostOtherSurf(), VolTotMudLostSurf(), VolLostCircHole(), VolLostCsgHole(), VolLostCmtHole(), VolLostBhdCsgHole(), VolLostAbandonHole(), VolLostOtherHole(), VolTotMudLostHole(), soap() { }
        virtual ~witsml2__MudLosses() { }
        /// Friend allocator used by soap_new_witsml2__MudLosses(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLosses * SOAP_FMAC2 soap_instantiate_witsml2__MudLosses(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudVolume
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudVolume (-170)
/* complex XSD type 'witsml2:MudVolume': */
class SOAP_CMAC witsml2__MudVolume {
      public:
        /// Optional element 'witsml2:VolTotMudStart' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolTotMudStart;
        /// Optional element 'witsml2:VolMudDumped' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudDumped;
        /// Optional element 'witsml2:VolMudReceived' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudReceived;
        /// Optional element 'witsml2:VolMudReturned' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudReturned;
        /// Optional element 'witsml2:VolMudBuilt' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudBuilt;
        /// Optional element 'witsml2:VolMudString' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudString;
        /// Optional element 'witsml2:VolMudCasing' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudCasing;
        /// Optional element 'witsml2:VolMudHole' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudHole;
        /// Optional element 'witsml2:VolMudRiser' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolMudRiser;
        /// Optional element 'witsml2:VolTotMudEnd' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolTotMudEnd;
        /// Optional element 'witsml2:MudLosses' of XSD type 'witsml2:MudLosses'
        witsml2__MudLosses *MudLosses;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudVolume
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudVolume; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudVolume, default initialized and not managed by a soap context
        virtual witsml2__MudVolume *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudVolume); }
      public:
        /// Constructor with initializations
        witsml2__MudVolume() : VolTotMudStart(), VolMudDumped(), VolMudReceived(), VolMudReturned(), VolMudBuilt(), VolMudString(), VolMudCasing(), VolMudHole(), VolMudRiser(), VolTotMudEnd(), MudLosses(), soap() { }
        virtual ~witsml2__MudVolume() { }
        /// Friend allocator used by soap_new_witsml2__MudVolume(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudVolume * SOAP_FMAC2 soap_instantiate_witsml2__MudVolume(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:704 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Personnel (-172)
/* complex XSD type 'witsml2:Personnel': */
class SOAP_CMAC witsml2__Personnel {
      public:
        /// Optional element 'witsml2:Company' of XSD type 'eml22:String64'
        std::string *Company;
        /// Optional element 'witsml2:TypeService' of XSD type 'eml22:String64'
        std::string *TypeService;
        /// Optional element 'witsml2:NumPeople' of XSD type 'xsd:int'
        int *NumPeople;
        /// Optional element 'witsml2:TotalTime' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *TotalTime;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Personnel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Personnel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Personnel, default initialized and not managed by a soap context
        virtual witsml2__Personnel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Personnel); }
      public:
        /// Constructor with initializations
        witsml2__Personnel() : Company(), TypeService(), NumPeople(), TotalTime(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Personnel() { }
        /// Friend allocator used by soap_new_witsml2__Personnel(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Personnel * SOAP_FMAC2 soap_instantiate_witsml2__Personnel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:707 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PitVolume (-173)
/* complex XSD type 'witsml2:PitVolume': */
class SOAP_CMAC witsml2__PitVolume {
      public:
        /// Required element 'witsml2:Pit' of XSD type 'xsd:int'
        int Pit;
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Required element 'witsml2:VolPit' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolPit;
        /// Optional element 'witsml2:DensFluid' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensFluid;
        /// Optional element 'witsml2:DescFluid' of XSD type 'eml22:String64'
        std::string *DescFluid;
        /// Optional element 'witsml2:VisFunnel' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *VisFunnel;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PitVolume
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PitVolume; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PitVolume, default initialized and not managed by a soap context
        virtual witsml2__PitVolume *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PitVolume); }
      public:
        /// Constructor with initializations
        witsml2__PitVolume() : Pit(), DTim(), VolPit(), DensFluid(), DescFluid(), VisFunnel(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__PitVolume() { }
        /// Friend allocator used by soap_new_witsml2__PitVolume(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PitVolume * SOAP_FMAC2 soap_instantiate_witsml2__PitVolume(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:710 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOp (-174)
/* complex XSD type 'witsml2:PumpOp': */
class SOAP_CMAC witsml2__PumpOp {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Required element 'witsml2:Pump' of XSD type 'xsd:int'
        int Pump;
        /// Optional element 'witsml2:TypeOperation' of XSD type 'witsml2:PumpOpType'
        enum witsml2__PumpOpType *TypeOperation;
        /// Optional element 'witsml2:IdLiner' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdLiner;
        /// Optional element 'witsml2:LenStroke' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenStroke;
        /// Required element 'witsml2:RateStroke' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RateStroke;
        /// Required element 'witsml2:Pressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Pressure;
        /// Optional element 'witsml2:PcEfficiency' of XSD type 'eml22:PowerPerPowerMeasure'
        eml22__PowerPerPowerMeasure *PcEfficiency;
        /// Optional element 'witsml2:PumpOutput' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *PumpOutput;
        /// Optional element 'witsml2:MdBit' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOp
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOp; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PumpOp, default initialized and not managed by a soap context
        virtual witsml2__PumpOp *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PumpOp); }
      public:
        /// Constructor with initializations
        witsml2__PumpOp() : DTim(), Pump(), TypeOperation(), IdLiner(), LenStroke(), RateStroke(), Pressure(), PcEfficiency(), PumpOutput(), MdBit(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__PumpOp() { }
        /// Friend allocator used by soap_new_witsml2__PumpOp(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PumpOp * SOAP_FMAC2 soap_instantiate_witsml2__PumpOp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:713 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RigResponse
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RigResponse (-175)
/* complex XSD type 'witsml2:RigResponse': */
class SOAP_CMAC witsml2__RigResponse {
      public:
        /// Optional element 'witsml2:RigHeading' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *RigHeading;
        /// Optional element 'witsml2:RigHeave' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *RigHeave;
        /// Optional element 'witsml2:RigPitchAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *RigPitchAngle;
        /// Optional element 'witsml2:RigRollAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *RigRollAngle;
        /// Optional element 'witsml2:RiserAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *RiserAngle;
        /// Optional element 'witsml2:RiserDirection' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *RiserDirection;
        /// Optional element 'witsml2:RiserTension' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RiserTension;
        /// Optional element 'witsml2:VariableDeckLoad' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *VariableDeckLoad;
        /// Optional element 'witsml2:TotalDeckLoad' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *TotalDeckLoad;
        /// Optional element 'witsml2:GuideBaseAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *GuideBaseAngle;
        /// Optional element 'witsml2:BallJointAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *BallJointAngle;
        /// Optional element 'witsml2:BallJointDirection' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *BallJointDirection;
        /// Optional element 'witsml2:OffsetRig' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OffsetRig;
        /// Optional element 'witsml2:LoadLeg1' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *LoadLeg1;
        /// Optional element 'witsml2:LoadLeg2' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *LoadLeg2;
        /// Optional element 'witsml2:LoadLeg3' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *LoadLeg3;
        /// Optional element 'witsml2:LoadLeg4' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *LoadLeg4;
        /// Optional element 'witsml2:PenetrationLeg1' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PenetrationLeg1;
        /// Optional element 'witsml2:PenetrationLeg2' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PenetrationLeg2;
        /// Optional element 'witsml2:PenetrationLeg3' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PenetrationLeg3;
        /// Optional element 'witsml2:PenetrationLeg4' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PenetrationLeg4;
        /// Optional element 'witsml2:DispRig' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DispRig;
        /// Optional element 'witsml2:MeanDraft' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MeanDraft;
        /// Optional element 'witsml2:AnchorState' of XSD type 'witsml2:AnchorState'
        std::vector<witsml2__AnchorState *> AnchorState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RigResponse
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RigResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RigResponse, default initialized and not managed by a soap context
        virtual witsml2__RigResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RigResponse); }
      public:
        /// Constructor with initializations
        witsml2__RigResponse() : RigHeading(), RigHeave(), RigPitchAngle(), RigRollAngle(), RiserAngle(), RiserDirection(), RiserTension(), VariableDeckLoad(), TotalDeckLoad(), GuideBaseAngle(), BallJointAngle(), BallJointDirection(), OffsetRig(), LoadLeg1(), LoadLeg2(), LoadLeg3(), LoadLeg4(), PenetrationLeg1(), PenetrationLeg2(), PenetrationLeg3(), PenetrationLeg4(), DispRig(), MeanDraft(), AnchorState(), soap() { }
        virtual ~witsml2__RigResponse() { }
        /// Friend allocator used by soap_new_witsml2__RigResponse(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RigResponse * SOAP_FMAC2 soap_instantiate_witsml2__RigResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:716 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Scr
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Scr (-176)
/* complex XSD type 'witsml2:Scr': */
class SOAP_CMAC witsml2__Scr {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTim;
        /// Required element 'witsml2:Pump' of XSD type 'xsd:int'
        int Pump;
        /// Required element 'witsml2:TypeScr' of XSD type 'witsml2:ScrType'
        enum witsml2__ScrType TypeScr;
        /// Required element 'witsml2:RateStroke' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *RateStroke;
        /// Required element 'witsml2:PresRecorded' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresRecorded;
        /// Optional element 'witsml2:MdBit' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Scr
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Scr; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Scr, default initialized and not managed by a soap context
        virtual witsml2__Scr *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Scr); }
      public:
        /// Constructor with initializations
        witsml2__Scr() : DTim(), Pump(), TypeScr(), RateStroke(), PresRecorded(), MdBit(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Scr() { }
        /// Friend allocator used by soap_new_witsml2__Scr(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Scr * SOAP_FMAC2 soap_instantiate_witsml2__Scr(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:719 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerOp (-177)
/* complex XSD type 'witsml2:ShakerOp': */
class SOAP_CMAC witsml2__ShakerOp {
      public:
        /// Required element 'witsml2:Shaker' of XSD type 'eml22:String64'
        std::string Shaker;
        /// Optional element 'witsml2:MdHole' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHole;
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:HoursRun' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *HoursRun;
        /// Optional element 'witsml2:PcScreenCovered' of XSD type 'eml22:AreaPerAreaMeasure'
        eml22__AreaPerAreaMeasure *PcScreenCovered;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ShakerScreen' of XSD type 'witsml2:ShakerScreen'
        witsml2__ShakerScreen *ShakerScreen;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerOp
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerOp; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShakerOp, default initialized and not managed by a soap context
        virtual witsml2__ShakerOp *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShakerOp); }
      public:
        /// Constructor with initializations
        witsml2__ShakerOp() : Shaker(), MdHole(), DTim(), HoursRun(), PcScreenCovered(), ExtensionNameValue(), ShakerScreen(), uid(), soap() { }
        virtual ~witsml2__ShakerOp() { }
        /// Friend allocator used by soap_new_witsml2__ShakerOp(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShakerOp * SOAP_FMAC2 soap_instantiate_witsml2__ShakerOp(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:722 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerScreen
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerScreen (-178)
/* complex XSD type 'witsml2:ShakerScreen': */
class SOAP_CMAC witsml2__ShakerScreen {
      public:
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:NumDeck' of XSD type 'xsd:int'
        int *NumDeck;
        /// Optional element 'witsml2:MeshX' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MeshX;
        /// Optional element 'witsml2:MeshY' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MeshY;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:CutPoint' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *CutPoint;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerScreen
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerScreen; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShakerScreen, default initialized and not managed by a soap context
        virtual witsml2__ShakerScreen *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShakerScreen); }
      public:
        /// Constructor with initializations
        witsml2__ShakerScreen() : DTimStart(), DTimEnd(), NumDeck(), MeshX(), MeshY(), Manufacturer(), Model(), CutPoint(), soap() { }
        virtual ~witsml2__ShakerScreen() { }
        /// Friend allocator used by soap_new_witsml2__ShakerScreen(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShakerScreen * SOAP_FMAC2 soap_instantiate_witsml2__ShakerScreen(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:725 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraft (-179)
/* complex XSD type 'witsml2:SupportCraft': */
class SOAP_CMAC witsml2__SupportCraft {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Required element 'witsml2:TypeSupportCraft' of XSD type 'witsml2:SupportCraftType'
        enum witsml2__SupportCraftType TypeSupportCraft;
        /// Optional element 'witsml2:DTimArrived' of XSD type 'eml22:TimeStamp'
        struct tm *DTimArrived;
        /// Optional element 'witsml2:DTimDeparted' of XSD type 'eml22:TimeStamp'
        struct tm *DTimDeparted;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraft
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraft; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SupportCraft, default initialized and not managed by a soap context
        virtual witsml2__SupportCraft *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SupportCraft); }
      public:
        /// Constructor with initializations
        witsml2__SupportCraft() : Name(), TypeSupportCraft(), DTimArrived(), DTimDeparted(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__SupportCraft() { }
        /// Friend allocator used by soap_new_witsml2__SupportCraft(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SupportCraft * SOAP_FMAC2 soap_instantiate_witsml2__SupportCraft(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:728 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Weather
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Weather (-180)
/* complex XSD type 'witsml2:Weather': */
class SOAP_CMAC witsml2__Weather {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTim;
        /// Optional element 'witsml2:Agency' of XSD type 'eml22:String64'
        std::string *Agency;
        /// Optional element 'witsml2:BarometricPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *BarometricPressure;
        /// Optional element 'witsml2:BeaufortScaleNumber' of XSD type 'witsml2:BeaufortScaleIntegerCode'
        short *BeaufortScaleNumber;
        /// Optional element 'witsml2:TempSurfaceMn' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempSurfaceMn;
        /// Optional element 'witsml2:TempSurfaceMx' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempSurfaceMx;
        /// Optional element 'witsml2:TempWindChill' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempWindChill;
        /// Optional element 'witsml2:Tempsea' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *Tempsea;
        /// Optional element 'witsml2:Visibility' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Visibility;
        /// Optional element 'witsml2:AziWave' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AziWave;
        /// Optional element 'witsml2:HtWave' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtWave;
        /// Optional element 'witsml2:SignificantWave' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SignificantWave;
        /// Optional element 'witsml2:MaxWave' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MaxWave;
        /// Optional element 'witsml2:PeriodWave' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *PeriodWave;
        /// Optional element 'witsml2:AziWind' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AziWind;
        /// Optional element 'witsml2:VelWind' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *VelWind;
        /// Optional element 'witsml2:TypePrecip' of XSD type 'eml22:String64'
        std::string *TypePrecip;
        /// Optional element 'witsml2:AmtPrecip' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *AmtPrecip;
        /// Optional element 'witsml2:CoverCloud' of XSD type 'eml22:String64'
        std::string *CoverCloud;
        /// Optional element 'witsml2:CeilingCloud' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *CeilingCloud;
        /// Optional element 'witsml2:CurrentSea' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *CurrentSea;
        /// Optional element 'witsml2:AziCurrentSea' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AziCurrentSea;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Weather
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Weather; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Weather, default initialized and not managed by a soap context
        virtual witsml2__Weather *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Weather); }
      public:
        /// Constructor with initializations
        witsml2__Weather() : DTim(), Agency(), BarometricPressure(), BeaufortScaleNumber(), TempSurfaceMn(), TempSurfaceMx(), TempWindChill(), Tempsea(), Visibility(), AziWave(), HtWave(), SignificantWave(), MaxWave(), PeriodWave(), AziWind(), VelWind(), TypePrecip(), AmtPrecip(), CoverCloud(), CeilingCloud(), CurrentSea(), AziCurrentSea(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Weather() { }
        /// Friend allocator used by soap_new_witsml2__Weather(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Weather * SOAP_FMAC2 soap_instantiate_witsml2__Weather(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:731 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreTrajectoryStation (-181)
/* complex XSD type 'witsml2:RefWellboreTrajectoryStation': */
class SOAP_CMAC witsml2__RefWellboreTrajectoryStation {
      public:
        /// Required element 'witsml2:StationReference' of XSD type 'eml22:String64'
        std::string StationReference;
        /// Required element 'witsml2:TrajectoryParent' of XSD type 'eml22:String64'
        std::string TrajectoryParent;
        /// Optional element 'witsml2:WellboreParent' of XSD type 'eml22:String64'
        std::string *WellboreParent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreTrajectoryStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreTrajectoryStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RefWellboreTrajectoryStation, default initialized and not managed by a soap context
        virtual witsml2__RefWellboreTrajectoryStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RefWellboreTrajectoryStation); }
      public:
        /// Constructor with initializations
        witsml2__RefWellboreTrajectoryStation() : StationReference(), TrajectoryParent(), WellboreParent(), soap() { }
        virtual ~witsml2__RefWellboreTrajectoryStation() { }
        /// Friend allocator used by soap_new_witsml2__RefWellboreTrajectoryStation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RefWellboreTrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml2__RefWellboreTrajectoryStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:734 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajCorUsed (-182)
/* complex XSD type 'witsml2:StnTrajCorUsed': */
class SOAP_CMAC witsml2__StnTrajCorUsed {
      public:
        /// Optional element 'witsml2:GravAxialAccelCor' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravAxialAccelCor;
        /// Optional element 'witsml2:GravTran1AccelCor' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTran1AccelCor;
        /// Optional element 'witsml2:GravTran2AccelCor' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTran2AccelCor;
        /// Optional element 'witsml2:MagAxialDrlstrCor' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagAxialDrlstrCor;
        /// Optional element 'witsml2:MagTran1DrlstrCor' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTran1DrlstrCor;
        /// Optional element 'witsml2:MagTran2DrlstrCor' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTran2DrlstrCor;
        /// Optional element 'witsml2:MagTran1MSACor' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTran1MSACor;
        /// Optional element 'witsml2:MagTran2MSACor' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTran2MSACor;
        /// Optional element 'witsml2:MagAxialMSACor' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagAxialMSACor;
        /// Optional element 'witsml2:SagIncCor' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *SagIncCor;
        /// Optional element 'witsml2:SagAziCor' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *SagAziCor;
        /// Optional element 'witsml2:StnMagDeclUsed' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *StnMagDeclUsed;
        /// Optional element 'witsml2:StnGridConUsed' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *StnGridConUsed;
        /// Optional element 'witsml2:DirSensorOffset' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DirSensorOffset;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajCorUsed
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajCorUsed; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajCorUsed, default initialized and not managed by a soap context
        virtual witsml2__StnTrajCorUsed *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajCorUsed); }
      public:
        /// Constructor with initializations
        witsml2__StnTrajCorUsed() : GravAxialAccelCor(), GravTran1AccelCor(), GravTran2AccelCor(), MagAxialDrlstrCor(), MagTran1DrlstrCor(), MagTran2DrlstrCor(), MagTran1MSACor(), MagTran2MSACor(), MagAxialMSACor(), SagIncCor(), SagAziCor(), StnMagDeclUsed(), StnGridConUsed(), DirSensorOffset(), soap() { }
        virtual ~witsml2__StnTrajCorUsed() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajCorUsed(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajCorUsed * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajCorUsed(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:737 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajMatrixCov (-183)
/* complex XSD type 'witsml2:StnTrajMatrixCov': */
class SOAP_CMAC witsml2__StnTrajMatrixCov {
      public:
        /// Optional element 'witsml2:VarianceNN' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *VarianceNN;
        /// Optional element 'witsml2:VarianceNE' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *VarianceNE;
        /// Optional element 'witsml2:VarianceNVert' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *VarianceNVert;
        /// Optional element 'witsml2:VarianceEE' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *VarianceEE;
        /// Optional element 'witsml2:VarianceEVert' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *VarianceEVert;
        /// Optional element 'witsml2:VarianceVertVert' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *VarianceVertVert;
        /// Optional element 'witsml2:BiasN' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *BiasN;
        /// Optional element 'witsml2:BiasE' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *BiasE;
        /// Optional element 'witsml2:BiasVert' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *BiasVert;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajMatrixCov
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajMatrixCov; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajMatrixCov, default initialized and not managed by a soap context
        virtual witsml2__StnTrajMatrixCov *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajMatrixCov); }
      public:
        /// Constructor with initializations
        witsml2__StnTrajMatrixCov() : VarianceNN(), VarianceNE(), VarianceNVert(), VarianceEE(), VarianceEVert(), VarianceVertVert(), BiasN(), BiasE(), BiasVert(), soap() { }
        virtual ~witsml2__StnTrajMatrixCov() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajMatrixCov(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajMatrixCov * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajMatrixCov(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:740 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajRawData (-184)
/* complex XSD type 'witsml2:StnTrajRawData': */
class SOAP_CMAC witsml2__StnTrajRawData {
      public:
        /// Optional element 'witsml2:GravAxialRaw' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravAxialRaw;
        /// Optional element 'witsml2:GravTran1Raw' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTran1Raw;
        /// Optional element 'witsml2:GravTran2Raw' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTran2Raw;
        /// Optional element 'witsml2:MagAxialRaw' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagAxialRaw;
        /// Optional element 'witsml2:MagTran1Raw' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTran1Raw;
        /// Optional element 'witsml2:MagTran2Raw' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTran2Raw;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajRawData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajRawData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajRawData, default initialized and not managed by a soap context
        virtual witsml2__StnTrajRawData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajRawData); }
      public:
        /// Constructor with initializations
        witsml2__StnTrajRawData() : GravAxialRaw(), GravTran1Raw(), GravTran2Raw(), MagAxialRaw(), MagTran1Raw(), MagTran2Raw(), soap() { }
        virtual ~witsml2__StnTrajRawData() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajRawData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajRawData * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajRawData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:743 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajValid (-185)
/* complex XSD type 'witsml2:StnTrajValid': */
class SOAP_CMAC witsml2__StnTrajValid {
      public:
        /// Optional element 'witsml2:MagTotalFieldCalc' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTotalFieldCalc;
        /// Optional element 'witsml2:MagDipAngleCalc' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *MagDipAngleCalc;
        /// Optional element 'witsml2:GravTotalFieldCalc' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTotalFieldCalc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajValid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajValid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StnTrajValid, default initialized and not managed by a soap context
        virtual witsml2__StnTrajValid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StnTrajValid); }
      public:
        /// Constructor with initializations
        witsml2__StnTrajValid() : MagTotalFieldCalc(), MagDipAngleCalc(), GravTotalFieldCalc(), soap() { }
        virtual ~witsml2__StnTrajValid() { }
        /// Friend allocator used by soap_new_witsml2__StnTrajValid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StnTrajValid * SOAP_FMAC2 soap_instantiate_witsml2__StnTrajValid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:749 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajectoryStation (-187)
/* complex XSD type 'witsml2:TrajectoryStation': */
class SOAP_CMAC witsml2__TrajectoryStation {
      public:
        /// Optional element 'witsml2:ManuallyEntered' of XSD type 'xsd:boolean'
        bool *ManuallyEntered;
        /// Optional element 'witsml2:Target' of XSD type 'eml22:String64'
        std::string *Target;
        /// Optional element 'witsml2:DTimStn' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStn;
        /// Required element 'witsml2:TypeTrajStation' of XSD type 'witsml2:TrajStationType'
        enum witsml2__TrajStationType TypeTrajStation;
        /// Optional element 'witsml2:TypeSurveyTool' of XSD type 'witsml2:TypeSurveyTool'
        enum witsml2__TypeSurveyTool *TypeSurveyTool;
        /// Optional element 'witsml2:CalcAlgorithm' of XSD type 'witsml2:TrajStnCalcAlgorithm'
        enum witsml2__TrajStnCalcAlgorithm *CalcAlgorithm;
        /// Required element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:Incl' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Incl;
        /// Optional element 'witsml2:Azi' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Azi;
        /// Optional element 'witsml2:Mtf' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Mtf;
        /// Optional element 'witsml2:Gtf' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Gtf;
        /// Optional element 'witsml2:DispNs' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DispNs;
        /// Optional element 'witsml2:DispEw' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DispEw;
        /// Optional element 'witsml2:VertSect' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *VertSect;
        /// Optional element 'witsml2:Dls' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *Dls;
        /// Optional element 'witsml2:RateTurn' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *RateTurn;
        /// Optional element 'witsml2:RateBuild' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *RateBuild;
        /// Optional element 'witsml2:MdDelta' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdDelta;
        /// Optional element 'witsml2:TvdDelta' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *TvdDelta;
        /// Optional element 'witsml2:GravTotalUncert' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTotalUncert;
        /// Optional element 'witsml2:DipAngleUncert' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *DipAngleUncert;
        /// Optional element 'witsml2:MagTotalUncert' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTotalUncert;
        /// Optional element 'witsml2:GravAccelCorUsed' of XSD type 'xsd:boolean'
        bool *GravAccelCorUsed;
        /// Optional element 'witsml2:MagXAxialCorUsed' of XSD type 'xsd:boolean'
        bool *MagXAxialCorUsed;
        /// Optional element 'witsml2:SagCorUsed' of XSD type 'xsd:boolean'
        bool *SagCorUsed;
        /// Optional element 'witsml2:MagDrlstrCorUsed' of XSD type 'xsd:boolean'
        bool *MagDrlstrCorUsed;
        /// Optional element 'witsml2:InfieldRefCorUsed' of XSD type 'xsd:boolean'
        bool *InfieldRefCorUsed;
        /// Optional element 'witsml2:InterpolatedInfieldRefCorUsed' of XSD type 'xsd:boolean'
        bool *InterpolatedInfieldRefCorUsed;
        /// Optional element 'witsml2:InHoleRefCorUsed' of XSD type 'xsd:boolean'
        bool *InHoleRefCorUsed;
        /// Optional element 'witsml2:AxialMagInterferenceCorUsed' of XSD type 'xsd:boolean'
        bool *AxialMagInterferenceCorUsed;
        /// Optional element 'witsml2:CosagCorUsed' of XSD type 'xsd:boolean'
        bool *CosagCorUsed;
        /// Optional element 'witsml2:MSACorUsed' of XSD type 'xsd:boolean'
        bool *MSACorUsed;
        /// Optional element 'witsml2:GravTotalFieldReference' of XSD type 'eml22:LinearAccelerationMeasure'
        eml22__LinearAccelerationMeasure *GravTotalFieldReference;
        /// Optional element 'witsml2:MagTotalFieldReference' of XSD type 'eml22:MagneticFluxDensityMeasure'
        eml22__MagneticFluxDensityMeasure *MagTotalFieldReference;
        /// Optional element 'witsml2:MagDipAngleReference' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *MagDipAngleReference;
        /// Optional element 'witsml2:MagModelUsed' of XSD type 'eml22:String64'
        std::string *MagModelUsed;
        /// Optional element 'witsml2:MagModelValid' of XSD type 'eml22:String64'
        std::string *MagModelValid;
        /// Optional element 'witsml2:GeoModelUsed' of XSD type 'eml22:String64'
        std::string *GeoModelUsed;
        /// Optional element 'witsml2:StatusTrajStation' of XSD type 'witsml2:TrajStationStatus'
        enum witsml2__TrajStationStatus *StatusTrajStation;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Valid' of XSD type 'witsml2:StnTrajValid'
        witsml2__StnTrajValid *Valid;
        /// Optional element 'witsml2:MatrixCov' of XSD type 'witsml2:StnTrajMatrixCov'
        witsml2__StnTrajMatrixCov *MatrixCov;
        /// Optional element 'witsml2:Location' of XSD type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> Location;
        /// Optional element 'witsml2:SourceStation' of XSD type 'witsml2:RefWellboreTrajectoryStation'
        witsml2__RefWellboreTrajectoryStation *SourceStation;
        /// Optional element 'witsml2:RawData' of XSD type 'witsml2:StnTrajRawData'
        witsml2__StnTrajRawData *RawData;
        /// Optional element 'witsml2:CorUsed' of XSD type 'witsml2:StnTrajCorUsed'
        witsml2__StnTrajCorUsed *CorUsed;
        /// Optional element 'witsml2:IscwsaToolErrorModel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *IscwsaToolErrorModel;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TrajectoryStation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TrajectoryStation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TrajectoryStation, default initialized and not managed by a soap context
        virtual witsml2__TrajectoryStation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TrajectoryStation); }
      public:
        /// Constructor with initializations
        witsml2__TrajectoryStation() : ManuallyEntered(), Target(), DTimStn(), TypeTrajStation(), TypeSurveyTool(), CalcAlgorithm(), Md(), Tvd(), Incl(), Azi(), Mtf(), Gtf(), DispNs(), DispEw(), VertSect(), Dls(), RateTurn(), RateBuild(), MdDelta(), TvdDelta(), GravTotalUncert(), DipAngleUncert(), MagTotalUncert(), GravAccelCorUsed(), MagXAxialCorUsed(), SagCorUsed(), MagDrlstrCorUsed(), InfieldRefCorUsed(), InterpolatedInfieldRefCorUsed(), InHoleRefCorUsed(), AxialMagInterferenceCorUsed(), CosagCorUsed(), MSACorUsed(), GravTotalFieldReference(), MagTotalFieldReference(), MagDipAngleReference(), MagModelUsed(), MagModelValid(), GeoModelUsed(), StatusTrajStation(), ExtensionNameValue(), Valid(), MatrixCov(), Location(), SourceStation(), RawData(), CorUsed(), IscwsaToolErrorModel(), uid(), soap() { }
        virtual ~witsml2__TrajectoryStation() { }
        /// Friend allocator used by soap_new_witsml2__TrajectoryStation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TrajectoryStation * SOAP_FMAC2 soap_instantiate_witsml2__TrajectoryStation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:752 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractOperatingRange (-188)
/* Type witsml2__AbstractOperatingRange is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AbstractOperatingRange': */
class SOAP_CMAC witsml2__AbstractOperatingRange {
      public:
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Required element 'witsml2:Max' of XSD type 'xsd:double'
        double Max;
        /// Required element 'witsml2:Min' of XSD type 'xsd:double'
        double Min;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractOperatingRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractOperatingRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AbstractOperatingRange, default initialized and not managed by a soap context
        virtual witsml2__AbstractOperatingRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AbstractOperatingRange); }
      public:
        /// Constructor with initializations
        witsml2__AbstractOperatingRange() : Comment(), Max(), Min(), soap() { }
        virtual ~witsml2__AbstractOperatingRange() { }
        /// Friend allocator used by soap_new_witsml2__AbstractOperatingRange(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AbstractOperatingRange * SOAP_FMAC2 soap_instantiate_witsml2__AbstractOperatingRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:755 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Authorization
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Authorization (-189)
/* complex XSD type 'witsml2:Authorization': */
class SOAP_CMAC witsml2__Authorization {
      public:
        /// Required element 'witsml2:ApprovalAuthority' of XSD type 'eml22:String64'
        std::string ApprovalAuthority;
        /// Optional element 'witsml2:ApprovedBy' of XSD type 'eml22:String64'
        std::string *ApprovedBy;
        /// Optional element 'witsml2:ApprovedOn' of XSD type 'eml22:TimeStamp'
        struct tm *ApprovedOn;
        /// Optional element 'witsml2:CheckedBy' of XSD type 'eml22:String64'
        std::string *CheckedBy;
        /// Optional element 'witsml2:CheckedOn' of XSD type 'eml22:TimeStamp'
        struct tm *CheckedOn;
        /// Optional element 'witsml2:RevisionComment' of XSD type 'eml22:String2000'
        std::string *RevisionComment;
        /// Optional element 'witsml2:RevisionDate' of XSD type 'eml22:TimeStamp'
        struct tm *RevisionDate;
        /// Optional element 'witsml2:Status' of XSD type 'witsml2:AuthorizationStatus'
        enum witsml2__AuthorizationStatus *Status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Authorization
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Authorization; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Authorization, default initialized and not managed by a soap context
        virtual witsml2__Authorization *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Authorization); }
      public:
        /// Constructor with initializations
        witsml2__Authorization() : ApprovalAuthority(), ApprovedBy(), ApprovedOn(), CheckedBy(), CheckedOn(), RevisionComment(), RevisionDate(), Status(), soap() { }
        virtual ~witsml2__Authorization() { }
        /// Friend allocator used by soap_new_witsml2__Authorization(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Authorization * SOAP_FMAC2 soap_instantiate_witsml2__Authorization(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:758 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthFormula (-190)
/* Type witsml2__AzimuthFormula is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AzimuthFormula': */
class SOAP_CMAC witsml2__AzimuthFormula {
      public:
        /// Required element 'witsml2:Formula' of XSD type 'eml22:String2000'
        std::string Formula;
        /// Optional element 'witsml2:Parameter' of XSD type 'witsml2:Parameter'
        std::vector<witsml2__Parameter *> Parameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthFormula
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthFormula; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AzimuthFormula, default initialized and not managed by a soap context
        virtual witsml2__AzimuthFormula *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AzimuthFormula); }
      public:
        /// Constructor with initializations
        witsml2__AzimuthFormula() : Formula(), Parameter(), soap() { }
        virtual ~witsml2__AzimuthFormula() { }
        /// Friend allocator used by soap_new_witsml2__AzimuthFormula(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AzimuthFormula * SOAP_FMAC2 soap_instantiate_witsml2__AzimuthFormula(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:776 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermValue (-196)
/* complex XSD type 'witsml2:ErrorTermValue': */
class SOAP_CMAC witsml2__ErrorTermValue {
      public:
        /// Required element 'witsml2:Magnitude' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *Magnitude;
        /// Optional element 'witsml2:MeanValue' of XSD type 'eml22:GenericMeasure'
        eml22__GenericMeasure *MeanValue;
        /// Required element 'witsml2:ErrorTerm' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ErrorTerm;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ErrorTermValue, default initialized and not managed by a soap context
        virtual witsml2__ErrorTermValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ErrorTermValue); }
      public:
        /// Constructor with initializations
        witsml2__ErrorTermValue() : Magnitude(), MeanValue(), ErrorTerm(), soap() { }
        virtual ~witsml2__ErrorTermValue() { }
        /// Friend allocator used by soap_new_witsml2__ErrorTermValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ErrorTermValue * SOAP_FMAC2 soap_instantiate_witsml2__ErrorTermValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:779 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Gyro
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Gyro (-197)
/* complex XSD type 'witsml2:Gyro': */
class SOAP_CMAC witsml2__Gyro {
      public:
        /// Required element 'witsml2:AxisCombination' of XSD type 'witsml2:GyroAxisCombination'
        enum witsml2__GyroAxisCombination AxisCombination;
        /// Required element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:GyroReinitializationDistance' of XSD type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *GyroReinitializationDistance;
        /// Required element 'witsml2:Mode' of XSD type 'witsml2:GyroMode'
        enum witsml2__GyroMode Mode;
        /// Optional element 'witsml2:Speed' of XSD type 'eml22:LengthPerTimeMeasureExt'
        eml22__LengthPerTimeMeasureExt *Speed;
        /// Required element 'witsml2:Start' of XSD type 'eml22:PlaneAngleMeasureExt'
        eml22__PlaneAngleMeasureExt *Start;
        /// Required element 'witsml2:End' of XSD type 'eml22:PlaneAngleMeasureExt'
        eml22__PlaneAngleMeasureExt *End;
        /// Required element 'witsml2:Initialization' of XSD type 'eml22:PlaneAngleMeasureExt'
        eml22__PlaneAngleMeasureExt *Initialization;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Gyro
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Gyro; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Gyro, default initialized and not managed by a soap context
        virtual witsml2__Gyro *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Gyro); }
      public:
        /// Constructor with initializations
        witsml2__Gyro() : AxisCombination(), ExtensionNameValue(), GyroReinitializationDistance(), Mode(), Speed(), Start(), End(), Initialization(), soap() { }
        virtual ~witsml2__Gyro() { }
        /// Friend allocator used by soap_new_witsml2__Gyro(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Gyro * SOAP_FMAC2 soap_instantiate_witsml2__Gyro(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:782 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GyroToolConfiguration
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GyroToolConfiguration (-198)
/* complex XSD type 'witsml2:GyroToolConfiguration': */
class SOAP_CMAC witsml2__GyroToolConfiguration {
      public:
        /// Optional element 'witsml2:AccelerometerAxisCombination' of XSD type 'witsml2:AccelerometerAxisCombination'
        enum witsml2__AccelerometerAxisCombination *AccelerometerAxisCombination;
        /// Optional element 'witsml2:GyroReinitializationDistance' of XSD type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *GyroReinitializationDistance;
        /// Optional element 'witsml2:NoiseReductionFactor' of XSD type 'xsd:double'
        double *NoiseReductionFactor;
        /// Optional element 'witsml2:ExternalReference' of XSD type 'xsd:boolean'
        bool *ExternalReference;
        /// Optional element 'witsml2:Gyro' of XSD type 'witsml2:Gyro'
        std::vector<witsml2__Gyro *> Gyro;
        /// Optional element 'witsml2:XyAccelerometer' of XSD type 'witsml2:XyAccelerometer'
        witsml2__XyAccelerometer *XyAccelerometer;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GyroToolConfiguration
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GyroToolConfiguration; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GyroToolConfiguration, default initialized and not managed by a soap context
        virtual witsml2__GyroToolConfiguration *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GyroToolConfiguration); }
      public:
        /// Constructor with initializations
        witsml2__GyroToolConfiguration() : AccelerometerAxisCombination(), GyroReinitializationDistance(), NoiseReductionFactor(), ExternalReference(), Gyro(), XyAccelerometer(), soap() { }
        virtual ~witsml2__GyroToolConfiguration() { }
        /// Friend allocator used by soap_new_witsml2__GyroToolConfiguration(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GyroToolConfiguration * SOAP_FMAC2 soap_instantiate_witsml2__GyroToolConfiguration(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:785 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConstraints
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConstraints (-199)
/* complex XSD type 'witsml2:OperatingConstraints': */
class SOAP_CMAC witsml2__OperatingConstraints {
      public:
        /// Optional element 'witsml2:CustomLimits' of XSD type 'eml22:GenericMeasure'
        std::vector<eml22__GenericMeasure *> CustomLimits;
        /// Optional element 'witsml2:HorizontalEastWestMaxValue' of XSD type 'eml22:PlaneAngleMeasureExt'
        eml22__PlaneAngleMeasureExt *HorizontalEastWestMaxValue;
        /// Optional element 'witsml2:MdRange' of XSD type 'eml22:MdInterval'
        std::vector<eml22__MdInterval *> MdRange;
        /// Optional element 'witsml2:TvdRange' of XSD type 'eml22:TvdInterval'
        std::vector<eml22__TvdInterval *> TvdRange;
        /// Optional element 'witsml2:PressureLimit' of XSD type 'eml22:PressureMeasureExt'
        eml22__PressureMeasureExt *PressureLimit;
        /// Optional element 'witsml2:ThermodynamicTemperatureLimit' of XSD type 'eml22:ThermodynamicTemperatureMeasureExt'
        eml22__ThermodynamicTemperatureMeasureExt *ThermodynamicTemperatureLimit;
        /// Optional element 'witsml2:LatitudeRange' of XSD type 'witsml2:PlaneAngleOperatingRange'
        std::vector<witsml2__PlaneAngleOperatingRange *> LatitudeRange;
        /// Optional element 'witsml2:CustomRange' of XSD type 'witsml2:CustomOperatingRange'
        std::vector<witsml2__CustomOperatingRange *> CustomRange;
        /// Optional element 'witsml2:AzimuthRange' of XSD type 'witsml2:AzimuthRange'
        std::vector<witsml2__AzimuthRange *> AzimuthRange;
        /// Optional element 'witsml2:InclinationRange' of XSD type 'witsml2:PlaneAngleOperatingRange'
        std::vector<witsml2__PlaneAngleOperatingRange *> InclinationRange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConstraints
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConstraints; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OperatingConstraints, default initialized and not managed by a soap context
        virtual witsml2__OperatingConstraints *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OperatingConstraints); }
      public:
        /// Constructor with initializations
        witsml2__OperatingConstraints() : CustomLimits(), HorizontalEastWestMaxValue(), MdRange(), TvdRange(), PressureLimit(), ThermodynamicTemperatureLimit(), LatitudeRange(), CustomRange(), AzimuthRange(), InclinationRange(), soap() { }
        virtual ~witsml2__OperatingConstraints() { }
        /// Friend allocator used by soap_new_witsml2__OperatingConstraints(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OperatingConstraints * SOAP_FMAC2 soap_instantiate_witsml2__OperatingConstraints(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:788 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Parameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Parameter (-200)
/* complex XSD type 'witsml2:Parameter': */
class SOAP_CMAC witsml2__Parameter {
      public:
        /// Required element 'witsml2:Formula' of XSD type 'eml22:String2000'
        std::string Formula;
        /// Required element 'witsml2:Title' of XSD type 'eml22:String64'
        std::string Title;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Parameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Parameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Parameter, default initialized and not managed by a soap context
        virtual witsml2__Parameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Parameter); }
      public:
        /// Constructor with initializations
        witsml2__Parameter() : Formula(), Title(), soap() { }
        virtual ~witsml2__Parameter() { }
        /// Friend allocator used by soap_new_witsml2__Parameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Parameter * SOAP_FMAC2 soap_instantiate_witsml2__Parameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:806 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__XyAccelerometer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__XyAccelerometer (-206)
/* complex XSD type 'witsml2:XyAccelerometer': */
class SOAP_CMAC witsml2__XyAccelerometer {
      public:
        /// Required element 'witsml2:CantAngle' of XSD type 'eml22:PlaneAngleMeasureExt'
        eml22__PlaneAngleMeasureExt *CantAngle;
        /// Required element 'witsml2:Switching' of XSD type 'xsd:boolean'
        bool Switching;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__XyAccelerometer
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__XyAccelerometer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__XyAccelerometer, default initialized and not managed by a soap context
        virtual witsml2__XyAccelerometer *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__XyAccelerometer); }
      public:
        /// Constructor with initializations
        witsml2__XyAccelerometer() : CantAngle(), Switching(), soap() { }
        virtual ~witsml2__XyAccelerometer() { }
        /// Friend allocator used by soap_new_witsml2__XyAccelerometer(struct soap*, int)
        friend SOAP_FMAC1 witsml2__XyAccelerometer * SOAP_FMAC2 soap_instantiate_witsml2__XyAccelerometer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:809 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Bop
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Bop (-207)
/* complex XSD type 'witsml2:Bop': */
class SOAP_CMAC witsml2__Bop {
      public:
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:TypeConnectionBop' of XSD type 'eml22:String64'
        std::string *TypeConnectionBop;
        /// Optional element 'witsml2:SizeConnectionBop' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeConnectionBop;
        /// Required element 'witsml2:PresBopRating' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBopRating;
        /// Required element 'witsml2:SizeBopSys' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeBopSys;
        /// Optional element 'witsml2:RotBop' of XSD type 'xsd:boolean'
        bool *RotBop;
        /// Optional element 'witsml2:IdBoosterLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdBoosterLine;
        /// Optional element 'witsml2:OdBoosterLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdBoosterLine;
        /// Optional element 'witsml2:LenBoosterLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenBoosterLine;
        /// Optional element 'witsml2:IdSurfLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdSurfLine;
        /// Optional element 'witsml2:OdSurfLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdSurfLine;
        /// Optional element 'witsml2:LenSurfLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenSurfLine;
        /// Optional element 'witsml2:IdChkLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdChkLine;
        /// Optional element 'witsml2:OdChkLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdChkLine;
        /// Optional element 'witsml2:LenChkLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenChkLine;
        /// Optional element 'witsml2:IdKillLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdKillLine;
        /// Optional element 'witsml2:OdKillLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdKillLine;
        /// Optional element 'witsml2:LenKillLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenKillLine;
        /// Optional element 'witsml2:TypeDiverter' of XSD type 'eml22:String64'
        std::string *TypeDiverter;
        /// Optional element 'witsml2:DiaDiverter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaDiverter;
        /// Optional element 'witsml2:PresWorkDiverter' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresWorkDiverter;
        /// Optional element 'witsml2:Accumulator' of XSD type 'eml22:String64'
        std::string *Accumulator;
        /// Optional element 'witsml2:CapAccFluid' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapAccFluid;
        /// Optional element 'witsml2:PresAccPreCharge' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresAccPreCharge;
        /// Optional element 'witsml2:VolAccPreCharge' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolAccPreCharge;
        /// Optional element 'witsml2:PresAccOpRating' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresAccOpRating;
        /// Optional element 'witsml2:TypeControlManifold' of XSD type 'eml22:String64'
        std::string *TypeControlManifold;
        /// Optional element 'witsml2:DescControlManifold' of XSD type 'eml22:String2000'
        std::string *DescControlManifold;
        /// Optional element 'witsml2:TypeChokeManifold' of XSD type 'eml22:String64'
        std::string *TypeChokeManifold;
        /// Optional element 'witsml2:PresChokeManifold' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresChokeManifold;
        /// Optional element 'witsml2:BopComponent' of XSD type 'witsml2:BopComponent'
        std::vector<witsml2__BopComponent *> BopComponent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Bop
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Bop; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Bop, default initialized and not managed by a soap context
        virtual witsml2__Bop *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Bop); }
      public:
        /// Constructor with initializations
        witsml2__Bop() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), NameTag(), TypeConnectionBop(), SizeConnectionBop(), PresBopRating(), SizeBopSys(), RotBop(), IdBoosterLine(), OdBoosterLine(), LenBoosterLine(), IdSurfLine(), OdSurfLine(), LenSurfLine(), IdChkLine(), OdChkLine(), LenChkLine(), IdKillLine(), OdKillLine(), LenKillLine(), TypeDiverter(), DiaDiverter(), PresWorkDiverter(), Accumulator(), CapAccFluid(), PresAccPreCharge(), VolAccPreCharge(), PresAccOpRating(), TypeControlManifold(), DescControlManifold(), TypeChokeManifold(), PresChokeManifold(), BopComponent(), soap() { }
        virtual ~witsml2__Bop() { }
        /// Friend allocator used by soap_new_witsml2__Bop(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Bop * SOAP_FMAC2 soap_instantiate_witsml2__Bop(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:812 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BopComponent (-208)
/* complex XSD type 'witsml2:BopComponent': */
class SOAP_CMAC witsml2__BopComponent {
      public:
        /// Optional element 'witsml2:TypeBopComp' of XSD type 'witsml2:BopType'
        enum witsml2__BopType *TypeBopComp;
        /// Optional element 'witsml2:DescComp' of XSD type 'eml22:String64'
        std::string *DescComp;
        /// Optional element 'witsml2:IdPassThru' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdPassThru;
        /// Optional element 'witsml2:PresWork' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresWork;
        /// Optional element 'witsml2:DiaCloseMn' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaCloseMn;
        /// Optional element 'witsml2:DiaCloseMx' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaCloseMx;
        /// Optional element 'witsml2:Nomenclature' of XSD type 'eml22:String64'
        std::string *Nomenclature;
        /// Optional element 'witsml2:IsVariable' of XSD type 'xsd:boolean'
        bool *IsVariable;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BopComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BopComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BopComponent, default initialized and not managed by a soap context
        virtual witsml2__BopComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BopComponent); }
      public:
        /// Constructor with initializations
        witsml2__BopComponent() : TypeBopComp(), DescComp(), IdPassThru(), PresWork(), DiaCloseMn(), DiaCloseMx(), Nomenclature(), IsVariable(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__BopComponent() { }
        /// Friend allocator used by soap_new_witsml2__BopComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BopComponent * SOAP_FMAC2 soap_instantiate_witsml2__BopComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:815 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Centrifuge (-209)
/* complex XSD type 'witsml2:Centrifuge': */
class SOAP_CMAC witsml2__Centrifuge {
      public:
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:CapFlow' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *CapFlow;
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Centrifuge
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Centrifuge; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Centrifuge, default initialized and not managed by a soap context
        virtual witsml2__Centrifuge *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Centrifuge); }
      public:
        /// Constructor with initializations
        witsml2__Centrifuge() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), CapFlow(), Owner(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Centrifuge() { }
        /// Friend allocator used by soap_new_witsml2__Centrifuge(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Centrifuge * SOAP_FMAC2 soap_instantiate_witsml2__Centrifuge(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:818 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Degasser (-210)
/* complex XSD type 'witsml2:Degasser': */
class SOAP_CMAC witsml2__Degasser {
      public:
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:Height' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Height;
        /// Optional element 'witsml2:Len' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Len;
        /// Optional element 'witsml2:Id' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Id;
        /// Optional element 'witsml2:CapFlow' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *CapFlow;
        /// Optional element 'witsml2:AreaSeparatorFlow' of XSD type 'eml22:AreaMeasure'
        eml22__AreaMeasure *AreaSeparatorFlow;
        /// Optional element 'witsml2:HtMudSeal' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtMudSeal;
        /// Optional element 'witsml2:IdInlet' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdInlet;
        /// Optional element 'witsml2:IdVentLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdVentLine;
        /// Optional element 'witsml2:LenVentLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenVentLine;
        /// Optional element 'witsml2:CapGasSep' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *CapGasSep;
        /// Optional element 'witsml2:CapBlowdown' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *CapBlowdown;
        /// Optional element 'witsml2:PresRating' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresRating;
        /// Optional element 'witsml2:TempRating' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TempRating;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Degasser
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Degasser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Degasser, default initialized and not managed by a soap context
        virtual witsml2__Degasser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Degasser); }
      public:
        /// Constructor with initializations
        witsml2__Degasser() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), Owner(), Height(), Len(), Id(), CapFlow(), AreaSeparatorFlow(), HtMudSeal(), IdInlet(), IdVentLine(), LenVentLine(), CapGasSep(), CapBlowdown(), PresRating(), TempRating(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Degasser() { }
        /// Friend allocator used by soap_new_witsml2__Degasser(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Degasser * SOAP_FMAC2 soap_instantiate_witsml2__Degasser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:821 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Hydrocyclone (-211)
/* complex XSD type 'witsml2:Hydrocyclone': */
class SOAP_CMAC witsml2__Hydrocyclone {
      public:
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:DescCone' of XSD type 'eml22:String64'
        std::string *DescCone;
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Hydrocyclone
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Hydrocyclone; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Hydrocyclone, default initialized and not managed by a soap context
        virtual witsml2__Hydrocyclone *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Hydrocyclone); }
      public:
        /// Constructor with initializations
        witsml2__Hydrocyclone() : Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), DescCone(), Owner(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Hydrocyclone() { }
        /// Friend allocator used by soap_new_witsml2__Hydrocyclone(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Hydrocyclone * SOAP_FMAC2 soap_instantiate_witsml2__Hydrocyclone(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:824 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudPump (-212)
/* complex XSD type 'witsml2:MudPump': */
class SOAP_CMAC witsml2__MudPump {
      public:
        /// Required element 'witsml2:Index' of XSD type 'xsd:int'
        int Index;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:TypePump' of XSD type 'witsml2:PumpType'
        enum witsml2__PumpType *TypePump;
        /// Optional element 'witsml2:NumCyl' of XSD type 'xsd:int'
        int *NumCyl;
        /// Optional element 'witsml2:OdRod' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdRod;
        /// Required element 'witsml2:IdLiner' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdLiner;
        /// Optional element 'witsml2:PumpAction' of XSD type 'witsml2:PumpActionIntegerCode'
        short *PumpAction;
        /// Optional element 'witsml2:Eff' of XSD type 'eml22:PowerPerPowerMeasure'
        eml22__PowerPerPowerMeasure *Eff;
        /// Optional element 'witsml2:LenStroke' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenStroke;
        /// Optional element 'witsml2:PresMx' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresMx;
        /// Optional element 'witsml2:PowHydMx' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *PowHydMx;
        /// Optional element 'witsml2:SpmMx' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *SpmMx;
        /// Required element 'witsml2:Displacement' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Displacement;
        /// Optional element 'witsml2:PresDamp' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresDamp;
        /// Optional element 'witsml2:VolDamp' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolDamp;
        /// Optional element 'witsml2:PowMechMx' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *PowMechMx;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudPump
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudPump; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudPump, default initialized and not managed by a soap context
        virtual witsml2__MudPump *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudPump); }
      public:
        /// Constructor with initializations
        witsml2__MudPump() : Index(), Manufacturer(), Model(), DTimInstall(), DTimRemove(), Owner(), TypePump(), NumCyl(), OdRod(), IdLiner(), PumpAction(), Eff(), LenStroke(), PresMx(), PowHydMx(), SpmMx(), Displacement(), PresDamp(), VolDamp(), PowMechMx(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__MudPump() { }
        /// Friend allocator used by soap_new_witsml2__MudPump(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudPump * SOAP_FMAC2 soap_instantiate_witsml2__MudPump(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:827 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Pit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Pit (-213)
/* complex XSD type 'witsml2:Pit': */
class SOAP_CMAC witsml2__Pit {
      public:
        /// Required element 'witsml2:Index' of XSD type 'xsd:int'
        int Index;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Required element 'witsml2:CapMx' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapMx;
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:TypePit' of XSD type 'witsml2:PitType'
        enum witsml2__PitType *TypePit;
        /// Optional element 'witsml2:IsActive' of XSD type 'xsd:boolean'
        bool *IsActive;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Pit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Pit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Pit, default initialized and not managed by a soap context
        virtual witsml2__Pit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Pit); }
      public:
        /// Constructor with initializations
        witsml2__Pit() : Index(), DTimInstall(), DTimRemove(), CapMx(), Owner(), TypePit(), IsActive(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Pit() { }
        /// Friend allocator used by soap_new_witsml2__Pit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Pit * SOAP_FMAC2 soap_instantiate_witsml2__Pit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:836 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Shaker (-216)
/* complex XSD type 'witsml2:Shaker': */
class SOAP_CMAC witsml2__Shaker {
      public:
        /// Required element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:Model' of XSD type 'eml22:String64'
        std::string *Model;
        /// Optional element 'witsml2:DTimInstall' of XSD type 'eml22:TimeStamp'
        struct tm *DTimInstall;
        /// Optional element 'witsml2:DTimRemove' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRemove;
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:LocationShaker' of XSD type 'eml22:String64'
        std::string *LocationShaker;
        /// Optional element 'witsml2:NumDecks' of XSD type 'xsd:int'
        int *NumDecks;
        /// Optional element 'witsml2:NumCascLevel' of XSD type 'xsd:int'
        int *NumCascLevel;
        /// Optional element 'witsml2:MudCleaner' of XSD type 'xsd:boolean'
        bool *MudCleaner;
        /// Optional element 'witsml2:CapFlow' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *CapFlow;
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:SizeMeshMn' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeMeshMn;
        /// Optional element 'witsml2:NameTag' of XSD type 'witsml2:NameTag'
        std::vector<witsml2__NameTag *> NameTag;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Shaker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Shaker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Shaker, default initialized and not managed by a soap context
        virtual witsml2__Shaker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Shaker); }
      public:
        /// Constructor with initializations
        witsml2__Shaker() : Name(), Manufacturer(), Model(), DTimInstall(), DTimRemove(), Type(), LocationShaker(), NumDecks(), NumCascLevel(), MudCleaner(), CapFlow(), Owner(), SizeMeshMn(), NameTag(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__Shaker() { }
        /// Friend allocator used by soap_new_witsml2__Shaker(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Shaker * SOAP_FMAC2 soap_instantiate_witsml2__Shaker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:839 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurfaceEquipment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurfaceEquipment (-217)
/* complex XSD type 'witsml2:SurfaceEquipment': */
class SOAP_CMAC witsml2__SurfaceEquipment {
      public:
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:PresRating' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresRating;
        /// Required element 'witsml2:TypeSurfEquip' of XSD type 'witsml2:SurfEquipType'
        enum witsml2__SurfEquipType TypeSurfEquip;
        /// Optional element 'witsml2:UsePumpDischarge' of XSD type 'xsd:boolean'
        bool *UsePumpDischarge;
        /// Optional element 'witsml2:UseStandpipe' of XSD type 'xsd:boolean'
        bool *UseStandpipe;
        /// Optional element 'witsml2:UseHose' of XSD type 'xsd:boolean'
        bool *UseHose;
        /// Optional element 'witsml2:UseSwivel' of XSD type 'xsd:boolean'
        bool *UseSwivel;
        /// Optional element 'witsml2:UseKelly' of XSD type 'xsd:boolean'
        bool *UseKelly;
        /// Optional element 'witsml2:UseTopStack' of XSD type 'xsd:boolean'
        bool *UseTopStack;
        /// Optional element 'witsml2:UseInjStack' of XSD type 'xsd:boolean'
        bool *UseInjStack;
        /// Optional element 'witsml2:UseSurfaceIron' of XSD type 'xsd:boolean'
        bool *UseSurfaceIron;
        /// Optional element 'witsml2:IdStandpipe' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdStandpipe;
        /// Optional element 'witsml2:LenStandpipe' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenStandpipe;
        /// Optional element 'witsml2:IdHose' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdHose;
        /// Optional element 'witsml2:LenHose' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenHose;
        /// Optional element 'witsml2:IdSwivel' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdSwivel;
        /// Optional element 'witsml2:LenSwivel' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenSwivel;
        /// Optional element 'witsml2:IdKelly' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdKelly;
        /// Optional element 'witsml2:LenKelly' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenKelly;
        /// Optional element 'witsml2:IdSurfaceIron' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdSurfaceIron;
        /// Optional element 'witsml2:LenSurfaceIron' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenSurfaceIron;
        /// Optional element 'witsml2:HtSurfaceIron' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtSurfaceIron;
        /// Optional element 'witsml2:IdDischargeLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdDischargeLine;
        /// Optional element 'witsml2:LenDischargeLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenDischargeLine;
        /// Optional element 'witsml2:CtWrapType' of XSD type 'eml22:String64'
        std::string *CtWrapType;
        /// Optional element 'witsml2:OdReel' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdReel;
        /// Optional element 'witsml2:OdCore' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdCore;
        /// Optional element 'witsml2:WidReelWrap' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *WidReelWrap;
        /// Optional element 'witsml2:LenReel' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenReel;
        /// Optional element 'witsml2:InjStkUp' of XSD type 'xsd:boolean'
        bool *InjStkUp;
        /// Optional element 'witsml2:HtInjStk' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtInjStk;
        /// Optional element 'witsml2:UmbInside' of XSD type 'xsd:boolean'
        bool *UmbInside;
        /// Optional element 'witsml2:OdUmbilical' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OdUmbilical;
        /// Optional element 'witsml2:LenUmbilical' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LenUmbilical;
        /// Optional element 'witsml2:IdTopStk' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *IdTopStk;
        /// Optional element 'witsml2:HtTopStk' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtTopStk;
        /// Optional element 'witsml2:HtFlange' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtFlange;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__SurfaceEquipment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__SurfaceEquipment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SurfaceEquipment, default initialized and not managed by a soap context
        virtual witsml2__SurfaceEquipment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SurfaceEquipment); }
      public:
        /// Constructor with initializations
        witsml2__SurfaceEquipment() : Description(), PresRating(), TypeSurfEquip(), UsePumpDischarge(), UseStandpipe(), UseHose(), UseSwivel(), UseKelly(), UseTopStack(), UseInjStack(), UseSurfaceIron(), IdStandpipe(), LenStandpipe(), IdHose(), LenHose(), IdSwivel(), LenSwivel(), IdKelly(), LenKelly(), IdSurfaceIron(), LenSurfaceIron(), HtSurfaceIron(), IdDischargeLine(), LenDischargeLine(), CtWrapType(), OdReel(), OdCore(), WidReelWrap(), LenReel(), InjStkUp(), HtInjStk(), UmbInside(), OdUmbilical(), LenUmbilical(), IdTopStk(), HtTopStk(), HtFlange(), soap() { }
        virtual ~witsml2__SurfaceEquipment() { }
        /// Friend allocator used by soap_new_witsml2__SurfaceEquipment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SurfaceEquipment * SOAP_FMAC2 soap_instantiate_witsml2__SurfaceEquipment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:845 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2CrushTestData (-219)
/* complex XSD type 'witsml2:ISO13503_2CrushTestData': */
class SOAP_CMAC witsml2__ISO13503_USCORE2CrushTestData {
      public:
        /// Required element 'witsml2:Fines' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *Fines;
        /// Required element 'witsml2:Stress' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Stress;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2CrushTestData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2CrushTestData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ISO13503_USCORE2CrushTestData, default initialized and not managed by a soap context
        virtual witsml2__ISO13503_USCORE2CrushTestData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ISO13503_USCORE2CrushTestData); }
      public:
        /// Constructor with initializations
        witsml2__ISO13503_USCORE2CrushTestData() : Fines(), Stress(), uid(), soap() { }
        virtual ~witsml2__ISO13503_USCORE2CrushTestData() { }
        /// Friend allocator used by soap_new_witsml2__ISO13503_USCORE2CrushTestData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ISO13503_USCORE2CrushTestData * SOAP_FMAC2 soap_instantiate_witsml2__ISO13503_USCORE2CrushTestData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:848 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2SieveAnalysisData (-220)
/* complex XSD type 'witsml2:ISO13503_2SieveAnalysisData': */
class SOAP_CMAC witsml2__ISO13503_USCORE2SieveAnalysisData {
      public:
        /// Required element 'witsml2:PercentRetained' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *PercentRetained;
        /// Required element 'witsml2:SieveNumber' of XSD type 'xsd:unsignedLong'
        ULONG64 SieveNumber;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2SieveAnalysisData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2SieveAnalysisData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ISO13503_USCORE2SieveAnalysisData, default initialized and not managed by a soap context
        virtual witsml2__ISO13503_USCORE2SieveAnalysisData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ISO13503_USCORE2SieveAnalysisData); }
      public:
        /// Constructor with initializations
        witsml2__ISO13503_USCORE2SieveAnalysisData() : PercentRetained(), SieveNumber(), uid(), soap() { }
        virtual ~witsml2__ISO13503_USCORE2SieveAnalysisData() { }
        /// Friend allocator used by soap_new_witsml2__ISO13503_USCORE2SieveAnalysisData(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ISO13503_USCORE2SieveAnalysisData * SOAP_FMAC2 soap_instantiate_witsml2__ISO13503_USCORE2SieveAnalysisData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:854 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimEvent (-222)
/* complex XSD type 'witsml2:StimEvent': */
class SOAP_CMAC witsml2__StimEvent {
      public:
        /// Required element 'witsml2:Number' of XSD type 'xsd:unsignedLong'
        ULONG64 Number;
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:NumStep' of XSD type 'xsd:unsignedLong'
        ULONG64 *NumStep;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimEvent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimEvent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimEvent, default initialized and not managed by a soap context
        virtual witsml2__StimEvent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimEvent); }
      public:
        /// Constructor with initializations
        witsml2__StimEvent() : Number(), DTim(), Comment(), NumStep(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimEvent() { }
        /// Friend allocator used by soap_new_witsml2__StimEvent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimEvent * SOAP_FMAC2 soap_instantiate_witsml2__StimEvent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:857 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTest (-223)
/* complex XSD type 'witsml2:StimFetTest': */
class SOAP_CMAC witsml2__StimFetTest {
      public:
        /// Optional element 'witsml2:AnalysisMethod' of XSD type 'witsml2:StimFetTestAnalysisMethod'
        std::vector<enum witsml2__StimFetTestAnalysisMethod> AnalysisMethod;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:EndPdlDuration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *EndPdlDuration;
        /// Optional element 'witsml2:FluidEfficiency' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *FluidEfficiency;
        /// Optional element 'witsml2:FractureCloseDuration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *FractureCloseDuration;
        /// Optional element 'witsml2:FractureClosePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FractureClosePres;
        /// Optional element 'witsml2:FractureExtensionPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FractureExtensionPres;
        /// Optional element 'witsml2:FractureGradient' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FractureGradient;
        /// Optional element 'witsml2:FractureLength' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FractureLength;
        /// Optional element 'witsml2:FractureWidth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FractureWidth;
        /// Optional element 'witsml2:NetPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *NetPres;
        /// Optional element 'witsml2:PdlCoef' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *PdlCoef;
        /// Optional element 'witsml2:PorePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PorePres;
        /// Optional element 'witsml2:PseudoRadialPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PseudoRadialPres;
        /// Optional element 'witsml2:ResidualPermeability' of XSD type 'eml22:PermeabilityRockMeasure'
        eml22__PermeabilityRockMeasure *ResidualPermeability;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimFetTest, default initialized and not managed by a soap context
        virtual witsml2__StimFetTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimFetTest); }
      public:
        /// Constructor with initializations
        witsml2__StimFetTest() : AnalysisMethod(), DTimStart(), DTimEnd(), EndPdlDuration(), FluidEfficiency(), FractureCloseDuration(), FractureClosePres(), FractureExtensionPres(), FractureGradient(), FractureLength(), FractureWidth(), NetPres(), PdlCoef(), PorePres(), PseudoRadialPres(), ResidualPermeability(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimFetTest() { }
        /// Friend allocator used by soap_new_witsml2__StimFetTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimFetTest * SOAP_FMAC2 soap_instantiate_witsml2__StimFetTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:860 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPath
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPath (-224)
/* complex XSD type 'witsml2:StimFlowPath': */
class SOAP_CMAC witsml2__StimFlowPath {
      public:
        /// Optional element 'witsml2:AvgPmaxPacPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPmaxPacPres;
        /// Optional element 'witsml2:FrictionFactorOpenHole' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *FrictionFactorOpenHole;
        /// Optional element 'witsml2:AvgPmaxWeaklinkPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPmaxWeaklinkPres;
        /// Optional element 'witsml2:BreakDownPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *BreakDownPres;
        /// Optional element 'witsml2:BridgePlugMD' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *BridgePlugMD;
        /// Optional element 'witsml2:FractureGradient' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FractureGradient;
        /// Optional element 'witsml2:Kind' of XSD type 'witsml2:StimFlowPathType'
        enum witsml2__StimFlowPathType *Kind;
        /// Optional element 'witsml2:MaxPmaxPacPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPmaxPacPres;
        /// Optional element 'witsml2:MaxPmaxWeaklinkPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPmaxWeaklinkPres;
        /// Optional element 'witsml2:PackerMD' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *PackerMD;
        /// Optional element 'witsml2:FrictionFactorPipe' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *FrictionFactorPipe;
        /// Optional element 'witsml2:TubingBottomMD' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *TubingBottomMD;
        /// Optional element 'witsml2:Tubular' of XSD type 'witsml2:StimTubular'
        std::vector<witsml2__StimTubular *> Tubular;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPath
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPath; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimFlowPath, default initialized and not managed by a soap context
        virtual witsml2__StimFlowPath *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimFlowPath); }
      public:
        /// Constructor with initializations
        witsml2__StimFlowPath() : AvgPmaxPacPres(), FrictionFactorOpenHole(), AvgPmaxWeaklinkPres(), BreakDownPres(), BridgePlugMD(), FractureGradient(), Kind(), MaxPmaxPacPres(), MaxPmaxWeaklinkPres(), PackerMD(), FrictionFactorPipe(), TubingBottomMD(), Tubular(), soap() { }
        virtual ~witsml2__StimFlowPath() { }
        /// Friend allocator used by soap_new_witsml2__StimFlowPath(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimFlowPath * SOAP_FMAC2 soap_instantiate_witsml2__StimFlowPath(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:863 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluid (-225)
/* complex XSD type 'witsml2:StimFluid': */
class SOAP_CMAC witsml2__StimFluid {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String2000'
        std::string *Name;
        /// Optional element 'witsml2:Kind' of XSD type 'witsml2:StimFluidKind'
        enum witsml2__StimFluidKind *Kind;
        /// Optional element 'witsml2:Subtype' of XSD type 'witsml2:StimFluidSubtype'
        enum witsml2__StimFluidSubtype *Subtype;
        /// Optional element 'witsml2:Purpose' of XSD type 'eml22:String2000'
        std::string *Purpose;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:Supplier' of XSD type 'eml22:String2000'
        std::string *Supplier;
        /// Optional element 'witsml2:IsKillFluid' of XSD type 'xsd:boolean'
        bool *IsKillFluid;
        /// Optional element 'witsml2:Volume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Volume;
        /// Optional element 'witsml2:Density' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:FluidTemp' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *FluidTemp;
        /// Optional element 'witsml2:GelStrength10Min' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *GelStrength10Min;
        /// Optional element 'witsml2:GelStrength10Sec' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *GelStrength10Sec;
        /// Optional element 'witsml2:SpecificGravity' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *SpecificGravity;
        /// Optional element 'witsml2:Viscosity' of XSD type 'eml22:DynamicViscosityMeasure'
        eml22__DynamicViscosityMeasure *Viscosity;
        /// Optional element 'witsml2:pH' of XSD type 'eml22:UnitlessMeasure'
        eml22__UnitlessMeasure *pH;
        /// Optional element 'witsml2:AdditiveConcentration' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> AdditiveConcentration;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimFluid, default initialized and not managed by a soap context
        virtual witsml2__StimFluid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimFluid); }
      public:
        /// Constructor with initializations
        witsml2__StimFluid() : Name(), Kind(), Subtype(), Purpose(), Description(), Supplier(), IsKillFluid(), Volume(), Density(), FluidTemp(), GelStrength10Min(), GelStrength10Sec(), SpecificGravity(), Viscosity(), pH(), AdditiveConcentration(), soap() { }
        virtual ~witsml2__StimFluid() { }
        /// Friend allocator used by soap_new_witsml2__StimFluid(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimFluid * SOAP_FMAC2 soap_instantiate_witsml2__StimFluid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:866 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE2Properties (-226)
/* complex XSD type 'witsml2:StimISO13503_2Properties': */
class SOAP_CMAC witsml2__StimISO13503_USCORE2Properties {
      public:
        /// Optional element 'witsml2:AbsoluteDensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AbsoluteDensity;
        /// Optional element 'witsml2:ClustersPercent' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *ClustersPercent;
        /// Optional element 'witsml2:KValue' of XSD type 'xsd:double'
        double *KValue;
        /// Optional element 'witsml2:MeanParticleDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MeanParticleDiameter;
        /// Optional element 'witsml2:MedianParticleDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MedianParticleDiameter;
        /// Optional element 'witsml2:SpecificGravity' of XSD type 'xsd:double'
        double *SpecificGravity;
        /// Optional element 'witsml2:Roundness' of XSD type 'xsd:double'
        double *Roundness;
        /// Optional element 'witsml2:AcidSolubility' of XSD type 'eml22:MassPerMassMeasure'
        eml22__MassPerMassMeasure *AcidSolubility;
        /// Optional element 'witsml2:ApparentDensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *ApparentDensity;
        /// Optional element 'witsml2:BulkDensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *BulkDensity;
        /// Optional element 'witsml2:LossOnIgnition' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *LossOnIgnition;
        /// Optional element 'witsml2:Sphericity' of XSD type 'xsd:double'
        double *Sphericity;
        /// Optional element 'witsml2:Turbidity' of XSD type 'xsd:double'
        double *Turbidity;
        /// Optional element 'witsml2:CrushTestData' of XSD type 'witsml2:ISO13503_2CrushTestData'
        std::vector<witsml2__ISO13503_USCORE2CrushTestData *> CrushTestData;
        /// Optional element 'witsml2:SieveAnalysisData' of XSD type 'witsml2:ISO13503_2SieveAnalysisData'
        std::vector<witsml2__ISO13503_USCORE2SieveAnalysisData *> SieveAnalysisData;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE2Properties
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE2Properties; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimISO13503_USCORE2Properties, default initialized and not managed by a soap context
        virtual witsml2__StimISO13503_USCORE2Properties *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimISO13503_USCORE2Properties); }
      public:
        /// Constructor with initializations
        witsml2__StimISO13503_USCORE2Properties() : AbsoluteDensity(), ClustersPercent(), KValue(), MeanParticleDiameter(), MedianParticleDiameter(), SpecificGravity(), Roundness(), AcidSolubility(), ApparentDensity(), BulkDensity(), LossOnIgnition(), Sphericity(), Turbidity(), CrushTestData(), SieveAnalysisData(), uid(), soap() { }
        virtual ~witsml2__StimISO13503_USCORE2Properties() { }
        /// Friend allocator used by soap_new_witsml2__StimISO13503_USCORE2Properties(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimISO13503_USCORE2Properties * SOAP_FMAC2 soap_instantiate_witsml2__StimISO13503_USCORE2Properties(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:869 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE5Point (-227)
/* complex XSD type 'witsml2:StimISO13503_5Point': */
class SOAP_CMAC witsml2__StimISO13503_USCORE5Point {
      public:
        /// Required element 'witsml2:Conductivity' of XSD type 'eml22:PermeabilityLengthMeasure'
        eml22__PermeabilityLengthMeasure *Conductivity;
        /// Required element 'witsml2:Temperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *Temperature;
        /// Required element 'witsml2:Permeability' of XSD type 'eml22:PermeabilityRockMeasure'
        eml22__PermeabilityRockMeasure *Permeability;
        /// Required element 'witsml2:Stress' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Stress;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE5Point
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE5Point; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimISO13503_USCORE5Point, default initialized and not managed by a soap context
        virtual witsml2__StimISO13503_USCORE5Point *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimISO13503_USCORE5Point); }
      public:
        /// Constructor with initializations
        witsml2__StimISO13503_USCORE5Point() : Conductivity(), Temperature(), Permeability(), Stress(), uid(), soap() { }
        virtual ~witsml2__StimISO13503_USCORE5Point() { }
        /// Friend allocator used by soap_new_witsml2__StimISO13503_USCORE5Point(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimISO13503_USCORE5Point * SOAP_FMAC2 soap_instantiate_witsml2__StimISO13503_USCORE5Point(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:875 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiagnosticSession (-229)
/* complex XSD type 'witsml2:StimJobDiagnosticSession': */
class SOAP_CMAC witsml2__StimJobDiagnosticSession {
      public:
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Optional element 'witsml2:Number' of XSD type 'xsd:unsignedLong'
        ULONG64 *Number;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:ChokeSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ChokeSize;
        /// Optional element 'witsml2:DTimPumpOn' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPumpOn;
        /// Optional element 'witsml2:DTimPumpOff' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPumpOff;
        /// Optional element 'witsml2:PumpDuration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *PumpDuration;
        /// Optional element 'witsml2:DTimWellShutin' of XSD type 'eml22:TimeStamp'
        struct tm *DTimWellShutin;
        /// Optional element 'witsml2:DTimFractureClose' of XSD type 'eml22:TimeStamp'
        struct tm *DTimFractureClose;
        /// Optional element 'witsml2:AvgBottomholeTreatmentPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgBottomholeTreatmentPres;
        /// Optional element 'witsml2:AvgBottomholeTreatmentRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *AvgBottomholeTreatmentRate;
        /// Optional element 'witsml2:BaseFluidVol' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *BaseFluidVol;
        /// Optional element 'witsml2:BottomholeHydrostaticPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *BottomholeHydrostaticPres;
        /// Optional element 'witsml2:BubblePointPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *BubblePointPres;
        /// Optional element 'witsml2:FluidDensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *FluidDensity;
        /// Optional element 'witsml2:FractureClosePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FractureClosePres;
        /// Optional element 'witsml2:FrictionPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FrictionPres;
        /// Optional element 'witsml2:InitialShutinPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *InitialShutinPres;
        /// Optional element 'witsml2:PorePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PorePres;
        /// Optional element 'witsml2:WellboreVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *WellboreVolume;
        /// Optional element 'witsml2:MdSurface' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdSurface;
        /// Optional element 'witsml2:MdBottomhole' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBottomhole;
        /// Optional element 'witsml2:MdMidPerforation' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdMidPerforation;
        /// Optional element 'witsml2:TvdMidPerforation' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdMidPerforation;
        /// Optional element 'witsml2:SurfaceTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *SurfaceTemperature;
        /// Optional element 'witsml2:BottomholeTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *BottomholeTemperature;
        /// Optional element 'witsml2:SurfaceFluidTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *SurfaceFluidTemperature;
        /// Optional element 'witsml2:FluidCompressibility' of XSD type 'eml22:IsothermalCompressibilityMeasure'
        eml22__IsothermalCompressibilityMeasure *FluidCompressibility;
        /// Optional element 'witsml2:ReservoirTotalCompressibility' of XSD type 'eml22:IsothermalCompressibilityMeasure'
        eml22__IsothermalCompressibilityMeasure *ReservoirTotalCompressibility;
        /// Optional element 'witsml2:FluidNprimeFactor' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *FluidNprimeFactor;
        /// Optional element 'witsml2:FluidKprimeFactor' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *FluidKprimeFactor;
        /// Optional element 'witsml2:FluidSpecificHeat' of XSD type 'eml22:SpecificHeatCapacityMeasure'
        eml22__SpecificHeatCapacityMeasure *FluidSpecificHeat;
        /// Optional element 'witsml2:FluidThermalConductivity' of XSD type 'eml22:ThermalConductivityMeasure'
        eml22__ThermalConductivityMeasure *FluidThermalConductivity;
        /// Optional element 'witsml2:FluidThermalExpansionCoefficient' of XSD type 'eml22:VolumetricThermalExpansionMeasure'
        eml22__VolumetricThermalExpansionMeasure *FluidThermalExpansionCoefficient;
        /// Optional element 'witsml2:FluidEfficiency' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *FluidEfficiency;
        /// Optional element 'witsml2:FoamQuality' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *FoamQuality;
        /// Optional element 'witsml2:PercentPad' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PercentPad;
        /// Optional element 'witsml2:StageNumber' of XSD type 'xsd:unsignedLong'
        ULONG64 *StageNumber;
        /// Optional element 'witsml2:TemperatureCorrectionApplied' of XSD type 'xsd:boolean'
        bool *TemperatureCorrectionApplied;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:FluidEfficiencyTest' of XSD type 'witsml2:StimFetTest'
        std::vector<witsml2__StimFetTest *> FluidEfficiencyTest;
        /// Optional element 'witsml2:StepDownTest' of XSD type 'witsml2:StimStepDownTest'
        std::vector<witsml2__StimStepDownTest *> StepDownTest;
        /// Optional element 'witsml2:StepRateTest' of XSD type 'witsml2:StimStepTest'
        std::vector<witsml2__StimStepTest *> StepRateTest;
        /// Optional element 'witsml2:PumpFlowBackTest' of XSD type 'witsml2:StimPumpFlowBackTest'
        std::vector<witsml2__StimPumpFlowBackTest *> PumpFlowBackTest;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiagnosticSession
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiagnosticSession; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobDiagnosticSession, default initialized and not managed by a soap context
        virtual witsml2__StimJobDiagnosticSession *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobDiagnosticSession); }
      public:
        /// Constructor with initializations
        witsml2__StimJobDiagnosticSession() : Name(), Number(), Description(), ChokeSize(), DTimPumpOn(), DTimPumpOff(), PumpDuration(), DTimWellShutin(), DTimFractureClose(), AvgBottomholeTreatmentPres(), AvgBottomholeTreatmentRate(), BaseFluidVol(), BottomholeHydrostaticPres(), BubblePointPres(), FluidDensity(), FractureClosePres(), FrictionPres(), InitialShutinPres(), PorePres(), WellboreVolume(), MdSurface(), MdBottomhole(), MdMidPerforation(), TvdMidPerforation(), SurfaceTemperature(), BottomholeTemperature(), SurfaceFluidTemperature(), FluidCompressibility(), ReservoirTotalCompressibility(), FluidNprimeFactor(), FluidKprimeFactor(), FluidSpecificHeat(), FluidThermalConductivity(), FluidThermalExpansionCoefficient(), FluidEfficiency(), FoamQuality(), PercentPad(), StageNumber(), TemperatureCorrectionApplied(), ExtensionNameValue(), FluidEfficiencyTest(), StepDownTest(), StepRateTest(), PumpFlowBackTest(), uid(), soap() { }
        virtual ~witsml2__StimJobDiagnosticSession() { }
        /// Friend allocator used by soap_new_witsml2__StimJobDiagnosticSession(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobDiagnosticSession * SOAP_FMAC2 soap_instantiate_witsml2__StimJobDiagnosticSession(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:30557 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__StimJobDiversion_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__StimJobDiversion_sequence (-1694)
/* Wrapper: */
class SOAP_CMAC __witsml2__StimJobDiversion_sequence {
      public:
        /// Optional element 'witsml2:Contractor' of XSD type 'eml22:String2000'
        std::string *Contractor;
        /// Optional element 'witsml2:Method' of XSD type 'witsml2:StimJobDiversionMethod'
        enum witsml2__StimJobDiversionMethod *Method;
        /// Optional element 'witsml2:ToolDescription' of XSD type 'eml22:String2000'
        std::string *ToolDescription;
        /// Optional element 'witsml2:ElementSpacing' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ElementSpacing;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__StimJobDiversion_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__StimJobDiversion_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__StimJobDiversion_sequence, default initialized and not managed by a soap context
        virtual __witsml2__StimJobDiversion_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__StimJobDiversion_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__StimJobDiversion_sequence() : Contractor(), Method(), ToolDescription(), ElementSpacing() { }
        virtual ~__witsml2__StimJobDiversion_sequence() { }
        /// Friend allocator used by soap_new___witsml2__StimJobDiversion_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__StimJobDiversion_sequence * SOAP_FMAC2 soap_instantiate___witsml2__StimJobDiversion_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:878 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversion (-230)
/* complex XSD type 'witsml2:StimJobDiversion': */
class SOAP_CMAC witsml2__StimJobDiversion {
      public:
        __witsml2__StimJobDiversion_sequence *__StimJobDiversion_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobDiversion, default initialized and not managed by a soap context
        virtual witsml2__StimJobDiversion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobDiversion); }
      public:
        /// Constructor with initializations
        witsml2__StimJobDiversion() : __StimJobDiversion_sequence(), soap() { }
        virtual ~witsml2__StimJobDiversion() { }
        /// Friend allocator used by soap_new_witsml2__StimJobDiversion(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobDiversion * SOAP_FMAC2 soap_instantiate_witsml2__StimJobDiversion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:881 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobLogCatalog (-231)
/* complex XSD type 'witsml2:StimJobLogCatalog': */
class SOAP_CMAC witsml2__StimJobLogCatalog {
      public:
        /// Required element 'witsml2:JobLog' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> JobLog;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobLogCatalog
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobLogCatalog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobLogCatalog, default initialized and not managed by a soap context
        virtual witsml2__StimJobLogCatalog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobLogCatalog); }
      public:
        /// Constructor with initializations
        witsml2__StimJobLogCatalog() : JobLog(), soap() { }
        virtual ~witsml2__StimJobLogCatalog() { }
        /// Friend allocator used by soap_new_witsml2__StimJobLogCatalog(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobLogCatalog * SOAP_FMAC2 soap_instantiate_witsml2__StimJobLogCatalog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:884 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobMaterialCatalog
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobMaterialCatalog (-232)
/* complex XSD type 'witsml2:StimJobMaterialCatalog': */
class SOAP_CMAC witsml2__StimJobMaterialCatalog {
      public:
        /// Optional element 'witsml2:Additives' of XSD type 'witsml2:StimAdditive'
        std::vector<witsml2__StimAdditive *> Additives;
        /// Optional element 'witsml2:ProppantAgents' of XSD type 'witsml2:StimProppantAgent'
        std::vector<witsml2__StimProppantAgent *> ProppantAgents;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobMaterialCatalog
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobMaterialCatalog; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobMaterialCatalog, default initialized and not managed by a soap context
        virtual witsml2__StimJobMaterialCatalog *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobMaterialCatalog); }
      public:
        /// Constructor with initializations
        witsml2__StimJobMaterialCatalog() : Additives(), ProppantAgents(), soap() { }
        virtual ~witsml2__StimJobMaterialCatalog() { }
        /// Friend allocator used by soap_new_witsml2__StimJobMaterialCatalog(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobMaterialCatalog * SOAP_FMAC2 soap_instantiate_witsml2__StimJobMaterialCatalog(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:890 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStep (-234)
/* complex XSD type 'witsml2:StimJobStep': */
class SOAP_CMAC witsml2__StimJobStep {
      public:
        /// Optional element 'witsml2:StepName' of XSD type 'eml22:String2000'
        std::string *StepName;
        /// Required element 'witsml2:StepNumber' of XSD type 'xsd:unsignedLong'
        ULONG64 StepNumber;
        /// Optional element 'witsml2:Kind' of XSD type 'eml22:String2000'
        std::string *Kind;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:AvgBaseFluidQuality' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *AvgBaseFluidQuality;
        /// Optional element 'witsml2:AvgCO2BaseFluidQuality' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *AvgCO2BaseFluidQuality;
        /// Optional element 'witsml2:AvgHydraulicPower' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *AvgHydraulicPower;
        /// Optional element 'witsml2:AvgInternalPhaseFraction' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *AvgInternalPhaseFraction;
        /// Optional element 'witsml2:AvgMaterialUsedRate' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> AvgMaterialUsedRate;
        /// Optional element 'witsml2:AvgMaterialUseRateBottomhole' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> AvgMaterialUseRateBottomhole;
        /// Optional element 'witsml2:AvgN2BaseFluidQuality' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *AvgN2BaseFluidQuality;
        /// Optional element 'witsml2:AvgPresBottomhole' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPresBottomhole;
        /// Optional element 'witsml2:AvgPresSurface' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPresSurface;
        /// Optional element 'witsml2:AvgPropConc' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AvgPropConc;
        /// Optional element 'witsml2:AvgProppantConcBottomhole' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AvgProppantConcBottomhole;
        /// Optional element 'witsml2:AvgProppantConcSurface' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AvgProppantConcSurface;
        /// Optional element 'witsml2:AvgSlurryPropConc' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AvgSlurryPropConc;
        /// Optional element 'witsml2:AvgSlurryRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *AvgSlurryRate;
        /// Optional element 'witsml2:AvgTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *AvgTemperature;
        /// Optional element 'witsml2:AvgVolumeRateWellhead' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *AvgVolumeRateWellhead;
        /// Optional element 'witsml2:BallsRecovered' of XSD type 'xsd:unsignedLong'
        ULONG64 *BallsRecovered;
        /// Optional element 'witsml2:BallsUsed' of XSD type 'xsd:unsignedLong'
        ULONG64 *BallsUsed;
        /// Optional element 'witsml2:BaseFluidBypassVol' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *BaseFluidBypassVol;
        /// Optional element 'witsml2:BaseFluidVol' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *BaseFluidVol;
        /// Optional element 'witsml2:EndDirtyMaterialRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *EndDirtyMaterialRate;
        /// Optional element 'witsml2:EndMaterialUsedRate' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> EndMaterialUsedRate;
        /// Optional element 'witsml2:EndMaterialUsedRateBottomhole' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> EndMaterialUsedRateBottomhole;
        /// Optional element 'witsml2:EndPresBottomhole' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *EndPresBottomhole;
        /// Optional element 'witsml2:EndPresSurface' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *EndPresSurface;
        /// Optional element 'witsml2:EndProppantConcBottomhole' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *EndProppantConcBottomhole;
        /// Optional element 'witsml2:EndProppantConcSurface' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *EndProppantConcSurface;
        /// Optional element 'witsml2:EndRateSurfaceCO2' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *EndRateSurfaceCO2;
        /// Optional element 'witsml2:EndStdRateSurfaceN2' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *EndStdRateSurfaceN2;
        /// Optional element 'witsml2:FluidVolBase' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolBase;
        /// Optional element 'witsml2:FluidVolCirculated' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolCirculated;
        /// Optional element 'witsml2:FluidVolPumped' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolPumped;
        /// Optional element 'witsml2:FluidVolReturned' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolReturned;
        /// Optional element 'witsml2:FluidVolSlurry' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolSlurry;
        /// Optional element 'witsml2:FluidVolSqueezed' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolSqueezed;
        /// Optional element 'witsml2:FluidVolWashed' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FluidVolWashed;
        /// Optional element 'witsml2:FractureGradientFinal' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FractureGradientFinal;
        /// Optional element 'witsml2:FractureGradientInitial' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FractureGradientInitial;
        /// Optional element 'witsml2:FrictionFactor' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *FrictionFactor;
        /// Optional element 'witsml2:MaxHydraulicPower' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *MaxHydraulicPower;
        /// Optional element 'witsml2:MaxPresSurface' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPresSurface;
        /// Optional element 'witsml2:MaxProppantConcBottomhole' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MaxProppantConcBottomhole;
        /// Optional element 'witsml2:MaxProppantConcSurface' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MaxProppantConcSurface;
        /// Optional element 'witsml2:MaxSlurryPropConc' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MaxSlurryPropConc;
        /// Optional element 'witsml2:MaxVolumeRateWellhead' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *MaxVolumeRateWellhead;
        /// Optional element 'witsml2:PipeFrictionPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PipeFrictionPressure;
        /// Optional element 'witsml2:PumpTime' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *PumpTime;
        /// Optional element 'witsml2:StartDirtyMaterialRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *StartDirtyMaterialRate;
        /// Optional element 'witsml2:StartMaterialUsedRate' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> StartMaterialUsedRate;
        /// Optional element 'witsml2:StartMaterialUsedRateBottomHole' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> StartMaterialUsedRateBottomHole;
        /// Optional element 'witsml2:StartPresBottomhole' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *StartPresBottomhole;
        /// Optional element 'witsml2:StartPresSurface' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *StartPresSurface;
        /// Optional element 'witsml2:StartProppantConcBottomhole' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *StartProppantConcBottomhole;
        /// Optional element 'witsml2:StartProppantConcSurface' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *StartProppantConcSurface;
        /// Optional element 'witsml2:WellheadVol' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *WellheadVol;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:MaterialUsed' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaterialUsed;
        /// Optional element 'witsml2:MaxMaterialUsedRate' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaxMaterialUsedRate;
        /// Optional element 'witsml2:Fluid' of XSD type 'witsml2:StimFluid'
        witsml2__StimFluid *Fluid;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStep
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStep; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobStep, default initialized and not managed by a soap context
        virtual witsml2__StimJobStep *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobStep); }
      public:
        /// Constructor with initializations
        witsml2__StimJobStep() : StepName(), StepNumber(), Kind(), Description(), DTimStart(), DTimEnd(), AvgBaseFluidQuality(), AvgCO2BaseFluidQuality(), AvgHydraulicPower(), AvgInternalPhaseFraction(), AvgMaterialUsedRate(), AvgMaterialUseRateBottomhole(), AvgN2BaseFluidQuality(), AvgPresBottomhole(), AvgPresSurface(), AvgPropConc(), AvgProppantConcBottomhole(), AvgProppantConcSurface(), AvgSlurryPropConc(), AvgSlurryRate(), AvgTemperature(), AvgVolumeRateWellhead(), BallsRecovered(), BallsUsed(), BaseFluidBypassVol(), BaseFluidVol(), EndDirtyMaterialRate(), EndMaterialUsedRate(), EndMaterialUsedRateBottomhole(), EndPresBottomhole(), EndPresSurface(), EndProppantConcBottomhole(), EndProppantConcSurface(), EndRateSurfaceCO2(), EndStdRateSurfaceN2(), FluidVolBase(), FluidVolCirculated(), FluidVolPumped(), FluidVolReturned(), FluidVolSlurry(), FluidVolSqueezed(), FluidVolWashed(), FractureGradientFinal(), FractureGradientInitial(), FrictionFactor(), MaxHydraulicPower(), MaxPresSurface(), MaxProppantConcBottomhole(), MaxProppantConcSurface(), MaxSlurryPropConc(), MaxVolumeRateWellhead(), PipeFrictionPressure(), PumpTime(), StartDirtyMaterialRate(), StartMaterialUsedRate(), StartMaterialUsedRateBottomHole(), StartPresBottomhole(), StartPresSurface(), StartProppantConcBottomhole(), StartProppantConcSurface(), WellheadVol(), ExtensionNameValue(), MaterialUsed(), MaxMaterialUsedRate(), Fluid(), uid(), soap() { }
        virtual ~witsml2__StimJobStep() { }
        /// Friend allocator used by soap_new_witsml2__StimJobStep(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobStep * SOAP_FMAC2 soap_instantiate_witsml2__StimJobStep(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:893 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterial
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterial (-235)
/* Type witsml2__StimMaterial is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StimMaterial': */
class SOAP_CMAC witsml2__StimMaterial {
      public:
        /// Optional element 'witsml2:Kind' of XSD type 'witsml2:StimMaterialKind'
        enum witsml2__StimMaterialKind *Kind;
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String2000'
        std::string *Name;
        /// Optional element 'witsml2:Supplier' of XSD type 'eml22:String2000'
        std::string *Supplier;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterial
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterial; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimMaterial, default initialized and not managed by a soap context
        virtual witsml2__StimMaterial *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimMaterial); }
      public:
        /// Constructor with initializations
        witsml2__StimMaterial() : Kind(), Name(), Supplier(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimMaterial() { }
        /// Friend allocator used by soap_new_witsml2__StimMaterial(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimMaterial * SOAP_FMAC2 soap_instantiate_witsml2__StimMaterial(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:896 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialQuantity (-236)
/* complex XSD type 'witsml2:StimMaterialQuantity': */
class SOAP_CMAC witsml2__StimMaterialQuantity {
      public:
        /// Optional element 'witsml2:Density' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Density;
        /// Optional element 'witsml2:Mass' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *Mass;
        /// Optional element 'witsml2:MassFlowRate' of XSD type 'eml22:MassPerTimeMeasure'
        eml22__MassPerTimeMeasure *MassFlowRate;
        /// Optional element 'witsml2:StdVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *StdVolume;
        /// Optional element 'witsml2:Volume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *Volume;
        /// Optional element 'witsml2:VolumeConcentration' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *VolumeConcentration;
        /// Optional element 'witsml2:VolumetricFlowRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *VolumetricFlowRate;
        /// Required element 'witsml2:MaterialReference' of XSD type 'eml22:String64'
        std::string MaterialReference;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialQuantity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialQuantity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimMaterialQuantity, default initialized and not managed by a soap context
        virtual witsml2__StimMaterialQuantity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimMaterialQuantity); }
      public:
        /// Constructor with initializations
        witsml2__StimMaterialQuantity() : Density(), Mass(), MassFlowRate(), StdVolume(), Volume(), VolumeConcentration(), VolumetricFlowRate(), MaterialReference(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimMaterialQuantity() { }
        /// Friend allocator used by soap_new_witsml2__StimMaterialQuantity(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimMaterialQuantity * SOAP_FMAC2 soap_instantiate_witsml2__StimMaterialQuantity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:902 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationClusterSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationClusterSet (-238)
/* complex XSD type 'witsml2:StimPerforationClusterSet': */
class SOAP_CMAC witsml2__StimPerforationClusterSet {
      public:
        /// Required element 'witsml2:StimPerforationCluster' of XSD type 'witsml2:StimPerforationCluster'
        std::vector<witsml2__StimPerforationCluster *> StimPerforationCluster;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationClusterSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationClusterSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPerforationClusterSet, default initialized and not managed by a soap context
        virtual witsml2__StimPerforationClusterSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPerforationClusterSet); }
      public:
        /// Constructor with initializations
        witsml2__StimPerforationClusterSet() : StimPerforationCluster(), soap() { }
        virtual ~witsml2__StimPerforationClusterSet() { }
        /// Friend allocator used by soap_new_witsml2__StimPerforationClusterSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPerforationClusterSet * SOAP_FMAC2 soap_instantiate_witsml2__StimPerforationClusterSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:905 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPressureFlowRate (-239)
/* complex XSD type 'witsml2:StimPressureFlowRate': */
class SOAP_CMAC witsml2__StimPressureFlowRate {
      public:
        /// Optional element 'witsml2:Pressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Pressure;
        /// Optional element 'witsml2:BottomholeRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *BottomholeRate;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimPressureFlowRate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimPressureFlowRate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPressureFlowRate, default initialized and not managed by a soap context
        virtual witsml2__StimPressureFlowRate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPressureFlowRate); }
      public:
        /// Constructor with initializations
        witsml2__StimPressureFlowRate() : Pressure(), BottomholeRate(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimPressureFlowRate() { }
        /// Friend allocator used by soap_new_witsml2__StimPressureFlowRate(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPressureFlowRate * SOAP_FMAC2 soap_instantiate_witsml2__StimPressureFlowRate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:911 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTest (-241)
/* complex XSD type 'witsml2:StimPumpFlowBackTest': */
class SOAP_CMAC witsml2__StimPumpFlowBackTest {
      public:
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:FlowBackVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FlowBackVolume;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:FractureCloseDuration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *FractureCloseDuration;
        /// Optional element 'witsml2:PresCasing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresCasing;
        /// Optional element 'witsml2:PresTubing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresTubing;
        /// Optional element 'witsml2:FractureClosePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FractureClosePres;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:Step' of XSD type 'witsml2:StimPumpFlowBackTestStep'
        std::vector<witsml2__StimPumpFlowBackTestStep *> Step;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPumpFlowBackTest, default initialized and not managed by a soap context
        virtual witsml2__StimPumpFlowBackTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPumpFlowBackTest); }
      public:
        /// Constructor with initializations
        witsml2__StimPumpFlowBackTest() : DTimEnd(), FlowBackVolume(), DTimStart(), FractureCloseDuration(), PresCasing(), PresTubing(), FractureClosePres(), ExtensionNameValue(), Step(), uid(), soap() { }
        virtual ~witsml2__StimPumpFlowBackTest() { }
        /// Friend allocator used by soap_new_witsml2__StimPumpFlowBackTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPumpFlowBackTest * SOAP_FMAC2 soap_instantiate_witsml2__StimPumpFlowBackTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:914 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTestStep (-242)
/* complex XSD type 'witsml2:StimPumpFlowBackTestStep': */
class SOAP_CMAC witsml2__StimPumpFlowBackTestStep {
      public:
        /// Optional element 'witsml2:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'witsml2:FlowbackVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FlowbackVolume;
        /// Optional element 'witsml2:FlowbackVolumeRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowbackVolumeRate;
        /// Required element 'witsml2:Number' of XSD type 'xsd:unsignedLong'
        ULONG64 Number;
        /// Optional element 'witsml2:BottomholeRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *BottomholeRate;
        /// Optional element 'witsml2:Pres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Pres;
        /// Optional element 'witsml2:PipeFriction' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PipeFriction;
        /// Optional element 'witsml2:EntryFriction' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *EntryFriction;
        /// Optional element 'witsml2:PerfFriction' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PerfFriction;
        /// Optional element 'witsml2:NearWellboreFriction' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *NearWellboreFriction;
        /// Optional element 'witsml2:SurfaceRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *SurfaceRate;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTestStep
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTestStep; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPumpFlowBackTestStep, default initialized and not managed by a soap context
        virtual witsml2__StimPumpFlowBackTestStep *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPumpFlowBackTestStep); }
      public:
        /// Constructor with initializations
        witsml2__StimPumpFlowBackTestStep() : DTim(), FlowbackVolume(), FlowbackVolumeRate(), Number(), BottomholeRate(), Pres(), PipeFriction(), EntryFriction(), PerfFriction(), NearWellboreFriction(), SurfaceRate(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimPumpFlowBackTestStep() { }
        /// Friend allocator used by soap_new_witsml2__StimPumpFlowBackTestStep(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPumpFlowBackTestStep * SOAP_FMAC2 soap_instantiate_witsml2__StimPumpFlowBackTestStep(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:917 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimReservoirInterval (-243)
/* complex XSD type 'witsml2:StimReservoirInterval': */
class SOAP_CMAC witsml2__StimReservoirInterval {
      public:
        /// Optional element 'witsml2:LithMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *LithMdInterval;
        /// Optional element 'witsml2:LithFormationPermeability' of XSD type 'eml22:PermeabilityRockMeasure'
        eml22__PermeabilityRockMeasure *LithFormationPermeability;
        /// Optional element 'witsml2:LithYoungsModulus' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *LithYoungsModulus;
        /// Optional element 'witsml2:LithPorePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *LithPorePres;
        /// Optional element 'witsml2:LithNetPayThickness' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LithNetPayThickness;
        /// Optional element 'witsml2:LithName' of XSD type 'eml22:String2000'
        std::string *LithName;
        /// Optional element 'witsml2:GrossPayMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *GrossPayMdInterval;
        /// Optional element 'witsml2:GrossPayThickness' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *GrossPayThickness;
        /// Optional element 'witsml2:NetPayThickness' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *NetPayThickness;
        /// Optional element 'witsml2:NetPayPorePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *NetPayPorePres;
        /// Optional element 'witsml2:NetPayFluidCompressibility' of XSD type 'eml22:IsothermalCompressibilityMeasure'
        eml22__IsothermalCompressibilityMeasure *NetPayFluidCompressibility;
        /// Optional element 'witsml2:NetPayFluidViscosity' of XSD type 'eml22:DynamicViscosityMeasure'
        eml22__DynamicViscosityMeasure *NetPayFluidViscosity;
        /// Optional element 'witsml2:NetPayName' of XSD type 'eml22:String2000'
        std::string *NetPayName;
        /// Optional element 'witsml2:NetPayFormationPermeability' of XSD type 'eml22:PermeabilityRockMeasure'
        eml22__PermeabilityRockMeasure *NetPayFormationPermeability;
        /// Optional element 'witsml2:LithPoissonsRatio' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *LithPoissonsRatio;
        /// Optional element 'witsml2:NetPayFormationPorosity' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NetPayFormationPorosity;
        /// Optional element 'witsml2:FormationPermeability' of XSD type 'eml22:PermeabilityRockMeasure'
        eml22__PermeabilityRockMeasure *FormationPermeability;
        /// Optional element 'witsml2:FormationPorosity' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *FormationPorosity;
        /// Optional element 'witsml2:NameFormation' of XSD type 'eml22:String2000'
        std::string *NameFormation;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimReservoirInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimReservoirInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimReservoirInterval, default initialized and not managed by a soap context
        virtual witsml2__StimReservoirInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimReservoirInterval); }
      public:
        /// Constructor with initializations
        witsml2__StimReservoirInterval() : LithMdInterval(), LithFormationPermeability(), LithYoungsModulus(), LithPorePres(), LithNetPayThickness(), LithName(), GrossPayMdInterval(), GrossPayThickness(), NetPayThickness(), NetPayPorePres(), NetPayFluidCompressibility(), NetPayFluidViscosity(), NetPayName(), NetPayFormationPermeability(), LithPoissonsRatio(), NetPayFormationPorosity(), FormationPermeability(), FormationPorosity(), NameFormation(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimReservoirInterval() { }
        /// Friend allocator used by soap_new_witsml2__StimReservoirInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimReservoirInterval * SOAP_FMAC2 soap_instantiate_witsml2__StimReservoirInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:920 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimShutInPressure (-244)
/* complex XSD type 'witsml2:StimShutInPressure': */
class SOAP_CMAC witsml2__StimShutInPressure {
      public:
        /// Required element 'witsml2:Pressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Pressure;
        /// Required element 'witsml2:TimeAfterShutin' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *TimeAfterShutin;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimShutInPressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimShutInPressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimShutInPressure, default initialized and not managed by a soap context
        virtual witsml2__StimShutInPressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimShutInPressure); }
      public:
        /// Constructor with initializations
        witsml2__StimShutInPressure() : Pressure(), TimeAfterShutin(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimShutInPressure() { }
        /// Friend allocator used by soap_new_witsml2__StimShutInPressure(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimShutInPressure * SOAP_FMAC2 soap_instantiate_witsml2__StimShutInPressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:923 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepDownTest (-245)
/* complex XSD type 'witsml2:StimStepDownTest': */
class SOAP_CMAC witsml2__StimStepDownTest {
      public:
        /// Optional element 'witsml2:InitialShutinPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *InitialShutinPres;
        /// Optional element 'witsml2:BottomholeFluidDensity' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *BottomholeFluidDensity;
        /// Optional element 'witsml2:DiameterEntryHole' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiameterEntryHole;
        /// Optional element 'witsml2:PerforationCount' of XSD type 'xsd:unsignedLong'
        ULONG64 *PerforationCount;
        /// Optional element 'witsml2:DischargeCoefficient' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *DischargeCoefficient;
        /// Optional element 'witsml2:EffectivePerfs' of XSD type 'xsd:unsignedLong'
        ULONG64 *EffectivePerfs;
        /// Optional element 'witsml2:Step' of XSD type 'witsml2:StimPumpFlowBackTestStep'
        std::vector<witsml2__StimPumpFlowBackTestStep *> Step;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepDownTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepDownTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimStepDownTest, default initialized and not managed by a soap context
        virtual witsml2__StimStepDownTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimStepDownTest); }
      public:
        /// Constructor with initializations
        witsml2__StimStepDownTest() : InitialShutinPres(), BottomholeFluidDensity(), DiameterEntryHole(), PerforationCount(), DischargeCoefficient(), EffectivePerfs(), Step(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimStepDownTest() { }
        /// Friend allocator used by soap_new_witsml2__StimStepDownTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimStepDownTest * SOAP_FMAC2 soap_instantiate_witsml2__StimStepDownTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:926 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepTest (-246)
/* complex XSD type 'witsml2:StimStepTest': */
class SOAP_CMAC witsml2__StimStepTest {
      public:
        /// Optional element 'witsml2:FractureExtensionPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FractureExtensionPres;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:PresMeasurement' of XSD type 'witsml2:StimPressureFlowRate'
        std::vector<witsml2__StimPressureFlowRate *> PresMeasurement;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepTest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepTest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimStepTest, default initialized and not managed by a soap context
        virtual witsml2__StimStepTest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimStepTest); }
      public:
        /// Constructor with initializations
        witsml2__StimStepTest() : FractureExtensionPres(), ExtensionNameValue(), PresMeasurement(), uid(), soap() { }
        virtual ~witsml2__StimStepTest() { }
        /// Friend allocator used by soap_new_witsml2__StimStepTest(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimStepTest * SOAP_FMAC2 soap_instantiate_witsml2__StimStepTest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:929 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimTubular (-247)
/* complex XSD type 'witsml2:StimTubular': */
class SOAP_CMAC witsml2__StimTubular {
      public:
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:Id' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Id;
        /// Optional element 'witsml2:Od' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Od;
        /// Optional element 'witsml2:Weight' of XSD type 'eml22:MassPerLengthMeasure'
        eml22__MassPerLengthMeasure *Weight;
        /// Optional element 'witsml2:TubularMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *TubularMdInterval;
        /// Optional element 'witsml2:TubularTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TubularTvdInterval;
        /// Optional element 'witsml2:VolumeFactor' of XSD type 'eml22:VolumePerLengthMeasure'
        eml22__VolumePerLengthMeasure *VolumeFactor;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimTubular
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimTubular; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimTubular, default initialized and not managed by a soap context
        virtual witsml2__StimTubular *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimTubular); }
      public:
        /// Constructor with initializations
        witsml2__StimTubular() : Type(), Id(), Od(), Weight(), TubularMdInterval(), TubularTvdInterval(), VolumeFactor(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__StimTubular() { }
        /// Friend allocator used by soap_new_witsml2__StimTubular(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimTubular * SOAP_FMAC2 soap_instantiate_witsml2__StimTubular(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:935 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurveySection (-249)
/* complex XSD type 'witsml2:SurveySection': */
class SOAP_CMAC witsml2__SurveySection {
      public:
        /// Required element 'witsml2:Sequence' of XSD type 'xsd:unsignedLong'
        ULONG64 Sequence;
        /// Optional element 'witsml2:Name' of XSD type 'eml22:String64'
        std::string *Name;
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Required element 'witsml2:NameSurveyCompany' of XSD type 'eml22:String64'
        std::string NameSurveyCompany;
        /// Required element 'witsml2:NameTool' of XSD type 'eml22:String64'
        std::string NameTool;
        /// Required element 'witsml2:TypeTool' of XSD type 'eml22:String64'
        std::string TypeTool;
        /// Optional element 'witsml2:ModelError' of XSD type 'eml22:String64'
        std::string *ModelError;
        /// Optional element 'witsml2:Overwrite' of XSD type 'xsd:boolean'
        bool *Overwrite;
        /// Optional element 'witsml2:FrequencyMx' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FrequencyMx;
        /// Optional element 'witsml2:ItemState' of XSD type 'eml22:ExistenceKind'
        enum eml22__ExistenceKind *ItemState;
        /// Optional element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string *Comments;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__SurveySection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__SurveySection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SurveySection, default initialized and not managed by a soap context
        virtual witsml2__SurveySection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SurveySection); }
      public:
        /// Constructor with initializations
        witsml2__SurveySection() : Sequence(), Name(), MdInterval(), NameSurveyCompany(), NameTool(), TypeTool(), ModelError(), Overwrite(), FrequencyMx(), ItemState(), Comments(), ExtensionNameValue(), uid(), soap() { }
        virtual ~witsml2__SurveySection() { }
        /// Friend allocator used by soap_new_witsml2__SurveySection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SurveySection * SOAP_FMAC2 soap_instantiate_witsml2__SurveySection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:944 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalLithology (-252)
/* complex XSD type 'witsml2:CuttingsIntervalLithology': */
class SOAP_CMAC witsml2__CuttingsIntervalLithology {
      public:
        /// Required element 'witsml2:Kind' of XSD type 'eml22:LithologyKindExt'
        std::string Kind;
        /// Required element 'witsml2:LithPc' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *LithPc;
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'witsml2:CodeLith' of XSD type 'eml22:String64'
        std::string *CodeLith;
        /// Optional element 'witsml2:Color' of XSD type 'eml22:String64'
        std::string *Color;
        /// Optional element 'witsml2:Texture' of XSD type 'eml22:String64'
        std::string *Texture;
        /// Optional element 'witsml2:Hardness' of XSD type 'eml22:String64'
        std::string *Hardness;
        /// Optional element 'witsml2:Compaction' of XSD type 'eml22:String64'
        std::string *Compaction;
        /// Optional element 'witsml2:SizeGrain' of XSD type 'eml22:String64'
        std::string *SizeGrain;
        /// Optional element 'witsml2:Roundness' of XSD type 'eml22:String64'
        std::string *Roundness;
        /// Optional element 'witsml2:Sphericity' of XSD type 'eml22:String64'
        std::string *Sphericity;
        /// Optional element 'witsml2:Sorting' of XSD type 'eml22:String64'
        std::string *Sorting;
        /// Optional element 'witsml2:MatrixCement' of XSD type 'eml22:MatrixCementKind'
        enum eml22__MatrixCementKind *MatrixCement;
        /// Optional element 'witsml2:PorosityVisible' of XSD type 'eml22:String64'
        std::string *PorosityVisible;
        /// Optional element 'witsml2:PorosityFabric' of XSD type 'eml22:String64'
        std::string *PorosityFabric;
        /// Optional element 'witsml2:Permeability' of XSD type 'eml22:String64'
        std::string *Permeability;
        /// Optional element 'witsml2:Shows' of XSD type 'witsml2:CuttingsIntervalShow'
        std::vector<witsml2__CuttingsIntervalShow *> Shows;
        /// Optional element 'witsml2:Qualifier' of XSD type 'witsml2:LithologyQualifier'
        std::vector<witsml2__LithologyQualifier *> Qualifier;
        /// optional attribute 'uid' of XSD type 'eml22:String64'
        std::string *uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalLithology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalLithology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsIntervalLithology, default initialized and not managed by a soap context
        virtual witsml2__CuttingsIntervalLithology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsIntervalLithology); }
      public:
        /// Constructor with initializations
        witsml2__CuttingsIntervalLithology() : Kind(), LithPc(), Citation(), CodeLith(), Color(), Texture(), Hardness(), Compaction(), SizeGrain(), Roundness(), Sphericity(), Sorting(), MatrixCement(), PorosityVisible(), PorosityFabric(), Permeability(), Shows(), Qualifier(), uid(), soap() { }
        virtual ~witsml2__CuttingsIntervalLithology() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsIntervalLithology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsIntervalLithology * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsIntervalLithology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:947 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalShow (-253)
/* complex XSD type 'witsml2:CuttingsIntervalShow': */
class SOAP_CMAC witsml2__CuttingsIntervalShow {
      public:
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'witsml2:ShowRating' of XSD type 'witsml2:ShowRating'
        enum witsml2__ShowRating *ShowRating;
        /// Optional element 'witsml2:StainColor' of XSD type 'eml22:String64'
        std::string *StainColor;
        /// Optional element 'witsml2:StainDistr' of XSD type 'eml22:String64'
        std::string *StainDistr;
        /// Optional element 'witsml2:StainPc' of XSD type 'eml22:AreaPerAreaMeasure'
        eml22__AreaPerAreaMeasure *StainPc;
        /// Optional element 'witsml2:CutSpeed' of XSD type 'witsml2:ShowSpeed'
        enum witsml2__ShowSpeed *CutSpeed;
        /// Optional element 'witsml2:CutColor' of XSD type 'eml22:String64'
        std::string *CutColor;
        /// Optional element 'witsml2:CutStrength' of XSD type 'eml22:String64'
        std::string *CutStrength;
        /// Optional element 'witsml2:CutForm' of XSD type 'witsml2:ShowLevel'
        enum witsml2__ShowLevel *CutForm;
        /// Optional element 'witsml2:CutLevel' of XSD type 'eml22:String64'
        std::string *CutLevel;
        /// Optional element 'witsml2:CutFlorForm' of XSD type 'witsml2:ShowLevel'
        enum witsml2__ShowLevel *CutFlorForm;
        /// Optional element 'witsml2:CutFlorColor' of XSD type 'eml22:String64'
        std::string *CutFlorColor;
        /// Optional element 'witsml2:CutFlorStrength' of XSD type 'eml22:String64'
        std::string *CutFlorStrength;
        /// Optional element 'witsml2:CutFlorSpeed' of XSD type 'witsml2:ShowSpeed'
        enum witsml2__ShowSpeed *CutFlorSpeed;
        /// Optional element 'witsml2:CutFlorLevel' of XSD type 'witsml2:ShowFluorescence'
        enum witsml2__ShowFluorescence *CutFlorLevel;
        /// Optional element 'witsml2:NatFlorColor' of XSD type 'eml22:String64'
        std::string *NatFlorColor;
        /// Optional element 'witsml2:NatFlorPc' of XSD type 'eml22:AreaPerAreaMeasure'
        eml22__AreaPerAreaMeasure *NatFlorPc;
        /// Optional element 'witsml2:NatFlorLevel' of XSD type 'witsml2:ShowFluorescence'
        enum witsml2__ShowFluorescence *NatFlorLevel;
        /// Optional element 'witsml2:NatFlorDesc' of XSD type 'eml22:String64'
        std::string *NatFlorDesc;
        /// Optional element 'witsml2:ResidueColor' of XSD type 'eml22:String64'
        std::string *ResidueColor;
        /// Optional element 'witsml2:ImpregnatedLitho' of XSD type 'eml22:String64'
        std::string *ImpregnatedLitho;
        /// Optional element 'witsml2:Odor' of XSD type 'eml22:String64'
        std::string *Odor;
        /// Optional element 'witsml2:CuttingFluid' of XSD type 'eml22:String64'
        std::string *CuttingFluid;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalShow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalShow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsIntervalShow, default initialized and not managed by a soap context
        virtual witsml2__CuttingsIntervalShow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsIntervalShow); }
      public:
        /// Constructor with initializations
        witsml2__CuttingsIntervalShow() : Citation(), ShowRating(), StainColor(), StainDistr(), StainPc(), CutSpeed(), CutColor(), CutStrength(), CutForm(), CutLevel(), CutFlorForm(), CutFlorColor(), CutFlorStrength(), CutFlorSpeed(), CutFlorLevel(), NatFlorColor(), NatFlorPc(), NatFlorLevel(), NatFlorDesc(), ResidueColor(), ImpregnatedLitho(), Odor(), CuttingFluid(), uid(), soap() { }
        virtual ~witsml2__CuttingsIntervalShow() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsIntervalShow(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsIntervalShow * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsIntervalShow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:959 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedIntervalLithology (-257)
/* complex XSD type 'witsml2:InterpretedIntervalLithology': */
class SOAP_CMAC witsml2__InterpretedIntervalLithology {
      public:
        /// Required element 'witsml2:Kind' of XSD type 'eml22:LithologyKindExt'
        std::string Kind;
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'witsml2:CodeLith' of XSD type 'eml22:String64'
        std::string *CodeLith;
        /// Optional element 'witsml2:Color' of XSD type 'eml22:String64'
        std::string *Color;
        /// Optional element 'witsml2:Texture' of XSD type 'eml22:String64'
        std::string *Texture;
        /// Optional element 'witsml2:Hardness' of XSD type 'eml22:String64'
        std::string *Hardness;
        /// Optional element 'witsml2:Compaction' of XSD type 'eml22:String64'
        std::string *Compaction;
        /// Optional element 'witsml2:SizeGrain' of XSD type 'eml22:String64'
        std::string *SizeGrain;
        /// Optional element 'witsml2:Roundness' of XSD type 'eml22:String64'
        std::string *Roundness;
        /// Optional element 'witsml2:Sorting' of XSD type 'eml22:String64'
        std::string *Sorting;
        /// Optional element 'witsml2:Sphericity' of XSD type 'eml22:String64'
        std::string *Sphericity;
        /// Optional element 'witsml2:MatrixCement' of XSD type 'eml22:MatrixCementKind'
        enum eml22__MatrixCementKind *MatrixCement;
        /// Optional element 'witsml2:PorosityVisible' of XSD type 'eml22:String64'
        std::string *PorosityVisible;
        /// Optional element 'witsml2:PorosityFabric' of XSD type 'eml22:String64'
        std::string *PorosityFabric;
        /// Optional element 'witsml2:Permeability' of XSD type 'eml22:String64'
        std::string *Permeability;
        /// Optional element 'witsml2:Qualifier' of XSD type 'witsml2:LithologyQualifier'
        std::vector<witsml2__LithologyQualifier *> Qualifier;
        /// optional attribute 'uid' of XSD type 'eml22:String64'
        std::string *uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedIntervalLithology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedIntervalLithology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__InterpretedIntervalLithology, default initialized and not managed by a soap context
        virtual witsml2__InterpretedIntervalLithology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__InterpretedIntervalLithology); }
      public:
        /// Constructor with initializations
        witsml2__InterpretedIntervalLithology() : Kind(), Citation(), CodeLith(), Color(), Texture(), Hardness(), Compaction(), SizeGrain(), Roundness(), Sorting(), Sphericity(), MatrixCement(), PorosityVisible(), PorosityFabric(), Permeability(), Qualifier(), uid(), soap() { }
        virtual ~witsml2__InterpretedIntervalLithology() { }
        /// Friend allocator used by soap_new_witsml2__InterpretedIntervalLithology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__InterpretedIntervalLithology * SOAP_FMAC2 soap_instantiate_witsml2__InterpretedIntervalLithology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:962 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LithologyQualifier (-258)
/* complex XSD type 'witsml2:LithologyQualifier': */
class SOAP_CMAC witsml2__LithologyQualifier {
      public:
        /// Required element 'witsml2:Kind' of XSD type 'eml22:LithologyQualifierKindExt'
        std::string Kind;
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:Abundance' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Abundance;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__LithologyQualifier
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__LithologyQualifier; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LithologyQualifier, default initialized and not managed by a soap context
        virtual witsml2__LithologyQualifier *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LithologyQualifier); }
      public:
        /// Constructor with initializations
        witsml2__LithologyQualifier() : Kind(), MdInterval(), Abundance(), Description(), uid(), soap() { }
        virtual ~witsml2__LithologyQualifier() { }
        /// Friend allocator used by soap_new_witsml2__LithologyQualifier(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LithologyQualifier * SOAP_FMAC2 soap_instantiate_witsml2__LithologyQualifier(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:977 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Chromatograph
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Chromatograph (-263)
/* complex XSD type 'witsml2:Chromatograph': */
class SOAP_CMAC witsml2__Chromatograph {
      public:
        /// Optional element 'witsml2:ChromatographMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *ChromatographMdInterval;
        /// Optional element 'witsml2:DateTimeGasSampleProcessed' of XSD type 'eml22:TimeStamp'
        struct tm *DateTimeGasSampleProcessed;
        /// Optional element 'witsml2:ChromatographType' of XSD type 'eml22:String64'
        std::string *ChromatographType;
        /// Optional element 'witsml2:ETimChromCycle' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimChromCycle;
        /// Optional element 'witsml2:ChromReportTime' of XSD type 'eml22:TimeStamp'
        struct tm *ChromReportTime;
        /// Optional element 'witsml2:MudWeightIn' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MudWeightIn;
        /// Optional element 'witsml2:MudWeightOut' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MudWeightOut;
        /// Optional element 'witsml2:MethAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *MethAv;
        /// Optional element 'witsml2:MethMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *MethMn;
        /// Optional element 'witsml2:MethMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *MethMx;
        /// Optional element 'witsml2:EthAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *EthAv;
        /// Optional element 'witsml2:EthMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *EthMn;
        /// Optional element 'witsml2:EthMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *EthMx;
        /// Optional element 'witsml2:PropAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PropAv;
        /// Optional element 'witsml2:PropMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PropMn;
        /// Optional element 'witsml2:PropMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PropMx;
        /// Optional element 'witsml2:IbutAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IbutAv;
        /// Optional element 'witsml2:IbutMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IbutMn;
        /// Optional element 'witsml2:IbutMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IbutMx;
        /// Optional element 'witsml2:NbutAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NbutAv;
        /// Optional element 'witsml2:NbutMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NbutMn;
        /// Optional element 'witsml2:NbutMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NbutMx;
        /// Optional element 'witsml2:IpentAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IpentAv;
        /// Optional element 'witsml2:IpentMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IpentMn;
        /// Optional element 'witsml2:IpentMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IpentMx;
        /// Optional element 'witsml2:NpentAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NpentAv;
        /// Optional element 'witsml2:NpentMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NpentMn;
        /// Optional element 'witsml2:NpentMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NpentMx;
        /// Optional element 'witsml2:EpentAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *EpentAv;
        /// Optional element 'witsml2:EpentMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *EpentMn;
        /// Optional element 'witsml2:EpentMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *EpentMx;
        /// Optional element 'witsml2:IhexAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IhexAv;
        /// Optional element 'witsml2:IhexMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IhexMn;
        /// Optional element 'witsml2:IhexMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *IhexMx;
        /// Optional element 'witsml2:NhexAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NhexAv;
        /// Optional element 'witsml2:NhexMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NhexMn;
        /// Optional element 'witsml2:NhexMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *NhexMx;
        /// Optional element 'witsml2:Co2Av' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Co2Av;
        /// Optional element 'witsml2:Co2Mn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Co2Mn;
        /// Optional element 'witsml2:Co2Mx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Co2Mx;
        /// Optional element 'witsml2:H2sAv' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *H2sAv;
        /// Optional element 'witsml2:H2sMn' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *H2sMn;
        /// Optional element 'witsml2:H2sMx' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *H2sMx;
        /// Optional element 'witsml2:Acetylene' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Acetylene;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Chromatograph
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Chromatograph; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Chromatograph, default initialized and not managed by a soap context
        virtual witsml2__Chromatograph *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Chromatograph); }
      public:
        /// Constructor with initializations
        witsml2__Chromatograph() : ChromatographMdInterval(), DateTimeGasSampleProcessed(), ChromatographType(), ETimChromCycle(), ChromReportTime(), MudWeightIn(), MudWeightOut(), MethAv(), MethMn(), MethMx(), EthAv(), EthMn(), EthMx(), PropAv(), PropMn(), PropMx(), IbutAv(), IbutMn(), IbutMx(), NbutAv(), NbutMn(), NbutMx(), IpentAv(), IpentMn(), IpentMx(), NpentAv(), NpentMn(), NpentMx(), EpentAv(), EpentMn(), EpentMx(), IhexAv(), IhexMn(), IhexMx(), NhexAv(), NhexMn(), NhexMx(), Co2Av(), Co2Mn(), Co2Mx(), H2sAv(), H2sMn(), H2sMx(), Acetylene(), Channel(), soap() { }
        virtual ~witsml2__Chromatograph() { }
        /// Friend allocator used by soap_new_witsml2__Chromatograph(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Chromatograph * SOAP_FMAC2 soap_instantiate_witsml2__Chromatograph(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32451 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__DrillingParameters_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__DrillingParameters_sequence (-1721)
/* Wrapper: */
class SOAP_CMAC __witsml2__DrillingParameters_sequence {
      public:
        /// Optional element 'witsml2:Rop' of XSD type 'witsml2:RopStatistics'
        witsml2__RopStatistics *Rop;
        /// Optional element 'witsml2:AverageWeightOnBit' of XSD type 'witsml2:WobStatistics'
        witsml2__WobStatistics *AverageWeightOnBit;
        /// Optional element 'witsml2:AverageTorque' of XSD type 'witsml2:TorqueStatistics'
        witsml2__TorqueStatistics *AverageTorque;
        /// Optional element 'witsml2:AverageTorqueCurrent' of XSD type 'witsml2:TorqueCurrentStatistics'
        witsml2__TorqueCurrentStatistics *AverageTorqueCurrent;
        /// Optional element 'witsml2:AverageTurnRate' of XSD type 'witsml2:RpmStatistics'
        witsml2__RpmStatistics *AverageTurnRate;
        /// Optional element 'witsml2:AverageMudDensity' of XSD type 'witsml2:MudDensityStatistics'
        witsml2__MudDensityStatistics *AverageMudDensity;
        /// Optional element 'witsml2:AverageEcdAtTd' of XSD type 'witsml2:EcdStatistics'
        witsml2__EcdStatistics *AverageEcdAtTd;
        /// Optional element 'witsml2:AverageDrillingCoefficient' of XSD type 'witsml2:DxcStatistics'
        witsml2__DxcStatistics *AverageDrillingCoefficient;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__DrillingParameters_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__DrillingParameters_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__DrillingParameters_sequence, default initialized and not managed by a soap context
        virtual __witsml2__DrillingParameters_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__DrillingParameters_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__DrillingParameters_sequence() : Rop(), AverageWeightOnBit(), AverageTorque(), AverageTorqueCurrent(), AverageTurnRate(), AverageMudDensity(), AverageEcdAtTd(), AverageDrillingCoefficient() { }
        virtual ~__witsml2__DrillingParameters_sequence() { }
        /// Friend allocator used by soap_new___witsml2__DrillingParameters_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__DrillingParameters_sequence * SOAP_FMAC2 soap_instantiate___witsml2__DrillingParameters_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:980 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParameters (-264)
/* complex XSD type 'witsml2:DrillingParameters': */
class SOAP_CMAC witsml2__DrillingParameters {
      public:
        __witsml2__DrillingParameters_sequence *__DrillingParameters_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParameters
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParameters; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillingParameters, default initialized and not managed by a soap context
        virtual witsml2__DrillingParameters *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillingParameters); }
      public:
        /// Constructor with initializations
        witsml2__DrillingParameters() : __DrillingParameters_sequence(), soap() { }
        virtual ~witsml2__DrillingParameters() { }
        /// Friend allocator used by soap_new_witsml2__DrillingParameters(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillingParameters * SOAP_FMAC2 soap_instantiate_witsml2__DrillingParameters(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32516 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__DxcStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__DxcStatistics_sequence (-1731)
/* Wrapper: */
class SOAP_CMAC __witsml2__DxcStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__DxcStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__DxcStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__DxcStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__DxcStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__DxcStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__DxcStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__DxcStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__DxcStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__DxcStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__DxcStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:983 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DxcStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DxcStatistics (-265)
/* complex XSD type 'witsml2:DxcStatistics': */
class SOAP_CMAC witsml2__DxcStatistics {
      public:
        __witsml2__DxcStatistics_sequence *__DxcStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DxcStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DxcStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DxcStatistics, default initialized and not managed by a soap context
        virtual witsml2__DxcStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DxcStatistics); }
      public:
        /// Constructor with initializations
        witsml2__DxcStatistics() : __DxcStatistics_sequence(), soap() { }
        virtual ~witsml2__DxcStatistics() { }
        /// Friend allocator used by soap_new_witsml2__DxcStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DxcStatistics * SOAP_FMAC2 soap_instantiate_witsml2__DxcStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32551 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__EcdStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__EcdStatistics_sequence (-1733)
/* Wrapper: */
class SOAP_CMAC __witsml2__EcdStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__EcdStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__EcdStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__EcdStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__EcdStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__EcdStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__EcdStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__EcdStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__EcdStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__EcdStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__EcdStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:986 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EcdStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EcdStatistics (-266)
/* complex XSD type 'witsml2:EcdStatistics': */
class SOAP_CMAC witsml2__EcdStatistics {
      public:
        __witsml2__EcdStatistics_sequence *__EcdStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__EcdStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__EcdStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EcdStatistics, default initialized and not managed by a soap context
        virtual witsml2__EcdStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EcdStatistics); }
      public:
        /// Constructor with initializations
        witsml2__EcdStatistics() : __EcdStatistics_sequence(), soap() { }
        virtual ~witsml2__EcdStatistics() { }
        /// Friend allocator used by soap_new_witsml2__EcdStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EcdStatistics * SOAP_FMAC2 soap_instantiate_witsml2__EcdStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:989 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GasInMud
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GasInMud (-267)
/* complex XSD type 'witsml2:GasInMud': */
class SOAP_CMAC witsml2__GasInMud {
      public:
        /// Optional element 'witsml2:Average' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Average;
        /// Optional element 'witsml2:Maximum' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Maximum;
        /// Required element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GasInMud
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GasInMud; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GasInMud, default initialized and not managed by a soap context
        virtual witsml2__GasInMud *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GasInMud); }
      public:
        /// Constructor with initializations
        witsml2__GasInMud() : Average(), Maximum(), Channel(), soap() { }
        virtual ~witsml2__GasInMud() { }
        /// Friend allocator used by soap_new_witsml2__GasInMud(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GasInMud * SOAP_FMAC2 soap_instantiate_witsml2__GasInMud(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:992 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeak (-268)
/* complex XSD type 'witsml2:GasPeak': */
class SOAP_CMAC witsml2__GasPeak {
      public:
        /// Required element 'witsml2:PeakType' of XSD type 'witsml2:GasPeakType'
        enum witsml2__GasPeakType PeakType;
        /// Optional element 'witsml2:MdPeak' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdPeak;
        /// Optional element 'witsml2:AverageGas' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *AverageGas;
        /// Optional element 'witsml2:PeakGas' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PeakGas;
        /// Optional element 'witsml2:BackgroundGas' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *BackgroundGas;
        /// Required element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeak
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeak; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GasPeak, default initialized and not managed by a soap context
        virtual witsml2__GasPeak *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GasPeak); }
      public:
        /// Constructor with initializations
        witsml2__GasPeak() : PeakType(), MdPeak(), AverageGas(), PeakGas(), BackgroundGas(), Channel(), soap() { }
        virtual ~witsml2__GasPeak() { }
        /// Friend allocator used by soap_new_witsml2__GasPeak(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GasPeak * SOAP_FMAC2 soap_instantiate_witsml2__GasPeak(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32665 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__MudDensityStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__MudDensityStatistics_sequence (-1735)
/* Wrapper: */
class SOAP_CMAC __witsml2__MudDensityStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__MudDensityStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__MudDensityStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__MudDensityStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__MudDensityStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__MudDensityStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__MudDensityStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__MudDensityStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__MudDensityStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__MudDensityStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__MudDensityStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:995 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudDensityStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudDensityStatistics (-269)
/* complex XSD type 'witsml2:MudDensityStatistics': */
class SOAP_CMAC witsml2__MudDensityStatistics {
      public:
        __witsml2__MudDensityStatistics_sequence *__MudDensityStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudDensityStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudDensityStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudDensityStatistics, default initialized and not managed by a soap context
        virtual witsml2__MudDensityStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudDensityStatistics); }
      public:
        /// Constructor with initializations
        witsml2__MudDensityStatistics() : __MudDensityStatistics_sequence(), soap() { }
        virtual ~witsml2__MudDensityStatistics() { }
        /// Friend allocator used by soap_new_witsml2__MudDensityStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudDensityStatistics * SOAP_FMAC2 soap_instantiate_witsml2__MudDensityStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32700 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__MudGas_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__MudGas_sequence (-1737)
/* Wrapper: */
class SOAP_CMAC __witsml2__MudGas_sequence {
      public:
        /// Optional element 'witsml2:GasInMud' of XSD type 'witsml2:GasInMud'
        witsml2__GasInMud *GasInMud;
        /// Optional element 'witsml2:GasPeak' of XSD type 'witsml2:GasPeak'
        std::vector<witsml2__GasPeak *> GasPeak;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__MudGas_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__MudGas_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__MudGas_sequence, default initialized and not managed by a soap context
        virtual __witsml2__MudGas_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__MudGas_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__MudGas_sequence() : GasInMud(), GasPeak() { }
        virtual ~__witsml2__MudGas_sequence() { }
        /// Friend allocator used by soap_new___witsml2__MudGas_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__MudGas_sequence * SOAP_FMAC2 soap_instantiate___witsml2__MudGas_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:998 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudGas (-270)
/* complex XSD type 'witsml2:MudGas': */
class SOAP_CMAC witsml2__MudGas {
      public:
        __witsml2__MudGas_sequence *__MudGas_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudGas
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudGas; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudGas, default initialized and not managed by a soap context
        virtual witsml2__MudGas *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudGas); }
      public:
        /// Constructor with initializations
        witsml2__MudGas() : __MudGas_sequence(), soap() { }
        virtual ~witsml2__MudGas() { }
        /// Friend allocator used by soap_new_witsml2__MudGas(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudGas * SOAP_FMAC2 soap_instantiate_witsml2__MudGas(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1007 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogParameter (-273)
/* Type witsml2__MudLogParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogParameter': */
class SOAP_CMAC witsml2__MudLogParameter {
      public:
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Required element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Required element 'witsml2:Comments' of XSD type 'eml22:String2000'
        std::string Comments;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogParameter); }
      public:
        /// Constructor with initializations
        witsml2__MudLogParameter() : MdInterval(), Citation(), Comments(), uid(), soap() { }
        virtual ~witsml2__MudLogParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1019 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudlogReportInterval (-277)
/* complex XSD type 'witsml2:MudlogReportInterval': */
class SOAP_CMAC witsml2__MudlogReportInterval {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:CuttingsGeologyInterval' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CuttingsGeologyInterval;
        /// Optional element 'witsml2:InterpretedGeologyInterval' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *InterpretedGeologyInterval;
        /// Optional element 'witsml2:ShowEvaluationInterval' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ShowEvaluationInterval;
        /// Optional element 'witsml2:Chromatograph' of XSD type 'witsml2:Chromatograph'
        witsml2__Chromatograph *Chromatograph;
        /// Optional element 'witsml2:DrillingParameters' of XSD type 'witsml2:DrillingParameters'
        std::vector<witsml2__DrillingParameters *> DrillingParameters;
        /// Optional element 'witsml2:MudGas' of XSD type 'witsml2:MudGas'
        std::vector<witsml2__MudGas *> MudGas;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudlogReportInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudlogReportInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudlogReportInterval, default initialized and not managed by a soap context
        virtual witsml2__MudlogReportInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudlogReportInterval); }
      public:
        /// Constructor with initializations
        witsml2__MudlogReportInterval() : MdInterval(), CuttingsGeologyInterval(), InterpretedGeologyInterval(), ShowEvaluationInterval(), Chromatograph(), DrillingParameters(), MudGas(), uid(), soap() { }
        virtual ~witsml2__MudlogReportInterval() { }
        /// Friend allocator used by soap_new_witsml2__MudlogReportInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudlogReportInterval * SOAP_FMAC2 soap_instantiate_witsml2__MudlogReportInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32820 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__RopStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__RopStatistics_sequence (-1747)
/* Wrapper: */
class SOAP_CMAC __witsml2__RopStatistics_sequence {
      public:
        /// Optional element 'witsml2:Average' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *Average;
        /// Optional element 'witsml2:Minimum' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *Minimum;
        /// Optional element 'witsml2:Maximum' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *Maximum;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__RopStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__RopStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__RopStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__RopStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__RopStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__RopStatistics_sequence() : Average(), Minimum(), Maximum(), Channel() { }
        virtual ~__witsml2__RopStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__RopStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__RopStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__RopStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1025 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RopStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RopStatistics (-279)
/* complex XSD type 'witsml2:RopStatistics': */
class SOAP_CMAC witsml2__RopStatistics {
      public:
        __witsml2__RopStatistics_sequence *__RopStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RopStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RopStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RopStatistics, default initialized and not managed by a soap context
        virtual witsml2__RopStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RopStatistics); }
      public:
        /// Constructor with initializations
        witsml2__RopStatistics() : __RopStatistics_sequence(), soap() { }
        virtual ~witsml2__RopStatistics() { }
        /// Friend allocator used by soap_new_witsml2__RopStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RopStatistics * SOAP_FMAC2 soap_instantiate_witsml2__RopStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32865 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__RpmStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__RpmStatistics_sequence (-1749)
/* Wrapper: */
class SOAP_CMAC __witsml2__RpmStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:AngularVelocityMeasure'
        eml22__AngularVelocityMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__RpmStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__RpmStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__RpmStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__RpmStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__RpmStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__RpmStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__RpmStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__RpmStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__RpmStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__RpmStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1028 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RpmStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RpmStatistics (-280)
/* complex XSD type 'witsml2:RpmStatistics': */
class SOAP_CMAC witsml2__RpmStatistics {
      public:
        __witsml2__RpmStatistics_sequence *__RpmStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RpmStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RpmStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RpmStatistics, default initialized and not managed by a soap context
        virtual witsml2__RpmStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RpmStatistics); }
      public:
        /// Constructor with initializations
        witsml2__RpmStatistics() : __RpmStatistics_sequence(), soap() { }
        virtual ~witsml2__RpmStatistics() { }
        /// Friend allocator used by soap_new_witsml2__RpmStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RpmStatistics * SOAP_FMAC2 soap_instantiate_witsml2__RpmStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32900 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueCurrentStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueCurrentStatistics_sequence (-1751)
/* Wrapper: */
class SOAP_CMAC __witsml2__TorqueCurrentStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:ElectricCurrentMeasure'
        eml22__ElectricCurrentMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueCurrentStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueCurrentStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__TorqueCurrentStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__TorqueCurrentStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__TorqueCurrentStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__TorqueCurrentStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__TorqueCurrentStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__TorqueCurrentStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__TorqueCurrentStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__TorqueCurrentStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1031 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueCurrentStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueCurrentStatistics (-281)
/* complex XSD type 'witsml2:TorqueCurrentStatistics': */
class SOAP_CMAC witsml2__TorqueCurrentStatistics {
      public:
        __witsml2__TorqueCurrentStatistics_sequence *__TorqueCurrentStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueCurrentStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueCurrentStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TorqueCurrentStatistics, default initialized and not managed by a soap context
        virtual witsml2__TorqueCurrentStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TorqueCurrentStatistics); }
      public:
        /// Constructor with initializations
        witsml2__TorqueCurrentStatistics() : __TorqueCurrentStatistics_sequence(), soap() { }
        virtual ~witsml2__TorqueCurrentStatistics() { }
        /// Friend allocator used by soap_new_witsml2__TorqueCurrentStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TorqueCurrentStatistics * SOAP_FMAC2 soap_instantiate_witsml2__TorqueCurrentStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32935 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueStatistics_sequence (-1754)
/* Wrapper: */
class SOAP_CMAC __witsml2__TorqueStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__TorqueStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__TorqueStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__TorqueStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__TorqueStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__TorqueStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__TorqueStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__TorqueStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__TorqueStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__TorqueStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1034 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueStatistics (-282)
/* complex XSD type 'witsml2:TorqueStatistics': */
class SOAP_CMAC witsml2__TorqueStatistics {
      public:
        __witsml2__TorqueStatistics_sequence *__TorqueStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TorqueStatistics, default initialized and not managed by a soap context
        virtual witsml2__TorqueStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TorqueStatistics); }
      public:
        /// Constructor with initializations
        witsml2__TorqueStatistics() : __TorqueStatistics_sequence(), soap() { }
        virtual ~witsml2__TorqueStatistics() { }
        /// Friend allocator used by soap_new_witsml2__TorqueStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TorqueStatistics * SOAP_FMAC2 soap_instantiate_witsml2__TorqueStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:32970 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__WobStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__WobStatistics_sequence (-1756)
/* Wrapper: */
class SOAP_CMAC __witsml2__WobStatistics_sequence {
      public:
        /// Required element 'witsml2:Average' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *Average;
        /// Optional element 'witsml2:Channel' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Channel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__WobStatistics_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__WobStatistics_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__WobStatistics_sequence, default initialized and not managed by a soap context
        virtual __witsml2__WobStatistics_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__WobStatistics_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__WobStatistics_sequence() : Average(), Channel() { }
        virtual ~__witsml2__WobStatistics_sequence() { }
        /// Friend allocator used by soap_new___witsml2__WobStatistics_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__WobStatistics_sequence * SOAP_FMAC2 soap_instantiate___witsml2__WobStatistics_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1037 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WobStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WobStatistics (-283)
/* complex XSD type 'witsml2:WobStatistics': */
class SOAP_CMAC witsml2__WobStatistics {
      public:
        __witsml2__WobStatistics_sequence *__WobStatistics_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WobStatistics
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WobStatistics; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WobStatistics, default initialized and not managed by a soap context
        virtual witsml2__WobStatistics *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WobStatistics); }
      public:
        /// Constructor with initializations
        witsml2__WobStatistics() : __WobStatistics_sequence(), soap() { }
        virtual ~witsml2__WobStatistics() { }
        /// Friend allocator used by soap_new_witsml2__WobStatistics(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WobStatistics * SOAP_FMAC2 soap_instantiate_witsml2__WobStatistics(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1046 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatusHistory (-286)
/* complex XSD type 'witsml2:CompletionStatusHistory': */
class SOAP_CMAC witsml2__CompletionStatusHistory {
      public:
        /// Optional element 'witsml2:Status' of XSD type 'witsml2:CompletionStatus'
        enum witsml2__CompletionStatus *Status;
        /// Optional element 'witsml2:StartDate' of XSD type 'eml22:TimeStamp'
        struct tm *StartDate;
        /// Optional element 'witsml2:EndDate' of XSD type 'eml22:TimeStamp'
        struct tm *EndDate;
        /// Optional element 'witsml2:PerforationMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CompletionStatusHistory, default initialized and not managed by a soap context
        virtual witsml2__CompletionStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CompletionStatusHistory); }
      public:
        /// Constructor with initializations
        witsml2__CompletionStatusHistory() : Status(), StartDate(), EndDate(), PerforationMdInterval(), Comment(), uid(), soap() { }
        virtual ~witsml2__CompletionStatusHistory() { }
        /// Friend allocator used by soap_new_witsml2__CompletionStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CompletionStatusHistory * SOAP_FMAC2 soap_instantiate_witsml2__CompletionStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1052 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ContactIntervalSet (-288)
/* complex XSD type 'witsml2:ContactIntervalSet': */
class SOAP_CMAC witsml2__ContactIntervalSet {
      public:
        /// Optional element 'witsml2:SlotsInterval' of XSD type 'witsml2:SlotsInterval'
        std::vector<witsml2__SlotsInterval *> SlotsInterval;
        /// Optional element 'witsml2:OpenHoleInterval' of XSD type 'witsml2:OpenHoleInterval'
        std::vector<witsml2__OpenHoleInterval *> OpenHoleInterval;
        /// Optional element 'witsml2:PerforationSetInterval' of XSD type 'witsml2:PerforationSetInterval'
        std::vector<witsml2__PerforationSetInterval *> PerforationSetInterval;
        /// Optional element 'witsml2:GravelPackInterval' of XSD type 'witsml2:GravelPackInterval'
        std::vector<witsml2__GravelPackInterval *> GravelPackInterval;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ContactIntervalSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ContactIntervalSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ContactIntervalSet, default initialized and not managed by a soap context
        virtual witsml2__ContactIntervalSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ContactIntervalSet); }
      public:
        /// Constructor with initializations
        witsml2__ContactIntervalSet() : SlotsInterval(), OpenHoleInterval(), PerforationSetInterval(), GravelPackInterval(), soap() { }
        virtual ~witsml2__ContactIntervalSet() { }
        /// Friend allocator used by soap_new_witsml2__ContactIntervalSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ContactIntervalSet * SOAP_FMAC2 soap_instantiate_witsml2__ContactIntervalSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1055 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GravelPackInterval (-289)
/* complex XSD type 'witsml2:GravelPackInterval': */
class SOAP_CMAC witsml2__GravelPackInterval {
      public:
        /// Optional element 'witsml2:DownholeStringReferenceId' of XSD type 'eml22:String64'
        std::string *DownholeStringReferenceId;
        /// Optional element 'witsml2:GravelPackMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *GravelPackMdInterval;
        /// Optional element 'witsml2:GravelPackTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *GravelPackTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XSD type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:StatusHistory' of XSD type 'witsml2:IntervalStatusHistory'
        std::vector<witsml2__IntervalStatusHistory *> StatusHistory;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GravelPackInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GravelPackInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GravelPackInterval, default initialized and not managed by a soap context
        virtual witsml2__GravelPackInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GravelPackInterval); }
      public:
        /// Constructor with initializations
        witsml2__GravelPackInterval() : DownholeStringReferenceId(), GravelPackMdInterval(), GravelPackTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml2__GravelPackInterval() { }
        /// Friend allocator used by soap_new_witsml2__GravelPackInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GravelPackInterval * SOAP_FMAC2 soap_instantiate_witsml2__GravelPackInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1058 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IntervalStatusHistory (-290)
/* complex XSD type 'witsml2:IntervalStatusHistory': */
class SOAP_CMAC witsml2__IntervalStatusHistory {
      public:
        /// Optional element 'witsml2:PhysicalStatus' of XSD type 'witsml2:PhysicalStatus'
        enum witsml2__PhysicalStatus *PhysicalStatus;
        /// Optional element 'witsml2:StartDate' of XSD type 'eml22:TimeStamp'
        struct tm *StartDate;
        /// Optional element 'witsml2:EndDate' of XSD type 'eml22:TimeStamp'
        struct tm *EndDate;
        /// Optional element 'witsml2:StatusMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *StatusMdInterval;
        /// Optional element 'witsml2:AllocationFactor' of XSD type 'witsml2:NonNegativeFraction'
        double *AllocationFactor;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__IntervalStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__IntervalStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IntervalStatusHistory, default initialized and not managed by a soap context
        virtual witsml2__IntervalStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IntervalStatusHistory); }
      public:
        /// Constructor with initializations
        witsml2__IntervalStatusHistory() : PhysicalStatus(), StartDate(), EndDate(), StatusMdInterval(), AllocationFactor(), Comment(), uid(), soap() { }
        virtual ~witsml2__IntervalStatusHistory() { }
        /// Friend allocator used by soap_new_witsml2__IntervalStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IntervalStatusHistory * SOAP_FMAC2 soap_instantiate_witsml2__IntervalStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1061 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OpenHoleInterval (-291)
/* complex XSD type 'witsml2:OpenHoleInterval': */
class SOAP_CMAC witsml2__OpenHoleInterval {
      public:
        /// Optional element 'witsml2:BoreholeStringReferenceId' of XSD type 'eml22:String64'
        std::string *BoreholeStringReferenceId;
        /// Optional element 'witsml2:OpenHoleMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *OpenHoleMdInterval;
        /// Optional element 'witsml2:OpenHoleTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *OpenHoleTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XSD type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:StatusHistory' of XSD type 'witsml2:IntervalStatusHistory'
        std::vector<witsml2__IntervalStatusHistory *> StatusHistory;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__OpenHoleInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__OpenHoleInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OpenHoleInterval, default initialized and not managed by a soap context
        virtual witsml2__OpenHoleInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OpenHoleInterval); }
      public:
        /// Constructor with initializations
        witsml2__OpenHoleInterval() : BoreholeStringReferenceId(), OpenHoleMdInterval(), OpenHoleTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml2__OpenHoleInterval() { }
        /// Friend allocator used by soap_new_witsml2__OpenHoleInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OpenHoleInterval * SOAP_FMAC2 soap_instantiate_witsml2__OpenHoleInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1064 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSetInterval (-292)
/* complex XSD type 'witsml2:PerforationSetInterval': */
class SOAP_CMAC witsml2__PerforationSetInterval {
      public:
        /// Optional element 'witsml2:PerforationSetReferenceId' of XSD type 'eml22:String64'
        std::string *PerforationSetReferenceId;
        /// Optional element 'witsml2:PerforationSetMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *PerforationSetMdInterval;
        /// Optional element 'witsml2:PerforationSetTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *PerforationSetTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XSD type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureReferenceId' of XSD type 'eml22:String64'
        std::vector<std::string> GeologyFeatureReferenceId;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:PerforationStatusHistory' of XSD type 'witsml2:PerforationStatusHistory'
        std::vector<witsml2__PerforationStatusHistory *> PerforationStatusHistory;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSetInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSetInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationSetInterval, default initialized and not managed by a soap context
        virtual witsml2__PerforationSetInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationSetInterval); }
      public:
        /// Constructor with initializations
        witsml2__PerforationSetInterval() : PerforationSetReferenceId(), PerforationSetMdInterval(), PerforationSetTvdInterval(), EventHistory(), GeologyFeatureReferenceId(), ExtensionNameValue(), PerforationStatusHistory(), uid(), soap() { }
        virtual ~witsml2__PerforationSetInterval() { }
        /// Friend allocator used by soap_new_witsml2__PerforationSetInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationSetInterval * SOAP_FMAC2 soap_instantiate_witsml2__PerforationSetInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1067 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatusHistory (-293)
/* complex XSD type 'witsml2:PerforationStatusHistory': */
class SOAP_CMAC witsml2__PerforationStatusHistory {
      public:
        /// Optional element 'witsml2:PerforationStatus' of XSD type 'witsml2:PerforationStatus'
        enum witsml2__PerforationStatus *PerforationStatus;
        /// Optional element 'witsml2:StartDate' of XSD type 'eml22:TimeStamp'
        struct tm *StartDate;
        /// Optional element 'witsml2:EndDate' of XSD type 'eml22:TimeStamp'
        struct tm *EndDate;
        /// Optional element 'witsml2:PerforationMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *PerforationMdInterval;
        /// Optional element 'witsml2:PerforationTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *PerforationTvdInterval;
        /// Optional element 'witsml2:AllocationFactor' of XSD type 'witsml2:NonNegativeFraction'
        double *AllocationFactor;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatusHistory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatusHistory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforationStatusHistory, default initialized and not managed by a soap context
        virtual witsml2__PerforationStatusHistory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforationStatusHistory); }
      public:
        /// Constructor with initializations
        witsml2__PerforationStatusHistory() : PerforationStatus(), StartDate(), EndDate(), PerforationMdInterval(), PerforationTvdInterval(), AllocationFactor(), Comment(), uid(), soap() { }
        virtual ~witsml2__PerforationStatusHistory() { }
        /// Friend allocator used by soap_new_witsml2__PerforationStatusHistory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforationStatusHistory * SOAP_FMAC2 soap_instantiate_witsml2__PerforationStatusHistory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1070 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SlotsInterval (-294)
/* complex XSD type 'witsml2:SlotsInterval': */
class SOAP_CMAC witsml2__SlotsInterval {
      public:
        /// Optional element 'witsml2:StringEquipmentReferenceId' of XSD type 'eml22:String64'
        std::string *StringEquipmentReferenceId;
        /// Optional element 'witsml2:SlottedMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *SlottedMdInterval;
        /// Optional element 'witsml2:SlottedTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *SlottedTvdInterval;
        /// Optional element 'witsml2:EventHistory' of XSD type 'witsml2:EventInfo'
        witsml2__EventInfo *EventHistory;
        /// Optional element 'witsml2:GeologyFeatureRefID' of XSD type 'eml22:String64'
        std::vector<std::string> GeologyFeatureRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:StatusHistory' of XSD type 'witsml2:IntervalStatusHistory'
        std::vector<witsml2__IntervalStatusHistory *> StatusHistory;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__SlotsInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__SlotsInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SlotsInterval, default initialized and not managed by a soap context
        virtual witsml2__SlotsInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SlotsInterval); }
      public:
        /// Constructor with initializations
        witsml2__SlotsInterval() : StringEquipmentReferenceId(), SlottedMdInterval(), SlottedTvdInterval(), EventHistory(), GeologyFeatureRefID(), ExtensionNameValue(), StatusHistory(), uid(), soap() { }
        virtual ~witsml2__SlotsInterval() { }
        /// Friend allocator used by soap_new_witsml2__SlotsInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SlotsInterval * SOAP_FMAC2 soap_instantiate_witsml2__SlotsInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1076 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject (-296)
/* Type eml22__AbstractObject is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractObject': */
class SOAP_CMAC eml22__AbstractObject {
      public:
        /// Optional element 'eml22:Aliases' of XSD type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> Aliases;
        /// Required element 'eml22:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'eml22:CustomData' of XSD type 'eml22:CustomData'
        eml22__CustomData *CustomData;
        /// Optional element 'eml22:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// optional attribute 'objectVersion' of XSD type 'eml22:String64'
        std::string *objectVersion;
        /// required attribute 'schemaVersion' of XSD type 'eml22:String64'
        std::string schemaVersion;
        /// required attribute 'uuid' of XSD type 'eml22:UuidString'
        std::string uuid;
        /// optional attribute 'existenceKind' of XSD type 'eml22:ExistenceKind'
        enum eml22__ExistenceKind *existenceKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractObject, default initialized and not managed by a soap context
        virtual eml22__AbstractObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractObject); }
      public:
        /// Constructor with initializations
        eml22__AbstractObject() : Aliases(), Citation(), CustomData(), ExtensionNameValue(), objectVersion(), schemaVersion(), uuid(), existenceKind(), soap() { }
        virtual ~eml22__AbstractObject() { }
        /// Friend allocator used by soap_new_eml22__AbstractObject(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractObject * SOAP_FMAC2 soap_instantiate_eml22__AbstractObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1079 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Citation
#define SOAP_TYPE_gsoap_eml2_2_eml22__Citation (-297)
/* complex XSD type 'eml22:Citation': */
class SOAP_CMAC eml22__Citation {
      public:
        /// Required element 'eml22:Title' of XSD type 'eml22:String256'
        std::string Title;
        /// Required element 'eml22:Originator' of XSD type 'eml22:String64'
        std::string Originator;
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm Creation;
        /// Required element 'eml22:Format' of XSD type 'eml22:String2000'
        std::string Format;
        /// Optional element 'eml22:Editor' of XSD type 'eml22:String64'
        std::string *Editor;
        /// Optional element 'eml22:LastUpdate' of XSD type 'eml22:TimeStamp'
        struct tm *LastUpdate;
        /// Optional element 'eml22:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'eml22:DescriptiveKeywords' of XSD type 'eml22:String2000'
        std::string *DescriptiveKeywords;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__Citation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__Citation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__Citation, default initialized and not managed by a soap context
        virtual eml22__Citation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__Citation); }
      public:
        /// Constructor with initializations
        eml22__Citation() : Title(), Originator(), Creation(), Format(), Editor(), LastUpdate(), Description(), DescriptiveKeywords(), soap() { }
        virtual ~eml22__Citation() { }
        /// Friend allocator used by soap_new_eml22__Citation(struct soap*, int)
        friend SOAP_FMAC1 eml22__Citation * SOAP_FMAC2 soap_instantiate_eml22__Citation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1082 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CustomData
#define SOAP_TYPE_gsoap_eml2_2_eml22__CustomData (-298)
/* complex XSD type 'eml22:CustomData': */
class SOAP_CMAC eml22__CustomData {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CustomData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CustomData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CustomData, default initialized and not managed by a soap context
        virtual eml22__CustomData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CustomData); }
      public:
        /// Constructor with initializations
        eml22__CustomData() : __any(), soap() { }
        virtual ~eml22__CustomData() { }
        /// Friend allocator used by soap_new_eml22__CustomData(struct soap*, int)
        friend SOAP_FMAC1 eml22__CustomData * SOAP_FMAC2 soap_instantiate_eml22__CustomData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1085 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue (-299)
/* complex XSD type 'eml22:ExtensionNameValue': */
class SOAP_CMAC eml22__ExtensionNameValue {
      public:
        /// Required element 'eml22:Name' of XSD type 'eml22:String64'
        std::string Name;
        /// Required element 'eml22:Value' of XSD type 'eml22:StringMeasure'
        eml22__StringMeasure *Value;
        /// Optional element 'eml22:MeasureClass' of XSD type 'eml22:MeasureClass'
        enum eml22__MeasureClass *MeasureClass;
        /// Optional element 'eml22:DTim' of XSD type 'eml22:TimeStamp'
        struct tm *DTim;
        /// Optional element 'eml22:Index' of XSD type 'xsd:long'
        LONG64 *Index;
        /// Optional element 'eml22:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ExtensionNameValue, default initialized and not managed by a soap context
        virtual eml22__ExtensionNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ExtensionNameValue); }
      public:
        /// Constructor with initializations
        eml22__ExtensionNameValue() : Name(), Value(), MeasureClass(), DTim(), Index(), Description(), soap() { }
        virtual ~eml22__ExtensionNameValue() { }
        /// Friend allocator used by soap_new_eml22__ExtensionNameValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__ExtensionNameValue * SOAP_FMAC2 soap_instantiate_eml22__ExtensionNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1088 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias (-300)
/* complex XSD type 'eml22:ObjectAlias': */
class SOAP_CMAC eml22__ObjectAlias {
      public:
        /// Required element 'eml22:Identifier' of XSD type 'eml22:String64'
        std::string Identifier;
        /// Optional element 'eml22:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// required attribute 'authority' of XSD type 'eml22:String64'
        std::string authority;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ObjectAlias, default initialized and not managed by a soap context
        virtual eml22__ObjectAlias *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ObjectAlias); }
      public:
        /// Constructor with initializations
        eml22__ObjectAlias() : Identifier(), Description(), authority(), soap() { }
        virtual ~eml22__ObjectAlias() { }
        /// Friend allocator used by soap_new_eml22__ObjectAlias(struct soap*, int)
        friend SOAP_FMAC1 eml22__ObjectAlias * SOAP_FMAC2 soap_instantiate_eml22__ObjectAlias(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1106 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray (-306)
/* Type eml22__AbstractValueArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractValueArray': */
class SOAP_CMAC eml22__AbstractValueArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractValueArray, default initialized and not managed by a soap context
        virtual eml22__AbstractValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractValueArray); }
      public:
        /// Constructor with initializations
        eml22__AbstractValueArray() : soap() { }
        virtual ~eml22__AbstractValueArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractValueArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractValueArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1121 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Cost
#define SOAP_TYPE_gsoap_eml2_2_eml22__Cost (-311)
/* complex XSD type 'eml22:Cost': */
class SOAP_CMAC eml22__Cost {
      public:
        /// required attribute 'currency' of XSD type 'eml22:String64'
        std::string currency;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__Cost
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__Cost; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__Cost, default initialized and not managed by a soap context
        virtual eml22__Cost *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__Cost); }
      public:
        /// Constructor with initializations
        eml22__Cost() : currency(), soap() { }
        virtual ~eml22__Cost() { }
        /// Friend allocator used by soap_new_eml22__Cost(struct soap*, int)
        friend SOAP_FMAC1 eml22__Cost * SOAP_FMAC2 soap_instantiate_eml22__Cost(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1127 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DummyType
#define SOAP_TYPE_gsoap_eml2_2_eml22__DummyType (-313)
/* complex XSD type 'eml22:DummyType': */
class SOAP_CMAC eml22__DummyType {
      public:
        /// Required element 'eml22:DummyElement' of XSD type 'eml22:CustomData'
        eml22__CustomData *DummyElement;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DummyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DummyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DummyType, default initialized and not managed by a soap context
        virtual eml22__DummyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DummyType); }
      public:
        /// Constructor with initializations
        eml22__DummyType() : DummyElement(), soap() { }
        virtual ~eml22__DummyType() { }
        /// Friend allocator used by soap_new_eml22__DummyType(struct soap*, int)
        friend SOAP_FMAC1 eml22__DummyType * SOAP_FMAC2 soap_instantiate_eml22__DummyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1160 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray (-324)
/* complex XSD type 'eml22:JaggedArray': */
class SOAP_CMAC eml22__JaggedArray {
      public:
        /// Required element 'eml22:Elements' of XSD type 'eml22:AbstractValueArray'
        eml22__AbstractValueArray *Elements;
        /// Required element 'eml22:CumulativeLength' of XSD type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CumulativeLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__JaggedArray, default initialized and not managed by a soap context
        virtual eml22__JaggedArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__JaggedArray); }
      public:
        /// Constructor with initializations
        eml22__JaggedArray() : Elements(), CumulativeLength(), soap() { }
        virtual ~eml22__JaggedArray() { }
        /// Friend allocator used by soap_new_eml22__JaggedArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__JaggedArray * SOAP_FMAC2 soap_instantiate_eml22__JaggedArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1163 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval (-325)
/* complex XSD type 'eml22:MdInterval': */
class SOAP_CMAC eml22__MdInterval {
      public:
        /// Required element 'eml22:MdTop' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdTop;
        /// Required element 'eml22:MdBase' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdBase;
        /// Optional element 'eml22:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// required attribute 'datum' of XSD type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MdInterval, default initialized and not managed by a soap context
        virtual eml22__MdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MdInterval); }
      public:
        /// Constructor with initializations
        eml22__MdInterval() : MdTop(), MdBase(), Comment(), datum(), soap() { }
        virtual ~eml22__MdInterval() { }
        /// Friend allocator used by soap_new_eml22__MdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml22__MdInterval * SOAP_FMAC2 soap_instantiate_eml22__MdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1178 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval (-330)
/* complex XSD type 'eml22:TvdInterval': */
class SOAP_CMAC eml22__TvdInterval {
      public:
        /// Required element 'eml22:TvdTop' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *TvdTop;
        /// Required element 'eml22:TvdBase' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *TvdBase;
        /// Optional element 'eml22:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// required attribute 'datum' of XSD type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TvdInterval, default initialized and not managed by a soap context
        virtual eml22__TvdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TvdInterval); }
      public:
        /// Constructor with initializations
        eml22__TvdInterval() : TvdTop(), TvdBase(), Comment(), datum(), soap() { }
        virtual ~eml22__TvdInterval() { }
        /// Friend allocator used by soap_new_eml22__TvdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml22__TvdInterval * SOAP_FMAC2 soap_instantiate_eml22__TvdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2285 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference (-699)
/* complex XSD type 'eml22:DataObjectReference': */
class SOAP_CMAC eml22__DataObjectReference {
      public:
        /// Required element 'eml22:ContentType' of XSD type 'eml22:String2000'
        std::string ContentType;
        /// Required element 'eml22:Title' of XSD type 'eml22:String2000'
        std::string Title;
        /// Required element 'eml22:Uuid' of XSD type 'eml22:UuidString'
        std::string Uuid;
        /// Optional element 'eml22:UuidAuthority' of XSD type 'eml22:String64'
        std::string *UuidAuthority;
        /// Optional element 'eml22:Uri' of XSD type 'xsd:anyURI'
        std::string *Uri;
        /// Optional element 'eml22:ObjectVersion' of XSD type 'eml22:String64'
        std::string *ObjectVersion;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataObjectReference, default initialized and not managed by a soap context
        virtual eml22__DataObjectReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataObjectReference); }
      public:
        /// Constructor with initializations
        eml22__DataObjectReference() : ContentType(), Title(), Uuid(), UuidAuthority(), Uri(), ObjectVersion(), soap() { }
        virtual ~eml22__DataObjectReference() { }
        /// Friend allocator used by soap_new_eml22__DataObjectReference(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataObjectReference * SOAP_FMAC2 soap_instantiate_eml22__DataObjectReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2291 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset (-701)
/* complex XSD type 'eml22:ExternalDataset': */
class SOAP_CMAC eml22__ExternalDataset {
      public:
        /// Required element 'eml22:ExternalFileProxy' of XSD type 'eml22:ExternalDatasetPart'
        std::vector<eml22__ExternalDatasetPart *> ExternalFileProxy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ExternalDataset, default initialized and not managed by a soap context
        virtual eml22__ExternalDataset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ExternalDataset); }
      public:
        /// Constructor with initializations
        eml22__ExternalDataset() : ExternalFileProxy(), soap() { }
        virtual ~eml22__ExternalDataset() { }
        /// Friend allocator used by soap_new_eml22__ExternalDataset(struct soap*, int)
        friend SOAP_FMAC1 eml22__ExternalDataset * SOAP_FMAC2 soap_instantiate_eml22__ExternalDataset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2294 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart (-702)
/* complex XSD type 'eml22:ExternalDatasetPart': */
class SOAP_CMAC eml22__ExternalDatasetPart {
      public:
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml22:PathInExternalFile' of XSD type 'eml22:String2000'
        std::string PathInExternalFile;
        /// Required element 'eml22:StartIndex' of XSD type 'xsd:unsignedLong'
        ULONG64 StartIndex;
        /// Required element 'eml22:EpcExternalPartReference' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *EpcExternalPartReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ExternalDatasetPart, default initialized and not managed by a soap context
        virtual eml22__ExternalDatasetPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ExternalDatasetPart); }
      public:
        /// Constructor with initializations
        eml22__ExternalDatasetPart() : Count(), PathInExternalFile(), StartIndex(), EpcExternalPartReference(), soap() { }
        virtual ~eml22__ExternalDatasetPart() { }
        /// Friend allocator used by soap_new_eml22__ExternalDatasetPart(struct soap*, int)
        friend SOAP_FMAC1 eml22__ExternalDatasetPart * SOAP_FMAC2 soap_instantiate_eml22__ExternalDatasetPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2297 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter (-703)
/* Type eml22__AbstractActivityParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractActivityParameter': */
class SOAP_CMAC eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Title' of XSD type 'eml22:String2000'
        std::string Title;
        /// Optional element 'eml22:Index' of XSD type 'xsd:long'
        LONG64 *Index;
        /// Optional element 'eml22:Selection' of XSD type 'eml22:String2000'
        std::string *Selection;
        /// Optional element 'eml22:Key' of XSD type 'eml22:AbstractParameterKey'
        std::vector<eml22__AbstractParameterKey *> Key;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractActivityParameter, default initialized and not managed by a soap context
        virtual eml22__AbstractActivityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractActivityParameter); }
      public:
        /// Constructor with initializations
        eml22__AbstractActivityParameter() : Title(), Index(), Selection(), Key(), soap() { }
        virtual ~eml22__AbstractActivityParameter() { }
        /// Friend allocator used by soap_new_eml22__AbstractActivityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractActivityParameter * SOAP_FMAC2 soap_instantiate_eml22__AbstractActivityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2300 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey (-704)
/* Type eml22__AbstractParameterKey is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractParameterKey': */
class SOAP_CMAC eml22__AbstractParameterKey {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractParameterKey, default initialized and not managed by a soap context
        virtual eml22__AbstractParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractParameterKey); }
      public:
        /// Constructor with initializations
        eml22__AbstractParameterKey() : soap() { }
        virtual ~eml22__AbstractParameterKey() { }
        /// Friend allocator used by soap_new_eml22__AbstractParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractParameterKey * SOAP_FMAC2 soap_instantiate_eml22__AbstractParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2321 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate (-711)
/* complex XSD type 'eml22:ParameterTemplate': */
class SOAP_CMAC eml22__ParameterTemplate {
      public:
        /// Optional element 'eml22:AllowedKind' of XSD type 'eml22:ActivityParameterKind'
        std::vector<enum eml22__ActivityParameterKind> AllowedKind;
        /// Required element 'eml22:IsInput' of XSD type 'xsd:boolean'
        bool IsInput;
        /// Optional element 'eml22:KeyConstraint' of XSD type 'eml22:String2000'
        std::vector<std::string> KeyConstraint;
        /// Required element 'eml22:IsOutput' of XSD type 'xsd:boolean'
        bool IsOutput;
        /// Required element 'eml22:Title' of XSD type 'eml22:String2000'
        std::string Title;
        /// Optional element 'eml22:DataObjectContentType' of XSD type 'eml22:String2000'
        std::string *DataObjectContentType;
        /// Required element 'eml22:MaxOccurs' of XSD type 'xsd:long'
        LONG64 MaxOccurs;
        /// Required element 'eml22:MinOccurs' of XSD type 'xsd:long'
        LONG64 MinOccurs;
        /// Optional element 'eml22:Constraint' of XSD type 'eml22:String2000'
        std::string *Constraint;
        /// Optional element 'eml22:DefaultValue' of XSD type 'eml22:AbstractActivityParameter'
        std::vector<eml22__AbstractActivityParameter *> DefaultValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ParameterTemplate, default initialized and not managed by a soap context
        virtual eml22__ParameterTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ParameterTemplate); }
      public:
        /// Constructor with initializations
        eml22__ParameterTemplate() : AllowedKind(), IsInput(), KeyConstraint(), IsOutput(), Title(), DataObjectContentType(), MaxOccurs(), MinOccurs(), Constraint(), DefaultValue(), soap() { }
        virtual ~eml22__ParameterTemplate() { }
        /// Friend allocator used by soap_new_eml22__ParameterTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml22__ParameterTemplate * SOAP_FMAC2 soap_instantiate_eml22__ParameterTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2333 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime (-715)
/* complex XSD type 'eml22:GeologicTime': */
class SOAP_CMAC eml22__GeologicTime {
      public:
        /// Optional element 'eml22:AgeOffsetAttribute' of XSD type 'xsd:long'
        LONG64 *AgeOffsetAttribute;
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DateTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeologicTime, default initialized and not managed by a soap context
        virtual eml22__GeologicTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeologicTime); }
      public:
        /// Constructor with initializations
        eml22__GeologicTime() : AgeOffsetAttribute(), DateTime(), soap() { }
        virtual ~eml22__GeologicTime() { }
        /// Friend allocator used by soap_new_eml22__GeologicTime(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeologicTime * SOAP_FMAC2 soap_instantiate_eml22__GeologicTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2342 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex (-718)
/* complex XSD type 'eml22:TimeIndex': */
class SOAP_CMAC eml22__TimeIndex {
      public:
        /// Required element 'eml22:Index' of XSD type 'xsd:unsignedLong'
        ULONG64 Index;
        /// Required element 'eml22:TimeSeries' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndex, default initialized and not managed by a soap context
        virtual eml22__TimeIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndex); }
      public:
        /// Constructor with initializations
        eml22__TimeIndex() : Index(), TimeSeries(), soap() { }
        virtual ~eml22__TimeIndex() { }
        /// Friend allocator used by soap_new_eml22__TimeIndex(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndex * SOAP_FMAC2 soap_instantiate_eml22__TimeIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2345 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices (-719)
/* complex XSD type 'eml22:TimeIndices': */
class SOAP_CMAC eml22__TimeIndices {
      public:
        /// Required element 'eml22:TimeIndexCount' of XSD type 'xsd:unsignedLong'
        ULONG64 TimeIndexCount;
        /// Optional element 'eml22:TimeIndexStart' of XSD type 'xsd:unsignedLong'
        ULONG64 *TimeIndexStart;
        /// Optional element 'eml22:SimulatorTimeStep' of XSD type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *SimulatorTimeStep;
        /// Required element 'eml22:UseInterval' of XSD type 'xsd:boolean'
        bool UseInterval;
        /// Required element 'eml22:TimeSeries' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndices, default initialized and not managed by a soap context
        virtual eml22__TimeIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndices); }
      public:
        /// Constructor with initializations
        eml22__TimeIndices() : TimeIndexCount(), TimeIndexStart(), SimulatorTimeStep(), UseInterval(), TimeSeries(), soap() { }
        virtual ~eml22__TimeIndices() { }
        /// Friend allocator used by soap_new_eml22__TimeIndices(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndices * SOAP_FMAC2 soap_instantiate_eml22__TimeIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2351 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage (-721)
/* complex XSD type 'eml22:TimeSeriesParentage': */
class SOAP_CMAC eml22__TimeSeriesParentage {
      public:
        /// Required element 'eml22:HasOverlap' of XSD type 'xsd:boolean'
        bool HasOverlap;
        /// Required element 'eml22:ParentTimeIndex' of XSD type 'eml22:TimeIndex'
        eml22__TimeIndex *ParentTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeSeriesParentage, default initialized and not managed by a soap context
        virtual eml22__TimeSeriesParentage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeSeriesParentage); }
      public:
        /// Constructor with initializations
        eml22__TimeSeriesParentage() : HasOverlap(), ParentTimeIndex(), soap() { }
        virtual ~eml22__TimeSeriesParentage() { }
        /// Friend allocator used by soap_new_eml22__TimeSeriesParentage(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeSeriesParentage * SOAP_FMAC2 soap_instantiate_eml22__TimeSeriesParentage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2357 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue (-723)
/* Type eml22__AbstractPressureValue is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractPressureValue': */
class SOAP_CMAC eml22__AbstractPressureValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractPressureValue, default initialized and not managed by a soap context
        virtual eml22__AbstractPressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractPressureValue); }
      public:
        /// Constructor with initializations
        eml22__AbstractPressureValue() : soap() { }
        virtual ~eml22__AbstractPressureValue() { }
        /// Friend allocator used by soap_new_eml22__AbstractPressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractPressureValue * SOAP_FMAC2 soap_instantiate_eml22__AbstractPressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34204 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__union_AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2__eml22__union_AbstractTemperaturePressure (-1789)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml22__union_AbstractTemperaturePressure
{
};
#endif

/* eml2_2ForGsoap.h:2360 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure (-724)
/* Type eml22__AbstractTemperaturePressure is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* Choice: */
class SOAP_CMAC eml22__AbstractTemperaturePressure {
      public:
        /// Union with union _eml22__union_AbstractTemperaturePressure variant selector __union_AbstractTemperaturePressure set to one of:
        int __union_AbstractTemperaturePressure;
        union _eml22__union_AbstractTemperaturePressure union_AbstractTemperaturePressure;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractTemperaturePressure, default initialized and not managed by a soap context
        virtual eml22__AbstractTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractTemperaturePressure); }
      public:
        /// Constructor with initializations
        eml22__AbstractTemperaturePressure() : __union_AbstractTemperaturePressure(), soap() { }
        virtual ~eml22__AbstractTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml22__AbstractTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml22__AbstractTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2363 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue (-725)
/* complex XSD type 'eml22:DensityValue': */
class SOAP_CMAC eml22__DensityValue {
      public:
        /// Required element 'eml22:Density' of XSD type 'eml22:MassPerVolumeMeasureExt'
        eml22__MassPerVolumeMeasureExt *Density;
        /// Required element 'eml22:MeasurementPressureTemperature' of XSD type 'eml22:AbstractTemperaturePressure'
        eml22__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DensityValue, default initialized and not managed by a soap context
        virtual eml22__DensityValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DensityValue); }
      public:
        /// Constructor with initializations
        eml22__DensityValue() : Density(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml22__DensityValue() { }
        /// Friend allocator used by soap_new_eml22__DensityValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__DensityValue * SOAP_FMAC2 soap_instantiate_eml22__DensityValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2366 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue (-726)
/* complex XSD type 'eml22:FlowRateValue': */
class SOAP_CMAC eml22__FlowRateValue {
      public:
        /// Required element 'eml22:FlowRate' of XSD type 'eml22:VolumePerTimeMeasureExt'
        eml22__VolumePerTimeMeasureExt *FlowRate;
        /// Required element 'eml22:MeasurementPressureTemperature' of XSD type 'eml22:AbstractTemperaturePressure'
        eml22__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FlowRateValue, default initialized and not managed by a soap context
        virtual eml22__FlowRateValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FlowRateValue); }
      public:
        /// Constructor with initializations
        eml22__FlowRateValue() : FlowRate(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml22__FlowRateValue() { }
        /// Friend allocator used by soap_new_eml22__FlowRateValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__FlowRateValue * SOAP_FMAC2 soap_instantiate_eml22__FlowRateValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2372 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue (-728)
/* complex XSD type 'eml22:PressureValue': */
class SOAP_CMAC eml22__PressureValue {
      public:
        /// Required element 'eml22:AbstractPressureValue' of XSD type 'eml22:AbstractPressureValue'
        eml22__AbstractPressureValue *AbstractPressureValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureValue, default initialized and not managed by a soap context
        virtual eml22__PressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureValue); }
      public:
        /// Constructor with initializations
        eml22__PressureValue() : AbstractPressureValue(), soap() { }
        virtual ~eml22__PressureValue() { }
        /// Friend allocator used by soap_new_eml22__PressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureValue * SOAP_FMAC2 soap_instantiate_eml22__PressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2387 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue (-733)
/* complex XSD type 'eml22:VolumeValue': */
class SOAP_CMAC eml22__VolumeValue {
      public:
        /// Required element 'eml22:Volume' of XSD type 'eml22:VolumeMeasureExt'
        eml22__VolumeMeasureExt *Volume;
        /// Required element 'eml22:MeasurementPressureTemperature' of XSD type 'eml22:AbstractTemperaturePressure'
        eml22__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeValue, default initialized and not managed by a soap context
        virtual eml22__VolumeValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeValue); }
      public:
        /// Constructor with initializations
        eml22__VolumeValue() : Volume(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml22__VolumeValue() { }
        /// Friend allocator used by soap_new_eml22__VolumeValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeValue * SOAP_FMAC2 soap_instantiate_eml22__VolumeValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2390 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs (-734)
/* Type eml22__AbstractGeodeticCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractGeodeticCrs': */
class SOAP_CMAC eml22__AbstractGeodeticCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractGeodeticCrs, default initialized and not managed by a soap context
        virtual eml22__AbstractGeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractGeodeticCrs); }
      public:
        /// Constructor with initializations
        eml22__AbstractGeodeticCrs() : soap() { }
        virtual ~eml22__AbstractGeodeticCrs() { }
        /// Friend allocator used by soap_new_eml22__AbstractGeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractGeodeticCrs * SOAP_FMAC2 soap_instantiate_eml22__AbstractGeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2393 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs (-735)
/* Type eml22__AbstractProjectedCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractProjectedCrs': */
class SOAP_CMAC eml22__AbstractProjectedCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractProjectedCrs, default initialized and not managed by a soap context
        virtual eml22__AbstractProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractProjectedCrs); }
      public:
        /// Constructor with initializations
        eml22__AbstractProjectedCrs() : soap() { }
        virtual ~eml22__AbstractProjectedCrs() { }
        /// Friend allocator used by soap_new_eml22__AbstractProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractProjectedCrs * SOAP_FMAC2 soap_instantiate_eml22__AbstractProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2396 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs (-736)
/* Type eml22__AbstractVerticalCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractVerticalCrs': */
class SOAP_CMAC eml22__AbstractVerticalCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractVerticalCrs, default initialized and not managed by a soap context
        virtual eml22__AbstractVerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractVerticalCrs); }
      public:
        /// Constructor with initializations
        eml22__AbstractVerticalCrs() : soap() { }
        virtual ~eml22__AbstractVerticalCrs() { }
        /// Friend allocator used by soap_new_eml22__AbstractVerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractVerticalCrs * SOAP_FMAC2 soap_instantiate_eml22__AbstractVerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2441 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystem (-751)
/* complex XSD type 'eml22:PublicLandSurveySystem': */
class SOAP_CMAC eml22__PublicLandSurveySystem {
      public:
        /// Optional element 'eml22:PrincipalMeridian' of XSD type 'eml22:PrincipalMeridian'
        enum eml22__PrincipalMeridian *PrincipalMeridian;
        /// Optional element 'eml22:Range' of XSD type 'xsd:int'
        int *Range;
        /// Optional element 'eml22:RangeDir' of XSD type 'eml22:EastOrWest'
        enum eml22__EastOrWest *RangeDir;
        /// Optional element 'eml22:Township' of XSD type 'xsd:int'
        int *Township;
        /// Optional element 'eml22:TownshipDir' of XSD type 'eml22:NorthOrSouth'
        enum eml22__NorthOrSouth *TownshipDir;
        /// Optional element 'eml22:Section' of XSD type 'eml22:SectionNumber'
        std::string *Section;
        /// Optional element 'eml22:QuarterSection' of XSD type 'eml22:PublicLandSurveySystemQuarterSection'
        std::string *QuarterSection;
        /// Optional element 'eml22:QuarterTownship' of XSD type 'eml22:PublicLandSurveySystemQuarterTownship'
        std::string *QuarterTownship;
        /// Optional element 'eml22:FootageNS' of XSD type 'eml22:DistanceNorthSouth'
        eml22__DistanceNorthSouth *FootageNS;
        /// Optional element 'eml22:FootageEW' of XSD type 'eml22:DistanceEastWest'
        eml22__DistanceEastWest *FootageEW;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystem
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystem; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PublicLandSurveySystem, default initialized and not managed by a soap context
        virtual eml22__PublicLandSurveySystem *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PublicLandSurveySystem); }
      public:
        /// Constructor with initializations
        eml22__PublicLandSurveySystem() : PrincipalMeridian(), Range(), RangeDir(), Township(), TownshipDir(), Section(), QuarterSection(), QuarterTownship(), FootageNS(), FootageEW(), soap() { }
        virtual ~eml22__PublicLandSurveySystem() { }
        /// Friend allocator used by soap_new_eml22__PublicLandSurveySystem(struct soap*, int)
        friend SOAP_FMAC1 eml22__PublicLandSurveySystem * SOAP_FMAC2 soap_instantiate_eml22__PublicLandSurveySystem(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2465 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule (-759)
/* complex XSD type 'eml22:FailingRule': */
class SOAP_CMAC eml22__FailingRule {
      public:
        /// Required element 'eml22:RuleId' of XSD type 'eml22:String64'
        std::string RuleId;
        /// Optional element 'eml22:RuleName' of XSD type 'eml22:String2000'
        std::string *RuleName;
        /// Optional element 'eml22:Severity' of XSD type 'eml22:String64'
        std::string *Severity;
        /// Optional element 'eml22:FailingRuleExtensions' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> FailingRuleExtensions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FailingRule, default initialized and not managed by a soap context
        virtual eml22__FailingRule *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FailingRule); }
      public:
        /// Constructor with initializations
        eml22__FailingRule() : RuleId(), RuleName(), Severity(), FailingRuleExtensions(), soap() { }
        virtual ~eml22__FailingRule() { }
        /// Friend allocator used by soap_new_eml22__FailingRule(struct soap*, int)
        friend SOAP_FMAC1 eml22__FailingRule * SOAP_FMAC2 soap_instantiate_eml22__FailingRule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2468 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange
#define SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange (-760)
/* complex XSD type 'eml22:IndexRange': */
class SOAP_CMAC eml22__IndexRange {
      public:
        /// Required element 'eml22:IndexMinimum' of XSD type 'eml22:String64'
        std::string IndexMinimum;
        /// Required element 'eml22:IndexMaximum' of XSD type 'eml22:String64'
        std::string IndexMaximum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IndexRange, default initialized and not managed by a soap context
        virtual eml22__IndexRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IndexRange); }
      public:
        /// Constructor with initializations
        eml22__IndexRange() : IndexMinimum(), IndexMaximum(), soap() { }
        virtual ~eml22__IndexRange() { }
        /// Friend allocator used by soap_new_eml22__IndexRange(struct soap*, int)
        friend SOAP_FMAC1 eml22__IndexRange * SOAP_FMAC2 soap_instantiate_eml22__IndexRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2471 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation (-761)
/* complex XSD type 'eml22:AbstractGraphicalInformation': */
class SOAP_CMAC eml22__AbstractGraphicalInformation {
      public:
        /// Required element 'eml22:TargetObject' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *TargetObject;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractGraphicalInformation, default initialized and not managed by a soap context
        virtual eml22__AbstractGraphicalInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractGraphicalInformation); }
      public:
        /// Constructor with initializations
        eml22__AbstractGraphicalInformation() : TargetObject(), soap() { }
        virtual ~eml22__AbstractGraphicalInformation() { }
        /// Friend allocator used by soap_new_eml22__AbstractGraphicalInformation(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractGraphicalInformation * SOAP_FMAC2 soap_instantiate_eml22__AbstractGraphicalInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2492 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType (-768)
/* Type gml__AbstractGMLType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractGMLType': */
class SOAP_CMAC gml__AbstractGMLType {
      public:
        /// Optional element 'gml:description' of XSD type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XSD type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Optional element 'gml:identifier' of XSD type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XSD type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// required attribute 'gml:id' of XSD type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGMLType, default initialized and not managed by a soap context
        virtual gml__AbstractGMLType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGMLType); }
      public:
        /// Constructor with initializations
        gml__AbstractGMLType() : description(), descriptionReference(), identifier(), name(), gml__id(), soap() { }
        virtual ~gml__AbstractGMLType() { }
        /// Friend allocator used by soap_new_gml__AbstractGMLType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGMLType * SOAP_FMAC2 soap_instantiate_gml__AbstractGMLType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2498 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType (-770)
/* complex XSD type 'gml:ReferenceType': */
class SOAP_CMAC gml__ReferenceType {
      public:
        /// optional attribute 'owns' of XSD type 'xsd:boolean'
        bool owns;	///< initialized with default value = (bool)0
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__ReferenceType, default initialized and not managed by a soap context
        virtual gml__ReferenceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__ReferenceType); }
      public:
        /// Constructor with initializations
        gml__ReferenceType() : owns((bool)0), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__ReferenceType() { }
        /// Friend allocator used by soap_new_gml__ReferenceType(struct soap*, int)
        friend SOAP_FMAC1 gml__ReferenceType * SOAP_FMAC2 soap_instantiate_gml__ReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34651 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_TimePrimitivePropertyType (-1812)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_TimePrimitivePropertyType
{
};
#endif

/* eml2_2ForGsoap.h:34640 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence (-1811)
/* Wrapper: */
class SOAP_CMAC __gml__TimePrimitivePropertyType_sequence {
      public:
        /// Union with union _gml__union_TimePrimitivePropertyType variant selector __unionAbstractTimePrimitive set to one of:
        int __unionAbstractTimePrimitive;
        union _gml__union_TimePrimitivePropertyType union_TimePrimitivePropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__TimePrimitivePropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__TimePrimitivePropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__TimePrimitivePropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__TimePrimitivePropertyType_sequence() : __unionAbstractTimePrimitive() { }
        virtual ~__gml__TimePrimitivePropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__TimePrimitivePropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__TimePrimitivePropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__TimePrimitivePropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2516 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType (-776)
/* Type gml__TimePrimitivePropertyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:TimePrimitivePropertyType': */
class SOAP_CMAC gml__TimePrimitivePropertyType {
      public:
        __gml__TimePrimitivePropertyType_sequence *__TimePrimitivePropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// optional attribute 'owns' of XSD type 'xsd:boolean'
        bool owns;	///< initialized with default value = (bool)0
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__TimePrimitivePropertyType, default initialized and not managed by a soap context
        virtual gml__TimePrimitivePropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__TimePrimitivePropertyType); }
      public:
        /// Constructor with initializations
        gml__TimePrimitivePropertyType() : __TimePrimitivePropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), owns((bool)0), soap() { }
        virtual ~gml__TimePrimitivePropertyType() { }
        /// Friend allocator used by soap_new_gml__TimePrimitivePropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__TimePrimitivePropertyType * SOAP_FMAC2 soap_instantiate_gml__TimePrimitivePropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34710 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence (-1814)
/* Wrapper: */
class SOAP_CMAC __gml__EllipsoidalCSPropertyType_sequence {
      public:
        /// Required element 'gml:EllipsoidalCS' of XSD type 'gml:EllipsoidalCSType'
        gml__EllipsoidalCSType *EllipsoidalCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__EllipsoidalCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__EllipsoidalCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__EllipsoidalCSPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__EllipsoidalCSPropertyType_sequence() : EllipsoidalCS() { }
        virtual ~__gml__EllipsoidalCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__EllipsoidalCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__EllipsoidalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__EllipsoidalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2519 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType (-777)
/* complex XSD type 'gml:EllipsoidalCSPropertyType': */
class SOAP_CMAC gml__EllipsoidalCSPropertyType {
      public:
        __gml__EllipsoidalCSPropertyType_sequence *__EllipsoidalCSPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__EllipsoidalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidalCSPropertyType); }
      public:
        /// Constructor with initializations
        gml__EllipsoidalCSPropertyType() : __EllipsoidalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__EllipsoidalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34770 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence (-1817)
/* Wrapper: */
class SOAP_CMAC __gml__CoordinateSystemAxisPropertyType_sequence {
      public:
        /// Required element 'gml:CoordinateSystemAxis' of XSD type 'gml:CoordinateSystemAxisType'
        gml__CoordinateSystemAxisType *CoordinateSystemAxis;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__CoordinateSystemAxisPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__CoordinateSystemAxisPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__CoordinateSystemAxisPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__CoordinateSystemAxisPropertyType_sequence() : CoordinateSystemAxis() { }
        virtual ~__gml__CoordinateSystemAxisPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__CoordinateSystemAxisPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__CoordinateSystemAxisPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CoordinateSystemAxisPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2528 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType (-780)
/* complex XSD type 'gml:CoordinateSystemAxisPropertyType': */
class SOAP_CMAC gml__CoordinateSystemAxisPropertyType {
      public:
        __gml__CoordinateSystemAxisPropertyType_sequence *__CoordinateSystemAxisPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CoordinateSystemAxisPropertyType, default initialized and not managed by a soap context
        virtual gml__CoordinateSystemAxisPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CoordinateSystemAxisPropertyType); }
      public:
        /// Constructor with initializations
        gml__CoordinateSystemAxisPropertyType() : __CoordinateSystemAxisPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CoordinateSystemAxisPropertyType() { }
        /// Friend allocator used by soap_new_gml__CoordinateSystemAxisPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CoordinateSystemAxisPropertyType * SOAP_FMAC2 soap_instantiate_gml__CoordinateSystemAxisPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34830 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence (-1820)
/* Wrapper: */
class SOAP_CMAC __gml__CartesianCSPropertyType_sequence {
      public:
        /// Required element 'gml:CartesianCS' of XSD type 'gml:CartesianCSType'
        gml__CartesianCSType *CartesianCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__CartesianCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__CartesianCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__CartesianCSPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__CartesianCSPropertyType_sequence() : CartesianCS() { }
        virtual ~__gml__CartesianCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__CartesianCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__CartesianCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CartesianCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2534 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType (-782)
/* complex XSD type 'gml:CartesianCSPropertyType': */
class SOAP_CMAC gml__CartesianCSPropertyType {
      public:
        __gml__CartesianCSPropertyType_sequence *__CartesianCSPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CartesianCSPropertyType, default initialized and not managed by a soap context
        virtual gml__CartesianCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CartesianCSPropertyType); }
      public:
        /// Constructor with initializations
        gml__CartesianCSPropertyType() : __CartesianCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CartesianCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__CartesianCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CartesianCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__CartesianCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34890 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence (-1823)
/* Wrapper: */
class SOAP_CMAC __gml__SphericalCSPropertyType_sequence {
      public:
        /// Required element 'gml:SphericalCS' of XSD type 'gml:SphericalCSType'
        gml__SphericalCSType *SphericalCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__SphericalCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__SphericalCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__SphericalCSPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__SphericalCSPropertyType_sequence() : SphericalCS() { }
        virtual ~__gml__SphericalCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__SphericalCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__SphericalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__SphericalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2540 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType (-784)
/* complex XSD type 'gml:SphericalCSPropertyType': */
class SOAP_CMAC gml__SphericalCSPropertyType {
      public:
        __gml__SphericalCSPropertyType_sequence *__SphericalCSPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__SphericalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__SphericalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__SphericalCSPropertyType); }
      public:
        /// Constructor with initializations
        gml__SphericalCSPropertyType() : __SphericalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__SphericalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__SphericalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__SphericalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__SphericalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:34950 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence (-1826)
/* Wrapper: */
class SOAP_CMAC __gml__GeodeticDatumPropertyType_sequence {
      public:
        /// Required element 'gml:GeodeticDatum' of XSD type 'gml:GeodeticDatumType'
        gml__GeodeticDatumType *GeodeticDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__GeodeticDatumPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__GeodeticDatumPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__GeodeticDatumPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__GeodeticDatumPropertyType_sequence() : GeodeticDatum() { }
        virtual ~__gml__GeodeticDatumPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__GeodeticDatumPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__GeodeticDatumPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeodeticDatumPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2546 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType (-786)
/* complex XSD type 'gml:GeodeticDatumPropertyType': */
class SOAP_CMAC gml__GeodeticDatumPropertyType {
      public:
        __gml__GeodeticDatumPropertyType_sequence *__GeodeticDatumPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticDatumPropertyType, default initialized and not managed by a soap context
        virtual gml__GeodeticDatumPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticDatumPropertyType); }
      public:
        /// Constructor with initializations
        gml__GeodeticDatumPropertyType() : __GeodeticDatumPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeodeticDatumPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeodeticDatumPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticDatumPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeodeticDatumPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35010 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence (-1829)
/* Wrapper: */
class SOAP_CMAC __gml__PrimeMeridianPropertyType_sequence {
      public:
        /// Required element 'gml:PrimeMeridian' of XSD type 'gml:PrimeMeridianType'
        gml__PrimeMeridianType *PrimeMeridian;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__PrimeMeridianPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__PrimeMeridianPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__PrimeMeridianPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__PrimeMeridianPropertyType_sequence() : PrimeMeridian() { }
        virtual ~__gml__PrimeMeridianPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__PrimeMeridianPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__PrimeMeridianPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__PrimeMeridianPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2555 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType (-789)
/* complex XSD type 'gml:PrimeMeridianPropertyType': */
class SOAP_CMAC gml__PrimeMeridianPropertyType {
      public:
        __gml__PrimeMeridianPropertyType_sequence *__PrimeMeridianPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__PrimeMeridianPropertyType, default initialized and not managed by a soap context
        virtual gml__PrimeMeridianPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__PrimeMeridianPropertyType); }
      public:
        /// Constructor with initializations
        gml__PrimeMeridianPropertyType() : __PrimeMeridianPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__PrimeMeridianPropertyType() { }
        /// Friend allocator used by soap_new_gml__PrimeMeridianPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__PrimeMeridianPropertyType * SOAP_FMAC2 soap_instantiate_gml__PrimeMeridianPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35070 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence (-1832)
/* Wrapper: */
class SOAP_CMAC __gml__EllipsoidPropertyType_sequence {
      public:
        /// Required element 'gml:Ellipsoid' of XSD type 'gml:EllipsoidType'
        gml__EllipsoidType *Ellipsoid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__EllipsoidPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__EllipsoidPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__EllipsoidPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__EllipsoidPropertyType_sequence() : Ellipsoid() { }
        virtual ~__gml__EllipsoidPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__EllipsoidPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__EllipsoidPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__EllipsoidPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2567 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType (-793)
/* complex XSD type 'gml:EllipsoidPropertyType': */
class SOAP_CMAC gml__EllipsoidPropertyType {
      public:
        __gml__EllipsoidPropertyType_sequence *__EllipsoidPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidPropertyType, default initialized and not managed by a soap context
        virtual gml__EllipsoidPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidPropertyType); }
      public:
        /// Constructor with initializations
        gml__EllipsoidPropertyType() : __EllipsoidPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__EllipsoidPropertyType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidPropertyType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35142 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_GeneralConversionPropertyType (-1836)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_GeneralConversionPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:35130 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence (-1835)
/* Wrapper: */
class SOAP_CMAC __gml__GeneralConversionPropertyType_sequence {
      public:
        /// Union with union _gml__union_GeneralConversionPropertyType variant selector __unionAbstractGeneralConversion set to one of:
        int __unionAbstractGeneralConversion;
        union _gml__union_GeneralConversionPropertyType union_GeneralConversionPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__GeneralConversionPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__GeneralConversionPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__GeneralConversionPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__GeneralConversionPropertyType_sequence() : __unionAbstractGeneralConversion() { }
        virtual ~__gml__GeneralConversionPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__GeneralConversionPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__GeneralConversionPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeneralConversionPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2582 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType (-798)
/* complex XSD type 'gml:GeneralConversionPropertyType': */
class SOAP_CMAC gml__GeneralConversionPropertyType {
      public:
        __gml__GeneralConversionPropertyType_sequence *__GeneralConversionPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeneralConversionPropertyType, default initialized and not managed by a soap context
        virtual gml__GeneralConversionPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeneralConversionPropertyType); }
      public:
        /// Constructor with initializations
        gml__GeneralConversionPropertyType() : __GeneralConversionPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeneralConversionPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeneralConversionPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeneralConversionPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeneralConversionPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35208 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_CRSPropertyType (-1839)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_CRSPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:35197 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence (-1838)
/* Wrapper: */
class SOAP_CMAC __gml__CRSPropertyType_sequence {
      public:
        /// Union with union _gml__union_CRSPropertyType variant selector __unionAbstractCRS set to one of:
        int __unionAbstractCRS;
        union _gml__union_CRSPropertyType union_CRSPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__CRSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__CRSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__CRSPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__CRSPropertyType_sequence() : __unionAbstractCRS() { }
        virtual ~__gml__CRSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__CRSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__CRSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CRSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2591 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType (-801)
/* complex XSD type 'gml:CRSPropertyType': */
class SOAP_CMAC gml__CRSPropertyType {
      public:
        __gml__CRSPropertyType_sequence *__CRSPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CRSPropertyType, default initialized and not managed by a soap context
        virtual gml__CRSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CRSPropertyType); }
      public:
        /// Constructor with initializations
        gml__CRSPropertyType() : __CRSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CRSPropertyType() { }
        /// Friend allocator used by soap_new_gml__CRSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CRSPropertyType * SOAP_FMAC2 soap_instantiate_gml__CRSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35263 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence (-1841)
/* Wrapper: */
class SOAP_CMAC __gml__GeodeticCRSPropertyType_sequence {
      public:
        /// Required element 'gml:GeodeticCRS' of XSD type 'gml:GeodeticCRSType'
        gml__GeodeticCRSType *GeodeticCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__GeodeticCRSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__GeodeticCRSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__GeodeticCRSPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__GeodeticCRSPropertyType_sequence() : GeodeticCRS() { }
        virtual ~__gml__GeodeticCRSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__GeodeticCRSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__GeodeticCRSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeodeticCRSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2594 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType (-802)
/* complex XSD type 'gml:GeodeticCRSPropertyType': */
class SOAP_CMAC gml__GeodeticCRSPropertyType {
      public:
        __gml__GeodeticCRSPropertyType_sequence *__GeodeticCRSPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticCRSPropertyType, default initialized and not managed by a soap context
        virtual gml__GeodeticCRSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticCRSPropertyType); }
      public:
        /// Constructor with initializations
        gml__GeodeticCRSPropertyType() : __GeodeticCRSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeodeticCRSPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeodeticCRSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticCRSPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeodeticCRSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35320 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence (-1844)
/* Wrapper: */
class SOAP_CMAC __gml__VerticalCSPropertyType_sequence {
      public:
        /// Required element 'gml:VerticalCS' of XSD type 'gml:VerticalCSType'
        gml__VerticalCSType *VerticalCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__VerticalCSPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__VerticalCSPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__VerticalCSPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__VerticalCSPropertyType_sequence() : VerticalCS() { }
        virtual ~__gml__VerticalCSPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__VerticalCSPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__VerticalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__VerticalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2600 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType (-804)
/* complex XSD type 'gml:VerticalCSPropertyType': */
class SOAP_CMAC gml__VerticalCSPropertyType {
      public:
        __gml__VerticalCSPropertyType_sequence *__VerticalCSPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__VerticalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCSPropertyType); }
      public:
        /// Constructor with initializations
        gml__VerticalCSPropertyType() : __VerticalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__VerticalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__VerticalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__VerticalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35380 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence (-1847)
/* Wrapper: */
class SOAP_CMAC __gml__VerticalDatumPropertyType_sequence {
      public:
        /// Required element 'gml:VerticalDatum' of XSD type 'gml:VerticalDatumType'
        gml__VerticalDatumType *VerticalDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__VerticalDatumPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gml__VerticalDatumPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__VerticalDatumPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gml__VerticalDatumPropertyType_sequence() : VerticalDatum() { }
        virtual ~__gml__VerticalDatumPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gml__VerticalDatumPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__VerticalDatumPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__VerticalDatumPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2606 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType (-806)
/* complex XSD type 'gml:VerticalDatumPropertyType': */
class SOAP_CMAC gml__VerticalDatumPropertyType {
      public:
        __gml__VerticalDatumPropertyType_sequence *__VerticalDatumPropertyType_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalDatumPropertyType, default initialized and not managed by a soap context
        virtual gml__VerticalDatumPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalDatumPropertyType); }
      public:
        /// Constructor with initializations
        gml__VerticalDatumPropertyType() : __VerticalDatumPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__VerticalDatumPropertyType() { }
        /// Friend allocator used by soap_new_gml__VerticalDatumPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalDatumPropertyType * SOAP_FMAC2 soap_instantiate_gml__VerticalDatumPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35441 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence (-1850)
/* Wrapper: */
class SOAP_CMAC __gml__domainOfValidity_sequence {
      public:
        /// Required element 'gmd:EX_Extent' of XSD type 'gmd:EX_Extent_Type'
        gmd__EX_USCOREExtent_USCOREType *gmd__EX_USCOREExtent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__domainOfValidity_sequence, default initialized and not managed by a soap context
        virtual __gml__domainOfValidity_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__domainOfValidity_sequence); }
      public:
        /// Constructor with initializations
        __gml__domainOfValidity_sequence() : gmd__EX_USCOREExtent() { }
        virtual ~__gml__domainOfValidity_sequence() { }
        /// Friend allocator used by soap_new___gml__domainOfValidity_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__domainOfValidity_sequence * SOAP_FMAC2 soap_instantiate___gml__domainOfValidity_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2612 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity (-808)
/* complex XSD type 'gml:domainOfValidity': */
class SOAP_CMAC _gml__domainOfValidity {
      public:
        __gml__domainOfValidity_sequence *__domainOfValidity_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__domainOfValidity, default initialized and not managed by a soap context
        virtual _gml__domainOfValidity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__domainOfValidity); }
      public:
        /// Constructor with initializations
        _gml__domainOfValidity() : __domainOfValidity_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~_gml__domainOfValidity() { }
        /// Friend allocator used by soap_new__gml__domainOfValidity(struct soap*, int)
        friend SOAP_FMAC1 _gml__domainOfValidity * SOAP_FMAC2 soap_instantiate__gml__domainOfValidity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2615 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter (-809)
/* complex XSD type 'gml:secondDefiningParameter': */
class SOAP_CMAC _gml__secondDefiningParameter {
      public:
        /// Required element 'gml:SecondDefiningParameter' of XSD type 'gml:SecondDefiningParameter'
        _gml__SecondDefiningParameter *SecondDefiningParameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__secondDefiningParameter, default initialized and not managed by a soap context
        virtual _gml__secondDefiningParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__secondDefiningParameter); }
      public:
        /// Constructor with initializations
        _gml__secondDefiningParameter() : SecondDefiningParameter(), soap() { }
        virtual ~_gml__secondDefiningParameter() { }
        /// Friend allocator used by soap_new__gml__secondDefiningParameter(struct soap*, int)
        friend SOAP_FMAC1 _gml__secondDefiningParameter * SOAP_FMAC2 soap_instantiate__gml__secondDefiningParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35531 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__union_SecondDefiningParameter (-1856)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_SecondDefiningParameter
{
        #define SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_inverseFlattening	(1)	/**< union variant selector value for member inverseFlattening */
        gml__MeasureType *inverseFlattening;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_semiMinorAxis	(2)	/**< union variant selector value for member semiMinorAxis */
        gml__LengthType *semiMinorAxis;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_isSphere	(3)	/**< union variant selector value for member isSphere */
        bool isSphere;
};
#endif

/* eml2_2ForGsoap.h:2618 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter (-810)
/* Choice: */
class SOAP_CMAC _gml__SecondDefiningParameter {
      public:
        /// Union with union _gml__union_SecondDefiningParameter variant selector __union_SecondDefiningParameter set to one of: SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_inverseFlattening SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_semiMinorAxis SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_isSphere
        int __union_SecondDefiningParameter;
        union _gml__union_SecondDefiningParameter union_SecondDefiningParameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__SecondDefiningParameter, default initialized and not managed by a soap context
        virtual _gml__SecondDefiningParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__SecondDefiningParameter); }
      public:
        /// Constructor with initializations
        _gml__SecondDefiningParameter() : __union_SecondDefiningParameter(), soap() { }
        virtual ~_gml__SecondDefiningParameter() { }
        /// Friend allocator used by soap_new__gml__SecondDefiningParameter(struct soap*, int)
        friend SOAP_FMAC1 _gml__SecondDefiningParameter * SOAP_FMAC2 soap_instantiate__gml__SecondDefiningParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35563 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2__gml__union_coordinateOperationAccuracy (-1858)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_coordinateOperationAccuracy
{
};
#endif

/* eml2_2ForGsoap.h:35555 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence (-1857)
/* Wrapper: */
class SOAP_CMAC __gml__coordinateOperationAccuracy_sequence {
      public:
        /// Union with union _gml__union_coordinateOperationAccuracy variant selector __unionAbstractDQ_USCOREPositionalAccuracy set to one of:
        int __unionAbstractDQ_USCOREPositionalAccuracy;
        union _gml__union_coordinateOperationAccuracy union_coordinateOperationAccuracy;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gml__coordinateOperationAccuracy_sequence, default initialized and not managed by a soap context
        virtual __gml__coordinateOperationAccuracy_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gml__coordinateOperationAccuracy_sequence); }
      public:
        /// Constructor with initializations
        __gml__coordinateOperationAccuracy_sequence() : __unionAbstractDQ_USCOREPositionalAccuracy() { }
        virtual ~__gml__coordinateOperationAccuracy_sequence() { }
        /// Friend allocator used by soap_new___gml__coordinateOperationAccuracy_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gml__coordinateOperationAccuracy_sequence * SOAP_FMAC2 soap_instantiate___gml__coordinateOperationAccuracy_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2621 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy (-811)
/* complex XSD type 'gml:coordinateOperationAccuracy': */
class SOAP_CMAC _gml__coordinateOperationAccuracy {
      public:
        __gml__coordinateOperationAccuracy_sequence *__coordinateOperationAccuracy_sequence;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__coordinateOperationAccuracy, default initialized and not managed by a soap context
        virtual _gml__coordinateOperationAccuracy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__coordinateOperationAccuracy); }
      public:
        /// Constructor with initializations
        _gml__coordinateOperationAccuracy() : __coordinateOperationAccuracy_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~_gml__coordinateOperationAccuracy() { }
        /// Friend allocator used by soap_new__gml__coordinateOperationAccuracy(struct soap*, int)
        friend SOAP_FMAC1 _gml__coordinateOperationAccuracy * SOAP_FMAC2 soap_instantiate__gml__coordinateOperationAccuracy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35639 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType (-1861)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:35631 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence (-1860)
/* Wrapper: */
class SOAP_CMAC __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence {
      public:
        /// Union with union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType variant selector __unionAbstractEX_USCOREGeographicExtent set to one of:
        int __unionAbstractEX_USCOREGeographicExtent;
        union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType union_EX_USCOREGeographicExtent_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence() : __unionAbstractEX_USCOREGeographicExtent() { }
        virtual ~__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2627 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType (-813)
/* complex XSD type 'gmd:EX_GeographicExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCOREGeographicExtent_USCOREPropertyType {
      public:
        __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence *__EX_USCOREGeographicExtent_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREGeographicExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREGeographicExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREGeographicExtent_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__EX_USCOREGeographicExtent_USCOREPropertyType() : __EX_USCOREGeographicExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCOREGeographicExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREGeographicExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREGeographicExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREGeographicExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35693 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence (-1863)
/* Wrapper: */
class SOAP_CMAC __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:EX_TemporalExtent' of XSD type 'gmd:EX_TemporalExtent_Type'
        gmd__EX_USCORETemporalExtent_USCOREType *EX_USCORETemporalExtent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence() : EX_USCORETemporalExtent() { }
        virtual ~__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2633 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType (-815)
/* complex XSD type 'gmd:EX_TemporalExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCORETemporalExtent_USCOREPropertyType {
      public:
        __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence *__EX_USCORETemporalExtent_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCORETemporalExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCORETemporalExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCORETemporalExtent_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__EX_USCORETemporalExtent_USCOREPropertyType() : __EX_USCORETemporalExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCORETemporalExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCORETemporalExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCORETemporalExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCORETemporalExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35749 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence (-1866)
/* Wrapper: */
class SOAP_CMAC __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:EX_VerticalExtent' of XSD type 'gmd:EX_VerticalExtent_Type'
        gmd__EX_USCOREVerticalExtent_USCOREType *EX_USCOREVerticalExtent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence() : EX_USCOREVerticalExtent() { }
        virtual ~__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2639 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType (-817)
/* complex XSD type 'gmd:EX_VerticalExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCOREVerticalExtent_USCOREPropertyType {
      public:
        __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence *__EX_USCOREVerticalExtent_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREVerticalExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREVerticalExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREVerticalExtent_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__EX_USCOREVerticalExtent_USCOREPropertyType() : __EX_USCOREVerticalExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCOREVerticalExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREVerticalExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREVerticalExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREVerticalExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35805 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence (-1869)
/* Wrapper: */
class SOAP_CMAC __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:MD_Identifier' of XSD type 'gmd:MD_Identifier_Type'
        gmd__MD_USCOREIdentifier_USCOREType *MD_USCOREIdentifier;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence() : MD_USCOREIdentifier() { }
        virtual ~__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2651 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType (-821)
/* Type gmd__MD_USCOREIdentifier_USCOREPropertyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:MD_Identifier_PropertyType': */
class SOAP_CMAC gmd__MD_USCOREIdentifier_USCOREPropertyType {
      public:
        __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence *__MD_USCOREIdentifier_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__MD_USCOREIdentifier_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__MD_USCOREIdentifier_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__MD_USCOREIdentifier_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__MD_USCOREIdentifier_USCOREPropertyType() : __MD_USCOREIdentifier_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__MD_USCOREIdentifier_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__MD_USCOREIdentifier_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__MD_USCOREIdentifier_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__MD_USCOREIdentifier_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35861 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence (-1872)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORECitation_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Citation' of XSD type 'gmd:CI_Citation_Type'
        gmd__CI_USCORECitation_USCOREType *CI_USCORECitation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORECitation_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORECitation_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORECitation_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCORECitation_USCOREPropertyType_sequence() : CI_USCORECitation() { }
        virtual ~__gmd__CI_USCORECitation_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORECitation_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORECitation_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORECitation_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2657 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType (-823)
/* complex XSD type 'gmd:CI_Citation_PropertyType': */
class SOAP_CMAC gmd__CI_USCORECitation_USCOREPropertyType {
      public:
        __gmd__CI_USCORECitation_USCOREPropertyType_sequence *__CI_USCORECitation_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORECitation_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORECitation_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORECitation_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORECitation_USCOREPropertyType() : __CI_USCORECitation_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORECitation_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORECitation_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORECitation_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORECitation_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35917 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence (-1875)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREDate_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Date' of XSD type 'gmd:CI_Date_Type'
        gmd__CI_USCOREDate_USCOREType *CI_USCOREDate;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREDate_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREDate_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREDate_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREDate_USCOREPropertyType_sequence() : CI_USCOREDate() { }
        virtual ~__gmd__CI_USCOREDate_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREDate_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREDate_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREDate_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2663 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType (-825)
/* complex XSD type 'gmd:CI_Date_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREDate_USCOREPropertyType {
      public:
        __gmd__CI_USCOREDate_USCOREPropertyType_sequence *__CI_USCOREDate_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDate_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDate_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDate_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREDate_USCOREPropertyType() : __CI_USCOREDate_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREDate_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDate_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDate_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDate_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35973 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence (-1878)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_DateTypeCode' of XSD type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCOREDateTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence() : CI_USCOREDateTypeCode() { }
        virtual ~__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2669 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType (-827)
/* complex XSD type 'gmd:CI_DateTypeCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREDateTypeCode_USCOREPropertyType {
      public:
        __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence *__CI_USCOREDateTypeCode_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDateTypeCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDateTypeCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDateTypeCode_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREDateTypeCode_USCOREPropertyType() : __CI_USCOREDateTypeCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREDateTypeCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDateTypeCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDateTypeCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDateTypeCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:35999 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence (-1881)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_ResponsibleParty' of XSD type 'gmd:CI_ResponsibleParty_Type'
        gmd__CI_USCOREResponsibleParty_USCOREType *CI_USCOREResponsibleParty;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence() : CI_USCOREResponsibleParty() { }
        virtual ~__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2672 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType (-828)
/* complex XSD type 'gmd:CI_ResponsibleParty_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREResponsibleParty_USCOREPropertyType {
      public:
        __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence *__CI_USCOREResponsibleParty_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREResponsibleParty_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREResponsibleParty_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREResponsibleParty_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREResponsibleParty_USCOREPropertyType() : __CI_USCOREResponsibleParty_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREResponsibleParty_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREResponsibleParty_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREResponsibleParty_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREResponsibleParty_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36055 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence (-1884)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREContact_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Contact' of XSD type 'gmd:CI_Contact_Type'
        gmd__CI_USCOREContact_USCOREType *CI_USCOREContact;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREContact_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREContact_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREContact_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREContact_USCOREPropertyType_sequence() : CI_USCOREContact() { }
        virtual ~__gmd__CI_USCOREContact_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREContact_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREContact_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREContact_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2678 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType (-830)
/* complex XSD type 'gmd:CI_Contact_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREContact_USCOREPropertyType {
      public:
        __gmd__CI_USCOREContact_USCOREPropertyType_sequence *__CI_USCOREContact_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREContact_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREContact_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREContact_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREContact_USCOREPropertyType() : __CI_USCOREContact_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREContact_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREContact_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREContact_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREContact_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36111 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence (-1887)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORETelephone_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Telephone' of XSD type 'gmd:CI_Telephone_Type'
        gmd__CI_USCORETelephone_USCOREType *CI_USCORETelephone;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORETelephone_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORETelephone_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORETelephone_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCORETelephone_USCOREPropertyType_sequence() : CI_USCORETelephone() { }
        virtual ~__gmd__CI_USCORETelephone_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORETelephone_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORETelephone_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORETelephone_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2684 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType (-832)
/* complex XSD type 'gmd:CI_Telephone_PropertyType': */
class SOAP_CMAC gmd__CI_USCORETelephone_USCOREPropertyType {
      public:
        __gmd__CI_USCORETelephone_USCOREPropertyType_sequence *__CI_USCORETelephone_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORETelephone_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORETelephone_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORETelephone_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORETelephone_USCOREPropertyType() : __CI_USCORETelephone_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORETelephone_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORETelephone_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORETelephone_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORETelephone_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36167 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence (-1890)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREAddress_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Address' of XSD type 'gmd:CI_Address_Type'
        gmd__CI_USCOREAddress_USCOREType *CI_USCOREAddress;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREAddress_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREAddress_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREAddress_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREAddress_USCOREPropertyType_sequence() : CI_USCOREAddress() { }
        virtual ~__gmd__CI_USCOREAddress_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREAddress_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREAddress_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREAddress_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2690 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType (-834)
/* complex XSD type 'gmd:CI_Address_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREAddress_USCOREPropertyType {
      public:
        __gmd__CI_USCOREAddress_USCOREPropertyType_sequence *__CI_USCOREAddress_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREAddress_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREAddress_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREAddress_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREAddress_USCOREPropertyType() : __CI_USCOREAddress_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREAddress_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREAddress_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREAddress_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREAddress_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36223 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence (-1893)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_OnlineResource' of XSD type 'gmd:CI_OnlineResource_Type'
        gmd__CI_USCOREOnlineResource_USCOREType *CI_USCOREOnlineResource;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence() : CI_USCOREOnlineResource() { }
        virtual ~__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2696 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType (-836)
/* complex XSD type 'gmd:CI_OnlineResource_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREOnlineResource_USCOREPropertyType {
      public:
        __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence *__CI_USCOREOnlineResource_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnlineResource_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnlineResource_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnlineResource_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREOnlineResource_USCOREPropertyType() : __CI_USCOREOnlineResource_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREOnlineResource_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnlineResource_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnlineResource_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnlineResource_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36279 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence (-1896)
/* Wrapper: */
class SOAP_CMAC __gmd__URL_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:URL' of XSD type 'xsd:anyURI'
        std::string URL;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__URL_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__URL_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__URL_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__URL_USCOREPropertyType_sequence() : URL() { }
        virtual ~__gmd__URL_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__URL_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__URL_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__URL_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2702 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType (-838)
/* complex XSD type 'gmd:URL_PropertyType': */
class SOAP_CMAC gmd__URL_USCOREPropertyType {
      public:
        __gmd__URL_USCOREPropertyType_sequence *__URL_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__URL_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__URL_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__URL_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__URL_USCOREPropertyType() : __URL_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__URL_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__URL_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__URL_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__URL_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36305 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence (-1898)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_OnLineFunctionCode' of XSD type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCOREOnLineFunctionCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence() : CI_USCOREOnLineFunctionCode() { }
        virtual ~__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2705 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-839)
/* complex XSD type 'gmd:CI_OnLineFunctionCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType {
      public:
        __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence *__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType() : __CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36331 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence (-1900)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_RoleCode' of XSD type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCORERoleCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence() : CI_USCORERoleCode() { }
        virtual ~__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2708 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType (-840)
/* complex XSD type 'gmd:CI_RoleCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCORERoleCode_USCOREPropertyType {
      public:
        __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence *__CI_USCORERoleCode_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORERoleCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORERoleCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORERoleCode_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORERoleCode_USCOREPropertyType() : __CI_USCORERoleCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCORERoleCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORERoleCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORERoleCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORERoleCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36357 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence (-1902)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_PresentationFormCode' of XSD type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *CI_USCOREPresentationFormCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence() : CI_USCOREPresentationFormCode() { }
        virtual ~__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2711 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-841)
/* complex XSD type 'gmd:CI_PresentationFormCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREPresentationFormCode_USCOREPropertyType {
      public:
        __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence *__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREPresentationFormCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREPresentationFormCode_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREPresentationFormCode_USCOREPropertyType() : __CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREPresentationFormCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREPresentationFormCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36383 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence (-1904)
/* Wrapper: */
class SOAP_CMAC __gmd__CI_USCORESeries_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:CI_Series' of XSD type 'gmd:CI_Series_Type'
        gmd__CI_USCORESeries_USCOREType *CI_USCORESeries;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__CI_USCORESeries_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__CI_USCORESeries_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__CI_USCORESeries_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__CI_USCORESeries_USCOREPropertyType_sequence() : CI_USCORESeries() { }
        virtual ~__gmd__CI_USCORESeries_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__CI_USCORESeries_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__CI_USCORESeries_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORESeries_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2714 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType (-842)
/* complex XSD type 'gmd:CI_Series_PropertyType': */
class SOAP_CMAC gmd__CI_USCORESeries_USCOREPropertyType {
      public:
        __gmd__CI_USCORESeries_USCOREPropertyType_sequence *__CI_USCORESeries_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORESeries_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORESeries_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORESeries_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORESeries_USCOREPropertyType() : __CI_USCORESeries_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORESeries_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORESeries_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORESeries_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORESeries_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36439 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence (-1907)
/* Wrapper: */
class SOAP_CMAC __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence {
      public:
        /// Required element 'gmd:DQ_EvaluationMethodTypeCode' of XSD type 'gco:CodeListValue_Type'
        gco__CodeListValue_USCOREType *DQ_USCOREEvaluationMethodTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence() : DQ_USCOREEvaluationMethodTypeCode() { }
        virtual ~__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2720 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-844)
/* complex XSD type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType': */
class SOAP_CMAC gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType {
      public:
        __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence *__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType() : __DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36473 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__union_DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gmd__union_DQ_USCOREResult_USCOREPropertyType (-1910)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gmd__union_DQ_USCOREResult_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:36465 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence (-1909)
/* Wrapper: */
class SOAP_CMAC __gmd__DQ_USCOREResult_USCOREPropertyType_sequence {
      public:
        /// Union with union _gmd__union_DQ_USCOREResult_USCOREPropertyType variant selector __unionAbstractDQ_USCOREResult set to one of:
        int __unionAbstractDQ_USCOREResult;
        union _gmd__union_DQ_USCOREResult_USCOREPropertyType union_DQ_USCOREResult_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gmd__DQ_USCOREResult_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gmd__DQ_USCOREResult_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gmd__DQ_USCOREResult_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gmd__DQ_USCOREResult_USCOREPropertyType_sequence() : __unionAbstractDQ_USCOREResult() { }
        virtual ~__gmd__DQ_USCOREResult_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gmd__DQ_USCOREResult_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gmd__DQ_USCOREResult_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__DQ_USCOREResult_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2723 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType (-845)
/* complex XSD type 'gmd:DQ_Result_PropertyType': */
class SOAP_CMAC gmd__DQ_USCOREResult_USCOREPropertyType {
      public:
        __gmd__DQ_USCOREResult_USCOREPropertyType_sequence *__DQ_USCOREResult_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__DQ_USCOREResult_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__DQ_USCOREResult_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__DQ_USCOREResult_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gmd__DQ_USCOREResult_USCOREPropertyType() : __DQ_USCOREResult_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__DQ_USCOREResult_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__DQ_USCOREResult_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__DQ_USCOREResult_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__DQ_USCOREResult_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36546 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gts__union_TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gts__union_TM_USCOREPrimitive_USCOREPropertyType (-1913)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gts__union_TM_USCOREPrimitive_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:36535 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence (-1912)
/* Wrapper: */
class SOAP_CMAC __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence {
      public:
        /// Union with union _gts__union_TM_USCOREPrimitive_USCOREPropertyType variant selector __unionAbstractTimePrimitive set to one of:
        int __unionAbstractTimePrimitive;
        union _gts__union_TM_USCOREPrimitive_USCOREPropertyType union_TM_USCOREPrimitive_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence() : __unionAbstractTimePrimitive() { }
        virtual ~__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2729 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType (-847)
/* complex XSD type 'gts:TM_Primitive_PropertyType': */
class SOAP_CMAC gts__TM_USCOREPrimitive_USCOREPropertyType {
      public:
        __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence *__TM_USCOREPrimitive_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gts__TM_USCOREPrimitive_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gts__TM_USCOREPrimitive_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gts__TM_USCOREPrimitive_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gts__TM_USCOREPrimitive_USCOREPropertyType() : __TM_USCOREPrimitive_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gts__TM_USCOREPrimitive_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gts__TM_USCOREPrimitive_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gts__TM_USCOREPrimitive_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gts__TM_USCOREPrimitive_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2732 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType (-848)
/* Type gco__AbstractObject_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gco:AbstractObject_Type': */
class SOAP_CMAC gco__AbstractObject_USCOREType {
      public:
        /// optional attribute 'id' of XSD type 'xsd:ID'
        std::string *id;
        /// optional attribute 'uuid' of XSD type 'xsd:string'
        std::string *uuid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__AbstractObject_USCOREType, default initialized and not managed by a soap context
        virtual gco__AbstractObject_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__AbstractObject_USCOREType); }
      public:
        /// Constructor with initializations
        gco__AbstractObject_USCOREType() : id(), uuid(), soap() { }
        virtual ~gco__AbstractObject_USCOREType() { }
        /// Friend allocator used by soap_new_gco__AbstractObject_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gco__AbstractObject_USCOREType * SOAP_FMAC2 soap_instantiate_gco__AbstractObject_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36660 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType (-1917)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gco__union_CharacterString_USCOREPropertyType
{
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_CharacterString	(1)	/**< union variant selector value for member CharacterString */
        std::string *CharacterString;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode	(2)	/**< union variant selector value for member gmd__CI_USCOREDateTypeCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREDateTypeCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode_	(3)	/**< union variant selector value for member gmd__CI_USCOREDateTypeCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREDateTypeCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode	(4)	/**< union variant selector value for member gmd__CI_USCOREOnLineFunctionCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREOnLineFunctionCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode_	(5)	/**< union variant selector value for member gmd__CI_USCOREOnLineFunctionCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREOnLineFunctionCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode	(6)	/**< union variant selector value for member gmd__CI_USCORERoleCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCORERoleCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode_	(7)	/**< union variant selector value for member gmd__CI_USCORERoleCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCORERoleCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode	(8)	/**< union variant selector value for member gmd__CI_USCOREPresentationFormCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREPresentationFormCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode_	(9)	/**< union variant selector value for member gmd__CI_USCOREPresentationFormCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREPresentationFormCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode	(10)	/**< union variant selector value for member gmd__DQ_USCOREEvaluationMethodTypeCode */
        gco__CodeListValue_USCOREType *gmd__DQ_USCOREEvaluationMethodTypeCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode_	(11)	/**< union variant selector value for member gmd__DQ_USCOREEvaluationMethodTypeCode_ */
        gco__CodeListValue_USCOREType *gmd__DQ_USCOREEvaluationMethodTypeCode_;
};
#endif

/* eml2_2ForGsoap.h:36631 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence (-1916)
/* Wrapper: */
class SOAP_CMAC __gco__CharacterString_USCOREPropertyType_sequence {
      public:
        /// Union with union _gco__union_CharacterString_USCOREPropertyType variant selector __unionCharacterString set to one of: SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_CharacterString SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode_
        int __unionCharacterString;
        union _gco__union_CharacterString_USCOREPropertyType union_CharacterString_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__CharacterString_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__CharacterString_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__CharacterString_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gco__CharacterString_USCOREPropertyType_sequence() : __unionCharacterString() { }
        virtual ~__gco__CharacterString_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__CharacterString_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__CharacterString_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__CharacterString_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2735 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType (-849)
/* complex XSD type 'gco:CharacterString_PropertyType': */
class SOAP_CMAC gco__CharacterString_USCOREPropertyType {
      public:
        __gco__CharacterString_USCOREPropertyType_sequence *__CharacterString_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__CharacterString_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__CharacterString_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__CharacterString_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gco__CharacterString_USCOREPropertyType() : __CharacterString_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__CharacterString_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__CharacterString_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__CharacterString_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__CharacterString_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36684 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence (-1919)
/* Wrapper: */
class SOAP_CMAC __gco__Boolean_USCOREPropertyType_sequence {
      public:
        /// Required element 'gco:Boolean' of XSD type 'xsd:boolean'
        bool Boolean;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__Boolean_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__Boolean_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__Boolean_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gco__Boolean_USCOREPropertyType_sequence() : Boolean() { }
        virtual ~__gco__Boolean_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__Boolean_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__Boolean_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__Boolean_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2738 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType (-850)
/* complex XSD type 'gco:Boolean_PropertyType': */
class SOAP_CMAC gco__Boolean_USCOREPropertyType {
      public:
        __gco__Boolean_USCOREPropertyType_sequence *__Boolean_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Boolean_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Boolean_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Boolean_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gco__Boolean_USCOREPropertyType() : __Boolean_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__Boolean_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Boolean_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Boolean_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Boolean_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36710 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence (-1921)
/* Wrapper: */
class SOAP_CMAC __gco__Real_USCOREPropertyType_sequence {
      public:
        /// Required element 'gco:Real' of XSD type 'xsd:double'
        double Real;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__Real_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__Real_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__Real_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gco__Real_USCOREPropertyType_sequence() : Real() { }
        virtual ~__gco__Real_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__Real_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__Real_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__Real_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2741 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType (-851)
/* complex XSD type 'gco:Real_PropertyType': */
class SOAP_CMAC gco__Real_USCOREPropertyType {
      public:
        __gco__Real_USCOREPropertyType_sequence *__Real_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Real_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Real_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Real_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gco__Real_USCOREPropertyType() : __Real_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__Real_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Real_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Real_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Real_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36744 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__union_Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gco__union_Date_USCOREPropertyType (-1925)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gco__union_Date_USCOREPropertyType
{
        #define SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_Date	(1)	/**< union variant selector value for member Date */
        std::string *Date;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_DateTime	(2)	/**< union variant selector value for member DateTime */
        struct tm *DateTime;
};
#endif

/* eml2_2ForGsoap.h:2744 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType (-852)
/* complex XSD type 'gco:Date_PropertyType': */
class SOAP_CMAC gco__Date_USCOREPropertyType {
      public:
        /// Union with union _gco__union_Date_USCOREPropertyType variant selector __union_Date_USCOREPropertyType set to one of: SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_Date SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_DateTime
        int __union_Date_USCOREPropertyType;
        union _gco__union_Date_USCOREPropertyType union_Date_USCOREPropertyType;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Date_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Date_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Date_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gco__Date_USCOREPropertyType() : __union_Date_USCOREPropertyType(), gco__nilReason(), soap() { }
        virtual ~gco__Date_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Date_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Date_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Date_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36766 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence (-1926)
/* Wrapper: */
class SOAP_CMAC __gco__DateTime_USCOREPropertyType_sequence {
      public:
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm DateTime;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gco__DateTime_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gco__DateTime_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gco__DateTime_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gco__DateTime_USCOREPropertyType_sequence() : DateTime() { }
        virtual ~__gco__DateTime_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gco__DateTime_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gco__DateTime_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__DateTime_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2750 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType (-854)
/* complex XSD type 'gco:DateTime_PropertyType': */
class SOAP_CMAC gco__DateTime_USCOREPropertyType {
      public:
        __gco__DateTime_USCOREPropertyType_sequence *__DateTime_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__DateTime_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__DateTime_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__DateTime_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gco__DateTime_USCOREPropertyType() : __DateTime_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__DateTime_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__DateTime_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__DateTime_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__DateTime_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:36811 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gsr__union_SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gsr__union_SC_USCORECRS_USCOREPropertyType (-1929)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gsr__union_SC_USCORECRS_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:36800 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence (-1928)
/* Wrapper: */
class SOAP_CMAC __gsr__SC_USCORECRS_USCOREPropertyType_sequence {
      public:
        /// Union with union _gsr__union_SC_USCORECRS_USCOREPropertyType variant selector __unionAbstractCRS set to one of:
        int __unionAbstractCRS;
        union _gsr__union_SC_USCORECRS_USCOREPropertyType union_SC_USCORECRS_USCOREPropertyType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __gsr__SC_USCORECRS_USCOREPropertyType_sequence, default initialized and not managed by a soap context
        virtual __gsr__SC_USCORECRS_USCOREPropertyType_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__gsr__SC_USCORECRS_USCOREPropertyType_sequence); }
      public:
        /// Constructor with initializations
        __gsr__SC_USCORECRS_USCOREPropertyType_sequence() : __unionAbstractCRS() { }
        virtual ~__gsr__SC_USCORECRS_USCOREPropertyType_sequence() { }
        /// Friend allocator used by soap_new___gsr__SC_USCORECRS_USCOREPropertyType_sequence(struct soap*, int)
        friend SOAP_FMAC1 __gsr__SC_USCORECRS_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gsr__SC_USCORECRS_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2753 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType (-855)
/* complex XSD type 'gsr:SC_CRS_PropertyType': */
class SOAP_CMAC gsr__SC_USCORECRS_USCOREPropertyType {
      public:
        __gsr__SC_USCORECRS_USCOREPropertyType_sequence *__SC_USCORECRS_USCOREPropertyType_sequence;
        /// optional attribute 'gco:nilReason' of XSD type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// optional attribute 'uuidref' of XSD type 'xsd:string'
        std::string *uuidref;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gsr__SC_USCORECRS_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gsr__SC_USCORECRS_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gsr__SC_USCORECRS_USCOREPropertyType); }
      public:
        /// Constructor with initializations
        gsr__SC_USCORECRS_USCOREPropertyType() : __SC_USCORECRS_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gsr__SC_USCORECRS_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gsr__SC_USCORECRS_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gsr__SC_USCORECRS_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gsr__SC_USCORECRS_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:245 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Attachment (-19)
/* Type witsml2__Attachment is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Attachment': */
class SOAP_CMAC witsml2__Attachment : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:Category' of XSD type 'eml22:String64'
        std::string *Category;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Param' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> Param;
        /// Optional element 'witsml2:MdBit' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:FileName' of XSD type 'eml22:String64'
        std::string *FileName;
        /// Optional element 'witsml2:FileType' of XSD type 'eml22:String64'
        std::string *FileType;
        /// Required element 'witsml2:Content' of XSD type 'xsd:base64Binary'
        xsd__base64Binary Content;
        /// Optional element 'witsml2:ObjectReference' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ObjectReference;
        /// Optional element 'witsml2:SubObjectReference' of XSD type 'eml22:String64'
        std::string *SubObjectReference;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Attachment
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Attachment; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Attachment, default initialized and not managed by a soap context
        virtual witsml2__Attachment *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Attachment); }
      public:
        /// Constructor with initializations
        witsml2__Attachment() : Category(), Md(), Param(), MdBit(), FileName(), FileType(), Content(), ObjectReference(), SubObjectReference(), Wellbore() { }
        virtual ~witsml2__Attachment() { }
        /// Friend allocator used by soap_new_witsml2__Attachment(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Attachment * SOAP_FMAC2 soap_instantiate_witsml2__Attachment(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:248 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Wellbore (-20)
/* Type witsml2__Wellbore is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Wellbore': */
class SOAP_CMAC witsml2__Wellbore : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:Number' of XSD type 'eml22:String64'
        std::string *Number;
        /// Optional element 'witsml2:SuffixAPI' of XSD type 'eml22:String64'
        std::string *SuffixAPI;
        /// Optional element 'witsml2:NumGovt' of XSD type 'eml22:String64'
        std::string *NumGovt;
        /// Optional element 'witsml2:StatusWellbore' of XSD type 'eml22:WellStatus'
        enum eml22__WellStatus *StatusWellbore;
        /// Optional element 'witsml2:IsActive' of XSD type 'xsd:boolean'
        bool *IsActive;
        /// Optional element 'witsml2:PurposeWellbore' of XSD type 'witsml2:WellPurpose'
        enum witsml2__WellPurpose *PurposeWellbore;
        /// Optional element 'witsml2:TypeWellbore' of XSD type 'witsml2:WellboreType'
        enum witsml2__WellboreType *TypeWellbore;
        /// Optional element 'witsml2:Shape' of XSD type 'witsml2:WellboreShape'
        enum witsml2__WellboreShape *Shape;
        /// Optional element 'witsml2:DTimKickoff' of XSD type 'eml22:TimeStamp'
        struct tm *DTimKickoff;
        /// Optional element 'witsml2:AchievedTD' of XSD type 'xsd:boolean'
        bool *AchievedTD;
        /// Optional element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:MdBit' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBit;
        /// Optional element 'witsml2:TvdBit' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdBit;
        /// Optional element 'witsml2:MdKickoff' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdKickoff;
        /// Optional element 'witsml2:TvdKickoff' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdKickoff;
        /// Optional element 'witsml2:MdPlanned' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml2:TvdPlanned' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdPlanned;
        /// Optional element 'witsml2:MdSubSeaPlanned' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdSubSeaPlanned;
        /// Optional element 'witsml2:TvdSubSeaPlanned' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdSubSeaPlanned;
        /// Optional element 'witsml2:DayTarget' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *DayTarget;
        /// Required element 'witsml2:Well' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Well;
        /// Optional element 'witsml2:ParentWellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ParentWellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Wellbore
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Wellbore; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Wellbore, default initialized and not managed by a soap context
        virtual witsml2__Wellbore *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Wellbore); }
      public:
        /// Constructor with initializations
        witsml2__Wellbore() : Number(), SuffixAPI(), NumGovt(), StatusWellbore(), IsActive(), PurposeWellbore(), TypeWellbore(), Shape(), DTimKickoff(), AchievedTD(), Md(), Tvd(), MdBit(), TvdBit(), MdKickoff(), TvdKickoff(), MdPlanned(), TvdPlanned(), MdSubSeaPlanned(), TvdSubSeaPlanned(), DayTarget(), Well(), ParentWellbore() { }
        virtual ~witsml2__Wellbore() { }
        /// Friend allocator used by soap_new_witsml2__Wellbore(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Wellbore * SOAP_FMAC2 soap_instantiate_witsml2__Wellbore(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:254 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeodeticWellLocation (-22)
/* Type witsml2__GeodeticWellLocation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:GeodeticWellLocation': */
class SOAP_CMAC witsml2__GeodeticWellLocation : public witsml2__AbstractWellLocation {
      public:
        /// Required element 'witsml2:Latitude' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Latitude;
        /// Required element 'witsml2:Longitude' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *Longitude;
        /// Required element 'witsml2:Crs' of XSD type 'eml22:AbstractGeodeticCrs'
        eml22__AbstractGeodeticCrs *Crs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GeodeticWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GeodeticWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GeodeticWellLocation, default initialized and not managed by a soap context
        virtual witsml2__GeodeticWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GeodeticWellLocation); }
      public:
        /// Constructor with initializations
        witsml2__GeodeticWellLocation() : Latitude(), Longitude(), Crs() { }
        virtual ~witsml2__GeodeticWellLocation() { }
        /// Friend allocator used by soap_new_witsml2__GeodeticWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GeodeticWellLocation * SOAP_FMAC2 soap_instantiate_witsml2__GeodeticWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:257 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ProjectedWellLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ProjectedWellLocation (-23)
/* Type witsml2__ProjectedWellLocation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ProjectedWellLocation': */
class SOAP_CMAC witsml2__ProjectedWellLocation : public witsml2__AbstractWellLocation {
      public:
        /// Required element 'witsml2:Coordinate1' of XSD type 'xsd:double'
        double Coordinate1;
        /// Required element 'witsml2:Coordinate2' of XSD type 'xsd:double'
        double Coordinate2;
        /// Required element 'witsml2:Crs' of XSD type 'eml22:AbstractProjectedCrs'
        eml22__AbstractProjectedCrs *Crs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ProjectedWellLocation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ProjectedWellLocation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ProjectedWellLocation, default initialized and not managed by a soap context
        virtual witsml2__ProjectedWellLocation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ProjectedWellLocation); }
      public:
        /// Constructor with initializations
        witsml2__ProjectedWellLocation() : Coordinate1(), Coordinate2(), Crs() { }
        virtual ~witsml2__ProjectedWellLocation() { }
        /// Friend allocator used by soap_new_witsml2__ProjectedWellLocation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ProjectedWellLocation * SOAP_FMAC2 soap_instantiate_witsml2__ProjectedWellLocation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:269 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Well
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Well (-27)
/* Type witsml2__Well is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Well': */
class SOAP_CMAC witsml2__Well : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:NameLegal' of XSD type 'eml22:String64'
        std::string *NameLegal;
        /// Optional element 'witsml2:NumLicense' of XSD type 'eml22:String64'
        std::string *NumLicense;
        /// Optional element 'witsml2:NumGovt' of XSD type 'eml22:String64'
        std::string *NumGovt;
        /// Optional element 'witsml2:DTimLicense' of XSD type 'eml22:TimeStamp'
        struct tm *DTimLicense;
        /// Optional element 'witsml2:Field' of XSD type 'eml22:String64'
        std::string *Field;
        /// Optional element 'witsml2:Country' of XSD type 'eml22:String64'
        std::string *Country;
        /// Optional element 'witsml2:State' of XSD type 'eml22:String64'
        std::string *State;
        /// Optional element 'witsml2:County' of XSD type 'eml22:String64'
        std::string *County;
        /// Optional element 'witsml2:Region' of XSD type 'eml22:String64'
        std::string *Region;
        /// Optional element 'witsml2:District' of XSD type 'eml22:String64'
        std::string *District;
        /// Optional element 'witsml2:Block' of XSD type 'eml22:String64'
        std::string *Block;
        /// Optional element 'witsml2:TimeZone' of XSD type 'eml22:TimeZone'
        std::string *TimeZone;
        /// Optional element 'witsml2:Operator' of XSD type 'eml22:String64'
        std::string *Operator;
        /// Optional element 'witsml2:OperatorDiv' of XSD type 'eml22:String64'
        std::string *OperatorDiv;
        /// Optional element 'witsml2:OriginalOperator' of XSD type 'eml22:String64'
        std::string *OriginalOperator;
        /// Optional element 'witsml2:PcInterest' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *PcInterest;
        /// Optional element 'witsml2:NumAPI' of XSD type 'eml22:String64'
        std::string *NumAPI;
        /// Optional element 'witsml2:StatusWell' of XSD type 'eml22:WellStatus'
        enum eml22__WellStatus *StatusWell;
        /// Optional element 'witsml2:PurposeWell' of XSD type 'witsml2:WellPurpose'
        enum witsml2__WellPurpose *PurposeWell;
        /// Optional element 'witsml2:FluidWell' of XSD type 'witsml2:WellFluid'
        enum witsml2__WellFluid *FluidWell;
        /// Optional element 'witsml2:DirectionWell' of XSD type 'witsml2:WellDirection'
        enum witsml2__WellDirection *DirectionWell;
        /// Optional element 'witsml2:DTimSpud' of XSD type 'eml22:TimeStamp'
        struct tm *DTimSpud;
        /// Optional element 'witsml2:DTimPa' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPa;
        /// Optional element 'witsml2:WaterDepth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *WaterDepth;
        /// Optional element 'witsml2:GeographicLocationWGS84' of XSD type 'witsml2:GeodeticWellLocation'
        witsml2__GeodeticWellLocation *GeographicLocationWGS84;
        /// Optional element 'witsml2:WellLocation' of XSD type 'witsml2:AbstractWellLocation'
        std::vector<witsml2__AbstractWellLocation *> WellLocation;
        /// Optional element 'witsml2:WellPublicLandSurveySystemLocation' of XSD type 'eml22:PublicLandSurveySystem'
        eml22__PublicLandSurveySystem *WellPublicLandSurveySystemLocation;
        /// Optional element 'witsml2:ReferencePoint' of XSD type 'witsml2:ReferencePoint'
        std::vector<witsml2__ReferencePoint *> ReferencePoint;
        /// Optional element 'witsml2:WellheadElevation' of XSD type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *WellheadElevation;
        /// Optional element 'witsml2:WellDatum' of XSD type 'witsml2:WellDatum'
        std::vector<witsml2__WellDatum *> WellDatum;
        /// Optional element 'witsml2:GroundElevation' of XSD type 'witsml2:WellElevationCoord'
        witsml2__WellElevationCoord *GroundElevation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Well
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Well; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Well, default initialized and not managed by a soap context
        virtual witsml2__Well *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Well); }
      public:
        /// Constructor with initializations
        witsml2__Well() : NameLegal(), NumLicense(), NumGovt(), DTimLicense(), Field(), Country(), State(), County(), Region(), District(), Block(), TimeZone(), Operator(), OperatorDiv(), OriginalOperator(), PcInterest(), NumAPI(), StatusWell(), PurposeWell(), FluidWell(), DirectionWell(), DTimSpud(), DTimPa(), WaterDepth(), GeographicLocationWGS84(), WellLocation(), WellPublicLandSurveySystemLocation(), ReferencePoint(), WellheadElevation(), WellDatum(), GroundElevation() { }
        virtual ~witsml2__Well() { }
        /// Friend allocator used by soap_new_witsml2__Well(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Well * SOAP_FMAC2 soap_instantiate_witsml2__Well(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:278 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BhaRun (-30)
/* Type witsml2__BhaRun is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:BhaRun': */
class SOAP_CMAC witsml2__BhaRun : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimStop' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStop;
        /// Optional element 'witsml2:DTimStartDrilling' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStartDrilling;
        /// Optional element 'witsml2:DTimStopDrilling' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStopDrilling;
        /// Optional element 'witsml2:PlanDogleg' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *PlanDogleg;
        /// Optional element 'witsml2:ActDogleg' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *ActDogleg;
        /// Optional element 'witsml2:ActDoglegMx' of XSD type 'eml22:AnglePerLengthMeasure'
        eml22__AnglePerLengthMeasure *ActDoglegMx;
        /// Optional element 'witsml2:StatusBha' of XSD type 'witsml2:BhaStatus'
        enum witsml2__BhaStatus *StatusBha;
        /// Optional element 'witsml2:NumBitRun' of XSD type 'xsd:int'
        int *NumBitRun;
        /// Optional element 'witsml2:NumStringRun' of XSD type 'xsd:int'
        int *NumStringRun;
        /// Optional element 'witsml2:ReasonTrip' of XSD type 'eml22:String2000'
        std::string *ReasonTrip;
        /// Optional element 'witsml2:ObjectiveBha' of XSD type 'eml22:String2000'
        std::string *ObjectiveBha;
        /// Optional element 'witsml2:DrillingParams' of XSD type 'witsml2:DrillingParams'
        std::vector<witsml2__DrillingParams *> DrillingParams;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:Tubular' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Tubular;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BhaRun
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BhaRun; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BhaRun, default initialized and not managed by a soap context
        virtual witsml2__BhaRun *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BhaRun); }
      public:
        /// Constructor with initializations
        witsml2__BhaRun() : DTimStart(), DTimStop(), DTimStartDrilling(), DTimStopDrilling(), PlanDogleg(), ActDogleg(), ActDoglegMx(), StatusBha(), NumBitRun(), NumStringRun(), ReasonTrip(), ObjectiveBha(), DrillingParams(), Wellbore(), Tubular() { }
        virtual ~witsml2__BhaRun() { }
        /// Friend allocator used by soap_new_witsml2__BhaRun(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BhaRun * SOAP_FMAC2 soap_instantiate_witsml2__BhaRun(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:287 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FluidsReport (-33)
/* Type witsml2__FluidsReport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:FluidsReport': */
class SOAP_CMAC witsml2__FluidsReport : public eml22__AbstractObject {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTim;
        /// Required element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:NumReport' of XSD type 'xsd:int'
        int *NumReport;
        /// Optional element 'witsml2:Fluid' of XSD type 'witsml2:Fluid'
        std::vector<witsml2__Fluid *> Fluid;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__FluidsReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__FluidsReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__FluidsReport, default initialized and not managed by a soap context
        virtual witsml2__FluidsReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__FluidsReport); }
      public:
        /// Constructor with initializations
        witsml2__FluidsReport() : DTim(), Md(), Tvd(), NumReport(), Fluid(), Wellbore() { }
        virtual ~witsml2__FluidsReport() { }
        /// Friend allocator used by soap_new_witsml2__FluidsReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__FluidsReport * SOAP_FMAC2 soap_instantiate_witsml2__FluidsReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:37574 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleCirculatingTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleCirculatingTemperature_sequence_ (-1950)
/* Wrapper: */
class SOAP_CMAC __witsml2__BottomHoleCirculatingTemperature_sequence_ {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleCirculatingTemperature_sequence_
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleCirculatingTemperature_sequence_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BottomHoleCirculatingTemperature_sequence_, default initialized and not managed by a soap context
        virtual __witsml2__BottomHoleCirculatingTemperature_sequence_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BottomHoleCirculatingTemperature_sequence_); }
      public:
        /// Constructor with initializations
        __witsml2__BottomHoleCirculatingTemperature_sequence_() { }
        virtual ~__witsml2__BottomHoleCirculatingTemperature_sequence_() { }
        /// Friend allocator used by soap_new___witsml2__BottomHoleCirculatingTemperature_sequence_(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BottomHoleCirculatingTemperature_sequence_ * SOAP_FMAC2 soap_instantiate___witsml2__BottomHoleCirculatingTemperature_sequence_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:296 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleCirculatingTemperature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleCirculatingTemperature (-36)
/* Type witsml2__BottomHoleCirculatingTemperature is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:BottomHoleCirculatingTemperature': */
class SOAP_CMAC witsml2__BottomHoleCirculatingTemperature : public witsml2__AbstractBottomHoleTemperature {
      public:
        __witsml2__BottomHoleCirculatingTemperature_sequence_ *__BottomHoleCirculatingTemperature_sequence_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleCirculatingTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleCirculatingTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BottomHoleCirculatingTemperature, default initialized and not managed by a soap context
        virtual witsml2__BottomHoleCirculatingTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BottomHoleCirculatingTemperature); }
      public:
        /// Constructor with initializations
        witsml2__BottomHoleCirculatingTemperature() : __BottomHoleCirculatingTemperature_sequence_() { }
        virtual ~witsml2__BottomHoleCirculatingTemperature() { }
        /// Friend allocator used by soap_new_witsml2__BottomHoleCirculatingTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BottomHoleCirculatingTemperature * SOAP_FMAC2 soap_instantiate_witsml2__BottomHoleCirculatingTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:37610 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleStaticTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleStaticTemperature_sequence_ (-1952)
/* Wrapper: */
class SOAP_CMAC __witsml2__BottomHoleStaticTemperature_sequence_ {
      public:
        /// Required element 'witsml2:eTimStatic' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *eTimStatic;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleStaticTemperature_sequence_
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__BottomHoleStaticTemperature_sequence_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BottomHoleStaticTemperature_sequence_, default initialized and not managed by a soap context
        virtual __witsml2__BottomHoleStaticTemperature_sequence_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BottomHoleStaticTemperature_sequence_); }
      public:
        /// Constructor with initializations
        __witsml2__BottomHoleStaticTemperature_sequence_() : eTimStatic() { }
        virtual ~__witsml2__BottomHoleStaticTemperature_sequence_() { }
        /// Friend allocator used by soap_new___witsml2__BottomHoleStaticTemperature_sequence_(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BottomHoleStaticTemperature_sequence_ * SOAP_FMAC2 soap_instantiate___witsml2__BottomHoleStaticTemperature_sequence_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:299 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleStaticTemperature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleStaticTemperature (-37)
/* Type witsml2__BottomHoleStaticTemperature is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:BottomHoleStaticTemperature': */
class SOAP_CMAC witsml2__BottomHoleStaticTemperature : public witsml2__AbstractBottomHoleTemperature {
      public:
        __witsml2__BottomHoleStaticTemperature_sequence_ *__BottomHoleStaticTemperature_sequence_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleStaticTemperature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleStaticTemperature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BottomHoleStaticTemperature, default initialized and not managed by a soap context
        virtual witsml2__BottomHoleStaticTemperature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BottomHoleStaticTemperature); }
      public:
        /// Constructor with initializations
        witsml2__BottomHoleStaticTemperature() : __BottomHoleStaticTemperature_sequence_() { }
        virtual ~witsml2__BottomHoleStaticTemperature() { }
        /// Friend allocator used by soap_new_witsml2__BottomHoleStaticTemperature(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BottomHoleStaticTemperature * SOAP_FMAC2 soap_instantiate_witsml2__BottomHoleStaticTemperature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:305 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReport (-39)
/* Type witsml2__DrillReport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DrillReport': */
class SOAP_CMAC witsml2__DrillReport : public eml22__AbstractObject {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTimStart;
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTimEnd;
        /// Optional element 'witsml2:VersionKind' of XSD type 'witsml2:OpsReportVersion'
        enum witsml2__OpsReportVersion *VersionKind;
        /// Optional element 'witsml2:CreateDate' of XSD type 'eml22:TimeStamp'
        struct tm *CreateDate;
        /// Optional element 'witsml2:WellDatum' of XSD type 'witsml2:WellDatum'
        std::vector<witsml2__WellDatum *> WellDatum;
        /// Optional element 'witsml2:BitRecord' of XSD type 'witsml2:BitRecord'
        std::vector<witsml2__BitRecord *> BitRecord;
        /// Optional element 'witsml2:DrillActivity' of XSD type 'witsml2:DrillActivity'
        std::vector<witsml2__DrillActivity *> DrillActivity;
        /// Optional element 'witsml2:LogInfo' of XSD type 'witsml2:DrillReportLogInfo'
        std::vector<witsml2__DrillReportLogInfo *> LogInfo;
        /// Optional element 'witsml2:CoreInfo' of XSD type 'witsml2:DrillReportCoreInfo'
        std::vector<witsml2__DrillReportCoreInfo *> CoreInfo;
        /// Optional element 'witsml2:WellTestInfo' of XSD type 'witsml2:DrillReportWellTestInfo'
        std::vector<witsml2__DrillReportWellTestInfo *> WellTestInfo;
        /// Optional element 'witsml2:FormTestInfo' of XSD type 'witsml2:DrillReportFormTestInfo'
        std::vector<witsml2__DrillReportFormTestInfo *> FormTestInfo;
        /// Optional element 'witsml2:LithShowInfo' of XSD type 'witsml2:DrillReportLithShowInfo'
        std::vector<witsml2__DrillReportLithShowInfo *> LithShowInfo;
        /// Optional element 'witsml2:EquipFailureInfo' of XSD type 'witsml2:DrillReportEquipFailureInfo'
        std::vector<witsml2__DrillReportEquipFailureInfo *> EquipFailureInfo;
        /// Optional element 'witsml2:ControlIncidentInfo' of XSD type 'witsml2:DrillReportControlIncidentInfo'
        std::vector<witsml2__DrillReportControlIncidentInfo *> ControlIncidentInfo;
        /// Optional element 'witsml2:StratInfo' of XSD type 'witsml2:DrillReportStratInfo'
        std::vector<witsml2__DrillReportStratInfo *> StratInfo;
        /// Optional element 'witsml2:PerfInfo' of XSD type 'witsml2:DrillReportPerfInfo'
        std::vector<witsml2__DrillReportPerfInfo *> PerfInfo;
        /// Optional element 'witsml2:GasReadingInfo' of XSD type 'witsml2:DrillReportGasReadingInfo'
        std::vector<witsml2__DrillReportGasReadingInfo *> GasReadingInfo;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:WellAlias' of XSD type 'eml22:ObjectAlias'
        eml22__ObjectAlias *WellAlias;
        /// Optional element 'witsml2:WellboreAlias' of XSD type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> WellboreAlias;
        /// Optional element 'witsml2:WellboreInfo' of XSD type 'witsml2:DrillReportWellboreInfo'
        witsml2__DrillReportWellboreInfo *WellboreInfo;
        /// Optional element 'witsml2:StatusInfo' of XSD type 'witsml2:DrillReportStatusInfo'
        std::vector<witsml2__DrillReportStatusInfo *> StatusInfo;
        /// Optional element 'witsml2:Fluid' of XSD type 'witsml2:Fluid'
        std::vector<witsml2__Fluid *> Fluid;
        /// Optional element 'witsml2:PorePressure' of XSD type 'witsml2:DrillReportPorePressure'
        std::vector<witsml2__DrillReportPorePressure *> PorePressure;
        /// Optional element 'witsml2:ExtendedReport' of XSD type 'witsml2:TimestampedCommentString'
        witsml2__TimestampedCommentString *ExtendedReport;
        /// Optional element 'witsml2:SurveyStation' of XSD type 'witsml2:DrillReportSurveyStation'
        std::vector<witsml2__DrillReportSurveyStation *> SurveyStation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DrillReport, default initialized and not managed by a soap context
        virtual witsml2__DrillReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DrillReport); }
      public:
        /// Constructor with initializations
        witsml2__DrillReport() : DTimStart(), DTimEnd(), VersionKind(), CreateDate(), WellDatum(), BitRecord(), DrillActivity(), LogInfo(), CoreInfo(), WellTestInfo(), FormTestInfo(), LithShowInfo(), EquipFailureInfo(), ControlIncidentInfo(), StratInfo(), PerfInfo(), GasReadingInfo(), Wellbore(), WellAlias(), WellboreAlias(), WellboreInfo(), StatusInfo(), Fluid(), PorePressure(), ExtendedReport(), SurveyStation() { }
        virtual ~witsml2__DrillReport() { }
        /// Friend allocator used by soap_new_witsml2__DrillReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DrillReport * SOAP_FMAC2 soap_instantiate_witsml2__DrillReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:37751 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__BendAngle_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__BendAngle_sequence (-1986)
/* Wrapper: */
class SOAP_CMAC __witsml2__BendAngle_sequence {
      public:
        /// Optional element 'witsml2:BendAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *BendAngle;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__BendAngle_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__BendAngle_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BendAngle_sequence, default initialized and not managed by a soap context
        virtual __witsml2__BendAngle_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BendAngle_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__BendAngle_sequence() : BendAngle() { }
        virtual ~__witsml2__BendAngle_sequence() { }
        /// Friend allocator used by soap_new___witsml2__BendAngle_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BendAngle_sequence * SOAP_FMAC2 soap_instantiate___witsml2__BendAngle_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:362 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BendAngle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BendAngle (-58)
/* Type witsml2__BendAngle is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:BendAngle': */
class SOAP_CMAC witsml2__BendAngle : public witsml2__AbstractRotarySteerableTool {
      public:
        __witsml2__BendAngle_sequence *__BendAngle_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BendAngle
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BendAngle; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BendAngle, default initialized and not managed by a soap context
        virtual witsml2__BendAngle *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BendAngle); }
      public:
        /// Constructor with initializations
        witsml2__BendAngle() : __BendAngle_sequence() { }
        virtual ~witsml2__BendAngle() { }
        /// Friend allocator used by soap_new_witsml2__BendAngle(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BendAngle * SOAP_FMAC2 soap_instantiate_witsml2__BendAngle(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:37782 */
#ifndef SOAP_TYPE_gsoap_eml2_2___witsml2__BendOffset_sequence
#define SOAP_TYPE_gsoap_eml2_2___witsml2__BendOffset_sequence (-1988)
/* Wrapper: */
class SOAP_CMAC __witsml2__BendOffset_sequence {
      public:
        /// Optional element 'witsml2:BendOffset' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *BendOffset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2___witsml2__BendOffset_sequence
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2___witsml2__BendOffset_sequence; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type __witsml2__BendOffset_sequence, default initialized and not managed by a soap context
        virtual __witsml2__BendOffset_sequence *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(__witsml2__BendOffset_sequence); }
      public:
        /// Constructor with initializations
        __witsml2__BendOffset_sequence() : BendOffset() { }
        virtual ~__witsml2__BendOffset_sequence() { }
        /// Friend allocator used by soap_new___witsml2__BendOffset_sequence(struct soap*, int)
        friend SOAP_FMAC1 __witsml2__BendOffset_sequence * SOAP_FMAC2 soap_instantiate___witsml2__BendOffset_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:365 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BendOffset
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BendOffset (-59)
/* Type witsml2__BendOffset is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:BendOffset': */
class SOAP_CMAC witsml2__BendOffset : public witsml2__AbstractRotarySteerableTool {
      public:
        __witsml2__BendOffset_sequence *__BendOffset_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BendOffset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BendOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BendOffset, default initialized and not managed by a soap context
        virtual witsml2__BendOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BendOffset); }
      public:
        /// Constructor with initializations
        witsml2__BendOffset() : __BendOffset_sequence() { }
        virtual ~witsml2__BendOffset() { }
        /// Friend allocator used by soap_new_witsml2__BendOffset(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BendOffset * SOAP_FMAC2 soap_instantiate_witsml2__BendOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:398 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Tubular (-70)
/* Type witsml2__Tubular is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Tubular': */
class SOAP_CMAC witsml2__Tubular : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:TypeTubularAssy' of XSD type 'witsml2:TubularAssembly'
        enum witsml2__TubularAssembly TypeTubularAssy;
        /// Optional element 'witsml2:ValveFloat' of XSD type 'xsd:boolean'
        bool *ValveFloat;
        /// Optional element 'witsml2:SourceNuclear' of XSD type 'xsd:boolean'
        bool *SourceNuclear;
        /// Optional element 'witsml2:DiaHoleAssy' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaHoleAssy;
        /// Optional element 'witsml2:TubularComponent' of XSD type 'witsml2:TubularComponent'
        std::vector<witsml2__TubularComponent *> TubularComponent;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Tubular
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Tubular; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Tubular, default initialized and not managed by a soap context
        virtual witsml2__Tubular *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Tubular); }
      public:
        /// Constructor with initializations
        witsml2__Tubular() : TypeTubularAssy(), ValveFloat(), SourceNuclear(), DiaHoleAssy(), TubularComponent(), Wellbore() { }
        virtual ~witsml2__Tubular() { }
        /// Friend allocator used by soap_new_witsml2__Tubular(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Tubular * SOAP_FMAC2 soap_instantiate_witsml2__Tubular(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:416 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementDesignStage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementDesignStage (-76)
/* Type witsml2__CementDesignStage is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementDesignStage': */
class SOAP_CMAC witsml2__CementDesignStage : public witsml2__AbstractCementStage {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementDesignStage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementDesignStage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementDesignStage, default initialized and not managed by a soap context
        virtual witsml2__CementDesignStage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementDesignStage); }
      public:
        /// Constructor with initializations
        witsml2__CementDesignStage() { }
        virtual ~witsml2__CementDesignStage() { }
        /// Friend allocator used by soap_new_witsml2__CementDesignStage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementDesignStage * SOAP_FMAC2 soap_instantiate_witsml2__CementDesignStage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:422 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJob (-78)
/* Type witsml2__CementJob is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementJob': */
class SOAP_CMAC witsml2__CementJob : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:JobType' of XSD type 'witsml2:CementJobType'
        enum witsml2__CementJobType *JobType;
        /// Optional element 'witsml2:JobConfig' of XSD type 'eml22:String2000'
        std::string *JobConfig;
        /// Optional element 'witsml2:NameCementedString' of XSD type 'eml22:String64'
        std::string *NameCementedString;
        /// Optional element 'witsml2:NameWorkString' of XSD type 'eml22:String64'
        std::string *NameWorkString;
        /// Optional element 'witsml2:OffshoreJob' of XSD type 'xsd:boolean'
        bool *OffshoreJob;
        /// Optional element 'witsml2:MdWater' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdWater;
        /// Optional element 'witsml2:ReturnsToSeabed' of XSD type 'xsd:boolean'
        bool *ReturnsToSeabed;
        /// Optional element 'witsml2:MdPrevShoe' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdPrevShoe;
        /// Optional element 'witsml2:MdHole' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHole;
        /// Optional element 'witsml2:TvdPrevShoe' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdPrevShoe;
        /// Optional element 'witsml2:MdStringSet' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdStringSet;
        /// Optional element 'witsml2:TvdStringSet' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdStringSet;
        /// Optional element 'witsml2:TypePlug' of XSD type 'eml22:String64'
        std::string *TypePlug;
        /// Optional element 'witsml2:NameCementString' of XSD type 'eml22:String64'
        std::string *NameCementString;
        /// Optional element 'witsml2:TypeSqueeze' of XSD type 'eml22:String64'
        std::string *TypeSqueeze;
        /// Optional element 'witsml2:MdSqueeze' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdSqueeze;
        /// Optional element 'witsml2:ToolCompany' of XSD type 'eml22:String64'
        std::string *ToolCompany;
        /// Optional element 'witsml2:TypeTool' of XSD type 'eml22:String64'
        std::string *TypeTool;
        /// Optional element 'witsml2:CoilTubing' of XSD type 'xsd:boolean'
        bool *CoilTubing;
        /// Optional element 'witsml2:JobReport' of XSD type 'witsml2:CementJobReport'
        witsml2__CementJobReport *JobReport;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:HoleConfig' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *HoleConfig;
        /// Optional element 'witsml2:Design' of XSD type 'witsml2:CementJobDesign'
        witsml2__CementJobDesign *Design;
        /// Optional element 'witsml2:CementingFluid' of XSD type 'witsml2:CementingFluid'
        std::vector<witsml2__CementingFluid *> CementingFluid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementJob
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementJob; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJob, default initialized and not managed by a soap context
        virtual witsml2__CementJob *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJob); }
      public:
        /// Constructor with initializations
        witsml2__CementJob() : JobType(), JobConfig(), NameCementedString(), NameWorkString(), OffshoreJob(), MdWater(), ReturnsToSeabed(), MdPrevShoe(), MdHole(), TvdPrevShoe(), MdStringSet(), TvdStringSet(), TypePlug(), NameCementString(), TypeSqueeze(), MdSqueeze(), ToolCompany(), TypeTool(), CoilTubing(), JobReport(), Wellbore(), HoleConfig(), Design(), CementingFluid() { }
        virtual ~witsml2__CementJob() { }
        /// Friend allocator used by soap_new_witsml2__CementJob(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJob * SOAP_FMAC2 soap_instantiate_witsml2__CementJob(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:425 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobDesign
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobDesign (-79)
/* Type witsml2__CementJobDesign is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementJobDesign': */
class SOAP_CMAC witsml2__CementJobDesign : public witsml2__AbstractCementJob {
      public:
        /// Required element 'witsml2:CementDesignStage' of XSD type 'witsml2:CementStageDesign'
        std::vector<witsml2__CementStageDesign *> CementDesignStage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobDesign
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobDesign; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJobDesign, default initialized and not managed by a soap context
        virtual witsml2__CementJobDesign *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJobDesign); }
      public:
        /// Constructor with initializations
        witsml2__CementJobDesign() : CementDesignStage() { }
        virtual ~witsml2__CementJobDesign() { }
        /// Friend allocator used by soap_new_witsml2__CementJobDesign(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJobDesign * SOAP_FMAC2 soap_instantiate_witsml2__CementJobDesign(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:428 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobEvaluation (-80)
/* Type witsml2__CementJobEvaluation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementJobEvaluation': */
class SOAP_CMAC witsml2__CementJobEvaluation : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:PresTest' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresTest;
        /// Optional element 'witsml2:ETimTest' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimTest;
        /// Optional element 'witsml2:CementShoeCollar' of XSD type 'xsd:boolean'
        bool *CementShoeCollar;
        /// Optional element 'witsml2:CetRun' of XSD type 'xsd:boolean'
        bool *CetRun;
        /// Optional element 'witsml2:CetBondQual' of XSD type 'xsd:boolean'
        bool *CetBondQual;
        /// Optional element 'witsml2:CblRun' of XSD type 'xsd:boolean'
        bool *CblRun;
        /// Optional element 'witsml2:CblBondQual' of XSD type 'xsd:boolean'
        bool *CblBondQual;
        /// Optional element 'witsml2:CblPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *CblPres;
        /// Optional element 'witsml2:TempSurvey' of XSD type 'xsd:boolean'
        bool *TempSurvey;
        /// Optional element 'witsml2:ETimCementLog' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimCementLog;
        /// Optional element 'witsml2:FormPit' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FormPit;
        /// Optional element 'witsml2:ToolCompanyPit' of XSD type 'eml22:String64'
        std::string *ToolCompanyPit;
        /// Optional element 'witsml2:ETimPitStart' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimPitStart;
        /// Optional element 'witsml2:MdCementTop' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdCementTop;
        /// Optional element 'witsml2:TopCementMethod' of XSD type 'eml22:String64'
        std::string *TopCementMethod;
        /// Optional element 'witsml2:TocOK' of XSD type 'xsd:boolean'
        bool *TocOK;
        /// Optional element 'witsml2:JobRating' of XSD type 'eml22:String64'
        std::string *JobRating;
        /// Optional element 'witsml2:RemedialCement' of XSD type 'xsd:boolean'
        bool *RemedialCement;
        /// Optional element 'witsml2:NumRemedial' of XSD type 'xsd:int'
        int *NumRemedial;
        /// Optional element 'witsml2:FailureMethod' of XSD type 'eml22:String64'
        std::string *FailureMethod;
        /// Optional element 'witsml2:LinerTop' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LinerTop;
        /// Optional element 'witsml2:LinerLap' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *LinerLap;
        /// Optional element 'witsml2:ETimBeforeTest' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimBeforeTest;
        /// Optional element 'witsml2:TestNegativeTool' of XSD type 'eml22:String64'
        std::string *TestNegativeTool;
        /// Optional element 'witsml2:TestNegativeEmw' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *TestNegativeEmw;
        /// Optional element 'witsml2:TestPositiveTool' of XSD type 'eml22:String64'
        std::string *TestPositiveTool;
        /// Optional element 'witsml2:TestPositiveEmw' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *TestPositiveEmw;
        /// Optional element 'witsml2:CementFoundOnTool' of XSD type 'xsd:boolean'
        bool *CementFoundOnTool;
        /// Optional element 'witsml2:MdDVTool' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdDVTool;
        /// Required element 'witsml2:CementJob' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CementJob;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobEvaluation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobEvaluation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJobEvaluation, default initialized and not managed by a soap context
        virtual witsml2__CementJobEvaluation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJobEvaluation); }
      public:
        /// Constructor with initializations
        witsml2__CementJobEvaluation() : PresTest(), ETimTest(), CementShoeCollar(), CetRun(), CetBondQual(), CblRun(), CblBondQual(), CblPres(), TempSurvey(), ETimCementLog(), FormPit(), ToolCompanyPit(), ETimPitStart(), MdCementTop(), TopCementMethod(), TocOK(), JobRating(), RemedialCement(), NumRemedial(), FailureMethod(), LinerTop(), LinerLap(), ETimBeforeTest(), TestNegativeTool(), TestNegativeEmw(), TestPositiveTool(), TestPositiveEmw(), CementFoundOnTool(), MdDVTool(), CementJob() { }
        virtual ~witsml2__CementJobEvaluation() { }
        /// Friend allocator used by soap_new_witsml2__CementJobEvaluation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJobEvaluation * SOAP_FMAC2 soap_instantiate_witsml2__CementJobEvaluation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:431 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobReport (-81)
/* Type witsml2__CementJobReport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementJobReport': */
class SOAP_CMAC witsml2__CementJobReport : public witsml2__AbstractCementJob {
      public:
        /// Optional element 'witsml2:DTimJobEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimJobEnd;
        /// Optional element 'witsml2:DTimJobStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimJobStart;
        /// Optional element 'witsml2:DTimPlugSet' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPlugSet;
        /// Optional element 'witsml2:CementDrillOut' of XSD type 'xsd:boolean'
        bool *CementDrillOut;
        /// Optional element 'witsml2:DTimCementDrillOut' of XSD type 'eml22:TimeStamp'
        struct tm *DTimCementDrillOut;
        /// Optional element 'witsml2:DTimSqueeze' of XSD type 'eml22:TimeStamp'
        struct tm *DTimSqueeze;
        /// Optional element 'witsml2:DTimPipeRotStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPipeRotStart;
        /// Optional element 'witsml2:DTimPipeRotEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPipeRotEnd;
        /// Optional element 'witsml2:DTimRecipStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRecipStart;
        /// Optional element 'witsml2:DTimRecipEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimRecipEnd;
        /// Optional element 'witsml2:DensMeasBy' of XSD type 'eml22:String64'
        std::string *DensMeasBy;
        /// Required element 'witsml2:CementReportStage' of XSD type 'witsml2:CementStageReport'
        std::vector<witsml2__CementStageReport *> CementReportStage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementJobReport, default initialized and not managed by a soap context
        virtual witsml2__CementJobReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementJobReport); }
      public:
        /// Constructor with initializations
        witsml2__CementJobReport() : DTimJobEnd(), DTimJobStart(), DTimPlugSet(), CementDrillOut(), DTimCementDrillOut(), DTimSqueeze(), DTimPipeRotStart(), DTimPipeRotEnd(), DTimRecipStart(), DTimRecipEnd(), DensMeasBy(), CementReportStage() { }
        virtual ~witsml2__CementJobReport() { }
        /// Friend allocator used by soap_new_witsml2__CementJobReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementJobReport * SOAP_FMAC2 soap_instantiate_witsml2__CementJobReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:437 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageDesign (-83)
/* Type witsml2__CementStageDesign is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementStageDesign': */
class SOAP_CMAC witsml2__CementStageDesign : public witsml2__AbstractCementStage {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageDesign
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageDesign; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementStageDesign, default initialized and not managed by a soap context
        virtual witsml2__CementStageDesign *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementStageDesign); }
      public:
        /// Constructor with initializations
        witsml2__CementStageDesign() { }
        virtual ~witsml2__CementStageDesign() { }
        /// Friend allocator used by soap_new_witsml2__CementStageDesign(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementStageDesign * SOAP_FMAC2 soap_instantiate_witsml2__CementStageDesign(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:440 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageReport (-84)
/* Type witsml2__CementStageReport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementStageReport': */
class SOAP_CMAC witsml2__CementStageReport : public witsml2__AbstractCementStage {
      public:
        /// Optional element 'witsml2:DTimMixStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimMixStart;
        /// Optional element 'witsml2:DTimPumpStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPumpStart;
        /// Optional element 'witsml2:DTimPumpEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimPumpEnd;
        /// Optional element 'witsml2:DTimDisplaceStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimDisplaceStart;
        /// Optional element 'witsml2:PresBreakDown' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresBreakDown;
        /// Optional element 'witsml2:FlowrateBreakDown' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateBreakDown;
        /// Optional element 'witsml2:FlowrateDisplaceAv' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateDisplaceAv;
        /// Optional element 'witsml2:FlowrateDisplaceMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateDisplaceMx;
        /// Optional element 'witsml2:PresSqueezeAv' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresSqueezeAv;
        /// Optional element 'witsml2:PresSqueezeEnd' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresSqueezeEnd;
        /// Optional element 'witsml2:PresSqueezeHeld' of XSD type 'xsd:boolean'
        bool *PresSqueezeHeld;
        /// Optional element 'witsml2:ETimMudCirculation' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimMudCirculation;
        /// Optional element 'witsml2:PresSqueeze' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresSqueeze;
        /// Optional element 'witsml2:FlowrateSqueezeAv' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateSqueezeAv;
        /// Optional element 'witsml2:FlowrateSqueezeMx' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateSqueezeMx;
        /// Optional element 'witsml2:FlowrateEnd' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateEnd;
        /// Optional element 'witsml2:FlowratePumpStart' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowratePumpStart;
        /// Optional element 'witsml2:FlowratePumpEnd' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowratePumpEnd;
        /// Optional element 'witsml2:VisFunnelMud' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *VisFunnelMud;
        /// Optional element 'witsml2:PlugBumped' of XSD type 'xsd:boolean'
        bool *PlugBumped;
        /// Optional element 'witsml2:SqueezeObtained' of XSD type 'xsd:boolean'
        bool *SqueezeObtained;
        /// Optional element 'witsml2:PresPriorBump' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresPriorBump;
        /// Optional element 'witsml2:FloatHeld' of XSD type 'xsd:boolean'
        bool *FloatHeld;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementStageReport, default initialized and not managed by a soap context
        virtual witsml2__CementStageReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementStageReport); }
      public:
        /// Constructor with initializations
        witsml2__CementStageReport() : DTimMixStart(), DTimPumpStart(), DTimPumpEnd(), DTimDisplaceStart(), PresBreakDown(), FlowrateBreakDown(), FlowrateDisplaceAv(), FlowrateDisplaceMx(), PresSqueezeAv(), PresSqueezeEnd(), PresSqueezeHeld(), ETimMudCirculation(), PresSqueeze(), FlowrateSqueezeAv(), FlowrateSqueezeMx(), FlowrateEnd(), FlowratePumpStart(), FlowratePumpEnd(), VisFunnelMud(), PlugBumped(), SqueezeObtained(), PresPriorBump(), FloatHeld(), uid() { }
        virtual ~witsml2__CementStageReport() { }
        /// Friend allocator used by soap_new_witsml2__CementStageReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementStageReport * SOAP_FMAC2 soap_instantiate_witsml2__CementStageReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:446 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometry (-86)
/* Type witsml2__WellboreGeometry is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellboreGeometry': */
class SOAP_CMAC witsml2__WellboreGeometry : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:MdBase' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBase;
        /// Optional element 'witsml2:GapAir' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *GapAir;
        /// Optional element 'witsml2:DepthWaterMean' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DepthWaterMean;
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:WellboreGeometrySection' of XSD type 'witsml2:WellboreGeometrySection'
        std::vector<witsml2__WellboreGeometrySection *> WellboreGeometrySection;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:BhaRun' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> BhaRun;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreGeometry, default initialized and not managed by a soap context
        virtual witsml2__WellboreGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreGeometry); }
      public:
        /// Constructor with initializations
        witsml2__WellboreGeometry() : MdBase(), GapAir(), DepthWaterMean(), GrowingStatus(), WellboreGeometrySection(), Wellbore(), BhaRun() { }
        virtual ~witsml2__WellboreGeometry() { }
        /// Friend allocator used by soap_new_witsml2__WellboreGeometry(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreGeometry * SOAP_FMAC2 soap_instantiate_witsml2__WellboreGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:458 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Channel (-90)
/* Type witsml2__Channel is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Channel': */
class SOAP_CMAC witsml2__Channel : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:Mnemonic' of XSD type 'eml22:String64'
        std::string Mnemonic;
        /// Required element 'witsml2:DataType' of XSD type 'witsml2:EtpDataType'
        enum witsml2__EtpDataType DataType;
        /// Required element 'witsml2:Uom' of XSD type 'eml22:UnitOfMeasureExt'
        std::string Uom;
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:Source' of XSD type 'eml22:String64'
        std::string *Source;
        /// Optional element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:AxisDefinition' of XSD type 'witsml2:LogChannelAxis'
        std::vector<witsml2__LogChannelAxis *> AxisDefinition;
        /// Optional element 'witsml2:ChannelState' of XSD type 'witsml2:ChannelState'
        enum witsml2__ChannelState *ChannelState;
        /// Required element 'witsml2:TimeDepth' of XSD type 'eml22:String64'
        std::string TimeDepth;
        /// Required element 'witsml2:ChannelClass' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ChannelClass;
        /// Optional element 'witsml2:RunNumber' of XSD type 'eml22:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:PassNumber' of XSD type 'eml22:String64'
        std::string *PassNumber;
        /// Optional element 'witsml2:StartIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml2:EndIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
        /// Required element 'witsml2:LoggingCompanyName' of XSD type 'eml22:String64'
        std::string LoggingCompanyName;
        /// Optional element 'witsml2:LoggingCompanyCode' of XSD type 'eml22:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml2:ToolName' of XSD type 'eml22:String64'
        std::string *ToolName;
        /// Optional element 'witsml2:ToolClass' of XSD type 'eml22:String64'
        std::string *ToolClass;
        /// Optional element 'witsml2:Derivation' of XSD type 'witsml2:ChannelDerivation'
        enum witsml2__ChannelDerivation *Derivation;
        /// Optional element 'witsml2:LoggingMethod' of XSD type 'witsml2:LoggingMethod'
        enum witsml2__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml2:NominalHoleSize' of XSD type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *NominalHoleSize;
        /// Optional element 'witsml2:PointMetadata' of XSD type 'witsml2:PointMetadata'
        std::vector<witsml2__PointMetadata *> PointMetadata;
        /// Optional element 'witsml2:DerivedFrom' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> DerivedFrom;
        /// Required element 'witsml2:Index' of XSD type 'witsml2:ChannelIndex'
        std::vector<witsml2__ChannelIndex *> Index;
        /// Optional element 'witsml2:Parent' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Channel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Channel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Channel, default initialized and not managed by a soap context
        virtual witsml2__Channel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Channel); }
      public:
        /// Constructor with initializations
        witsml2__Channel() : Mnemonic(), DataType(), Uom(), GrowingStatus(), Source(), Wellbore(), AxisDefinition(), ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), PointMetadata(), DerivedFrom(), Index(), Parent() { }
        virtual ~witsml2__Channel() { }
        /// Friend allocator used by soap_new_witsml2__Channel(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Channel * SOAP_FMAC2 soap_instantiate_witsml2__Channel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:467 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelSet (-93)
/* Type witsml2__ChannelSet is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ChannelSet': */
class SOAP_CMAC witsml2__ChannelSet : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:Index' of XSD type 'witsml2:ChannelIndex'
        std::vector<witsml2__ChannelIndex *> Index;
        /// Required element 'witsml2:Channel' of XSD type 'witsml2:Channel'
        std::vector<witsml2__Channel *> Channel;
        /// Optional element 'witsml2:Data' of XSD type 'witsml2:ChannelData'
        witsml2__ChannelData *Data;
        /// Optional element 'witsml2:ChannelState' of XSD type 'witsml2:ChannelState'
        enum witsml2__ChannelState *ChannelState;
        /// Optional element 'witsml2:TimeDepth' of XSD type 'eml22:String64'
        std::string *TimeDepth;
        /// Optional element 'witsml2:ChannelClass' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ChannelClass;
        /// Optional element 'witsml2:RunNumber' of XSD type 'eml22:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:PassNumber' of XSD type 'eml22:String64'
        std::string *PassNumber;
        /// Optional element 'witsml2:StartIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml2:EndIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
        /// Optional element 'witsml2:LoggingCompanyName' of XSD type 'eml22:String64'
        std::string *LoggingCompanyName;
        /// Optional element 'witsml2:LoggingCompanyCode' of XSD type 'eml22:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml2:ToolName' of XSD type 'eml22:String64'
        std::string *ToolName;
        /// Optional element 'witsml2:ToolClass' of XSD type 'eml22:String64'
        std::string *ToolClass;
        /// Optional element 'witsml2:Derivation' of XSD type 'witsml2:ChannelDerivation'
        enum witsml2__ChannelDerivation *Derivation;
        /// Optional element 'witsml2:LoggingMethod' of XSD type 'witsml2:LoggingMethod'
        enum witsml2__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml2:NominalHoleSize' of XSD type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *NominalHoleSize;
        /// Optional element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:DataContext' of XSD type 'witsml2:AbstractLogDataContext'
        witsml2__AbstractLogDataContext *DataContext;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelSet, default initialized and not managed by a soap context
        virtual witsml2__ChannelSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelSet); }
      public:
        /// Constructor with initializations
        witsml2__ChannelSet() : Index(), Channel(), Data(), ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), Wellbore(), DataContext() { }
        virtual ~witsml2__ChannelSet() { }
        /// Friend allocator used by soap_new_witsml2__ChannelSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelSet * SOAP_FMAC2 soap_instantiate_witsml2__ChannelSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:470 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelValueContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelValueContext (-94)
/* Type witsml2__ChannelValueContext is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ChannelValueContext': */
class SOAP_CMAC witsml2__ChannelValueContext : public witsml2__AbstractLogDataContext {
      public:
        /// Required element 'witsml2:ChannelReference' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ChannelReference;
        /// Required element 'witsml2:DataValue' of XSD type 'xsd:string'
        std::string DataValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelValueContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelValueContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ChannelValueContext, default initialized and not managed by a soap context
        virtual witsml2__ChannelValueContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ChannelValueContext); }
      public:
        /// Constructor with initializations
        witsml2__ChannelValueContext() : ChannelReference(), DataValue() { }
        virtual ~witsml2__ChannelValueContext() { }
        /// Friend allocator used by soap_new_witsml2__ChannelValueContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ChannelValueContext * SOAP_FMAC2 soap_instantiate_witsml2__ChannelValueContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:473 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthIndexValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthIndexValue (-95)
/* Type witsml2__DepthIndexValue is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DepthIndexValue': */
class SOAP_CMAC witsml2__DepthIndexValue : public witsml2__AbstractIndexValue {
      public:
        /// Required element 'witsml2:Depth' of XSD type 'xsd:float'
        float Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthIndexValue, default initialized and not managed by a soap context
        virtual witsml2__DepthIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthIndexValue); }
      public:
        /// Constructor with initializations
        witsml2__DepthIndexValue() : Depth() { }
        virtual ~witsml2__DepthIndexValue() { }
        /// Friend allocator used by soap_new_witsml2__DepthIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthIndexValue * SOAP_FMAC2 soap_instantiate_witsml2__DepthIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:476 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IndexRangeContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IndexRangeContext (-96)
/* Type witsml2__IndexRangeContext is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:IndexRangeContext': */
class SOAP_CMAC witsml2__IndexRangeContext : public witsml2__AbstractLogDataContext {
      public:
        /// Required element 'witsml2:StartIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Required element 'witsml2:EndIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__IndexRangeContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__IndexRangeContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__IndexRangeContext, default initialized and not managed by a soap context
        virtual witsml2__IndexRangeContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__IndexRangeContext); }
      public:
        /// Constructor with initializations
        witsml2__IndexRangeContext() : StartIndex(), EndIndex() { }
        virtual ~witsml2__IndexRangeContext() { }
        /// Friend allocator used by soap_new_witsml2__IndexRangeContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__IndexRangeContext * SOAP_FMAC2 soap_instantiate_witsml2__IndexRangeContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:479 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Log
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Log (-97)
/* Type witsml2__Log is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Log': */
class SOAP_CMAC witsml2__Log : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:ChannelState' of XSD type 'witsml2:ChannelState'
        enum witsml2__ChannelState *ChannelState;
        /// Optional element 'witsml2:TimeDepth' of XSD type 'eml22:String64'
        std::string *TimeDepth;
        /// Optional element 'witsml2:ChannelClass' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ChannelClass;
        /// Optional element 'witsml2:RunNumber' of XSD type 'eml22:String64'
        std::string *RunNumber;
        /// Optional element 'witsml2:PassNumber' of XSD type 'eml22:String64'
        std::string *PassNumber;
        /// Optional element 'witsml2:StartIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *StartIndex;
        /// Optional element 'witsml2:EndIndex' of XSD type 'witsml2:AbstractIndexValue'
        witsml2__AbstractIndexValue *EndIndex;
        /// Optional element 'witsml2:LoggingCompanyName' of XSD type 'eml22:String64'
        std::string *LoggingCompanyName;
        /// Optional element 'witsml2:LoggingCompanyCode' of XSD type 'eml22:String64'
        std::string *LoggingCompanyCode;
        /// Optional element 'witsml2:ToolName' of XSD type 'eml22:String64'
        std::string *ToolName;
        /// Optional element 'witsml2:ToolClass' of XSD type 'eml22:String64'
        std::string *ToolClass;
        /// Optional element 'witsml2:Derivation' of XSD type 'witsml2:ChannelDerivation'
        enum witsml2__ChannelDerivation *Derivation;
        /// Optional element 'witsml2:LoggingMethod' of XSD type 'witsml2:LoggingMethod'
        enum witsml2__LoggingMethod *LoggingMethod;
        /// Optional element 'witsml2:NominalHoleSize' of XSD type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *NominalHoleSize;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Required element 'witsml2:ChannelSet' of XSD type 'witsml2:ChannelSet'
        std::vector<witsml2__ChannelSet *> ChannelSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Log
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Log; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Log, default initialized and not managed by a soap context
        virtual witsml2__Log *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Log); }
      public:
        /// Constructor with initializations
        witsml2__Log() : ChannelState(), TimeDepth(), ChannelClass(), RunNumber(), PassNumber(), StartIndex(), EndIndex(), LoggingCompanyName(), LoggingCompanyCode(), ToolName(), ToolClass(), Derivation(), LoggingMethod(), NominalHoleSize(), Wellbore(), ChannelSet() { }
        virtual ~witsml2__Log() { }
        /// Friend allocator used by soap_new_witsml2__Log(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Log * SOAP_FMAC2 soap_instantiate_witsml2__Log(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:485 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectContext (-99)
/* Type witsml2__ObjectContext is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ObjectContext': */
class SOAP_CMAC witsml2__ObjectContext : public witsml2__AbstractLogDataContext {
      public:
        /// Required element 'witsml2:ObjectReference' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ObjectReference;
        /// Required element 'witsml2:SubObjectReference' of XSD type 'eml22:String64'
        std::string SubObjectReference;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectContext
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectContext; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ObjectContext, default initialized and not managed by a soap context
        virtual witsml2__ObjectContext *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ObjectContext); }
      public:
        /// Constructor with initializations
        witsml2__ObjectContext() : ObjectReference(), SubObjectReference() { }
        virtual ~witsml2__ObjectContext() { }
        /// Friend allocator used by soap_new_witsml2__ObjectContext(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ObjectContext * SOAP_FMAC2 soap_instantiate_witsml2__ObjectContext(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:488 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PassIndexedDepth
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PassIndexedDepth (-100)
/* Type witsml2__PassIndexedDepth is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:PassIndexedDepth': */
class SOAP_CMAC witsml2__PassIndexedDepth : public witsml2__AbstractIndexValue {
      public:
        /// Required element 'witsml2:Pass' of XSD type 'xsd:int'
        int Pass;
        /// Required element 'witsml2:Direction' of XSD type 'xsd:int'
        int Direction;
        /// Required element 'witsml2:Depth' of XSD type 'xsd:float'
        float Depth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PassIndexedDepth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PassIndexedDepth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PassIndexedDepth, default initialized and not managed by a soap context
        virtual witsml2__PassIndexedDepth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PassIndexedDepth); }
      public:
        /// Constructor with initializations
        witsml2__PassIndexedDepth() : Pass(), Direction(), Depth() { }
        virtual ~witsml2__PassIndexedDepth() { }
        /// Friend allocator used by soap_new_witsml2__PassIndexedDepth(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PassIndexedDepth * SOAP_FMAC2 soap_instantiate_witsml2__PassIndexedDepth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:494 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TimeIndexValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TimeIndexValue (-102)
/* Type witsml2__TimeIndexValue is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:TimeIndexValue': */
class SOAP_CMAC witsml2__TimeIndexValue : public witsml2__AbstractIndexValue {
      public:
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm Time;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TimeIndexValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TimeIndexValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TimeIndexValue, default initialized and not managed by a soap context
        virtual witsml2__TimeIndexValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TimeIndexValue); }
      public:
        /// Constructor with initializations
        witsml2__TimeIndexValue() : Time() { }
        virtual ~witsml2__TimeIndexValue() { }
        /// Friend allocator used by soap_new_witsml2__TimeIndexValue(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TimeIndexValue * SOAP_FMAC2 soap_instantiate_witsml2__TimeIndexValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:500 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegImage (-104)
/* Type witsml2__DepthRegImage is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DepthRegImage': */
class SOAP_CMAC witsml2__DepthRegImage : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:FileNameType' of XSD type 'witsml2:FileNameType'
        enum witsml2__FileNameType *FileNameType;
        /// Optional element 'witsml2:Mimetype' of XSD type 'witsml2:MimeType'
        enum witsml2__MimeType *Mimetype;
        /// Required element 'witsml2:FileName' of XSD type 'eml22:String64'
        std::string FileName;
        /// Optional element 'witsml2:FileSize' of XSD type 'eml22:DigitalStorageMeasure'
        eml22__DigitalStorageMeasure *FileSize;
        /// Optional element 'witsml2:Checksum' of XSD type 'witsml2:MessageDigestType'
        enum witsml2__MessageDigestType *Checksum;
        /// Optional element 'witsml2:ImagePixelWidth' of XSD type 'xsd:unsignedLong'
        ULONG64 *ImagePixelWidth;
        /// Optional element 'witsml2:ImagePixelHeight' of XSD type 'xsd:unsignedLong'
        ULONG64 *ImagePixelHeight;
        /// Optional element 'witsml2:Version' of XSD type 'eml22:String64'
        std::string *Version;
        /// Required element 'witsml2:ImageBoundary' of XSD type 'witsml2:DepthRegRectangle'
        witsml2__DepthRegRectangle *ImageBoundary;
        /// Optional element 'witsml2:HeaderSection' of XSD type 'witsml2:DepthRegLogRect'
        witsml2__DepthRegLogRect *HeaderSection;
        /// Optional element 'witsml2:LogSection' of XSD type 'witsml2:DepthRegLogSection'
        std::vector<witsml2__DepthRegLogSection *> LogSection;
        /// Optional element 'witsml2:AlternateSection' of XSD type 'witsml2:DepthRegLogRect'
        std::vector<witsml2__DepthRegLogRect *> AlternateSection;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegImage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegImage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DepthRegImage, default initialized and not managed by a soap context
        virtual witsml2__DepthRegImage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DepthRegImage); }
      public:
        /// Constructor with initializations
        witsml2__DepthRegImage() : FileNameType(), Mimetype(), FileName(), FileSize(), Checksum(), ImagePixelWidth(), ImagePixelHeight(), Version(), ImageBoundary(), HeaderSection(), LogSection(), AlternateSection(), Wellbore(), uid() { }
        virtual ~witsml2__DepthRegImage() { }
        /// Friend allocator used by soap_new_witsml2__DepthRegImage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DepthRegImage * SOAP_FMAC2 soap_instantiate_witsml2__DepthRegImage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:527 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AcidizefracExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AcidizefracExtension (-113)
/* Type witsml2__AcidizefracExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AcidizefracExtension': */
class SOAP_CMAC witsml2__AcidizefracExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:StimJobID' of XSD type 'eml22:String64'
        std::string *StimJobID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AcidizefracExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AcidizefracExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AcidizefracExtension, default initialized and not managed by a soap context
        virtual witsml2__AcidizefracExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AcidizefracExtension); }
      public:
        /// Constructor with initializations
        witsml2__AcidizefracExtension() : StimJobID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__AcidizefracExtension() { }
        /// Friend allocator used by soap_new_witsml2__AcidizefracExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AcidizefracExtension * SOAP_FMAC2 soap_instantiate_witsml2__AcidizefracExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:530 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BHPExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BHPExtension (-114)
/* Type witsml2__BHPExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:BHPExtension': */
class SOAP_CMAC witsml2__BHPExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:BHPRefID' of XSD type 'eml22:String64'
        std::string *BHPRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__BHPExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__BHPExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__BHPExtension, default initialized and not managed by a soap context
        virtual witsml2__BHPExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__BHPExtension); }
      public:
        /// Constructor with initializations
        witsml2__BHPExtension() : BHPRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__BHPExtension() { }
        /// Friend allocator used by soap_new_witsml2__BHPExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__BHPExtension * SOAP_FMAC2 soap_instantiate_witsml2__BHPExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:536 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementExtension (-116)
/* Type witsml2__CementExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CementExtension': */
class SOAP_CMAC witsml2__CementExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:CementJobRefID' of XSD type 'eml22:String64'
        std::string *CementJobRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CementExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CementExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CementExtension, default initialized and not managed by a soap context
        virtual witsml2__CementExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CementExtension); }
      public:
        /// Constructor with initializations
        witsml2__CementExtension() : CementJobRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__CementExtension() { }
        /// Friend allocator used by soap_new_witsml2__CementExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CementExtension * SOAP_FMAC2 soap_instantiate_witsml2__CementExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:539 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CleanFillExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CleanFillExtension (-117)
/* Type witsml2__CleanFillExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CleanFillExtension': */
class SOAP_CMAC witsml2__CleanFillExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:FillCleaningMethod' of XSD type 'eml22:String64'
        std::string *FillCleaningMethod;
        /// Optional element 'witsml2:ToolSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ToolSize;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CleanFillExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CleanFillExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CleanFillExtension, default initialized and not managed by a soap context
        virtual witsml2__CleanFillExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CleanFillExtension); }
      public:
        /// Constructor with initializations
        witsml2__CleanFillExtension() : FillCleaningMethod(), ToolSize(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__CleanFillExtension() { }
        /// Friend allocator used by soap_new_witsml2__CleanFillExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CleanFillExtension * SOAP_FMAC2 soap_instantiate_witsml2__CleanFillExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:542 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DirectionalSurveyExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DirectionalSurveyExtension (-118)
/* Type witsml2__DirectionalSurveyExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DirectionalSurveyExtension': */
class SOAP_CMAC witsml2__DirectionalSurveyExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:TrajectoryRefID' of XSD type 'eml22:String64'
        std::string *TrajectoryRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DirectionalSurveyExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DirectionalSurveyExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DirectionalSurveyExtension, default initialized and not managed by a soap context
        virtual witsml2__DirectionalSurveyExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DirectionalSurveyExtension); }
      public:
        /// Constructor with initializations
        witsml2__DirectionalSurveyExtension() : TrajectoryRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__DirectionalSurveyExtension() { }
        /// Friend allocator used by soap_new_witsml2__DirectionalSurveyExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DirectionalSurveyExtension * SOAP_FMAC2 soap_instantiate_witsml2__DirectionalSurveyExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:548 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeExtension (-120)
/* Type witsml2__DownholeExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DownholeExtension': */
class SOAP_CMAC witsml2__DownholeExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:DownholeComponentRefID' of XSD type 'eml22:String64'
        std::string *DownholeComponentRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeExtension, default initialized and not managed by a soap context
        virtual witsml2__DownholeExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeExtension); }
      public:
        /// Constructor with initializations
        witsml2__DownholeExtension() : DownholeComponentRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__DownholeExtension() { }
        /// Friend allocator used by soap_new_witsml2__DownholeExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeExtension * SOAP_FMAC2 soap_instantiate_witsml2__DownholeExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:557 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FluidReportExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FluidReportExtension (-123)
/* Type witsml2__FluidReportExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:FluidReportExtension': */
class SOAP_CMAC witsml2__FluidReportExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:FluidReportRefID' of XSD type 'eml22:String64'
        std::string *FluidReportRefID;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__FluidReportExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__FluidReportExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__FluidReportExtension, default initialized and not managed by a soap context
        virtual witsml2__FluidReportExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__FluidReportExtension); }
      public:
        /// Constructor with initializations
        witsml2__FluidReportExtension() : FluidReportRefID(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__FluidReportExtension() { }
        /// Friend allocator used by soap_new_witsml2__FluidReportExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__FluidReportExtension * SOAP_FMAC2 soap_instantiate_witsml2__FluidReportExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:560 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__JobExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__JobExtension (-124)
/* Type witsml2__JobExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:JobExtension': */
class SOAP_CMAC witsml2__JobExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:JobReason' of XSD type 'eml22:String2000'
        std::string *JobReason;
        /// Optional element 'witsml2:JobStatus' of XSD type 'eml22:String64'
        std::string *JobStatus;
        /// Optional element 'witsml2:PrimaryMotivationForJob' of XSD type 'eml22:String64'
        std::string *PrimaryMotivationForJob;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__JobExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__JobExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__JobExtension, default initialized and not managed by a soap context
        virtual witsml2__JobExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__JobExtension); }
      public:
        /// Constructor with initializations
        witsml2__JobExtension() : JobReason(), JobStatus(), PrimaryMotivationForJob(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__JobExtension() { }
        /// Friend allocator used by soap_new_witsml2__JobExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__JobExtension * SOAP_FMAC2 soap_instantiate_witsml2__JobExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:563 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LostCirculationExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LostCirculationExtension (-125)
/* Type witsml2__LostCirculationExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:LostCirculationExtension': */
class SOAP_CMAC witsml2__LostCirculationExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:VolumeLost' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumeLost;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__LostCirculationExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__LostCirculationExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LostCirculationExtension, default initialized and not managed by a soap context
        virtual witsml2__LostCirculationExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LostCirculationExtension); }
      public:
        /// Constructor with initializations
        witsml2__LostCirculationExtension() : VolumeLost(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__LostCirculationExtension() { }
        /// Friend allocator used by soap_new_witsml2__LostCirculationExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LostCirculationExtension * SOAP_FMAC2 soap_instantiate_witsml2__LostCirculationExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:575 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforatingExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforatingExtension (-129)
/* Type witsml2__PerforatingExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:PerforatingExtension': */
class SOAP_CMAC witsml2__PerforatingExtension : public witsml2__AbstractEventExtension {
      public:
        /// Required element 'witsml2:PerforationSetRefID' of XSD type 'eml22:String64'
        std::string PerforationSetRefID;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
        /// Optional element 'witsml2:Perforating' of XSD type 'witsml2:Perforating'
        std::vector<witsml2__Perforating *> Perforating;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PerforatingExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PerforatingExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PerforatingExtension, default initialized and not managed by a soap context
        virtual witsml2__PerforatingExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PerforatingExtension); }
      public:
        /// Constructor with initializations
        witsml2__PerforatingExtension() : PerforationSetRefID(), ExtensionAny(), Perforating() { }
        virtual ~witsml2__PerforatingExtension() { }
        /// Friend allocator used by soap_new_witsml2__PerforatingExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PerforatingExtension * SOAP_FMAC2 soap_instantiate_witsml2__PerforatingExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:578 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PressureTestExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PressureTestExtension (-130)
/* Type witsml2__PressureTestExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:PressureTestExtension': */
class SOAP_CMAC witsml2__PressureTestExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:DiaOrificeSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaOrificeSize;
        /// Optional element 'witsml2:DTimeNextTestDate' of XSD type 'eml22:TimeStamp'
        struct tm *DTimeNextTestDate;
        /// Optional element 'witsml2:FlowrateRateBled' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowrateRateBled;
        /// Optional element 'witsml2:IdentifierJob' of XSD type 'eml22:String64'
        std::string *IdentifierJob;
        /// Optional element 'witsml2:IsSuccess' of XSD type 'xsd:boolean'
        bool *IsSuccess;
        /// Optional element 'witsml2:MaxPressureDuration' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPressureDuration;
        /// Optional element 'witsml2:CirculatingPosition' of XSD type 'eml22:String64'
        std::string *CirculatingPosition;
        /// Optional element 'witsml2:FluidBledType' of XSD type 'eml22:String64'
        std::string *FluidBledType;
        /// Optional element 'witsml2:OrientationMethod' of XSD type 'eml22:String64'
        std::string *OrientationMethod;
        /// Optional element 'witsml2:TestFluidType' of XSD type 'eml22:String64'
        std::string *TestFluidType;
        /// Optional element 'witsml2:TestSubType' of XSD type 'eml22:String64'
        std::string *TestSubType;
        /// Optional element 'witsml2:TestType' of XSD type 'eml22:String64'
        std::string *TestType;
        /// Optional element 'witsml2:AnnulusPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AnnulusPressure;
        /// Optional element 'witsml2:WellPressureUsed' of XSD type 'eml22:String64'
        std::string *WellPressureUsed;
        /// Optional element 'witsml2:Str10Reference' of XSD type 'eml22:String64'
        std::string *Str10Reference;
        /// Optional element 'witsml2:UidAssembly' of XSD type 'eml22:String64'
        std::string *UidAssembly;
        /// Optional element 'witsml2:VolumeBled' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumeBled;
        /// Optional element 'witsml2:VolumeLost' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumeLost;
        /// Optional element 'witsml2:VolumePumped' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumePumped;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PressureTestExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PressureTestExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PressureTestExtension, default initialized and not managed by a soap context
        virtual witsml2__PressureTestExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PressureTestExtension); }
      public:
        /// Constructor with initializations
        witsml2__PressureTestExtension() : DiaOrificeSize(), DTimeNextTestDate(), FlowrateRateBled(), IdentifierJob(), IsSuccess(), MaxPressureDuration(), CirculatingPosition(), FluidBledType(), OrientationMethod(), TestFluidType(), TestSubType(), TestType(), AnnulusPressure(), WellPressureUsed(), Str10Reference(), UidAssembly(), VolumeBled(), VolumeLost(), VolumePumped(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__PressureTestExtension() { }
        /// Friend allocator used by soap_new_witsml2__PressureTestExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PressureTestExtension * SOAP_FMAC2 soap_instantiate_witsml2__PressureTestExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:581 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WaitingOnExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WaitingOnExtension (-131)
/* Type witsml2__WaitingOnExtension is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WaitingOnExtension': */
class SOAP_CMAC witsml2__WaitingOnExtension : public witsml2__AbstractEventExtension {
      public:
        /// Optional element 'witsml2:SubCategory' of XSD type 'eml22:String64'
        std::string *SubCategory;
        /// Optional element 'witsml2:ChargeTypeCode' of XSD type 'eml22:String64'
        std::string *ChargeTypeCode;
        /// Optional element 'witsml2:BusinessOrgWaitingOn' of XSD type 'eml22:String64'
        std::string *BusinessOrgWaitingOn;
        /// Optional element 'witsml2:IsNoChargeToProducer' of XSD type 'xsd:boolean'
        bool *IsNoChargeToProducer;
        /// Optional element 'witsml2:ExtensionNameValue' of XSD type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional element 'witsml2:ExtensionAny' of XSD type 'eml22:CustomData'
        eml22__CustomData *ExtensionAny;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WaitingOnExtension
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WaitingOnExtension; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WaitingOnExtension, default initialized and not managed by a soap context
        virtual witsml2__WaitingOnExtension *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WaitingOnExtension); }
      public:
        /// Constructor with initializations
        witsml2__WaitingOnExtension() : SubCategory(), ChargeTypeCode(), BusinessOrgWaitingOn(), IsNoChargeToProducer(), ExtensionNameValue(), ExtensionAny() { }
        virtual ~witsml2__WaitingOnExtension() { }
        /// Friend allocator used by soap_new_witsml2__WaitingOnExtension(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WaitingOnExtension * SOAP_FMAC2 soap_instantiate_witsml2__WaitingOnExtension(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:584 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellCMLedger (-132)
/* Type witsml2__WellCMLedger is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellCMLedger': */
class SOAP_CMAC witsml2__WellCMLedger : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:ParentEventID' of XSD type 'eml22:String64'
        std::string *ParentEventID;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:Duration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *Duration;
        /// Optional element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:EventOrder' of XSD type 'xsd:int'
        int *EventOrder;
        /// Optional element 'witsml2:RigID' of XSD type 'eml22:String64'
        std::vector<std::string> RigID;
        /// Optional element 'witsml2:ActivityCode' of XSD type 'witsml2:DrillActivityCode'
        enum witsml2__DrillActivityCode *ActivityCode;
        /// Optional element 'witsml2:Type' of XSD type 'witsml2:EventType'
        witsml2__EventType *Type;
        /// Optional element 'witsml2:IsPlan' of XSD type 'xsd:boolean'
        bool *IsPlan;
        /// Optional element 'witsml2:WorkOrderID' of XSD type 'eml22:String64'
        std::string *WorkOrderID;
        /// Optional element 'witsml2:BusinessAssociate' of XSD type 'eml22:String64'
        std::string *BusinessAssociate;
        /// Optional element 'witsml2:ResponsiblePerson' of XSD type 'eml22:String64'
        std::string *ResponsiblePerson;
        /// Optional element 'witsml2:Contact' of XSD type 'eml22:String64'
        std::string *Contact;
        /// Optional element 'witsml2:Nonproductive' of XSD type 'xsd:boolean'
        bool *Nonproductive;
        /// Optional element 'witsml2:Trouble' of XSD type 'xsd:boolean'
        bool *Trouble;
        /// Optional element 'witsml2:PreventiveMaintenance' of XSD type 'xsd:boolean'
        bool *PreventiveMaintenance;
        /// Optional element 'witsml2:Unplanned' of XSD type 'xsd:boolean'
        bool *Unplanned;
        /// Optional element 'witsml2:Phase' of XSD type 'eml22:String64'
        std::string *Phase;
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:Description' of XSD type 'eml22:String2000'
        std::string *Description;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:EventExtension' of XSD type 'witsml2:AbstractEventExtension'
        std::vector<witsml2__AbstractEventExtension *> EventExtension;
        /// Optional element 'witsml2:Cost' of XSD type 'witsml2:DayCost'
        std::vector<witsml2__DayCost *> Cost;
        /// Optional element 'witsml2:EventType' of XSD type 'witsml2:EventType'
        witsml2__EventType *EventType;
        /// Optional element 'witsml2:DownholeComponentReference' of XSD type 'witsml2:DownholeComponentReference'
        witsml2__DownholeComponentReference *DownholeComponentReference;
        /// Optional element 'witsml2:Participant' of XSD type 'witsml2:Participant'
        witsml2__Participant *Participant;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellCMLedger
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellCMLedger; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellCMLedger, default initialized and not managed by a soap context
        virtual witsml2__WellCMLedger *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellCMLedger); }
      public:
        /// Constructor with initializations
        witsml2__WellCMLedger() : ParentEventID(), DTimStart(), DTimEnd(), Duration(), MdInterval(), EventOrder(), RigID(), ActivityCode(), Type(), IsPlan(), WorkOrderID(), BusinessAssociate(), ResponsiblePerson(), Contact(), Nonproductive(), Trouble(), PreventiveMaintenance(), Unplanned(), Phase(), Comment(), Description(), Wellbore(), EventExtension(), Cost(), EventType(), DownholeComponentReference(), Participant() { }
        virtual ~witsml2__WellCMLedger() { }
        /// Friend allocator used by soap_new_witsml2__WellCMLedger(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellCMLedger * SOAP_FMAC2 soap_instantiate_witsml2__WellCMLedger(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:602 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionType (-138)
/* Type witsml2__CasingConnectionType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CasingConnectionType': */
class SOAP_CMAC witsml2__CasingConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:CasingConnectionType' of XSD type 'witsml2:CasingConnectionTypes'
        enum witsml2__CasingConnectionTypes CasingConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CasingConnectionType, default initialized and not managed by a soap context
        virtual witsml2__CasingConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CasingConnectionType); }
      public:
        /// Constructor with initializations
        witsml2__CasingConnectionType() : CasingConnectionType() { }
        virtual ~witsml2__CasingConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__CasingConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CasingConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__CasingConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:605 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponent (-139)
/* Type witsml2__DownholeComponent is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:DownholeComponent': */
class SOAP_CMAC witsml2__DownholeComponent : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:StartDate' of XSD type 'eml22:TimeStamp'
        struct tm *StartDate;
        /// Optional element 'witsml2:EndDate' of XSD type 'eml22:TimeStamp'
        struct tm *EndDate;
        /// Optional element 'witsml2:DownholeStringSet' of XSD type 'witsml2:DownholeStringSet'
        witsml2__DownholeStringSet *DownholeStringSet;
        /// Optional element 'witsml2:PerforationSets' of XSD type 'witsml2:PerforationSets'
        witsml2__PerforationSets *PerforationSets;
        /// Optional element 'witsml2:EquipmentSet' of XSD type 'witsml2:EquipmentSet'
        witsml2__EquipmentSet *EquipmentSet;
        /// Required element 'witsml2:Well' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Well;
        /// Optional element 'witsml2:WellHead' of XSD type 'witsml2:DownholeString'
        witsml2__DownholeString *WellHead;
        /// Optional element 'witsml2:BoreholeStringSet' of XSD type 'witsml2:BoreholeStringSet'
        witsml2__BoreholeStringSet *BoreholeStringSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__DownholeComponent, default initialized and not managed by a soap context
        virtual witsml2__DownholeComponent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__DownholeComponent); }
      public:
        /// Constructor with initializations
        witsml2__DownholeComponent() : StartDate(), EndDate(), DownholeStringSet(), PerforationSets(), EquipmentSet(), Well(), WellHead(), BoreholeStringSet() { }
        virtual ~witsml2__DownholeComponent() { }
        /// Friend allocator used by soap_new_witsml2__DownholeComponent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__DownholeComponent * SOAP_FMAC2 soap_instantiate_witsml2__DownholeComponent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:617 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentConnection (-143)
/* Type witsml2__EquipmentConnection is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:EquipmentConnection': */
class SOAP_CMAC witsml2__EquipmentConnection : public witsml2__Connection {
      public:
        /// Optional element 'witsml2:RadialOffset' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *RadialOffset;
        /// Optional element 'witsml2:ConnectionForm' of XSD type 'witsml2:ConnectionFormType'
        enum witsml2__ConnectionFormType *ConnectionForm;
        /// Optional element 'witsml2:ConnectionUpset' of XSD type 'eml22:String64'
        std::string *ConnectionUpset;
        /// Optional element 'witsml2:ConnectionType' of XSD type 'witsml2:AbstractConnectionType'
        witsml2__AbstractConnectionType *ConnectionType;
        /// required attribute 'stringEquipmentReferenceUid' of XSD type 'eml22:String64'
        std::string stringEquipmentReferenceUid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentConnection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentConnection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EquipmentConnection, default initialized and not managed by a soap context
        virtual witsml2__EquipmentConnection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EquipmentConnection); }
      public:
        /// Constructor with initializations
        witsml2__EquipmentConnection() : RadialOffset(), ConnectionForm(), ConnectionUpset(), ConnectionType(), stringEquipmentReferenceUid() { }
        virtual ~witsml2__EquipmentConnection() { }
        /// Friend allocator used by soap_new_witsml2__EquipmentConnection(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EquipmentConnection * SOAP_FMAC2 soap_instantiate_witsml2__EquipmentConnection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:638 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionType (-150)
/* Type witsml2__OtherConnectionType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:OtherConnectionType': */
class SOAP_CMAC witsml2__OtherConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:OtherConnectionType' of XSD type 'witsml2:OtherConnectionTypes'
        enum witsml2__OtherConnectionTypes OtherConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OtherConnectionType, default initialized and not managed by a soap context
        virtual witsml2__OtherConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OtherConnectionType); }
      public:
        /// Constructor with initializations
        witsml2__OtherConnectionType() : OtherConnectionType() { }
        virtual ~witsml2__OtherConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__OtherConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OtherConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__OtherConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:656 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionType (-156)
/* Type witsml2__RodConnectionType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:RodConnectionType': */
class SOAP_CMAC witsml2__RodConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:RodConnectionType' of XSD type 'witsml2:RodConnectionTypes'
        enum witsml2__RodConnectionTypes RodConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RodConnectionType, default initialized and not managed by a soap context
        virtual witsml2__RodConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RodConnectionType); }
      public:
        /// Constructor with initializations
        witsml2__RodConnectionType() : RodConnectionType() { }
        virtual ~witsml2__RodConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__RodConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RodConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__RodConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:668 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionType (-160)
/* Type witsml2__TubingConnectionType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:TubingConnectionType': */
class SOAP_CMAC witsml2__TubingConnectionType : public witsml2__AbstractConnectionType {
      public:
        /// Required element 'witsml2:TubingConnectionType' of XSD type 'witsml2:TubingConnectionTypes'
        enum witsml2__TubingConnectionTypes TubingConnectionType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TubingConnectionType, default initialized and not managed by a soap context
        virtual witsml2__TubingConnectionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TubingConnectionType); }
      public:
        /// Constructor with initializations
        witsml2__TubingConnectionType() : TubingConnectionType() { }
        virtual ~witsml2__TubingConnectionType() { }
        /// Friend allocator used by soap_new_witsml2__TubingConnectionType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TubingConnectionType * SOAP_FMAC2 soap_instantiate_witsml2__TubingConnectionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:689 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ItemVolPerUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ItemVolPerUnit (-167)
/* Type witsml2__ItemVolPerUnit is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ItemVolPerUnit': */
class SOAP_CMAC witsml2__ItemVolPerUnit : public witsml2__AbstractItemWtOrVolPerUnit {
      public:
        /// Required element 'witsml2:ItemVolPerUnit' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *ItemVolPerUnit;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ItemVolPerUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ItemVolPerUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ItemVolPerUnit, default initialized and not managed by a soap context
        virtual witsml2__ItemVolPerUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ItemVolPerUnit); }
      public:
        /// Constructor with initializations
        witsml2__ItemVolPerUnit() : ItemVolPerUnit() { }
        virtual ~witsml2__ItemVolPerUnit() { }
        /// Friend allocator used by soap_new_witsml2__ItemVolPerUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ItemVolPerUnit * SOAP_FMAC2 soap_instantiate_witsml2__ItemVolPerUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:692 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ItemWtPerUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ItemWtPerUnit (-168)
/* Type witsml2__ItemWtPerUnit is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ItemWtPerUnit': */
class SOAP_CMAC witsml2__ItemWtPerUnit : public witsml2__AbstractItemWtOrVolPerUnit {
      public:
        /// Required element 'witsml2:ItemWtPerUnit' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *ItemWtPerUnit;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ItemWtPerUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ItemWtPerUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ItemWtPerUnit, default initialized and not managed by a soap context
        virtual witsml2__ItemWtPerUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ItemWtPerUnit); }
      public:
        /// Constructor with initializations
        witsml2__ItemWtPerUnit() : ItemWtPerUnit() { }
        virtual ~witsml2__ItemWtPerUnit() { }
        /// Friend allocator used by soap_new_witsml2__ItemWtPerUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ItemWtPerUnit * SOAP_FMAC2 soap_instantiate_witsml2__ItemWtPerUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:701 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReport (-171)
/* Type witsml2__OpsReport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:OpsReport': */
class SOAP_CMAC witsml2__OpsReport : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:ConditionHole' of XSD type 'eml22:String64'
        std::string *ConditionHole;
        /// Optional element 'witsml2:CostDay' of XSD type 'eml22:Cost'
        eml22__Cost *CostDay;
        /// Optional element 'witsml2:CostDayMud' of XSD type 'eml22:Cost'
        eml22__Cost *CostDayMud;
        /// Optional element 'witsml2:DiaCsgLast' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaCsgLast;
        /// Optional element 'witsml2:DiaHole' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaHole;
        /// Optional element 'witsml2:DistDrill' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrill;
        /// Optional element 'witsml2:DistDrillRot' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrillRot;
        /// Optional element 'witsml2:DistDrillSlid' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistDrillSlid;
        /// Optional element 'witsml2:DistHold' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistHold;
        /// Optional element 'witsml2:DistReam' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistReam;
        /// Optional element 'witsml2:DistSteering' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DistSteering;
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm DTim;
        /// Optional element 'witsml2:Engineer' of XSD type 'eml22:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:ETimCirc' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimCirc;
        /// Optional element 'witsml2:ETimDrill' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimDrill;
        /// Optional element 'witsml2:ETimDrillRot' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimDrillRot;
        /// Optional element 'witsml2:ETimDrillSlid' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimDrillSlid;
        /// Optional element 'witsml2:ETimHold' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimHold;
        /// Optional element 'witsml2:ETimLoc' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimLoc;
        /// Optional element 'witsml2:ETimReam' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimReam;
        /// Optional element 'witsml2:ETimSpud' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimSpud;
        /// Optional element 'witsml2:ETimStart' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimStart;
        /// Optional element 'witsml2:ETimSteering' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ETimSteering;
        /// Optional element 'witsml2:Forecast24Hr' of XSD type 'eml22:String2000'
        std::string *Forecast24Hr;
        /// Optional element 'witsml2:Geologist' of XSD type 'eml22:String64'
        std::string *Geologist;
        /// Optional element 'witsml2:Lithology' of XSD type 'eml22:String64'
        std::string *Lithology;
        /// Optional element 'witsml2:Maasp' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Maasp;
        /// Optional element 'witsml2:MdCsgLast' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdCsgLast;
        /// Optional element 'witsml2:MdPlanned' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdPlanned;
        /// Optional element 'witsml2:MdReport' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdReport;
        /// Optional element 'witsml2:NameFormation' of XSD type 'eml22:String64'
        std::string *NameFormation;
        /// Optional element 'witsml2:NumAFE' of XSD type 'eml22:String64'
        std::string *NumAFE;
        /// Optional element 'witsml2:NumContract' of XSD type 'xsd:int'
        int *NumContract;
        /// Optional element 'witsml2:NumOperator' of XSD type 'xsd:int'
        int *NumOperator;
        /// Optional element 'witsml2:NumPob' of XSD type 'xsd:int'
        int *NumPob;
        /// Optional element 'witsml2:NumService' of XSD type 'xsd:int'
        int *NumService;
        /// Optional element 'witsml2:PresKickTol' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *PresKickTol;
        /// Optional element 'witsml2:PresLotEmw' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *PresLotEmw;
        /// Optional element 'witsml2:Rig' of XSD type 'eml22:String64'
        std::string *Rig;
        /// Optional element 'witsml2:RopAv' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopAv;
        /// Optional element 'witsml2:RopCurrent' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *RopCurrent;
        /// Optional element 'witsml2:StatusCurrent' of XSD type 'eml22:String2000'
        std::string *StatusCurrent;
        /// Optional element 'witsml2:Sum24Hr' of XSD type 'eml22:String2000'
        std::string *Sum24Hr;
        /// Optional element 'witsml2:Supervisor' of XSD type 'eml22:String64'
        std::string *Supervisor;
        /// Optional element 'witsml2:Tubular' of XSD type 'eml22:String64'
        std::string *Tubular;
        /// Optional element 'witsml2:TvdCsgLast' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdCsgLast;
        /// Optional element 'witsml2:TvdLot' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdLot;
        /// Optional element 'witsml2:TvdReport' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdReport;
        /// Optional element 'witsml2:VolKickTol' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolKickTol;
        /// Optional element 'witsml2:RigResponse' of XSD type 'witsml2:RigResponse'
        witsml2__RigResponse *RigResponse;
        /// Optional element 'witsml2:ShakerOp' of XSD type 'witsml2:ShakerOp'
        std::vector<witsml2__ShakerOp *> ShakerOp;
        /// Optional element 'witsml2:Hse' of XSD type 'witsml2:Hse'
        witsml2__Hse *Hse;
        /// Optional element 'witsml2:SupportCraft' of XSD type 'witsml2:SupportCraft'
        std::vector<witsml2__SupportCraft *> SupportCraft;
        /// Optional element 'witsml2:Weather' of XSD type 'witsml2:Weather'
        std::vector<witsml2__Weather *> Weather;
        /// Optional element 'witsml2:MudInventory' of XSD type 'witsml2:Inventory'
        std::vector<witsml2__Inventory *> MudInventory;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:MudVolume' of XSD type 'witsml2:MudVolume'
        witsml2__MudVolume *MudVolume;
        /// Optional element 'witsml2:Personnel' of XSD type 'witsml2:Personnel'
        std::vector<witsml2__Personnel *> Personnel;
        /// Optional element 'witsml2:Activity' of XSD type 'witsml2:DrillActivity'
        std::vector<witsml2__DrillActivity *> Activity;
        /// Optional element 'witsml2:DrillingParams' of XSD type 'witsml2:DrillingParams'
        std::vector<witsml2__DrillingParams *> DrillingParams;
        /// Optional element 'witsml2:WbGeometry' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WbGeometry;
        /// Optional element 'witsml2:DayCost' of XSD type 'witsml2:DayCost'
        std::vector<witsml2__DayCost *> DayCost;
        /// Optional element 'witsml2:TrajectoryStation' of XSD type 'witsml2:TrajectoryStation'
        std::vector<witsml2__TrajectoryStation *> TrajectoryStation;
        /// Optional element 'witsml2:Fluid' of XSD type 'witsml2:Fluid'
        std::vector<witsml2__Fluid *> Fluid;
        /// Optional element 'witsml2:Scr' of XSD type 'witsml2:Scr'
        std::vector<witsml2__Scr *> Scr;
        /// Optional element 'witsml2:BulkInventory' of XSD type 'witsml2:Inventory'
        std::vector<witsml2__Inventory *> BulkInventory;
        /// Optional element 'witsml2:PitVolume' of XSD type 'witsml2:PitVolume'
        std::vector<witsml2__PitVolume *> PitVolume;
        /// Optional element 'witsml2:PumpOp' of XSD type 'witsml2:PumpOp'
        std::vector<witsml2__PumpOp *> PumpOp;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__OpsReport, default initialized and not managed by a soap context
        virtual witsml2__OpsReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__OpsReport); }
      public:
        /// Constructor with initializations
        witsml2__OpsReport() : ConditionHole(), CostDay(), CostDayMud(), DiaCsgLast(), DiaHole(), DistDrill(), DistDrillRot(), DistDrillSlid(), DistHold(), DistReam(), DistSteering(), DTim(), Engineer(), ETimCirc(), ETimDrill(), ETimDrillRot(), ETimDrillSlid(), ETimHold(), ETimLoc(), ETimReam(), ETimSpud(), ETimStart(), ETimSteering(), Forecast24Hr(), Geologist(), Lithology(), Maasp(), MdCsgLast(), MdPlanned(), MdReport(), NameFormation(), NumAFE(), NumContract(), NumOperator(), NumPob(), NumService(), PresKickTol(), PresLotEmw(), Rig(), RopAv(), RopCurrent(), StatusCurrent(), Sum24Hr(), Supervisor(), Tubular(), TvdCsgLast(), TvdLot(), TvdReport(), VolKickTol(), RigResponse(), ShakerOp(), Hse(), SupportCraft(), Weather(), MudInventory(), Wellbore(), MudVolume(), Personnel(), Activity(), DrillingParams(), WbGeometry(), DayCost(), TrajectoryStation(), Fluid(), Scr(), BulkInventory(), PitVolume(), PumpOp() { }
        virtual ~witsml2__OpsReport() { }
        /// Friend allocator used by soap_new_witsml2__OpsReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__OpsReport * SOAP_FMAC2 soap_instantiate_witsml2__OpsReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:746 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Trajectory (-186)
/* Type witsml2__Trajectory is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Trajectory': */
class SOAP_CMAC witsml2__Trajectory : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:DTimTrajStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimTrajStart;
        /// Optional element 'witsml2:DTimTrajEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimTrajEnd;
        /// Optional element 'witsml2:MdMn' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdMn;
        /// Optional element 'witsml2:MdMx' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdMx;
        /// Optional element 'witsml2:ServiceCompany' of XSD type 'eml22:String64'
        std::string *ServiceCompany;
        /// Optional element 'witsml2:MagDeclUsed' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *MagDeclUsed;
        /// Optional element 'witsml2:GridConUsed' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *GridConUsed;
        /// Optional element 'witsml2:AziVertSect' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *AziVertSect;
        /// Optional element 'witsml2:DispNsVertSectOrig' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DispNsVertSectOrig;
        /// Optional element 'witsml2:DispEwVertSectOrig' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DispEwVertSectOrig;
        /// Optional element 'witsml2:Definitive' of XSD type 'xsd:boolean'
        bool *Definitive;
        /// Optional element 'witsml2:Memory' of XSD type 'xsd:boolean'
        bool *Memory;
        /// Optional element 'witsml2:FinalTraj' of XSD type 'xsd:boolean'
        bool *FinalTraj;
        /// Optional element 'witsml2:AziRef' of XSD type 'witsml2:AziRef'
        enum witsml2__AziRef *AziRef;
        /// Optional element 'witsml2:TrajectoryStation' of XSD type 'witsml2:TrajectoryStation'
        std::vector<witsml2__TrajectoryStation *> TrajectoryStation;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:ParentTrajectory' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ParentTrajectory;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Trajectory
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Trajectory; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Trajectory, default initialized and not managed by a soap context
        virtual witsml2__Trajectory *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Trajectory); }
      public:
        /// Constructor with initializations
        witsml2__Trajectory() : GrowingStatus(), DTimTrajStart(), DTimTrajEnd(), MdMn(), MdMx(), ServiceCompany(), MagDeclUsed(), GridConUsed(), AziVertSect(), DispNsVertSectOrig(), DispEwVertSectOrig(), Definitive(), Memory(), FinalTraj(), AziRef(), TrajectoryStation(), Wellbore(), ParentTrajectory() { }
        virtual ~witsml2__Trajectory() { }
        /// Friend allocator used by soap_new_witsml2__Trajectory(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Trajectory * SOAP_FMAC2 soap_instantiate_witsml2__Trajectory(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:764 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ContinuousAzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ContinuousAzimuthFormula (-192)
/* Type witsml2__ContinuousAzimuthFormula is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ContinuousAzimuthFormula': */
class SOAP_CMAC witsml2__ContinuousAzimuthFormula : public witsml2__AzimuthFormula {
      public:
        /// Optional element 'witsml2:GyroAxis' of XSD type 'witsml2:GyroAxisCombination'
        enum witsml2__GyroAxisCombination *GyroAxis;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ContinuousAzimuthFormula
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ContinuousAzimuthFormula; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ContinuousAzimuthFormula, default initialized and not managed by a soap context
        virtual witsml2__ContinuousAzimuthFormula *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ContinuousAzimuthFormula); }
      public:
        /// Constructor with initializations
        witsml2__ContinuousAzimuthFormula() : GyroAxis() { }
        virtual ~witsml2__ContinuousAzimuthFormula() { }
        /// Friend allocator used by soap_new_witsml2__ContinuousAzimuthFormula(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ContinuousAzimuthFormula * SOAP_FMAC2 soap_instantiate_witsml2__ContinuousAzimuthFormula(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:767 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CustomOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CustomOperatingRange (-193)
/* Type witsml2__CustomOperatingRange is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CustomOperatingRange': */
class SOAP_CMAC witsml2__CustomOperatingRange : public witsml2__AbstractOperatingRange {
      public:
        /// Required element 'witsml2:Title' of XSD type 'eml22:String64'
        std::string Title;
        /// Required element 'witsml2:Uom' of XSD type 'eml22:UomEnum'
        std::string Uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CustomOperatingRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CustomOperatingRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CustomOperatingRange, default initialized and not managed by a soap context
        virtual witsml2__CustomOperatingRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CustomOperatingRange); }
      public:
        /// Constructor with initializations
        witsml2__CustomOperatingRange() : Title(), Uom() { }
        virtual ~witsml2__CustomOperatingRange() { }
        /// Friend allocator used by soap_new_witsml2__CustomOperatingRange(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CustomOperatingRange * SOAP_FMAC2 soap_instantiate_witsml2__CustomOperatingRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:770 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTerm
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTerm (-194)
/* Type witsml2__ErrorTerm is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ErrorTerm': */
class SOAP_CMAC witsml2__ErrorTerm : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:GyroMode' of XSD type 'witsml2:GyroMode'
        enum witsml2__GyroMode *GyroMode;
        /// Optional element 'witsml2:MeasureClass' of XSD type 'eml22:MeasureClass'
        enum eml22__MeasureClass *MeasureClass;
        /// Required element 'witsml2:PropagationMode' of XSD type 'witsml2:ErrorPropagationMode'
        enum witsml2__ErrorPropagationMode PropagationMode;
        /// Required element 'witsml2:WeightingFunction' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WeightingFunction;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTerm
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTerm; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ErrorTerm, default initialized and not managed by a soap context
        virtual witsml2__ErrorTerm *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ErrorTerm); }
      public:
        /// Constructor with initializations
        witsml2__ErrorTerm() : GyroMode(), MeasureClass(), PropagationMode(), WeightingFunction() { }
        virtual ~witsml2__ErrorTerm() { }
        /// Friend allocator used by soap_new_witsml2__ErrorTerm(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ErrorTerm * SOAP_FMAC2 soap_instantiate_witsml2__ErrorTerm(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:773 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermDictionary
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermDictionary (-195)
/* Type witsml2__ErrorTermDictionary is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ErrorTermDictionary': */
class SOAP_CMAC witsml2__ErrorTermDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:ErrorTerm' of XSD type 'witsml2:ErrorTerm'
        std::vector<witsml2__ErrorTerm *> ErrorTerm;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ErrorTermDictionary, default initialized and not managed by a soap context
        virtual witsml2__ErrorTermDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ErrorTermDictionary); }
      public:
        /// Constructor with initializations
        witsml2__ErrorTermDictionary() : ErrorTerm() { }
        virtual ~witsml2__ErrorTermDictionary() { }
        /// Friend allocator used by soap_new_witsml2__ErrorTermDictionary(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ErrorTermDictionary * SOAP_FMAC2 soap_instantiate_witsml2__ErrorTermDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:791 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PlaneAngleOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PlaneAngleOperatingRange (-201)
/* Type witsml2__PlaneAngleOperatingRange is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:PlaneAngleOperatingRange': */
class SOAP_CMAC witsml2__PlaneAngleOperatingRange : public witsml2__AbstractOperatingRange {
      public:
        /// Required element 'witsml2:Uom' of XSD type 'eml22:PlaneAngleUomExt'
        std::string Uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__PlaneAngleOperatingRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__PlaneAngleOperatingRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__PlaneAngleOperatingRange, default initialized and not managed by a soap context
        virtual witsml2__PlaneAngleOperatingRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__PlaneAngleOperatingRange); }
      public:
        /// Constructor with initializations
        witsml2__PlaneAngleOperatingRange() : Uom() { }
        virtual ~witsml2__PlaneAngleOperatingRange() { }
        /// Friend allocator used by soap_new_witsml2__PlaneAngleOperatingRange(struct soap*, int)
        friend SOAP_FMAC1 witsml2__PlaneAngleOperatingRange * SOAP_FMAC2 soap_instantiate_witsml2__PlaneAngleOperatingRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:794 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModel (-202)
/* Type witsml2__ToolErrorModel is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ToolErrorModel': */
class SOAP_CMAC witsml2__ToolErrorModel : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:Application' of XSD type 'eml22:String2000'
        std::string *Application;
        /// Optional element 'witsml2:Note' of XSD type 'eml22:String64'
        std::string *Note;
        /// Optional element 'witsml2:Source' of XSD type 'eml22:String2000'
        std::string *Source;
        /// Optional element 'witsml2:ToolKind' of XSD type 'witsml2:ToolKind'
        enum witsml2__ToolKind *ToolKind;
        /// Required element 'witsml2:ToolSubKind' of XSD type 'witsml2:ToolSubKindExt'
        std::vector<std::string> ToolSubKind;
        /// Optional element 'witsml2:OperatingCondition' of XSD type 'witsml2:OperatingConditionExt'
        std::vector<std::string> OperatingCondition;
        /// Optional element 'witsml2:SurveyRunDateEnd' of XSD type 'eml22:TimeStamp'
        struct tm *SurveyRunDateEnd;
        /// Optional element 'witsml2:CorrectionConsidered' of XSD type 'witsml2:CorrectionConsideredExt'
        std::vector<std::string> CorrectionConsidered;
        /// Optional element 'witsml2:SurveyRunDateStart' of XSD type 'eml22:TimeStamp'
        struct tm *SurveyRunDateStart;
        /// Required element 'witsml2:MisalignmentMode' of XSD type 'witsml2:MisalignmentMode'
        enum witsml2__MisalignmentMode MisalignmentMode;
        /// Optional element 'witsml2:Replaces' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Replaces;
        /// Required element 'witsml2:Authorization' of XSD type 'witsml2:Authorization'
        witsml2__Authorization *Authorization;
        /// Optional element 'witsml2:OperatingConstraints' of XSD type 'witsml2:OperatingConstraints'
        witsml2__OperatingConstraints *OperatingConstraints;
        /// Optional element 'witsml2:ErrorTermValue' of XSD type 'witsml2:ErrorTermValue'
        std::vector<witsml2__ErrorTermValue *> ErrorTermValue;
        /// Optional element 'witsml2:GyroToolConfiguration' of XSD type 'witsml2:GyroToolConfiguration'
        witsml2__GyroToolConfiguration *GyroToolConfiguration;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModel
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModel; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ToolErrorModel, default initialized and not managed by a soap context
        virtual witsml2__ToolErrorModel *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ToolErrorModel); }
      public:
        /// Constructor with initializations
        witsml2__ToolErrorModel() : Application(), Note(), Source(), ToolKind(), ToolSubKind(), OperatingCondition(), SurveyRunDateEnd(), CorrectionConsidered(), SurveyRunDateStart(), MisalignmentMode(), Replaces(), Authorization(), OperatingConstraints(), ErrorTermValue(), GyroToolConfiguration() { }
        virtual ~witsml2__ToolErrorModel() { }
        /// Friend allocator used by soap_new_witsml2__ToolErrorModel(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ToolErrorModel * SOAP_FMAC2 soap_instantiate_witsml2__ToolErrorModel(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:797 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModelDictionary
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModelDictionary (-203)
/* Type witsml2__ToolErrorModelDictionary is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ToolErrorModelDictionary': */
class SOAP_CMAC witsml2__ToolErrorModelDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:ToolErrorModel' of XSD type 'witsml2:ToolErrorModel'
        std::vector<witsml2__ToolErrorModel *> ToolErrorModel;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModelDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModelDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ToolErrorModelDictionary, default initialized and not managed by a soap context
        virtual witsml2__ToolErrorModelDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ToolErrorModelDictionary); }
      public:
        /// Constructor with initializations
        witsml2__ToolErrorModelDictionary() : ToolErrorModel() { }
        virtual ~witsml2__ToolErrorModelDictionary() { }
        /// Friend allocator used by soap_new_witsml2__ToolErrorModelDictionary(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ToolErrorModelDictionary * SOAP_FMAC2 soap_instantiate_witsml2__ToolErrorModelDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:800 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunction
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunction (-204)
/* Type witsml2__WeightingFunction is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WeightingFunction': */
class SOAP_CMAC witsml2__WeightingFunction : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'witsml2:Kind' of XSD type 'witsml2:ErrorKind'
        enum witsml2__ErrorKind *Kind;
        /// Optional element 'witsml2:Source' of XSD type 'eml22:String64'
        std::vector<std::string> Source;
        /// Required element 'witsml2:DepthFormula' of XSD type 'eml22:String2000'
        std::string DepthFormula;
        /// Required element 'witsml2:InclinationFormula' of XSD type 'eml22:String2000'
        std::string InclinationFormula;
        /// Optional element 'witsml2:SingularityNorthFormula' of XSD type 'eml22:String2000'
        std::string *SingularityNorthFormula;
        /// Optional element 'witsml2:SingularityEastFormula' of XSD type 'eml22:String2000'
        std::string *SingularityEastFormula;
        /// Optional element 'witsml2:SingularityVerticalFormula' of XSD type 'eml22:String2000'
        std::string *SingularityVerticalFormula;
        /// Required element 'witsml2:AzimuthFormula' of XSD type 'witsml2:AzimuthFormula'
        witsml2__AzimuthFormula *AzimuthFormula;
        /// Sequence of 0 to 3 elements 'witsml2:ContinuousAzimuthFormula' of XSD type 'witsml2:ContinuousAzimuthFormula'
        std::vector<witsml2__ContinuousAzimuthFormula *> ContinuousAzimuthFormula;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunction
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunction; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WeightingFunction, default initialized and not managed by a soap context
        virtual witsml2__WeightingFunction *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WeightingFunction); }
      public:
        /// Constructor with initializations
        witsml2__WeightingFunction() : Comment(), Kind(), Source(), DepthFormula(), InclinationFormula(), SingularityNorthFormula(), SingularityEastFormula(), SingularityVerticalFormula(), AzimuthFormula(), ContinuousAzimuthFormula() { }
        virtual ~witsml2__WeightingFunction() { }
        /// Friend allocator used by soap_new_witsml2__WeightingFunction(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WeightingFunction * SOAP_FMAC2 soap_instantiate_witsml2__WeightingFunction(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:803 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunctionDictionary
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunctionDictionary (-205)
/* Type witsml2__WeightingFunctionDictionary is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WeightingFunctionDictionary': */
class SOAP_CMAC witsml2__WeightingFunctionDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:WeightingFunction' of XSD type 'witsml2:WeightingFunction'
        std::vector<witsml2__WeightingFunction *> WeightingFunction;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunctionDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunctionDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WeightingFunctionDictionary, default initialized and not managed by a soap context
        virtual witsml2__WeightingFunctionDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WeightingFunctionDictionary); }
      public:
        /// Constructor with initializations
        witsml2__WeightingFunctionDictionary() : WeightingFunction() { }
        virtual ~witsml2__WeightingFunctionDictionary() { }
        /// Friend allocator used by soap_new_witsml2__WeightingFunctionDictionary(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WeightingFunctionDictionary * SOAP_FMAC2 soap_instantiate_witsml2__WeightingFunctionDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:830 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Rig (-214)
/* Type witsml2__Rig is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Rig': */
class SOAP_CMAC witsml2__Rig : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:Owner' of XSD type 'eml22:String64'
        std::string *Owner;
        /// Optional element 'witsml2:TypeRig' of XSD type 'witsml2:RigType'
        enum witsml2__RigType *TypeRig;
        /// Optional element 'witsml2:Manufacturer' of XSD type 'eml22:String64'
        std::string *Manufacturer;
        /// Optional element 'witsml2:YearEntService' of XSD type 'xsd:gYear'
        std::string *YearEntService;
        /// Optional element 'witsml2:ClassRig' of XSD type 'eml22:String64'
        std::string *ClassRig;
        /// Optional element 'witsml2:Approvals' of XSD type 'eml22:String64'
        std::string *Approvals;
        /// Optional element 'witsml2:Registration' of XSD type 'eml22:String64'
        std::string *Registration;
        /// Optional element 'witsml2:TelNumber' of XSD type 'eml22:String64'
        std::string *TelNumber;
        /// Optional element 'witsml2:FaxNumber' of XSD type 'eml22:String64'
        std::string *FaxNumber;
        /// Optional element 'witsml2:EmailAddress' of XSD type 'eml22:String64'
        std::string *EmailAddress;
        /// Optional element 'witsml2:NameContact' of XSD type 'eml22:String64'
        std::string *NameContact;
        /// Optional element 'witsml2:RatingDrillDepth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *RatingDrillDepth;
        /// Optional element 'witsml2:RatingWaterDepth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *RatingWaterDepth;
        /// Optional element 'witsml2:IsOffshore' of XSD type 'xsd:boolean'
        bool *IsOffshore;
        /// Optional element 'witsml2:TypeDerrick' of XSD type 'witsml2:DerrickType'
        enum witsml2__DerrickType *TypeDerrick;
        /// Optional element 'witsml2:RatingDerrick' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RatingDerrick;
        /// Optional element 'witsml2:HtDerrick' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HtDerrick;
        /// Optional element 'witsml2:CapWindDerrick' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *CapWindDerrick;
        /// Optional element 'witsml2:NumCranes' of XSD type 'xsd:int'
        int *NumCranes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Rig
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Rig; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Rig, default initialized and not managed by a soap context
        virtual witsml2__Rig *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Rig); }
      public:
        /// Constructor with initializations
        witsml2__Rig() : Owner(), TypeRig(), Manufacturer(), YearEntService(), ClassRig(), Approvals(), Registration(), TelNumber(), FaxNumber(), EmailAddress(), NameContact(), RatingDrillDepth(), RatingWaterDepth(), IsOffshore(), TypeDerrick(), RatingDerrick(), HtDerrick(), CapWindDerrick(), NumCranes() { }
        virtual ~witsml2__Rig() { }
        /// Friend allocator used by soap_new_witsml2__Rig(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Rig * SOAP_FMAC2 soap_instantiate_witsml2__Rig(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:833 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RigUtilization (-215)
/* Type witsml2__RigUtilization is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:RigUtilization': */
class SOAP_CMAC witsml2__RigUtilization : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:StartOperationTime' of XSD type 'eml22:TimeStamp'
        struct tm *StartOperationTime;
        /// Optional element 'witsml2:EndOperationTime' of XSD type 'eml22:TimeStamp'
        struct tm *EndOperationTime;
        /// Optional element 'witsml2:StartHoleDepth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *StartHoleDepth;
        /// Optional element 'witsml2:EndHoleDepth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *EndHoleDepth;
        /// Optional element 'witsml2:Datum' of XSD type 'eml22:String64'
        std::string *Datum;
        /// Optional element 'witsml2:AirGap' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *AirGap;
        /// Optional element 'witsml2:WtBlock' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *WtBlock;
        /// Optional element 'witsml2:RatingBlock' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RatingBlock;
        /// Optional element 'witsml2:NumBlockLines' of XSD type 'xsd:int'
        int *NumBlockLines;
        /// Optional element 'witsml2:TypeHook' of XSD type 'eml22:String64'
        std::string *TypeHook;
        /// Optional element 'witsml2:RatingHkld' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RatingHkld;
        /// Optional element 'witsml2:SizeDrillLine' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeDrillLine;
        /// Optional element 'witsml2:TypeDrawWorks' of XSD type 'witsml2:DrawWorksType'
        enum witsml2__DrawWorksType *TypeDrawWorks;
        /// Optional element 'witsml2:PowerDrawWorks' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *PowerDrawWorks;
        /// Optional element 'witsml2:RatingDrawWorks' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RatingDrawWorks;
        /// Optional element 'witsml2:MotorDrawWorks' of XSD type 'eml22:String64'
        std::string *MotorDrawWorks;
        /// Optional element 'witsml2:DescBrake' of XSD type 'eml22:String64'
        std::string *DescBrake;
        /// Optional element 'witsml2:TypeSwivel' of XSD type 'eml22:String64'
        std::string *TypeSwivel;
        /// Optional element 'witsml2:RatingSwivel' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RatingSwivel;
        /// Optional element 'witsml2:RotSystem' of XSD type 'witsml2:DriveType'
        enum witsml2__DriveType *RotSystem;
        /// Optional element 'witsml2:DescRotSystem' of XSD type 'eml22:String64'
        std::string *DescRotSystem;
        /// Optional element 'witsml2:RatingTqRotSys' of XSD type 'eml22:MomentOfForceMeasure'
        eml22__MomentOfForceMeasure *RatingTqRotSys;
        /// Optional element 'witsml2:RotSizeOpening' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *RotSizeOpening;
        /// Optional element 'witsml2:RatingRotSystem' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *RatingRotSystem;
        /// Optional element 'witsml2:ScrSystem' of XSD type 'eml22:String64'
        std::string *ScrSystem;
        /// Optional element 'witsml2:PipeHandlingSystem' of XSD type 'eml22:String64'
        std::string *PipeHandlingSystem;
        /// Optional element 'witsml2:CapBulkMud' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapBulkMud;
        /// Optional element 'witsml2:CapLiquidMud' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapLiquidMud;
        /// Optional element 'witsml2:CapDrillWater' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapDrillWater;
        /// Optional element 'witsml2:CapPotableWater' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapPotableWater;
        /// Optional element 'witsml2:CapFuel' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapFuel;
        /// Optional element 'witsml2:CapBulkCement' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *CapBulkCement;
        /// Optional element 'witsml2:MainEngine' of XSD type 'eml22:String64'
        std::string *MainEngine;
        /// Optional element 'witsml2:Generator' of XSD type 'eml22:String64'
        std::string *Generator;
        /// Optional element 'witsml2:CementUnit' of XSD type 'eml22:String64'
        std::string *CementUnit;
        /// Optional element 'witsml2:NumBunks' of XSD type 'xsd:int'
        int *NumBunks;
        /// Optional element 'witsml2:BunksPerRoom' of XSD type 'xsd:int'
        int *BunksPerRoom;
        /// Optional element 'witsml2:NumAnch' of XSD type 'xsd:int'
        int *NumAnch;
        /// Optional element 'witsml2:MoorType' of XSD type 'eml22:String64'
        std::string *MoorType;
        /// Optional element 'witsml2:NumGuideTens' of XSD type 'xsd:int'
        int *NumGuideTens;
        /// Optional element 'witsml2:NumRiserTens' of XSD type 'xsd:int'
        int *NumRiserTens;
        /// Optional element 'witsml2:VarDeckLdMx' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *VarDeckLdMx;
        /// Optional element 'witsml2:VdlStorm' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *VdlStorm;
        /// Optional element 'witsml2:NumThrusters' of XSD type 'xsd:int'
        int *NumThrusters;
        /// Optional element 'witsml2:Azimuthing' of XSD type 'xsd:boolean'
        bool *Azimuthing;
        /// Optional element 'witsml2:MotionCompensationMn' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *MotionCompensationMn;
        /// Optional element 'witsml2:MotionCompensationMx' of XSD type 'eml22:ForceMeasure'
        eml22__ForceMeasure *MotionCompensationMx;
        /// Optional element 'witsml2:StrokeMotionCompensation' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *StrokeMotionCompensation;
        /// Optional element 'witsml2:RiserAngleLimit' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *RiserAngleLimit;
        /// Optional element 'witsml2:HeaveMx' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *HeaveMx;
        /// Optional element 'witsml2:Gantry' of XSD type 'eml22:String64'
        std::string *Gantry;
        /// Optional element 'witsml2:Flares' of XSD type 'eml22:String64'
        std::string *Flares;
        /// Optional element 'witsml2:Shaker' of XSD type 'witsml2:Shaker'
        std::vector<witsml2__Shaker *> Shaker;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:Bop' of XSD type 'witsml2:Bop'
        witsml2__Bop *Bop;
        /// Optional element 'witsml2:Pit' of XSD type 'witsml2:Pit'
        std::vector<witsml2__Pit *> Pit;
        /// Optional element 'witsml2:Pump' of XSD type 'witsml2:MudPump'
        std::vector<witsml2__MudPump *> Pump;
        /// Optional element 'witsml2:Centrifuge' of XSD type 'witsml2:Centrifuge'
        std::vector<witsml2__Centrifuge *> Centrifuge;
        /// Optional element 'witsml2:Hydrocyclone' of XSD type 'witsml2:Hydrocyclone'
        std::vector<witsml2__Hydrocyclone *> Hydrocyclone;
        /// Optional element 'witsml2:Degasser' of XSD type 'witsml2:Degasser'
        std::vector<witsml2__Degasser *> Degasser;
        /// Optional element 'witsml2:SurfaceEquipment' of XSD type 'witsml2:SurfaceEquipment'
        witsml2__SurfaceEquipment *SurfaceEquipment;
        /// Optional element 'witsml2:BhaRun' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> BhaRun;
        /// Required element 'witsml2:Rig' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Rig;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__RigUtilization
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__RigUtilization; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__RigUtilization, default initialized and not managed by a soap context
        virtual witsml2__RigUtilization *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__RigUtilization); }
      public:
        /// Constructor with initializations
        witsml2__RigUtilization() : StartOperationTime(), EndOperationTime(), StartHoleDepth(), EndHoleDepth(), Datum(), AirGap(), WtBlock(), RatingBlock(), NumBlockLines(), TypeHook(), RatingHkld(), SizeDrillLine(), TypeDrawWorks(), PowerDrawWorks(), RatingDrawWorks(), MotorDrawWorks(), DescBrake(), TypeSwivel(), RatingSwivel(), RotSystem(), DescRotSystem(), RatingTqRotSys(), RotSizeOpening(), RatingRotSystem(), ScrSystem(), PipeHandlingSystem(), CapBulkMud(), CapLiquidMud(), CapDrillWater(), CapPotableWater(), CapFuel(), CapBulkCement(), MainEngine(), Generator(), CementUnit(), NumBunks(), BunksPerRoom(), NumAnch(), MoorType(), NumGuideTens(), NumRiserTens(), VarDeckLdMx(), VdlStorm(), NumThrusters(), Azimuthing(), MotionCompensationMn(), MotionCompensationMx(), StrokeMotionCompensation(), RiserAngleLimit(), HeaveMx(), Gantry(), Flares(), Shaker(), Wellbore(), Bop(), Pit(), Pump(), Centrifuge(), Hydrocyclone(), Degasser(), SurfaceEquipment(), BhaRun(), Rig() { }
        virtual ~witsml2__RigUtilization() { }
        /// Friend allocator used by soap_new_witsml2__RigUtilization(struct soap*, int)
        friend SOAP_FMAC1 witsml2__RigUtilization * SOAP_FMAC2 soap_instantiate_witsml2__RigUtilization(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:842 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Risk (-218)
/* Type witsml2__Risk is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:Risk': */
class SOAP_CMAC witsml2__Risk : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:Type' of XSD type 'witsml2:RiskType'
        enum witsml2__RiskType Type;
        /// Required element 'witsml2:Category' of XSD type 'witsml2:RiskCategory'
        enum witsml2__RiskCategory Category;
        /// Optional element 'witsml2:SubCategory' of XSD type 'witsml2:RiskSubCategory'
        enum witsml2__RiskSubCategory *SubCategory;
        /// Optional element 'witsml2:ExtendCategory' of XSD type 'eml22:String64'
        std::string *ExtendCategory;
        /// Optional element 'witsml2:AffectedPersonnel' of XSD type 'witsml2:RiskAffectedPersonnel'
        std::vector<enum witsml2__RiskAffectedPersonnel> AffectedPersonnel;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:MdHoleStart' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHoleStart;
        /// Optional element 'witsml2:MdHoleEnd' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdHoleEnd;
        /// Optional element 'witsml2:TvdHoleStart' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdHoleStart;
        /// Optional element 'witsml2:TvdHoleEnd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdHoleEnd;
        /// Optional element 'witsml2:MdBitStart' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBitStart;
        /// Optional element 'witsml2:MdBitEnd' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdBitEnd;
        /// Optional element 'witsml2:DiaHole' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *DiaHole;
        /// Optional element 'witsml2:SeverityLevel' of XSD type 'witsml2:LevelIntegerCode'
        short *SeverityLevel;
        /// Optional element 'witsml2:ProbabilityLevel' of XSD type 'witsml2:LevelIntegerCode'
        short *ProbabilityLevel;
        /// Optional element 'witsml2:Summary' of XSD type 'eml22:String2000'
        std::string *Summary;
        /// Optional element 'witsml2:Details' of XSD type 'eml22:String2000'
        std::string *Details;
        /// Optional element 'witsml2:Identification' of XSD type 'eml22:String2000'
        std::string *Identification;
        /// Optional element 'witsml2:Contingency' of XSD type 'eml22:String2000'
        std::string *Contingency;
        /// Optional element 'witsml2:Mitigation' of XSD type 'eml22:String2000'
        std::vector<std::string> Mitigation;
        /// Optional element 'witsml2:ObjectReference' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> ObjectReference;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__Risk
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__Risk; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__Risk, default initialized and not managed by a soap context
        virtual witsml2__Risk *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__Risk); }
      public:
        /// Constructor with initializations
        witsml2__Risk() : Type(), Category(), SubCategory(), ExtendCategory(), AffectedPersonnel(), DTimStart(), DTimEnd(), MdHoleStart(), MdHoleEnd(), TvdHoleStart(), TvdHoleEnd(), MdBitStart(), MdBitEnd(), DiaHole(), SeverityLevel(), ProbabilityLevel(), Summary(), Details(), Identification(), Contingency(), Mitigation(), ObjectReference(), Wellbore() { }
        virtual ~witsml2__Risk() { }
        /// Friend allocator used by soap_new_witsml2__Risk(struct soap*, int)
        friend SOAP_FMAC1 witsml2__Risk * SOAP_FMAC2 soap_instantiate_witsml2__Risk(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:851 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditive (-221)
/* Type witsml2__StimAdditive is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StimAdditive': */
class SOAP_CMAC witsml2__StimAdditive : public witsml2__StimMaterial {
      public:
        /// Optional element 'witsml2:AdditiveKind' of XSD type 'witsml2:StimAdditiveKind'
        enum witsml2__StimAdditiveKind *AdditiveKind;
        /// Required element 'witsml2:Type' of XSD type 'eml22:String2000'
        std::string Type;
        /// Required element 'witsml2:SupplierCode' of XSD type 'eml22:String2000'
        std::string SupplierCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditive
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditive; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimAdditive, default initialized and not managed by a soap context
        virtual witsml2__StimAdditive *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimAdditive); }
      public:
        /// Constructor with initializations
        witsml2__StimAdditive() : AdditiveKind(), Type(), SupplierCode() { }
        virtual ~witsml2__StimAdditive() { }
        /// Friend allocator used by soap_new_witsml2__StimAdditive(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimAdditive * SOAP_FMAC2 soap_instantiate_witsml2__StimAdditive(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:872 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJob (-228)
/* Type witsml2__StimJob is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StimJob': */
class SOAP_CMAC witsml2__StimJob : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:AvgJobPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgJobPres;
        /// Optional element 'witsml2:BottomholeStaticTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *BottomholeStaticTemperature;
        /// Required element 'witsml2:CustomerName' of XSD type 'eml22:String2000'
        std::string CustomerName;
        /// Optional element 'witsml2:DTimArrival' of XSD type 'eml22:TimeStamp'
        struct tm *DTimArrival;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:FlowBackPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FlowBackPres;
        /// Optional element 'witsml2:FlowBackRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *FlowBackRate;
        /// Optional element 'witsml2:FlowBackVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *FlowBackVolume;
        /// Optional element 'witsml2:FluidEfficiency' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *FluidEfficiency;
        /// Optional element 'witsml2:HhpOrdered' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *HhpOrdered;
        /// Optional element 'witsml2:HhpUsed' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *HhpUsed;
        /// Optional element 'witsml2:JobPerforationClusters' of XSD type 'witsml2:StimPerforationClusterSet'
        witsml2__StimPerforationClusterSet *JobPerforationClusters;
        /// Required element 'witsml2:Kind' of XSD type 'eml22:String2000'
        std::string Kind;
        /// Optional element 'witsml2:MaxFluidRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *MaxFluidRate;
        /// Optional element 'witsml2:MaxJobPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxJobPres;
        /// Optional element 'witsml2:PIDXCommodityCode' of XSD type 'witsml2:PIDXCommodityCode'
        enum witsml2__PIDXCommodityCode *PIDXCommodityCode;
        /// Required element 'witsml2:ServiceCompany' of XSD type 'eml22:String2000'
        std::string ServiceCompany;
        /// Optional element 'witsml2:StageCount' of XSD type 'xsd:unsignedLong'
        ULONG64 *StageCount;
        /// Optional element 'witsml2:Supervisor' of XSD type 'eml22:String64'
        std::string *Supervisor;
        /// Optional element 'witsml2:TotalJobVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *TotalJobVolume;
        /// Optional element 'witsml2:TotalProppantInFormation' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *TotalProppantInFormation;
        /// Optional element 'witsml2:TotalProppantUsed' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *TotalProppantUsed;
        /// Optional element 'witsml2:TotalPumpTime' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *TotalPumpTime;
        /// Optional element 'witsml2:TreatingBottomholeTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *TreatingBottomholeTemperature;
        /// Optional element 'witsml2:JobStage' of XSD type 'witsml2:StimJobStage'
        std::vector<witsml2__StimJobStage *> JobStage;
        /// Optional element 'witsml2:MaterialUsed' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaterialUsed;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Required element 'witsml2:MaterialCatalog' of XSD type 'witsml2:StimJobMaterialCatalog'
        witsml2__StimJobMaterialCatalog *MaterialCatalog;
        /// Optional element 'witsml2:LogCatalog' of XSD type 'witsml2:StimJobLogCatalog'
        std::vector<witsml2__StimJobLogCatalog *> LogCatalog;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJob
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJob; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJob, default initialized and not managed by a soap context
        virtual witsml2__StimJob *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJob); }
      public:
        /// Constructor with initializations
        witsml2__StimJob() : AvgJobPres(), BottomholeStaticTemperature(), CustomerName(), DTimArrival(), DTimEnd(), DTimStart(), FlowBackPres(), FlowBackRate(), FlowBackVolume(), FluidEfficiency(), HhpOrdered(), HhpUsed(), JobPerforationClusters(), Kind(), MaxFluidRate(), MaxJobPres(), PIDXCommodityCode(), ServiceCompany(), StageCount(), Supervisor(), TotalJobVolume(), TotalProppantInFormation(), TotalProppantUsed(), TotalPumpTime(), TreatingBottomholeTemperature(), JobStage(), MaterialUsed(), Wellbore(), MaterialCatalog(), LogCatalog() { }
        virtual ~witsml2__StimJob() { }
        /// Friend allocator used by soap_new_witsml2__StimJob(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJob * SOAP_FMAC2 soap_instantiate_witsml2__StimJob(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:887 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStage (-233)
/* Type witsml2__StimJobStage is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StimJobStage': */
class SOAP_CMAC witsml2__StimJobStage : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:Number' of XSD type 'xsd:unsignedLong'
        ULONG64 *Number;
        /// Optional element 'witsml2:FractureHeight' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FractureHeight;
        /// Optional element 'witsml2:PercentPad' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PercentPad;
        /// Optional element 'witsml2:StagePerforationClusters' of XSD type 'witsml2:StimPerforationClusterSet'
        witsml2__StimPerforationClusterSet *StagePerforationClusters;
        /// Optional element 'witsml2:AvgBaseFluidReturnVolumeRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *AvgBaseFluidReturnVolumeRate;
        /// Optional element 'witsml2:AvgBHStaticTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *AvgBHStaticTemperature;
        /// Optional element 'witsml2:AvgBHTreatingTemperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *AvgBHTreatingTemperature;
        /// Optional element 'witsml2:AvgBottomholePumpedVolumeRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *AvgBottomholePumpedVolumeRate;
        /// Optional element 'witsml2:AvgConductivity' of XSD type 'eml22:LengthPerTimeMeasure'
        eml22__LengthPerTimeMeasure *AvgConductivity;
        /// Optional element 'witsml2:AvgFractureWidth' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *AvgFractureWidth;
        /// Optional element 'witsml2:AvgHydraulicPower' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *AvgHydraulicPower;
        /// Optional element 'witsml2:AvgPresAnnulus' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPresAnnulus;
        /// Optional element 'witsml2:AvgPresCasing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPresCasing;
        /// Optional element 'witsml2:AvgPresSurface' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPresSurface;
        /// Optional element 'witsml2:AvgPresTubing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *AvgPresTubing;
        /// Optional element 'witsml2:AvgProppantConcBottomhole' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AvgProppantConcBottomhole;
        /// Optional element 'witsml2:AvgProppantConcSurface' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *AvgProppantConcSurface;
        /// Optional element 'witsml2:AvgSlurryReturnVolumeRate' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *AvgSlurryReturnVolumeRate;
        /// Optional element 'witsml2:BreakDownPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *BreakDownPres;
        /// Optional element 'witsml2:ClosureDuration' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *ClosureDuration;
        /// Optional element 'witsml2:ClosurePres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *ClosurePres;
        /// Optional element 'witsml2:DTimEnd' of XSD type 'eml22:TimeStamp'
        struct tm *DTimEnd;
        /// Optional element 'witsml2:DTimStart' of XSD type 'eml22:TimeStamp'
        struct tm *DTimStart;
        /// Optional element 'witsml2:FormationBreakLengthPerDay' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FormationBreakLengthPerDay;
        /// Optional element 'witsml2:FormationName' of XSD type 'eml22:String2000'
        std::string *FormationName;
        /// Optional element 'witsml2:FormationProppantMass' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *FormationProppantMass;
        /// Optional element 'witsml2:FractureGradientFinal' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FractureGradientFinal;
        /// Optional element 'witsml2:FractureGradientInitial' of XSD type 'eml22:ForcePerVolumeMeasure'
        eml22__ForcePerVolumeMeasure *FractureGradientInitial;
        /// Optional element 'witsml2:FractureLength' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *FractureLength;
        /// Optional element 'witsml2:FrictionPressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FrictionPressure;
        /// Optional element 'witsml2:HhpOrderedCO2' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *HhpOrderedCO2;
        /// Optional element 'witsml2:HhpOrderedFluid' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *HhpOrderedFluid;
        /// Optional element 'witsml2:HhpUsedCO2' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *HhpUsedCO2;
        /// Optional element 'witsml2:HhpUsedFluid' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *HhpUsedFluid;
        /// Optional element 'witsml2:InitialShutinPres' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *InitialShutinPres;
        /// Optional element 'witsml2:MaxFluidVolumeRateAnnulus' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *MaxFluidVolumeRateAnnulus;
        /// Optional element 'witsml2:MaxFluidVolumeRateCasing' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *MaxFluidVolumeRateCasing;
        /// Optional element 'witsml2:MaxFluidVolumeRateTubing' of XSD type 'eml22:VolumePerTimeMeasure'
        eml22__VolumePerTimeMeasure *MaxFluidVolumeRateTubing;
        /// Optional element 'witsml2:MaxHydraulicPower' of XSD type 'eml22:PowerMeasure'
        eml22__PowerMeasure *MaxHydraulicPower;
        /// Optional element 'witsml2:MaxPresAnnulus' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPresAnnulus;
        /// Optional element 'witsml2:MaxPresCasing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPresCasing;
        /// Optional element 'witsml2:MaxPresSurface' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPresSurface;
        /// Optional element 'witsml2:MaxPresTubing' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *MaxPresTubing;
        /// Optional element 'witsml2:MaxProppantConcBottomhole' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MaxProppantConcBottomhole;
        /// Optional element 'witsml2:MaxProppantConcSurface' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *MaxProppantConcSurface;
        /// Optional element 'witsml2:MdFormationBottom' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdFormationBottom;
        /// Optional element 'witsml2:MdFormationTop' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdFormationTop;
        /// Optional element 'witsml2:MdOpenHoleBottom' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdOpenHoleBottom;
        /// Optional element 'witsml2:MdOpenHoleTop' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *MdOpenHoleTop;
        /// Optional element 'witsml2:NetPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *NetPres;
        /// Optional element 'witsml2:OpenHoleDiameter' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *OpenHoleDiameter;
        /// Optional element 'witsml2:OpenHoleName' of XSD type 'eml22:String2000'
        std::string *OpenHoleName;
        /// Optional element 'witsml2:PercentProppantPumped' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *PercentProppantPumped;
        /// Optional element 'witsml2:PerfBallCount' of XSD type 'xsd:unsignedLong'
        ULONG64 *PerfBallCount;
        /// Optional element 'witsml2:PerfBallSize' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *PerfBallSize;
        /// Optional element 'witsml2:PerfProppantConc' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *PerfProppantConc;
        /// Optional element 'witsml2:ProppantHeight' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *ProppantHeight;
        /// Optional element 'witsml2:ScreenedOut' of XSD type 'xsd:boolean'
        bool *ScreenedOut;
        /// Optional element 'witsml2:ScreenOutPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *ScreenOutPres;
        /// Optional element 'witsml2:TechnologyType' of XSD type 'eml22:String64'
        std::string *TechnologyType;
        /// Optional element 'witsml2:TotalProppantInFormation' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *TotalProppantInFormation;
        /// Optional element 'witsml2:TotalPumpTime' of XSD type 'eml22:TimeMeasure'
        eml22__TimeMeasure *TotalPumpTime;
        /// Optional element 'witsml2:TotalVolume' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *TotalVolume;
        /// Optional element 'witsml2:TvdFormationBottom' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdFormationBottom;
        /// Optional element 'witsml2:TvdFormationTop' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdFormationTop;
        /// Optional element 'witsml2:TvdOpenHoleBottom' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdOpenHoleBottom;
        /// Optional element 'witsml2:TvdOpenHoleTop' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *TvdOpenHoleTop;
        /// Optional element 'witsml2:VolumeBody' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumeBody;
        /// Optional element 'witsml2:VolumeFlush' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumeFlush;
        /// Optional element 'witsml2:VolumePad' of XSD type 'eml22:VolumeMeasure'
        eml22__VolumeMeasure *VolumePad;
        /// Optional element 'witsml2:WaterSource' of XSD type 'eml22:String2000'
        std::string *WaterSource;
        /// Optional element 'witsml2:WellboreProppantMass' of XSD type 'eml22:MassMeasure'
        eml22__MassMeasure *WellboreProppantMass;
        /// Optional element 'witsml2:PdatSession' of XSD type 'witsml2:StimJobDiagnosticSession'
        std::vector<witsml2__StimJobDiagnosticSession *> PdatSession;
        /// Optional element 'witsml2:ShutInPres' of XSD type 'witsml2:StimShutInPressure'
        std::vector<witsml2__StimShutInPressure *> ShutInPres;
        /// Optional element 'witsml2:JobEvent' of XSD type 'witsml2:StimEvent'
        std::vector<witsml2__StimEvent *> JobEvent;
        /// Optional element 'witsml2:JobStep' of XSD type 'witsml2:StimJobStep'
        std::vector<witsml2__StimJobStep *> JobStep;
        /// Optional element 'witsml2:MaxMaterialUsageRate' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaxMaterialUsageRate;
        /// Optional element 'witsml2:MaterialUsed' of XSD type 'witsml2:StimMaterialQuantity'
        std::vector<witsml2__StimMaterialQuantity *> MaterialUsed;
        /// Optional element 'witsml2:FlowPath' of XSD type 'witsml2:StimFlowPath'
        witsml2__StimFlowPath *FlowPath;
        /// Optional element 'witsml2:StimStageLog' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> StimStageLog;
        /// Optional element 'witsml2:ReservoirInterval' of XSD type 'witsml2:StimReservoirInterval'
        std::vector<witsml2__StimReservoirInterval *> ReservoirInterval;
        /// Optional element 'witsml2:Diversion' of XSD type 'witsml2:StimJobDiversion'
        witsml2__StimJobDiversion *Diversion;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimJobStage, default initialized and not managed by a soap context
        virtual witsml2__StimJobStage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimJobStage); }
      public:
        /// Constructor with initializations
        witsml2__StimJobStage() : Number(), FractureHeight(), PercentPad(), StagePerforationClusters(), AvgBaseFluidReturnVolumeRate(), AvgBHStaticTemperature(), AvgBHTreatingTemperature(), AvgBottomholePumpedVolumeRate(), AvgConductivity(), AvgFractureWidth(), AvgHydraulicPower(), AvgPresAnnulus(), AvgPresCasing(), AvgPresSurface(), AvgPresTubing(), AvgProppantConcBottomhole(), AvgProppantConcSurface(), AvgSlurryReturnVolumeRate(), BreakDownPres(), ClosureDuration(), ClosurePres(), DTimEnd(), DTimStart(), FormationBreakLengthPerDay(), FormationName(), FormationProppantMass(), FractureGradientFinal(), FractureGradientInitial(), FractureLength(), FrictionPressure(), HhpOrderedCO2(), HhpOrderedFluid(), HhpUsedCO2(), HhpUsedFluid(), InitialShutinPres(), MaxFluidVolumeRateAnnulus(), MaxFluidVolumeRateCasing(), MaxFluidVolumeRateTubing(), MaxHydraulicPower(), MaxPresAnnulus(), MaxPresCasing(), MaxPresSurface(), MaxPresTubing(), MaxProppantConcBottomhole(), MaxProppantConcSurface(), MdFormationBottom(), MdFormationTop(), MdOpenHoleBottom(), MdOpenHoleTop(), NetPres(), OpenHoleDiameter(), OpenHoleName(), PercentProppantPumped(), PerfBallCount(), PerfBallSize(), PerfProppantConc(), ProppantHeight(), ScreenedOut(), ScreenOutPres(), TechnologyType(), TotalProppantInFormation(), TotalPumpTime(), TotalVolume(), TvdFormationBottom(), TvdFormationTop(), TvdOpenHoleBottom(), TvdOpenHoleTop(), VolumeBody(), VolumeFlush(), VolumePad(), WaterSource(), WellboreProppantMass(), PdatSession(), ShutInPres(), JobEvent(), JobStep(), MaxMaterialUsageRate(), MaterialUsed(), FlowPath(), StimStageLog(), ReservoirInterval(), Diversion(), uid() { }
        virtual ~witsml2__StimJobStage() { }
        /// Friend allocator used by soap_new_witsml2__StimJobStage(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimJobStage * SOAP_FMAC2 soap_instantiate_witsml2__StimJobStage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:899 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationCluster (-237)
/* Type witsml2__StimPerforationCluster is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StimPerforationCluster': */
class SOAP_CMAC witsml2__StimPerforationCluster : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:MdPerforatedInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdPerforatedInterval;
        /// Optional element 'witsml2:TvdPerforatedInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *TvdPerforatedInterval;
        /// Optional element 'witsml2:Type' of XSD type 'eml22:String64'
        std::string *Type;
        /// Optional element 'witsml2:PerforationCount' of XSD type 'xsd:unsignedLong'
        ULONG64 *PerforationCount;
        /// Optional element 'witsml2:Size' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *Size;
        /// Optional element 'witsml2:DensityPerforation' of XSD type 'eml22:ReciprocalLengthMeasure'
        eml22__ReciprocalLengthMeasure *DensityPerforation;
        /// Optional element 'witsml2:PhasingPerforation' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *PhasingPerforation;
        /// Optional element 'witsml2:FrictionFactor' of XSD type 'xsd:double'
        double *FrictionFactor;
        /// Optional element 'witsml2:FrictionPres' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *FrictionPres;
        /// Optional element 'witsml2:DischargeCoefficient' of XSD type 'xsd:double'
        double *DischargeCoefficient;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationCluster
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationCluster; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimPerforationCluster, default initialized and not managed by a soap context
        virtual witsml2__StimPerforationCluster *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimPerforationCluster); }
      public:
        /// Constructor with initializations
        witsml2__StimPerforationCluster() : MdPerforatedInterval(), TvdPerforatedInterval(), Type(), PerforationCount(), Size(), DensityPerforation(), PhasingPerforation(), FrictionFactor(), FrictionPres(), DischargeCoefficient() { }
        virtual ~witsml2__StimPerforationCluster() { }
        /// Friend allocator used by soap_new_witsml2__StimPerforationCluster(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimPerforationCluster * SOAP_FMAC2 soap_instantiate_witsml2__StimPerforationCluster(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:908 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimProppantAgent (-240)
/* Type witsml2__StimProppantAgent is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:StimProppantAgent': */
class SOAP_CMAC witsml2__StimProppantAgent : public witsml2__StimMaterial {
      public:
        /// Optional element 'witsml2:FrictionCoefficientLaminar' of XSD type 'xsd:double'
        double *FrictionCoefficientLaminar;
        /// Optional element 'witsml2:FrictionCoefficientTurbulent' of XSD type 'xsd:double'
        double *FrictionCoefficientTurbulent;
        /// Optional element 'witsml2:MassAbsorptionCoefficient' of XSD type 'eml22:AreaPerMassMeasure'
        eml22__AreaPerMassMeasure *MassAbsorptionCoefficient;
        /// Optional element 'witsml2:MeshSizeHigh' of XSD type 'xsd:unsignedLong'
        ULONG64 *MeshSizeHigh;
        /// Optional element 'witsml2:MeshSizeLow' of XSD type 'xsd:unsignedLong'
        ULONG64 *MeshSizeLow;
        /// Optional element 'witsml2:UnconfinedCompressiveStrength' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *UnconfinedCompressiveStrength;
        /// Optional element 'witsml2:ProppantAgentKind' of XSD type 'witsml2:ProppantAgentKind'
        enum witsml2__ProppantAgentKind *ProppantAgentKind;
        /// Optional element 'witsml2:ISO13503_2Properties' of XSD type 'witsml2:StimISO13503_2Properties'
        std::vector<witsml2__StimISO13503_USCORE2Properties *> ISO13503_USCORE2Properties;
        /// Optional element 'witsml2:ISO13503_5Point' of XSD type 'witsml2:StimISO13503_5Point'
        std::vector<witsml2__StimISO13503_USCORE5Point *> ISO13503_USCORE5Point;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__StimProppantAgent
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__StimProppantAgent; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__StimProppantAgent, default initialized and not managed by a soap context
        virtual witsml2__StimProppantAgent *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__StimProppantAgent); }
      public:
        /// Constructor with initializations
        witsml2__StimProppantAgent() : FrictionCoefficientLaminar(), FrictionCoefficientTurbulent(), MassAbsorptionCoefficient(), MeshSizeHigh(), MeshSizeLow(), UnconfinedCompressiveStrength(), ProppantAgentKind(), ISO13503_USCORE2Properties(), ISO13503_USCORE5Point() { }
        virtual ~witsml2__StimProppantAgent() { }
        /// Friend allocator used by soap_new_witsml2__StimProppantAgent(struct soap*, int)
        friend SOAP_FMAC1 witsml2__StimProppantAgent * SOAP_FMAC2 soap_instantiate_witsml2__StimProppantAgent(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:932 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurveyProgram (-248)
/* Type witsml2__SurveyProgram is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:SurveyProgram': */
class SOAP_CMAC witsml2__SurveyProgram : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:SurveyVer' of XSD type 'xsd:unsignedLong'
        ULONG64 SurveyVer;
        /// Optional element 'witsml2:Engineer' of XSD type 'eml22:String64'
        std::string *Engineer;
        /// Optional element 'witsml2:Final' of XSD type 'eml22:String64'
        std::string *Final;
        /// Optional element 'witsml2:SurveySection' of XSD type 'witsml2:SurveySection'
        std::vector<witsml2__SurveySection *> SurveySection;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__SurveyProgram
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__SurveyProgram; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__SurveyProgram, default initialized and not managed by a soap context
        virtual witsml2__SurveyProgram *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__SurveyProgram); }
      public:
        /// Constructor with initializations
        witsml2__SurveyProgram() : SurveyVer(), Engineer(), Final(), SurveySection(), Wellbore() { }
        virtual ~witsml2__SurveyProgram() { }
        /// Friend allocator used by soap_new_witsml2__SurveyProgram(struct soap*, int)
        friend SOAP_FMAC1 witsml2__SurveyProgram * SOAP_FMAC2 soap_instantiate_witsml2__SurveyProgram(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:938 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeology (-250)
/* Type witsml2__CuttingsGeology is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CuttingsGeology': */
class SOAP_CMAC witsml2__CuttingsGeology : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:CuttingsInterval' of XSD type 'witsml2:CuttingsGeologyInterval'
        std::vector<witsml2__CuttingsGeologyInterval *> CuttingsInterval;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsGeology, default initialized and not managed by a soap context
        virtual witsml2__CuttingsGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsGeology); }
      public:
        /// Constructor with initializations
        witsml2__CuttingsGeology() : MdInterval(), GrowingStatus(), CuttingsInterval(), Wellbore() { }
        virtual ~witsml2__CuttingsGeology() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsGeology * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:941 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeologyInterval (-251)
/* Type witsml2__CuttingsGeologyInterval is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:CuttingsGeologyInterval': */
class SOAP_CMAC witsml2__CuttingsGeologyInterval : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'witsml2:DensBulk' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensBulk;
        /// Optional element 'witsml2:DensShale' of XSD type 'eml22:MassPerVolumeMeasure'
        eml22__MassPerVolumeMeasure *DensShale;
        /// Optional element 'witsml2:Calcite' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Calcite;
        /// Optional element 'witsml2:CalcStab' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *CalcStab;
        /// Optional element 'witsml2:Cec' of XSD type 'eml22:DimensionlessMeasure'
        eml22__DimensionlessMeasure *Cec;
        /// Optional element 'witsml2:Dolomite' of XSD type 'eml22:VolumePerVolumeMeasure'
        eml22__VolumePerVolumeMeasure *Dolomite;
        /// Optional element 'witsml2:SizeMin' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeMin;
        /// Optional element 'witsml2:SizeMax' of XSD type 'eml22:LengthMeasure'
        eml22__LengthMeasure *SizeMax;
        /// Optional element 'witsml2:Qft' of XSD type 'eml22:IlluminanceMeasure'
        eml22__IlluminanceMeasure *Qft;
        /// Optional element 'witsml2:CleaningMethod' of XSD type 'eml22:String64'
        std::string *CleaningMethod;
        /// Optional element 'witsml2:DryingMethod' of XSD type 'eml22:String64'
        std::string *DryingMethod;
        /// Optional element 'witsml2:CuttingsIntervalLithology' of XSD type 'witsml2:CuttingsIntervalLithology'
        std::vector<witsml2__CuttingsIntervalLithology *> CuttingsIntervalLithology;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeologyInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeologyInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__CuttingsGeologyInterval, default initialized and not managed by a soap context
        virtual witsml2__CuttingsGeologyInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__CuttingsGeologyInterval); }
      public:
        /// Constructor with initializations
        witsml2__CuttingsGeologyInterval() : MdInterval(), Citation(), DensBulk(), DensShale(), Calcite(), CalcStab(), Cec(), Dolomite(), SizeMin(), SizeMax(), Qft(), CleaningMethod(), DryingMethod(), CuttingsIntervalLithology(), uid() { }
        virtual ~witsml2__CuttingsGeologyInterval() { }
        /// Friend allocator used by soap_new_witsml2__CuttingsGeologyInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__CuttingsGeologyInterval * SOAP_FMAC2 soap_instantiate_witsml2__CuttingsGeologyInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:953 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeology (-255)
/* Type witsml2__InterpretedGeology is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:InterpretedGeology': */
class SOAP_CMAC witsml2__InterpretedGeology : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:GeologicIntervalInterpreted' of XSD type 'witsml2:InterpretedGeologyInterval'
        std::vector<witsml2__InterpretedGeologyInterval *> GeologicIntervalInterpreted;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__InterpretedGeology, default initialized and not managed by a soap context
        virtual witsml2__InterpretedGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__InterpretedGeology); }
      public:
        /// Constructor with initializations
        witsml2__InterpretedGeology() : MdInterval(), GrowingStatus(), GeologicIntervalInterpreted(), Wellbore() { }
        virtual ~witsml2__InterpretedGeology() { }
        /// Friend allocator used by soap_new_witsml2__InterpretedGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__InterpretedGeology * SOAP_FMAC2 soap_instantiate_witsml2__InterpretedGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:956 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeologyInterval (-256)
/* Type witsml2__InterpretedGeologyInterval is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:InterpretedGeologyInterval': */
class SOAP_CMAC witsml2__InterpretedGeologyInterval : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'witsml2:GeochronologicalUnit' of XSD type 'witsml2:GeochronologicalUnit'
        std::vector<witsml2__GeochronologicalUnit *> GeochronologicalUnit;
        /// Optional element 'witsml2:LithostratigraphicUnit' of XSD type 'witsml2:LithostratigraphicUnit'
        std::vector<witsml2__LithostratigraphicUnit *> LithostratigraphicUnit;
        /// Optional element 'witsml2:InterpretedLithology' of XSD type 'witsml2:InterpretedIntervalLithology'
        witsml2__InterpretedIntervalLithology *InterpretedLithology;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeologyInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeologyInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__InterpretedGeologyInterval, default initialized and not managed by a soap context
        virtual witsml2__InterpretedGeologyInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__InterpretedGeologyInterval); }
      public:
        /// Constructor with initializations
        witsml2__InterpretedGeologyInterval() : MdInterval(), Citation(), GeochronologicalUnit(), LithostratigraphicUnit(), InterpretedLithology(), uid() { }
        virtual ~witsml2__InterpretedGeologyInterval() { }
        /// Friend allocator used by soap_new_witsml2__InterpretedGeologyInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__InterpretedGeologyInterval * SOAP_FMAC2 soap_instantiate_witsml2__InterpretedGeologyInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:968 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluation (-260)
/* Type witsml2__ShowEvaluation is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ShowEvaluation': */
class SOAP_CMAC witsml2__ShowEvaluation : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Optional element 'witsml2:EvaluatedIntervalShow' of XSD type 'witsml2:ShowEvaluationInterval'
        std::vector<witsml2__ShowEvaluationInterval *> EvaluatedIntervalShow;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShowEvaluation, default initialized and not managed by a soap context
        virtual witsml2__ShowEvaluation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShowEvaluation); }
      public:
        /// Constructor with initializations
        witsml2__ShowEvaluation() : MdInterval(), GrowingStatus(), EvaluatedIntervalShow(), Wellbore() { }
        virtual ~witsml2__ShowEvaluation() { }
        /// Friend allocator used by soap_new_witsml2__ShowEvaluation(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShowEvaluation * SOAP_FMAC2 soap_instantiate_witsml2__ShowEvaluation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:971 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluationInterval (-261)
/* Type witsml2__ShowEvaluationInterval is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:ShowEvaluationInterval': */
class SOAP_CMAC witsml2__ShowEvaluationInterval : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:Citation' of XSD type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Required element 'witsml2:ShowFluid' of XSD type 'witsml2:ShowFluid'
        enum witsml2__ShowFluid ShowFluid;
        /// Optional element 'witsml2:ShowRating' of XSD type 'witsml2:ShowRating'
        enum witsml2__ShowRating *ShowRating;
        /// required attribute 'uid' of XSD type 'eml22:String64'
        std::string uid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluationInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluationInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__ShowEvaluationInterval, default initialized and not managed by a soap context
        virtual witsml2__ShowEvaluationInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__ShowEvaluationInterval); }
      public:
        /// Constructor with initializations
        witsml2__ShowEvaluationInterval() : MdInterval(), Citation(), ShowFluid(), ShowRating(), uid() { }
        virtual ~witsml2__ShowEvaluationInterval() { }
        /// Friend allocator used by soap_new_witsml2__ShowEvaluationInterval(struct soap*, int)
        friend SOAP_FMAC1 witsml2__ShowEvaluationInterval * SOAP_FMAC2 soap_instantiate_witsml2__ShowEvaluationInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:974 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeology (-262)
/* Type witsml2__WellboreGeology is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellboreGeology': */
class SOAP_CMAC witsml2__WellboreGeology : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MdInterval;
        /// Optional element 'witsml2:ShowIntervalSet' of XSD type 'witsml2:ShowEvaluation'
        witsml2__ShowEvaluation *ShowIntervalSet;
        /// Optional element 'witsml2:InterpretedGeologyIntervalSet' of XSD type 'witsml2:InterpretedGeology'
        witsml2__InterpretedGeology *InterpretedGeologyIntervalSet;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:CuttingsIntervalSet' of XSD type 'witsml2:CuttingsGeology'
        witsml2__CuttingsGeology *CuttingsIntervalSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreGeology, default initialized and not managed by a soap context
        virtual witsml2__WellboreGeology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreGeology); }
      public:
        /// Constructor with initializations
        witsml2__WellboreGeology() : MdInterval(), ShowIntervalSet(), InterpretedGeologyIntervalSet(), Wellbore(), CuttingsIntervalSet() { }
        virtual ~witsml2__WellboreGeology() { }
        /// Friend allocator used by soap_new_witsml2__WellboreGeology(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreGeology * SOAP_FMAC2 soap_instantiate_witsml2__WellboreGeology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1001 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogConcentrationParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogConcentrationParameter (-271)
/* Type witsml2__MudLogConcentrationParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogConcentrationParameter': */
class SOAP_CMAC witsml2__MudLogConcentrationParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XSD type 'eml22:VolumePerVolumeMeasureExt'
        eml22__VolumePerVolumeMeasureExt *Value;
        /// Required element 'witsml2:ConcentrationParameterKind' of XSD type 'witsml2:ConcentrationParameterKind'
        enum witsml2__ConcentrationParameterKind ConcentrationParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogConcentrationParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogConcentrationParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogConcentrationParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogConcentrationParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogConcentrationParameter); }
      public:
        /// Constructor with initializations
        witsml2__MudLogConcentrationParameter() : Value(), ConcentrationParameterKind() { }
        virtual ~witsml2__MudLogConcentrationParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogConcentrationParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogConcentrationParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogConcentrationParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1004 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogForceParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogForceParameter (-272)
/* Type witsml2__MudLogForceParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogForceParameter': */
class SOAP_CMAC witsml2__MudLogForceParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XSD type 'eml22:ForceMeasureExt'
        eml22__ForceMeasureExt *Value;
        /// Required element 'witsml2:ForceParameterKind' of XSD type 'witsml2:ForceParameterKind'
        enum witsml2__ForceParameterKind ForceParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogForceParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogForceParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogForceParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogForceParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogForceParameter); }
      public:
        /// Constructor with initializations
        witsml2__MudLogForceParameter() : Value(), ForceParameterKind() { }
        virtual ~witsml2__MudLogForceParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogForceParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogForceParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogForceParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1010 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureGradientParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureGradientParameter (-274)
/* Type witsml2__MudLogPressureGradientParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogPressureGradientParameter': */
class SOAP_CMAC witsml2__MudLogPressureGradientParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XSD type 'eml22:ForcePerVolumeMeasureExt'
        eml22__ForcePerVolumeMeasureExt *Value;
        /// Required element 'witsml2:PressureGradientParameterKind' of XSD type 'witsml2:PressureGradientParameterKind'
        enum witsml2__PressureGradientParameterKind PressureGradientParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureGradientParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureGradientParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogPressureGradientParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogPressureGradientParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogPressureGradientParameter); }
      public:
        /// Constructor with initializations
        witsml2__MudLogPressureGradientParameter() : Value(), PressureGradientParameterKind() { }
        virtual ~witsml2__MudLogPressureGradientParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogPressureGradientParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogPressureGradientParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogPressureGradientParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1013 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureParameter (-275)
/* Type witsml2__MudLogPressureParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogPressureParameter': */
class SOAP_CMAC witsml2__MudLogPressureParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XSD type 'eml22:PressureMeasureExt'
        eml22__PressureMeasureExt *Value;
        /// Required element 'witsml2:PressureParameterKind' of XSD type 'witsml2:PressureParameterKind'
        enum witsml2__PressureParameterKind PressureParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogPressureParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogPressureParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogPressureParameter); }
      public:
        /// Constructor with initializations
        witsml2__MudLogPressureParameter() : Value(), PressureParameterKind() { }
        virtual ~witsml2__MudLogPressureParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogPressureParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogPressureParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogPressureParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1016 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogReport (-276)
/* Type witsml2__MudLogReport is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogReport': */
class SOAP_CMAC witsml2__MudLogReport : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:MudLogCompany' of XSD type 'eml22:String64'
        std::string *MudLogCompany;
        /// Optional element 'witsml2:MudLogEngineers' of XSD type 'eml22:String2000'
        std::string *MudLogEngineers;
        /// Optional element 'witsml2:MudLogGeologists' of XSD type 'eml22:String2000'
        std::string *MudLogGeologists;
        /// Optional element 'witsml2:ReportMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *ReportMdInterval;
        /// Required element 'witsml2:GrowingStatus' of XSD type 'witsml2:ChannelStatus'
        enum witsml2__ChannelStatus GrowingStatus;
        /// Required element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:WellboreGeology' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WellboreGeology;
        /// Optional element 'witsml2:MudlogIntervals' of XSD type 'witsml2:MudlogReportInterval'
        std::vector<witsml2__MudlogReportInterval *> MudlogIntervals;
        /// Optional element 'witsml2:RelatedLogs' of XSD type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> RelatedLogs;
        /// Optional element 'witsml2:Parameter' of XSD type 'witsml2:MudLogParameter'
        std::vector<witsml2__MudLogParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogReport
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogReport; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogReport, default initialized and not managed by a soap context
        virtual witsml2__MudLogReport *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogReport); }
      public:
        /// Constructor with initializations
        witsml2__MudLogReport() : MudLogCompany(), MudLogEngineers(), MudLogGeologists(), ReportMdInterval(), GrowingStatus(), Wellbore(), WellboreGeology(), MudlogIntervals(), RelatedLogs(), Parameter() { }
        virtual ~witsml2__MudLogReport() { }
        /// Friend allocator used by soap_new_witsml2__MudLogReport(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogReport * SOAP_FMAC2 soap_instantiate_witsml2__MudLogReport(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1022 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameter (-278)
/* Type witsml2__MudLogStringParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:MudLogStringParameter': */
class SOAP_CMAC witsml2__MudLogStringParameter : public witsml2__MudLogParameter {
      public:
        /// Required element 'witsml2:Value' of XSD type 'eml22:String64'
        std::string Value;
        /// Required element 'witsml2:MudLogStringParameterKind' of XSD type 'witsml2:MudLogStringParameterKind'
        enum witsml2__MudLogStringParameterKind MudLogStringParameterKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__MudLogStringParameter, default initialized and not managed by a soap context
        virtual witsml2__MudLogStringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__MudLogStringParameter); }
      public:
        /// Constructor with initializations
        witsml2__MudLogStringParameter() : Value(), MudLogStringParameterKind() { }
        virtual ~witsml2__MudLogStringParameter() { }
        /// Friend allocator used by soap_new_witsml2__MudLogStringParameter(struct soap*, int)
        friend SOAP_FMAC1 witsml2__MudLogStringParameter * SOAP_FMAC2 soap_instantiate_witsml2__MudLogStringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1040 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarker (-284)
/* Type witsml2__WellboreMarker is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellboreMarker': */
class SOAP_CMAC witsml2__WellboreMarker : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:ChronostratigraphicTop' of XSD type 'witsml2:GeochronologicalUnit'
        witsml2__GeochronologicalUnit *ChronostratigraphicTop;
        /// Optional element 'witsml2:LithostratigraphicTop' of XSD type 'witsml2:LithostratigraphicUnit'
        witsml2__LithostratigraphicUnit *LithostratigraphicTop;
        /// Required element 'witsml2:Md' of XSD type 'eml22:MeasuredDepthCoord'
        eml22__MeasuredDepthCoord *Md;
        /// Optional element 'witsml2:Tvd' of XSD type 'eml22:WellVerticalDepthCoord'
        eml22__WellVerticalDepthCoord *Tvd;
        /// Optional element 'witsml2:DipAngle' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *DipAngle;
        /// Optional element 'witsml2:DipDirection' of XSD type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *DipDirection;
        /// Optional element 'witsml2:Trajectory' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Trajectory;
        /// Optional element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreMarker, default initialized and not managed by a soap context
        virtual witsml2__WellboreMarker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreMarker); }
      public:
        /// Constructor with initializations
        witsml2__WellboreMarker() : ChronostratigraphicTop(), LithostratigraphicTop(), Md(), Tvd(), DipAngle(), DipDirection(), Trajectory(), Wellbore() { }
        virtual ~witsml2__WellboreMarker() { }
        /// Friend allocator used by soap_new_witsml2__WellboreMarker(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreMarker * SOAP_FMAC2 soap_instantiate_witsml2__WellboreMarker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1043 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarkerSet (-285)
/* Type witsml2__WellboreMarkerSet is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellboreMarkerSet': */
class SOAP_CMAC witsml2__WellboreMarkerSet : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:MarkerSetInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *MarkerSetInterval;
        /// Optional element 'witsml2:Wellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Wellbore;
        /// Optional element 'witsml2:FormationMarker' of XSD type 'witsml2:WellboreMarker'
        std::vector<witsml2__WellboreMarker *> FormationMarker;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarkerSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarkerSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreMarkerSet, default initialized and not managed by a soap context
        virtual witsml2__WellboreMarkerSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreMarkerSet); }
      public:
        /// Constructor with initializations
        witsml2__WellboreMarkerSet() : MarkerSetInterval(), Wellbore(), FormationMarker() { }
        virtual ~witsml2__WellboreMarkerSet() { }
        /// Friend allocator used by soap_new_witsml2__WellboreMarkerSet(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreMarkerSet * SOAP_FMAC2 soap_instantiate_witsml2__WellboreMarkerSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1049 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellCompletion (-287)
/* Type witsml2__WellCompletion is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellCompletion': */
class SOAP_CMAC witsml2__WellCompletion : public eml22__AbstractObject {
      public:
        /// Optional element 'witsml2:FieldID' of XSD type 'eml22:String64'
        std::string *FieldID;
        /// Optional element 'witsml2:FieldCode' of XSD type 'eml22:String64'
        std::string *FieldCode;
        /// Optional element 'witsml2:FieldType' of XSD type 'eml22:String64'
        std::string *FieldType;
        /// Optional element 'witsml2:EffectiveDate' of XSD type 'eml22:TimeStamp'
        struct tm *EffectiveDate;
        /// Optional element 'witsml2:ExpiredDate' of XSD type 'eml22:TimeStamp'
        struct tm *ExpiredDate;
        /// Optional element 'witsml2:E_P_RightsID' of XSD type 'eml22:String64'
        std::string *E_USCOREP_USCORERightsID;
        /// Optional element 'witsml2:CurrentStatus' of XSD type 'witsml2:CompletionStatus'
        enum witsml2__CompletionStatus *CurrentStatus;
        /// Optional element 'witsml2:StatusDate' of XSD type 'eml22:TimeStamp'
        struct tm *StatusDate;
        /// Optional element 'witsml2:StatusHistory' of XSD type 'witsml2:CompletionStatusHistory'
        std::vector<witsml2__CompletionStatusHistory *> StatusHistory;
        /// Required element 'witsml2:Well' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Well;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellCompletion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellCompletion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellCompletion, default initialized and not managed by a soap context
        virtual witsml2__WellCompletion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellCompletion); }
      public:
        /// Constructor with initializations
        witsml2__WellCompletion() : FieldID(), FieldCode(), FieldType(), EffectiveDate(), ExpiredDate(), E_USCOREP_USCORERightsID(), CurrentStatus(), StatusDate(), StatusHistory(), Well() { }
        virtual ~witsml2__WellCompletion() { }
        /// Friend allocator used by soap_new_witsml2__WellCompletion(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellCompletion * SOAP_FMAC2 soap_instantiate_witsml2__WellCompletion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1073 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreCompletion (-295)
/* Type witsml2__WellboreCompletion is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:WellboreCompletion': */
class SOAP_CMAC witsml2__WellboreCompletion : public eml22__AbstractObject {
      public:
        /// Required element 'witsml2:NameWellCompletion' of XSD type 'eml22:String64'
        std::string NameWellCompletion;
        /// Optional element 'witsml2:WellboreCompletionNo' of XSD type 'eml22:String64'
        std::string *WellboreCompletionNo;
        /// Optional element 'witsml2:WellboreCompletionAlias' of XSD type 'eml22:String64'
        std::string *WellboreCompletionAlias;
        /// Optional element 'witsml2:EventHistory' of XSD type 'witsml2:EventInfo'
        std::vector<witsml2__EventInfo *> EventHistory;
        /// Optional element 'witsml2:WellboreCompletionDate' of XSD type 'eml22:TimeStamp'
        struct tm *WellboreCompletionDate;
        /// Optional element 'witsml2:SuffixAPI' of XSD type 'eml22:String64'
        std::string *SuffixAPI;
        /// Optional element 'witsml2:CompletionMdInterval' of XSD type 'eml22:MdInterval'
        eml22__MdInterval *CompletionMdInterval;
        /// Optional element 'witsml2:CompletionTvdInterval' of XSD type 'eml22:TvdInterval'
        eml22__TvdInterval *CompletionTvdInterval;
        /// Optional element 'witsml2:CurrentStatus' of XSD type 'witsml2:CompletionStatus'
        enum witsml2__CompletionStatus *CurrentStatus;
        /// Optional element 'witsml2:StatusDate' of XSD type 'eml22:TimeStamp'
        struct tm *StatusDate;
        /// Optional element 'witsml2:StatusHistory' of XSD type 'witsml2:CompletionStatusHistory'
        std::vector<witsml2__CompletionStatusHistory *> StatusHistory;
        /// Optional element 'witsml2:ContactIntervalSet' of XSD type 'witsml2:ContactIntervalSet'
        witsml2__ContactIntervalSet *ContactIntervalSet;
        /// Required element 'witsml2:ReferenceWellbore' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ReferenceWellbore;
        /// Required element 'witsml2:WellCompletion' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WellCompletion;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreCompletion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreCompletion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellboreCompletion, default initialized and not managed by a soap context
        virtual witsml2__WellboreCompletion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellboreCompletion); }
      public:
        /// Constructor with initializations
        witsml2__WellboreCompletion() : NameWellCompletion(), WellboreCompletionNo(), WellboreCompletionAlias(), EventHistory(), WellboreCompletionDate(), SuffixAPI(), CompletionMdInterval(), CompletionTvdInterval(), CurrentStatus(), StatusDate(), StatusHistory(), ContactIntervalSet(), ReferenceWellbore(), WellCompletion() { }
        virtual ~witsml2__WellboreCompletion() { }
        /// Friend allocator used by soap_new_witsml2__WellboreCompletion(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellboreCompletion * SOAP_FMAC2 soap_instantiate_witsml2__WellboreCompletion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1091 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray (-301)
/* Type eml22__AbstractBooleanArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractBooleanArray': */
class SOAP_CMAC eml22__AbstractBooleanArray : public eml22__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractBooleanArray, default initialized and not managed by a soap context
        virtual eml22__AbstractBooleanArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractBooleanArray); }
      public:
        /// Constructor with initializations
        eml22__AbstractBooleanArray() { }
        virtual ~eml22__AbstractBooleanArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractBooleanArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractBooleanArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractBooleanArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1100 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray (-304)
/* Type eml22__AbstractNumericArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractNumericArray': */
class SOAP_CMAC eml22__AbstractNumericArray : public eml22__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractNumericArray, default initialized and not managed by a soap context
        virtual eml22__AbstractNumericArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractNumericArray); }
      public:
        /// Constructor with initializations
        eml22__AbstractNumericArray() { }
        virtual ~eml22__AbstractNumericArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractNumericArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractNumericArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractNumericArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1103 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray (-305)
/* Type eml22__AbstractStringArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractStringArray': */
class SOAP_CMAC eml22__AbstractStringArray : public eml22__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractStringArray, default initialized and not managed by a soap context
        virtual eml22__AbstractStringArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractStringArray); }
      public:
        /// Constructor with initializations
        eml22__AbstractStringArray() { }
        virtual ~eml22__AbstractStringArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractStringArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractStringArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractStringArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2288 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference (-700)
/* Type eml22__EpcExternalPartReference is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:EpcExternalPartReference': */
class SOAP_CMAC eml22__EpcExternalPartReference : public eml22__AbstractObject {
      public:
        /// Optional element 'eml22:Filename' of XSD type 'eml22:String2000'
        std::string *Filename;
        /// Optional element 'eml22:MimeType' of XSD type 'eml22:String2000'
        std::string *MimeType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EpcExternalPartReference, default initialized and not managed by a soap context
        virtual eml22__EpcExternalPartReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EpcExternalPartReference); }
      public:
        /// Constructor with initializations
        eml22__EpcExternalPartReference() : Filename(), MimeType() { }
        virtual ~eml22__EpcExternalPartReference() { }
        /// Friend allocator used by soap_new_eml22__EpcExternalPartReference(struct soap*, int)
        friend SOAP_FMAC1 eml22__EpcExternalPartReference * SOAP_FMAC2 soap_instantiate_eml22__EpcExternalPartReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2303 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2_eml22__Activity (-705)
/* Type eml22__Activity is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:Activity': */
class SOAP_CMAC eml22__Activity : public eml22__AbstractObject {
      public:
        /// Optional element 'eml22:Parent' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Parent;
        /// Required element 'eml22:ActivityDescriptor' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ActivityDescriptor;
        /// Required element 'eml22:Parameter' of XSD type 'eml22:AbstractActivityParameter'
        std::vector<eml22__AbstractActivityParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__Activity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__Activity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__Activity, default initialized and not managed by a soap context
        virtual eml22__Activity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__Activity); }
      public:
        /// Constructor with initializations
        eml22__Activity() : Parent(), ActivityDescriptor(), Parameter() { }
        virtual ~eml22__Activity() { }
        /// Friend allocator used by soap_new_eml22__Activity(struct soap*, int)
        friend SOAP_FMAC1 eml22__Activity * SOAP_FMAC2 soap_instantiate_eml22__Activity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2306 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate (-706)
/* Type eml22__ActivityTemplate is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ActivityTemplate': */
class SOAP_CMAC eml22__ActivityTemplate : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:Parameter' of XSD type 'eml22:ParameterTemplate'
        std::vector<eml22__ParameterTemplate *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ActivityTemplate, default initialized and not managed by a soap context
        virtual eml22__ActivityTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ActivityTemplate); }
      public:
        /// Constructor with initializations
        eml22__ActivityTemplate() : Parameter() { }
        virtual ~eml22__ActivityTemplate() { }
        /// Friend allocator used by soap_new_eml22__ActivityTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml22__ActivityTemplate * SOAP_FMAC2 soap_instantiate_eml22__ActivityTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2309 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter (-707)
/* Type eml22__DataObjectParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:DataObjectParameter': */
class SOAP_CMAC eml22__DataObjectParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:DataObject' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataObjectParameter, default initialized and not managed by a soap context
        virtual eml22__DataObjectParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataObjectParameter); }
      public:
        /// Constructor with initializations
        eml22__DataObjectParameter() : DataObject() { }
        virtual ~eml22__DataObjectParameter() { }
        /// Friend allocator used by soap_new_eml22__DataObjectParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataObjectParameter * SOAP_FMAC2 soap_instantiate_eml22__DataObjectParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2312 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter (-708)
/* Type eml22__DoubleQuantityParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:DoubleQuantityParameter': */
class SOAP_CMAC eml22__DoubleQuantityParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Value' of XSD type 'xsd:double'
        double Value;
        /// Required element 'eml22:Uom' of XSD type 'eml22:UnitOfMeasureExt'
        std::string Uom;
        /// Optional element 'eml22:CustomUnitDictionary' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CustomUnitDictionary;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoubleQuantityParameter, default initialized and not managed by a soap context
        virtual eml22__DoubleQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoubleQuantityParameter); }
      public:
        /// Constructor with initializations
        eml22__DoubleQuantityParameter() : Value(), Uom(), CustomUnitDictionary() { }
        virtual ~eml22__DoubleQuantityParameter() { }
        /// Friend allocator used by soap_new_eml22__DoubleQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoubleQuantityParameter * SOAP_FMAC2 soap_instantiate_eml22__DoubleQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2315 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter (-709)
/* Type eml22__IntegerQuantityParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:IntegerQuantityParameter': */
class SOAP_CMAC eml22__IntegerQuantityParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Value' of XSD type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerQuantityParameter, default initialized and not managed by a soap context
        virtual eml22__IntegerQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerQuantityParameter); }
      public:
        /// Constructor with initializations
        eml22__IntegerQuantityParameter() : Value() { }
        virtual ~eml22__IntegerQuantityParameter() { }
        /// Friend allocator used by soap_new_eml22__IntegerQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerQuantityParameter * SOAP_FMAC2 soap_instantiate_eml22__IntegerQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2318 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey (-710)
/* Type eml22__ObjectParameterKey is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ObjectParameterKey': */
class SOAP_CMAC eml22__ObjectParameterKey : public eml22__AbstractParameterKey {
      public:
        /// Required element 'eml22:DataObject' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ObjectParameterKey, default initialized and not managed by a soap context
        virtual eml22__ObjectParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ObjectParameterKey); }
      public:
        /// Constructor with initializations
        eml22__ObjectParameterKey() : DataObject() { }
        virtual ~eml22__ObjectParameterKey() { }
        /// Friend allocator used by soap_new_eml22__ObjectParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml22__ObjectParameterKey * SOAP_FMAC2 soap_instantiate_eml22__ObjectParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2324 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter (-712)
/* Type eml22__StringParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:StringParameter': */
class SOAP_CMAC eml22__StringParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Value' of XSD type 'eml22:String2000'
        std::string Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringParameter, default initialized and not managed by a soap context
        virtual eml22__StringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringParameter); }
      public:
        /// Constructor with initializations
        eml22__StringParameter() : Value() { }
        virtual ~eml22__StringParameter() { }
        /// Friend allocator used by soap_new_eml22__StringParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringParameter * SOAP_FMAC2 soap_instantiate_eml22__StringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2327 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter (-713)
/* Type eml22__TimeIndexParameter is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:TimeIndexParameter': */
class SOAP_CMAC eml22__TimeIndexParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:TimeIndex' of XSD type 'eml22:TimeIndex'
        eml22__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndexParameter, default initialized and not managed by a soap context
        virtual eml22__TimeIndexParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndexParameter); }
      public:
        /// Constructor with initializations
        eml22__TimeIndexParameter() : TimeIndex() { }
        virtual ~eml22__TimeIndexParameter() { }
        /// Friend allocator used by soap_new_eml22__TimeIndexParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndexParameter * SOAP_FMAC2 soap_instantiate_eml22__TimeIndexParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2330 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey (-714)
/* Type eml22__TimeIndexParameterKey is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:TimeIndexParameterKey': */
class SOAP_CMAC eml22__TimeIndexParameterKey : public eml22__AbstractParameterKey {
      public:
        /// Required element 'eml22:TimeIndex' of XSD type 'eml22:TimeIndex'
        eml22__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndexParameterKey, default initialized and not managed by a soap context
        virtual eml22__TimeIndexParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndexParameterKey); }
      public:
        /// Constructor with initializations
        eml22__TimeIndexParameterKey() : TimeIndex() { }
        virtual ~eml22__TimeIndexParameterKey() { }
        /// Friend allocator used by soap_new_eml22__TimeIndexParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndexParameterKey * SOAP_FMAC2 soap_instantiate_eml22__TimeIndexParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2336 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind (-716)
/* Type eml22__PropertyKind is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:PropertyKind': */
class SOAP_CMAC eml22__PropertyKind : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:IsAbstract' of XSD type 'xsd:boolean'
        bool IsAbstract;
        /// Optional element 'eml22:DeprecationDate' of XSD type 'eml22:TimeStamp'
        struct tm *DeprecationDate;
        /// Required element 'eml22:QuantityClass' of XSD type 'eml22:QuantityClassKindExt'
        std::string QuantityClass;
        /// Optional element 'eml22:Parent' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PropertyKind, default initialized and not managed by a soap context
        virtual eml22__PropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PropertyKind); }
      public:
        /// Constructor with initializations
        eml22__PropertyKind() : IsAbstract(), DeprecationDate(), QuantityClass(), Parent() { }
        virtual ~eml22__PropertyKind() { }
        /// Friend allocator used by soap_new_eml22__PropertyKind(struct soap*, int)
        friend SOAP_FMAC1 eml22__PropertyKind * SOAP_FMAC2 soap_instantiate_eml22__PropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2339 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary (-717)
/* Type eml22__PropertyKindDictionary is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:PropertyKindDictionary': */
class SOAP_CMAC eml22__PropertyKindDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:PropertyKind' of XSD type 'eml22:PropertyKind'
        std::vector<eml22__PropertyKind *> PropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PropertyKindDictionary, default initialized and not managed by a soap context
        virtual eml22__PropertyKindDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PropertyKindDictionary); }
      public:
        /// Constructor with initializations
        eml22__PropertyKindDictionary() : PropertyKind() { }
        virtual ~eml22__PropertyKindDictionary() { }
        /// Friend allocator used by soap_new_eml22__PropertyKindDictionary(struct soap*, int)
        friend SOAP_FMAC1 eml22__PropertyKindDictionary * SOAP_FMAC2 soap_instantiate_eml22__PropertyKindDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2348 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries (-720)
/* Type eml22__TimeSeries is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:TimeSeries': */
class SOAP_CMAC eml22__TimeSeries : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:Time' of XSD type 'eml22:GeologicTime'
        std::vector<eml22__GeologicTime *> Time;
        /// Optional element 'eml22:TimeSeriesParentage' of XSD type 'eml22:TimeSeriesParentage'
        eml22__TimeSeriesParentage *TimeSeriesParentage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeSeries, default initialized and not managed by a soap context
        virtual eml22__TimeSeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeSeries); }
      public:
        /// Constructor with initializations
        eml22__TimeSeries() : Time(), TimeSeriesParentage() { }
        virtual ~eml22__TimeSeries() { }
        /// Friend allocator used by soap_new_eml22__TimeSeries(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeSeries * SOAP_FMAC2 soap_instantiate_eml22__TimeSeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2354 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure (-722)
/* Type eml22__AbsolutePressure is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbsolutePressure': */
class SOAP_CMAC eml22__AbsolutePressure : public eml22__AbstractPressureValue {
      public:
        /// Required element 'eml22:AbsolutePressure' of XSD type 'eml22:PressureMeasureExt'
        eml22__PressureMeasureExt *AbsolutePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbsolutePressure, default initialized and not managed by a soap context
        virtual eml22__AbsolutePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbsolutePressure); }
      public:
        /// Constructor with initializations
        eml22__AbsolutePressure() : AbsolutePressure() { }
        virtual ~eml22__AbsolutePressure() { }
        /// Friend allocator used by soap_new_eml22__AbsolutePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbsolutePressure * SOAP_FMAC2 soap_instantiate_eml22__AbsolutePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2369 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure (-727)
/* Type eml22__GaugePressure is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GaugePressure': */
class SOAP_CMAC eml22__GaugePressure : public eml22__AbstractPressureValue {
      public:
        /// Required element 'eml22:GaugePressure' of XSD type 'eml22:PressureMeasureExt'
        eml22__PressureMeasureExt *GaugePressure;
        /// Optional element 'eml22:ReferencePressure' of XSD type 'eml22:ReferencePressure'
        eml22__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GaugePressure, default initialized and not managed by a soap context
        virtual eml22__GaugePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GaugePressure); }
      public:
        /// Constructor with initializations
        eml22__GaugePressure() : GaugePressure(), ReferencePressure() { }
        virtual ~eml22__GaugePressure() { }
        /// Friend allocator used by soap_new_eml22__GaugePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__GaugePressure * SOAP_FMAC2 soap_instantiate_eml22__GaugePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:45253 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure_
#define SOAP_TYPE_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure_ (-2174)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml22__union_ReferenceTemperaturePressure_
{
        #define SOAP_UNION_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure__ReferenceTempPres	(1)	/**< union variant selector value for member ReferenceTempPres */
        std::string *ReferenceTempPres;
};
#endif

/* eml2_2ForGsoap.h:2378 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure (-730)
/* Type eml22__ReferenceTemperaturePressure is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ReferenceTemperaturePressure': */
class SOAP_CMAC eml22__ReferenceTemperaturePressure : public eml22__AbstractTemperaturePressure {
      public:
        /// Union with union _eml22__union_ReferenceTemperaturePressure_ variant selector __union_ReferenceTemperaturePressure_ set to one of: SOAP_UNION_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure__ReferenceTempPres
        int __union_ReferenceTemperaturePressure_;
        union _eml22__union_ReferenceTemperaturePressure_ union_ReferenceTemperaturePressure_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReferenceTemperaturePressure, default initialized and not managed by a soap context
        virtual eml22__ReferenceTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReferenceTemperaturePressure); }
      public:
        /// Constructor with initializations
        eml22__ReferenceTemperaturePressure() : __union_ReferenceTemperaturePressure_() { }
        virtual ~eml22__ReferenceTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml22__ReferenceTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReferenceTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml22__ReferenceTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2381 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure (-731)
/* Type eml22__RelativePressure is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:RelativePressure': */
class SOAP_CMAC eml22__RelativePressure : public eml22__AbstractPressureValue {
      public:
        /// Required element 'eml22:RelativePressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *RelativePressure;
        /// Required element 'eml22:ReferencePressure' of XSD type 'eml22:ReferencePressure'
        eml22__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RelativePressure, default initialized and not managed by a soap context
        virtual eml22__RelativePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RelativePressure); }
      public:
        /// Constructor with initializations
        eml22__RelativePressure() : RelativePressure(), ReferencePressure() { }
        virtual ~eml22__RelativePressure() { }
        /// Friend allocator used by soap_new_eml22__RelativePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__RelativePressure * SOAP_FMAC2 soap_instantiate_eml22__RelativePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2384 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure (-732)
/* Type eml22__TemperaturePressure is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:TemperaturePressure': */
class SOAP_CMAC eml22__TemperaturePressure : public eml22__AbstractTemperaturePressure {
      public:
        /// Required element 'eml22:Temperature' of XSD type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *Temperature;
        /// Required element 'eml22:Pressure' of XSD type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Pressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperaturePressure, default initialized and not managed by a soap context
        virtual eml22__TemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperaturePressure); }
      public:
        /// Constructor with initializations
        eml22__TemperaturePressure() : Temperature(), Pressure() { }
        virtual ~eml22__TemperaturePressure() { }
        /// Friend allocator used by soap_new_eml22__TemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperaturePressure * SOAP_FMAC2 soap_instantiate_eml22__TemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2405 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs (-739)
/* Type eml22__GeodeticCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GeodeticCrs': */
class SOAP_CMAC eml22__GeodeticCrs : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:AbstractGeodeticCrs' of XSD type 'eml22:AbstractGeodeticCrs'
        eml22__AbstractGeodeticCrs *AbstractGeodeticCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticCrs); }
      public:
        /// Constructor with initializations
        eml22__GeodeticCrs() : AbstractGeodeticCrs() { }
        virtual ~eml22__GeodeticCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2408 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs (-740)
/* Type eml22__GeodeticEpsgCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GeodeticEpsgCrs': */
class SOAP_CMAC eml22__GeodeticEpsgCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:EpsgCode' of XSD type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticEpsgCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticEpsgCrs); }
      public:
        /// Constructor with initializations
        eml22__GeodeticEpsgCrs() : EpsgCode() { }
        virtual ~eml22__GeodeticEpsgCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticEpsgCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2411 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs (-741)
/* Type eml22__GeodeticGmlCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GeodeticGmlCrs': */
class SOAP_CMAC eml22__GeodeticGmlCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:GmlGeodeticCrsDefinition' of XSD type 'gml:GeodeticCRSType'
        gml__GeodeticCRSType *GmlGeodeticCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticGmlCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticGmlCrs); }
      public:
        /// Constructor with initializations
        eml22__GeodeticGmlCrs() : GmlGeodeticCrsDefinition() { }
        virtual ~eml22__GeodeticGmlCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticGmlCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2414 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs (-742)
/* Type eml22__GeodeticLocalAuthorityCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GeodeticLocalAuthorityCrs': */
class SOAP_CMAC eml22__GeodeticLocalAuthorityCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:LocalAuthorityCrsName' of XSD type 'eml22:AuthorityQualifiedName'
        eml22__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticLocalAuthorityCrs); }
      public:
        /// Constructor with initializations
        eml22__GeodeticLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml22__GeodeticLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2417 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs (-743)
/* Type eml22__GeodeticUnknownCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GeodeticUnknownCrs': */
class SOAP_CMAC eml22__GeodeticUnknownCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:Unknown' of XSD type 'eml22:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticUnknownCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticUnknownCrs); }
      public:
        /// Constructor with initializations
        eml22__GeodeticUnknownCrs() : Unknown() { }
        virtual ~eml22__GeodeticUnknownCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticUnknownCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2420 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs (-744)
/* Type eml22__GeodeticWktCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GeodeticWktCrs': */
class SOAP_CMAC eml22__GeodeticWktCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:WellKnownText' of XSD type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticWktCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticWktCrs); }
      public:
        /// Constructor with initializations
        eml22__GeodeticWktCrs() : WellKnownText() { }
        virtual ~eml22__GeodeticWktCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticWktCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2423 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs (-745)
/* Type eml22__ProjectedCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ProjectedCrs': */
class SOAP_CMAC eml22__ProjectedCrs : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:AxisOrder' of XSD type 'eml22:AxisOrder2d'
        enum eml22__AxisOrder2d AxisOrder;
        /// Required element 'eml22:AbstractProjectedCrs' of XSD type 'eml22:AbstractProjectedCrs'
        eml22__AbstractProjectedCrs *AbstractProjectedCrs;
        /// optional attribute 'uom' of XSD type 'eml22:LengthUomExt'
        std::string *uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedCrs); }
      public:
        /// Constructor with initializations
        eml22__ProjectedCrs() : AxisOrder(), AbstractProjectedCrs(), uom() { }
        virtual ~eml22__ProjectedCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2426 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs (-746)
/* Type eml22__ProjectedEpsgCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ProjectedEpsgCrs': */
class SOAP_CMAC eml22__ProjectedEpsgCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:EpsgCode' of XSD type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedEpsgCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedEpsgCrs); }
      public:
        /// Constructor with initializations
        eml22__ProjectedEpsgCrs() : EpsgCode() { }
        virtual ~eml22__ProjectedEpsgCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedEpsgCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2429 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs (-747)
/* Type eml22__ProjectedGmlCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ProjectedGmlCrs': */
class SOAP_CMAC eml22__ProjectedGmlCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:GmlProjectedCrsDefinition' of XSD type 'gml:ProjectedCRSType'
        gml__ProjectedCRSType *GmlProjectedCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedGmlCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedGmlCrs); }
      public:
        /// Constructor with initializations
        eml22__ProjectedGmlCrs() : GmlProjectedCrsDefinition() { }
        virtual ~eml22__ProjectedGmlCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedGmlCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2432 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs (-748)
/* Type eml22__ProjectedLocalAuthorityCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ProjectedLocalAuthorityCrs': */
class SOAP_CMAC eml22__ProjectedLocalAuthorityCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:LocalAuthorityCrsName' of XSD type 'eml22:AuthorityQualifiedName'
        eml22__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedLocalAuthorityCrs); }
      public:
        /// Constructor with initializations
        eml22__ProjectedLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml22__ProjectedLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2435 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs (-749)
/* Type eml22__ProjectedUnknownCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ProjectedUnknownCrs': */
class SOAP_CMAC eml22__ProjectedUnknownCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:Unknown' of XSD type 'eml22:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedUnknownCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedUnknownCrs); }
      public:
        /// Constructor with initializations
        eml22__ProjectedUnknownCrs() : Unknown() { }
        virtual ~eml22__ProjectedUnknownCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedUnknownCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2438 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs (-750)
/* Type eml22__ProjectedWktCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:ProjectedWktCrs': */
class SOAP_CMAC eml22__ProjectedWktCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:WellKnownText' of XSD type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedWktCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedWktCrs); }
      public:
        /// Constructor with initializations
        eml22__ProjectedWktCrs() : WellKnownText() { }
        virtual ~eml22__ProjectedWktCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedWktCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2444 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs (-752)
/* Type eml22__VerticalCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:VerticalCrs': */
class SOAP_CMAC eml22__VerticalCrs : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:Direction' of XSD type 'eml22:VerticalDirection'
        enum eml22__VerticalDirection Direction;
        /// Required element 'eml22:AbstractVerticalCrs' of XSD type 'eml22:AbstractVerticalCrs'
        eml22__AbstractVerticalCrs *AbstractVerticalCrs;
        /// required attribute 'uom' of XSD type 'eml22:LengthUomExt'
        std::string uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalCrs); }
      public:
        /// Constructor with initializations
        eml22__VerticalCrs() : Direction(), AbstractVerticalCrs(), uom() { }
        virtual ~eml22__VerticalCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2447 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs (-753)
/* Type eml22__VerticalEpsgCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:VerticalEpsgCrs': */
class SOAP_CMAC eml22__VerticalEpsgCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:EpsgCode' of XSD type 'xsd:unsignedLong'
        ULONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalEpsgCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalEpsgCrs); }
      public:
        /// Constructor with initializations
        eml22__VerticalEpsgCrs() : EpsgCode() { }
        virtual ~eml22__VerticalEpsgCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalEpsgCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2450 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs (-754)
/* Type eml22__VerticalGmlCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:VerticalGmlCrs': */
class SOAP_CMAC eml22__VerticalGmlCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:GmlVerticalCrsDefinition' of XSD type 'gml:VerticalCRSType'
        gml__VerticalCRSType *GmlVerticalCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalGmlCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalGmlCrs); }
      public:
        /// Constructor with initializations
        eml22__VerticalGmlCrs() : GmlVerticalCrsDefinition() { }
        virtual ~eml22__VerticalGmlCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalGmlCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2453 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs (-755)
/* Type eml22__VerticalLocalAuthorityCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:VerticalLocalAuthorityCrs': */
class SOAP_CMAC eml22__VerticalLocalAuthorityCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:LocalAuthorityCrsName' of XSD type 'eml22:AuthorityQualifiedName'
        eml22__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalLocalAuthorityCrs); }
      public:
        /// Constructor with initializations
        eml22__VerticalLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml22__VerticalLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2456 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs (-756)
/* Type eml22__VerticalUnknownCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:VerticalUnknownCrs': */
class SOAP_CMAC eml22__VerticalUnknownCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:Unknown' of XSD type 'eml22:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalUnknownCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalUnknownCrs); }
      public:
        /// Constructor with initializations
        eml22__VerticalUnknownCrs() : Unknown() { }
        virtual ~eml22__VerticalUnknownCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalUnknownCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2459 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs (-757)
/* Type eml22__VerticalWktCrs is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:VerticalWktCrs': */
class SOAP_CMAC eml22__VerticalWktCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:WellKnownText' of XSD type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalWktCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalWktCrs); }
      public:
        /// Constructor with initializations
        eml22__VerticalWktCrs() : WellKnownText() { }
        virtual ~eml22__VerticalWktCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalWktCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2462 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord (-758)
/* Type eml22__DataAssuranceRecord is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:DataAssuranceRecord': */
class SOAP_CMAC eml22__DataAssuranceRecord : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:PolicyId' of XSD type 'eml22:String64'
        std::string PolicyId;
        /// Optional element 'eml22:PolicyName' of XSD type 'eml22:String2000'
        std::string *PolicyName;
        /// Optional element 'eml22:ReferencedElementName' of XSD type 'eml22:String64'
        std::string *ReferencedElementName;
        /// Optional element 'eml22:ReferencedElementUid' of XSD type 'eml22:String64'
        std::string *ReferencedElementUid;
        /// Required element 'eml22:Origin' of XSD type 'eml22:String2000'
        std::string Origin;
        /// Required element 'eml22:Conformance' of XSD type 'xsd:boolean'
        bool Conformance;
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm Date;
        /// Optional element 'eml22:Comment' of XSD type 'eml22:String2000'
        std::string *Comment;
        /// Optional element 'eml22:IndexRange' of XSD type 'eml22:IndexRange'
        eml22__IndexRange *IndexRange;
        /// Required element 'eml22:ReferencedData' of XSD type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ReferencedData;
        /// Optional element 'eml22:FailingRules' of XSD type 'eml22:FailingRule'
        std::vector<eml22__FailingRule *> FailingRules;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataAssuranceRecord, default initialized and not managed by a soap context
        virtual eml22__DataAssuranceRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataAssuranceRecord); }
      public:
        /// Constructor with initializations
        eml22__DataAssuranceRecord() : PolicyId(), PolicyName(), ReferencedElementName(), ReferencedElementUid(), Origin(), Conformance(), Date(), Comment(), IndexRange(), ReferencedData(), FailingRules() { }
        virtual ~eml22__DataAssuranceRecord() { }
        /// Friend allocator used by soap_new_eml22__DataAssuranceRecord(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataAssuranceRecord * SOAP_FMAC2 soap_instantiate_eml22__DataAssuranceRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2474 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet (-762)
/* Type eml22__GraphicalInformationSet is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:GraphicalInformationSet': */
class SOAP_CMAC eml22__GraphicalInformationSet : public eml22__AbstractObject {
      public:
        /// Optional element 'eml22:GraphicalInformation' of XSD type 'eml22:AbstractGraphicalInformation'
        std::vector<eml22__AbstractGraphicalInformation *> GraphicalInformation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GraphicalInformationSet, default initialized and not managed by a soap context
        virtual eml22__GraphicalInformationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GraphicalInformationSet); }
      public:
        /// Constructor with initializations
        eml22__GraphicalInformationSet() : GraphicalInformation() { }
        virtual ~eml22__GraphicalInformationSet() { }
        /// Friend allocator used by soap_new_eml22__GraphicalInformationSet(struct soap*, int)
        friend SOAP_FMAC1 eml22__GraphicalInformationSet * SOAP_FMAC2 soap_instantiate_eml22__GraphicalInformationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2489 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType (-767)
/* Type gml__DefinitionBaseType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:DefinitionBaseType': */
class SOAP_CMAC gml__DefinitionBaseType {
      public:
        /// Optional element 'gml:description' of XSD type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XSD type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Required element 'gml:identifier' of XSD type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XSD type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// required attribute 'gml:id' of XSD type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__DefinitionBaseType, default initialized and not managed by a soap context
        virtual gml__DefinitionBaseType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__DefinitionBaseType); }
      public:
        /// Constructor with initializations
        gml__DefinitionBaseType() : description(), descriptionReference(), identifier(), name(), gml__id(), soap() { }
        virtual ~gml__DefinitionBaseType() { }
        /// Friend allocator used by soap_new_gml__DefinitionBaseType(struct soap*, int)
        friend SOAP_FMAC1 gml__DefinitionBaseType * SOAP_FMAC2 soap_instantiate_gml__DefinitionBaseType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2495 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType (-769)
/* simple XSD type 'gml:StringOrRefType': */
class SOAP_CMAC gml__StringOrRefType {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// optional attribute 'nilReason' of XSD type 'gml:NilReasonType'
        std::string *nilReason;
        /// optional attribute 'xlink:type' of XSD type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// optional attribute 'xlink:href' of XSD type 'xsd:anyURI'
        std::string *xlink__href;
        /// optional attribute 'xlink:role' of XSD type 'xsd:anyURI'
        std::string *xlink__role;
        /// optional attribute 'xlink:arcrole' of XSD type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// optional attribute 'xlink:title' of XSD type 'xsd:string'
        std::string *xlink__title;
        /// optional attribute 'xlink:show' of XSD type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// optional attribute 'xlink:actuate' of XSD type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__StringOrRefType, default initialized and not managed by a soap context
        virtual gml__StringOrRefType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__StringOrRefType); }
      public:
        /// Constructor with initializations
        gml__StringOrRefType() : __item(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__StringOrRefType() { }
        /// Friend allocator used by soap_new_gml__StringOrRefType(struct soap*, int)
        friend SOAP_FMAC1 gml__StringOrRefType * SOAP_FMAC2 soap_instantiate_gml__StringOrRefType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2504 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeType (-772)
/* simple XSD type 'gml:CodeType': */
class SOAP_CMAC gml__CodeType {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// optional attribute 'codeSpace' of XSD type 'xsd:anyURI'
        std::string *codeSpace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CodeType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CodeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CodeType, default initialized and not managed by a soap context
        virtual gml__CodeType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CodeType); }
      public:
        /// Constructor with initializations
        gml__CodeType() : __item(), codeSpace(), soap() { }
        virtual ~gml__CodeType() { }
        /// Friend allocator used by soap_new_gml__CodeType(struct soap*, int)
        friend SOAP_FMAC1 gml__CodeType * SOAP_FMAC2 soap_instantiate_gml__CodeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2510 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType (-774)
/* Type gml__AbstractTimeObjectType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractTimeObjectType': */
class SOAP_CMAC gml__AbstractTimeObjectType : public gml__AbstractGMLType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractTimeObjectType, default initialized and not managed by a soap context
        virtual gml__AbstractTimeObjectType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractTimeObjectType); }
      public:
        /// Constructor with initializations
        gml__AbstractTimeObjectType() { }
        virtual ~gml__AbstractTimeObjectType() { }
        /// Friend allocator used by soap_new_gml__AbstractTimeObjectType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractTimeObjectType * SOAP_FMAC2 soap_instantiate_gml__AbstractTimeObjectType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2513 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType (-775)
/* Type gml__RelatedTimeType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:RelatedTimeType': */
class SOAP_CMAC gml__RelatedTimeType : public gml__TimePrimitivePropertyType {
      public:
        /// optional attribute 'relativePosition' of XSD type 'gml:RelatedTimeType-relativePosition'
        enum _gml__RelatedTimeType_relativePosition *relativePosition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__RelatedTimeType, default initialized and not managed by a soap context
        virtual gml__RelatedTimeType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__RelatedTimeType); }
      public:
        /// Constructor with initializations
        gml__RelatedTimeType() : relativePosition() { }
        virtual ~gml__RelatedTimeType() { }
        /// Friend allocator used by soap_new_gml__RelatedTimeType(struct soap*, int)
        friend SOAP_FMAC1 gml__RelatedTimeType * SOAP_FMAC2 soap_instantiate_gml__RelatedTimeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2564 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__MeasureType
#define SOAP_TYPE_gsoap_eml2_2_gml__MeasureType (-792)
/* Type gml__MeasureType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'gml:MeasureType': */
class SOAP_CMAC gml__MeasureType {
      public:
        /// Simple content of XSD type 'xsd:double' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__MeasureType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__MeasureType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__MeasureType, default initialized and not managed by a soap context
        virtual gml__MeasureType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__MeasureType); }
      public:
        /// Constructor with initializations
        gml__MeasureType() : __item(), soap() { }
        virtual ~gml__MeasureType() { }
        /// Friend allocator used by soap_new_gml__MeasureType(struct soap*, int)
        friend SOAP_FMAC1 gml__MeasureType * SOAP_FMAC2 soap_instantiate_gml__MeasureType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2624 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType (-812)
/* Type gmd__EX_USCOREExtent_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:EX_Extent_Type': */
class SOAP_CMAC gmd__EX_USCOREExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:description' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *description;
        /// Optional element 'gmd:geographicElement' of XSD type 'gmd:EX_GeographicExtent_PropertyType'
        std::vector<gmd__EX_USCOREGeographicExtent_USCOREPropertyType *> geographicElement;
        /// Optional element 'gmd:temporalElement' of XSD type 'gmd:EX_TemporalExtent_PropertyType'
        std::vector<gmd__EX_USCORETemporalExtent_USCOREPropertyType *> temporalElement;
        /// Optional element 'gmd:verticalElement' of XSD type 'gmd:EX_VerticalExtent_PropertyType'
        std::vector<gmd__EX_USCOREVerticalExtent_USCOREPropertyType *> verticalElement;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREExtent_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__EX_USCOREExtent_USCOREType() : description(), geographicElement(), temporalElement(), verticalElement() { }
        virtual ~gmd__EX_USCOREExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2630 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType (-814)
/* Type gmd__AbstractEX_USCOREGeographicExtent_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:AbstractEX_GeographicExtent_Type': */
class SOAP_CMAC gmd__AbstractEX_USCOREGeographicExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:extentTypeCode' of XSD type 'gco:Boolean_PropertyType'
        gco__Boolean_USCOREPropertyType *extentTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractEX_USCOREGeographicExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractEX_USCOREGeographicExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractEX_USCOREGeographicExtent_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__AbstractEX_USCOREGeographicExtent_USCOREType() : extentTypeCode() { }
        virtual ~gmd__AbstractEX_USCOREGeographicExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractEX_USCOREGeographicExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractEX_USCOREGeographicExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractEX_USCOREGeographicExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2636 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType (-816)
/* Type gmd__EX_USCORETemporalExtent_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:EX_TemporalExtent_Type': */
class SOAP_CMAC gmd__EX_USCORETemporalExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:extent' of XSD type 'gts:TM_Primitive_PropertyType'
        gts__TM_USCOREPrimitive_USCOREPropertyType *extent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCORETemporalExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCORETemporalExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCORETemporalExtent_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__EX_USCORETemporalExtent_USCOREType() : extent() { }
        virtual ~gmd__EX_USCORETemporalExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCORETemporalExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCORETemporalExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCORETemporalExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2642 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType (-818)
/* Type gmd__EX_USCOREVerticalExtent_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:EX_VerticalExtent_Type': */
class SOAP_CMAC gmd__EX_USCOREVerticalExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:minimumValue' of XSD type 'gco:Real_PropertyType'
        gco__Real_USCOREPropertyType *minimumValue;
        /// Required element 'gmd:maximumValue' of XSD type 'gco:Real_PropertyType'
        gco__Real_USCOREPropertyType *maximumValue;
        /// Required element 'gmd:verticalCRS' of XSD type 'gsr:SC_CRS_PropertyType'
        gsr__SC_USCORECRS_USCOREPropertyType *verticalCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREVerticalExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREVerticalExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREVerticalExtent_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__EX_USCOREVerticalExtent_USCOREType() : minimumValue(), maximumValue(), verticalCRS() { }
        virtual ~gmd__EX_USCOREVerticalExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREVerticalExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREVerticalExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREVerticalExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2648 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType (-820)
/* Type gmd__AbstractDQ_USCOREElement_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:AbstractDQ_Element_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREElement_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:nameOfMeasure' of XSD type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> nameOfMeasure;
        /// Optional element 'gmd:measureIdentification' of XSD type 'gmd:MD_Identifier_PropertyType'
        gmd__MD_USCOREIdentifier_USCOREPropertyType *measureIdentification;
        /// Optional element 'gmd:measureDescription' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *measureDescription;
        /// Optional element 'gmd:evaluationMethodType' of XSD type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType'
        gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType *evaluationMethodType;
        /// Optional element 'gmd:evaluationMethodDescription' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *evaluationMethodDescription;
        /// Optional element 'gmd:evaluationProcedure' of XSD type 'gmd:CI_Citation_PropertyType'
        gmd__CI_USCORECitation_USCOREPropertyType *evaluationProcedure;
        /// Optional element 'gmd:dateTime' of XSD type 'gco:DateTime_PropertyType'
        std::vector<gco__DateTime_USCOREPropertyType *> dateTime;
        /// Sequence of 1 to 2 elements 'gmd:result' of XSD type 'gmd:DQ_Result_PropertyType'
        std::vector<gmd__DQ_USCOREResult_USCOREPropertyType *> result;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREElement_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREElement_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREElement_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__AbstractDQ_USCOREElement_USCOREType() : nameOfMeasure(), measureIdentification(), measureDescription(), evaluationMethodType(), evaluationMethodDescription(), evaluationProcedure(), dateTime(), result() { }
        virtual ~gmd__AbstractDQ_USCOREElement_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREElement_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREElement_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREElement_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2654 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType (-822)
/* Type gmd__MD_USCOREIdentifier_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:MD_Identifier_Type': */
class SOAP_CMAC gmd__MD_USCOREIdentifier_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:authority' of XSD type 'gmd:CI_Citation_PropertyType'
        gmd__CI_USCORECitation_USCOREPropertyType *authority;
        /// Required element 'gmd:code' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *code;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__MD_USCOREIdentifier_USCOREType, default initialized and not managed by a soap context
        virtual gmd__MD_USCOREIdentifier_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__MD_USCOREIdentifier_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__MD_USCOREIdentifier_USCOREType() : authority(), code() { }
        virtual ~gmd__MD_USCOREIdentifier_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__MD_USCOREIdentifier_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__MD_USCOREIdentifier_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__MD_USCOREIdentifier_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2660 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType (-824)
/* Type gmd__CI_USCORECitation_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_Citation_Type': */
class SOAP_CMAC gmd__CI_USCORECitation_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:title' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *title;
        /// Optional element 'gmd:alternateTitle' of XSD type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> alternateTitle;
        /// Required element 'gmd:date' of XSD type 'gmd:CI_Date_PropertyType'
        std::vector<gmd__CI_USCOREDate_USCOREPropertyType *> date;
        /// Optional element 'gmd:edition' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *edition;
        /// Optional element 'gmd:editionDate' of XSD type 'gco:Date_PropertyType'
        gco__Date_USCOREPropertyType *editionDate;
        /// Optional element 'gmd:identifier' of XSD type 'gmd:MD_Identifier_PropertyType'
        std::vector<gmd__MD_USCOREIdentifier_USCOREPropertyType *> identifier;
        /// Optional element 'gmd:citedResponsibleParty' of XSD type 'gmd:CI_ResponsibleParty_PropertyType'
        std::vector<gmd__CI_USCOREResponsibleParty_USCOREPropertyType *> citedResponsibleParty;
        /// Optional element 'gmd:presentationForm' of XSD type 'gmd:CI_PresentationFormCode_PropertyType'
        std::vector<gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *> presentationForm;
        /// Optional element 'gmd:series' of XSD type 'gmd:CI_Series_PropertyType'
        gmd__CI_USCORESeries_USCOREPropertyType *series;
        /// Optional element 'gmd:otherCitationDetails' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *otherCitationDetails;
        /// Optional element 'gmd:collectiveTitle' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *collectiveTitle;
        /// Optional element 'gmd:ISBN' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *ISBN;
        /// Optional element 'gmd:ISSN' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *ISSN;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORECitation_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORECitation_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORECitation_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORECitation_USCOREType() : title(), alternateTitle(), date(), edition(), editionDate(), identifier(), citedResponsibleParty(), presentationForm(), series(), otherCitationDetails(), collectiveTitle(), ISBN(), ISSN() { }
        virtual ~gmd__CI_USCORECitation_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORECitation_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORECitation_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORECitation_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2666 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType (-826)
/* Type gmd__CI_USCOREDate_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_Date_Type': */
class SOAP_CMAC gmd__CI_USCOREDate_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:date' of XSD type 'gco:Date_PropertyType'
        gco__Date_USCOREPropertyType *date;
        /// Required element 'gmd:dateType' of XSD type 'gmd:CI_DateTypeCode_PropertyType'
        gmd__CI_USCOREDateTypeCode_USCOREPropertyType *dateType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDate_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDate_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDate_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREDate_USCOREType() : date(), dateType() { }
        virtual ~gmd__CI_USCOREDate_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDate_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDate_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDate_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2675 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType (-829)
/* Type gmd__CI_USCOREResponsibleParty_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_ResponsibleParty_Type': */
class SOAP_CMAC gmd__CI_USCOREResponsibleParty_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:individualName' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *individualName;
        /// Optional element 'gmd:organisationName' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *organisationName;
        /// Optional element 'gmd:positionName' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *positionName;
        /// Optional element 'gmd:contactInfo' of XSD type 'gmd:CI_Contact_PropertyType'
        gmd__CI_USCOREContact_USCOREPropertyType *contactInfo;
        /// Required element 'gmd:role' of XSD type 'gmd:CI_RoleCode_PropertyType'
        gmd__CI_USCORERoleCode_USCOREPropertyType *role;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREResponsibleParty_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREResponsibleParty_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREResponsibleParty_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREResponsibleParty_USCOREType() : individualName(), organisationName(), positionName(), contactInfo(), role() { }
        virtual ~gmd__CI_USCOREResponsibleParty_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREResponsibleParty_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREResponsibleParty_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREResponsibleParty_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2681 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType (-831)
/* Type gmd__CI_USCOREContact_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_Contact_Type': */
class SOAP_CMAC gmd__CI_USCOREContact_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:phone' of XSD type 'gmd:CI_Telephone_PropertyType'
        gmd__CI_USCORETelephone_USCOREPropertyType *phone;
        /// Optional element 'gmd:address' of XSD type 'gmd:CI_Address_PropertyType'
        gmd__CI_USCOREAddress_USCOREPropertyType *address;
        /// Optional element 'gmd:onlineResource' of XSD type 'gmd:CI_OnlineResource_PropertyType'
        gmd__CI_USCOREOnlineResource_USCOREPropertyType *onlineResource;
        /// Optional element 'gmd:hoursOfService' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *hoursOfService;
        /// Optional element 'gmd:contactInstructions' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *contactInstructions;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREContact_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREContact_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREContact_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREContact_USCOREType() : phone(), address(), onlineResource(), hoursOfService(), contactInstructions() { }
        virtual ~gmd__CI_USCOREContact_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREContact_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREContact_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREContact_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2687 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType (-833)
/* Type gmd__CI_USCORETelephone_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_Telephone_Type': */
class SOAP_CMAC gmd__CI_USCORETelephone_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:voice' of XSD type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> voice;
        /// Optional element 'gmd:facsimile' of XSD type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> facsimile;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORETelephone_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORETelephone_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORETelephone_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORETelephone_USCOREType() : voice(), facsimile() { }
        virtual ~gmd__CI_USCORETelephone_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORETelephone_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORETelephone_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORETelephone_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2693 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType (-835)
/* Type gmd__CI_USCOREAddress_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_Address_Type': */
class SOAP_CMAC gmd__CI_USCOREAddress_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:deliveryPoint' of XSD type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> deliveryPoint;
        /// Optional element 'gmd:city' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *city;
        /// Optional element 'gmd:administrativeArea' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *administrativeArea;
        /// Optional element 'gmd:postalCode' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *postalCode;
        /// Optional element 'gmd:country' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *country;
        /// Optional element 'gmd:electronicMailAddress' of XSD type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> electronicMailAddress;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREAddress_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREAddress_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREAddress_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREAddress_USCOREType() : deliveryPoint(), city(), administrativeArea(), postalCode(), country(), electronicMailAddress() { }
        virtual ~gmd__CI_USCOREAddress_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREAddress_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREAddress_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREAddress_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2699 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType (-837)
/* Type gmd__CI_USCOREOnlineResource_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_OnlineResource_Type': */
class SOAP_CMAC gmd__CI_USCOREOnlineResource_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:linkage' of XSD type 'gmd:URL_PropertyType'
        gmd__URL_USCOREPropertyType *linkage;
        /// Optional element 'gmd:protocol' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *protocol;
        /// Optional element 'gmd:applicationProfile' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *applicationProfile;
        /// Optional element 'gmd:name' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *name;
        /// Optional element 'gmd:description' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *description;
        /// Optional element 'gmd:function' of XSD type 'gmd:CI_OnLineFunctionCode_PropertyType'
        gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType *function;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnlineResource_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnlineResource_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnlineResource_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCOREOnlineResource_USCOREType() : linkage(), protocol(), applicationProfile(), name(), description(), function() { }
        virtual ~gmd__CI_USCOREOnlineResource_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnlineResource_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnlineResource_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnlineResource_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2717 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType (-843)
/* Type gmd__CI_USCORESeries_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:CI_Series_Type': */
class SOAP_CMAC gmd__CI_USCORESeries_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:name' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *name;
        /// Optional element 'gmd:issueIdentification' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *issueIdentification;
        /// Optional element 'gmd:page' of XSD type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *page;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORESeries_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORESeries_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORESeries_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__CI_USCORESeries_USCOREType() : name(), issueIdentification(), page() { }
        virtual ~gmd__CI_USCORESeries_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORESeries_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORESeries_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORESeries_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2726 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType (-846)
/* Type gmd__AbstractDQ_USCOREResult_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:AbstractDQ_Result_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREResult_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREResult_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREResult_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREResult_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__AbstractDQ_USCOREResult_USCOREType() { }
        virtual ~gmd__AbstractDQ_USCOREResult_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREResult_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREResult_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREResult_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2747 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType (-853)
/* simple XSD type 'gco:CodeListValue_Type': */
class SOAP_CMAC gco__CodeListValue_USCOREType {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// required attribute 'codeList' of XSD type 'xsd:anyURI'
        std::string codeList;
        /// required attribute 'codeListValue' of XSD type 'xsd:anyURI'
        std::string codeListValue;
        /// optional attribute 'codeSpace' of XSD type 'xsd:anyURI'
        std::string *codeSpace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__CodeListValue_USCOREType, default initialized and not managed by a soap context
        virtual gco__CodeListValue_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__CodeListValue_USCOREType); }
      public:
        /// Constructor with initializations
        gco__CodeListValue_USCOREType() : __item(), codeList(), codeListValue(), codeSpace(), soap() { }
        virtual ~gco__CodeListValue_USCOREType() { }
        /// Friend allocator used by soap_new_gco__CodeListValue_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gco__CodeListValue_USCOREType * SOAP_FMAC2 soap_instantiate_gco__CodeListValue_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:275 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellElevationCoord (-29)
/* simple XSD type 'witsml2:WellElevationCoord': */
class SOAP_CMAC witsml2__WellElevationCoord {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// required attribute 'datum' of XSD type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__WellElevationCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__WellElevationCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__WellElevationCoord, default initialized and not managed by a soap context
        virtual witsml2__WellElevationCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__WellElevationCoord); }
      public:
        /// Constructor with initializations
        witsml2__WellElevationCoord() : __item(), uom(), datum(), soap() { }
        virtual ~witsml2__WellElevationCoord() { }
        /// Friend allocator used by soap_new_witsml2__WellElevationCoord(struct soap*, int)
        friend SOAP_FMAC1 witsml2__WellElevationCoord * SOAP_FMAC2 soap_instantiate_witsml2__WellElevationCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:761 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthRange (-191)
/* Type witsml2__AzimuthRange is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'witsml2:AzimuthRange': */
class SOAP_CMAC witsml2__AzimuthRange : public witsml2__PlaneAngleOperatingRange {
      public:
        /// Required element 'witsml2:IsMagneticNorth' of XSD type 'xsd:boolean'
        bool IsMagneticNorth;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__AzimuthRange, default initialized and not managed by a soap context
        virtual witsml2__AzimuthRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__AzimuthRange); }
      public:
        /// Constructor with initializations
        witsml2__AzimuthRange() : IsMagneticNorth() { }
        virtual ~witsml2__AzimuthRange() { }
        /// Friend allocator used by soap_new_witsml2__AzimuthRange(struct soap*, int)
        friend SOAP_FMAC1 witsml2__AzimuthRange * SOAP_FMAC2 soap_instantiate_witsml2__AzimuthRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1094 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray (-302)
/* Type eml22__AbstractFloatingPointArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractFloatingPointArray': */
class SOAP_CMAC eml22__AbstractFloatingPointArray : public eml22__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractFloatingPointArray, default initialized and not managed by a soap context
        virtual eml22__AbstractFloatingPointArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractFloatingPointArray); }
      public:
        /// Constructor with initializations
        eml22__AbstractFloatingPointArray() { }
        virtual ~eml22__AbstractFloatingPointArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractFloatingPointArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractFloatingPointArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractFloatingPointArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1097 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray (-303)
/* Type eml22__AbstractIntegerArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:AbstractIntegerArray': */
class SOAP_CMAC eml22__AbstractIntegerArray : public eml22__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractIntegerArray, default initialized and not managed by a soap context
        virtual eml22__AbstractIntegerArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractIntegerArray); }
      public:
        /// Constructor with initializations
        eml22__AbstractIntegerArray() { }
        virtual ~eml22__AbstractIntegerArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractIntegerArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractIntegerArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractIntegerArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1112 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray (-308)
/* Type eml22__BooleanArrayFromIndexArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:BooleanArrayFromIndexArray': */
class SOAP_CMAC eml22__BooleanArrayFromIndexArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml22:Indices' of XSD type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *Indices;
        /// Required element 'eml22:IndexIsTrue' of XSD type 'xsd:boolean'
        bool IndexIsTrue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__BooleanArrayFromIndexArray, default initialized and not managed by a soap context
        virtual eml22__BooleanArrayFromIndexArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__BooleanArrayFromIndexArray); }
      public:
        /// Constructor with initializations
        eml22__BooleanArrayFromIndexArray() : Count(), Indices(), IndexIsTrue() { }
        virtual ~eml22__BooleanArrayFromIndexArray() { }
        /// Friend allocator used by soap_new_eml22__BooleanArrayFromIndexArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__BooleanArrayFromIndexArray * SOAP_FMAC2 soap_instantiate_eml22__BooleanArrayFromIndexArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1115 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray (-309)
/* Type eml22__BooleanConstantArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:BooleanConstantArray': */
class SOAP_CMAC eml22__BooleanConstantArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'eml22:Value' of XSD type 'xsd:boolean'
        bool Value;
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__BooleanConstantArray, default initialized and not managed by a soap context
        virtual eml22__BooleanConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__BooleanConstantArray); }
      public:
        /// Constructor with initializations
        eml22__BooleanConstantArray() : Value(), Count() { }
        virtual ~eml22__BooleanConstantArray() { }
        /// Friend allocator used by soap_new_eml22__BooleanConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__BooleanConstantArray * SOAP_FMAC2 soap_instantiate_eml22__BooleanConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1118 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray (-310)
/* Type eml22__BooleanExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:BooleanExternalArray': */
class SOAP_CMAC eml22__BooleanExternalArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'eml22:Values' of XSD type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__BooleanExternalArray, default initialized and not managed by a soap context
        virtual eml22__BooleanExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__BooleanExternalArray); }
      public:
        /// Constructor with initializations
        eml22__BooleanExternalArray() : Values() { }
        virtual ~eml22__BooleanExternalArray() { }
        /// Friend allocator used by soap_new_eml22__BooleanExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__BooleanExternalArray * SOAP_FMAC2 soap_instantiate_eml22__BooleanExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1142 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure (-318)
/* simple XSD type 'eml22:GenericMeasure': */
class SOAP_CMAC eml22__GenericMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:UomEnum'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GenericMeasure, default initialized and not managed by a soap context
        virtual eml22__GenericMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GenericMeasure); }
      public:
        /// Constructor with initializations
        eml22__GenericMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__GenericMeasure() { }
        /// Friend allocator used by soap_new_eml22__GenericMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__GenericMeasure * SOAP_FMAC2 soap_instantiate_eml22__GenericMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1166 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_2_eml22__MeasuredDepthCoord (-326)
/* simple XSD type 'eml22:MeasuredDepthCoord': */
class SOAP_CMAC eml22__MeasuredDepthCoord {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// required attribute 'datum' of XSD type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MeasuredDepthCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MeasuredDepthCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MeasuredDepthCoord, default initialized and not managed by a soap context
        virtual eml22__MeasuredDepthCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MeasuredDepthCoord); }
      public:
        /// Constructor with initializations
        eml22__MeasuredDepthCoord() : __item(), uom(), datum(), soap() { }
        virtual ~eml22__MeasuredDepthCoord() { }
        /// Friend allocator used by soap_new_eml22__MeasuredDepthCoord(struct soap*, int)
        friend SOAP_FMAC1 eml22__MeasuredDepthCoord * SOAP_FMAC2 soap_instantiate_eml22__MeasuredDepthCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1169 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray (-327)
/* Type eml22__StringConstantArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:StringConstantArray': */
class SOAP_CMAC eml22__StringConstantArray : public eml22__AbstractStringArray {
      public:
        /// Required element 'eml22:Value' of XSD type 'eml22:String2000'
        std::string Value;
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringConstantArray, default initialized and not managed by a soap context
        virtual eml22__StringConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringConstantArray); }
      public:
        /// Constructor with initializations
        eml22__StringConstantArray() : Value(), Count() { }
        virtual ~eml22__StringConstantArray() { }
        /// Friend allocator used by soap_new_eml22__StringConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringConstantArray * SOAP_FMAC2 soap_instantiate_eml22__StringConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1172 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray (-328)
/* Type eml22__StringExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:StringExternalArray': */
class SOAP_CMAC eml22__StringExternalArray : public eml22__AbstractStringArray {
      public:
        /// Required element 'eml22:Values' of XSD type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringExternalArray, default initialized and not managed by a soap context
        virtual eml22__StringExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringExternalArray); }
      public:
        /// Constructor with initializations
        eml22__StringExternalArray() : Values() { }
        virtual ~eml22__StringExternalArray() { }
        /// Friend allocator used by soap_new_eml22__StringExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringExternalArray * SOAP_FMAC2 soap_instantiate_eml22__StringExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1181 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellVerticalDepthCoord (-331)
/* simple XSD type 'eml22:WellVerticalDepthCoord': */
class SOAP_CMAC eml22__WellVerticalDepthCoord {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// required attribute 'datum' of XSD type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__WellVerticalDepthCoord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__WellVerticalDepthCoord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__WellVerticalDepthCoord, default initialized and not managed by a soap context
        virtual eml22__WellVerticalDepthCoord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__WellVerticalDepthCoord); }
      public:
        /// Constructor with initializations
        eml22__WellVerticalDepthCoord() : __item(), uom(), datum(), soap() { }
        virtual ~eml22__WellVerticalDepthCoord() { }
        /// Friend allocator used by soap_new_eml22__WellVerticalDepthCoord(struct soap*, int)
        friend SOAP_FMAC1 eml22__WellVerticalDepthCoord * SOAP_FMAC2 soap_instantiate_eml22__WellVerticalDepthCoord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1184 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure (-332)
/* simple XSD type 'eml22:AbsorbedDoseMeasure': */
class SOAP_CMAC eml22__AbsorbedDoseMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AbsorbedDoseUom'
        enum eml22__AbsorbedDoseUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbsorbedDoseMeasure, default initialized and not managed by a soap context
        virtual eml22__AbsorbedDoseMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbsorbedDoseMeasure); }
      public:
        /// Constructor with initializations
        eml22__AbsorbedDoseMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AbsorbedDoseMeasure() { }
        /// Friend allocator used by soap_new_eml22__AbsorbedDoseMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbsorbedDoseMeasure * SOAP_FMAC2 soap_instantiate_eml22__AbsorbedDoseMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1187 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt (-333)
/* simple XSD type 'eml22:AbsorbedDoseMeasureExt': */
class SOAP_CMAC eml22__AbsorbedDoseMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AbsorbedDoseUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbsorbedDoseMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AbsorbedDoseMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbsorbedDoseMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AbsorbedDoseMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AbsorbedDoseMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AbsorbedDoseMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbsorbedDoseMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AbsorbedDoseMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1190 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure (-334)
/* simple XSD type 'eml22:ActivityOfRadioactivityMeasure': */
class SOAP_CMAC eml22__ActivityOfRadioactivityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ActivityOfRadioactivityUom'
        enum eml22__ActivityOfRadioactivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ActivityOfRadioactivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ActivityOfRadioactivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ActivityOfRadioactivityMeasure); }
      public:
        /// Constructor with initializations
        eml22__ActivityOfRadioactivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ActivityOfRadioactivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ActivityOfRadioactivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ActivityOfRadioactivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ActivityOfRadioactivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1193 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt (-335)
/* simple XSD type 'eml22:ActivityOfRadioactivityMeasureExt': */
class SOAP_CMAC eml22__ActivityOfRadioactivityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ActivityOfRadioactivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ActivityOfRadioactivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ActivityOfRadioactivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ActivityOfRadioactivityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ActivityOfRadioactivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ActivityOfRadioactivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ActivityOfRadioactivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ActivityOfRadioactivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ActivityOfRadioactivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1196 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure (-336)
/* simple XSD type 'eml22:AmountOfSubstanceMeasure': */
class SOAP_CMAC eml22__AmountOfSubstanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstanceUom'
        enum eml22__AmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1199 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt (-337)
/* simple XSD type 'eml22:AmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1202 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure (-338)
/* simple XSD type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerAmountOfSubstanceUom'
        enum eml22__AmountOfSubstancePerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1205 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-339)
/* simple XSD type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1208 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure (-340)
/* simple XSD type 'eml22:AmountOfSubstancePerAreaMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerAreaUom'
        enum eml22__AmountOfSubstancePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1211 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt (-341)
/* simple XSD type 'eml22:AmountOfSubstancePerAreaMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1214 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure (-342)
/* simple XSD type 'eml22:AmountOfSubstancePerTimeMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerTimeUom'
        enum eml22__AmountOfSubstancePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1217 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt (-343)
/* simple XSD type 'eml22:AmountOfSubstancePerTimeMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1220 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure (-344)
/* simple XSD type 'eml22:AmountOfSubstancePerTimePerAreaMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerTimePerAreaUom'
        enum eml22__AmountOfSubstancePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1223 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt (-345)
/* simple XSD type 'eml22:AmountOfSubstancePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1226 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure (-346)
/* simple XSD type 'eml22:AmountOfSubstancePerVolumeMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerVolumeUom'
        enum eml22__AmountOfSubstancePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1229 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt (-347)
/* simple XSD type 'eml22:AmountOfSubstancePerVolumeMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AmountOfSubstancePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AmountOfSubstancePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1232 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure (-348)
/* simple XSD type 'eml22:AnglePerLengthMeasure': */
class SOAP_CMAC eml22__AnglePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AnglePerLengthUom'
        enum eml22__AnglePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__AnglePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__AnglePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__AnglePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__AnglePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1235 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt (-349)
/* simple XSD type 'eml22:AnglePerLengthMeasureExt': */
class SOAP_CMAC eml22__AnglePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AnglePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AnglePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AnglePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AnglePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AnglePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1238 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure (-350)
/* simple XSD type 'eml22:AnglePerVolumeMeasure': */
class SOAP_CMAC eml22__AnglePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AnglePerVolumeUom'
        enum eml22__AnglePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__AnglePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__AnglePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AnglePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AnglePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1241 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt (-351)
/* simple XSD type 'eml22:AnglePerVolumeMeasureExt': */
class SOAP_CMAC eml22__AnglePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AnglePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AnglePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AnglePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AnglePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AnglePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1244 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure (-352)
/* simple XSD type 'eml22:AngularAccelerationMeasure': */
class SOAP_CMAC eml22__AngularAccelerationMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AngularAccelerationUom'
        enum eml22__AngularAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml22__AngularAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularAccelerationMeasure); }
      public:
        /// Constructor with initializations
        eml22__AngularAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AngularAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml22__AngularAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml22__AngularAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1247 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt (-353)
/* simple XSD type 'eml22:AngularAccelerationMeasureExt': */
class SOAP_CMAC eml22__AngularAccelerationMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AngularAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AngularAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularAccelerationMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AngularAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AngularAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AngularAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AngularAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1250 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure (-354)
/* simple XSD type 'eml22:AngularVelocityMeasure': */
class SOAP_CMAC eml22__AngularVelocityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AngularVelocityUom'
        enum eml22__AngularVelocityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularVelocityMeasure, default initialized and not managed by a soap context
        virtual eml22__AngularVelocityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularVelocityMeasure); }
      public:
        /// Constructor with initializations
        eml22__AngularVelocityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AngularVelocityMeasure() { }
        /// Friend allocator used by soap_new_eml22__AngularVelocityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularVelocityMeasure * SOAP_FMAC2 soap_instantiate_eml22__AngularVelocityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1253 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt (-355)
/* simple XSD type 'eml22:AngularVelocityMeasureExt': */
class SOAP_CMAC eml22__AngularVelocityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AngularVelocityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularVelocityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AngularVelocityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularVelocityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AngularVelocityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AngularVelocityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AngularVelocityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularVelocityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AngularVelocityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1256 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure (-356)
/* simple XSD type 'eml22:APIGammaRayMeasure': */
class SOAP_CMAC eml22__APIGammaRayMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:APIGammaRayUom'
        enum eml22__APIGammaRayUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGammaRayMeasure, default initialized and not managed by a soap context
        virtual eml22__APIGammaRayMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGammaRayMeasure); }
      public:
        /// Constructor with initializations
        eml22__APIGammaRayMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__APIGammaRayMeasure() { }
        /// Friend allocator used by soap_new_eml22__APIGammaRayMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGammaRayMeasure * SOAP_FMAC2 soap_instantiate_eml22__APIGammaRayMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1259 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt (-357)
/* simple XSD type 'eml22:APIGammaRayMeasureExt': */
class SOAP_CMAC eml22__APIGammaRayMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:APIGammaRayUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGammaRayMeasureExt, default initialized and not managed by a soap context
        virtual eml22__APIGammaRayMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGammaRayMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__APIGammaRayMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__APIGammaRayMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__APIGammaRayMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGammaRayMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__APIGammaRayMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1262 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure (-358)
/* simple XSD type 'eml22:APIGravityMeasure': */
class SOAP_CMAC eml22__APIGravityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:APIGravityUom'
        enum eml22__APIGravityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGravityMeasure, default initialized and not managed by a soap context
        virtual eml22__APIGravityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGravityMeasure); }
      public:
        /// Constructor with initializations
        eml22__APIGravityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__APIGravityMeasure() { }
        /// Friend allocator used by soap_new_eml22__APIGravityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGravityMeasure * SOAP_FMAC2 soap_instantiate_eml22__APIGravityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1265 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt (-359)
/* simple XSD type 'eml22:APIGravityMeasureExt': */
class SOAP_CMAC eml22__APIGravityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:APIGravityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGravityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__APIGravityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGravityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__APIGravityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__APIGravityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__APIGravityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGravityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__APIGravityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1268 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure (-360)
/* simple XSD type 'eml22:APINeutronMeasure': */
class SOAP_CMAC eml22__APINeutronMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:APINeutronUom'
        enum eml22__APINeutronUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APINeutronMeasure, default initialized and not managed by a soap context
        virtual eml22__APINeutronMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APINeutronMeasure); }
      public:
        /// Constructor with initializations
        eml22__APINeutronMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__APINeutronMeasure() { }
        /// Friend allocator used by soap_new_eml22__APINeutronMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__APINeutronMeasure * SOAP_FMAC2 soap_instantiate_eml22__APINeutronMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1271 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt (-361)
/* simple XSD type 'eml22:APINeutronMeasureExt': */
class SOAP_CMAC eml22__APINeutronMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:APINeutronUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APINeutronMeasureExt, default initialized and not managed by a soap context
        virtual eml22__APINeutronMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APINeutronMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__APINeutronMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__APINeutronMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__APINeutronMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__APINeutronMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__APINeutronMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1274 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure (-362)
/* simple XSD type 'eml22:AreaMeasure': */
class SOAP_CMAC eml22__AreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaUom'
        enum eml22__AreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1277 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt (-363)
/* simple XSD type 'eml22:AreaMeasureExt': */
class SOAP_CMAC eml22__AreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1280 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure (-364)
/* simple XSD type 'eml22:AreaPerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml22__AreaPerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerAmountOfSubstanceUom'
        enum eml22__AreaPerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaPerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1283 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt (-365)
/* simple XSD type 'eml22:AreaPerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml22__AreaPerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaPerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1286 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure (-366)
/* simple XSD type 'eml22:AreaPerAreaMeasure': */
class SOAP_CMAC eml22__AreaPerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerAreaUom'
        enum eml22__AreaPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1289 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt (-367)
/* simple XSD type 'eml22:AreaPerAreaMeasureExt': */
class SOAP_CMAC eml22__AreaPerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1292 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure (-368)
/* simple XSD type 'eml22:AreaPerCountMeasure': */
class SOAP_CMAC eml22__AreaPerCountMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerCountUom'
        enum eml22__AreaPerCountUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerCountMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerCountMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerCountMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaPerCountMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerCountMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerCountMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerCountMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerCountMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1295 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt (-369)
/* simple XSD type 'eml22:AreaPerCountMeasureExt': */
class SOAP_CMAC eml22__AreaPerCountMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerCountUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerCountMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerCountMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerCountMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaPerCountMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerCountMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerCountMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerCountMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerCountMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1298 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure (-370)
/* simple XSD type 'eml22:AreaPerMassMeasure': */
class SOAP_CMAC eml22__AreaPerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerMassUom'
        enum eml22__AreaPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1301 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt (-371)
/* simple XSD type 'eml22:AreaPerMassMeasureExt': */
class SOAP_CMAC eml22__AreaPerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1304 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure (-372)
/* simple XSD type 'eml22:AreaPerTimeMeasure': */
class SOAP_CMAC eml22__AreaPerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerTimeUom'
        enum eml22__AreaPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1307 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt (-373)
/* simple XSD type 'eml22:AreaPerTimeMeasureExt': */
class SOAP_CMAC eml22__AreaPerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1310 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure (-374)
/* simple XSD type 'eml22:AreaPerVolumeMeasure': */
class SOAP_CMAC eml22__AreaPerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerVolumeUom'
        enum eml22__AreaPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__AreaPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1313 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt (-375)
/* simple XSD type 'eml22:AreaPerVolumeMeasureExt': */
class SOAP_CMAC eml22__AreaPerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AreaPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AreaPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1316 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure (-376)
/* simple XSD type 'eml22:AttenuationPerFrequencyIntervalMeasure': */
class SOAP_CMAC eml22__AttenuationPerFrequencyIntervalMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AttenuationPerFrequencyIntervalUom'
        enum eml22__AttenuationPerFrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AttenuationPerFrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml22__AttenuationPerFrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AttenuationPerFrequencyIntervalMeasure); }
      public:
        /// Constructor with initializations
        eml22__AttenuationPerFrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AttenuationPerFrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml22__AttenuationPerFrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AttenuationPerFrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml22__AttenuationPerFrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1319 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt (-377)
/* simple XSD type 'eml22:AttenuationPerFrequencyIntervalMeasureExt': */
class SOAP_CMAC eml22__AttenuationPerFrequencyIntervalMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:AttenuationPerFrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AttenuationPerFrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AttenuationPerFrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AttenuationPerFrequencyIntervalMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__AttenuationPerFrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AttenuationPerFrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AttenuationPerFrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1322 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure (-378)
/* simple XSD type 'eml22:CapacitanceMeasure': */
class SOAP_CMAC eml22__CapacitanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:CapacitanceUom'
        enum eml22__CapacitanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CapacitanceMeasure, default initialized and not managed by a soap context
        virtual eml22__CapacitanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CapacitanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__CapacitanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__CapacitanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__CapacitanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__CapacitanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__CapacitanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1325 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt (-379)
/* simple XSD type 'eml22:CapacitanceMeasureExt': */
class SOAP_CMAC eml22__CapacitanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:CapacitanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CapacitanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__CapacitanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CapacitanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__CapacitanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__CapacitanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__CapacitanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__CapacitanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__CapacitanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1328 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure (-380)
/* simple XSD type 'eml22:CationExchangeCapacityMeasure': */
class SOAP_CMAC eml22__CationExchangeCapacityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:CationExchangeCapacityUom'
        enum eml22__CationExchangeCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CationExchangeCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__CationExchangeCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CationExchangeCapacityMeasure); }
      public:
        /// Constructor with initializations
        eml22__CationExchangeCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__CationExchangeCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__CationExchangeCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__CationExchangeCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__CationExchangeCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1331 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt (-381)
/* simple XSD type 'eml22:CationExchangeCapacityMeasureExt': */
class SOAP_CMAC eml22__CationExchangeCapacityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:CationExchangeCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CationExchangeCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__CationExchangeCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CationExchangeCapacityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__CationExchangeCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__CationExchangeCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__CationExchangeCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__CationExchangeCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__CationExchangeCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1334 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure (-382)
/* simple XSD type 'eml22:DataTransferSpeedMeasure': */
class SOAP_CMAC eml22__DataTransferSpeedMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DataTransferSpeedUom'
        enum eml22__DataTransferSpeedUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataTransferSpeedMeasure, default initialized and not managed by a soap context
        virtual eml22__DataTransferSpeedMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataTransferSpeedMeasure); }
      public:
        /// Constructor with initializations
        eml22__DataTransferSpeedMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DataTransferSpeedMeasure() { }
        /// Friend allocator used by soap_new_eml22__DataTransferSpeedMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataTransferSpeedMeasure * SOAP_FMAC2 soap_instantiate_eml22__DataTransferSpeedMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1337 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt (-383)
/* simple XSD type 'eml22:DataTransferSpeedMeasureExt': */
class SOAP_CMAC eml22__DataTransferSpeedMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DataTransferSpeedUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataTransferSpeedMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DataTransferSpeedMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataTransferSpeedMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DataTransferSpeedMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DataTransferSpeedMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DataTransferSpeedMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataTransferSpeedMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DataTransferSpeedMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1340 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure (-384)
/* simple XSD type 'eml22:DiffusionCoefficientMeasure': */
class SOAP_CMAC eml22__DiffusionCoefficientMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DiffusionCoefficientUom'
        enum eml22__DiffusionCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusionCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml22__DiffusionCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusionCoefficientMeasure); }
      public:
        /// Constructor with initializations
        eml22__DiffusionCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusionCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml22__DiffusionCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusionCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml22__DiffusionCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1343 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt (-385)
/* simple XSD type 'eml22:DiffusionCoefficientMeasureExt': */
class SOAP_CMAC eml22__DiffusionCoefficientMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DiffusionCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusionCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DiffusionCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusionCoefficientMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DiffusionCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusionCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DiffusionCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusionCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DiffusionCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1346 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure (-386)
/* simple XSD type 'eml22:DiffusiveTimeOfFlightMeasure': */
class SOAP_CMAC eml22__DiffusiveTimeOfFlightMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DiffusiveTimeOfFlightUom'
        enum eml22__DiffusiveTimeOfFlightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusiveTimeOfFlightMeasure, default initialized and not managed by a soap context
        virtual eml22__DiffusiveTimeOfFlightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusiveTimeOfFlightMeasure); }
      public:
        /// Constructor with initializations
        eml22__DiffusiveTimeOfFlightMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusiveTimeOfFlightMeasure() { }
        /// Friend allocator used by soap_new_eml22__DiffusiveTimeOfFlightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusiveTimeOfFlightMeasure * SOAP_FMAC2 soap_instantiate_eml22__DiffusiveTimeOfFlightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1349 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt (-387)
/* simple XSD type 'eml22:DiffusiveTimeOfFlightMeasureExt': */
class SOAP_CMAC eml22__DiffusiveTimeOfFlightMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DiffusiveTimeOfFlightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusiveTimeOfFlightMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DiffusiveTimeOfFlightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusiveTimeOfFlightMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DiffusiveTimeOfFlightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusiveTimeOfFlightMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DiffusiveTimeOfFlightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusiveTimeOfFlightMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DiffusiveTimeOfFlightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1352 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure (-388)
/* simple XSD type 'eml22:DigitalStorageMeasure': */
class SOAP_CMAC eml22__DigitalStorageMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DigitalStorageUom'
        enum eml22__DigitalStorageUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DigitalStorageMeasure, default initialized and not managed by a soap context
        virtual eml22__DigitalStorageMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DigitalStorageMeasure); }
      public:
        /// Constructor with initializations
        eml22__DigitalStorageMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DigitalStorageMeasure() { }
        /// Friend allocator used by soap_new_eml22__DigitalStorageMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DigitalStorageMeasure * SOAP_FMAC2 soap_instantiate_eml22__DigitalStorageMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1355 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt (-389)
/* simple XSD type 'eml22:DigitalStorageMeasureExt': */
class SOAP_CMAC eml22__DigitalStorageMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DigitalStorageUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DigitalStorageMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DigitalStorageMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DigitalStorageMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DigitalStorageMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DigitalStorageMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DigitalStorageMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DigitalStorageMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DigitalStorageMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1358 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure (-390)
/* simple XSD type 'eml22:DimensionlessMeasure': */
class SOAP_CMAC eml22__DimensionlessMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DimensionlessUom'
        enum eml22__DimensionlessUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DimensionlessMeasure, default initialized and not managed by a soap context
        virtual eml22__DimensionlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DimensionlessMeasure); }
      public:
        /// Constructor with initializations
        eml22__DimensionlessMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DimensionlessMeasure() { }
        /// Friend allocator used by soap_new_eml22__DimensionlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DimensionlessMeasure * SOAP_FMAC2 soap_instantiate_eml22__DimensionlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1361 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt (-391)
/* simple XSD type 'eml22:DimensionlessMeasureExt': */
class SOAP_CMAC eml22__DimensionlessMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DimensionlessUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DimensionlessMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DimensionlessMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DimensionlessMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DimensionlessMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DimensionlessMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DimensionlessMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DimensionlessMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DimensionlessMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1364 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure (-392)
/* simple XSD type 'eml22:DipoleMomentMeasure': */
class SOAP_CMAC eml22__DipoleMomentMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DipoleMomentUom'
        enum eml22__DipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml22__DipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DipoleMomentMeasure); }
      public:
        /// Constructor with initializations
        eml22__DipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml22__DipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml22__DipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1367 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt (-393)
/* simple XSD type 'eml22:DipoleMomentMeasureExt': */
class SOAP_CMAC eml22__DipoleMomentMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DipoleMomentMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1370 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure (-394)
/* simple XSD type 'eml22:DoseEquivalentMeasure': */
class SOAP_CMAC eml22__DoseEquivalentMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DoseEquivalentUom'
        enum eml22__DoseEquivalentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoseEquivalentMeasure, default initialized and not managed by a soap context
        virtual eml22__DoseEquivalentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoseEquivalentMeasure); }
      public:
        /// Constructor with initializations
        eml22__DoseEquivalentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DoseEquivalentMeasure() { }
        /// Friend allocator used by soap_new_eml22__DoseEquivalentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoseEquivalentMeasure * SOAP_FMAC2 soap_instantiate_eml22__DoseEquivalentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1373 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt (-395)
/* simple XSD type 'eml22:DoseEquivalentMeasureExt': */
class SOAP_CMAC eml22__DoseEquivalentMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DoseEquivalentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoseEquivalentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DoseEquivalentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoseEquivalentMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DoseEquivalentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DoseEquivalentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DoseEquivalentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoseEquivalentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DoseEquivalentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1376 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure (-396)
/* simple XSD type 'eml22:DynamicViscosityMeasure': */
class SOAP_CMAC eml22__DynamicViscosityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DynamicViscosityUom'
        enum eml22__DynamicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DynamicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml22__DynamicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DynamicViscosityMeasure); }
      public:
        /// Constructor with initializations
        eml22__DynamicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DynamicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml22__DynamicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DynamicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml22__DynamicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1379 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt (-397)
/* simple XSD type 'eml22:DynamicViscosityMeasureExt': */
class SOAP_CMAC eml22__DynamicViscosityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:DynamicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DynamicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DynamicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DynamicViscosityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__DynamicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DynamicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DynamicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DynamicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DynamicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1382 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure (-398)
/* simple XSD type 'eml22:ElectricalResistivityMeasure': */
class SOAP_CMAC eml22__ElectricalResistivityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricalResistivityUom'
        enum eml22__ElectricalResistivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricalResistivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricalResistivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricalResistivityMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricalResistivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricalResistivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricalResistivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricalResistivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricalResistivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1385 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt (-399)
/* simple XSD type 'eml22:ElectricalResistivityMeasureExt': */
class SOAP_CMAC eml22__ElectricalResistivityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricalResistivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricalResistivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricalResistivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricalResistivityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricalResistivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricalResistivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricalResistivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricalResistivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricalResistivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1388 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure (-400)
/* simple XSD type 'eml22:ElectricChargeMeasure': */
class SOAP_CMAC eml22__ElectricChargeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargeUom'
        enum eml22__ElectricChargeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargeMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargeMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1391 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt (-401)
/* simple XSD type 'eml22:ElectricChargeMeasureExt': */
class SOAP_CMAC eml22__ElectricChargeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1394 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure (-402)
/* simple XSD type 'eml22:ElectricChargePerAreaMeasure': */
class SOAP_CMAC eml22__ElectricChargePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargePerAreaUom'
        enum eml22__ElectricChargePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1397 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt (-403)
/* simple XSD type 'eml22:ElectricChargePerAreaMeasureExt': */
class SOAP_CMAC eml22__ElectricChargePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1400 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure (-404)
/* simple XSD type 'eml22:ElectricChargePerMassMeasure': */
class SOAP_CMAC eml22__ElectricChargePerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargePerMassUom'
        enum eml22__ElectricChargePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1403 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt (-405)
/* simple XSD type 'eml22:ElectricChargePerMassMeasureExt': */
class SOAP_CMAC eml22__ElectricChargePerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1406 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure (-406)
/* simple XSD type 'eml22:ElectricChargePerVolumeMeasure': */
class SOAP_CMAC eml22__ElectricChargePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargePerVolumeUom'
        enum eml22__ElectricChargePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1409 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt (-407)
/* simple XSD type 'eml22:ElectricChargePerVolumeMeasureExt': */
class SOAP_CMAC eml22__ElectricChargePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricChargePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricChargePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1412 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure (-408)
/* simple XSD type 'eml22:ElectricConductanceMeasure': */
class SOAP_CMAC eml22__ElectricConductanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricConductanceUom'
        enum eml22__ElectricConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1415 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt (-409)
/* simple XSD type 'eml22:ElectricConductanceMeasureExt': */
class SOAP_CMAC eml22__ElectricConductanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1418 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure (-410)
/* simple XSD type 'eml22:ElectricConductivityMeasure': */
class SOAP_CMAC eml22__ElectricConductivityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricConductivityUom'
        enum eml22__ElectricConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductivityMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1421 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt (-411)
/* simple XSD type 'eml22:ElectricConductivityMeasureExt': */
class SOAP_CMAC eml22__ElectricConductivityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductivityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1424 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure (-412)
/* simple XSD type 'eml22:ElectricCurrentDensityMeasure': */
class SOAP_CMAC eml22__ElectricCurrentDensityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricCurrentDensityUom'
        enum eml22__ElectricCurrentDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentDensityMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentDensityMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricCurrentDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentDensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentDensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1427 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt (-413)
/* simple XSD type 'eml22:ElectricCurrentDensityMeasureExt': */
class SOAP_CMAC eml22__ElectricCurrentDensityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricCurrentDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentDensityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricCurrentDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1430 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure (-414)
/* simple XSD type 'eml22:ElectricCurrentMeasure': */
class SOAP_CMAC eml22__ElectricCurrentMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricCurrentUom'
        enum eml22__ElectricCurrentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricCurrentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1433 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt (-415)
/* simple XSD type 'eml22:ElectricCurrentMeasureExt': */
class SOAP_CMAC eml22__ElectricCurrentMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricCurrentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricCurrentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1436 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure (-416)
/* simple XSD type 'eml22:ElectricFieldStrengthMeasure': */
class SOAP_CMAC eml22__ElectricFieldStrengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricFieldStrengthUom'
        enum eml22__ElectricFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricFieldStrengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1439 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt (-417)
/* simple XSD type 'eml22:ElectricFieldStrengthMeasureExt': */
class SOAP_CMAC eml22__ElectricFieldStrengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricFieldStrengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1442 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure (-418)
/* simple XSD type 'eml22:ElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml22__ElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricPotentialDifferenceUom'
        enum eml22__ElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1445 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt (-419)
/* simple XSD type 'eml22:ElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml22__ElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1448 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure (-420)
/* simple XSD type 'eml22:ElectricResistanceMeasure': */
class SOAP_CMAC eml22__ElectricResistanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricResistanceUom'
        enum eml22__ElectricResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1451 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt (-421)
/* simple XSD type 'eml22:ElectricResistanceMeasureExt': */
class SOAP_CMAC eml22__ElectricResistanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1454 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure (-422)
/* simple XSD type 'eml22:ElectricResistancePerLengthMeasure': */
class SOAP_CMAC eml22__ElectricResistancePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricResistancePerLengthUom'
        enum eml22__ElectricResistancePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistancePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricResistancePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistancePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectricResistancePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistancePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistancePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistancePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistancePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1457 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt (-423)
/* simple XSD type 'eml22:ElectricResistancePerLengthMeasureExt': */
class SOAP_CMAC eml22__ElectricResistancePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectricResistancePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistancePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricResistancePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistancePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectricResistancePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistancePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistancePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistancePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistancePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1460 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure (-424)
/* simple XSD type 'eml22:ElectromagneticMomentMeasure': */
class SOAP_CMAC eml22__ElectromagneticMomentMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectromagneticMomentUom'
        enum eml22__ElectromagneticMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectromagneticMomentMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectromagneticMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectromagneticMomentMeasure); }
      public:
        /// Constructor with initializations
        eml22__ElectromagneticMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectromagneticMomentMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectromagneticMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectromagneticMomentMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectromagneticMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1463 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt (-425)
/* simple XSD type 'eml22:ElectromagneticMomentMeasureExt': */
class SOAP_CMAC eml22__ElectromagneticMomentMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ElectromagneticMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectromagneticMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectromagneticMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectromagneticMomentMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ElectromagneticMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectromagneticMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectromagneticMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectromagneticMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectromagneticMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure (-426)
/* simple XSD type 'eml22:EnergyLengthPerAreaMeasure': */
class SOAP_CMAC eml22__EnergyLengthPerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyLengthPerAreaUom'
        enum eml22__EnergyLengthPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyLengthPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1469 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt (-427)
/* simple XSD type 'eml22:EnergyLengthPerAreaMeasureExt': */
class SOAP_CMAC eml22__EnergyLengthPerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyLengthPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyLengthPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1472 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure (-428)
/* simple XSD type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasure': */
class SOAP_CMAC eml22__EnergyLengthPerTimeAreaTemperatureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyLengthPerTimeAreaTemperatureUom'
        enum eml22__EnergyLengthPerTimeAreaTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerTimeAreaTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerTimeAreaTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerTimeAreaTemperatureMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyLengthPerTimeAreaTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerTimeAreaTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerTimeAreaTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1475 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt (-429)
/* simple XSD type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasureExt': */
class SOAP_CMAC eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyLengthPerTimeAreaTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1478 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure (-430)
/* simple XSD type 'eml22:EnergyMeasure': */
class SOAP_CMAC eml22__EnergyMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyUom'
        enum eml22__EnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1481 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt (-431)
/* simple XSD type 'eml22:EnergyMeasureExt': */
class SOAP_CMAC eml22__EnergyMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1484 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure (-432)
/* simple XSD type 'eml22:EnergyPerAreaMeasure': */
class SOAP_CMAC eml22__EnergyPerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerAreaUom'
        enum eml22__EnergyPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1487 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt (-433)
/* simple XSD type 'eml22:EnergyPerAreaMeasureExt': */
class SOAP_CMAC eml22__EnergyPerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1490 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure (-434)
/* simple XSD type 'eml22:EnergyPerLengthMeasure': */
class SOAP_CMAC eml22__EnergyPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerLengthUom'
        enum eml22__EnergyPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1493 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt (-435)
/* simple XSD type 'eml22:EnergyPerLengthMeasureExt': */
class SOAP_CMAC eml22__EnergyPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1496 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure (-436)
/* simple XSD type 'eml22:EnergyPerMassMeasure': */
class SOAP_CMAC eml22__EnergyPerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerMassUom'
        enum eml22__EnergyPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1499 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt (-437)
/* simple XSD type 'eml22:EnergyPerMassMeasureExt': */
class SOAP_CMAC eml22__EnergyPerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1502 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure (-438)
/* simple XSD type 'eml22:EnergyPerMassPerTimeMeasure': */
class SOAP_CMAC eml22__EnergyPerMassPerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerMassPerTimeUom'
        enum eml22__EnergyPerMassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassPerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerMassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1505 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt (-439)
/* simple XSD type 'eml22:EnergyPerMassPerTimeMeasureExt': */
class SOAP_CMAC eml22__EnergyPerMassPerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerMassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassPerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerMassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1508 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure (-440)
/* simple XSD type 'eml22:EnergyPerVolumeMeasure': */
class SOAP_CMAC eml22__EnergyPerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerVolumeUom'
        enum eml22__EnergyPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1511 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt (-441)
/* simple XSD type 'eml22:EnergyPerVolumeMeasureExt': */
class SOAP_CMAC eml22__EnergyPerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:EnergyPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__EnergyPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1514 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure (-442)
/* simple XSD type 'eml22:ForceAreaMeasure': */
class SOAP_CMAC eml22__ForceAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForceAreaUom'
        enum eml22__ForceAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__ForceAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__ForceAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForceAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForceAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForceAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1517 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt (-443)
/* simple XSD type 'eml22:ForceAreaMeasureExt': */
class SOAP_CMAC eml22__ForceAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForceAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForceAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ForceAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForceAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForceAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForceAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1520 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure (-444)
/* simple XSD type 'eml22:ForceLengthPerLengthMeasure': */
class SOAP_CMAC eml22__ForceLengthPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForceLengthPerLengthUom'
        enum eml22__ForceLengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceLengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ForceLengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceLengthPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__ForceLengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForceLengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForceLengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceLengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForceLengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1523 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt (-445)
/* simple XSD type 'eml22:ForceLengthPerLengthMeasureExt': */
class SOAP_CMAC eml22__ForceLengthPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForceLengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceLengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForceLengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceLengthPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ForceLengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForceLengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForceLengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceLengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForceLengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1526 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure (-446)
/* simple XSD type 'eml22:ForceMeasure': */
class SOAP_CMAC eml22__ForceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForceUom'
        enum eml22__ForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceMeasure, default initialized and not managed by a soap context
        virtual eml22__ForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1529 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt (-447)
/* simple XSD type 'eml22:ForceMeasureExt': */
class SOAP_CMAC eml22__ForceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1532 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure (-448)
/* simple XSD type 'eml22:ForcePerForceMeasure': */
class SOAP_CMAC eml22__ForcePerForceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForcePerForceUom'
        enum eml22__ForcePerForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerForceMeasure, default initialized and not managed by a soap context
        virtual eml22__ForcePerForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerForceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ForcePerForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForcePerForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForcePerForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1535 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt (-449)
/* simple XSD type 'eml22:ForcePerForceMeasureExt': */
class SOAP_CMAC eml22__ForcePerForceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForcePerForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForcePerForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerForceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ForcePerForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForcePerForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForcePerForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1538 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure (-450)
/* simple XSD type 'eml22:ForcePerLengthMeasure': */
class SOAP_CMAC eml22__ForcePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForcePerLengthUom'
        enum eml22__ForcePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ForcePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__ForcePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForcePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForcePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1541 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt (-451)
/* simple XSD type 'eml22:ForcePerLengthMeasureExt': */
class SOAP_CMAC eml22__ForcePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForcePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForcePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ForcePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForcePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForcePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1544 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure (-452)
/* simple XSD type 'eml22:ForcePerVolumeMeasure': */
class SOAP_CMAC eml22__ForcePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForcePerVolumeUom'
        enum eml22__ForcePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__ForcePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__ForcePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForcePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForcePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1547 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt (-453)
/* simple XSD type 'eml22:ForcePerVolumeMeasureExt': */
class SOAP_CMAC eml22__ForcePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ForcePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForcePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ForcePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForcePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForcePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1550 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure (-454)
/* simple XSD type 'eml22:FrequencyIntervalMeasure': */
class SOAP_CMAC eml22__FrequencyIntervalMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:FrequencyIntervalUom'
        enum eml22__FrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml22__FrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyIntervalMeasure); }
      public:
        /// Constructor with initializations
        eml22__FrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml22__FrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml22__FrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1553 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt (-455)
/* simple XSD type 'eml22:FrequencyIntervalMeasureExt': */
class SOAP_CMAC eml22__FrequencyIntervalMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:FrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml22__FrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyIntervalMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__FrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__FrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__FrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1556 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure (-456)
/* simple XSD type 'eml22:FrequencyMeasure': */
class SOAP_CMAC eml22__FrequencyMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:FrequencyUom'
        enum eml22__FrequencyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyMeasure, default initialized and not managed by a soap context
        virtual eml22__FrequencyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyMeasure); }
      public:
        /// Constructor with initializations
        eml22__FrequencyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyMeasure() { }
        /// Friend allocator used by soap_new_eml22__FrequencyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyMeasure * SOAP_FMAC2 soap_instantiate_eml22__FrequencyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1559 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt (-457)
/* simple XSD type 'eml22:FrequencyMeasureExt': */
class SOAP_CMAC eml22__FrequencyMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:FrequencyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__FrequencyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__FrequencyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__FrequencyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__FrequencyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1562 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure (-458)
/* simple XSD type 'eml22:HeatCapacityMeasure': */
class SOAP_CMAC eml22__HeatCapacityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:HeatCapacityUom'
        enum eml22__HeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__HeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatCapacityMeasure); }
      public:
        /// Constructor with initializations
        eml22__HeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__HeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__HeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__HeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1565 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt (-459)
/* simple XSD type 'eml22:HeatCapacityMeasureExt': */
class SOAP_CMAC eml22__HeatCapacityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:HeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__HeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatCapacityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__HeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__HeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__HeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__HeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1568 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure (-460)
/* simple XSD type 'eml22:HeatFlowRateMeasure': */
class SOAP_CMAC eml22__HeatFlowRateMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:HeatFlowRateUom'
        enum eml22__HeatFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml22__HeatFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatFlowRateMeasure); }
      public:
        /// Constructor with initializations
        eml22__HeatFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__HeatFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml22__HeatFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml22__HeatFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1571 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt (-461)
/* simple XSD type 'eml22:HeatFlowRateMeasureExt': */
class SOAP_CMAC eml22__HeatFlowRateMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:HeatFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml22__HeatFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatFlowRateMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__HeatFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__HeatFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__HeatFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__HeatFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1574 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure (-462)
/* simple XSD type 'eml22:HeatTransferCoefficientMeasure': */
class SOAP_CMAC eml22__HeatTransferCoefficientMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:HeatTransferCoefficientUom'
        enum eml22__HeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml22__HeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatTransferCoefficientMeasure); }
      public:
        /// Constructor with initializations
        eml22__HeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__HeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml22__HeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml22__HeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1577 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt (-463)
/* simple XSD type 'eml22:HeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml22__HeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:HeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml22__HeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__HeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__HeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__HeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__HeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1580 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure (-464)
/* simple XSD type 'eml22:IlluminanceMeasure': */
class SOAP_CMAC eml22__IlluminanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:IlluminanceUom'
        enum eml22__IlluminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IlluminanceMeasure, default initialized and not managed by a soap context
        virtual eml22__IlluminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IlluminanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__IlluminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__IlluminanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__IlluminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__IlluminanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__IlluminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1583 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt (-465)
/* simple XSD type 'eml22:IlluminanceMeasureExt': */
class SOAP_CMAC eml22__IlluminanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:IlluminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IlluminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__IlluminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IlluminanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__IlluminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__IlluminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__IlluminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__IlluminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__IlluminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1586 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure (-466)
/* simple XSD type 'eml22:InductanceMeasure': */
class SOAP_CMAC eml22__InductanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:InductanceUom'
        enum eml22__InductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__InductanceMeasure, default initialized and not managed by a soap context
        virtual eml22__InductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__InductanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__InductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__InductanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__InductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__InductanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__InductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1589 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt (-467)
/* simple XSD type 'eml22:InductanceMeasureExt': */
class SOAP_CMAC eml22__InductanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:InductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__InductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__InductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__InductanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__InductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__InductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__InductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__InductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__InductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1592 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure (-468)
/* simple XSD type 'eml22:IsothermalCompressibilityMeasure': */
class SOAP_CMAC eml22__IsothermalCompressibilityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:IsothermalCompressibilityUom'
        enum eml22__IsothermalCompressibilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IsothermalCompressibilityMeasure, default initialized and not managed by a soap context
        virtual eml22__IsothermalCompressibilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IsothermalCompressibilityMeasure); }
      public:
        /// Constructor with initializations
        eml22__IsothermalCompressibilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__IsothermalCompressibilityMeasure() { }
        /// Friend allocator used by soap_new_eml22__IsothermalCompressibilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__IsothermalCompressibilityMeasure * SOAP_FMAC2 soap_instantiate_eml22__IsothermalCompressibilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1595 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt (-469)
/* simple XSD type 'eml22:IsothermalCompressibilityMeasureExt': */
class SOAP_CMAC eml22__IsothermalCompressibilityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:IsothermalCompressibilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IsothermalCompressibilityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__IsothermalCompressibilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IsothermalCompressibilityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__IsothermalCompressibilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__IsothermalCompressibilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__IsothermalCompressibilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__IsothermalCompressibilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__IsothermalCompressibilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1598 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure (-470)
/* simple XSD type 'eml22:KinematicViscosityMeasure': */
class SOAP_CMAC eml22__KinematicViscosityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:KinematicViscosityUom'
        enum eml22__KinematicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__KinematicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml22__KinematicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__KinematicViscosityMeasure); }
      public:
        /// Constructor with initializations
        eml22__KinematicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__KinematicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml22__KinematicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__KinematicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml22__KinematicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1601 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt (-471)
/* simple XSD type 'eml22:KinematicViscosityMeasureExt': */
class SOAP_CMAC eml22__KinematicViscosityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:KinematicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__KinematicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__KinematicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__KinematicViscosityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__KinematicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__KinematicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__KinematicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__KinematicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__KinematicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1604 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure (-472)
/* simple XSD type 'eml22:LengthMeasure': */
class SOAP_CMAC eml22__LengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1607 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt (-473)
/* simple XSD type 'eml22:LengthMeasureExt': */
class SOAP_CMAC eml22__LengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1610 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure (-474)
/* simple XSD type 'eml22:LengthPerLengthMeasure': */
class SOAP_CMAC eml22__LengthPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerLengthUom'
        enum eml22__LengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1613 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt (-475)
/* simple XSD type 'eml22:LengthPerLengthMeasureExt': */
class SOAP_CMAC eml22__LengthPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1616 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure (-476)
/* simple XSD type 'eml22:LengthPerMassMeasure': */
class SOAP_CMAC eml22__LengthPerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerMassUom'
        enum eml22__LengthPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1619 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt (-477)
/* simple XSD type 'eml22:LengthPerMassMeasureExt': */
class SOAP_CMAC eml22__LengthPerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1622 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure (-478)
/* simple XSD type 'eml22:LengthPerPressureMeasure': */
class SOAP_CMAC eml22__LengthPerPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerPressureUom'
        enum eml22__LengthPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1625 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt (-479)
/* simple XSD type 'eml22:LengthPerPressureMeasureExt': */
class SOAP_CMAC eml22__LengthPerPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1628 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure (-480)
/* simple XSD type 'eml22:LengthPerTemperatureMeasure': */
class SOAP_CMAC eml22__LengthPerTemperatureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerTemperatureUom'
        enum eml22__LengthPerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTemperatureMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthPerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1631 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt (-481)
/* simple XSD type 'eml22:LengthPerTemperatureMeasureExt': */
class SOAP_CMAC eml22__LengthPerTemperatureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTemperatureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthPerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1634 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure (-482)
/* simple XSD type 'eml22:LengthPerTimeMeasure': */
class SOAP_CMAC eml22__LengthPerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerTimeUom'
        enum eml22__LengthPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1637 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt (-483)
/* simple XSD type 'eml22:LengthPerTimeMeasureExt': */
class SOAP_CMAC eml22__LengthPerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1640 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure (-484)
/* simple XSD type 'eml22:LengthPerVolumeMeasure': */
class SOAP_CMAC eml22__LengthPerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerVolumeUom'
        enum eml22__LengthPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__LengthPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1643 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt (-485)
/* simple XSD type 'eml22:LengthPerVolumeMeasureExt': */
class SOAP_CMAC eml22__LengthPerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LengthPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1646 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure (-486)
/* simple XSD type 'eml22:LightExposureMeasure': */
class SOAP_CMAC eml22__LightExposureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LightExposureUom'
        enum eml22__LightExposureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LightExposureMeasure, default initialized and not managed by a soap context
        virtual eml22__LightExposureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LightExposureMeasure); }
      public:
        /// Constructor with initializations
        eml22__LightExposureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LightExposureMeasure() { }
        /// Friend allocator used by soap_new_eml22__LightExposureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LightExposureMeasure * SOAP_FMAC2 soap_instantiate_eml22__LightExposureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1649 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt (-487)
/* simple XSD type 'eml22:LightExposureMeasureExt': */
class SOAP_CMAC eml22__LightExposureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LightExposureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LightExposureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LightExposureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LightExposureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LightExposureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LightExposureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LightExposureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LightExposureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LightExposureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1652 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure (-488)
/* simple XSD type 'eml22:LinearAccelerationMeasure': */
class SOAP_CMAC eml22__LinearAccelerationMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LinearAccelerationUom'
        enum eml22__LinearAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml22__LinearAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearAccelerationMeasure); }
      public:
        /// Constructor with initializations
        eml22__LinearAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LinearAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml22__LinearAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml22__LinearAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1655 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt (-489)
/* simple XSD type 'eml22:LinearAccelerationMeasureExt': */
class SOAP_CMAC eml22__LinearAccelerationMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LinearAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LinearAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearAccelerationMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LinearAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LinearAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LinearAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LinearAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1658 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure (-490)
/* simple XSD type 'eml22:LinearThermalExpansionMeasure': */
class SOAP_CMAC eml22__LinearThermalExpansionMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LinearThermalExpansionUom'
        enum eml22__LinearThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml22__LinearThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearThermalExpansionMeasure); }
      public:
        /// Constructor with initializations
        eml22__LinearThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LinearThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml22__LinearThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml22__LinearThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1661 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt (-491)
/* simple XSD type 'eml22:LinearThermalExpansionMeasureExt': */
class SOAP_CMAC eml22__LinearThermalExpansionMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LinearThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LinearThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearThermalExpansionMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LinearThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LinearThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LinearThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LinearThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1664 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure (-492)
/* simple XSD type 'eml22:LogarithmicPowerRatioMeasure': */
class SOAP_CMAC eml22__LogarithmicPowerRatioMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LogarithmicPowerRatioUom'
        enum eml22__LogarithmicPowerRatioUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioMeasure, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioMeasure); }
      public:
        /// Constructor with initializations
        eml22__LogarithmicPowerRatioMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioMeasure() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioMeasure * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1667 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt (-493)
/* simple XSD type 'eml22:LogarithmicPowerRatioMeasureExt': */
class SOAP_CMAC eml22__LogarithmicPowerRatioMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LogarithmicPowerRatioUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LogarithmicPowerRatioMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1670 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure (-494)
/* simple XSD type 'eml22:LogarithmicPowerRatioPerLengthMeasure': */
class SOAP_CMAC eml22__LogarithmicPowerRatioPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LogarithmicPowerRatioPerLengthUom'
        enum eml22__LogarithmicPowerRatioPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__LogarithmicPowerRatioPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1673 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt (-495)
/* simple XSD type 'eml22:LogarithmicPowerRatioPerLengthMeasureExt': */
class SOAP_CMAC eml22__LogarithmicPowerRatioPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LogarithmicPowerRatioPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LogarithmicPowerRatioPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1676 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure (-496)
/* simple XSD type 'eml22:LuminanceMeasure': */
class SOAP_CMAC eml22__LuminanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminanceUom'
        enum eml22__LuminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminanceMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__LuminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1679 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt (-497)
/* simple XSD type 'eml22:LuminanceMeasureExt': */
class SOAP_CMAC eml22__LuminanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LuminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1682 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure (-498)
/* simple XSD type 'eml22:LuminousEfficacyMeasure': */
class SOAP_CMAC eml22__LuminousEfficacyMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminousEfficacyUom'
        enum eml22__LuminousEfficacyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousEfficacyMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminousEfficacyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousEfficacyMeasure); }
      public:
        /// Constructor with initializations
        eml22__LuminousEfficacyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousEfficacyMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminousEfficacyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousEfficacyMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminousEfficacyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1685 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt (-499)
/* simple XSD type 'eml22:LuminousEfficacyMeasureExt': */
class SOAP_CMAC eml22__LuminousEfficacyMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminousEfficacyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousEfficacyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminousEfficacyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousEfficacyMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LuminousEfficacyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousEfficacyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminousEfficacyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousEfficacyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminousEfficacyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1688 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure (-500)
/* simple XSD type 'eml22:LuminousFluxMeasure': */
class SOAP_CMAC eml22__LuminousFluxMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminousFluxUom'
        enum eml22__LuminousFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousFluxMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminousFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousFluxMeasure); }
      public:
        /// Constructor with initializations
        eml22__LuminousFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousFluxMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminousFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousFluxMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminousFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1691 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt (-501)
/* simple XSD type 'eml22:LuminousFluxMeasureExt': */
class SOAP_CMAC eml22__LuminousFluxMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminousFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminousFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousFluxMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LuminousFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminousFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminousFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1694 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure (-502)
/* simple XSD type 'eml22:LuminousIntensityMeasure': */
class SOAP_CMAC eml22__LuminousIntensityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminousIntensityUom'
        enum eml22__LuminousIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousIntensityMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminousIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousIntensityMeasure); }
      public:
        /// Constructor with initializations
        eml22__LuminousIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminousIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminousIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1697 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt (-503)
/* simple XSD type 'eml22:LuminousIntensityMeasureExt': */
class SOAP_CMAC eml22__LuminousIntensityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LuminousIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminousIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousIntensityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__LuminousIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminousIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminousIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1700 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure (-504)
/* simple XSD type 'eml22:MagneticDipoleMomentMeasure': */
class SOAP_CMAC eml22__MagneticDipoleMomentMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticDipoleMomentUom'
        enum eml22__MagneticDipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticDipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticDipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticDipoleMomentMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticDipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticDipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticDipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticDipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticDipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1703 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt (-505)
/* simple XSD type 'eml22:MagneticDipoleMomentMeasureExt': */
class SOAP_CMAC eml22__MagneticDipoleMomentMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticDipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticDipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticDipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticDipoleMomentMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticDipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticDipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticDipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticDipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticDipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1706 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure (-506)
/* simple XSD type 'eml22:MagneticFieldStrengthMeasure': */
class SOAP_CMAC eml22__MagneticFieldStrengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFieldStrengthUom'
        enum eml22__MagneticFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFieldStrengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1709 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt (-507)
/* simple XSD type 'eml22:MagneticFieldStrengthMeasureExt': */
class SOAP_CMAC eml22__MagneticFieldStrengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFieldStrengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1712 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure (-508)
/* simple XSD type 'eml22:MagneticFluxDensityMeasure': */
class SOAP_CMAC eml22__MagneticFluxDensityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFluxDensityUom'
        enum eml22__MagneticFluxDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticFluxDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1715 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt (-509)
/* simple XSD type 'eml22:MagneticFluxDensityMeasureExt': */
class SOAP_CMAC eml22__MagneticFluxDensityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFluxDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticFluxDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1718 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure (-510)
/* simple XSD type 'eml22:MagneticFluxDensityPerLengthMeasure': */
class SOAP_CMAC eml22__MagneticFluxDensityPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFluxDensityPerLengthUom'
        enum eml22__MagneticFluxDensityPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticFluxDensityPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1721 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt (-511)
/* simple XSD type 'eml22:MagneticFluxDensityPerLengthMeasureExt': */
class SOAP_CMAC eml22__MagneticFluxDensityPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFluxDensityPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticFluxDensityPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1724 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure (-512)
/* simple XSD type 'eml22:MagneticFluxMeasure': */
class SOAP_CMAC eml22__MagneticFluxMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFluxUom'
        enum eml22__MagneticFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1727 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt (-513)
/* simple XSD type 'eml22:MagneticFluxMeasureExt': */
class SOAP_CMAC eml22__MagneticFluxMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1730 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure (-514)
/* simple XSD type 'eml22:MagneticPermeabilityMeasure': */
class SOAP_CMAC eml22__MagneticPermeabilityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticPermeabilityUom'
        enum eml22__MagneticPermeabilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticPermeabilityMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticPermeabilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticPermeabilityMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticPermeabilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticPermeabilityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticPermeabilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticPermeabilityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticPermeabilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1733 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt (-515)
/* simple XSD type 'eml22:MagneticPermeabilityMeasureExt': */
class SOAP_CMAC eml22__MagneticPermeabilityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticPermeabilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticPermeabilityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticPermeabilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticPermeabilityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticPermeabilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticPermeabilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticPermeabilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticPermeabilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticPermeabilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1736 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure (-516)
/* simple XSD type 'eml22:MagneticVectorPotentialMeasure': */
class SOAP_CMAC eml22__MagneticVectorPotentialMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticVectorPotentialUom'
        enum eml22__MagneticVectorPotentialUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticVectorPotentialMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticVectorPotentialMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticVectorPotentialMeasure); }
      public:
        /// Constructor with initializations
        eml22__MagneticVectorPotentialMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticVectorPotentialMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticVectorPotentialMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticVectorPotentialMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticVectorPotentialMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1739 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt (-517)
/* simple XSD type 'eml22:MagneticVectorPotentialMeasureExt': */
class SOAP_CMAC eml22__MagneticVectorPotentialMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MagneticVectorPotentialUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticVectorPotentialMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticVectorPotentialMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticVectorPotentialMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MagneticVectorPotentialMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticVectorPotentialMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticVectorPotentialMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticVectorPotentialMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticVectorPotentialMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1742 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure (-518)
/* simple XSD type 'eml22:MassLengthMeasure': */
class SOAP_CMAC eml22__MassLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassLengthUom'
        enum eml22__MassLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1745 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt (-519)
/* simple XSD type 'eml22:MassLengthMeasureExt': */
class SOAP_CMAC eml22__MassLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1748 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure (-520)
/* simple XSD type 'eml22:MassMeasure': */
class SOAP_CMAC eml22__MassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassUom'
        enum eml22__MassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassMeasure, default initialized and not managed by a soap context
        virtual eml22__MassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1751 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt (-521)
/* simple XSD type 'eml22:MassMeasureExt': */
class SOAP_CMAC eml22__MassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1754 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure (-522)
/* simple XSD type 'eml22:MassPerAreaMeasure': */
class SOAP_CMAC eml22__MassPerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerAreaUom'
        enum eml22__MassPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1757 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt (-523)
/* simple XSD type 'eml22:MassPerAreaMeasureExt': */
class SOAP_CMAC eml22__MassPerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1760 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure (-524)
/* simple XSD type 'eml22:MassPerEnergyMeasure': */
class SOAP_CMAC eml22__MassPerEnergyMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerEnergyUom'
        enum eml22__MassPerEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerEnergyMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerEnergyMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1763 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt (-525)
/* simple XSD type 'eml22:MassPerEnergyMeasureExt': */
class SOAP_CMAC eml22__MassPerEnergyMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerEnergyMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1766 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure (-526)
/* simple XSD type 'eml22:MassPerLengthMeasure': */
class SOAP_CMAC eml22__MassPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerLengthUom'
        enum eml22__MassPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1769 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt (-527)
/* simple XSD type 'eml22:MassPerLengthMeasureExt': */
class SOAP_CMAC eml22__MassPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1772 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure (-528)
/* simple XSD type 'eml22:MassPerMassMeasure': */
class SOAP_CMAC eml22__MassPerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerMassUom'
        enum eml22__MassPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1775 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt (-529)
/* simple XSD type 'eml22:MassPerMassMeasureExt': */
class SOAP_CMAC eml22__MassPerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1778 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure (-530)
/* simple XSD type 'eml22:MassPerTimeMeasure': */
class SOAP_CMAC eml22__MassPerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerTimeUom'
        enum eml22__MassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1781 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt (-531)
/* simple XSD type 'eml22:MassPerTimeMeasureExt': */
class SOAP_CMAC eml22__MassPerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1784 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure (-532)
/* simple XSD type 'eml22:MassPerTimePerAreaMeasure': */
class SOAP_CMAC eml22__MassPerTimePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerTimePerAreaUom'
        enum eml22__MassPerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1787 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt (-533)
/* simple XSD type 'eml22:MassPerTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__MassPerTimePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1790 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure (-534)
/* simple XSD type 'eml22:MassPerTimePerLengthMeasure': */
class SOAP_CMAC eml22__MassPerTimePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerTimePerLengthUom'
        enum eml22__MassPerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1793 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt (-535)
/* simple XSD type 'eml22:MassPerTimePerLengthMeasureExt': */
class SOAP_CMAC eml22__MassPerTimePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1796 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure (-536)
/* simple XSD type 'eml22:MassPerVolumeMeasure': */
class SOAP_CMAC eml22__MassPerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1799 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt (-537)
/* simple XSD type 'eml22:MassPerVolumeMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1802 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure (-538)
/* simple XSD type 'eml22:MassPerVolumePerLengthMeasure': */
class SOAP_CMAC eml22__MassPerVolumePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumePerLengthUom'
        enum eml22__MassPerVolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1805 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt (-539)
/* simple XSD type 'eml22:MassPerVolumePerLengthMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1808 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure (-540)
/* simple XSD type 'eml22:MassPerVolumePerPressureMeasure': */
class SOAP_CMAC eml22__MassPerVolumePerPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumePerPressureUom'
        enum eml22__MassPerVolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1811 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt (-541)
/* simple XSD type 'eml22:MassPerVolumePerPressureMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumePerPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1814 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure (-542)
/* simple XSD type 'eml22:MassPerVolumePerTemperatureMeasure': */
class SOAP_CMAC eml22__MassPerVolumePerTemperatureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumePerTemperatureUom'
        enum eml22__MassPerVolumePerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerTemperatureMeasure); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumePerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1817 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt (-543)
/* simple XSD type 'eml22:MassPerVolumePerTemperatureMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumePerTemperatureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MassPerVolumePerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerTemperatureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MassPerVolumePerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1820 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure (-544)
/* simple XSD type 'eml22:MobilityMeasure': */
class SOAP_CMAC eml22__MobilityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MobilityUom'
        enum eml22__MobilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MobilityMeasure, default initialized and not managed by a soap context
        virtual eml22__MobilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MobilityMeasure); }
      public:
        /// Constructor with initializations
        eml22__MobilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MobilityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MobilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MobilityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MobilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1823 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt (-545)
/* simple XSD type 'eml22:MobilityMeasureExt': */
class SOAP_CMAC eml22__MobilityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MobilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MobilityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MobilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MobilityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MobilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MobilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MobilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MobilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MobilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1826 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure (-546)
/* simple XSD type 'eml22:MolarEnergyMeasure': */
class SOAP_CMAC eml22__MolarEnergyMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolarEnergyUom'
        enum eml22__MolarEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarEnergyMeasure, default initialized and not managed by a soap context
        virtual eml22__MolarEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarEnergyMeasure); }
      public:
        /// Constructor with initializations
        eml22__MolarEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolarEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolarEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolarEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1829 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt (-547)
/* simple XSD type 'eml22:MolarEnergyMeasureExt': */
class SOAP_CMAC eml22__MolarEnergyMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolarEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolarEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarEnergyMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MolarEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolarEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolarEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolarEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure (-548)
/* simple XSD type 'eml22:MolarHeatCapacityMeasure': */
class SOAP_CMAC eml22__MolarHeatCapacityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolarHeatCapacityUom'
        enum eml22__MolarHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__MolarHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarHeatCapacityMeasure); }
      public:
        /// Constructor with initializations
        eml22__MolarHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolarHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolarHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolarHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1835 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt (-549)
/* simple XSD type 'eml22:MolarHeatCapacityMeasureExt': */
class SOAP_CMAC eml22__MolarHeatCapacityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolarHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolarHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarHeatCapacityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MolarHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolarHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolarHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolarHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1838 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure (-550)
/* simple XSD type 'eml22:MolarVolumeMeasure': */
class SOAP_CMAC eml22__MolarVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolarVolumeUom'
        enum eml22__MolarVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__MolarVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__MolarVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolarVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolarVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolarVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1841 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt (-551)
/* simple XSD type 'eml22:MolarVolumeMeasureExt': */
class SOAP_CMAC eml22__MolarVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolarVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolarVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MolarVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolarVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolarVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolarVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1844 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure (-552)
/* simple XSD type 'eml22:MolecularWeightMeasure': */
class SOAP_CMAC eml22__MolecularWeightMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolecularWeightUom'
        enum eml22__MolecularWeightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolecularWeightMeasure, default initialized and not managed by a soap context
        virtual eml22__MolecularWeightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolecularWeightMeasure); }
      public:
        /// Constructor with initializations
        eml22__MolecularWeightMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolecularWeightMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolecularWeightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolecularWeightMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolecularWeightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1847 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt (-553)
/* simple XSD type 'eml22:MolecularWeightMeasureExt': */
class SOAP_CMAC eml22__MolecularWeightMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MolecularWeightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolecularWeightMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolecularWeightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolecularWeightMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MolecularWeightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolecularWeightMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolecularWeightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolecularWeightMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolecularWeightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1850 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure (-554)
/* simple XSD type 'eml22:MomentOfForceMeasure': */
class SOAP_CMAC eml22__MomentOfForceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MomentOfForceUom'
        enum eml22__MomentOfForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfForceMeasure, default initialized and not managed by a soap context
        virtual eml22__MomentOfForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfForceMeasure); }
      public:
        /// Constructor with initializations
        eml22__MomentOfForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__MomentOfForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__MomentOfForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1853 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt (-555)
/* simple XSD type 'eml22:MomentOfForceMeasureExt': */
class SOAP_CMAC eml22__MomentOfForceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MomentOfForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MomentOfForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfForceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MomentOfForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MomentOfForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MomentOfForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1856 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure (-556)
/* simple XSD type 'eml22:MomentOfInertiaMeasure': */
class SOAP_CMAC eml22__MomentOfInertiaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MomentOfInertiaUom'
        enum eml22__MomentOfInertiaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfInertiaMeasure, default initialized and not managed by a soap context
        virtual eml22__MomentOfInertiaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfInertiaMeasure); }
      public:
        /// Constructor with initializations
        eml22__MomentOfInertiaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfInertiaMeasure() { }
        /// Friend allocator used by soap_new_eml22__MomentOfInertiaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfInertiaMeasure * SOAP_FMAC2 soap_instantiate_eml22__MomentOfInertiaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1859 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt (-557)
/* simple XSD type 'eml22:MomentOfInertiaMeasureExt': */
class SOAP_CMAC eml22__MomentOfInertiaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MomentOfInertiaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfInertiaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MomentOfInertiaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfInertiaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MomentOfInertiaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfInertiaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MomentOfInertiaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfInertiaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MomentOfInertiaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1862 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure (-558)
/* simple XSD type 'eml22:MomentumMeasure': */
class SOAP_CMAC eml22__MomentumMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MomentumUom'
        enum eml22__MomentumUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentumMeasure, default initialized and not managed by a soap context
        virtual eml22__MomentumMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentumMeasure); }
      public:
        /// Constructor with initializations
        eml22__MomentumMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MomentumMeasure() { }
        /// Friend allocator used by soap_new_eml22__MomentumMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentumMeasure * SOAP_FMAC2 soap_instantiate_eml22__MomentumMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1865 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt (-559)
/* simple XSD type 'eml22:MomentumMeasureExt': */
class SOAP_CMAC eml22__MomentumMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:MomentumUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentumMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MomentumMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentumMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__MomentumMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MomentumMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MomentumMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentumMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MomentumMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1868 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure (-560)
/* simple XSD type 'eml22:NormalizedPowerMeasure': */
class SOAP_CMAC eml22__NormalizedPowerMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:NormalizedPowerUom'
        enum eml22__NormalizedPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__NormalizedPowerMeasure, default initialized and not managed by a soap context
        virtual eml22__NormalizedPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__NormalizedPowerMeasure); }
      public:
        /// Constructor with initializations
        eml22__NormalizedPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__NormalizedPowerMeasure() { }
        /// Friend allocator used by soap_new_eml22__NormalizedPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__NormalizedPowerMeasure * SOAP_FMAC2 soap_instantiate_eml22__NormalizedPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1871 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt (-561)
/* simple XSD type 'eml22:NormalizedPowerMeasureExt': */
class SOAP_CMAC eml22__NormalizedPowerMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:NormalizedPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__NormalizedPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml22__NormalizedPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__NormalizedPowerMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__NormalizedPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__NormalizedPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__NormalizedPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__NormalizedPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__NormalizedPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1874 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure (-562)
/* simple XSD type 'eml22:PermeabilityLengthMeasure': */
class SOAP_CMAC eml22__PermeabilityLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PermeabilityLengthUom'
        enum eml22__PermeabilityLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__PermeabilityLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__PermeabilityLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1877 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt (-563)
/* simple XSD type 'eml22:PermeabilityLengthMeasureExt': */
class SOAP_CMAC eml22__PermeabilityLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PermeabilityLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PermeabilityLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PermeabilityLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1880 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure (-564)
/* simple XSD type 'eml22:PermeabilityRockMeasure': */
class SOAP_CMAC eml22__PermeabilityRockMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PermeabilityRockUom'
        enum eml22__PermeabilityRockUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityRockMeasure, default initialized and not managed by a soap context
        virtual eml22__PermeabilityRockMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityRockMeasure); }
      public:
        /// Constructor with initializations
        eml22__PermeabilityRockMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityRockMeasure() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityRockMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityRockMeasure * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityRockMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1883 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt (-565)
/* simple XSD type 'eml22:PermeabilityRockMeasureExt': */
class SOAP_CMAC eml22__PermeabilityRockMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PermeabilityRockUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityRockMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PermeabilityRockMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityRockMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PermeabilityRockMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityRockMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityRockMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityRockMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityRockMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1886 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure (-566)
/* simple XSD type 'eml22:PermittivityMeasure': */
class SOAP_CMAC eml22__PermittivityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PermittivityUom'
        enum eml22__PermittivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermittivityMeasure, default initialized and not managed by a soap context
        virtual eml22__PermittivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermittivityMeasure); }
      public:
        /// Constructor with initializations
        eml22__PermittivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PermittivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__PermittivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermittivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__PermittivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1889 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt (-567)
/* simple XSD type 'eml22:PermittivityMeasureExt': */
class SOAP_CMAC eml22__PermittivityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PermittivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermittivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PermittivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermittivityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PermittivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PermittivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PermittivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermittivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PermittivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1892 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure (-568)
/* simple XSD type 'eml22:PlaneAngleMeasure': */
class SOAP_CMAC eml22__PlaneAngleMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PlaneAngleUom'
        enum eml22__PlaneAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PlaneAngleMeasure, default initialized and not managed by a soap context
        virtual eml22__PlaneAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PlaneAngleMeasure); }
      public:
        /// Constructor with initializations
        eml22__PlaneAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PlaneAngleMeasure() { }
        /// Friend allocator used by soap_new_eml22__PlaneAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PlaneAngleMeasure * SOAP_FMAC2 soap_instantiate_eml22__PlaneAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1895 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt (-569)
/* simple XSD type 'eml22:PlaneAngleMeasureExt': */
class SOAP_CMAC eml22__PlaneAngleMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PlaneAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PlaneAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PlaneAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PlaneAngleMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PlaneAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PlaneAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PlaneAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PlaneAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PlaneAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1898 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure (-570)
/* simple XSD type 'eml22:PotentialDifferencePerPowerDropMeasure': */
class SOAP_CMAC eml22__PotentialDifferencePerPowerDropMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PotentialDifferencePerPowerDropUom'
        enum eml22__PotentialDifferencePerPowerDropUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PotentialDifferencePerPowerDropMeasure, default initialized and not managed by a soap context
        virtual eml22__PotentialDifferencePerPowerDropMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PotentialDifferencePerPowerDropMeasure); }
      public:
        /// Constructor with initializations
        eml22__PotentialDifferencePerPowerDropMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PotentialDifferencePerPowerDropMeasure() { }
        /// Friend allocator used by soap_new_eml22__PotentialDifferencePerPowerDropMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PotentialDifferencePerPowerDropMeasure * SOAP_FMAC2 soap_instantiate_eml22__PotentialDifferencePerPowerDropMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1901 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt (-571)
/* simple XSD type 'eml22:PotentialDifferencePerPowerDropMeasureExt': */
class SOAP_CMAC eml22__PotentialDifferencePerPowerDropMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PotentialDifferencePerPowerDropUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PotentialDifferencePerPowerDropMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PotentialDifferencePerPowerDropMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PotentialDifferencePerPowerDropMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PotentialDifferencePerPowerDropMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PotentialDifferencePerPowerDropMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PotentialDifferencePerPowerDropMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1904 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure (-572)
/* simple XSD type 'eml22:PowerMeasure': */
class SOAP_CMAC eml22__PowerMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerUom'
        enum eml22__PowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerMeasure); }
      public:
        /// Constructor with initializations
        eml22__PowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1907 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt (-573)
/* simple XSD type 'eml22:PowerMeasureExt': */
class SOAP_CMAC eml22__PowerMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1910 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure (-574)
/* simple XSD type 'eml22:PowerPerAreaMeasure': */
class SOAP_CMAC eml22__PowerPerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerPerAreaUom'
        enum eml22__PowerPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__PowerPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1913 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt (-575)
/* simple XSD type 'eml22:PowerPerAreaMeasureExt': */
class SOAP_CMAC eml22__PowerPerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PowerPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1916 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure (-576)
/* simple XSD type 'eml22:PowerPerPowerMeasure': */
class SOAP_CMAC eml22__PowerPerPowerMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerPerPowerUom'
        enum eml22__PowerPerPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerPowerMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerPerPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerPowerMeasure); }
      public:
        /// Constructor with initializations
        eml22__PowerPerPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerPowerMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerPerPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerPowerMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerPerPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1919 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt (-577)
/* simple XSD type 'eml22:PowerPerPowerMeasureExt': */
class SOAP_CMAC eml22__PowerPerPowerMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerPerPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerPerPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerPowerMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PowerPerPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerPerPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerPerPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1922 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure (-578)
/* simple XSD type 'eml22:PowerPerVolumeMeasure': */
class SOAP_CMAC eml22__PowerPerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerPerVolumeUom'
        enum eml22__PowerPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__PowerPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1925 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt (-579)
/* simple XSD type 'eml22:PowerPerVolumeMeasureExt': */
class SOAP_CMAC eml22__PowerPerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PowerPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PowerPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1928 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure (-580)
/* simple XSD type 'eml22:PressureMeasure': */
class SOAP_CMAC eml22__PressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1931 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt (-581)
/* simple XSD type 'eml22:PressureMeasureExt': */
class SOAP_CMAC eml22__PressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1934 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure (-582)
/* simple XSD type 'eml22:PressurePerPressureMeasure': */
class SOAP_CMAC eml22__PressurePerPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressurePerPressureUom'
        enum eml22__PressurePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__PressurePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressurePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressurePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressurePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1937 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt (-583)
/* simple XSD type 'eml22:PressurePerPressureMeasureExt': */
class SOAP_CMAC eml22__PressurePerPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressurePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressurePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressurePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressurePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressurePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1940 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure (-584)
/* simple XSD type 'eml22:PressurePerTimeMeasure': */
class SOAP_CMAC eml22__PressurePerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressurePerTimeUom'
        enum eml22__PressurePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__PressurePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressurePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressurePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressurePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1943 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt (-585)
/* simple XSD type 'eml22:PressurePerTimeMeasureExt': */
class SOAP_CMAC eml22__PressurePerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressurePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressurePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressurePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressurePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressurePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1946 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure (-586)
/* simple XSD type 'eml22:PressurePerVolumeMeasure': */
class SOAP_CMAC eml22__PressurePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressurePerVolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__PressurePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressurePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressurePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressurePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1949 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt (-587)
/* simple XSD type 'eml22:PressurePerVolumeMeasureExt': */
class SOAP_CMAC eml22__PressurePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressurePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressurePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressurePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressurePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressurePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1952 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure (-588)
/* simple XSD type 'eml22:PressureSquaredMeasure': */
class SOAP_CMAC eml22__PressureSquaredMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureSquaredUom'
        enum eml22__PressureSquaredUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressureSquaredMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1955 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt (-589)
/* simple XSD type 'eml22:PressureSquaredMeasureExt': */
class SOAP_CMAC eml22__PressureSquaredMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureSquaredUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressureSquaredMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1958 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure (-590)
/* simple XSD type 'eml22:PressureSquaredPerForceTimePerAreaMeasure': */
class SOAP_CMAC eml22__PressureSquaredPerForceTimePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureSquaredPerForceTimePerAreaUom'
        enum eml22__PressureSquaredPerForceTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredPerForceTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredPerForceTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredPerForceTimePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressureSquaredPerForceTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredPerForceTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredPerForceTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1961 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt (-591)
/* simple XSD type 'eml22:PressureSquaredPerForceTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__PressureSquaredPerForceTimePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureSquaredPerForceTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredPerForceTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredPerForceTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredPerForceTimePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressureSquaredPerForceTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredPerForceTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredPerForceTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1964 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure (-592)
/* simple XSD type 'eml22:PressureTimePerVolumeMeasure': */
class SOAP_CMAC eml22__PressureTimePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureTimePerVolumeUom'
        enum eml22__PressureTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureTimePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__PressureTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1967 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt (-593)
/* simple XSD type 'eml22:PressureTimePerVolumeMeasureExt': */
class SOAP_CMAC eml22__PressureTimePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureTimePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__PressureTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1970 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure (-594)
/* simple XSD type 'eml22:QuantityOfLightMeasure': */
class SOAP_CMAC eml22__QuantityOfLightMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:QuantityOfLightUom'
        enum eml22__QuantityOfLightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__QuantityOfLightMeasure, default initialized and not managed by a soap context
        virtual eml22__QuantityOfLightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__QuantityOfLightMeasure); }
      public:
        /// Constructor with initializations
        eml22__QuantityOfLightMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__QuantityOfLightMeasure() { }
        /// Friend allocator used by soap_new_eml22__QuantityOfLightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__QuantityOfLightMeasure * SOAP_FMAC2 soap_instantiate_eml22__QuantityOfLightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1973 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt (-595)
/* simple XSD type 'eml22:QuantityOfLightMeasureExt': */
class SOAP_CMAC eml22__QuantityOfLightMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:QuantityOfLightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__QuantityOfLightMeasureExt, default initialized and not managed by a soap context
        virtual eml22__QuantityOfLightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__QuantityOfLightMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__QuantityOfLightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__QuantityOfLightMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__QuantityOfLightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__QuantityOfLightMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__QuantityOfLightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1976 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure (-596)
/* simple XSD type 'eml22:RadianceMeasure': */
class SOAP_CMAC eml22__RadianceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:RadianceUom'
        enum eml22__RadianceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadianceMeasure, default initialized and not managed by a soap context
        virtual eml22__RadianceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadianceMeasure); }
      public:
        /// Constructor with initializations
        eml22__RadianceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__RadianceMeasure() { }
        /// Friend allocator used by soap_new_eml22__RadianceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadianceMeasure * SOAP_FMAC2 soap_instantiate_eml22__RadianceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1979 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt (-597)
/* simple XSD type 'eml22:RadianceMeasureExt': */
class SOAP_CMAC eml22__RadianceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:RadianceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadianceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__RadianceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadianceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__RadianceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__RadianceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__RadianceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadianceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__RadianceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1982 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure (-598)
/* simple XSD type 'eml22:RadiantIntensityMeasure': */
class SOAP_CMAC eml22__RadiantIntensityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:RadiantIntensityUom'
        enum eml22__RadiantIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadiantIntensityMeasure, default initialized and not managed by a soap context
        virtual eml22__RadiantIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadiantIntensityMeasure); }
      public:
        /// Constructor with initializations
        eml22__RadiantIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__RadiantIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__RadiantIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadiantIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__RadiantIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1985 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt (-599)
/* simple XSD type 'eml22:RadiantIntensityMeasureExt': */
class SOAP_CMAC eml22__RadiantIntensityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:RadiantIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadiantIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__RadiantIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadiantIntensityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__RadiantIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__RadiantIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__RadiantIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadiantIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__RadiantIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1988 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure (-600)
/* simple XSD type 'eml22:ReciprocalAreaMeasure': */
class SOAP_CMAC eml22__ReciprocalAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalAreaUom'
        enum eml22__ReciprocalAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1991 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt (-601)
/* simple XSD type 'eml22:ReciprocalAreaMeasureExt': */
class SOAP_CMAC eml22__ReciprocalAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1994 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure (-602)
/* simple XSD type 'eml22:ReciprocalElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml22__ReciprocalElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalElectricPotentialDifferenceUom'
        enum eml22__ReciprocalElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1997 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt (-603)
/* simple XSD type 'eml22:ReciprocalElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml22__ReciprocalElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2000 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure (-604)
/* simple XSD type 'eml22:ReciprocalForceMeasure': */
class SOAP_CMAC eml22__ReciprocalForceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalForceUom'
        enum eml22__ReciprocalForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalForceMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalForceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2003 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt (-605)
/* simple XSD type 'eml22:ReciprocalForceMeasureExt': */
class SOAP_CMAC eml22__ReciprocalForceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalForceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2006 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure (-606)
/* simple XSD type 'eml22:ReciprocalLengthMeasure': */
class SOAP_CMAC eml22__ReciprocalLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalLengthUom'
        enum eml22__ReciprocalLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2009 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt (-607)
/* simple XSD type 'eml22:ReciprocalLengthMeasureExt': */
class SOAP_CMAC eml22__ReciprocalLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2012 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure (-608)
/* simple XSD type 'eml22:ReciprocalMassMeasure': */
class SOAP_CMAC eml22__ReciprocalMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalMassUom'
        enum eml22__ReciprocalMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2015 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt (-609)
/* simple XSD type 'eml22:ReciprocalMassMeasureExt': */
class SOAP_CMAC eml22__ReciprocalMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2018 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure (-610)
/* simple XSD type 'eml22:ReciprocalMassTimeMeasure': */
class SOAP_CMAC eml22__ReciprocalMassTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalMassTimeUom'
        enum eml22__ReciprocalMassTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalMassTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2021 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt (-611)
/* simple XSD type 'eml22:ReciprocalMassTimeMeasureExt': */
class SOAP_CMAC eml22__ReciprocalMassTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalMassTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalMassTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2024 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure (-612)
/* simple XSD type 'eml22:ReciprocalPressureMeasure': */
class SOAP_CMAC eml22__ReciprocalPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalPressureUom'
        enum eml22__ReciprocalPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2027 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt (-613)
/* simple XSD type 'eml22:ReciprocalPressureMeasureExt': */
class SOAP_CMAC eml22__ReciprocalPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2030 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure (-614)
/* simple XSD type 'eml22:ReciprocalTimeMeasure': */
class SOAP_CMAC eml22__ReciprocalTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalTimeUom'
        enum eml22__ReciprocalTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2033 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt (-615)
/* simple XSD type 'eml22:ReciprocalTimeMeasureExt': */
class SOAP_CMAC eml22__ReciprocalTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2036 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure (-616)
/* simple XSD type 'eml22:ReciprocalVolumeMeasure': */
class SOAP_CMAC eml22__ReciprocalVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalVolumeUom'
        enum eml22__ReciprocalVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2039 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt (-617)
/* simple XSD type 'eml22:ReciprocalVolumeMeasureExt': */
class SOAP_CMAC eml22__ReciprocalVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReciprocalVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReciprocalVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2042 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure (-618)
/* simple XSD type 'eml22:ReluctanceMeasure': */
class SOAP_CMAC eml22__ReluctanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReluctanceUom'
        enum eml22__ReluctanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReluctanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ReluctanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReluctanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ReluctanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReluctanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReluctanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReluctanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReluctanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2045 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt (-619)
/* simple XSD type 'eml22:ReluctanceMeasureExt': */
class SOAP_CMAC eml22__ReluctanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ReluctanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReluctanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReluctanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReluctanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ReluctanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReluctanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReluctanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReluctanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReluctanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2048 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure (-620)
/* simple XSD type 'eml22:SecondMomentOfAreaMeasure': */
class SOAP_CMAC eml22__SecondMomentOfAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SecondMomentOfAreaUom'
        enum eml22__SecondMomentOfAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SecondMomentOfAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__SecondMomentOfAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SecondMomentOfAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__SecondMomentOfAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SecondMomentOfAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__SecondMomentOfAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SecondMomentOfAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__SecondMomentOfAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2051 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt (-621)
/* simple XSD type 'eml22:SecondMomentOfAreaMeasureExt': */
class SOAP_CMAC eml22__SecondMomentOfAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SecondMomentOfAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SecondMomentOfAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SecondMomentOfAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SecondMomentOfAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__SecondMomentOfAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SecondMomentOfAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SecondMomentOfAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SecondMomentOfAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SecondMomentOfAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2054 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure (-622)
/* simple XSD type 'eml22:SignalingEventPerTimeMeasure': */
class SOAP_CMAC eml22__SignalingEventPerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SignalingEventPerTimeUom'
        enum eml22__SignalingEventPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SignalingEventPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__SignalingEventPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SignalingEventPerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__SignalingEventPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SignalingEventPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__SignalingEventPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SignalingEventPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__SignalingEventPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2057 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt (-623)
/* simple XSD type 'eml22:SignalingEventPerTimeMeasureExt': */
class SOAP_CMAC eml22__SignalingEventPerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SignalingEventPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SignalingEventPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SignalingEventPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SignalingEventPerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__SignalingEventPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SignalingEventPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SignalingEventPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SignalingEventPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SignalingEventPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2060 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure (-624)
/* simple XSD type 'eml22:SolidAngleMeasure': */
class SOAP_CMAC eml22__SolidAngleMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SolidAngleUom'
        enum eml22__SolidAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SolidAngleMeasure, default initialized and not managed by a soap context
        virtual eml22__SolidAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SolidAngleMeasure); }
      public:
        /// Constructor with initializations
        eml22__SolidAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SolidAngleMeasure() { }
        /// Friend allocator used by soap_new_eml22__SolidAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SolidAngleMeasure * SOAP_FMAC2 soap_instantiate_eml22__SolidAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2063 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt (-625)
/* simple XSD type 'eml22:SolidAngleMeasureExt': */
class SOAP_CMAC eml22__SolidAngleMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SolidAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SolidAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SolidAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SolidAngleMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__SolidAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SolidAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SolidAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SolidAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SolidAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2066 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure (-626)
/* simple XSD type 'eml22:SpecificHeatCapacityMeasure': */
class SOAP_CMAC eml22__SpecificHeatCapacityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SpecificHeatCapacityUom'
        enum eml22__SpecificHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SpecificHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__SpecificHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SpecificHeatCapacityMeasure); }
      public:
        /// Constructor with initializations
        eml22__SpecificHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SpecificHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__SpecificHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SpecificHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__SpecificHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2069 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt (-627)
/* simple XSD type 'eml22:SpecificHeatCapacityMeasureExt': */
class SOAP_CMAC eml22__SpecificHeatCapacityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:SpecificHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SpecificHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SpecificHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SpecificHeatCapacityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__SpecificHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SpecificHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SpecificHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SpecificHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SpecificHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2072 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure (-628)
/* simple XSD type 'eml22:TemperatureIntervalMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalUom'
        enum eml22__TemperatureIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalMeasure); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2075 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt (-629)
/* simple XSD type 'eml22:TemperatureIntervalMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2078 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure (-630)
/* simple XSD type 'eml22:TemperatureIntervalPerLengthMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalPerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalPerLengthUom'
        enum eml22__TemperatureIntervalPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2081 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt (-631)
/* simple XSD type 'eml22:TemperatureIntervalPerLengthMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalPerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2084 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure (-632)
/* simple XSD type 'eml22:TemperatureIntervalPerPressureMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalPerPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalPerPressureUom'
        enum eml22__TemperatureIntervalPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2087 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt (-633)
/* simple XSD type 'eml22:TemperatureIntervalPerPressureMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalPerPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2090 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure (-634)
/* simple XSD type 'eml22:TemperatureIntervalPerTimeMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalPerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalPerTimeUom'
        enum eml22__TemperatureIntervalPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2093 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt (-635)
/* simple XSD type 'eml22:TemperatureIntervalPerTimeMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalPerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TemperatureIntervalPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TemperatureIntervalPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2096 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure (-636)
/* simple XSD type 'eml22:ThermalConductanceMeasure': */
class SOAP_CMAC eml22__ThermalConductanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalConductanceUom'
        enum eml22__ThermalConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermalConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2099 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt (-637)
/* simple XSD type 'eml22:ThermalConductanceMeasureExt': */
class SOAP_CMAC eml22__ThermalConductanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermalConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2102 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure (-638)
/* simple XSD type 'eml22:ThermalConductivityMeasure': */
class SOAP_CMAC eml22__ThermalConductivityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalConductivityUom'
        enum eml22__ThermalConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductivityMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermalConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2105 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt (-639)
/* simple XSD type 'eml22:ThermalConductivityMeasureExt': */
class SOAP_CMAC eml22__ThermalConductivityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductivityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermalConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure (-640)
/* simple XSD type 'eml22:ThermalDiffusivityMeasure': */
class SOAP_CMAC eml22__ThermalDiffusivityMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalDiffusivityUom'
        enum eml22__ThermalDiffusivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalDiffusivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalDiffusivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalDiffusivityMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermalDiffusivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalDiffusivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalDiffusivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalDiffusivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalDiffusivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2111 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt (-641)
/* simple XSD type 'eml22:ThermalDiffusivityMeasureExt': */
class SOAP_CMAC eml22__ThermalDiffusivityMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalDiffusivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalDiffusivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalDiffusivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalDiffusivityMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermalDiffusivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalDiffusivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalDiffusivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalDiffusivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalDiffusivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2114 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure (-642)
/* simple XSD type 'eml22:ThermalInsulanceMeasure': */
class SOAP_CMAC eml22__ThermalInsulanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalInsulanceUom'
        enum eml22__ThermalInsulanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalInsulanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalInsulanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalInsulanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermalInsulanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalInsulanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalInsulanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalInsulanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalInsulanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2117 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt (-643)
/* simple XSD type 'eml22:ThermalInsulanceMeasureExt': */
class SOAP_CMAC eml22__ThermalInsulanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalInsulanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalInsulanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalInsulanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalInsulanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermalInsulanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalInsulanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalInsulanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalInsulanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalInsulanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2120 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure (-644)
/* simple XSD type 'eml22:ThermalResistanceMeasure': */
class SOAP_CMAC eml22__ThermalResistanceMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalResistanceUom'
        enum eml22__ThermalResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalResistanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalResistanceMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermalResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2123 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt (-645)
/* simple XSD type 'eml22:ThermalResistanceMeasureExt': */
class SOAP_CMAC eml22__ThermalResistanceMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermalResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalResistanceMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermalResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2126 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure (-646)
/* simple XSD type 'eml22:ThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml22__ThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermodynamicTemperatureUom'
        enum eml22__ThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2129 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt (-647)
/* simple XSD type 'eml22:ThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml22__ThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2132 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-648)
/* simple XSD type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUom'
        enum eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with initializations
        eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2135 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-649)
/* simple XSD type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2138 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure (-650)
/* simple XSD type 'eml22:TimeMeasure': */
class SOAP_CMAC eml22__TimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimeUom'
        enum eml22__TimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeMeasure, default initialized and not managed by a soap context
        virtual eml22__TimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__TimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2141 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt (-651)
/* simple XSD type 'eml22:TimeMeasureExt': */
class SOAP_CMAC eml22__TimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2144 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure (-652)
/* simple XSD type 'eml22:TimePerLengthMeasure': */
class SOAP_CMAC eml22__TimePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerLengthUom'
        enum eml22__TimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__TimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2147 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt (-653)
/* simple XSD type 'eml22:TimePerLengthMeasureExt': */
class SOAP_CMAC eml22__TimePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2150 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure (-654)
/* simple XSD type 'eml22:TimePerMassMeasure': */
class SOAP_CMAC eml22__TimePerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerMassUom'
        enum eml22__TimePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__TimePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2153 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt (-655)
/* simple XSD type 'eml22:TimePerMassMeasureExt': */
class SOAP_CMAC eml22__TimePerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TimePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2156 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure (-656)
/* simple XSD type 'eml22:TimePerTimeMeasure': */
class SOAP_CMAC eml22__TimePerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerTimeUom'
        enum eml22__TimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__TimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2159 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt (-657)
/* simple XSD type 'eml22:TimePerTimeMeasureExt': */
class SOAP_CMAC eml22__TimePerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2162 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure (-658)
/* simple XSD type 'eml22:TimePerVolumeMeasure': */
class SOAP_CMAC eml22__TimePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerVolumeUom'
        enum eml22__TimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__TimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2165 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt (-659)
/* simple XSD type 'eml22:TimePerVolumeMeasureExt': */
class SOAP_CMAC eml22__TimePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:TimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__TimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2168 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure (-660)
/* simple XSD type 'eml22:UnitlessMeasure': */
class SOAP_CMAC eml22__UnitlessMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__UnitlessMeasure, default initialized and not managed by a soap context
        virtual eml22__UnitlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__UnitlessMeasure); }
      public:
        /// Constructor with initializations
        eml22__UnitlessMeasure() : __item(), soap() { }
        virtual ~eml22__UnitlessMeasure() { }
        /// Friend allocator used by soap_new_eml22__UnitlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__UnitlessMeasure * SOAP_FMAC2 soap_instantiate_eml22__UnitlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2171 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure (-661)
/* simple XSD type 'eml22:VerticalCoordinateMeasure': */
class SOAP_CMAC eml22__VerticalCoordinateMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VerticalCoordinateUom'
        enum eml22__VerticalCoordinateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalCoordinateMeasure, default initialized and not managed by a soap context
        virtual eml22__VerticalCoordinateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalCoordinateMeasure); }
      public:
        /// Constructor with initializations
        eml22__VerticalCoordinateMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VerticalCoordinateMeasure() { }
        /// Friend allocator used by soap_new_eml22__VerticalCoordinateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalCoordinateMeasure * SOAP_FMAC2 soap_instantiate_eml22__VerticalCoordinateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2174 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt (-662)
/* simple XSD type 'eml22:VerticalCoordinateMeasureExt': */
class SOAP_CMAC eml22__VerticalCoordinateMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VerticalCoordinateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalCoordinateMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VerticalCoordinateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalCoordinateMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VerticalCoordinateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VerticalCoordinateMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VerticalCoordinateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalCoordinateMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VerticalCoordinateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2177 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure (-663)
/* simple XSD type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasure': */
class SOAP_CMAC eml22__VolumeFlowRatePerVolumeFlowRateMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumeFlowRatePerVolumeFlowRateUom'
        enum eml22__VolumeFlowRatePerVolumeFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeFlowRatePerVolumeFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumeFlowRatePerVolumeFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeFlowRatePerVolumeFlowRateMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumeFlowRatePerVolumeFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeFlowRatePerVolumeFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeFlowRatePerVolumeFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2180 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt (-664)
/* simple XSD type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasureExt': */
class SOAP_CMAC eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumeFlowRatePerVolumeFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2183 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure (-665)
/* simple XSD type 'eml22:VolumeMeasure': */
class SOAP_CMAC eml22__VolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2186 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt (-666)
/* simple XSD type 'eml22:VolumeMeasureExt': */
class SOAP_CMAC eml22__VolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2189 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure (-667)
/* simple XSD type 'eml22:VolumePerAreaMeasure': */
class SOAP_CMAC eml22__VolumePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerAreaUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2192 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt (-668)
/* simple XSD type 'eml22:VolumePerAreaMeasureExt': */
class SOAP_CMAC eml22__VolumePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2195 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure (-669)
/* simple XSD type 'eml22:VolumePerLengthMeasure': */
class SOAP_CMAC eml22__VolumePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerLengthUom'
        enum eml22__VolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2198 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt (-670)
/* simple XSD type 'eml22:VolumePerLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2201 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure (-671)
/* simple XSD type 'eml22:VolumePerMassMeasure': */
class SOAP_CMAC eml22__VolumePerMassMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerMassUom'
        enum eml22__VolumePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerMassMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2204 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt (-672)
/* simple XSD type 'eml22:VolumePerMassMeasureExt': */
class SOAP_CMAC eml22__VolumePerMassMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerMassMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2207 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure (-673)
/* simple XSD type 'eml22:VolumePerPressureMeasure': */
class SOAP_CMAC eml22__VolumePerPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerPressureUom'
        enum eml22__VolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2210 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt (-674)
/* simple XSD type 'eml22:VolumePerPressureMeasureExt': */
class SOAP_CMAC eml22__VolumePerPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2213 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure (-675)
/* simple XSD type 'eml22:VolumePerRotationMeasure': */
class SOAP_CMAC eml22__VolumePerRotationMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerRotationUom'
        enum eml22__VolumePerRotationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerRotationMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerRotationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerRotationMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerRotationMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerRotationMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerRotationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerRotationMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerRotationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2216 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt (-676)
/* simple XSD type 'eml22:VolumePerRotationMeasureExt': */
class SOAP_CMAC eml22__VolumePerRotationMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerRotationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerRotationMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerRotationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerRotationMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerRotationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerRotationMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerRotationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerRotationMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerRotationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2219 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure (-677)
/* simple XSD type 'eml22:VolumePerTimeLengthMeasure': */
class SOAP_CMAC eml22__VolumePerTimeLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimeLengthUom'
        enum eml22__VolumePerTimeLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimeLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2222 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt (-678)
/* simple XSD type 'eml22:VolumePerTimeLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimeLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimeLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimeLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2225 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure (-679)
/* simple XSD type 'eml22:VolumePerTimeMeasure': */
class SOAP_CMAC eml22__VolumePerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2228 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt (-680)
/* simple XSD type 'eml22:VolumePerTimeMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2231 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure (-681)
/* simple XSD type 'eml22:VolumePerTimePerAreaMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerAreaMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerAreaUom'
        enum eml22__VolumePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerAreaMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2234 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt (-682)
/* simple XSD type 'eml22:VolumePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2237 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure (-683)
/* simple XSD type 'eml22:VolumePerTimePerLengthMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerLengthUom'
        enum eml22__VolumePerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2240 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt (-684)
/* simple XSD type 'eml22:VolumePerTimePerLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2243 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure (-685)
/* simple XSD type 'eml22:VolumePerTimePerPressureLengthMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerPressureLengthMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerPressureLengthUom'
        enum eml22__VolumePerTimePerPressureLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureLengthMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerPressureLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2246 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt (-686)
/* simple XSD type 'eml22:VolumePerTimePerPressureLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerPressureLengthMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerPressureLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureLengthMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerPressureLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2249 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure (-687)
/* simple XSD type 'eml22:VolumePerTimePerPressureMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerPressureMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerPressureUom'
        enum eml22__VolumePerTimePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2252 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt (-688)
/* simple XSD type 'eml22:VolumePerTimePerPressureMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerPressureMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2255 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure (-689)
/* simple XSD type 'eml22:VolumePerTimePerTimeMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerTimeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerTimeUom'
        enum eml22__VolumePerTimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerTimeMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2258 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt (-690)
/* simple XSD type 'eml22:VolumePerTimePerTimeMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerTimeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerTimeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2261 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure (-691)
/* simple XSD type 'eml22:VolumePerTimePerVolumeMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerVolumeUom'
        enum eml22__VolumePerTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2264 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt (-692)
/* simple XSD type 'eml22:VolumePerTimePerVolumeMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2267 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure (-693)
/* simple XSD type 'eml22:VolumePerVolumeMeasure': */
class SOAP_CMAC eml22__VolumePerVolumeMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerVolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerVolumeMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2270 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt (-694)
/* simple XSD type 'eml22:VolumePerVolumeMeasureExt': */
class SOAP_CMAC eml22__VolumePerVolumeMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerVolumeMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2273 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure (-695)
/* simple XSD type 'eml22:VolumetricHeatTransferCoefficientMeasure': */
class SOAP_CMAC eml22__VolumetricHeatTransferCoefficientMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumetricHeatTransferCoefficientUom'
        enum eml22__VolumetricHeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricHeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumetricHeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricHeatTransferCoefficientMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumetricHeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricHeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumetricHeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricHeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumetricHeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2276 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt (-696)
/* simple XSD type 'eml22:VolumetricHeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml22__VolumetricHeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumetricHeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricHeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumetricHeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricHeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumetricHeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricHeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricHeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2279 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure (-697)
/* simple XSD type 'eml22:VolumetricThermalExpansionMeasure': */
class SOAP_CMAC eml22__VolumetricThermalExpansionMeasure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumetricThermalExpansionUom'
        enum eml22__VolumetricThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumetricThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricThermalExpansionMeasure); }
      public:
        /// Constructor with initializations
        eml22__VolumetricThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumetricThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumetricThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2282 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt (-698)
/* simple XSD type 'eml22:VolumetricThermalExpansionMeasureExt': */
class SOAP_CMAC eml22__VolumetricThermalExpansionMeasureExt {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:VolumetricThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumetricThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricThermalExpansionMeasureExt); }
      public:
        /// Constructor with initializations
        eml22__VolumetricThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumetricThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumetricThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2375 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure (-729)
/* simple XSD type 'eml22:ReferencePressure': */
class SOAP_CMAC eml22__ReferencePressure {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:PressureUom'
        enum eml22__PressureUom uom;
        /// optional attribute 'referencePressureKind' of XSD type 'eml22:ReferencePressureKind'
        enum eml22__ReferencePressureKind *referencePressureKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReferencePressure, default initialized and not managed by a soap context
        virtual eml22__ReferencePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReferencePressure); }
      public:
        /// Constructor with initializations
        eml22__ReferencePressure() : __item(), uom(), referencePressureKind(), soap() { }
        virtual ~eml22__ReferencePressure() { }
        /// Friend allocator used by soap_new_eml22__ReferencePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReferencePressure * SOAP_FMAC2 soap_instantiate_eml22__ReferencePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2399 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_2_eml22__DistanceEastWest (-737)
/* simple XSD type 'eml22:DistanceEastWest': */
class SOAP_CMAC eml22__DistanceEastWest {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// required attribute 'reference' of XSD type 'eml22:EastOrWest'
        enum eml22__EastOrWest reference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DistanceEastWest
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DistanceEastWest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DistanceEastWest, default initialized and not managed by a soap context
        virtual eml22__DistanceEastWest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DistanceEastWest); }
      public:
        /// Constructor with initializations
        eml22__DistanceEastWest() : __item(), uom(), reference(), soap() { }
        virtual ~eml22__DistanceEastWest() { }
        /// Friend allocator used by soap_new_eml22__DistanceEastWest(struct soap*, int)
        friend SOAP_FMAC1 eml22__DistanceEastWest * SOAP_FMAC2 soap_instantiate_eml22__DistanceEastWest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2402 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_2_eml22__DistanceNorthSouth (-738)
/* simple XSD type 'eml22:DistanceNorthSouth': */
class SOAP_CMAC eml22__DistanceNorthSouth {
      public:
        /// Simple content of XSD type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// required attribute 'uom' of XSD type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// required attribute 'reference' of XSD type 'eml22:NorthOrSouth'
        enum eml22__NorthOrSouth reference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DistanceNorthSouth
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DistanceNorthSouth; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DistanceNorthSouth, default initialized and not managed by a soap context
        virtual eml22__DistanceNorthSouth *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DistanceNorthSouth); }
      public:
        /// Constructor with initializations
        eml22__DistanceNorthSouth() : __item(), uom(), reference(), soap() { }
        virtual ~eml22__DistanceNorthSouth() { }
        /// Friend allocator used by soap_new_eml22__DistanceNorthSouth(struct soap*, int)
        friend SOAP_FMAC1 eml22__DistanceNorthSouth * SOAP_FMAC2 soap_instantiate_eml22__DistanceNorthSouth(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2486 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType (-766)
/* Type gml__DefinitionType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:DefinitionType': */
class SOAP_CMAC gml__DefinitionType : public gml__DefinitionBaseType {
      public:
        /// Optional element 'gml:remarks' of XSD type 'xsd:string'
        std::string *remarks;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__DefinitionType, default initialized and not managed by a soap context
        virtual gml__DefinitionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__DefinitionType); }
      public:
        /// Constructor with initializations
        gml__DefinitionType() : remarks() { }
        virtual ~gml__DefinitionType() { }
        /// Friend allocator used by soap_new_gml__DefinitionType(struct soap*, int)
        friend SOAP_FMAC1 gml__DefinitionType * SOAP_FMAC2 soap_instantiate_gml__DefinitionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2501 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType (-771)
/* simple XSD type 'gml:CodeWithAuthorityType': */
class SOAP_CMAC gml__CodeWithAuthorityType {
      public:
        /// Simple content of XSD type 'xsd:string' wrapped by this struct
        std::string __item;
        /// required attribute 'codeSpace' of XSD type 'xsd:anyURI'
        std::string codeSpace;
        /// optional attribute 'codeSpace' of XSD type 'xsd:anyURI'
        std::string *codeSpace_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CodeWithAuthorityType, default initialized and not managed by a soap context
        virtual gml__CodeWithAuthorityType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CodeWithAuthorityType); }
      public:
        /// Constructor with initializations
        gml__CodeWithAuthorityType() : __item(), codeSpace(), codeSpace_(), soap() { }
        virtual ~gml__CodeWithAuthorityType() { }
        /// Friend allocator used by soap_new_gml__CodeWithAuthorityType(struct soap*, int)
        friend SOAP_FMAC1 gml__CodeWithAuthorityType * SOAP_FMAC2 soap_instantiate_gml__CodeWithAuthorityType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2507 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType (-773)
/* Type gml__AbstractTimePrimitiveType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractTimePrimitiveType': */
class SOAP_CMAC gml__AbstractTimePrimitiveType : public gml__AbstractTimeObjectType {
      public:
        /// Optional element 'gml:relatedTime' of XSD type 'gml:RelatedTimeType'
        std::vector<gml__RelatedTimeType *> relatedTime;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractTimePrimitiveType, default initialized and not managed by a soap context
        virtual gml__AbstractTimePrimitiveType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractTimePrimitiveType); }
      public:
        /// Constructor with initializations
        gml__AbstractTimePrimitiveType() : relatedTime() { }
        virtual ~gml__AbstractTimePrimitiveType() { }
        /// Friend allocator used by soap_new_gml__AbstractTimePrimitiveType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractTimePrimitiveType * SOAP_FMAC2 soap_instantiate_gml__AbstractTimePrimitiveType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2561 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AngleType
#define SOAP_TYPE_gsoap_eml2_2_gml__AngleType (-791)
/* Type gml__AngleType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'gml:AngleType': */
class SOAP_CMAC gml__AngleType : public gml__MeasureType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AngleType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AngleType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AngleType, default initialized and not managed by a soap context
        virtual gml__AngleType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AngleType); }
      public:
        /// Constructor with initializations
        gml__AngleType() { }
        virtual ~gml__AngleType() { }
        /// Friend allocator used by soap_new_gml__AngleType(struct soap*, int)
        friend SOAP_FMAC1 gml__AngleType * SOAP_FMAC2 soap_instantiate_gml__AngleType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2573 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__LengthType
#define SOAP_TYPE_gsoap_eml2_2_gml__LengthType (-795)
/* Type gml__LengthType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'gml:LengthType': */
class SOAP_CMAC gml__LengthType : public gml__MeasureType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__LengthType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__LengthType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__LengthType, default initialized and not managed by a soap context
        virtual gml__LengthType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__LengthType); }
      public:
        /// Constructor with initializations
        gml__LengthType() { }
        virtual ~gml__LengthType() { }
        /// Friend allocator used by soap_new_gml__LengthType(struct soap*, int)
        friend SOAP_FMAC1 gml__LengthType * SOAP_FMAC2 soap_instantiate_gml__LengthType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2645 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType (-819)
/* Type gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gmd:AbstractDQ_PositionalAccuracy_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType : public gmd__AbstractDQ_USCOREElement_USCOREType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType); }
      public:
        /// Constructor with initializations
        gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType() { }
        virtual ~gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:353 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TimestampedCommentString (-55)
/* simple XSD type 'witsml2:TimestampedCommentString': */
class SOAP_CMAC witsml2__TimestampedCommentString {
      public:
        /// Simple content of XSD type 'eml22:String2000' wrapped by this struct
        std::string __item;
        /// required attribute 'dTim' of XSD type 'eml22:TimeStamp'
        /// Typedef eml22__TimeStamp with custom serializer for struct tm
        struct tm dTim;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__TimestampedCommentString
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__TimestampedCommentString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__TimestampedCommentString, default initialized and not managed by a soap context
        virtual witsml2__TimestampedCommentString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__TimestampedCommentString); }
      public:
        /// Constructor with initializations
        witsml2__TimestampedCommentString() : __item(), dTim(), soap() { }
        virtual ~witsml2__TimestampedCommentString() { }
        /// Friend allocator used by soap_new_witsml2__TimestampedCommentString(struct soap*, int)
        friend SOAP_FMAC1 witsml2__TimestampedCommentString * SOAP_FMAC2 soap_instantiate_witsml2__TimestampedCommentString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:554 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventType (-122)
/* simple XSD type 'witsml2:EventType': */
class SOAP_CMAC witsml2__EventType {
      public:
        /// Simple content of XSD type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// required attribute 'Class' of XSD type 'witsml2:EventClassType'
        enum witsml2__EventClassType Class;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__EventType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__EventType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__EventType, default initialized and not managed by a soap context
        virtual witsml2__EventType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__EventType); }
      public:
        /// Constructor with initializations
        witsml2__EventType() : __item(), Class(), soap() { }
        virtual ~witsml2__EventType() { }
        /// Friend allocator used by soap_new_witsml2__EventType(struct soap*, int)
        friend SOAP_FMAC1 witsml2__EventType * SOAP_FMAC2 soap_instantiate_witsml2__EventType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:950 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeochronologicalUnit (-254)
/* simple XSD type 'witsml2:GeochronologicalUnit': */
class SOAP_CMAC witsml2__GeochronologicalUnit {
      public:
        /// Simple content of XSD type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// optional attribute 'authority' of XSD type 'eml22:String64'
        std::string *authority;
        /// required attribute 'kind' of XSD type 'eml22:GeochronologicalRank'
        enum eml22__GeochronologicalRank kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__GeochronologicalUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__GeochronologicalUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__GeochronologicalUnit, default initialized and not managed by a soap context
        virtual witsml2__GeochronologicalUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__GeochronologicalUnit); }
      public:
        /// Constructor with initializations
        witsml2__GeochronologicalUnit() : __item(), authority(), kind(), soap() { }
        virtual ~witsml2__GeochronologicalUnit() { }
        /// Friend allocator used by soap_new_witsml2__GeochronologicalUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__GeochronologicalUnit * SOAP_FMAC2 soap_instantiate_witsml2__GeochronologicalUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:965 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LithostratigraphicUnit (-259)
/* simple XSD type 'witsml2:LithostratigraphicUnit': */
class SOAP_CMAC witsml2__LithostratigraphicUnit {
      public:
        /// Simple content of XSD type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// required attribute 'authority' of XSD type 'eml22:String64'
        std::string authority;
        /// required attribute 'kind' of XSD type 'eml22:LithostratigraphicRank'
        enum eml22__LithostratigraphicRank kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_witsml2__LithostratigraphicUnit
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_witsml2__LithostratigraphicUnit; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type witsml2__LithostratigraphicUnit, default initialized and not managed by a soap context
        virtual witsml2__LithostratigraphicUnit *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(witsml2__LithostratigraphicUnit); }
      public:
        /// Constructor with initializations
        witsml2__LithostratigraphicUnit() : __item(), authority(), kind(), soap() { }
        virtual ~witsml2__LithostratigraphicUnit() { }
        /// Friend allocator used by soap_new_witsml2__LithostratigraphicUnit(struct soap*, int)
        friend SOAP_FMAC1 witsml2__LithostratigraphicUnit * SOAP_FMAC2 soap_instantiate_witsml2__LithostratigraphicUnit(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1109 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName (-307)
/* simple XSD type 'eml22:AuthorityQualifiedName': */
class SOAP_CMAC eml22__AuthorityQualifiedName {
      public:
        /// Simple content of XSD type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// required attribute 'authority' of XSD type 'eml22:String64'
        std::string authority;
        /// optional attribute 'code' of XSD type 'eml22:String64'
        std::string *code;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AuthorityQualifiedName, default initialized and not managed by a soap context
        virtual eml22__AuthorityQualifiedName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AuthorityQualifiedName); }
      public:
        /// Constructor with initializations
        eml22__AuthorityQualifiedName() : __item(), authority(), code(), soap() { }
        virtual ~eml22__AuthorityQualifiedName() { }
        /// Friend allocator used by soap_new_eml22__AuthorityQualifiedName(struct soap*, int)
        friend SOAP_FMAC1 eml22__AuthorityQualifiedName * SOAP_FMAC2 soap_instantiate_eml22__AuthorityQualifiedName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1133 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray (-315)
/* Type eml22__FloatingPointConstantArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:FloatingPointConstantArray': */
class SOAP_CMAC eml22__FloatingPointConstantArray : public eml22__AbstractFloatingPointArray {
      public:
        /// Required element 'eml22:Value' of XSD type 'xsd:double'
        double Value;
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatingPointConstantArray, default initialized and not managed by a soap context
        virtual eml22__FloatingPointConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatingPointConstantArray); }
      public:
        /// Constructor with initializations
        eml22__FloatingPointConstantArray() : Value(), Count() { }
        virtual ~eml22__FloatingPointConstantArray() { }
        /// Friend allocator used by soap_new_eml22__FloatingPointConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatingPointConstantArray * SOAP_FMAC2 soap_instantiate_eml22__FloatingPointConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1136 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray (-316)
/* Type eml22__FloatingPointExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:FloatingPointExternalArray': */
class SOAP_CMAC eml22__FloatingPointExternalArray : public eml22__AbstractFloatingPointArray {
      public:
        /// Required element 'eml22:Values' of XSD type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatingPointExternalArray, default initialized and not managed by a soap context
        virtual eml22__FloatingPointExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatingPointExternalArray); }
      public:
        /// Constructor with initializations
        eml22__FloatingPointExternalArray() : Values() { }
        virtual ~eml22__FloatingPointExternalArray() { }
        /// Friend allocator used by soap_new_eml22__FloatingPointExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatingPointExternalArray * SOAP_FMAC2 soap_instantiate_eml22__FloatingPointExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1139 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray (-317)
/* Type eml22__FloatingPointLatticeArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:FloatingPointLatticeArray': */
class SOAP_CMAC eml22__FloatingPointLatticeArray : public eml22__AbstractFloatingPointArray {
      public:
        /// Required element 'eml22:StartValue' of XSD type 'xsd:double'
        double StartValue;
        /// Required element 'eml22:Offset' of XSD type 'eml22:FloatingPointConstantArray'
        std::vector<eml22__FloatingPointConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatingPointLatticeArray, default initialized and not managed by a soap context
        virtual eml22__FloatingPointLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatingPointLatticeArray); }
      public:
        /// Constructor with initializations
        eml22__FloatingPointLatticeArray() : StartValue(), Offset() { }
        virtual ~eml22__FloatingPointLatticeArray() { }
        /// Friend allocator used by soap_new_eml22__FloatingPointLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatingPointLatticeArray * SOAP_FMAC2 soap_instantiate_eml22__FloatingPointLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1145 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray (-319)
/* Type eml22__IntegerArrayFromBooleanMaskArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:IntegerArrayFromBooleanMaskArray': */
class SOAP_CMAC eml22__IntegerArrayFromBooleanMaskArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:TotalIndexCount' of XSD type 'xsd:unsignedLong'
        ULONG64 TotalIndexCount;
        /// Required element 'eml22:Mask' of XSD type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *Mask;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerArrayFromBooleanMaskArray, default initialized and not managed by a soap context
        virtual eml22__IntegerArrayFromBooleanMaskArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerArrayFromBooleanMaskArray); }
      public:
        /// Constructor with initializations
        eml22__IntegerArrayFromBooleanMaskArray() : TotalIndexCount(), Mask() { }
        virtual ~eml22__IntegerArrayFromBooleanMaskArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerArrayFromBooleanMaskArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerArrayFromBooleanMaskArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerArrayFromBooleanMaskArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1148 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray (-320)
/* Type eml22__IntegerConstantArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:IntegerConstantArray': */
class SOAP_CMAC eml22__IntegerConstantArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:Value' of XSD type 'xsd:long'
        LONG64 Value;
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerConstantArray, default initialized and not managed by a soap context
        virtual eml22__IntegerConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerConstantArray); }
      public:
        /// Constructor with initializations
        eml22__IntegerConstantArray() : Value(), Count() { }
        virtual ~eml22__IntegerConstantArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerConstantArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1151 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray (-321)
/* Type eml22__IntegerExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:IntegerExternalArray': */
class SOAP_CMAC eml22__IntegerExternalArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:NullValue' of XSD type 'xsd:long'
        LONG64 NullValue;
        /// Required element 'eml22:Values' of XSD type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerExternalArray, default initialized and not managed by a soap context
        virtual eml22__IntegerExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerExternalArray); }
      public:
        /// Constructor with initializations
        eml22__IntegerExternalArray() : NullValue(), Values() { }
        virtual ~eml22__IntegerExternalArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerExternalArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1154 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray (-322)
/* Type eml22__IntegerLatticeArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:IntegerLatticeArray': */
class SOAP_CMAC eml22__IntegerLatticeArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:StartValue' of XSD type 'xsd:long'
        LONG64 StartValue;
        /// Required element 'eml22:Offset' of XSD type 'eml22:IntegerConstantArray'
        std::vector<eml22__IntegerConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerLatticeArray, default initialized and not managed by a soap context
        virtual eml22__IntegerLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerLatticeArray); }
      public:
        /// Constructor with initializations
        eml22__IntegerLatticeArray() : StartValue(), Offset() { }
        virtual ~eml22__IntegerLatticeArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerLatticeArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1157 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray (-323)
/* Type eml22__IntegerRangeArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:IntegerRangeArray': */
class SOAP_CMAC eml22__IntegerRangeArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:Count' of XSD type 'xsd:unsignedLong'
        ULONG64 Count;
        /// Required element 'eml22:Value' of XSD type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerRangeArray, default initialized and not managed by a soap context
        virtual eml22__IntegerRangeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerRangeArray); }
      public:
        /// Constructor with initializations
        eml22__IntegerRangeArray() : Count(), Value() { }
        virtual ~eml22__IntegerRangeArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerRangeArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerRangeArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerRangeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1175 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure (-329)
/* simple XSD type 'eml22:StringMeasure': */
class SOAP_CMAC eml22__StringMeasure {
      public:
        /// Simple content of XSD type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// optional attribute 'uom' of XSD type 'eml22:UnitOfMeasureExt'
        std::string *uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringMeasure, default initialized and not managed by a soap context
        virtual eml22__StringMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringMeasure); }
      public:
        /// Constructor with initializations
        eml22__StringMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__StringMeasure() { }
        /// Friend allocator used by soap_new_eml22__StringMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringMeasure * SOAP_FMAC2 soap_instantiate_eml22__StringMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2483 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType (-765)
/* Type gml__IdentifiedObjectType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:IdentifiedObjectType': */
class SOAP_CMAC gml__IdentifiedObjectType : public gml__DefinitionType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__IdentifiedObjectType, default initialized and not managed by a soap context
        virtual gml__IdentifiedObjectType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__IdentifiedObjectType); }
      public:
        /// Constructor with initializations
        gml__IdentifiedObjectType() { }
        virtual ~gml__IdentifiedObjectType() { }
        /// Friend allocator used by soap_new_gml__IdentifiedObjectType(struct soap*, int)
        friend SOAP_FMAC1 gml__IdentifiedObjectType * SOAP_FMAC2 soap_instantiate_gml__IdentifiedObjectType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1124 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray (-312)
/* Type eml22__DoubleExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:DoubleExternalArray': */
class SOAP_CMAC eml22__DoubleExternalArray : public eml22__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoubleExternalArray, default initialized and not managed by a soap context
        virtual eml22__DoubleExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoubleExternalArray); }
      public:
        /// Constructor with initializations
        eml22__DoubleExternalArray() { }
        virtual ~eml22__DoubleExternalArray() { }
        /// Friend allocator used by soap_new_eml22__DoubleExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoubleExternalArray * SOAP_FMAC2 soap_instantiate_eml22__DoubleExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1130 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray (-314)
/* Type eml22__FloatExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'eml22:FloatExternalArray': */
class SOAP_CMAC eml22__FloatExternalArray : public eml22__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatExternalArray, default initialized and not managed by a soap context
        virtual eml22__FloatExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatExternalArray); }
      public:
        /// Constructor with initializations
        eml22__FloatExternalArray() { }
        virtual ~eml22__FloatExternalArray() { }
        /// Friend allocator used by soap_new_eml22__FloatExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatExternalArray * SOAP_FMAC2 soap_instantiate_eml22__FloatExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2480 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType (-764)
/* Type gml__AbstractCRSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractCRSType': */
class SOAP_CMAC gml__AbstractCRSType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XSD type 'gml:domainOfValidity'
        std::vector<_gml__domainOfValidity *> domainOfValidity;
        /// Required element 'gml:scope' of XSD type 'xsd:string'
        std::vector<std::string> scope;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCRSType, default initialized and not managed by a soap context
        virtual gml__AbstractCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCRSType); }
      public:
        /// Constructor with initializations
        gml__AbstractCRSType() : domainOfValidity(), scope() { }
        virtual ~gml__AbstractCRSType() { }
        /// Friend allocator used by soap_new_gml__AbstractCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCRSType * SOAP_FMAC2 soap_instantiate_gml__AbstractCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2525 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType (-779)
/* Type gml__AbstractCoordinateSystemType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractCoordinateSystemType': */
class SOAP_CMAC gml__AbstractCoordinateSystemType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:axis' of XSD type 'gml:CoordinateSystemAxisPropertyType'
        std::vector<gml__CoordinateSystemAxisPropertyType *> axis;
        /// optional attribute 'aggregationType' of XSD type 'gml:AggregationType'
        enum gml__AggregationType *aggregationType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCoordinateSystemType, default initialized and not managed by a soap context
        virtual gml__AbstractCoordinateSystemType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCoordinateSystemType); }
      public:
        /// Constructor with initializations
        gml__AbstractCoordinateSystemType() : axis(), aggregationType() { }
        virtual ~gml__AbstractCoordinateSystemType() { }
        /// Friend allocator used by soap_new_gml__AbstractCoordinateSystemType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCoordinateSystemType * SOAP_FMAC2 soap_instantiate_gml__AbstractCoordinateSystemType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2531 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType (-781)
/* Type gml__CoordinateSystemAxisType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:CoordinateSystemAxisType': */
class SOAP_CMAC gml__CoordinateSystemAxisType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:axisAbbrev' of XSD type 'gml:CodeType'
        gml__CodeType *axisAbbrev;
        /// Required element 'gml:axisDirection' of XSD type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *axisDirection;
        /// Optional element 'gml:minimumValue' of XSD type 'xsd:double'
        double *minimumValue;
        /// Optional element 'gml:maximumValue' of XSD type 'xsd:double'
        double *maximumValue;
        /// Optional element 'gml:rangeMeaning' of XSD type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *rangeMeaning;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CoordinateSystemAxisType, default initialized and not managed by a soap context
        virtual gml__CoordinateSystemAxisType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CoordinateSystemAxisType); }
      public:
        /// Constructor with initializations
        gml__CoordinateSystemAxisType() : axisAbbrev(), axisDirection(), minimumValue(), maximumValue(), rangeMeaning() { }
        virtual ~gml__CoordinateSystemAxisType() { }
        /// Friend allocator used by soap_new_gml__CoordinateSystemAxisType(struct soap*, int)
        friend SOAP_FMAC1 gml__CoordinateSystemAxisType * SOAP_FMAC2 soap_instantiate_gml__CoordinateSystemAxisType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2552 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType (-788)
/* Type gml__AbstractDatumType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractDatumType': */
class SOAP_CMAC gml__AbstractDatumType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XSD type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XSD type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:anchorDefinition' of XSD type 'gml:CodeType'
        gml__CodeType *anchorDefinition;
        /// Optional element 'gml:realizationEpoch' of XSD type 'xsd:date'
        std::string *realizationEpoch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractDatumType, default initialized and not managed by a soap context
        virtual gml__AbstractDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractDatumType); }
      public:
        /// Constructor with initializations
        gml__AbstractDatumType() : domainOfValidity(), scope(), anchorDefinition(), realizationEpoch() { }
        virtual ~gml__AbstractDatumType() { }
        /// Friend allocator used by soap_new_gml__AbstractDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractDatumType * SOAP_FMAC2 soap_instantiate_gml__AbstractDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2558 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType (-790)
/* Type gml__PrimeMeridianType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:PrimeMeridianType': */
class SOAP_CMAC gml__PrimeMeridianType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:greenwichLongitude' of XSD type 'gml:AngleType'
        gml__AngleType *greenwichLongitude;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__PrimeMeridianType, default initialized and not managed by a soap context
        virtual gml__PrimeMeridianType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__PrimeMeridianType); }
      public:
        /// Constructor with initializations
        gml__PrimeMeridianType() : greenwichLongitude() { }
        virtual ~gml__PrimeMeridianType() { }
        /// Friend allocator used by soap_new_gml__PrimeMeridianType(struct soap*, int)
        friend SOAP_FMAC1 gml__PrimeMeridianType * SOAP_FMAC2 soap_instantiate_gml__PrimeMeridianType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2570 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType (-794)
/* Type gml__EllipsoidType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:EllipsoidType': */
class SOAP_CMAC gml__EllipsoidType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:semiMajorAxis' of XSD type 'gml:MeasureType'
        gml__MeasureType *semiMajorAxis;
        /// Required element 'gml:secondDefiningParameter' of XSD type 'gml:secondDefiningParameter'
        _gml__secondDefiningParameter *secondDefiningParameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidType, default initialized and not managed by a soap context
        virtual gml__EllipsoidType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidType); }
      public:
        /// Constructor with initializations
        gml__EllipsoidType() : semiMajorAxis(), secondDefiningParameter() { }
        virtual ~gml__EllipsoidType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2588 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType (-800)
/* Type gml__AbstractCoordinateOperationType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractCoordinateOperationType': */
class SOAP_CMAC gml__AbstractCoordinateOperationType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XSD type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XSD type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:operationVersion' of XSD type 'xsd:string'
        std::string *operationVersion;
        /// Optional element 'gml:coordinateOperationAccuracy' of XSD type 'gml:coordinateOperationAccuracy'
        std::vector<_gml__coordinateOperationAccuracy *> coordinateOperationAccuracy;
        /// Optional element 'gml:sourceCRS' of XSD type 'gml:CRSPropertyType'
        gml__CRSPropertyType *sourceCRS;
        /// Optional element 'gml:targetCRS' of XSD type 'gml:CRSPropertyType'
        gml__CRSPropertyType *targetCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCoordinateOperationType, default initialized and not managed by a soap context
        virtual gml__AbstractCoordinateOperationType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCoordinateOperationType); }
      public:
        /// Constructor with initializations
        gml__AbstractCoordinateOperationType() : domainOfValidity(), scope(), operationVersion(), coordinateOperationAccuracy(), sourceCRS(), targetCRS() { }
        virtual ~gml__AbstractCoordinateOperationType() { }
        /// Friend allocator used by soap_new_gml__AbstractCoordinateOperationType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCoordinateOperationType * SOAP_FMAC2 soap_instantiate_gml__AbstractCoordinateOperationType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:55930 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_GeodeticCRSType (-2246)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_GeodeticCRSType
{
        #define SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_ellipsoidalCS	(1)	/**< union variant selector value for member ellipsoidalCS */
        gml__EllipsoidalCSPropertyType *ellipsoidalCS;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_cartesianCS	(2)	/**< union variant selector value for member cartesianCS */
        gml__CartesianCSPropertyType *cartesianCS;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_sphericalCS	(3)	/**< union variant selector value for member sphericalCS */
        gml__SphericalCSPropertyType *sphericalCS;
};
#endif

/* eml2_2ForGsoap.h:2477 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType (-763)
/* Type gml__GeodeticCRSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:GeodeticCRSType': */
class SOAP_CMAC gml__GeodeticCRSType : public gml__AbstractCRSType {
      public:
        /// Union with union _gml__union_GeodeticCRSType variant selector __union_GeodeticCRSType set to one of: SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_ellipsoidalCS SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_cartesianCS SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_sphericalCS
        int __union_GeodeticCRSType;
        union _gml__union_GeodeticCRSType union_GeodeticCRSType;
        /// Required element 'gml:geodeticDatum' of XSD type 'gml:GeodeticDatumPropertyType'
        gml__GeodeticDatumPropertyType *geodeticDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticCRSType, default initialized and not managed by a soap context
        virtual gml__GeodeticCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticCRSType); }
      public:
        /// Constructor with initializations
        gml__GeodeticCRSType() : __union_GeodeticCRSType(), geodeticDatum() { }
        virtual ~gml__GeodeticCRSType() { }
        /// Friend allocator used by soap_new_gml__GeodeticCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticCRSType * SOAP_FMAC2 soap_instantiate_gml__GeodeticCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2522 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType (-778)
/* Type gml__EllipsoidalCSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:EllipsoidalCSType': */
class SOAP_CMAC gml__EllipsoidalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidalCSType, default initialized and not managed by a soap context
        virtual gml__EllipsoidalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidalCSType); }
      public:
        /// Constructor with initializations
        gml__EllipsoidalCSType() { }
        virtual ~gml__EllipsoidalCSType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidalCSType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2537 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType (-783)
/* Type gml__CartesianCSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:CartesianCSType': */
class SOAP_CMAC gml__CartesianCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CartesianCSType, default initialized and not managed by a soap context
        virtual gml__CartesianCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CartesianCSType); }
      public:
        /// Constructor with initializations
        gml__CartesianCSType() { }
        virtual ~gml__CartesianCSType() { }
        /// Friend allocator used by soap_new_gml__CartesianCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__CartesianCSType * SOAP_FMAC2 soap_instantiate_gml__CartesianCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2543 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType (-785)
/* Type gml__SphericalCSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:SphericalCSType': */
class SOAP_CMAC gml__SphericalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__SphericalCSType, default initialized and not managed by a soap context
        virtual gml__SphericalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__SphericalCSType); }
      public:
        /// Constructor with initializations
        gml__SphericalCSType() { }
        virtual ~gml__SphericalCSType() { }
        /// Friend allocator used by soap_new_gml__SphericalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__SphericalCSType * SOAP_FMAC2 soap_instantiate_gml__SphericalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2549 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType (-787)
/* Type gml__GeodeticDatumType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:GeodeticDatumType': */
class SOAP_CMAC gml__GeodeticDatumType : public gml__AbstractDatumType {
      public:
        /// Required element 'gml:primeMeridian' of XSD type 'gml:PrimeMeridianPropertyType'
        gml__PrimeMeridianPropertyType *primeMeridian;
        /// Required element 'gml:ellipsoid' of XSD type 'gml:EllipsoidPropertyType'
        gml__EllipsoidPropertyType *ellipsoid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticDatumType, default initialized and not managed by a soap context
        virtual gml__GeodeticDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticDatumType); }
      public:
        /// Constructor with initializations
        gml__GeodeticDatumType() : primeMeridian(), ellipsoid() { }
        virtual ~gml__GeodeticDatumType() { }
        /// Friend allocator used by soap_new_gml__GeodeticDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticDatumType * SOAP_FMAC2 soap_instantiate_gml__GeodeticDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2579 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType (-797)
/* Type gml__AbstractGeneralDerivedCRSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:AbstractGeneralDerivedCRSType': */
class SOAP_CMAC gml__AbstractGeneralDerivedCRSType : public gml__AbstractCRSType {
      public:
        /// Required element 'gml:conversion' of XSD type 'gml:GeneralConversionPropertyType'
        gml__GeneralConversionPropertyType *conversion;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGeneralDerivedCRSType, default initialized and not managed by a soap context
        virtual gml__AbstractGeneralDerivedCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGeneralDerivedCRSType); }
      public:
        /// Constructor with initializations
        gml__AbstractGeneralDerivedCRSType() : conversion() { }
        virtual ~gml__AbstractGeneralDerivedCRSType() { }
        /// Friend allocator used by soap_new_gml__AbstractGeneralDerivedCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGeneralDerivedCRSType * SOAP_FMAC2 soap_instantiate_gml__AbstractGeneralDerivedCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2585 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType (-799)
/* complex XSD type 'gml:AbstractGeneralConversionType': */
class SOAP_CMAC gml__AbstractGeneralConversionType {
      public:
        /// Optional element 'gml:description' of XSD type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XSD type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Required element 'gml:identifier' of XSD type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XSD type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Optional element 'gml:remarks' of XSD type 'xsd:string'
        std::string *remarks;
        /// Optional element 'gml:domainOfValidity' of XSD type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XSD type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:coordinateOperationAccuracy' of XSD type 'gml:coordinateOperationAccuracy'
        std::vector<_gml__coordinateOperationAccuracy *> coordinateOperationAccuracy;
        /// required attribute 'gml:id' of XSD type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGeneralConversionType, default initialized and not managed by a soap context
        virtual gml__AbstractGeneralConversionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGeneralConversionType); }
      public:
        /// Constructor with initializations
        gml__AbstractGeneralConversionType() : description(), descriptionReference(), identifier(), name(), remarks(), domainOfValidity(), scope(), coordinateOperationAccuracy(), gml__id(), soap() { }
        virtual ~gml__AbstractGeneralConversionType() { }
        /// Friend allocator used by soap_new_gml__AbstractGeneralConversionType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGeneralConversionType * SOAP_FMAC2 soap_instantiate_gml__AbstractGeneralConversionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2597 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType (-803)
/* Type gml__VerticalCRSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:VerticalCRSType': */
class SOAP_CMAC gml__VerticalCRSType : public gml__AbstractCRSType {
      public:
        /// Required element 'gml:verticalCS' of XSD type 'gml:VerticalCSPropertyType'
        gml__VerticalCSPropertyType *verticalCS;
        /// Required element 'gml:verticalDatum' of XSD type 'gml:VerticalDatumPropertyType'
        gml__VerticalDatumPropertyType *verticalDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCRSType, default initialized and not managed by a soap context
        virtual gml__VerticalCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCRSType); }
      public:
        /// Constructor with initializations
        gml__VerticalCRSType() : verticalCS(), verticalDatum() { }
        virtual ~gml__VerticalCRSType() { }
        /// Friend allocator used by soap_new_gml__VerticalCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCRSType * SOAP_FMAC2 soap_instantiate_gml__VerticalCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2603 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType (-805)
/* Type gml__VerticalCSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:VerticalCSType': */
class SOAP_CMAC gml__VerticalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCSType, default initialized and not managed by a soap context
        virtual gml__VerticalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCSType); }
      public:
        /// Constructor with initializations
        gml__VerticalCSType() { }
        virtual ~gml__VerticalCSType() { }
        /// Friend allocator used by soap_new_gml__VerticalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCSType * SOAP_FMAC2 soap_instantiate_gml__VerticalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:2609 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType (-807)
/* Type gml__VerticalDatumType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:VerticalDatumType': */
class SOAP_CMAC gml__VerticalDatumType : public gml__AbstractDatumType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalDatumType, default initialized and not managed by a soap context
        virtual gml__VerticalDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalDatumType); }
      public:
        /// Constructor with initializations
        gml__VerticalDatumType() { }
        virtual ~gml__VerticalDatumType() { }
        /// Friend allocator used by soap_new_gml__VerticalDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalDatumType * SOAP_FMAC2 soap_instantiate_gml__VerticalDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:56405 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_ProjectedCRSType (-2254)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_ProjectedCRSType
{
        #define SOAP_UNION_gsoap_eml2_2__gml__union_ProjectedCRSType_baseGeodeticCRS	(1)	/**< union variant selector value for member baseGeodeticCRS */
        gml__GeodeticCRSPropertyType *baseGeodeticCRS;
};
#endif

/* eml2_2ForGsoap.h:2576 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType (-796)
/* Type gml__ProjectedCRSType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'gml:ProjectedCRSType': */
class SOAP_CMAC gml__ProjectedCRSType : public gml__AbstractGeneralDerivedCRSType {
      public:
        /// Union with union _gml__union_ProjectedCRSType variant selector __union_ProjectedCRSType set to one of: SOAP_UNION_gsoap_eml2_2__gml__union_ProjectedCRSType_baseGeodeticCRS
        int __union_ProjectedCRSType;
        union _gml__union_ProjectedCRSType union_ProjectedCRSType;
        /// Required element 'gml:cartesianCS' of XSD type 'gml:CartesianCSPropertyType'
        gml__CartesianCSPropertyType *cartesianCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__ProjectedCRSType, default initialized and not managed by a soap context
        virtual gml__ProjectedCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__ProjectedCRSType); }
      public:
        /// Constructor with initializations
        gml__ProjectedCRSType() : __union_ProjectedCRSType(), cartesianCS() { }
        virtual ~gml__ProjectedCRSType() { }
        /// Friend allocator used by soap_new_gml__ProjectedCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__ProjectedCRSType * SOAP_FMAC2 soap_instantiate_gml__ProjectedCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:59041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header (-845619200)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:59041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code (-845619201)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:59041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail (-845619203)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:59041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason (-845619206)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:59041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault (-845619207)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_2__XML
#define SOAP_TYPE_gsoap_eml2_2__XML (-5)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_2__QName
#define SOAP_TYPE_gsoap_eml2_2__QName (-6)

typedef char *_QName;
#endif

/* eml2_2ForGsoap.h:225 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__ID
#define SOAP_TYPE_gsoap_eml2_2_xsd__ID (-15)

typedef std::string xsd__ID;
#endif

/* eml2_2ForGsoap.h:228 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_2_xsd__anyURI (-16)

typedef std::string xsd__anyURI;
#endif

/* eml2_2ForGsoap.h:231 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__date
#define SOAP_TYPE_gsoap_eml2_2_xsd__date (-17)

typedef std::string xsd__date;
#endif

/* eml2_2ForGsoap.h:234 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__gYear
#define SOAP_TYPE_gsoap_eml2_2_xsd__gYear (-18)

typedef std::string xsd__gYear;
#endif

/* eml2_2ForGsoap.h:2764 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentTypeExt (-856)

typedef std::string witsml2__EquipmentTypeExt;
#endif

/* eml2_2ForGsoap.h:2767 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsideredExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsideredExt (-857)

typedef std::string witsml2__CorrectionConsideredExt;
#endif

/* eml2_2ForGsoap.h:2770 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConditionExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConditionExt (-858)

typedef std::string witsml2__OperatingConditionExt;
#endif

/* eml2_2ForGsoap.h:2773 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKindExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKindExt (-859)

typedef std::string witsml2__ToolSubKindExt;
#endif

/* eml2_2ForGsoap.h:2784 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt (-860)

typedef std::string eml22__LithologyKindExt;
#endif

/* eml2_2ForGsoap.h:2787 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt (-861)

typedef std::string eml22__LithologyQualifierKindExt;
#endif

/* eml2_2ForGsoap.h:2790 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt (-862)

typedef std::string eml22__QuantityClassKindExt;
#endif

/* eml2_2ForGsoap.h:2793 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt (-863)

typedef std::string eml22__ReferenceConditionExt;
#endif

/* eml2_2ForGsoap.h:2796 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt (-864)

typedef std::string eml22__UnitOfMeasureExt;
#endif

/* eml2_2ForGsoap.h:2799 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt (-865)

typedef std::string eml22__AbsorbedDoseUomExt;
#endif

/* eml2_2ForGsoap.h:2802 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt (-866)

typedef std::string eml22__ActivityOfRadioactivityUomExt;
#endif

/* eml2_2ForGsoap.h:2805 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt (-867)

typedef std::string eml22__AmountOfSubstancePerAmountOfSubstanceUomExt;
#endif

/* eml2_2ForGsoap.h:2808 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt (-868)

typedef std::string eml22__AmountOfSubstancePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2811 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt (-869)

typedef std::string eml22__AmountOfSubstancePerTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2814 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt (-870)

typedef std::string eml22__AmountOfSubstancePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2817 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt (-871)

typedef std::string eml22__AmountOfSubstancePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2820 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt (-872)

typedef std::string eml22__AmountOfSubstanceUomExt;
#endif

/* eml2_2ForGsoap.h:2823 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt (-873)

typedef std::string eml22__AnglePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2826 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt (-874)

typedef std::string eml22__AnglePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2829 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt (-875)

typedef std::string eml22__AngularAccelerationUomExt;
#endif

/* eml2_2ForGsoap.h:2832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt (-876)

typedef std::string eml22__AngularVelocityUomExt;
#endif

/* eml2_2ForGsoap.h:2835 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt (-877)

typedef std::string eml22__APIGammaRayUomExt;
#endif

/* eml2_2ForGsoap.h:2838 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt (-878)

typedef std::string eml22__APIGravityUomExt;
#endif

/* eml2_2ForGsoap.h:2841 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt (-879)

typedef std::string eml22__APINeutronUomExt;
#endif

/* eml2_2ForGsoap.h:2844 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt (-880)

typedef std::string eml22__AreaPerAmountOfSubstanceUomExt;
#endif

/* eml2_2ForGsoap.h:2847 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt (-881)

typedef std::string eml22__AreaPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2850 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt (-882)

typedef std::string eml22__AreaPerCountUomExt;
#endif

/* eml2_2ForGsoap.h:2853 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt (-883)

typedef std::string eml22__AreaPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2856 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt (-884)

typedef std::string eml22__AreaPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2859 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt (-885)

typedef std::string eml22__AreaPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2862 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt (-886)

typedef std::string eml22__AreaUomExt;
#endif

/* eml2_2ForGsoap.h:2865 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt (-887)

typedef std::string eml22__AttenuationPerFrequencyIntervalUomExt;
#endif

/* eml2_2ForGsoap.h:2868 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt (-888)

typedef std::string eml22__CapacitanceUomExt;
#endif

/* eml2_2ForGsoap.h:2871 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt (-889)

typedef std::string eml22__CationExchangeCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:2874 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt (-890)

typedef std::string eml22__DataTransferSpeedUomExt;
#endif

/* eml2_2ForGsoap.h:2877 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt (-891)

typedef std::string eml22__DiffusionCoefficientUomExt;
#endif

/* eml2_2ForGsoap.h:2880 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt (-892)

typedef std::string eml22__DiffusiveTimeOfFlightUomExt;
#endif

/* eml2_2ForGsoap.h:2883 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt (-893)

typedef std::string eml22__DigitalStorageUomExt;
#endif

/* eml2_2ForGsoap.h:2886 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt (-894)

typedef std::string eml22__DimensionlessUomExt;
#endif

/* eml2_2ForGsoap.h:2889 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt (-895)

typedef std::string eml22__DipoleMomentUomExt;
#endif

/* eml2_2ForGsoap.h:2892 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt (-896)

typedef std::string eml22__DoseEquivalentUomExt;
#endif

/* eml2_2ForGsoap.h:2895 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt (-897)

typedef std::string eml22__DynamicViscosityUomExt;
#endif

/* eml2_2ForGsoap.h:2898 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt (-898)

typedef std::string eml22__ElectricalResistivityUomExt;
#endif

/* eml2_2ForGsoap.h:2901 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt (-899)

typedef std::string eml22__ElectricChargePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2904 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt (-900)

typedef std::string eml22__ElectricChargePerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2907 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt (-901)

typedef std::string eml22__ElectricChargePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2910 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt (-902)

typedef std::string eml22__ElectricChargeUomExt;
#endif

/* eml2_2ForGsoap.h:2913 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt (-903)

typedef std::string eml22__ElectricConductanceUomExt;
#endif

/* eml2_2ForGsoap.h:2916 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt (-904)

typedef std::string eml22__ElectricConductivityUomExt;
#endif

/* eml2_2ForGsoap.h:2919 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt (-905)

typedef std::string eml22__ElectricCurrentDensityUomExt;
#endif

/* eml2_2ForGsoap.h:2922 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt (-906)

typedef std::string eml22__ElectricCurrentUomExt;
#endif

/* eml2_2ForGsoap.h:2925 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt (-907)

typedef std::string eml22__ElectricFieldStrengthUomExt;
#endif

/* eml2_2ForGsoap.h:2928 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt (-908)

typedef std::string eml22__ElectricPotentialDifferenceUomExt;
#endif

/* eml2_2ForGsoap.h:2931 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt (-909)

typedef std::string eml22__ElectricResistancePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2934 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt (-910)

typedef std::string eml22__ElectricResistanceUomExt;
#endif

/* eml2_2ForGsoap.h:2937 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt (-911)

typedef std::string eml22__ElectromagneticMomentUomExt;
#endif

/* eml2_2ForGsoap.h:2940 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt (-912)

typedef std::string eml22__EnergyLengthPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2943 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt (-913)

typedef std::string eml22__EnergyLengthPerTimeAreaTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:2946 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt (-914)

typedef std::string eml22__EnergyPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2949 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt (-915)

typedef std::string eml22__EnergyPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2952 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt (-916)

typedef std::string eml22__EnergyPerMassPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2955 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt (-917)

typedef std::string eml22__EnergyPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2958 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt (-918)

typedef std::string eml22__EnergyPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2961 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt (-919)

typedef std::string eml22__EnergyUomExt;
#endif

/* eml2_2ForGsoap.h:2964 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt (-920)

typedef std::string eml22__ForceAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2967 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt (-921)

typedef std::string eml22__ForceLengthPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2970 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt (-922)

typedef std::string eml22__ForcePerForceUomExt;
#endif

/* eml2_2ForGsoap.h:2973 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt (-923)

typedef std::string eml22__ForcePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2976 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt (-924)

typedef std::string eml22__ForcePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2979 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt (-925)

typedef std::string eml22__ForceUomExt;
#endif

/* eml2_2ForGsoap.h:2982 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt (-926)

typedef std::string eml22__FrequencyIntervalUomExt;
#endif

/* eml2_2ForGsoap.h:2985 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt (-927)

typedef std::string eml22__FrequencyUomExt;
#endif

/* eml2_2ForGsoap.h:2988 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt (-928)

typedef std::string eml22__HeatCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:2991 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt (-929)

typedef std::string eml22__HeatFlowRateUomExt;
#endif

/* eml2_2ForGsoap.h:2994 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt (-930)

typedef std::string eml22__HeatTransferCoefficientUomExt;
#endif

/* eml2_2ForGsoap.h:2997 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt (-931)

typedef std::string eml22__IlluminanceUomExt;
#endif

/* eml2_2ForGsoap.h:3000 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt (-932)

typedef std::string eml22__InductanceUomExt;
#endif

/* eml2_2ForGsoap.h:3003 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt (-933)

typedef std::string eml22__IsothermalCompressibilityUomExt;
#endif

/* eml2_2ForGsoap.h:3006 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt (-934)

typedef std::string eml22__KinematicViscosityUomExt;
#endif

/* eml2_2ForGsoap.h:3009 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt (-935)

typedef std::string eml22__LengthPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3012 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt (-936)

typedef std::string eml22__LengthPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:3015 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt (-937)

typedef std::string eml22__LengthPerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3018 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt (-938)

typedef std::string eml22__LengthPerTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:3021 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt (-939)

typedef std::string eml22__LengthPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3024 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt (-940)

typedef std::string eml22__LengthPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3027 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt (-941)

typedef std::string eml22__LengthUomExt;
#endif

/* eml2_2ForGsoap.h:3030 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt (-942)

typedef std::string eml22__LightExposureUomExt;
#endif

/* eml2_2ForGsoap.h:3033 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt (-943)

typedef std::string eml22__LinearAccelerationUomExt;
#endif

/* eml2_2ForGsoap.h:3036 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt (-944)

typedef std::string eml22__LinearThermalExpansionUomExt;
#endif

/* eml2_2ForGsoap.h:3039 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt (-945)

typedef std::string eml22__LogarithmicPowerRatioPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3042 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt (-946)

typedef std::string eml22__LogarithmicPowerRatioUomExt;
#endif

/* eml2_2ForGsoap.h:3045 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt (-947)

typedef std::string eml22__LuminanceUomExt;
#endif

/* eml2_2ForGsoap.h:3048 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt (-948)

typedef std::string eml22__LuminousEfficacyUomExt;
#endif

/* eml2_2ForGsoap.h:3051 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt (-949)

typedef std::string eml22__LuminousFluxUomExt;
#endif

/* eml2_2ForGsoap.h:3054 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt (-950)

typedef std::string eml22__LuminousIntensityUomExt;
#endif

/* eml2_2ForGsoap.h:3057 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt (-951)

typedef std::string eml22__MagneticDipoleMomentUomExt;
#endif

/* eml2_2ForGsoap.h:3060 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt (-952)

typedef std::string eml22__MagneticFieldStrengthUomExt;
#endif

/* eml2_2ForGsoap.h:3063 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt (-953)

typedef std::string eml22__MagneticFluxDensityPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3066 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt (-954)

typedef std::string eml22__MagneticFluxDensityUomExt;
#endif

/* eml2_2ForGsoap.h:3069 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt (-955)

typedef std::string eml22__MagneticFluxUomExt;
#endif

/* eml2_2ForGsoap.h:3072 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt (-956)

typedef std::string eml22__MagneticPermeabilityUomExt;
#endif

/* eml2_2ForGsoap.h:3075 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt (-957)

typedef std::string eml22__MagneticVectorPotentialUomExt;
#endif

/* eml2_2ForGsoap.h:3078 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt (-958)

typedef std::string eml22__MassLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3081 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt (-959)

typedef std::string eml22__MassPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3084 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt (-960)

typedef std::string eml22__MassPerEnergyUomExt;
#endif

/* eml2_2ForGsoap.h:3087 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt (-961)

typedef std::string eml22__MassPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3090 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt (-962)

typedef std::string eml22__MassPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:3093 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt (-963)

typedef std::string eml22__MassPerTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3096 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt (-964)

typedef std::string eml22__MassPerTimePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3099 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt (-965)

typedef std::string eml22__MassPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3102 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt (-966)

typedef std::string eml22__MassPerVolumePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3105 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt (-967)

typedef std::string eml22__MassPerVolumePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt (-968)

typedef std::string eml22__MassPerVolumePerTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:3111 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt (-969)

typedef std::string eml22__MassPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3114 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt (-970)

typedef std::string eml22__MassUomExt;
#endif

/* eml2_2ForGsoap.h:3117 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt (-971)

typedef std::string eml22__MobilityUomExt;
#endif

/* eml2_2ForGsoap.h:3120 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt (-972)

typedef std::string eml22__MolarEnergyUomExt;
#endif

/* eml2_2ForGsoap.h:3123 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt (-973)

typedef std::string eml22__MolarHeatCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:3126 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt (-974)

typedef std::string eml22__MolarVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3129 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt (-975)

typedef std::string eml22__MolecularWeightUomExt;
#endif

/* eml2_2ForGsoap.h:3132 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt (-976)

typedef std::string eml22__MomentOfForceUomExt;
#endif

/* eml2_2ForGsoap.h:3135 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt (-977)

typedef std::string eml22__MomentOfInertiaUomExt;
#endif

/* eml2_2ForGsoap.h:3138 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt (-978)

typedef std::string eml22__MomentumUomExt;
#endif

/* eml2_2ForGsoap.h:3141 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt (-979)

typedef std::string eml22__NormalizedPowerUomExt;
#endif

/* eml2_2ForGsoap.h:3144 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt (-980)

typedef std::string eml22__PermeabilityLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3147 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt (-981)

typedef std::string eml22__PermeabilityRockUomExt;
#endif

/* eml2_2ForGsoap.h:3150 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt (-982)

typedef std::string eml22__PermittivityUomExt;
#endif

/* eml2_2ForGsoap.h:3153 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt (-983)

typedef std::string eml22__PlaneAngleUomExt;
#endif

/* eml2_2ForGsoap.h:3156 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt (-984)

typedef std::string eml22__PotentialDifferencePerPowerDropUomExt;
#endif

/* eml2_2ForGsoap.h:3159 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt (-985)

typedef std::string eml22__PowerPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3162 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt (-986)

typedef std::string eml22__PowerPerPowerUomExt;
#endif

/* eml2_2ForGsoap.h:3165 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt (-987)

typedef std::string eml22__PowerPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3168 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt (-988)

typedef std::string eml22__PowerUomExt;
#endif

/* eml2_2ForGsoap.h:3171 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt (-989)

typedef std::string eml22__PressurePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3174 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt (-990)

typedef std::string eml22__PressurePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3177 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt (-991)

typedef std::string eml22__PressurePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3180 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt (-992)

typedef std::string eml22__PressureSquaredPerForceTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3183 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt (-993)

typedef std::string eml22__PressureSquaredUomExt;
#endif

/* eml2_2ForGsoap.h:3186 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt (-994)

typedef std::string eml22__PressureTimePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3189 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt (-995)

typedef std::string eml22__PressureUomExt;
#endif

/* eml2_2ForGsoap.h:3192 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt (-996)

typedef std::string eml22__QuantityOfLightUomExt;
#endif

/* eml2_2ForGsoap.h:3195 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt (-997)

typedef std::string eml22__RadianceUomExt;
#endif

/* eml2_2ForGsoap.h:3198 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt (-998)

typedef std::string eml22__RadiantIntensityUomExt;
#endif

/* eml2_2ForGsoap.h:3201 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt (-999)

typedef std::string eml22__ReciprocalAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3204 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt (-1000)

typedef std::string eml22__ReciprocalElectricPotentialDifferenceUomExt;
#endif

/* eml2_2ForGsoap.h:3207 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt (-1001)

typedef std::string eml22__ReciprocalForceUomExt;
#endif

/* eml2_2ForGsoap.h:3210 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt (-1002)

typedef std::string eml22__ReciprocalLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3213 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt (-1003)

typedef std::string eml22__ReciprocalMassTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3216 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt (-1004)

typedef std::string eml22__ReciprocalMassUomExt;
#endif

/* eml2_2ForGsoap.h:3219 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt (-1005)

typedef std::string eml22__ReciprocalPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3222 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt (-1006)

typedef std::string eml22__ReciprocalTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3225 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt (-1007)

typedef std::string eml22__ReciprocalVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3228 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt (-1008)

typedef std::string eml22__ReluctanceUomExt;
#endif

/* eml2_2ForGsoap.h:3231 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt (-1009)

typedef std::string eml22__SecondMomentOfAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3234 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt (-1010)

typedef std::string eml22__SignalingEventPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3237 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt (-1011)

typedef std::string eml22__SolidAngleUomExt;
#endif

/* eml2_2ForGsoap.h:3240 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt (-1012)

typedef std::string eml22__SpecificHeatCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:3243 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt (-1013)

typedef std::string eml22__TemperatureIntervalPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3246 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt (-1014)

typedef std::string eml22__TemperatureIntervalPerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3249 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt (-1015)

typedef std::string eml22__TemperatureIntervalPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3252 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt (-1016)

typedef std::string eml22__TemperatureIntervalUomExt;
#endif

/* eml2_2ForGsoap.h:3255 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt (-1017)

typedef std::string eml22__ThermalConductanceUomExt;
#endif

/* eml2_2ForGsoap.h:3258 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt (-1018)

typedef std::string eml22__ThermalConductivityUomExt;
#endif

/* eml2_2ForGsoap.h:3261 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt (-1019)

typedef std::string eml22__ThermalDiffusivityUomExt;
#endif

/* eml2_2ForGsoap.h:3264 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt (-1020)

typedef std::string eml22__ThermalInsulanceUomExt;
#endif

/* eml2_2ForGsoap.h:3267 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt (-1021)

typedef std::string eml22__ThermalResistanceUomExt;
#endif

/* eml2_2ForGsoap.h:3270 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-1022)

typedef std::string eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:3273 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt (-1023)

typedef std::string eml22__ThermodynamicTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:3276 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt (-1024)

typedef std::string eml22__TimePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3279 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt (-1025)

typedef std::string eml22__TimePerMassUomExt;
#endif

/* eml2_2ForGsoap.h:3282 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt (-1026)

typedef std::string eml22__TimePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3285 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt (-1027)

typedef std::string eml22__TimePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3288 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt (-1028)

typedef std::string eml22__TimeUomExt;
#endif

/* eml2_2ForGsoap.h:3291 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt (-1029)

typedef std::string eml22__VerticalCoordinateUomExt;
#endif

/* eml2_2ForGsoap.h:3294 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt (-1030)

typedef std::string eml22__VolumeFlowRatePerVolumeFlowRateUomExt;
#endif

/* eml2_2ForGsoap.h:3297 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt (-1031)

typedef std::string eml22__VolumePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3300 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt (-1032)

typedef std::string eml22__VolumePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3303 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt (-1033)

typedef std::string eml22__VolumePerMassUomExt;
#endif

/* eml2_2ForGsoap.h:3306 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt (-1034)

typedef std::string eml22__VolumePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3309 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt (-1035)

typedef std::string eml22__VolumePerRotationUomExt;
#endif

/* eml2_2ForGsoap.h:3312 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt (-1036)

typedef std::string eml22__VolumePerTimeLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3315 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt (-1037)

typedef std::string eml22__VolumePerTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:3318 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt (-1038)

typedef std::string eml22__VolumePerTimePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3321 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt (-1039)

typedef std::string eml22__VolumePerTimePerPressureLengthUomExt;
#endif

/* eml2_2ForGsoap.h:3324 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt (-1040)

typedef std::string eml22__VolumePerTimePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:3327 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt (-1041)

typedef std::string eml22__VolumePerTimePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3330 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt (-1042)

typedef std::string eml22__VolumePerTimePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3333 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt (-1043)

typedef std::string eml22__VolumePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:3336 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt (-1044)

typedef std::string eml22__VolumePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3339 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt (-1045)

typedef std::string eml22__VolumetricHeatTransferCoefficientUomExt;
#endif

/* eml2_2ForGsoap.h:3342 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt (-1046)

typedef std::string eml22__VolumetricThermalExpansionUomExt;
#endif

/* eml2_2ForGsoap.h:3345 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt (-1047)

typedef std::string eml22__VolumeUomExt;
#endif

/* eml2_2ForGsoap.h:3348 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy (-1048)

typedef std::string eml22__MassPerVolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3351 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy (-1049)

typedef std::string eml22__PressurePerVolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3354 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy (-1050)

typedef std::string eml22__PressureUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3357 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy (-1051)

typedef std::string eml22__VolumePerAreaUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3360 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy (-1052)

typedef std::string eml22__VolumePerTimeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3363 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy (-1053)

typedef std::string eml22__VolumePerVolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3366 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy (-1054)

typedef std::string eml22__VolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:3377 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType (-1055)

typedef std::string gml__NilReasonType;
#endif

/* eml2_2ForGsoap.h:3381 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration (-1056)

typedef std::string gml__NilReasonEnumeration;
#endif

/* eml2_2ForGsoap.h:3384 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier
#define SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier (-1057)

typedef std::string gml__UomIdentifier;
#endif

/* eml2_2ForGsoap.h:3419 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType (-1058)

typedef std::string gco__Date_USCOREType;
#endif

/* eml2_2ForGsoap.h:3435 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BeaufortScaleIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BeaufortScaleIntegerCode (-1060)

typedef short witsml2__BeaufortScaleIntegerCode;
#endif

/* eml2_2ForGsoap.h:3443 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpActionIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpActionIntegerCode (-1061)

typedef short witsml2__PumpActionIntegerCode;
#endif

/* eml2_2ForGsoap.h:3452 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LevelIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LevelIntegerCode (-1062)

typedef short witsml2__LevelIntegerCode;
#endif

/* eml2_2ForGsoap.h:3460 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NonNegativeFraction (-1064)

typedef double witsml2__NonNegativeFraction;
#endif

/* eml2_2ForGsoap.h:3475 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure (-1065)

typedef double eml22__AbstractMeasure;
#endif

/* eml2_2ForGsoap.h:3482 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString (-1066)

typedef std::string eml22__AbstractString;
#endif

/* eml2_2ForGsoap.h:3485 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeInteger
#define SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeInteger (-1068)

typedef ULONG64 eml22__NonNegativeInteger;
#endif

/* eml2_2ForGsoap.h:3487 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PositiveInteger
#define SOAP_TYPE_gsoap_eml2_2_eml22__PositiveInteger (-1069)

typedef ULONG64 eml22__PositiveInteger;
#endif

/* eml2_2ForGsoap.h:3491 */
#ifndef SOAP_TYPE_eml22__TimeStamp
#define SOAP_TYPE_eml22__TimeStamp (-1070)

typedef struct tm eml22__TimeStamp;
#endif

/* eml2_2ForGsoap.h:3507 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol
#define SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol (-1071)

typedef std::string gml__UomSymbol;
#endif

/* eml2_2ForGsoap.h:3517 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomURI
#define SOAP_TYPE_gsoap_eml2_2_gml__UomURI (-1072)

typedef std::string gml__UomURI;
#endif

/* eml2_2ForGsoap.h:3616 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern (-1076)

typedef std::string eml22__EnumExtensionPattern;
#endif

/* eml2_2ForGsoap.h:3621 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_eml22__String2000 (-1077)

typedef std::string eml22__String2000;
#endif

/* eml2_2ForGsoap.h:3626 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String256
#define SOAP_TYPE_gsoap_eml2_2_eml22__String256 (-1078)

typedef std::string eml22__String256;
#endif

/* eml2_2ForGsoap.h:3631 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String64
#define SOAP_TYPE_gsoap_eml2_2_eml22__String64 (-1079)

typedef std::string eml22__String64;
#endif

/* eml2_2ForGsoap.h:3640 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum (-1080)

typedef std::string eml22__UomEnum;
#endif

/* eml2_2ForGsoap.h:3645 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UuidString
#define SOAP_TYPE_gsoap_eml2_2_eml22__UuidString (-1081)

typedef std::string eml22__UuidString;
#endif

/* eml2_2ForGsoap.h:3698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractUidString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractUidString (-1082)

typedef std::string witsml2__AbstractUidString;
#endif

/* eml2_2ForGsoap.h:5237 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone (-1085)

typedef std::string eml22__TimeZone;
#endif

/* eml2_2ForGsoap.h:5244 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum (-1086)

typedef eml22__String64 eml22__TypeEnum;
#endif

/* eml2_2ForGsoap.h:12717 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterSection (-1277)

typedef std::string eml22__PublicLandSurveySystemQuarterSection;
#endif

/* eml2_2ForGsoap.h:12725 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterTownship (-1278)

typedef std::string eml22__PublicLandSurveySystemQuarterTownship;
#endif

/* eml2_2ForGsoap.h:12733 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SectionNumber
#define SOAP_TYPE_gsoap_eml2_2_eml22__SectionNumber (-1279)

typedef std::string eml22__SectionNumber;
#endif

/* eml2_2ForGsoap.h:56423 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Attachment (-2255)

typedef witsml2__Attachment _witsml2__Attachment;
#endif

/* eml2_2ForGsoap.h:56426 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Wellbore (-2256)

typedef witsml2__Wellbore _witsml2__Wellbore;
#endif

/* eml2_2ForGsoap.h:56429 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Well
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Well (-2257)

typedef witsml2__Well _witsml2__Well;
#endif

/* eml2_2ForGsoap.h:56432 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_2__witsml2__BhaRun (-2258)

typedef witsml2__BhaRun _witsml2__BhaRun;
#endif

/* eml2_2ForGsoap.h:56435 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__FluidsReport (-2259)

typedef witsml2__FluidsReport _witsml2__FluidsReport;
#endif

/* eml2_2ForGsoap.h:56438 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__DrillReport (-2260)

typedef witsml2__DrillReport _witsml2__DrillReport;
#endif

/* eml2_2ForGsoap.h:56441 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Tubular (-2261)

typedef witsml2__Tubular _witsml2__Tubular;
#endif

/* eml2_2ForGsoap.h:56444 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CementJob (-2262)

typedef witsml2__CementJob _witsml2__CementJob;
#endif

/* eml2_2ForGsoap.h:56447 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CementJobEvaluation (-2263)

typedef witsml2__CementJobEvaluation _witsml2__CementJobEvaluation;
#endif

/* eml2_2ForGsoap.h:56453 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREWellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREWellboreGeometrySection (-2264)

typedef witsml2__WellboreGeometrySection _witsml2__part_USCOREWellboreGeometrySection;
#endif

/* eml2_2ForGsoap.h:56456 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeometry (-2265)

typedef witsml2__WellboreGeometry _witsml2__WellboreGeometry;
#endif

/* eml2_2ForGsoap.h:56459 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Channel (-2266)

typedef witsml2__Channel _witsml2__Channel;
#endif

/* eml2_2ForGsoap.h:56462 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ChannelSet (-2267)

typedef witsml2__ChannelSet _witsml2__ChannelSet;
#endif

/* eml2_2ForGsoap.h:56465 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Log
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Log (-2268)

typedef witsml2__Log _witsml2__Log;
#endif

/* eml2_2ForGsoap.h:56468 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_2__witsml2__DepthRegImage (-2269)

typedef witsml2__DepthRegImage _witsml2__DepthRegImage;
#endif

/* eml2_2ForGsoap.h:56471 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellCMLedger (-2270)

typedef witsml2__WellCMLedger _witsml2__WellCMLedger;
#endif

/* eml2_2ForGsoap.h:56474 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_2__witsml2__DownholeComponent (-2271)

typedef witsml2__DownholeComponent _witsml2__DownholeComponent;
#endif

/* eml2_2ForGsoap.h:56477 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__OpsReport (-2272)

typedef witsml2__OpsReport _witsml2__OpsReport;
#endif

/* eml2_2ForGsoap.h:56483 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCORETrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCORETrajectoryStation (-2273)

typedef witsml2__TrajectoryStation _witsml2__part_USCORETrajectoryStation;
#endif

/* eml2_2ForGsoap.h:56486 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Trajectory (-2274)

typedef witsml2__Trajectory _witsml2__Trajectory;
#endif

/* eml2_2ForGsoap.h:56489 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTerm
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTerm (-2275)

typedef witsml2__ErrorTerm _witsml2__ErrorTerm;
#endif

/* eml2_2ForGsoap.h:56492 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTermDictionary
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTermDictionary (-2276)

typedef witsml2__ErrorTermDictionary _witsml2__ErrorTermDictionary;
#endif

/* eml2_2ForGsoap.h:56495 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModel (-2277)

typedef witsml2__ToolErrorModel _witsml2__ToolErrorModel;
#endif

/* eml2_2ForGsoap.h:56498 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModelDictionary
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModelDictionary (-2278)

typedef witsml2__ToolErrorModelDictionary _witsml2__ToolErrorModelDictionary;
#endif

/* eml2_2ForGsoap.h:56501 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunction
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunction (-2279)

typedef witsml2__WeightingFunction _witsml2__WeightingFunction;
#endif

/* eml2_2ForGsoap.h:56504 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunctionDictionary
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunctionDictionary (-2280)

typedef witsml2__WeightingFunctionDictionary _witsml2__WeightingFunctionDictionary;
#endif

/* eml2_2ForGsoap.h:56507 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Rig (-2281)

typedef witsml2__Rig _witsml2__Rig;
#endif

/* eml2_2ForGsoap.h:56510 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_2__witsml2__RigUtilization (-2282)

typedef witsml2__RigUtilization _witsml2__RigUtilization;
#endif

/* eml2_2ForGsoap.h:56513 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Risk (-2283)

typedef witsml2__Risk _witsml2__Risk;
#endif

/* eml2_2ForGsoap.h:56516 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_2__witsml2__StimJob (-2284)

typedef witsml2__StimJob _witsml2__StimJob;
#endif

/* eml2_2ForGsoap.h:56519 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_2__witsml2__StimJobStage (-2285)

typedef witsml2__StimJobStage _witsml2__StimJobStage;
#endif

/* eml2_2ForGsoap.h:56522 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_2__witsml2__StimPerforationCluster (-2286)

typedef witsml2__StimPerforationCluster _witsml2__StimPerforationCluster;
#endif

/* eml2_2ForGsoap.h:56525 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_2__witsml2__SurveyProgram (-2287)

typedef witsml2__SurveyProgram _witsml2__SurveyProgram;
#endif

/* eml2_2ForGsoap.h:56528 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeology (-2288)

typedef witsml2__CuttingsGeology _witsml2__CuttingsGeology;
#endif

/* eml2_2ForGsoap.h:56531 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeologyInterval (-2289)

typedef witsml2__CuttingsGeologyInterval _witsml2__CuttingsGeologyInterval;
#endif

/* eml2_2ForGsoap.h:56534 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeology (-2290)

typedef witsml2__InterpretedGeology _witsml2__InterpretedGeology;
#endif

/* eml2_2ForGsoap.h:56537 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeologyInterval (-2291)

typedef witsml2__InterpretedGeologyInterval _witsml2__InterpretedGeologyInterval;
#endif

/* eml2_2ForGsoap.h:56540 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluation (-2292)

typedef witsml2__ShowEvaluation _witsml2__ShowEvaluation;
#endif

/* eml2_2ForGsoap.h:56543 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluationInterval (-2293)

typedef witsml2__ShowEvaluationInterval _witsml2__ShowEvaluationInterval;
#endif

/* eml2_2ForGsoap.h:56546 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeology (-2294)

typedef witsml2__WellboreGeology _witsml2__WellboreGeology;
#endif

/* eml2_2ForGsoap.h:56552 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREMudLogReportInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREMudLogReportInterval (-2295)

typedef witsml2__MudlogReportInterval _witsml2__part_USCOREMudLogReportInterval;
#endif

/* eml2_2ForGsoap.h:56555 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__MudLogReport (-2296)

typedef witsml2__MudLogReport _witsml2__MudLogReport;
#endif

/* eml2_2ForGsoap.h:56558 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarker (-2297)

typedef witsml2__WellboreMarker _witsml2__WellboreMarker;
#endif

/* eml2_2ForGsoap.h:56561 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarkerSet (-2298)

typedef witsml2__WellboreMarkerSet _witsml2__WellboreMarkerSet;
#endif

/* eml2_2ForGsoap.h:56564 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellCompletion (-2299)

typedef witsml2__WellCompletion _witsml2__WellCompletion;
#endif

/* eml2_2ForGsoap.h:56567 */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreCompletion (-2300)

typedef witsml2__WellboreCompletion _witsml2__WellboreCompletion;
#endif

/* eml2_2ForGsoap.h:56589 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject (-2301)

typedef eml22__AbstractObject _eml22__AbstractContextualObject;
#endif

/* eml2_2ForGsoap.h:56595 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject (-2302)

typedef eml22__AbstractObject _eml22__AbstractDataObject;
#endif

/* eml2_2ForGsoap.h:56598 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference (-2303)

typedef eml22__EpcExternalPartReference _eml22__EpcExternalPartReference;
#endif

/* eml2_2ForGsoap.h:56601 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2__eml22__Activity (-2304)

typedef eml22__Activity _eml22__Activity;
#endif

/* eml2_2ForGsoap.h:56604 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate (-2305)

typedef eml22__ActivityTemplate _eml22__ActivityTemplate;
#endif

/* eml2_2ForGsoap.h:56607 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind (-2306)

typedef eml22__PropertyKind _eml22__PropertyKind;
#endif

/* eml2_2ForGsoap.h:56610 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary (-2307)

typedef eml22__PropertyKindDictionary _eml22__PropertyKindDictionary;
#endif

/* eml2_2ForGsoap.h:56613 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries (-2308)

typedef eml22__TimeSeries _eml22__TimeSeries;
#endif

/* eml2_2ForGsoap.h:56616 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord (-2309)

typedef eml22__DataAssuranceRecord _eml22__DataAssuranceRecord;
#endif

/* eml2_2ForGsoap.h:56619 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet (-2310)

typedef eml22__GraphicalInformationSet _eml22__GraphicalInformationSet;
#endif

/* eml2_2ForGsoap.h:56638 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS (-2311)

typedef gml__GeodeticCRSType _gml__GeodeticCRS;
#endif

/* eml2_2ForGsoap.h:56644 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__description
#define SOAP_TYPE_gsoap_eml2_2__gml__description (-2312)

typedef gml__StringOrRefType _gml__description;
#endif

/* eml2_2ForGsoap.h:56650 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference
#define SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference (-2313)

typedef gml__ReferenceType _gml__descriptionReference;
#endif

/* eml2_2ForGsoap.h:56656 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__identifier
#define SOAP_TYPE_gsoap_eml2_2__gml__identifier (-2314)

typedef gml__CodeWithAuthorityType _gml__identifier;
#endif

/* eml2_2ForGsoap.h:56662 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__name
#define SOAP_TYPE_gsoap_eml2_2__gml__name (-2315)

typedef gml__CodeType _gml__name;
#endif

/* eml2_2ForGsoap.h:56665 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__remarks
#define SOAP_TYPE_gsoap_eml2_2__gml__remarks (-2316)

typedef std::string _gml__remarks;
#endif

/* eml2_2ForGsoap.h:56673 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Definition
#define SOAP_TYPE_gsoap_eml2_2__gml__Definition (-2317)

typedef gml__DefinitionType _gml__Definition;
#endif

/* eml2_2ForGsoap.h:56679 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__scope
#define SOAP_TYPE_gsoap_eml2_2__gml__scope (-2318)

typedef std::string _gml__scope;
#endif

/* eml2_2ForGsoap.h:56685 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS (-2319)

typedef gml__EllipsoidalCSPropertyType _gml__ellipsoidalCS;
#endif

/* eml2_2ForGsoap.h:56691 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS (-2320)

typedef gml__EllipsoidalCSType _gml__EllipsoidalCS;
#endif

/* eml2_2ForGsoap.h:56697 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axis
#define SOAP_TYPE_gsoap_eml2_2__gml__axis (-2321)

typedef gml__CoordinateSystemAxisPropertyType _gml__axis;
#endif

/* eml2_2ForGsoap.h:56703 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis (-2322)

typedef gml__CoordinateSystemAxisType _gml__CoordinateSystemAxis;
#endif

/* eml2_2ForGsoap.h:56709 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev
#define SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev (-2323)

typedef gml__CodeType _gml__axisAbbrev;
#endif

/* eml2_2ForGsoap.h:56717 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisDirection
#define SOAP_TYPE_gsoap_eml2_2__gml__axisDirection (-2324)

typedef gml__CodeWithAuthorityType _gml__axisDirection;
#endif

/* eml2_2ForGsoap.h:56723 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__minimumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__minimumValue (-2325)

typedef double _gml__minimumValue;
#endif

/* eml2_2ForGsoap.h:56729 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__maximumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__maximumValue (-2326)

typedef double _gml__maximumValue;
#endif

/* eml2_2ForGsoap.h:56735 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning
#define SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning (-2327)

typedef gml__CodeWithAuthorityType _gml__rangeMeaning;
#endif

/* eml2_2ForGsoap.h:56741 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS (-2328)

typedef gml__CartesianCSPropertyType _gml__cartesianCS;
#endif

/* eml2_2ForGsoap.h:56747 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS (-2329)

typedef gml__CartesianCSType _gml__CartesianCS;
#endif

/* eml2_2ForGsoap.h:56753 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS (-2330)

typedef gml__SphericalCSPropertyType _gml__sphericalCS;
#endif

/* eml2_2ForGsoap.h:56759 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS (-2331)

typedef gml__SphericalCSType _gml__SphericalCS;
#endif

/* eml2_2ForGsoap.h:56765 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum (-2332)

typedef gml__GeodeticDatumPropertyType _gml__geodeticDatum;
#endif

/* eml2_2ForGsoap.h:56771 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum (-2333)

typedef gml__GeodeticDatumType _gml__GeodeticDatum;
#endif

/* eml2_2ForGsoap.h:56781 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition
#define SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition (-2334)

typedef gml__CodeType _gml__anchorDefinition;
#endif

/* eml2_2ForGsoap.h:56787 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch
#define SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch (-2335)

typedef xsd__date _gml__realizationEpoch;
#endif

/* eml2_2ForGsoap.h:56793 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian (-2336)

typedef gml__PrimeMeridianPropertyType _gml__primeMeridian;
#endif

/* eml2_2ForGsoap.h:56799 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian (-2337)

typedef gml__PrimeMeridianType _gml__PrimeMeridian;
#endif

/* eml2_2ForGsoap.h:56805 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude
#define SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude (-2338)

typedef gml__AngleType _gml__greenwichLongitude;
#endif

/* eml2_2ForGsoap.h:56811 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid (-2339)

typedef gml__EllipsoidPropertyType _gml__ellipsoid;
#endif

/* eml2_2ForGsoap.h:56817 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid (-2340)

typedef gml__EllipsoidType _gml__Ellipsoid;
#endif

/* eml2_2ForGsoap.h:56823 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis (-2341)

typedef gml__MeasureType _gml__semiMajorAxis;
#endif

/* eml2_2ForGsoap.h:56829 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS (-2342)

typedef gml__ProjectedCRSType _gml__ProjectedCRS;
#endif

/* eml2_2ForGsoap.h:56835 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__conversion
#define SOAP_TYPE_gsoap_eml2_2__gml__conversion (-2343)

typedef gml__GeneralConversionPropertyType _gml__conversion;
#endif

/* eml2_2ForGsoap.h:56841 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__operationVersion
#define SOAP_TYPE_gsoap_eml2_2__gml__operationVersion (-2344)

typedef std::string _gml__operationVersion;
#endif

/* eml2_2ForGsoap.h:56847 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS (-2345)

typedef gml__CRSPropertyType _gml__sourceCRS;
#endif

/* eml2_2ForGsoap.h:56853 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__targetCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__targetCRS (-2346)

typedef gml__CRSPropertyType _gml__targetCRS;
#endif

/* eml2_2ForGsoap.h:56859 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS (-2347)

typedef gml__GeodeticCRSPropertyType _gml__baseGeodeticCRS;
#endif

/* eml2_2ForGsoap.h:56865 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS (-2348)

typedef gml__VerticalCRSType _gml__VerticalCRS;
#endif

/* eml2_2ForGsoap.h:56871 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalCS (-2349)

typedef gml__VerticalCSPropertyType _gml__verticalCS;
#endif

/* eml2_2ForGsoap.h:56877 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS (-2350)

typedef gml__VerticalCSType _gml__VerticalCS;
#endif

/* eml2_2ForGsoap.h:56883 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum (-2351)

typedef gml__VerticalDatumPropertyType _gml__verticalDatum;
#endif

/* eml2_2ForGsoap.h:56889 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum (-2352)

typedef gml__VerticalDatumType _gml__VerticalDatum;
#endif

/* eml2_2ForGsoap.h:56903 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__id
#define SOAP_TYPE_gsoap_eml2_2__gml__id (-2353)

typedef xsd__ID _gml__id;
#endif

/* eml2_2ForGsoap.h:56922 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__href
#define SOAP_TYPE_gsoap_eml2_2__xlink__href (-2354)

typedef xsd__anyURI _xlink__href;
#endif

/* eml2_2ForGsoap.h:56925 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__role
#define SOAP_TYPE_gsoap_eml2_2__xlink__role (-2355)

typedef xsd__anyURI _xlink__role;
#endif

/* eml2_2ForGsoap.h:56928 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__arcrole
#define SOAP_TYPE_gsoap_eml2_2__xlink__arcrole (-2356)

typedef xsd__anyURI _xlink__arcrole;
#endif

/* eml2_2ForGsoap.h:56931 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__title
#define SOAP_TYPE_gsoap_eml2_2__xlink__title (-2357)

typedef std::string _xlink__title;
#endif

/* eml2_2ForGsoap.h:56942 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent (-2358)

typedef gmd__EX_USCOREExtent_USCOREType _gmd__EX_USCOREExtent;
#endif

/* eml2_2ForGsoap.h:56945 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent (-2359)

typedef gmd__EX_USCORETemporalExtent_USCOREType _gmd__EX_USCORETemporalExtent;
#endif

/* eml2_2ForGsoap.h:56948 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent (-2360)

typedef gmd__EX_USCOREVerticalExtent_USCOREType _gmd__EX_USCOREVerticalExtent;
#endif

/* eml2_2ForGsoap.h:56951 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier
#define SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier (-2361)

typedef gmd__MD_USCOREIdentifier_USCOREType _gmd__MD_USCOREIdentifier;
#endif

/* eml2_2ForGsoap.h:56954 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation (-2362)

typedef gmd__CI_USCORECitation_USCOREType _gmd__CI_USCORECitation;
#endif

/* eml2_2ForGsoap.h:56957 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate (-2363)

typedef gmd__CI_USCOREDate_USCOREType _gmd__CI_USCOREDate;
#endif

/* eml2_2ForGsoap.h:56960 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode (-2364)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREDateTypeCode;
#endif

/* eml2_2ForGsoap.h:56963 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty (-2365)

typedef gmd__CI_USCOREResponsibleParty_USCOREType _gmd__CI_USCOREResponsibleParty;
#endif

/* eml2_2ForGsoap.h:56966 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact (-2366)

typedef gmd__CI_USCOREContact_USCOREType _gmd__CI_USCOREContact;
#endif

/* eml2_2ForGsoap.h:56969 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone (-2367)

typedef gmd__CI_USCORETelephone_USCOREType _gmd__CI_USCORETelephone;
#endif

/* eml2_2ForGsoap.h:56972 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress (-2368)

typedef gmd__CI_USCOREAddress_USCOREType _gmd__CI_USCOREAddress;
#endif

/* eml2_2ForGsoap.h:56975 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource (-2369)

typedef gmd__CI_USCOREOnlineResource_USCOREType _gmd__CI_USCOREOnlineResource;
#endif

/* eml2_2ForGsoap.h:56978 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__URL
#define SOAP_TYPE_gsoap_eml2_2__gmd__URL (-2370)

typedef xsd__anyURI _gmd__URL;
#endif

/* eml2_2ForGsoap.h:56981 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode (-2371)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREOnLineFunctionCode;
#endif

/* eml2_2ForGsoap.h:56984 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode (-2372)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCORERoleCode;
#endif

/* eml2_2ForGsoap.h:56987 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode (-2373)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREPresentationFormCode;
#endif

/* eml2_2ForGsoap.h:56990 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries (-2374)

typedef gmd__CI_USCORESeries_USCOREType _gmd__CI_USCORESeries;
#endif

/* eml2_2ForGsoap.h:56993 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode (-2375)

typedef gco__CodeListValue_USCOREType _gmd__DQ_USCOREEvaluationMethodTypeCode;
#endif

/* eml2_2ForGsoap.h:57028 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__CharacterString
#define SOAP_TYPE_gsoap_eml2_2__gco__CharacterString (-2376)

typedef std::string _gco__CharacterString;
#endif

/* eml2_2ForGsoap.h:57031 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Boolean
#define SOAP_TYPE_gsoap_eml2_2__gco__Boolean (-2377)

typedef bool _gco__Boolean;
#endif

/* eml2_2ForGsoap.h:57034 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Real
#define SOAP_TYPE_gsoap_eml2_2__gco__Real (-2378)

typedef double _gco__Real;
#endif

/* eml2_2ForGsoap.h:57037 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Date
#define SOAP_TYPE_gsoap_eml2_2__gco__Date (-2379)

typedef gco__Date_USCOREType _gco__Date;
#endif

/* eml2_2ForGsoap.h:57040 */
#ifndef SOAP_TYPE__gco__DateTime
#define SOAP_TYPE__gco__DateTime (-2380)

typedef xsd__dateTime _gco__DateTime;
#endif

/* eml2_2ForGsoap.h:57051 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__nilReason
#define SOAP_TYPE_gsoap_eml2_2__gco__nilReason (-2381)

typedef gml__NilReasonType _gco__nilReason;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_gsoap_eml2_2_byte
#define SOAP_TYPE_gsoap_eml2_2_byte (-3)

#endif

/* witsml2__LevelIntegerCode has binding name 'witsml2__LevelIntegerCode' for type 'witsml2:LevelIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LevelIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LevelIntegerCode (-1062)

#endif

/* witsml2__PumpActionIntegerCode has binding name 'witsml2__PumpActionIntegerCode' for type 'witsml2:PumpActionIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpActionIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpActionIntegerCode (-1061)

#endif

/* witsml2__BeaufortScaleIntegerCode has binding name 'witsml2__BeaufortScaleIntegerCode' for type 'witsml2:BeaufortScaleIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BeaufortScaleIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BeaufortScaleIntegerCode (-1060)

#endif

/* short has binding name 'short' for type 'xsd:short' */
#ifndef SOAP_TYPE_gsoap_eml2_2_short
#define SOAP_TYPE_gsoap_eml2_2_short (-1059)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_2_int
#define SOAP_TYPE_gsoap_eml2_2_int (-1)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_2_LONG64
#define SOAP_TYPE_gsoap_eml2_2_LONG64 (-1777)

#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_gsoap_eml2_2_float
#define SOAP_TYPE_gsoap_eml2_2_float (-2017)

#endif

/* _gco__Real has binding name '_gco__Real' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Real
#define SOAP_TYPE_gsoap_eml2_2__gco__Real (-2378)

#endif

/* _gml__maximumValue has binding name '_gml__maximumValue' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__maximumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__maximumValue (-2326)

#endif

/* _gml__minimumValue has binding name '_gml__minimumValue' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__minimumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__minimumValue (-2325)

#endif

/* eml22__AbstractMeasure has binding name 'eml22__AbstractMeasure' for type 'eml22:AbstractMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure (-1065)

#endif

/* witsml2__NonNegativeFraction has binding name 'witsml2__NonNegativeFraction' for type 'witsml2:NonNegativeFraction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NonNegativeFraction (-1064)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_2_double
#define SOAP_TYPE_gsoap_eml2_2_double (-1063)

#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_gsoap_eml2_2_unsignedByte
#define SOAP_TYPE_gsoap_eml2_2_unsignedByte (-10)

#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_unsignedInt
#define SOAP_TYPE_gsoap_eml2_2_unsignedInt (-9)

#endif

/* eml22__PositiveInteger has binding name 'eml22__PositiveInteger' for type 'eml22:PositiveInteger' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PositiveInteger
#define SOAP_TYPE_gsoap_eml2_2_eml22__PositiveInteger (-1069)

#endif

/* eml22__NonNegativeInteger has binding name 'eml22__NonNegativeInteger' for type 'eml22:NonNegativeInteger' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeInteger
#define SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeInteger (-1068)

#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_ULONG64
#define SOAP_TYPE_gsoap_eml2_2_ULONG64 (-1067)

#endif

/* _gco__Boolean has binding name '_gco__Boolean' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Boolean
#define SOAP_TYPE_gsoap_eml2_2__gco__Boolean (-2377)

#endif

/* enum _gml__RelatedTimeType_relativePosition has binding name '_gml__RelatedTimeType_relativePosition' for type 'gml:RelatedTimeType-relativePosition' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition (-2184)

#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_2_bool
#define SOAP_TYPE_gsoap_eml2_2_bool (-1430)

#endif

/* enum eml22__VerticalDirection has binding name 'eml22__VerticalDirection' for type 'eml22:VerticalDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection (-1429)

#endif

/* enum eml22__PrincipalMeridian has binding name 'eml22__PrincipalMeridian' for type 'eml22:PrincipalMeridian' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_2_eml22__PrincipalMeridian (-1428)

#endif

/* enum eml22__NorthOrSouth has binding name 'eml22__NorthOrSouth' for type 'eml22:NorthOrSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_2_eml22__NorthOrSouth (-1427)

#endif

/* enum eml22__EastOrWest has binding name 'eml22__EastOrWest' for type 'eml22:EastOrWest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EastOrWest
#define SOAP_TYPE_gsoap_eml2_2_eml22__EastOrWest (-1426)

#endif

/* enum eml22__AxisOrder2d has binding name 'eml22__AxisOrder2d' for type 'eml22:AxisOrder2d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d (-1425)

#endif

/* enum eml22__ReferencePressureKind has binding name 'eml22__ReferencePressureKind' for type 'eml22:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind (-1424)

#endif

/* enum eml22__ActivityParameterKind has binding name 'eml22__ActivityParameterKind' for type 'eml22:ActivityParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityParameterKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityParameterKind (-1423)

#endif

/* enum eml22__WellStatus has binding name 'eml22__WellStatus' for type 'eml22:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus (-1422)

#endif

/* enum eml22__WellboreDatumReference has binding name 'eml22__WellboreDatumReference' for type 'eml22:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference (-1421)

#endif

/* enum eml22__ReferenceCondition has binding name 'eml22__ReferenceCondition' for type 'eml22:ReferenceCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition (-1420)

#endif

/* enum eml22__QuantityClassKind has binding name 'eml22__QuantityClassKind' for type 'eml22:QuantityClassKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind (-1419)

#endif

/* enum eml22__MeasureClass has binding name 'eml22__MeasureClass' for type 'eml22:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass
#define SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass (-1418)

#endif

/* enum eml22__MatrixCementKind has binding name 'eml22__MatrixCementKind' for type 'eml22:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind (-1417)

#endif

/* enum eml22__LithostratigraphicRank has binding name 'eml22__LithostratigraphicRank' for type 'eml22:LithostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank (-1416)

#endif

/* enum eml22__LithologyQualifierKind has binding name 'eml22__LithologyQualifierKind' for type 'eml22:LithologyQualifierKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind (-1415)

#endif

/* enum eml22__LithologyKind has binding name 'eml22__LithologyKind' for type 'eml22:LithologyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind (-1414)

#endif

/* enum eml22__GeochronologicalRank has binding name 'eml22__GeochronologicalRank' for type 'eml22:GeochronologicalRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank (-1413)

#endif

/* enum eml22__ExistenceKind has binding name 'eml22__ExistenceKind' for type 'eml22:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind (-1412)

#endif

/* enum witsml2__PhysicalStatus has binding name 'witsml2__PhysicalStatus' for type 'witsml2:PhysicalStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PhysicalStatus (-1411)

#endif

/* enum witsml2__PerforationStatus has binding name 'witsml2__PerforationStatus' for type 'witsml2:PerforationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatus (-1410)

#endif

/* enum witsml2__CompletionStatus has binding name 'witsml2__CompletionStatus' for type 'witsml2:CompletionStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatus (-1409)

#endif

/* enum witsml2__PressureParameterKind has binding name 'witsml2__PressureParameterKind' for type 'witsml2:PressureParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PressureParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PressureParameterKind (-1408)

#endif

/* enum witsml2__PressureGradientParameterKind has binding name 'witsml2__PressureGradientParameterKind' for type 'witsml2:PressureGradientParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PressureGradientParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PressureGradientParameterKind (-1407)

#endif

/* enum witsml2__MudLogStringParameterKind has binding name 'witsml2__MudLogStringParameterKind' for type 'witsml2:MudLogStringParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameterKind (-1406)

#endif

/* enum witsml2__ForceParameterKind has binding name 'witsml2__ForceParameterKind' for type 'witsml2:ForceParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ForceParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ForceParameterKind (-1405)

#endif

/* enum witsml2__ConcentrationParameterKind has binding name 'witsml2__ConcentrationParameterKind' for type 'witsml2:ConcentrationParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ConcentrationParameterKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ConcentrationParameterKind (-1404)

#endif

/* enum witsml2__ShowSpeed has binding name 'witsml2__ShowSpeed' for type 'witsml2:ShowSpeed' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowSpeed (-1403)

#endif

/* enum witsml2__ShowRating has binding name 'witsml2__ShowRating' for type 'witsml2:ShowRating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowRating
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowRating (-1402)

#endif

/* enum witsml2__ShowLevel has binding name 'witsml2__ShowLevel' for type 'witsml2:ShowLevel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowLevel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowLevel (-1401)

#endif

/* enum witsml2__ShowFluorescence has binding name 'witsml2__ShowFluorescence' for type 'witsml2:ShowFluorescence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluorescence (-1400)

#endif

/* enum witsml2__ShowFluid has binding name 'witsml2__ShowFluid' for type 'witsml2:ShowFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowFluid (-1399)

#endif

/* enum witsml2__StimMaterialKind has binding name 'witsml2__StimMaterialKind' for type 'witsml2:StimMaterialKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialKind (-1398)

#endif

/* enum witsml2__StimJobDiversionMethod has binding name 'witsml2__StimJobDiversionMethod' for type 'witsml2:StimJobDiversionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversionMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversionMethod (-1397)

#endif

/* enum witsml2__StimFluidSubtype has binding name 'witsml2__StimFluidSubtype' for type 'witsml2:StimFluidSubtype' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidSubtype
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidSubtype (-1396)

#endif

/* enum witsml2__StimFluidKind has binding name 'witsml2__StimFluidKind' for type 'witsml2:StimFluidKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluidKind (-1395)

#endif

/* enum witsml2__StimFlowPathType has binding name 'witsml2__StimFlowPathType' for type 'witsml2:StimFlowPathType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPathType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPathType (-1394)

#endif

/* enum witsml2__StimFetTestAnalysisMethod has binding name 'witsml2__StimFetTestAnalysisMethod' for type 'witsml2:StimFetTestAnalysisMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTestAnalysisMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTestAnalysisMethod (-1393)

#endif

/* enum witsml2__StimAdditiveKind has binding name 'witsml2__StimAdditiveKind' for type 'witsml2:StimAdditiveKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditiveKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditiveKind (-1392)

#endif

/* enum witsml2__ProppantAgentKind has binding name 'witsml2__ProppantAgentKind' for type 'witsml2:ProppantAgentKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ProppantAgentKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ProppantAgentKind (-1391)

#endif

/* enum witsml2__PIDXCommodityCode has binding name 'witsml2__PIDXCommodityCode' for type 'witsml2:PIDXCommodityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PIDXCommodityCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PIDXCommodityCode (-1390)

#endif

/* enum witsml2__RiskType has binding name 'witsml2__RiskType' for type 'witsml2:RiskType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskType (-1389)

#endif

/* enum witsml2__RiskSubCategory has binding name 'witsml2__RiskSubCategory' for type 'witsml2:RiskSubCategory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskSubCategory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskSubCategory (-1388)

#endif

/* enum witsml2__RiskCategory has binding name 'witsml2__RiskCategory' for type 'witsml2:RiskCategory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskCategory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskCategory (-1387)

#endif

/* enum witsml2__RiskAffectedPersonnel has binding name 'witsml2__RiskAffectedPersonnel' for type 'witsml2:RiskAffectedPersonnel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RiskAffectedPersonnel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RiskAffectedPersonnel (-1386)

#endif

/* enum witsml2__SurfEquipType has binding name 'witsml2__SurfEquipType' for type 'witsml2:SurfEquipType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurfEquipType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurfEquipType (-1385)

#endif

/* enum witsml2__RigType has binding name 'witsml2__RigType' for type 'witsml2:RigType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RigType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RigType (-1384)

#endif

/* enum witsml2__PumpType has binding name 'witsml2__PumpType' for type 'witsml2:PumpType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpType (-1383)

#endif

/* enum witsml2__PitType has binding name 'witsml2__PitType' for type 'witsml2:PitType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PitType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PitType (-1382)

#endif

/* enum witsml2__DriveType has binding name 'witsml2__DriveType' for type 'witsml2:DriveType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DriveType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DriveType (-1381)

#endif

/* enum witsml2__DrawWorksType has binding name 'witsml2__DrawWorksType' for type 'witsml2:DrawWorksType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrawWorksType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrawWorksType (-1380)

#endif

/* enum witsml2__DerrickType has binding name 'witsml2__DerrickType' for type 'witsml2:DerrickType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DerrickType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DerrickType (-1379)

#endif

/* enum witsml2__BopType has binding name 'witsml2__BopType' for type 'witsml2:BopType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BopType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BopType (-1378)

#endif

/* enum witsml2__ToolSubKind has binding name 'witsml2__ToolSubKind' for type 'witsml2:ToolSubKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKind (-1377)

#endif

/* enum witsml2__ToolKind has binding name 'witsml2__ToolKind' for type 'witsml2:ToolKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolKind (-1376)

#endif

/* enum witsml2__OperatingCondition has binding name 'witsml2__OperatingCondition' for type 'witsml2:OperatingCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingCondition
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingCondition (-1375)

#endif

/* enum witsml2__MisalignmentMode has binding name 'witsml2__MisalignmentMode' for type 'witsml2:MisalignmentMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MisalignmentMode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MisalignmentMode (-1374)

#endif

/* enum witsml2__GyroMode has binding name 'witsml2__GyroMode' for type 'witsml2:GyroMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GyroMode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GyroMode (-1373)

#endif

/* enum witsml2__GyroAxisCombination has binding name 'witsml2__GyroAxisCombination' for type 'witsml2:GyroAxisCombination' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GyroAxisCombination
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GyroAxisCombination (-1372)

#endif

/* enum witsml2__ErrorPropagationMode has binding name 'witsml2__ErrorPropagationMode' for type 'witsml2:ErrorPropagationMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorPropagationMode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorPropagationMode (-1371)

#endif

/* enum witsml2__ErrorKind has binding name 'witsml2__ErrorKind' for type 'witsml2:ErrorKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorKind (-1370)

#endif

/* enum witsml2__CorrectionConsidered has binding name 'witsml2__CorrectionConsidered' for type 'witsml2:CorrectionConsidered' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsidered
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsidered (-1369)

#endif

/* enum witsml2__AuthorizationStatus has binding name 'witsml2__AuthorizationStatus' for type 'witsml2:AuthorizationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AuthorizationStatus (-1368)

#endif

/* enum witsml2__AccelerometerAxisCombination has binding name 'witsml2__AccelerometerAxisCombination' for type 'witsml2:AccelerometerAxisCombination' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AccelerometerAxisCombination
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AccelerometerAxisCombination (-1367)

#endif

/* enum witsml2__TypeSurveyTool has binding name 'witsml2__TypeSurveyTool' for type 'witsml2:TypeSurveyTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TypeSurveyTool (-1366)

#endif

/* enum witsml2__TrajStnCalcAlgorithm has binding name 'witsml2__TrajStnCalcAlgorithm' for type 'witsml2:TrajStnCalcAlgorithm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStnCalcAlgorithm (-1365)

#endif

/* enum witsml2__TrajStationType has binding name 'witsml2__TrajStationType' for type 'witsml2:TrajStationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationType (-1364)

#endif

/* enum witsml2__TrajStationStatus has binding name 'witsml2__TrajStationStatus' for type 'witsml2:TrajStationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajStationStatus (-1363)

#endif

/* enum witsml2__AziRef has binding name 'witsml2__AziRef' for type 'witsml2:AziRef' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AziRef
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AziRef (-1362)

#endif

/* enum witsml2__SupportCraftType has binding name 'witsml2__SupportCraftType' for type 'witsml2:SupportCraftType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraftType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraftType (-1361)

#endif

/* enum witsml2__ScrType has binding name 'witsml2__ScrType' for type 'witsml2:ScrType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ScrType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ScrType (-1360)

#endif

/* enum witsml2__PumpOpType has binding name 'witsml2__PumpOpType' for type 'witsml2:PumpOpType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOpType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOpType (-1359)

#endif

/* enum witsml2__TubingConnectionTypes has binding name 'witsml2__TubingConnectionTypes' for type 'witsml2:TubingConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionTypes (-1358)

#endif

/* enum witsml2__SubStringType has binding name 'witsml2__SubStringType' for type 'witsml2:SubStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SubStringType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SubStringType (-1357)

#endif

/* enum witsml2__RodConnectionTypes has binding name 'witsml2__RodConnectionTypes' for type 'witsml2:RodConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionTypes (-1356)

#endif

/* enum witsml2__PerforationToolType has binding name 'witsml2__PerforationToolType' for type 'witsml2:PerforationToolType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationToolType (-1355)

#endif

/* enum witsml2__OtherConnectionTypes has binding name 'witsml2__OtherConnectionTypes' for type 'witsml2:OtherConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionTypes (-1354)

#endif

/* enum witsml2__GradeType has binding name 'witsml2__GradeType' for type 'witsml2:GradeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GradeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GradeType (-1353)

#endif

/* enum witsml2__GeologyType has binding name 'witsml2__GeologyType' for type 'witsml2:GeologyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyType (-1352)

#endif

/* enum witsml2__EquipmentType has binding name 'witsml2__EquipmentType' for type 'witsml2:EquipmentType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentType (-1351)

#endif

/* enum witsml2__DownholeStringType has binding name 'witsml2__DownholeStringType' for type 'witsml2:DownholeStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringType (-1350)

#endif

/* enum witsml2__ConnectionFormType has binding name 'witsml2__ConnectionFormType' for type 'witsml2:ConnectionFormType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionFormType (-1349)

#endif

/* enum witsml2__Coating has binding name 'witsml2__Coating' for type 'witsml2:Coating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Coating
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Coating (-1348)

#endif

/* enum witsml2__CasingConnectionTypes has binding name 'witsml2__CasingConnectionTypes' for type 'witsml2:CasingConnectionTypes' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionTypes
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionTypes (-1347)

#endif

/* enum witsml2__BoreholeType has binding name 'witsml2__BoreholeType' for type 'witsml2:BoreholeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeType (-1346)

#endif

/* enum witsml2__PerfConveyanceMethod has binding name 'witsml2__PerfConveyanceMethod' for type 'witsml2:PerfConveyanceMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerfConveyanceMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerfConveyanceMethod (-1345)

#endif

/* enum witsml2__LogIndexType has binding name 'witsml2__LogIndexType' for type 'witsml2:LogIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogIndexType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogIndexType (-1344)

#endif

/* enum witsml2__EventClassType has binding name 'witsml2__EventClassType' for type 'witsml2:EventClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventClassType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventClassType (-1343)

#endif

/* enum witsml2__ScaleType has binding name 'witsml2__ScaleType' for type 'witsml2:ScaleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ScaleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ScaleType (-1342)

#endif

/* enum witsml2__MimeType has binding name 'witsml2__MimeType' for type 'witsml2:MimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MimeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MimeType (-1341)

#endif

/* enum witsml2__MessageDigestType has binding name 'witsml2__MessageDigestType' for type 'witsml2:MessageDigestType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MessageDigestType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MessageDigestType (-1340)

#endif

/* enum witsml2__LogTrackType has binding name 'witsml2__LogTrackType' for type 'witsml2:LogTrackType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogTrackType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogTrackType (-1339)

#endif

/* enum witsml2__LogSectionType has binding name 'witsml2__LogSectionType' for type 'witsml2:LogSectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogSectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogSectionType (-1338)

#endif

/* enum witsml2__LogRectangleType has binding name 'witsml2__LogRectangleType' for type 'witsml2:LogRectangleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogRectangleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogRectangleType (-1337)

#endif

/* enum witsml2__LineStyle has binding name 'witsml2__LineStyle' for type 'witsml2:LineStyle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LineStyle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LineStyle (-1336)

#endif

/* enum witsml2__FileNameType has binding name 'witsml2__FileNameType' for type 'witsml2:FileNameType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FileNameType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FileNameType (-1335)

#endif

/* enum witsml2__CalibrationPointRole has binding name 'witsml2__CalibrationPointRole' for type 'witsml2:CalibrationPointRole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CalibrationPointRole
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CalibrationPointRole (-1334)

#endif

/* enum witsml2__BackupScaleType has binding name 'witsml2__BackupScaleType' for type 'witsml2:BackupScaleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BackupScaleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BackupScaleType (-1333)

#endif

/* enum witsml2__LoggingMethod has binding name 'witsml2__LoggingMethod' for type 'witsml2:LoggingMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LoggingMethod (-1332)

#endif

/* enum witsml2__IndexDirection has binding name 'witsml2__IndexDirection' for type 'witsml2:IndexDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IndexDirection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IndexDirection (-1331)

#endif

/* enum witsml2__EtpDataType has binding name 'witsml2__EtpDataType' for type 'witsml2:EtpDataType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EtpDataType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EtpDataType (-1330)

#endif

/* enum witsml2__ChannelStatus has binding name 'witsml2__ChannelStatus' for type 'witsml2:ChannelStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelStatus (-1329)

#endif

/* enum witsml2__ChannelState has binding name 'witsml2__ChannelState' for type 'witsml2:ChannelState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelState
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelState (-1328)

#endif

/* enum witsml2__ChannelIndexType has binding name 'witsml2__ChannelIndexType' for type 'witsml2:ChannelIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndexType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndexType (-1327)

#endif

/* enum witsml2__ChannelDerivation has binding name 'witsml2__ChannelDerivation' for type 'witsml2:ChannelDerivation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelDerivation (-1326)

#endif

/* enum witsml2__HoleCasingType has binding name 'witsml2__HoleCasingType' for type 'witsml2:HoleCasingType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__HoleCasingType (-1325)

#endif

/* enum witsml2__WellboreFluidLocation has binding name 'witsml2__WellboreFluidLocation' for type 'witsml2:WellboreFluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreFluidLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreFluidLocation (-1324)

#endif

/* enum witsml2__CementJobType has binding name 'witsml2__CementJobType' for type 'witsml2:CementJobType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobType (-1323)

#endif

/* enum witsml2__NameTagTechnology has binding name 'witsml2__NameTagTechnology' for type 'witsml2:NameTagTechnology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagTechnology (-1322)

#endif

/* enum witsml2__NameTagNumberingScheme has binding name 'witsml2__NameTagNumberingScheme' for type 'witsml2:NameTagNumberingScheme' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagNumberingScheme
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagNumberingScheme (-1321)

#endif

/* enum witsml2__NameTagLocation has binding name 'witsml2__NameTagLocation' for type 'witsml2:NameTagLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTagLocation (-1320)

#endif

/* enum witsml2__TubularComponentType has binding name 'witsml2__TubularComponentType' for type 'witsml2:TubularComponentType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponentType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponentType (-1319)

#endif

/* enum witsml2__TubularAssembly has binding name 'witsml2__TubularAssembly' for type 'witsml2:TubularAssembly' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubularAssembly
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubularAssembly (-1318)

#endif

/* enum witsml2__NozzleType has binding name 'witsml2__NozzleType' for type 'witsml2:NozzleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NozzleType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NozzleType (-1317)

#endif

/* enum witsml2__MeasurementType has binding name 'witsml2__MeasurementType' for type 'witsml2:MeasurementType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MeasurementType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MeasurementType (-1316)

#endif

/* enum witsml2__MaterialType has binding name 'witsml2__MaterialType' for type 'witsml2:MaterialType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MaterialType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MaterialType (-1315)

#endif

/* enum witsml2__JarType has binding name 'witsml2__JarType' for type 'witsml2:JarType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__JarType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__JarType (-1314)

#endif

/* enum witsml2__JarAction has binding name 'witsml2__JarAction' for type 'witsml2:JarAction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__JarAction
#define SOAP_TYPE_gsoap_eml2_2_witsml2__JarAction (-1313)

#endif

/* enum witsml2__IadcIntegerCode has binding name 'witsml2__IadcIntegerCode' for type 'witsml2:IadcIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IadcIntegerCode (-1312)

#endif

/* enum witsml2__IadcBearingWearCode has binding name 'witsml2__IadcBearingWearCode' for type 'witsml2:IadcBearingWearCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IadcBearingWearCode (-1311)

#endif

/* enum witsml2__HoleOpenerType has binding name 'witsml2__HoleOpenerType' for type 'witsml2:HoleOpenerType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpenerType (-1310)

#endif

/* enum witsml2__DeflectionMethod has binding name 'witsml2__DeflectionMethod' for type 'witsml2:DeflectionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DeflectionMethod
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DeflectionMethod (-1309)

#endif

/* enum witsml2__ConnectionPosition has binding name 'witsml2__ConnectionPosition' for type 'witsml2:ConnectionPosition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ConnectionPosition (-1308)

#endif

/* enum witsml2__BoxPinConfig has binding name 'witsml2__BoxPinConfig' for type 'witsml2:BoxPinConfig' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoxPinConfig (-1307)

#endif

/* enum witsml2__BladeType has binding name 'witsml2__BladeType' for type 'witsml2:BladeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BladeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BladeType (-1306)

#endif

/* enum witsml2__BladeShapeType has binding name 'witsml2__BladeShapeType' for type 'witsml2:BladeShapeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BladeShapeType (-1305)

#endif

/* enum witsml2__BitType has binding name 'witsml2__BitType' for type 'witsml2:BitType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitType (-1304)

#endif

/* enum witsml2__BitReasonPulled has binding name 'witsml2__BitReasonPulled' for type 'witsml2:BitReasonPulled' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitReasonPulled (-1303)

#endif

/* enum witsml2__BitDullCode has binding name 'witsml2__BitDullCode' for type 'witsml2:BitDullCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitDullCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitDullCode (-1302)

#endif

/* enum witsml2__BearingType has binding name 'witsml2__BearingType' for type 'witsml2:BearingType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BearingType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BearingType (-1301)

#endif

/* enum witsml2__WellTestType has binding name 'witsml2__WellTestType' for type 'witsml2:WellTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellTestType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellTestType (-1300)

#endif

/* enum witsml2__WellKillingProcedureType has binding name 'witsml2__WellKillingProcedureType' for type 'witsml2:WellKillingProcedureType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellKillingProcedureType (-1299)

#endif

/* enum witsml2__WellControlIncidentType has binding name 'witsml2__WellControlIncidentType' for type 'witsml2:WellControlIncidentType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellControlIncidentType (-1298)

#endif

/* enum witsml2__StateDetailActivity has binding name 'witsml2__StateDetailActivity' for type 'witsml2:StateDetailActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StateDetailActivity (-1297)

#endif

/* enum witsml2__ReadingKind has binding name 'witsml2__ReadingKind' for type 'witsml2:ReadingKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ReadingKind
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ReadingKind (-1296)

#endif

/* enum witsml2__PresTestType has binding name 'witsml2__PresTestType' for type 'witsml2:PresTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PresTestType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PresTestType (-1295)

#endif

/* enum witsml2__OpsReportVersion has binding name 'witsml2__OpsReportVersion' for type 'witsml2:OpsReportVersion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReportVersion (-1294)

#endif

/* enum witsml2__ItemState has binding name 'witsml2__ItemState' for type 'witsml2:ItemState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ItemState
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ItemState (-1293)

#endif

/* enum witsml2__InnerBarrelType has binding name 'witsml2__InnerBarrelType' for type 'witsml2:InnerBarrelType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InnerBarrelType (-1292)

#endif

/* enum witsml2__GasPeakType has binding name 'witsml2__GasPeakType' for type 'witsml2:GasPeakType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeakType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeakType (-1291)

#endif

/* enum witsml2__DrillActivityCode has binding name 'witsml2__DrillActivityCode' for type 'witsml2:DrillActivityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityCode (-1290)

#endif

/* enum witsml2__DrillActivityClassType has binding name 'witsml2__DrillActivityClassType' for type 'witsml2:DrillActivityClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivityClassType (-1289)

#endif

/* enum witsml2__MudClass has binding name 'witsml2__MudClass' for type 'witsml2:MudClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudClass
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudClass (-1288)

#endif

/* enum witsml2__MudSubClass has binding name 'witsml2__MudSubClass' for type 'witsml2:MudSubClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudSubClass
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudSubClass (-1287)

#endif

/* enum witsml2__BhaStatus has binding name 'witsml2__BhaStatus' for type 'witsml2:BhaStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BhaStatus
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BhaStatus (-1286)

#endif

/* enum witsml2__WellPurpose has binding name 'witsml2__WellPurpose' for type 'witsml2:WellPurpose' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellPurpose
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellPurpose (-1285)

#endif

/* enum witsml2__WellFluid has binding name 'witsml2__WellFluid' for type 'witsml2:WellFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellFluid (-1284)

#endif

/* enum witsml2__WellDirection has binding name 'witsml2__WellDirection' for type 'witsml2:WellDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellDirection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellDirection (-1283)

#endif

/* enum witsml2__ElevCodeEnum has binding name 'witsml2__ElevCodeEnum' for type 'witsml2:ElevCodeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ElevCodeEnum
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ElevCodeEnum (-1282)

#endif

/* enum witsml2__WellboreType has binding name 'witsml2__WellboreType' for type 'witsml2:WellboreType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreType (-1281)

#endif

/* enum witsml2__WellboreShape has binding name 'witsml2__WellboreShape' for type 'witsml2:WellboreShape' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreShape
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreShape (-1280)

#endif

/* enum eml22__LegacyVolumeUom has binding name 'eml22__LegacyVolumeUom' for type 'eml22:LegacyVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom (-1276)

#endif

/* enum eml22__LegacyVolumePerVolumeUom has binding name 'eml22__LegacyVolumePerVolumeUom' for type 'eml22:LegacyVolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom (-1275)

#endif

/* enum eml22__LegacyVolumePerTimeUom has binding name 'eml22__LegacyVolumePerTimeUom' for type 'eml22:LegacyVolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom (-1274)

#endif

/* enum eml22__LegacyVolumePerAreaUom has binding name 'eml22__LegacyVolumePerAreaUom' for type 'eml22:LegacyVolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom (-1273)

#endif

/* enum eml22__LegacyPressureUom has binding name 'eml22__LegacyPressureUom' for type 'eml22:LegacyPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom (-1272)

#endif

/* enum eml22__LegacyPressurePerVolumeUom has binding name 'eml22__LegacyPressurePerVolumeUom' for type 'eml22:LegacyPressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom (-1271)

#endif

/* enum eml22__LegacyMassPerVolumeUom has binding name 'eml22__LegacyMassPerVolumeUom' for type 'eml22:LegacyMassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom (-1270)

#endif

/* enum eml22__VolumeUom has binding name 'eml22__VolumeUom' for type 'eml22:VolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom (-1269)

#endif

/* enum eml22__VolumetricThermalExpansionUom has binding name 'eml22__VolumetricThermalExpansionUom' for type 'eml22:VolumetricThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom (-1268)

#endif

/* enum eml22__VolumetricHeatTransferCoefficientUom has binding name 'eml22__VolumetricHeatTransferCoefficientUom' for type 'eml22:VolumetricHeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom (-1267)

#endif

/* enum eml22__VolumePerVolumeUom has binding name 'eml22__VolumePerVolumeUom' for type 'eml22:VolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom (-1266)

#endif

/* enum eml22__VolumePerTimeUom has binding name 'eml22__VolumePerTimeUom' for type 'eml22:VolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom (-1265)

#endif

/* enum eml22__VolumePerTimePerVolumeUom has binding name 'eml22__VolumePerTimePerVolumeUom' for type 'eml22:VolumePerTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom (-1264)

#endif

/* enum eml22__VolumePerTimePerTimeUom has binding name 'eml22__VolumePerTimePerTimeUom' for type 'eml22:VolumePerTimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom (-1263)

#endif

/* enum eml22__VolumePerTimePerPressureUom has binding name 'eml22__VolumePerTimePerPressureUom' for type 'eml22:VolumePerTimePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom (-1262)

#endif

/* enum eml22__VolumePerTimePerPressureLengthUom has binding name 'eml22__VolumePerTimePerPressureLengthUom' for type 'eml22:VolumePerTimePerPressureLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom (-1261)

#endif

/* enum eml22__VolumePerTimePerLengthUom has binding name 'eml22__VolumePerTimePerLengthUom' for type 'eml22:VolumePerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom (-1260)

#endif

/* enum eml22__VolumePerTimePerAreaUom has binding name 'eml22__VolumePerTimePerAreaUom' for type 'eml22:VolumePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom (-1259)

#endif

/* enum eml22__VolumePerTimeLengthUom has binding name 'eml22__VolumePerTimeLengthUom' for type 'eml22:VolumePerTimeLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom (-1258)

#endif

/* enum eml22__VolumePerRotationUom has binding name 'eml22__VolumePerRotationUom' for type 'eml22:VolumePerRotationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom (-1257)

#endif

/* enum eml22__VolumePerPressureUom has binding name 'eml22__VolumePerPressureUom' for type 'eml22:VolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom (-1256)

#endif

/* enum eml22__VolumePerMassUom has binding name 'eml22__VolumePerMassUom' for type 'eml22:VolumePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom (-1255)

#endif

/* enum eml22__VolumePerLengthUom has binding name 'eml22__VolumePerLengthUom' for type 'eml22:VolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom (-1254)

#endif

/* enum eml22__VolumePerAreaUom has binding name 'eml22__VolumePerAreaUom' for type 'eml22:VolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom (-1253)

#endif

/* enum eml22__VolumeFlowRatePerVolumeFlowRateUom has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateUom' for type 'eml22:VolumeFlowRatePerVolumeFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom (-1252)

#endif

/* enum eml22__VerticalCoordinateUom has binding name 'eml22__VerticalCoordinateUom' for type 'eml22:VerticalCoordinateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom (-1251)

#endif

/* enum eml22__TimeUom has binding name 'eml22__TimeUom' for type 'eml22:TimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom (-1250)

#endif

/* enum eml22__TimePerVolumeUom has binding name 'eml22__TimePerVolumeUom' for type 'eml22:TimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom (-1249)

#endif

/* enum eml22__TimePerTimeUom has binding name 'eml22__TimePerTimeUom' for type 'eml22:TimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom (-1248)

#endif

/* enum eml22__TimePerMassUom has binding name 'eml22__TimePerMassUom' for type 'eml22:TimePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom (-1247)

#endif

/* enum eml22__TimePerLengthUom has binding name 'eml22__TimePerLengthUom' for type 'eml22:TimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom (-1246)

#endif

/* enum eml22__ThermodynamicTemperatureUom has binding name 'eml22__ThermodynamicTemperatureUom' for type 'eml22:ThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom (-1245)

#endif

/* enum eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-1244)

#endif

/* enum eml22__ThermalResistanceUom has binding name 'eml22__ThermalResistanceUom' for type 'eml22:ThermalResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom (-1243)

#endif

/* enum eml22__ThermalInsulanceUom has binding name 'eml22__ThermalInsulanceUom' for type 'eml22:ThermalInsulanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom (-1242)

#endif

/* enum eml22__ThermalDiffusivityUom has binding name 'eml22__ThermalDiffusivityUom' for type 'eml22:ThermalDiffusivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom (-1241)

#endif

/* enum eml22__ThermalConductivityUom has binding name 'eml22__ThermalConductivityUom' for type 'eml22:ThermalConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom (-1240)

#endif

/* enum eml22__ThermalConductanceUom has binding name 'eml22__ThermalConductanceUom' for type 'eml22:ThermalConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom (-1239)

#endif

/* enum eml22__TemperatureIntervalUom has binding name 'eml22__TemperatureIntervalUom' for type 'eml22:TemperatureIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom (-1238)

#endif

/* enum eml22__TemperatureIntervalPerTimeUom has binding name 'eml22__TemperatureIntervalPerTimeUom' for type 'eml22:TemperatureIntervalPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom (-1237)

#endif

/* enum eml22__TemperatureIntervalPerPressureUom has binding name 'eml22__TemperatureIntervalPerPressureUom' for type 'eml22:TemperatureIntervalPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom (-1236)

#endif

/* enum eml22__TemperatureIntervalPerLengthUom has binding name 'eml22__TemperatureIntervalPerLengthUom' for type 'eml22:TemperatureIntervalPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom (-1235)

#endif

/* enum eml22__SpecificHeatCapacityUom has binding name 'eml22__SpecificHeatCapacityUom' for type 'eml22:SpecificHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom (-1234)

#endif

/* enum eml22__SolidAngleUom has binding name 'eml22__SolidAngleUom' for type 'eml22:SolidAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom (-1233)

#endif

/* enum eml22__SignalingEventPerTimeUom has binding name 'eml22__SignalingEventPerTimeUom' for type 'eml22:SignalingEventPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom (-1232)

#endif

/* enum eml22__SecondMomentOfAreaUom has binding name 'eml22__SecondMomentOfAreaUom' for type 'eml22:SecondMomentOfAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom (-1231)

#endif

/* enum eml22__ReluctanceUom has binding name 'eml22__ReluctanceUom' for type 'eml22:ReluctanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom (-1230)

#endif

/* enum eml22__ReciprocalVolumeUom has binding name 'eml22__ReciprocalVolumeUom' for type 'eml22:ReciprocalVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom (-1229)

#endif

/* enum eml22__ReciprocalTimeUom has binding name 'eml22__ReciprocalTimeUom' for type 'eml22:ReciprocalTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom (-1228)

#endif

/* enum eml22__ReciprocalPressureUom has binding name 'eml22__ReciprocalPressureUom' for type 'eml22:ReciprocalPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom (-1227)

#endif

/* enum eml22__ReciprocalMassUom has binding name 'eml22__ReciprocalMassUom' for type 'eml22:ReciprocalMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom (-1226)

#endif

/* enum eml22__ReciprocalMassTimeUom has binding name 'eml22__ReciprocalMassTimeUom' for type 'eml22:ReciprocalMassTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom (-1225)

#endif

/* enum eml22__ReciprocalLengthUom has binding name 'eml22__ReciprocalLengthUom' for type 'eml22:ReciprocalLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom (-1224)

#endif

/* enum eml22__ReciprocalForceUom has binding name 'eml22__ReciprocalForceUom' for type 'eml22:ReciprocalForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom (-1223)

#endif

/* enum eml22__ReciprocalElectricPotentialDifferenceUom has binding name 'eml22__ReciprocalElectricPotentialDifferenceUom' for type 'eml22:ReciprocalElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom (-1222)

#endif

/* enum eml22__ReciprocalAreaUom has binding name 'eml22__ReciprocalAreaUom' for type 'eml22:ReciprocalAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom (-1221)

#endif

/* enum eml22__RadiantIntensityUom has binding name 'eml22__RadiantIntensityUom' for type 'eml22:RadiantIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom (-1220)

#endif

/* enum eml22__RadianceUom has binding name 'eml22__RadianceUom' for type 'eml22:RadianceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom (-1219)

#endif

/* enum eml22__QuantityOfLightUom has binding name 'eml22__QuantityOfLightUom' for type 'eml22:QuantityOfLightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom (-1218)

#endif

/* enum eml22__PressureUom has binding name 'eml22__PressureUom' for type 'eml22:PressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom (-1217)

#endif

/* enum eml22__PressureTimePerVolumeUom has binding name 'eml22__PressureTimePerVolumeUom' for type 'eml22:PressureTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom (-1216)

#endif

/* enum eml22__PressureSquaredUom has binding name 'eml22__PressureSquaredUom' for type 'eml22:PressureSquaredUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom (-1215)

#endif

/* enum eml22__PressureSquaredPerForceTimePerAreaUom has binding name 'eml22__PressureSquaredPerForceTimePerAreaUom' for type 'eml22:PressureSquaredPerForceTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom (-1214)

#endif

/* enum eml22__PressurePerVolumeUom has binding name 'eml22__PressurePerVolumeUom' for type 'eml22:PressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom (-1213)

#endif

/* enum eml22__PressurePerTimeUom has binding name 'eml22__PressurePerTimeUom' for type 'eml22:PressurePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom (-1212)

#endif

/* enum eml22__PressurePerPressureUom has binding name 'eml22__PressurePerPressureUom' for type 'eml22:PressurePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom (-1211)

#endif

/* enum eml22__PowerUom has binding name 'eml22__PowerUom' for type 'eml22:PowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom (-1210)

#endif

/* enum eml22__PowerPerVolumeUom has binding name 'eml22__PowerPerVolumeUom' for type 'eml22:PowerPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom (-1209)

#endif

/* enum eml22__PowerPerPowerUom has binding name 'eml22__PowerPerPowerUom' for type 'eml22:PowerPerPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom (-1208)

#endif

/* enum eml22__PowerPerAreaUom has binding name 'eml22__PowerPerAreaUom' for type 'eml22:PowerPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom (-1207)

#endif

/* enum eml22__PotentialDifferencePerPowerDropUom has binding name 'eml22__PotentialDifferencePerPowerDropUom' for type 'eml22:PotentialDifferencePerPowerDropUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom (-1206)

#endif

/* enum eml22__PlaneAngleUom has binding name 'eml22__PlaneAngleUom' for type 'eml22:PlaneAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom (-1205)

#endif

/* enum eml22__PermittivityUom has binding name 'eml22__PermittivityUom' for type 'eml22:PermittivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom (-1204)

#endif

/* enum eml22__PermeabilityRockUom has binding name 'eml22__PermeabilityRockUom' for type 'eml22:PermeabilityRockUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom (-1203)

#endif

/* enum eml22__PermeabilityLengthUom has binding name 'eml22__PermeabilityLengthUom' for type 'eml22:PermeabilityLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom (-1202)

#endif

/* enum eml22__NormalizedPowerUom has binding name 'eml22__NormalizedPowerUom' for type 'eml22:NormalizedPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom (-1201)

#endif

/* enum eml22__MomentumUom has binding name 'eml22__MomentumUom' for type 'eml22:MomentumUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom (-1200)

#endif

/* enum eml22__MomentOfInertiaUom has binding name 'eml22__MomentOfInertiaUom' for type 'eml22:MomentOfInertiaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom (-1199)

#endif

/* enum eml22__MomentOfForceUom has binding name 'eml22__MomentOfForceUom' for type 'eml22:MomentOfForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom (-1198)

#endif

/* enum eml22__MolecularWeightUom has binding name 'eml22__MolecularWeightUom' for type 'eml22:MolecularWeightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom (-1197)

#endif

/* enum eml22__MolarVolumeUom has binding name 'eml22__MolarVolumeUom' for type 'eml22:MolarVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom (-1196)

#endif

/* enum eml22__MolarHeatCapacityUom has binding name 'eml22__MolarHeatCapacityUom' for type 'eml22:MolarHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom (-1195)

#endif

/* enum eml22__MolarEnergyUom has binding name 'eml22__MolarEnergyUom' for type 'eml22:MolarEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom (-1194)

#endif

/* enum eml22__MobilityUom has binding name 'eml22__MobilityUom' for type 'eml22:MobilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom (-1193)

#endif

/* enum eml22__MassUom has binding name 'eml22__MassUom' for type 'eml22:MassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUom (-1192)

#endif

/* enum eml22__MassPerVolumeUom has binding name 'eml22__MassPerVolumeUom' for type 'eml22:MassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom (-1191)

#endif

/* enum eml22__MassPerVolumePerTemperatureUom has binding name 'eml22__MassPerVolumePerTemperatureUom' for type 'eml22:MassPerVolumePerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom (-1190)

#endif

/* enum eml22__MassPerVolumePerPressureUom has binding name 'eml22__MassPerVolumePerPressureUom' for type 'eml22:MassPerVolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom (-1189)

#endif

/* enum eml22__MassPerVolumePerLengthUom has binding name 'eml22__MassPerVolumePerLengthUom' for type 'eml22:MassPerVolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom (-1188)

#endif

/* enum eml22__MassPerTimeUom has binding name 'eml22__MassPerTimeUom' for type 'eml22:MassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom (-1187)

#endif

/* enum eml22__MassPerTimePerLengthUom has binding name 'eml22__MassPerTimePerLengthUom' for type 'eml22:MassPerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom (-1186)

#endif

/* enum eml22__MassPerTimePerAreaUom has binding name 'eml22__MassPerTimePerAreaUom' for type 'eml22:MassPerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom (-1185)

#endif

/* enum eml22__MassPerMassUom has binding name 'eml22__MassPerMassUom' for type 'eml22:MassPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom (-1184)

#endif

/* enum eml22__MassPerLengthUom has binding name 'eml22__MassPerLengthUom' for type 'eml22:MassPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom (-1183)

#endif

/* enum eml22__MassPerEnergyUom has binding name 'eml22__MassPerEnergyUom' for type 'eml22:MassPerEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom (-1182)

#endif

/* enum eml22__MassPerAreaUom has binding name 'eml22__MassPerAreaUom' for type 'eml22:MassPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom (-1181)

#endif

/* enum eml22__MassLengthUom has binding name 'eml22__MassLengthUom' for type 'eml22:MassLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom (-1180)

#endif

/* enum eml22__MagneticVectorPotentialUom has binding name 'eml22__MagneticVectorPotentialUom' for type 'eml22:MagneticVectorPotentialUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom (-1179)

#endif

/* enum eml22__MagneticPermeabilityUom has binding name 'eml22__MagneticPermeabilityUom' for type 'eml22:MagneticPermeabilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom (-1178)

#endif

/* enum eml22__MagneticFluxUom has binding name 'eml22__MagneticFluxUom' for type 'eml22:MagneticFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom (-1177)

#endif

/* enum eml22__MagneticFluxDensityUom has binding name 'eml22__MagneticFluxDensityUom' for type 'eml22:MagneticFluxDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom (-1176)

#endif

/* enum eml22__MagneticFluxDensityPerLengthUom has binding name 'eml22__MagneticFluxDensityPerLengthUom' for type 'eml22:MagneticFluxDensityPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom (-1175)

#endif

/* enum eml22__MagneticFieldStrengthUom has binding name 'eml22__MagneticFieldStrengthUom' for type 'eml22:MagneticFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom (-1174)

#endif

/* enum eml22__MagneticDipoleMomentUom has binding name 'eml22__MagneticDipoleMomentUom' for type 'eml22:MagneticDipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom (-1173)

#endif

/* enum eml22__LuminousIntensityUom has binding name 'eml22__LuminousIntensityUom' for type 'eml22:LuminousIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom (-1172)

#endif

/* enum eml22__LuminousFluxUom has binding name 'eml22__LuminousFluxUom' for type 'eml22:LuminousFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom (-1171)

#endif

/* enum eml22__LuminousEfficacyUom has binding name 'eml22__LuminousEfficacyUom' for type 'eml22:LuminousEfficacyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom (-1170)

#endif

/* enum eml22__LuminanceUom has binding name 'eml22__LuminanceUom' for type 'eml22:LuminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom (-1169)

#endif

/* enum eml22__LogarithmicPowerRatioUom has binding name 'eml22__LogarithmicPowerRatioUom' for type 'eml22:LogarithmicPowerRatioUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom (-1168)

#endif

/* enum eml22__LogarithmicPowerRatioPerLengthUom has binding name 'eml22__LogarithmicPowerRatioPerLengthUom' for type 'eml22:LogarithmicPowerRatioPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom (-1167)

#endif

/* enum eml22__LinearThermalExpansionUom has binding name 'eml22__LinearThermalExpansionUom' for type 'eml22:LinearThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom (-1166)

#endif

/* enum eml22__LinearAccelerationUom has binding name 'eml22__LinearAccelerationUom' for type 'eml22:LinearAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom (-1165)

#endif

/* enum eml22__LightExposureUom has binding name 'eml22__LightExposureUom' for type 'eml22:LightExposureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom (-1164)

#endif

/* enum eml22__LengthUom has binding name 'eml22__LengthUom' for type 'eml22:LengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom (-1163)

#endif

/* enum eml22__LengthPerVolumeUom has binding name 'eml22__LengthPerVolumeUom' for type 'eml22:LengthPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom (-1162)

#endif

/* enum eml22__LengthPerTimeUom has binding name 'eml22__LengthPerTimeUom' for type 'eml22:LengthPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom (-1161)

#endif

/* enum eml22__LengthPerTemperatureUom has binding name 'eml22__LengthPerTemperatureUom' for type 'eml22:LengthPerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom (-1160)

#endif

/* enum eml22__LengthPerPressureUom has binding name 'eml22__LengthPerPressureUom' for type 'eml22:LengthPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom (-1159)

#endif

/* enum eml22__LengthPerMassUom has binding name 'eml22__LengthPerMassUom' for type 'eml22:LengthPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom (-1158)

#endif

/* enum eml22__LengthPerLengthUom has binding name 'eml22__LengthPerLengthUom' for type 'eml22:LengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom (-1157)

#endif

/* enum eml22__KinematicViscosityUom has binding name 'eml22__KinematicViscosityUom' for type 'eml22:KinematicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom (-1156)

#endif

/* enum eml22__IsothermalCompressibilityUom has binding name 'eml22__IsothermalCompressibilityUom' for type 'eml22:IsothermalCompressibilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom (-1155)

#endif

/* enum eml22__InductanceUom has binding name 'eml22__InductanceUom' for type 'eml22:InductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom (-1154)

#endif

/* enum eml22__IlluminanceUom has binding name 'eml22__IlluminanceUom' for type 'eml22:IlluminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom (-1153)

#endif

/* enum eml22__HeatTransferCoefficientUom has binding name 'eml22__HeatTransferCoefficientUom' for type 'eml22:HeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom (-1152)

#endif

/* enum eml22__HeatFlowRateUom has binding name 'eml22__HeatFlowRateUom' for type 'eml22:HeatFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom (-1151)

#endif

/* enum eml22__HeatCapacityUom has binding name 'eml22__HeatCapacityUom' for type 'eml22:HeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom (-1150)

#endif

/* enum eml22__FrequencyUom has binding name 'eml22__FrequencyUom' for type 'eml22:FrequencyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom (-1149)

#endif

/* enum eml22__FrequencyIntervalUom has binding name 'eml22__FrequencyIntervalUom' for type 'eml22:FrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom (-1148)

#endif

/* enum eml22__ForceUom has binding name 'eml22__ForceUom' for type 'eml22:ForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom (-1147)

#endif

/* enum eml22__ForcePerVolumeUom has binding name 'eml22__ForcePerVolumeUom' for type 'eml22:ForcePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom (-1146)

#endif

/* enum eml22__ForcePerLengthUom has binding name 'eml22__ForcePerLengthUom' for type 'eml22:ForcePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom (-1145)

#endif

/* enum eml22__ForcePerForceUom has binding name 'eml22__ForcePerForceUom' for type 'eml22:ForcePerForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom (-1144)

#endif

/* enum eml22__ForceLengthPerLengthUom has binding name 'eml22__ForceLengthPerLengthUom' for type 'eml22:ForceLengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom (-1143)

#endif

/* enum eml22__ForceAreaUom has binding name 'eml22__ForceAreaUom' for type 'eml22:ForceAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom (-1142)

#endif

/* enum eml22__EnergyUom has binding name 'eml22__EnergyUom' for type 'eml22:EnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom (-1141)

#endif

/* enum eml22__EnergyPerVolumeUom has binding name 'eml22__EnergyPerVolumeUom' for type 'eml22:EnergyPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom (-1140)

#endif

/* enum eml22__EnergyPerMassUom has binding name 'eml22__EnergyPerMassUom' for type 'eml22:EnergyPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom (-1139)

#endif

/* enum eml22__EnergyPerMassPerTimeUom has binding name 'eml22__EnergyPerMassPerTimeUom' for type 'eml22:EnergyPerMassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom (-1138)

#endif

/* enum eml22__EnergyPerLengthUom has binding name 'eml22__EnergyPerLengthUom' for type 'eml22:EnergyPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom (-1137)

#endif

/* enum eml22__EnergyPerAreaUom has binding name 'eml22__EnergyPerAreaUom' for type 'eml22:EnergyPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom (-1136)

#endif

/* enum eml22__EnergyLengthPerTimeAreaTemperatureUom has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureUom' for type 'eml22:EnergyLengthPerTimeAreaTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom (-1135)

#endif

/* enum eml22__EnergyLengthPerAreaUom has binding name 'eml22__EnergyLengthPerAreaUom' for type 'eml22:EnergyLengthPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom (-1134)

#endif

/* enum eml22__ElectromagneticMomentUom has binding name 'eml22__ElectromagneticMomentUom' for type 'eml22:ElectromagneticMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom (-1133)

#endif

/* enum eml22__ElectricResistanceUom has binding name 'eml22__ElectricResistanceUom' for type 'eml22:ElectricResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom (-1132)

#endif

/* enum eml22__ElectricResistancePerLengthUom has binding name 'eml22__ElectricResistancePerLengthUom' for type 'eml22:ElectricResistancePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom (-1131)

#endif

/* enum eml22__ElectricPotentialDifferenceUom has binding name 'eml22__ElectricPotentialDifferenceUom' for type 'eml22:ElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom (-1130)

#endif

/* enum eml22__ElectricFieldStrengthUom has binding name 'eml22__ElectricFieldStrengthUom' for type 'eml22:ElectricFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom (-1129)

#endif

/* enum eml22__ElectricCurrentUom has binding name 'eml22__ElectricCurrentUom' for type 'eml22:ElectricCurrentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom (-1128)

#endif

/* enum eml22__ElectricCurrentDensityUom has binding name 'eml22__ElectricCurrentDensityUom' for type 'eml22:ElectricCurrentDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom (-1127)

#endif

/* enum eml22__ElectricConductivityUom has binding name 'eml22__ElectricConductivityUom' for type 'eml22:ElectricConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom (-1126)

#endif

/* enum eml22__ElectricConductanceUom has binding name 'eml22__ElectricConductanceUom' for type 'eml22:ElectricConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom (-1125)

#endif

/* enum eml22__ElectricChargeUom has binding name 'eml22__ElectricChargeUom' for type 'eml22:ElectricChargeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom (-1124)

#endif

/* enum eml22__ElectricChargePerVolumeUom has binding name 'eml22__ElectricChargePerVolumeUom' for type 'eml22:ElectricChargePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom (-1123)

#endif

/* enum eml22__ElectricChargePerMassUom has binding name 'eml22__ElectricChargePerMassUom' for type 'eml22:ElectricChargePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom (-1122)

#endif

/* enum eml22__ElectricChargePerAreaUom has binding name 'eml22__ElectricChargePerAreaUom' for type 'eml22:ElectricChargePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom (-1121)

#endif

/* enum eml22__ElectricalResistivityUom has binding name 'eml22__ElectricalResistivityUom' for type 'eml22:ElectricalResistivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom (-1120)

#endif

/* enum eml22__DynamicViscosityUom has binding name 'eml22__DynamicViscosityUom' for type 'eml22:DynamicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom (-1119)

#endif

/* enum eml22__DoseEquivalentUom has binding name 'eml22__DoseEquivalentUom' for type 'eml22:DoseEquivalentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom (-1118)

#endif

/* enum eml22__DipoleMomentUom has binding name 'eml22__DipoleMomentUom' for type 'eml22:DipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom (-1117)

#endif

/* enum eml22__DimensionlessUom has binding name 'eml22__DimensionlessUom' for type 'eml22:DimensionlessUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom (-1116)

#endif

/* enum eml22__DigitalStorageUom has binding name 'eml22__DigitalStorageUom' for type 'eml22:DigitalStorageUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom (-1115)

#endif

/* enum eml22__DiffusiveTimeOfFlightUom has binding name 'eml22__DiffusiveTimeOfFlightUom' for type 'eml22:DiffusiveTimeOfFlightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom (-1114)

#endif

/* enum eml22__DiffusionCoefficientUom has binding name 'eml22__DiffusionCoefficientUom' for type 'eml22:DiffusionCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom (-1113)

#endif

/* enum eml22__DataTransferSpeedUom has binding name 'eml22__DataTransferSpeedUom' for type 'eml22:DataTransferSpeedUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom (-1112)

#endif

/* enum eml22__CationExchangeCapacityUom has binding name 'eml22__CationExchangeCapacityUom' for type 'eml22:CationExchangeCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom (-1111)

#endif

/* enum eml22__CapacitanceUom has binding name 'eml22__CapacitanceUom' for type 'eml22:CapacitanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom (-1110)

#endif

/* enum eml22__AttenuationPerFrequencyIntervalUom has binding name 'eml22__AttenuationPerFrequencyIntervalUom' for type 'eml22:AttenuationPerFrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom (-1109)

#endif

/* enum eml22__AreaUom has binding name 'eml22__AreaUom' for type 'eml22:AreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom (-1108)

#endif

/* enum eml22__AreaPerVolumeUom has binding name 'eml22__AreaPerVolumeUom' for type 'eml22:AreaPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom (-1107)

#endif

/* enum eml22__AreaPerTimeUom has binding name 'eml22__AreaPerTimeUom' for type 'eml22:AreaPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom (-1106)

#endif

/* enum eml22__AreaPerMassUom has binding name 'eml22__AreaPerMassUom' for type 'eml22:AreaPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom (-1105)

#endif

/* enum eml22__AreaPerCountUom has binding name 'eml22__AreaPerCountUom' for type 'eml22:AreaPerCountUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom (-1104)

#endif

/* enum eml22__AreaPerAreaUom has binding name 'eml22__AreaPerAreaUom' for type 'eml22:AreaPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom (-1103)

#endif

/* enum eml22__AreaPerAmountOfSubstanceUom has binding name 'eml22__AreaPerAmountOfSubstanceUom' for type 'eml22:AreaPerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom (-1102)

#endif

/* enum eml22__APINeutronUom has binding name 'eml22__APINeutronUom' for type 'eml22:APINeutronUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom (-1101)

#endif

/* enum eml22__APIGravityUom has binding name 'eml22__APIGravityUom' for type 'eml22:APIGravityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom (-1100)

#endif

/* enum eml22__APIGammaRayUom has binding name 'eml22__APIGammaRayUom' for type 'eml22:APIGammaRayUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom (-1099)

#endif

/* enum eml22__AngularVelocityUom has binding name 'eml22__AngularVelocityUom' for type 'eml22:AngularVelocityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom (-1098)

#endif

/* enum eml22__AngularAccelerationUom has binding name 'eml22__AngularAccelerationUom' for type 'eml22:AngularAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom (-1097)

#endif

/* enum eml22__AnglePerVolumeUom has binding name 'eml22__AnglePerVolumeUom' for type 'eml22:AnglePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom (-1096)

#endif

/* enum eml22__AnglePerLengthUom has binding name 'eml22__AnglePerLengthUom' for type 'eml22:AnglePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom (-1095)

#endif

/* enum eml22__AmountOfSubstanceUom has binding name 'eml22__AmountOfSubstanceUom' for type 'eml22:AmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom (-1094)

#endif

/* enum eml22__AmountOfSubstancePerVolumeUom has binding name 'eml22__AmountOfSubstancePerVolumeUom' for type 'eml22:AmountOfSubstancePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom (-1093)

#endif

/* enum eml22__AmountOfSubstancePerTimeUom has binding name 'eml22__AmountOfSubstancePerTimeUom' for type 'eml22:AmountOfSubstancePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom (-1092)

#endif

/* enum eml22__AmountOfSubstancePerTimePerAreaUom has binding name 'eml22__AmountOfSubstancePerTimePerAreaUom' for type 'eml22:AmountOfSubstancePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom (-1091)

#endif

/* enum eml22__AmountOfSubstancePerAreaUom has binding name 'eml22__AmountOfSubstancePerAreaUom' for type 'eml22:AmountOfSubstancePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom (-1090)

#endif

/* enum eml22__AmountOfSubstancePerAmountOfSubstanceUom has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceUom' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom (-1089)

#endif

/* enum eml22__ActivityOfRadioactivityUom has binding name 'eml22__ActivityOfRadioactivityUom' for type 'eml22:ActivityOfRadioactivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom (-1088)

#endif

/* enum eml22__AbsorbedDoseUom has binding name 'eml22__AbsorbedDoseUom' for type 'eml22:AbsorbedDoseUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom (-1087)

#endif

/* enum eml22__UnitOfMeasure has binding name 'eml22__UnitOfMeasure' for type 'eml22:UnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure (-1084)

#endif

/* enum eml22__LegacyUnitOfMeasure has binding name 'eml22__LegacyUnitOfMeasure' for type 'eml22:LegacyUnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure (-1083)

#endif

/* enum _xlink__actuate has binding name '_xlink__actuate' for type 'xlink:actuate' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__actuate
#define SOAP_TYPE_gsoap_eml2_2__xlink__actuate (-1075)

#endif

/* enum _xlink__show has binding name '_xlink__show' for type 'xlink:show' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__show
#define SOAP_TYPE_gsoap_eml2_2__xlink__show (-1074)

#endif

/* enum gml__AggregationType has binding name 'gml__AggregationType' for type 'gml:AggregationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AggregationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AggregationType (-1073)

#endif

/* _gco__nilReason has binding name '_gco__nilReason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__nilReason
#define SOAP_TYPE_gsoap_eml2_2__gco__nilReason (-2381)

#endif

/* _gco__Date has binding name '_gco__Date' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Date
#define SOAP_TYPE_gsoap_eml2_2__gco__Date (-2379)

#endif

/* _gco__CharacterString has binding name '_gco__CharacterString' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__CharacterString
#define SOAP_TYPE_gsoap_eml2_2__gco__CharacterString (-2376)

#endif

/* _gmd__DQ_USCOREEvaluationMethodTypeCode has binding name '_gmd__DQ_USCOREEvaluationMethodTypeCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode (-2375)

#endif

/* _gmd__CI_USCORESeries has binding name '_gmd__CI_USCORESeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries (-2374)

#endif

/* _gmd__CI_USCOREPresentationFormCode has binding name '_gmd__CI_USCOREPresentationFormCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode (-2373)

#endif

/* _gmd__CI_USCORERoleCode has binding name '_gmd__CI_USCORERoleCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode (-2372)

#endif

/* _gmd__CI_USCOREOnLineFunctionCode has binding name '_gmd__CI_USCOREOnLineFunctionCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode (-2371)

#endif

/* _gmd__URL has binding name '_gmd__URL' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__URL
#define SOAP_TYPE_gsoap_eml2_2__gmd__URL (-2370)

#endif

/* _gmd__CI_USCOREOnlineResource has binding name '_gmd__CI_USCOREOnlineResource' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource (-2369)

#endif

/* _gmd__CI_USCOREAddress has binding name '_gmd__CI_USCOREAddress' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress (-2368)

#endif

/* _gmd__CI_USCORETelephone has binding name '_gmd__CI_USCORETelephone' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone (-2367)

#endif

/* _gmd__CI_USCOREContact has binding name '_gmd__CI_USCOREContact' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact (-2366)

#endif

/* _gmd__CI_USCOREResponsibleParty has binding name '_gmd__CI_USCOREResponsibleParty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty (-2365)

#endif

/* _gmd__CI_USCOREDateTypeCode has binding name '_gmd__CI_USCOREDateTypeCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode (-2364)

#endif

/* _gmd__CI_USCOREDate has binding name '_gmd__CI_USCOREDate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate (-2363)

#endif

/* _gmd__CI_USCORECitation has binding name '_gmd__CI_USCORECitation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation (-2362)

#endif

/* _gmd__MD_USCOREIdentifier has binding name '_gmd__MD_USCOREIdentifier' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier
#define SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier (-2361)

#endif

/* _gmd__EX_USCOREVerticalExtent has binding name '_gmd__EX_USCOREVerticalExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent (-2360)

#endif

/* _gmd__EX_USCORETemporalExtent has binding name '_gmd__EX_USCORETemporalExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent (-2359)

#endif

/* _gmd__EX_USCOREExtent has binding name '_gmd__EX_USCOREExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent (-2358)

#endif

/* _xlink__title has binding name '_xlink__title' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__title
#define SOAP_TYPE_gsoap_eml2_2__xlink__title (-2357)

#endif

/* _xlink__arcrole has binding name '_xlink__arcrole' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__arcrole
#define SOAP_TYPE_gsoap_eml2_2__xlink__arcrole (-2356)

#endif

/* _xlink__role has binding name '_xlink__role' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__role
#define SOAP_TYPE_gsoap_eml2_2__xlink__role (-2355)

#endif

/* _xlink__href has binding name '_xlink__href' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__href
#define SOAP_TYPE_gsoap_eml2_2__xlink__href (-2354)

#endif

/* _gml__id has binding name '_gml__id' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__id
#define SOAP_TYPE_gsoap_eml2_2__gml__id (-2353)

#endif

/* _gml__VerticalDatum has binding name '_gml__VerticalDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum (-2352)

#endif

/* _gml__verticalDatum has binding name '_gml__verticalDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum (-2351)

#endif

/* _gml__VerticalCS has binding name '_gml__VerticalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS (-2350)

#endif

/* _gml__verticalCS has binding name '_gml__verticalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalCS (-2349)

#endif

/* _gml__VerticalCRS has binding name '_gml__VerticalCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS (-2348)

#endif

/* _gml__baseGeodeticCRS has binding name '_gml__baseGeodeticCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS (-2347)

#endif

/* _gml__targetCRS has binding name '_gml__targetCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__targetCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__targetCRS (-2346)

#endif

/* _gml__sourceCRS has binding name '_gml__sourceCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS (-2345)

#endif

/* _gml__operationVersion has binding name '_gml__operationVersion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__operationVersion
#define SOAP_TYPE_gsoap_eml2_2__gml__operationVersion (-2344)

#endif

/* _gml__conversion has binding name '_gml__conversion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__conversion
#define SOAP_TYPE_gsoap_eml2_2__gml__conversion (-2343)

#endif

/* _gml__ProjectedCRS has binding name '_gml__ProjectedCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS (-2342)

#endif

/* _gml__semiMajorAxis has binding name '_gml__semiMajorAxis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis (-2341)

#endif

/* _gml__Ellipsoid has binding name '_gml__Ellipsoid' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid (-2340)

#endif

/* _gml__ellipsoid has binding name '_gml__ellipsoid' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid (-2339)

#endif

/* _gml__greenwichLongitude has binding name '_gml__greenwichLongitude' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude
#define SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude (-2338)

#endif

/* _gml__PrimeMeridian has binding name '_gml__PrimeMeridian' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian (-2337)

#endif

/* _gml__primeMeridian has binding name '_gml__primeMeridian' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian (-2336)

#endif

/* _gml__realizationEpoch has binding name '_gml__realizationEpoch' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch
#define SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch (-2335)

#endif

/* _gml__anchorDefinition has binding name '_gml__anchorDefinition' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition
#define SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition (-2334)

#endif

/* _gml__GeodeticDatum has binding name '_gml__GeodeticDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum (-2333)

#endif

/* _gml__geodeticDatum has binding name '_gml__geodeticDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum (-2332)

#endif

/* _gml__SphericalCS has binding name '_gml__SphericalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS (-2331)

#endif

/* _gml__sphericalCS has binding name '_gml__sphericalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS (-2330)

#endif

/* _gml__CartesianCS has binding name '_gml__CartesianCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS (-2329)

#endif

/* _gml__cartesianCS has binding name '_gml__cartesianCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS (-2328)

#endif

/* _gml__rangeMeaning has binding name '_gml__rangeMeaning' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning
#define SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning (-2327)

#endif

/* _gml__axisDirection has binding name '_gml__axisDirection' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisDirection
#define SOAP_TYPE_gsoap_eml2_2__gml__axisDirection (-2324)

#endif

/* _gml__axisAbbrev has binding name '_gml__axisAbbrev' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev
#define SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev (-2323)

#endif

/* _gml__CoordinateSystemAxis has binding name '_gml__CoordinateSystemAxis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis (-2322)

#endif

/* _gml__axis has binding name '_gml__axis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axis
#define SOAP_TYPE_gsoap_eml2_2__gml__axis (-2321)

#endif

/* _gml__EllipsoidalCS has binding name '_gml__EllipsoidalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS (-2320)

#endif

/* _gml__ellipsoidalCS has binding name '_gml__ellipsoidalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS (-2319)

#endif

/* _gml__scope has binding name '_gml__scope' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__scope
#define SOAP_TYPE_gsoap_eml2_2__gml__scope (-2318)

#endif

/* _gml__Definition has binding name '_gml__Definition' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Definition
#define SOAP_TYPE_gsoap_eml2_2__gml__Definition (-2317)

#endif

/* _gml__remarks has binding name '_gml__remarks' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__remarks
#define SOAP_TYPE_gsoap_eml2_2__gml__remarks (-2316)

#endif

/* _gml__name has binding name '_gml__name' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__name
#define SOAP_TYPE_gsoap_eml2_2__gml__name (-2315)

#endif

/* _gml__identifier has binding name '_gml__identifier' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__identifier
#define SOAP_TYPE_gsoap_eml2_2__gml__identifier (-2314)

#endif

/* _gml__descriptionReference has binding name '_gml__descriptionReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference
#define SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference (-2313)

#endif

/* _gml__description has binding name '_gml__description' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__description
#define SOAP_TYPE_gsoap_eml2_2__gml__description (-2312)

#endif

/* _gml__GeodeticCRS has binding name '_gml__GeodeticCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS (-2311)

#endif

/* _eml22__GraphicalInformationSet has binding name '_eml22__GraphicalInformationSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet (-2310)

#endif

/* _eml22__DataAssuranceRecord has binding name '_eml22__DataAssuranceRecord' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord (-2309)

#endif

/* _eml22__TimeSeries has binding name '_eml22__TimeSeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries (-2308)

#endif

/* _eml22__PropertyKindDictionary has binding name '_eml22__PropertyKindDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary (-2307)

#endif

/* _eml22__PropertyKind has binding name '_eml22__PropertyKind' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind (-2306)

#endif

/* _eml22__ActivityTemplate has binding name '_eml22__ActivityTemplate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate (-2305)

#endif

/* _eml22__Activity has binding name '_eml22__Activity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2__eml22__Activity (-2304)

#endif

/* _eml22__EpcExternalPartReference has binding name '_eml22__EpcExternalPartReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference (-2303)

#endif

/* _eml22__AbstractDataObject has binding name '_eml22__AbstractDataObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject (-2302)

#endif

/* _eml22__AbstractContextualObject has binding name '_eml22__AbstractContextualObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject (-2301)

#endif

/* _witsml2__WellboreCompletion has binding name '_witsml2__WellboreCompletion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreCompletion (-2300)

#endif

/* _witsml2__WellCompletion has binding name '_witsml2__WellCompletion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellCompletion (-2299)

#endif

/* _witsml2__WellboreMarkerSet has binding name '_witsml2__WellboreMarkerSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarkerSet (-2298)

#endif

/* _witsml2__WellboreMarker has binding name '_witsml2__WellboreMarker' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreMarker (-2297)

#endif

/* _witsml2__MudLogReport has binding name '_witsml2__MudLogReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__MudLogReport (-2296)

#endif

/* _witsml2__part_USCOREMudLogReportInterval has binding name '_witsml2__part_USCOREMudLogReportInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREMudLogReportInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREMudLogReportInterval (-2295)

#endif

/* _witsml2__WellboreGeology has binding name '_witsml2__WellboreGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeology (-2294)

#endif

/* _witsml2__ShowEvaluationInterval has binding name '_witsml2__ShowEvaluationInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluationInterval (-2293)

#endif

/* _witsml2__ShowEvaluation has binding name '_witsml2__ShowEvaluation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ShowEvaluation (-2292)

#endif

/* _witsml2__InterpretedGeologyInterval has binding name '_witsml2__InterpretedGeologyInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeologyInterval (-2291)

#endif

/* _witsml2__InterpretedGeology has binding name '_witsml2__InterpretedGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_2__witsml2__InterpretedGeology (-2290)

#endif

/* _witsml2__CuttingsGeologyInterval has binding name '_witsml2__CuttingsGeologyInterval' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeologyInterval (-2289)

#endif

/* _witsml2__CuttingsGeology has binding name '_witsml2__CuttingsGeology' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CuttingsGeology (-2288)

#endif

/* _witsml2__SurveyProgram has binding name '_witsml2__SurveyProgram' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_2__witsml2__SurveyProgram (-2287)

#endif

/* _witsml2__StimPerforationCluster has binding name '_witsml2__StimPerforationCluster' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_2__witsml2__StimPerforationCluster (-2286)

#endif

/* _witsml2__StimJobStage has binding name '_witsml2__StimJobStage' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_2__witsml2__StimJobStage (-2285)

#endif

/* _witsml2__StimJob has binding name '_witsml2__StimJob' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_2__witsml2__StimJob (-2284)

#endif

/* _witsml2__Risk has binding name '_witsml2__Risk' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Risk (-2283)

#endif

/* _witsml2__RigUtilization has binding name '_witsml2__RigUtilization' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_2__witsml2__RigUtilization (-2282)

#endif

/* _witsml2__Rig has binding name '_witsml2__Rig' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Rig (-2281)

#endif

/* _witsml2__WeightingFunctionDictionary has binding name '_witsml2__WeightingFunctionDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunctionDictionary
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunctionDictionary (-2280)

#endif

/* _witsml2__WeightingFunction has binding name '_witsml2__WeightingFunction' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunction
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WeightingFunction (-2279)

#endif

/* _witsml2__ToolErrorModelDictionary has binding name '_witsml2__ToolErrorModelDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModelDictionary
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModelDictionary (-2278)

#endif

/* _witsml2__ToolErrorModel has binding name '_witsml2__ToolErrorModel' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ToolErrorModel (-2277)

#endif

/* _witsml2__ErrorTermDictionary has binding name '_witsml2__ErrorTermDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTermDictionary
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTermDictionary (-2276)

#endif

/* _witsml2__ErrorTerm has binding name '_witsml2__ErrorTerm' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTerm
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ErrorTerm (-2275)

#endif

/* _witsml2__Trajectory has binding name '_witsml2__Trajectory' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Trajectory (-2274)

#endif

/* _witsml2__part_USCORETrajectoryStation has binding name '_witsml2__part_USCORETrajectoryStation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCORETrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCORETrajectoryStation (-2273)

#endif

/* _witsml2__OpsReport has binding name '_witsml2__OpsReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__OpsReport (-2272)

#endif

/* _witsml2__DownholeComponent has binding name '_witsml2__DownholeComponent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_2__witsml2__DownholeComponent (-2271)

#endif

/* _witsml2__WellCMLedger has binding name '_witsml2__WellCMLedger' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellCMLedger (-2270)

#endif

/* _witsml2__DepthRegImage has binding name '_witsml2__DepthRegImage' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_2__witsml2__DepthRegImage (-2269)

#endif

/* _witsml2__Log has binding name '_witsml2__Log' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Log
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Log (-2268)

#endif

/* _witsml2__ChannelSet has binding name '_witsml2__ChannelSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_2__witsml2__ChannelSet (-2267)

#endif

/* _witsml2__Channel has binding name '_witsml2__Channel' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Channel (-2266)

#endif

/* _witsml2__WellboreGeometry has binding name '_witsml2__WellboreGeometry' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_2__witsml2__WellboreGeometry (-2265)

#endif

/* _witsml2__part_USCOREWellboreGeometrySection has binding name '_witsml2__part_USCOREWellboreGeometrySection' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREWellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_2__witsml2__part_USCOREWellboreGeometrySection (-2264)

#endif

/* _witsml2__CementJobEvaluation has binding name '_witsml2__CementJobEvaluation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CementJobEvaluation (-2263)

#endif

/* _witsml2__CementJob has binding name '_witsml2__CementJob' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_2__witsml2__CementJob (-2262)

#endif

/* _witsml2__Tubular has binding name '_witsml2__Tubular' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Tubular (-2261)

#endif

/* _witsml2__DrillReport has binding name '_witsml2__DrillReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__DrillReport (-2260)

#endif

/* _witsml2__FluidsReport has binding name '_witsml2__FluidsReport' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_2__witsml2__FluidsReport (-2259)

#endif

/* _witsml2__BhaRun has binding name '_witsml2__BhaRun' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_2__witsml2__BhaRun (-2258)

#endif

/* _witsml2__Well has binding name '_witsml2__Well' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Well
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Well (-2257)

#endif

/* _witsml2__Wellbore has binding name '_witsml2__Wellbore' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Wellbore (-2256)

#endif

/* _witsml2__Attachment has binding name '_witsml2__Attachment' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_2__witsml2__Attachment (-2255)

#endif

/* eml22__SectionNumber has binding name 'eml22__SectionNumber' for type 'eml22:SectionNumber' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SectionNumber
#define SOAP_TYPE_gsoap_eml2_2_eml22__SectionNumber (-1279)

#endif

/* eml22__PublicLandSurveySystemQuarterTownship has binding name 'eml22__PublicLandSurveySystemQuarterTownship' for type 'eml22:PublicLandSurveySystemQuarterTownship' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterTownship (-1278)

#endif

/* eml22__PublicLandSurveySystemQuarterSection has binding name 'eml22__PublicLandSurveySystemQuarterSection' for type 'eml22:PublicLandSurveySystemQuarterSection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystemQuarterSection (-1277)

#endif

/* eml22__TypeEnum has binding name 'eml22__TypeEnum' for type 'eml22:TypeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum (-1086)

#endif

/* eml22__TimeZone has binding name 'eml22__TimeZone' for type 'eml22:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone (-1085)

#endif

/* witsml2__AbstractUidString has binding name 'witsml2__AbstractUidString' for type 'witsml2:AbstractUidString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractUidString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractUidString (-1082)

#endif

/* eml22__UuidString has binding name 'eml22__UuidString' for type 'eml22:UuidString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UuidString
#define SOAP_TYPE_gsoap_eml2_2_eml22__UuidString (-1081)

#endif

/* eml22__UomEnum has binding name 'eml22__UomEnum' for type 'eml22:UomEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum (-1080)

#endif

/* eml22__String64 has binding name 'eml22__String64' for type 'eml22:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String64
#define SOAP_TYPE_gsoap_eml2_2_eml22__String64 (-1079)

#endif

/* eml22__String256 has binding name 'eml22__String256' for type 'eml22:String256' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String256
#define SOAP_TYPE_gsoap_eml2_2_eml22__String256 (-1078)

#endif

/* eml22__String2000 has binding name 'eml22__String2000' for type 'eml22:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_eml22__String2000 (-1077)

#endif

/* eml22__EnumExtensionPattern has binding name 'eml22__EnumExtensionPattern' for type 'eml22:EnumExtensionPattern' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern (-1076)

#endif

/* gml__UomURI has binding name 'gml__UomURI' for type 'gml:UomURI' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomURI
#define SOAP_TYPE_gsoap_eml2_2_gml__UomURI (-1072)

#endif

/* gml__UomSymbol has binding name 'gml__UomSymbol' for type 'gml:UomSymbol' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol
#define SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol (-1071)

#endif

/* eml22__AbstractString has binding name 'eml22__AbstractString' for type 'eml22:AbstractString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString (-1066)

#endif

/* gco__Date_USCOREType has binding name 'gco__Date_USCOREType' for type 'gco:Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType (-1058)

#endif

/* gml__UomIdentifier has binding name 'gml__UomIdentifier' for type 'gml:UomIdentifier' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier
#define SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier (-1057)

#endif

/* gml__NilReasonEnumeration has binding name 'gml__NilReasonEnumeration' for type 'gml:NilReasonEnumeration' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration (-1056)

#endif

/* gml__NilReasonType has binding name 'gml__NilReasonType' for type 'gml:NilReasonType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType (-1055)

#endif

/* eml22__VolumeUomWithLegacy has binding name 'eml22__VolumeUomWithLegacy' for type 'eml22:VolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy (-1054)

#endif

/* eml22__VolumePerVolumeUomWithLegacy has binding name 'eml22__VolumePerVolumeUomWithLegacy' for type 'eml22:VolumePerVolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy (-1053)

#endif

/* eml22__VolumePerTimeUomWithLegacy has binding name 'eml22__VolumePerTimeUomWithLegacy' for type 'eml22:VolumePerTimeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy (-1052)

#endif

/* eml22__VolumePerAreaUomWithLegacy has binding name 'eml22__VolumePerAreaUomWithLegacy' for type 'eml22:VolumePerAreaUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy (-1051)

#endif

/* eml22__PressureUomWithLegacy has binding name 'eml22__PressureUomWithLegacy' for type 'eml22:PressureUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy (-1050)

#endif

/* eml22__PressurePerVolumeUomWithLegacy has binding name 'eml22__PressurePerVolumeUomWithLegacy' for type 'eml22:PressurePerVolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy (-1049)

#endif

/* eml22__MassPerVolumeUomWithLegacy has binding name 'eml22__MassPerVolumeUomWithLegacy' for type 'eml22:MassPerVolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy (-1048)

#endif

/* eml22__VolumeUomExt has binding name 'eml22__VolumeUomExt' for type 'eml22:VolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt (-1047)

#endif

/* eml22__VolumetricThermalExpansionUomExt has binding name 'eml22__VolumetricThermalExpansionUomExt' for type 'eml22:VolumetricThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt (-1046)

#endif

/* eml22__VolumetricHeatTransferCoefficientUomExt has binding name 'eml22__VolumetricHeatTransferCoefficientUomExt' for type 'eml22:VolumetricHeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt (-1045)

#endif

/* eml22__VolumePerVolumeUomExt has binding name 'eml22__VolumePerVolumeUomExt' for type 'eml22:VolumePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt (-1044)

#endif

/* eml22__VolumePerTimeUomExt has binding name 'eml22__VolumePerTimeUomExt' for type 'eml22:VolumePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt (-1043)

#endif

/* eml22__VolumePerTimePerVolumeUomExt has binding name 'eml22__VolumePerTimePerVolumeUomExt' for type 'eml22:VolumePerTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt (-1042)

#endif

/* eml22__VolumePerTimePerTimeUomExt has binding name 'eml22__VolumePerTimePerTimeUomExt' for type 'eml22:VolumePerTimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt (-1041)

#endif

/* eml22__VolumePerTimePerPressureUomExt has binding name 'eml22__VolumePerTimePerPressureUomExt' for type 'eml22:VolumePerTimePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt (-1040)

#endif

/* eml22__VolumePerTimePerPressureLengthUomExt has binding name 'eml22__VolumePerTimePerPressureLengthUomExt' for type 'eml22:VolumePerTimePerPressureLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt (-1039)

#endif

/* eml22__VolumePerTimePerLengthUomExt has binding name 'eml22__VolumePerTimePerLengthUomExt' for type 'eml22:VolumePerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt (-1038)

#endif

/* eml22__VolumePerTimePerAreaUomExt has binding name 'eml22__VolumePerTimePerAreaUomExt' for type 'eml22:VolumePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt (-1037)

#endif

/* eml22__VolumePerTimeLengthUomExt has binding name 'eml22__VolumePerTimeLengthUomExt' for type 'eml22:VolumePerTimeLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt (-1036)

#endif

/* eml22__VolumePerRotationUomExt has binding name 'eml22__VolumePerRotationUomExt' for type 'eml22:VolumePerRotationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt (-1035)

#endif

/* eml22__VolumePerPressureUomExt has binding name 'eml22__VolumePerPressureUomExt' for type 'eml22:VolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt (-1034)

#endif

/* eml22__VolumePerMassUomExt has binding name 'eml22__VolumePerMassUomExt' for type 'eml22:VolumePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt (-1033)

#endif

/* eml22__VolumePerLengthUomExt has binding name 'eml22__VolumePerLengthUomExt' for type 'eml22:VolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt (-1032)

#endif

/* eml22__VolumePerAreaUomExt has binding name 'eml22__VolumePerAreaUomExt' for type 'eml22:VolumePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt (-1031)

#endif

/* eml22__VolumeFlowRatePerVolumeFlowRateUomExt has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateUomExt' for type 'eml22:VolumeFlowRatePerVolumeFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt (-1030)

#endif

/* eml22__VerticalCoordinateUomExt has binding name 'eml22__VerticalCoordinateUomExt' for type 'eml22:VerticalCoordinateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt (-1029)

#endif

/* eml22__TimeUomExt has binding name 'eml22__TimeUomExt' for type 'eml22:TimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt (-1028)

#endif

/* eml22__TimePerVolumeUomExt has binding name 'eml22__TimePerVolumeUomExt' for type 'eml22:TimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt (-1027)

#endif

/* eml22__TimePerTimeUomExt has binding name 'eml22__TimePerTimeUomExt' for type 'eml22:TimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt (-1026)

#endif

/* eml22__TimePerMassUomExt has binding name 'eml22__TimePerMassUomExt' for type 'eml22:TimePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt (-1025)

#endif

/* eml22__TimePerLengthUomExt has binding name 'eml22__TimePerLengthUomExt' for type 'eml22:TimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt (-1024)

#endif

/* eml22__ThermodynamicTemperatureUomExt has binding name 'eml22__ThermodynamicTemperatureUomExt' for type 'eml22:ThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt (-1023)

#endif

/* eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-1022)

#endif

/* eml22__ThermalResistanceUomExt has binding name 'eml22__ThermalResistanceUomExt' for type 'eml22:ThermalResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt (-1021)

#endif

/* eml22__ThermalInsulanceUomExt has binding name 'eml22__ThermalInsulanceUomExt' for type 'eml22:ThermalInsulanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt (-1020)

#endif

/* eml22__ThermalDiffusivityUomExt has binding name 'eml22__ThermalDiffusivityUomExt' for type 'eml22:ThermalDiffusivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt (-1019)

#endif

/* eml22__ThermalConductivityUomExt has binding name 'eml22__ThermalConductivityUomExt' for type 'eml22:ThermalConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt (-1018)

#endif

/* eml22__ThermalConductanceUomExt has binding name 'eml22__ThermalConductanceUomExt' for type 'eml22:ThermalConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt (-1017)

#endif

/* eml22__TemperatureIntervalUomExt has binding name 'eml22__TemperatureIntervalUomExt' for type 'eml22:TemperatureIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt (-1016)

#endif

/* eml22__TemperatureIntervalPerTimeUomExt has binding name 'eml22__TemperatureIntervalPerTimeUomExt' for type 'eml22:TemperatureIntervalPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt (-1015)

#endif

/* eml22__TemperatureIntervalPerPressureUomExt has binding name 'eml22__TemperatureIntervalPerPressureUomExt' for type 'eml22:TemperatureIntervalPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt (-1014)

#endif

/* eml22__TemperatureIntervalPerLengthUomExt has binding name 'eml22__TemperatureIntervalPerLengthUomExt' for type 'eml22:TemperatureIntervalPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt (-1013)

#endif

/* eml22__SpecificHeatCapacityUomExt has binding name 'eml22__SpecificHeatCapacityUomExt' for type 'eml22:SpecificHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt (-1012)

#endif

/* eml22__SolidAngleUomExt has binding name 'eml22__SolidAngleUomExt' for type 'eml22:SolidAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt (-1011)

#endif

/* eml22__SignalingEventPerTimeUomExt has binding name 'eml22__SignalingEventPerTimeUomExt' for type 'eml22:SignalingEventPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt (-1010)

#endif

/* eml22__SecondMomentOfAreaUomExt has binding name 'eml22__SecondMomentOfAreaUomExt' for type 'eml22:SecondMomentOfAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt (-1009)

#endif

/* eml22__ReluctanceUomExt has binding name 'eml22__ReluctanceUomExt' for type 'eml22:ReluctanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt (-1008)

#endif

/* eml22__ReciprocalVolumeUomExt has binding name 'eml22__ReciprocalVolumeUomExt' for type 'eml22:ReciprocalVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt (-1007)

#endif

/* eml22__ReciprocalTimeUomExt has binding name 'eml22__ReciprocalTimeUomExt' for type 'eml22:ReciprocalTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt (-1006)

#endif

/* eml22__ReciprocalPressureUomExt has binding name 'eml22__ReciprocalPressureUomExt' for type 'eml22:ReciprocalPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt (-1005)

#endif

/* eml22__ReciprocalMassUomExt has binding name 'eml22__ReciprocalMassUomExt' for type 'eml22:ReciprocalMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt (-1004)

#endif

/* eml22__ReciprocalMassTimeUomExt has binding name 'eml22__ReciprocalMassTimeUomExt' for type 'eml22:ReciprocalMassTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt (-1003)

#endif

/* eml22__ReciprocalLengthUomExt has binding name 'eml22__ReciprocalLengthUomExt' for type 'eml22:ReciprocalLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt (-1002)

#endif

/* eml22__ReciprocalForceUomExt has binding name 'eml22__ReciprocalForceUomExt' for type 'eml22:ReciprocalForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt (-1001)

#endif

/* eml22__ReciprocalElectricPotentialDifferenceUomExt has binding name 'eml22__ReciprocalElectricPotentialDifferenceUomExt' for type 'eml22:ReciprocalElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt (-1000)

#endif

/* eml22__ReciprocalAreaUomExt has binding name 'eml22__ReciprocalAreaUomExt' for type 'eml22:ReciprocalAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt (-999)

#endif

/* eml22__RadiantIntensityUomExt has binding name 'eml22__RadiantIntensityUomExt' for type 'eml22:RadiantIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt (-998)

#endif

/* eml22__RadianceUomExt has binding name 'eml22__RadianceUomExt' for type 'eml22:RadianceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt (-997)

#endif

/* eml22__QuantityOfLightUomExt has binding name 'eml22__QuantityOfLightUomExt' for type 'eml22:QuantityOfLightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt (-996)

#endif

/* eml22__PressureUomExt has binding name 'eml22__PressureUomExt' for type 'eml22:PressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt (-995)

#endif

/* eml22__PressureTimePerVolumeUomExt has binding name 'eml22__PressureTimePerVolumeUomExt' for type 'eml22:PressureTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt (-994)

#endif

/* eml22__PressureSquaredUomExt has binding name 'eml22__PressureSquaredUomExt' for type 'eml22:PressureSquaredUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt (-993)

#endif

/* eml22__PressureSquaredPerForceTimePerAreaUomExt has binding name 'eml22__PressureSquaredPerForceTimePerAreaUomExt' for type 'eml22:PressureSquaredPerForceTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt (-992)

#endif

/* eml22__PressurePerVolumeUomExt has binding name 'eml22__PressurePerVolumeUomExt' for type 'eml22:PressurePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt (-991)

#endif

/* eml22__PressurePerTimeUomExt has binding name 'eml22__PressurePerTimeUomExt' for type 'eml22:PressurePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt (-990)

#endif

/* eml22__PressurePerPressureUomExt has binding name 'eml22__PressurePerPressureUomExt' for type 'eml22:PressurePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt (-989)

#endif

/* eml22__PowerUomExt has binding name 'eml22__PowerUomExt' for type 'eml22:PowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt (-988)

#endif

/* eml22__PowerPerVolumeUomExt has binding name 'eml22__PowerPerVolumeUomExt' for type 'eml22:PowerPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt (-987)

#endif

/* eml22__PowerPerPowerUomExt has binding name 'eml22__PowerPerPowerUomExt' for type 'eml22:PowerPerPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt (-986)

#endif

/* eml22__PowerPerAreaUomExt has binding name 'eml22__PowerPerAreaUomExt' for type 'eml22:PowerPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt (-985)

#endif

/* eml22__PotentialDifferencePerPowerDropUomExt has binding name 'eml22__PotentialDifferencePerPowerDropUomExt' for type 'eml22:PotentialDifferencePerPowerDropUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt (-984)

#endif

/* eml22__PlaneAngleUomExt has binding name 'eml22__PlaneAngleUomExt' for type 'eml22:PlaneAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt (-983)

#endif

/* eml22__PermittivityUomExt has binding name 'eml22__PermittivityUomExt' for type 'eml22:PermittivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt (-982)

#endif

/* eml22__PermeabilityRockUomExt has binding name 'eml22__PermeabilityRockUomExt' for type 'eml22:PermeabilityRockUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt (-981)

#endif

/* eml22__PermeabilityLengthUomExt has binding name 'eml22__PermeabilityLengthUomExt' for type 'eml22:PermeabilityLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt (-980)

#endif

/* eml22__NormalizedPowerUomExt has binding name 'eml22__NormalizedPowerUomExt' for type 'eml22:NormalizedPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt (-979)

#endif

/* eml22__MomentumUomExt has binding name 'eml22__MomentumUomExt' for type 'eml22:MomentumUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt (-978)

#endif

/* eml22__MomentOfInertiaUomExt has binding name 'eml22__MomentOfInertiaUomExt' for type 'eml22:MomentOfInertiaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt (-977)

#endif

/* eml22__MomentOfForceUomExt has binding name 'eml22__MomentOfForceUomExt' for type 'eml22:MomentOfForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt (-976)

#endif

/* eml22__MolecularWeightUomExt has binding name 'eml22__MolecularWeightUomExt' for type 'eml22:MolecularWeightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt (-975)

#endif

/* eml22__MolarVolumeUomExt has binding name 'eml22__MolarVolumeUomExt' for type 'eml22:MolarVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt (-974)

#endif

/* eml22__MolarHeatCapacityUomExt has binding name 'eml22__MolarHeatCapacityUomExt' for type 'eml22:MolarHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt (-973)

#endif

/* eml22__MolarEnergyUomExt has binding name 'eml22__MolarEnergyUomExt' for type 'eml22:MolarEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt (-972)

#endif

/* eml22__MobilityUomExt has binding name 'eml22__MobilityUomExt' for type 'eml22:MobilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt (-971)

#endif

/* eml22__MassUomExt has binding name 'eml22__MassUomExt' for type 'eml22:MassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt (-970)

#endif

/* eml22__MassPerVolumeUomExt has binding name 'eml22__MassPerVolumeUomExt' for type 'eml22:MassPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt (-969)

#endif

/* eml22__MassPerVolumePerTemperatureUomExt has binding name 'eml22__MassPerVolumePerTemperatureUomExt' for type 'eml22:MassPerVolumePerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt (-968)

#endif

/* eml22__MassPerVolumePerPressureUomExt has binding name 'eml22__MassPerVolumePerPressureUomExt' for type 'eml22:MassPerVolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt (-967)

#endif

/* eml22__MassPerVolumePerLengthUomExt has binding name 'eml22__MassPerVolumePerLengthUomExt' for type 'eml22:MassPerVolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt (-966)

#endif

/* eml22__MassPerTimeUomExt has binding name 'eml22__MassPerTimeUomExt' for type 'eml22:MassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt (-965)

#endif

/* eml22__MassPerTimePerLengthUomExt has binding name 'eml22__MassPerTimePerLengthUomExt' for type 'eml22:MassPerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt (-964)

#endif

/* eml22__MassPerTimePerAreaUomExt has binding name 'eml22__MassPerTimePerAreaUomExt' for type 'eml22:MassPerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt (-963)

#endif

/* eml22__MassPerMassUomExt has binding name 'eml22__MassPerMassUomExt' for type 'eml22:MassPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt (-962)

#endif

/* eml22__MassPerLengthUomExt has binding name 'eml22__MassPerLengthUomExt' for type 'eml22:MassPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt (-961)

#endif

/* eml22__MassPerEnergyUomExt has binding name 'eml22__MassPerEnergyUomExt' for type 'eml22:MassPerEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt (-960)

#endif

/* eml22__MassPerAreaUomExt has binding name 'eml22__MassPerAreaUomExt' for type 'eml22:MassPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt (-959)

#endif

/* eml22__MassLengthUomExt has binding name 'eml22__MassLengthUomExt' for type 'eml22:MassLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt (-958)

#endif

/* eml22__MagneticVectorPotentialUomExt has binding name 'eml22__MagneticVectorPotentialUomExt' for type 'eml22:MagneticVectorPotentialUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt (-957)

#endif

/* eml22__MagneticPermeabilityUomExt has binding name 'eml22__MagneticPermeabilityUomExt' for type 'eml22:MagneticPermeabilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt (-956)

#endif

/* eml22__MagneticFluxUomExt has binding name 'eml22__MagneticFluxUomExt' for type 'eml22:MagneticFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt (-955)

#endif

/* eml22__MagneticFluxDensityUomExt has binding name 'eml22__MagneticFluxDensityUomExt' for type 'eml22:MagneticFluxDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt (-954)

#endif

/* eml22__MagneticFluxDensityPerLengthUomExt has binding name 'eml22__MagneticFluxDensityPerLengthUomExt' for type 'eml22:MagneticFluxDensityPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt (-953)

#endif

/* eml22__MagneticFieldStrengthUomExt has binding name 'eml22__MagneticFieldStrengthUomExt' for type 'eml22:MagneticFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt (-952)

#endif

/* eml22__MagneticDipoleMomentUomExt has binding name 'eml22__MagneticDipoleMomentUomExt' for type 'eml22:MagneticDipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt (-951)

#endif

/* eml22__LuminousIntensityUomExt has binding name 'eml22__LuminousIntensityUomExt' for type 'eml22:LuminousIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt (-950)

#endif

/* eml22__LuminousFluxUomExt has binding name 'eml22__LuminousFluxUomExt' for type 'eml22:LuminousFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt (-949)

#endif

/* eml22__LuminousEfficacyUomExt has binding name 'eml22__LuminousEfficacyUomExt' for type 'eml22:LuminousEfficacyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt (-948)

#endif

/* eml22__LuminanceUomExt has binding name 'eml22__LuminanceUomExt' for type 'eml22:LuminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt (-947)

#endif

/* eml22__LogarithmicPowerRatioUomExt has binding name 'eml22__LogarithmicPowerRatioUomExt' for type 'eml22:LogarithmicPowerRatioUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt (-946)

#endif

/* eml22__LogarithmicPowerRatioPerLengthUomExt has binding name 'eml22__LogarithmicPowerRatioPerLengthUomExt' for type 'eml22:LogarithmicPowerRatioPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt (-945)

#endif

/* eml22__LinearThermalExpansionUomExt has binding name 'eml22__LinearThermalExpansionUomExt' for type 'eml22:LinearThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt (-944)

#endif

/* eml22__LinearAccelerationUomExt has binding name 'eml22__LinearAccelerationUomExt' for type 'eml22:LinearAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt (-943)

#endif

/* eml22__LightExposureUomExt has binding name 'eml22__LightExposureUomExt' for type 'eml22:LightExposureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt (-942)

#endif

/* eml22__LengthUomExt has binding name 'eml22__LengthUomExt' for type 'eml22:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt (-941)

#endif

/* eml22__LengthPerVolumeUomExt has binding name 'eml22__LengthPerVolumeUomExt' for type 'eml22:LengthPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt (-940)

#endif

/* eml22__LengthPerTimeUomExt has binding name 'eml22__LengthPerTimeUomExt' for type 'eml22:LengthPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt (-939)

#endif

/* eml22__LengthPerTemperatureUomExt has binding name 'eml22__LengthPerTemperatureUomExt' for type 'eml22:LengthPerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt (-938)

#endif

/* eml22__LengthPerPressureUomExt has binding name 'eml22__LengthPerPressureUomExt' for type 'eml22:LengthPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt (-937)

#endif

/* eml22__LengthPerMassUomExt has binding name 'eml22__LengthPerMassUomExt' for type 'eml22:LengthPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt (-936)

#endif

/* eml22__LengthPerLengthUomExt has binding name 'eml22__LengthPerLengthUomExt' for type 'eml22:LengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt (-935)

#endif

/* eml22__KinematicViscosityUomExt has binding name 'eml22__KinematicViscosityUomExt' for type 'eml22:KinematicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt (-934)

#endif

/* eml22__IsothermalCompressibilityUomExt has binding name 'eml22__IsothermalCompressibilityUomExt' for type 'eml22:IsothermalCompressibilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt (-933)

#endif

/* eml22__InductanceUomExt has binding name 'eml22__InductanceUomExt' for type 'eml22:InductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt (-932)

#endif

/* eml22__IlluminanceUomExt has binding name 'eml22__IlluminanceUomExt' for type 'eml22:IlluminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt (-931)

#endif

/* eml22__HeatTransferCoefficientUomExt has binding name 'eml22__HeatTransferCoefficientUomExt' for type 'eml22:HeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt (-930)

#endif

/* eml22__HeatFlowRateUomExt has binding name 'eml22__HeatFlowRateUomExt' for type 'eml22:HeatFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt (-929)

#endif

/* eml22__HeatCapacityUomExt has binding name 'eml22__HeatCapacityUomExt' for type 'eml22:HeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt (-928)

#endif

/* eml22__FrequencyUomExt has binding name 'eml22__FrequencyUomExt' for type 'eml22:FrequencyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt (-927)

#endif

/* eml22__FrequencyIntervalUomExt has binding name 'eml22__FrequencyIntervalUomExt' for type 'eml22:FrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt (-926)

#endif

/* eml22__ForceUomExt has binding name 'eml22__ForceUomExt' for type 'eml22:ForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt (-925)

#endif

/* eml22__ForcePerVolumeUomExt has binding name 'eml22__ForcePerVolumeUomExt' for type 'eml22:ForcePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt (-924)

#endif

/* eml22__ForcePerLengthUomExt has binding name 'eml22__ForcePerLengthUomExt' for type 'eml22:ForcePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt (-923)

#endif

/* eml22__ForcePerForceUomExt has binding name 'eml22__ForcePerForceUomExt' for type 'eml22:ForcePerForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt (-922)

#endif

/* eml22__ForceLengthPerLengthUomExt has binding name 'eml22__ForceLengthPerLengthUomExt' for type 'eml22:ForceLengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt (-921)

#endif

/* eml22__ForceAreaUomExt has binding name 'eml22__ForceAreaUomExt' for type 'eml22:ForceAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt (-920)

#endif

/* eml22__EnergyUomExt has binding name 'eml22__EnergyUomExt' for type 'eml22:EnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt (-919)

#endif

/* eml22__EnergyPerVolumeUomExt has binding name 'eml22__EnergyPerVolumeUomExt' for type 'eml22:EnergyPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt (-918)

#endif

/* eml22__EnergyPerMassUomExt has binding name 'eml22__EnergyPerMassUomExt' for type 'eml22:EnergyPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt (-917)

#endif

/* eml22__EnergyPerMassPerTimeUomExt has binding name 'eml22__EnergyPerMassPerTimeUomExt' for type 'eml22:EnergyPerMassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt (-916)

#endif

/* eml22__EnergyPerLengthUomExt has binding name 'eml22__EnergyPerLengthUomExt' for type 'eml22:EnergyPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt (-915)

#endif

/* eml22__EnergyPerAreaUomExt has binding name 'eml22__EnergyPerAreaUomExt' for type 'eml22:EnergyPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt (-914)

#endif

/* eml22__EnergyLengthPerTimeAreaTemperatureUomExt has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureUomExt' for type 'eml22:EnergyLengthPerTimeAreaTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt (-913)

#endif

/* eml22__EnergyLengthPerAreaUomExt has binding name 'eml22__EnergyLengthPerAreaUomExt' for type 'eml22:EnergyLengthPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt (-912)

#endif

/* eml22__ElectromagneticMomentUomExt has binding name 'eml22__ElectromagneticMomentUomExt' for type 'eml22:ElectromagneticMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt (-911)

#endif

/* eml22__ElectricResistanceUomExt has binding name 'eml22__ElectricResistanceUomExt' for type 'eml22:ElectricResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt (-910)

#endif

/* eml22__ElectricResistancePerLengthUomExt has binding name 'eml22__ElectricResistancePerLengthUomExt' for type 'eml22:ElectricResistancePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt (-909)

#endif

/* eml22__ElectricPotentialDifferenceUomExt has binding name 'eml22__ElectricPotentialDifferenceUomExt' for type 'eml22:ElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt (-908)

#endif

/* eml22__ElectricFieldStrengthUomExt has binding name 'eml22__ElectricFieldStrengthUomExt' for type 'eml22:ElectricFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt (-907)

#endif

/* eml22__ElectricCurrentUomExt has binding name 'eml22__ElectricCurrentUomExt' for type 'eml22:ElectricCurrentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt (-906)

#endif

/* eml22__ElectricCurrentDensityUomExt has binding name 'eml22__ElectricCurrentDensityUomExt' for type 'eml22:ElectricCurrentDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt (-905)

#endif

/* eml22__ElectricConductivityUomExt has binding name 'eml22__ElectricConductivityUomExt' for type 'eml22:ElectricConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt (-904)

#endif

/* eml22__ElectricConductanceUomExt has binding name 'eml22__ElectricConductanceUomExt' for type 'eml22:ElectricConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt (-903)

#endif

/* eml22__ElectricChargeUomExt has binding name 'eml22__ElectricChargeUomExt' for type 'eml22:ElectricChargeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt (-902)

#endif

/* eml22__ElectricChargePerVolumeUomExt has binding name 'eml22__ElectricChargePerVolumeUomExt' for type 'eml22:ElectricChargePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt (-901)

#endif

/* eml22__ElectricChargePerMassUomExt has binding name 'eml22__ElectricChargePerMassUomExt' for type 'eml22:ElectricChargePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt (-900)

#endif

/* eml22__ElectricChargePerAreaUomExt has binding name 'eml22__ElectricChargePerAreaUomExt' for type 'eml22:ElectricChargePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt (-899)

#endif

/* eml22__ElectricalResistivityUomExt has binding name 'eml22__ElectricalResistivityUomExt' for type 'eml22:ElectricalResistivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt (-898)

#endif

/* eml22__DynamicViscosityUomExt has binding name 'eml22__DynamicViscosityUomExt' for type 'eml22:DynamicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt (-897)

#endif

/* eml22__DoseEquivalentUomExt has binding name 'eml22__DoseEquivalentUomExt' for type 'eml22:DoseEquivalentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt (-896)

#endif

/* eml22__DipoleMomentUomExt has binding name 'eml22__DipoleMomentUomExt' for type 'eml22:DipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt (-895)

#endif

/* eml22__DimensionlessUomExt has binding name 'eml22__DimensionlessUomExt' for type 'eml22:DimensionlessUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt (-894)

#endif

/* eml22__DigitalStorageUomExt has binding name 'eml22__DigitalStorageUomExt' for type 'eml22:DigitalStorageUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt (-893)

#endif

/* eml22__DiffusiveTimeOfFlightUomExt has binding name 'eml22__DiffusiveTimeOfFlightUomExt' for type 'eml22:DiffusiveTimeOfFlightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt (-892)

#endif

/* eml22__DiffusionCoefficientUomExt has binding name 'eml22__DiffusionCoefficientUomExt' for type 'eml22:DiffusionCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt (-891)

#endif

/* eml22__DataTransferSpeedUomExt has binding name 'eml22__DataTransferSpeedUomExt' for type 'eml22:DataTransferSpeedUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt (-890)

#endif

/* eml22__CationExchangeCapacityUomExt has binding name 'eml22__CationExchangeCapacityUomExt' for type 'eml22:CationExchangeCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt (-889)

#endif

/* eml22__CapacitanceUomExt has binding name 'eml22__CapacitanceUomExt' for type 'eml22:CapacitanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt (-888)

#endif

/* eml22__AttenuationPerFrequencyIntervalUomExt has binding name 'eml22__AttenuationPerFrequencyIntervalUomExt' for type 'eml22:AttenuationPerFrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt (-887)

#endif

/* eml22__AreaUomExt has binding name 'eml22__AreaUomExt' for type 'eml22:AreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt (-886)

#endif

/* eml22__AreaPerVolumeUomExt has binding name 'eml22__AreaPerVolumeUomExt' for type 'eml22:AreaPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt (-885)

#endif

/* eml22__AreaPerTimeUomExt has binding name 'eml22__AreaPerTimeUomExt' for type 'eml22:AreaPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt (-884)

#endif

/* eml22__AreaPerMassUomExt has binding name 'eml22__AreaPerMassUomExt' for type 'eml22:AreaPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt (-883)

#endif

/* eml22__AreaPerCountUomExt has binding name 'eml22__AreaPerCountUomExt' for type 'eml22:AreaPerCountUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt (-882)

#endif

/* eml22__AreaPerAreaUomExt has binding name 'eml22__AreaPerAreaUomExt' for type 'eml22:AreaPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt (-881)

#endif

/* eml22__AreaPerAmountOfSubstanceUomExt has binding name 'eml22__AreaPerAmountOfSubstanceUomExt' for type 'eml22:AreaPerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt (-880)

#endif

/* eml22__APINeutronUomExt has binding name 'eml22__APINeutronUomExt' for type 'eml22:APINeutronUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt (-879)

#endif

/* eml22__APIGravityUomExt has binding name 'eml22__APIGravityUomExt' for type 'eml22:APIGravityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt (-878)

#endif

/* eml22__APIGammaRayUomExt has binding name 'eml22__APIGammaRayUomExt' for type 'eml22:APIGammaRayUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt (-877)

#endif

/* eml22__AngularVelocityUomExt has binding name 'eml22__AngularVelocityUomExt' for type 'eml22:AngularVelocityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt (-876)

#endif

/* eml22__AngularAccelerationUomExt has binding name 'eml22__AngularAccelerationUomExt' for type 'eml22:AngularAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt (-875)

#endif

/* eml22__AnglePerVolumeUomExt has binding name 'eml22__AnglePerVolumeUomExt' for type 'eml22:AnglePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt (-874)

#endif

/* eml22__AnglePerLengthUomExt has binding name 'eml22__AnglePerLengthUomExt' for type 'eml22:AnglePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt (-873)

#endif

/* eml22__AmountOfSubstanceUomExt has binding name 'eml22__AmountOfSubstanceUomExt' for type 'eml22:AmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt (-872)

#endif

/* eml22__AmountOfSubstancePerVolumeUomExt has binding name 'eml22__AmountOfSubstancePerVolumeUomExt' for type 'eml22:AmountOfSubstancePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt (-871)

#endif

/* eml22__AmountOfSubstancePerTimeUomExt has binding name 'eml22__AmountOfSubstancePerTimeUomExt' for type 'eml22:AmountOfSubstancePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt (-870)

#endif

/* eml22__AmountOfSubstancePerTimePerAreaUomExt has binding name 'eml22__AmountOfSubstancePerTimePerAreaUomExt' for type 'eml22:AmountOfSubstancePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt (-869)

#endif

/* eml22__AmountOfSubstancePerAreaUomExt has binding name 'eml22__AmountOfSubstancePerAreaUomExt' for type 'eml22:AmountOfSubstancePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt (-868)

#endif

/* eml22__AmountOfSubstancePerAmountOfSubstanceUomExt has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceUomExt' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt (-867)

#endif

/* eml22__ActivityOfRadioactivityUomExt has binding name 'eml22__ActivityOfRadioactivityUomExt' for type 'eml22:ActivityOfRadioactivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt (-866)

#endif

/* eml22__AbsorbedDoseUomExt has binding name 'eml22__AbsorbedDoseUomExt' for type 'eml22:AbsorbedDoseUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt (-865)

#endif

/* eml22__UnitOfMeasureExt has binding name 'eml22__UnitOfMeasureExt' for type 'eml22:UnitOfMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt (-864)

#endif

/* eml22__ReferenceConditionExt has binding name 'eml22__ReferenceConditionExt' for type 'eml22:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt (-863)

#endif

/* eml22__QuantityClassKindExt has binding name 'eml22__QuantityClassKindExt' for type 'eml22:QuantityClassKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt (-862)

#endif

/* eml22__LithologyQualifierKindExt has binding name 'eml22__LithologyQualifierKindExt' for type 'eml22:LithologyQualifierKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt (-861)

#endif

/* eml22__LithologyKindExt has binding name 'eml22__LithologyKindExt' for type 'eml22:LithologyKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt (-860)

#endif

/* witsml2__ToolSubKindExt has binding name 'witsml2__ToolSubKindExt' for type 'witsml2:ToolSubKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKindExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolSubKindExt (-859)

#endif

/* witsml2__OperatingConditionExt has binding name 'witsml2__OperatingConditionExt' for type 'witsml2:OperatingConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConditionExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConditionExt (-858)

#endif

/* witsml2__CorrectionConsideredExt has binding name 'witsml2__CorrectionConsideredExt' for type 'witsml2:CorrectionConsideredExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsideredExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CorrectionConsideredExt (-857)

#endif

/* witsml2__EquipmentTypeExt has binding name 'witsml2__EquipmentTypeExt' for type 'witsml2:EquipmentTypeExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentTypeExt (-856)

#endif

/* gsr__SC_USCORECRS_USCOREPropertyType has binding name 'gsr__SC_USCORECRS_USCOREPropertyType' for type 'gsr:SC_CRS_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType (-855)

#endif

/* gco__DateTime_USCOREPropertyType has binding name 'gco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType (-854)

#endif

/* gco__CodeListValue_USCOREType has binding name 'gco__CodeListValue_USCOREType' for type 'gco:CodeListValue_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType (-853)

#endif

/* gco__Date_USCOREPropertyType has binding name 'gco__Date_USCOREPropertyType' for type 'gco:Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType (-852)

#endif

/* gco__Real_USCOREPropertyType has binding name 'gco__Real_USCOREPropertyType' for type 'gco:Real_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType (-851)

#endif

/* gco__Boolean_USCOREPropertyType has binding name 'gco__Boolean_USCOREPropertyType' for type 'gco:Boolean_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType (-850)

#endif

/* gco__CharacterString_USCOREPropertyType has binding name 'gco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType (-849)

#endif

/* gco__AbstractObject_USCOREType has binding name 'gco__AbstractObject_USCOREType' for type 'gco:AbstractObject_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType (-848)

#endif

/* gts__TM_USCOREPrimitive_USCOREPropertyType has binding name 'gts__TM_USCOREPrimitive_USCOREPropertyType' for type 'gts:TM_Primitive_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType (-847)

#endif

/* gmd__AbstractDQ_USCOREResult_USCOREType has binding name 'gmd__AbstractDQ_USCOREResult_USCOREType' for type 'gmd:AbstractDQ_Result_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType (-846)

#endif

/* gmd__DQ_USCOREResult_USCOREPropertyType has binding name 'gmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType (-845)

#endif

/* gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType has binding name 'gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType' for type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-844)

#endif

/* gmd__CI_USCORESeries_USCOREType has binding name 'gmd__CI_USCORESeries_USCOREType' for type 'gmd:CI_Series_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType (-843)

#endif

/* gmd__CI_USCORESeries_USCOREPropertyType has binding name 'gmd__CI_USCORESeries_USCOREPropertyType' for type 'gmd:CI_Series_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType (-842)

#endif

/* gmd__CI_USCOREPresentationFormCode_USCOREPropertyType has binding name 'gmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-841)

#endif

/* gmd__CI_USCORERoleCode_USCOREPropertyType has binding name 'gmd__CI_USCORERoleCode_USCOREPropertyType' for type 'gmd:CI_RoleCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType (-840)

#endif

/* gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType has binding name 'gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType' for type 'gmd:CI_OnLineFunctionCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-839)

#endif

/* gmd__URL_USCOREPropertyType has binding name 'gmd__URL_USCOREPropertyType' for type 'gmd:URL_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType (-838)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREType has binding name 'gmd__CI_USCOREOnlineResource_USCOREType' for type 'gmd:CI_OnlineResource_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType (-837)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREPropertyType has binding name 'gmd__CI_USCOREOnlineResource_USCOREPropertyType' for type 'gmd:CI_OnlineResource_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType (-836)

#endif

/* gmd__CI_USCOREAddress_USCOREType has binding name 'gmd__CI_USCOREAddress_USCOREType' for type 'gmd:CI_Address_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType (-835)

#endif

/* gmd__CI_USCOREAddress_USCOREPropertyType has binding name 'gmd__CI_USCOREAddress_USCOREPropertyType' for type 'gmd:CI_Address_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType (-834)

#endif

/* gmd__CI_USCORETelephone_USCOREType has binding name 'gmd__CI_USCORETelephone_USCOREType' for type 'gmd:CI_Telephone_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType (-833)

#endif

/* gmd__CI_USCORETelephone_USCOREPropertyType has binding name 'gmd__CI_USCORETelephone_USCOREPropertyType' for type 'gmd:CI_Telephone_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType (-832)

#endif

/* gmd__CI_USCOREContact_USCOREType has binding name 'gmd__CI_USCOREContact_USCOREType' for type 'gmd:CI_Contact_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType (-831)

#endif

/* gmd__CI_USCOREContact_USCOREPropertyType has binding name 'gmd__CI_USCOREContact_USCOREPropertyType' for type 'gmd:CI_Contact_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType (-830)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREType has binding name 'gmd__CI_USCOREResponsibleParty_USCOREType' for type 'gmd:CI_ResponsibleParty_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType (-829)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREPropertyType has binding name 'gmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType (-828)

#endif

/* gmd__CI_USCOREDateTypeCode_USCOREPropertyType has binding name 'gmd__CI_USCOREDateTypeCode_USCOREPropertyType' for type 'gmd:CI_DateTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType (-827)

#endif

/* gmd__CI_USCOREDate_USCOREType has binding name 'gmd__CI_USCOREDate_USCOREType' for type 'gmd:CI_Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType (-826)

#endif

/* gmd__CI_USCOREDate_USCOREPropertyType has binding name 'gmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType (-825)

#endif

/* gmd__CI_USCORECitation_USCOREType has binding name 'gmd__CI_USCORECitation_USCOREType' for type 'gmd:CI_Citation_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType (-824)

#endif

/* gmd__CI_USCORECitation_USCOREPropertyType has binding name 'gmd__CI_USCORECitation_USCOREPropertyType' for type 'gmd:CI_Citation_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType (-823)

#endif

/* gmd__MD_USCOREIdentifier_USCOREType has binding name 'gmd__MD_USCOREIdentifier_USCOREType' for type 'gmd:MD_Identifier_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType (-822)

#endif

/* gmd__MD_USCOREIdentifier_USCOREPropertyType has binding name 'gmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType (-821)

#endif

/* gmd__AbstractDQ_USCOREElement_USCOREType has binding name 'gmd__AbstractDQ_USCOREElement_USCOREType' for type 'gmd:AbstractDQ_Element_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType (-820)

#endif

/* gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType has binding name 'gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType' for type 'gmd:AbstractDQ_PositionalAccuracy_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType (-819)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREType has binding name 'gmd__EX_USCOREVerticalExtent_USCOREType' for type 'gmd:EX_VerticalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType (-818)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREPropertyType has binding name 'gmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType (-817)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREType has binding name 'gmd__EX_USCORETemporalExtent_USCOREType' for type 'gmd:EX_TemporalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType (-816)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREPropertyType has binding name 'gmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType (-815)

#endif

/* gmd__AbstractEX_USCOREGeographicExtent_USCOREType has binding name 'gmd__AbstractEX_USCOREGeographicExtent_USCOREType' for type 'gmd:AbstractEX_GeographicExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType (-814)

#endif

/* gmd__EX_USCOREGeographicExtent_USCOREPropertyType has binding name 'gmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType (-813)

#endif

/* gmd__EX_USCOREExtent_USCOREType has binding name 'gmd__EX_USCOREExtent_USCOREType' for type 'gmd:EX_Extent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType (-812)

#endif

/* _gml__coordinateOperationAccuracy has binding name '_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy (-811)

#endif

/* _gml__SecondDefiningParameter has binding name '_gml__SecondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter (-810)

#endif

/* _gml__secondDefiningParameter has binding name '_gml__secondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter (-809)

#endif

/* _gml__domainOfValidity has binding name '_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity (-808)

#endif

/* gml__VerticalDatumType has binding name 'gml__VerticalDatumType' for type 'gml:VerticalDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType (-807)

#endif

/* gml__VerticalDatumPropertyType has binding name 'gml__VerticalDatumPropertyType' for type 'gml:VerticalDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType (-806)

#endif

/* gml__VerticalCSType has binding name 'gml__VerticalCSType' for type 'gml:VerticalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType (-805)

#endif

/* gml__VerticalCSPropertyType has binding name 'gml__VerticalCSPropertyType' for type 'gml:VerticalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType (-804)

#endif

/* gml__VerticalCRSType has binding name 'gml__VerticalCRSType' for type 'gml:VerticalCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType (-803)

#endif

/* gml__GeodeticCRSPropertyType has binding name 'gml__GeodeticCRSPropertyType' for type 'gml:GeodeticCRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType (-802)

#endif

/* gml__CRSPropertyType has binding name 'gml__CRSPropertyType' for type 'gml:CRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType (-801)

#endif

/* gml__AbstractCoordinateOperationType has binding name 'gml__AbstractCoordinateOperationType' for type 'gml:AbstractCoordinateOperationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType (-800)

#endif

/* gml__AbstractGeneralConversionType has binding name 'gml__AbstractGeneralConversionType' for type 'gml:AbstractGeneralConversionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType (-799)

#endif

/* gml__GeneralConversionPropertyType has binding name 'gml__GeneralConversionPropertyType' for type 'gml:GeneralConversionPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType (-798)

#endif

/* gml__AbstractGeneralDerivedCRSType has binding name 'gml__AbstractGeneralDerivedCRSType' for type 'gml:AbstractGeneralDerivedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType (-797)

#endif

/* gml__ProjectedCRSType has binding name 'gml__ProjectedCRSType' for type 'gml:ProjectedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType (-796)

#endif

/* gml__LengthType has binding name 'gml__LengthType' for type 'gml:LengthType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__LengthType
#define SOAP_TYPE_gsoap_eml2_2_gml__LengthType (-795)

#endif

/* gml__EllipsoidType has binding name 'gml__EllipsoidType' for type 'gml:EllipsoidType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType (-794)

#endif

/* gml__EllipsoidPropertyType has binding name 'gml__EllipsoidPropertyType' for type 'gml:EllipsoidPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType (-793)

#endif

/* gml__MeasureType has binding name 'gml__MeasureType' for type 'gml:MeasureType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__MeasureType
#define SOAP_TYPE_gsoap_eml2_2_gml__MeasureType (-792)

#endif

/* gml__AngleType has binding name 'gml__AngleType' for type 'gml:AngleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AngleType
#define SOAP_TYPE_gsoap_eml2_2_gml__AngleType (-791)

#endif

/* gml__PrimeMeridianType has binding name 'gml__PrimeMeridianType' for type 'gml:PrimeMeridianType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType (-790)

#endif

/* gml__PrimeMeridianPropertyType has binding name 'gml__PrimeMeridianPropertyType' for type 'gml:PrimeMeridianPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType (-789)

#endif

/* gml__AbstractDatumType has binding name 'gml__AbstractDatumType' for type 'gml:AbstractDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType (-788)

#endif

/* gml__GeodeticDatumType has binding name 'gml__GeodeticDatumType' for type 'gml:GeodeticDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType (-787)

#endif

/* gml__GeodeticDatumPropertyType has binding name 'gml__GeodeticDatumPropertyType' for type 'gml:GeodeticDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType (-786)

#endif

/* gml__SphericalCSType has binding name 'gml__SphericalCSType' for type 'gml:SphericalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType (-785)

#endif

/* gml__SphericalCSPropertyType has binding name 'gml__SphericalCSPropertyType' for type 'gml:SphericalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType (-784)

#endif

/* gml__CartesianCSType has binding name 'gml__CartesianCSType' for type 'gml:CartesianCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType (-783)

#endif

/* gml__CartesianCSPropertyType has binding name 'gml__CartesianCSPropertyType' for type 'gml:CartesianCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType (-782)

#endif

/* gml__CoordinateSystemAxisType has binding name 'gml__CoordinateSystemAxisType' for type 'gml:CoordinateSystemAxisType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType (-781)

#endif

/* gml__CoordinateSystemAxisPropertyType has binding name 'gml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType (-780)

#endif

/* gml__AbstractCoordinateSystemType has binding name 'gml__AbstractCoordinateSystemType' for type 'gml:AbstractCoordinateSystemType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType (-779)

#endif

/* gml__EllipsoidalCSType has binding name 'gml__EllipsoidalCSType' for type 'gml:EllipsoidalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType (-778)

#endif

/* gml__EllipsoidalCSPropertyType has binding name 'gml__EllipsoidalCSPropertyType' for type 'gml:EllipsoidalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType (-777)

#endif

/* gml__TimePrimitivePropertyType has binding name 'gml__TimePrimitivePropertyType' for type 'gml:TimePrimitivePropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType (-776)

#endif

/* gml__RelatedTimeType has binding name 'gml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType (-775)

#endif

/* gml__AbstractTimeObjectType has binding name 'gml__AbstractTimeObjectType' for type 'gml:AbstractTimeObjectType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType (-774)

#endif

/* gml__AbstractTimePrimitiveType has binding name 'gml__AbstractTimePrimitiveType' for type 'gml:AbstractTimePrimitiveType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType (-773)

#endif

/* gml__CodeType has binding name 'gml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeType (-772)

#endif

/* gml__CodeWithAuthorityType has binding name 'gml__CodeWithAuthorityType' for type 'gml:CodeWithAuthorityType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType (-771)

#endif

/* gml__ReferenceType has binding name 'gml__ReferenceType' for type 'gml:ReferenceType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType (-770)

#endif

/* gml__StringOrRefType has binding name 'gml__StringOrRefType' for type 'gml:StringOrRefType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType (-769)

#endif

/* gml__AbstractGMLType has binding name 'gml__AbstractGMLType' for type 'gml:AbstractGMLType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType (-768)

#endif

/* gml__DefinitionBaseType has binding name 'gml__DefinitionBaseType' for type 'gml:DefinitionBaseType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType (-767)

#endif

/* gml__DefinitionType has binding name 'gml__DefinitionType' for type 'gml:DefinitionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType (-766)

#endif

/* gml__IdentifiedObjectType has binding name 'gml__IdentifiedObjectType' for type 'gml:IdentifiedObjectType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType (-765)

#endif

/* gml__AbstractCRSType has binding name 'gml__AbstractCRSType' for type 'gml:AbstractCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType (-764)

#endif

/* gml__GeodeticCRSType has binding name 'gml__GeodeticCRSType' for type 'gml:GeodeticCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType (-763)

#endif

/* eml22__GraphicalInformationSet has binding name 'eml22__GraphicalInformationSet' for type 'eml22:GraphicalInformationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet (-762)

#endif

/* eml22__AbstractGraphicalInformation has binding name 'eml22__AbstractGraphicalInformation' for type 'eml22:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation (-761)

#endif

/* eml22__IndexRange has binding name 'eml22__IndexRange' for type 'eml22:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange
#define SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange (-760)

#endif

/* eml22__FailingRule has binding name 'eml22__FailingRule' for type 'eml22:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule (-759)

#endif

/* eml22__DataAssuranceRecord has binding name 'eml22__DataAssuranceRecord' for type 'eml22:DataAssuranceRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord (-758)

#endif

/* eml22__VerticalWktCrs has binding name 'eml22__VerticalWktCrs' for type 'eml22:VerticalWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs (-757)

#endif

/* eml22__VerticalUnknownCrs has binding name 'eml22__VerticalUnknownCrs' for type 'eml22:VerticalUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs (-756)

#endif

/* eml22__VerticalLocalAuthorityCrs has binding name 'eml22__VerticalLocalAuthorityCrs' for type 'eml22:VerticalLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs (-755)

#endif

/* eml22__VerticalGmlCrs has binding name 'eml22__VerticalGmlCrs' for type 'eml22:VerticalGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs (-754)

#endif

/* eml22__VerticalEpsgCrs has binding name 'eml22__VerticalEpsgCrs' for type 'eml22:VerticalEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs (-753)

#endif

/* eml22__VerticalCrs has binding name 'eml22__VerticalCrs' for type 'eml22:VerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs (-752)

#endif

/* eml22__PublicLandSurveySystem has binding name 'eml22__PublicLandSurveySystem' for type 'eml22:PublicLandSurveySystem' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_2_eml22__PublicLandSurveySystem (-751)

#endif

/* eml22__ProjectedWktCrs has binding name 'eml22__ProjectedWktCrs' for type 'eml22:ProjectedWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs (-750)

#endif

/* eml22__ProjectedUnknownCrs has binding name 'eml22__ProjectedUnknownCrs' for type 'eml22:ProjectedUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs (-749)

#endif

/* eml22__ProjectedLocalAuthorityCrs has binding name 'eml22__ProjectedLocalAuthorityCrs' for type 'eml22:ProjectedLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs (-748)

#endif

/* eml22__ProjectedGmlCrs has binding name 'eml22__ProjectedGmlCrs' for type 'eml22:ProjectedGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs (-747)

#endif

/* eml22__ProjectedEpsgCrs has binding name 'eml22__ProjectedEpsgCrs' for type 'eml22:ProjectedEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs (-746)

#endif

/* eml22__ProjectedCrs has binding name 'eml22__ProjectedCrs' for type 'eml22:ProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs (-745)

#endif

/* eml22__GeodeticWktCrs has binding name 'eml22__GeodeticWktCrs' for type 'eml22:GeodeticWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs (-744)

#endif

/* eml22__GeodeticUnknownCrs has binding name 'eml22__GeodeticUnknownCrs' for type 'eml22:GeodeticUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs (-743)

#endif

/* eml22__GeodeticLocalAuthorityCrs has binding name 'eml22__GeodeticLocalAuthorityCrs' for type 'eml22:GeodeticLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs (-742)

#endif

/* eml22__GeodeticGmlCrs has binding name 'eml22__GeodeticGmlCrs' for type 'eml22:GeodeticGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs (-741)

#endif

/* eml22__GeodeticEpsgCrs has binding name 'eml22__GeodeticEpsgCrs' for type 'eml22:GeodeticEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs (-740)

#endif

/* eml22__GeodeticCrs has binding name 'eml22__GeodeticCrs' for type 'eml22:GeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs (-739)

#endif

/* eml22__DistanceNorthSouth has binding name 'eml22__DistanceNorthSouth' for type 'eml22:DistanceNorthSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_2_eml22__DistanceNorthSouth (-738)

#endif

/* eml22__DistanceEastWest has binding name 'eml22__DistanceEastWest' for type 'eml22:DistanceEastWest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_2_eml22__DistanceEastWest (-737)

#endif

/* eml22__AbstractVerticalCrs has binding name 'eml22__AbstractVerticalCrs' for type 'eml22:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs (-736)

#endif

/* eml22__AbstractProjectedCrs has binding name 'eml22__AbstractProjectedCrs' for type 'eml22:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs (-735)

#endif

/* eml22__AbstractGeodeticCrs has binding name 'eml22__AbstractGeodeticCrs' for type 'eml22:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs (-734)

#endif

/* eml22__VolumeValue has binding name 'eml22__VolumeValue' for type 'eml22:VolumeValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue (-733)

#endif

/* eml22__TemperaturePressure has binding name 'eml22__TemperaturePressure' for type 'eml22:TemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure (-732)

#endif

/* eml22__RelativePressure has binding name 'eml22__RelativePressure' for type 'eml22:RelativePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure (-731)

#endif

/* eml22__ReferenceTemperaturePressure has binding name 'eml22__ReferenceTemperaturePressure' for type 'eml22:ReferenceTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure (-730)

#endif

/* eml22__ReferencePressure has binding name 'eml22__ReferencePressure' for type 'eml22:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure (-729)

#endif

/* eml22__PressureValue has binding name 'eml22__PressureValue' for type 'eml22:PressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue (-728)

#endif

/* eml22__GaugePressure has binding name 'eml22__GaugePressure' for type 'eml22:GaugePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure (-727)

#endif

/* eml22__FlowRateValue has binding name 'eml22__FlowRateValue' for type 'eml22:FlowRateValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue (-726)

#endif

/* eml22__DensityValue has binding name 'eml22__DensityValue' for type 'eml22:DensityValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue (-725)

#endif

/* eml22__AbstractTemperaturePressure has binding name 'eml22__AbstractTemperaturePressure' for type 'eml22:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure (-724)

#endif

/* eml22__AbstractPressureValue has binding name 'eml22__AbstractPressureValue' for type 'eml22:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue (-723)

#endif

/* eml22__AbsolutePressure has binding name 'eml22__AbsolutePressure' for type 'eml22:AbsolutePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure (-722)

#endif

/* eml22__TimeSeriesParentage has binding name 'eml22__TimeSeriesParentage' for type 'eml22:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage (-721)

#endif

/* eml22__TimeSeries has binding name 'eml22__TimeSeries' for type 'eml22:TimeSeries' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries (-720)

#endif

/* eml22__TimeIndices has binding name 'eml22__TimeIndices' for type 'eml22:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices (-719)

#endif

/* eml22__TimeIndex has binding name 'eml22__TimeIndex' for type 'eml22:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex (-718)

#endif

/* eml22__PropertyKindDictionary has binding name 'eml22__PropertyKindDictionary' for type 'eml22:PropertyKindDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary (-717)

#endif

/* eml22__PropertyKind has binding name 'eml22__PropertyKind' for type 'eml22:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind (-716)

#endif

/* eml22__GeologicTime has binding name 'eml22__GeologicTime' for type 'eml22:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime (-715)

#endif

/* eml22__TimeIndexParameterKey has binding name 'eml22__TimeIndexParameterKey' for type 'eml22:TimeIndexParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey (-714)

#endif

/* eml22__TimeIndexParameter has binding name 'eml22__TimeIndexParameter' for type 'eml22:TimeIndexParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter (-713)

#endif

/* eml22__StringParameter has binding name 'eml22__StringParameter' for type 'eml22:StringParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter (-712)

#endif

/* eml22__ParameterTemplate has binding name 'eml22__ParameterTemplate' for type 'eml22:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate (-711)

#endif

/* eml22__ObjectParameterKey has binding name 'eml22__ObjectParameterKey' for type 'eml22:ObjectParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey (-710)

#endif

/* eml22__IntegerQuantityParameter has binding name 'eml22__IntegerQuantityParameter' for type 'eml22:IntegerQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter (-709)

#endif

/* eml22__DoubleQuantityParameter has binding name 'eml22__DoubleQuantityParameter' for type 'eml22:DoubleQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter (-708)

#endif

/* eml22__DataObjectParameter has binding name 'eml22__DataObjectParameter' for type 'eml22:DataObjectParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter (-707)

#endif

/* eml22__ActivityTemplate has binding name 'eml22__ActivityTemplate' for type 'eml22:ActivityTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate (-706)

#endif

/* eml22__Activity has binding name 'eml22__Activity' for type 'eml22:Activity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2_eml22__Activity (-705)

#endif

/* eml22__AbstractParameterKey has binding name 'eml22__AbstractParameterKey' for type 'eml22:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey (-704)

#endif

/* eml22__AbstractActivityParameter has binding name 'eml22__AbstractActivityParameter' for type 'eml22:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter (-703)

#endif

/* eml22__ExternalDatasetPart has binding name 'eml22__ExternalDatasetPart' for type 'eml22:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart (-702)

#endif

/* eml22__ExternalDataset has binding name 'eml22__ExternalDataset' for type 'eml22:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset (-701)

#endif

/* eml22__EpcExternalPartReference has binding name 'eml22__EpcExternalPartReference' for type 'eml22:EpcExternalPartReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference (-700)

#endif

/* eml22__DataObjectReference has binding name 'eml22__DataObjectReference' for type 'eml22:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference (-699)

#endif

/* eml22__VolumetricThermalExpansionMeasureExt has binding name 'eml22__VolumetricThermalExpansionMeasureExt' for type 'eml22:VolumetricThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt (-698)

#endif

/* eml22__VolumetricThermalExpansionMeasure has binding name 'eml22__VolumetricThermalExpansionMeasure' for type 'eml22:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure (-697)

#endif

/* eml22__VolumetricHeatTransferCoefficientMeasureExt has binding name 'eml22__VolumetricHeatTransferCoefficientMeasureExt' for type 'eml22:VolumetricHeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt (-696)

#endif

/* eml22__VolumetricHeatTransferCoefficientMeasure has binding name 'eml22__VolumetricHeatTransferCoefficientMeasure' for type 'eml22:VolumetricHeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure (-695)

#endif

/* eml22__VolumePerVolumeMeasureExt has binding name 'eml22__VolumePerVolumeMeasureExt' for type 'eml22:VolumePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt (-694)

#endif

/* eml22__VolumePerVolumeMeasure has binding name 'eml22__VolumePerVolumeMeasure' for type 'eml22:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure (-693)

#endif

/* eml22__VolumePerTimePerVolumeMeasureExt has binding name 'eml22__VolumePerTimePerVolumeMeasureExt' for type 'eml22:VolumePerTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt (-692)

#endif

/* eml22__VolumePerTimePerVolumeMeasure has binding name 'eml22__VolumePerTimePerVolumeMeasure' for type 'eml22:VolumePerTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure (-691)

#endif

/* eml22__VolumePerTimePerTimeMeasureExt has binding name 'eml22__VolumePerTimePerTimeMeasureExt' for type 'eml22:VolumePerTimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt (-690)

#endif

/* eml22__VolumePerTimePerTimeMeasure has binding name 'eml22__VolumePerTimePerTimeMeasure' for type 'eml22:VolumePerTimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure (-689)

#endif

/* eml22__VolumePerTimePerPressureMeasureExt has binding name 'eml22__VolumePerTimePerPressureMeasureExt' for type 'eml22:VolumePerTimePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt (-688)

#endif

/* eml22__VolumePerTimePerPressureMeasure has binding name 'eml22__VolumePerTimePerPressureMeasure' for type 'eml22:VolumePerTimePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure (-687)

#endif

/* eml22__VolumePerTimePerPressureLengthMeasureExt has binding name 'eml22__VolumePerTimePerPressureLengthMeasureExt' for type 'eml22:VolumePerTimePerPressureLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt (-686)

#endif

/* eml22__VolumePerTimePerPressureLengthMeasure has binding name 'eml22__VolumePerTimePerPressureLengthMeasure' for type 'eml22:VolumePerTimePerPressureLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure (-685)

#endif

/* eml22__VolumePerTimePerLengthMeasureExt has binding name 'eml22__VolumePerTimePerLengthMeasureExt' for type 'eml22:VolumePerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt (-684)

#endif

/* eml22__VolumePerTimePerLengthMeasure has binding name 'eml22__VolumePerTimePerLengthMeasure' for type 'eml22:VolumePerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure (-683)

#endif

/* eml22__VolumePerTimePerAreaMeasureExt has binding name 'eml22__VolumePerTimePerAreaMeasureExt' for type 'eml22:VolumePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt (-682)

#endif

/* eml22__VolumePerTimePerAreaMeasure has binding name 'eml22__VolumePerTimePerAreaMeasure' for type 'eml22:VolumePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure (-681)

#endif

/* eml22__VolumePerTimeMeasureExt has binding name 'eml22__VolumePerTimeMeasureExt' for type 'eml22:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt (-680)

#endif

/* eml22__VolumePerTimeMeasure has binding name 'eml22__VolumePerTimeMeasure' for type 'eml22:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure (-679)

#endif

/* eml22__VolumePerTimeLengthMeasureExt has binding name 'eml22__VolumePerTimeLengthMeasureExt' for type 'eml22:VolumePerTimeLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt (-678)

#endif

/* eml22__VolumePerTimeLengthMeasure has binding name 'eml22__VolumePerTimeLengthMeasure' for type 'eml22:VolumePerTimeLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure (-677)

#endif

/* eml22__VolumePerRotationMeasureExt has binding name 'eml22__VolumePerRotationMeasureExt' for type 'eml22:VolumePerRotationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt (-676)

#endif

/* eml22__VolumePerRotationMeasure has binding name 'eml22__VolumePerRotationMeasure' for type 'eml22:VolumePerRotationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure (-675)

#endif

/* eml22__VolumePerPressureMeasureExt has binding name 'eml22__VolumePerPressureMeasureExt' for type 'eml22:VolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt (-674)

#endif

/* eml22__VolumePerPressureMeasure has binding name 'eml22__VolumePerPressureMeasure' for type 'eml22:VolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure (-673)

#endif

/* eml22__VolumePerMassMeasureExt has binding name 'eml22__VolumePerMassMeasureExt' for type 'eml22:VolumePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt (-672)

#endif

/* eml22__VolumePerMassMeasure has binding name 'eml22__VolumePerMassMeasure' for type 'eml22:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure (-671)

#endif

/* eml22__VolumePerLengthMeasureExt has binding name 'eml22__VolumePerLengthMeasureExt' for type 'eml22:VolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt (-670)

#endif

/* eml22__VolumePerLengthMeasure has binding name 'eml22__VolumePerLengthMeasure' for type 'eml22:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure (-669)

#endif

/* eml22__VolumePerAreaMeasureExt has binding name 'eml22__VolumePerAreaMeasureExt' for type 'eml22:VolumePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt (-668)

#endif

/* eml22__VolumePerAreaMeasure has binding name 'eml22__VolumePerAreaMeasure' for type 'eml22:VolumePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure (-667)

#endif

/* eml22__VolumeMeasureExt has binding name 'eml22__VolumeMeasureExt' for type 'eml22:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt (-666)

#endif

/* eml22__VolumeMeasure has binding name 'eml22__VolumeMeasure' for type 'eml22:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure (-665)

#endif

/* eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt' for type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt (-664)

#endif

/* eml22__VolumeFlowRatePerVolumeFlowRateMeasure has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateMeasure' for type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure (-663)

#endif

/* eml22__VerticalCoordinateMeasureExt has binding name 'eml22__VerticalCoordinateMeasureExt' for type 'eml22:VerticalCoordinateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt (-662)

#endif

/* eml22__VerticalCoordinateMeasure has binding name 'eml22__VerticalCoordinateMeasure' for type 'eml22:VerticalCoordinateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure (-661)

#endif

/* eml22__UnitlessMeasure has binding name 'eml22__UnitlessMeasure' for type 'eml22:UnitlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure (-660)

#endif

/* eml22__TimePerVolumeMeasureExt has binding name 'eml22__TimePerVolumeMeasureExt' for type 'eml22:TimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt (-659)

#endif

/* eml22__TimePerVolumeMeasure has binding name 'eml22__TimePerVolumeMeasure' for type 'eml22:TimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure (-658)

#endif

/* eml22__TimePerTimeMeasureExt has binding name 'eml22__TimePerTimeMeasureExt' for type 'eml22:TimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt (-657)

#endif

/* eml22__TimePerTimeMeasure has binding name 'eml22__TimePerTimeMeasure' for type 'eml22:TimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure (-656)

#endif

/* eml22__TimePerMassMeasureExt has binding name 'eml22__TimePerMassMeasureExt' for type 'eml22:TimePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt (-655)

#endif

/* eml22__TimePerMassMeasure has binding name 'eml22__TimePerMassMeasure' for type 'eml22:TimePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure (-654)

#endif

/* eml22__TimePerLengthMeasureExt has binding name 'eml22__TimePerLengthMeasureExt' for type 'eml22:TimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt (-653)

#endif

/* eml22__TimePerLengthMeasure has binding name 'eml22__TimePerLengthMeasure' for type 'eml22:TimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure (-652)

#endif

/* eml22__TimeMeasureExt has binding name 'eml22__TimeMeasureExt' for type 'eml22:TimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt (-651)

#endif

/* eml22__TimeMeasure has binding name 'eml22__TimeMeasure' for type 'eml22:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure (-650)

#endif

/* eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-649)

#endif

/* eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-648)

#endif

/* eml22__ThermodynamicTemperatureMeasureExt has binding name 'eml22__ThermodynamicTemperatureMeasureExt' for type 'eml22:ThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt (-647)

#endif

/* eml22__ThermodynamicTemperatureMeasure has binding name 'eml22__ThermodynamicTemperatureMeasure' for type 'eml22:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure (-646)

#endif

/* eml22__ThermalResistanceMeasureExt has binding name 'eml22__ThermalResistanceMeasureExt' for type 'eml22:ThermalResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt (-645)

#endif

/* eml22__ThermalResistanceMeasure has binding name 'eml22__ThermalResistanceMeasure' for type 'eml22:ThermalResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure (-644)

#endif

/* eml22__ThermalInsulanceMeasureExt has binding name 'eml22__ThermalInsulanceMeasureExt' for type 'eml22:ThermalInsulanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt (-643)

#endif

/* eml22__ThermalInsulanceMeasure has binding name 'eml22__ThermalInsulanceMeasure' for type 'eml22:ThermalInsulanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure (-642)

#endif

/* eml22__ThermalDiffusivityMeasureExt has binding name 'eml22__ThermalDiffusivityMeasureExt' for type 'eml22:ThermalDiffusivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt (-641)

#endif

/* eml22__ThermalDiffusivityMeasure has binding name 'eml22__ThermalDiffusivityMeasure' for type 'eml22:ThermalDiffusivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure (-640)

#endif

/* eml22__ThermalConductivityMeasureExt has binding name 'eml22__ThermalConductivityMeasureExt' for type 'eml22:ThermalConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt (-639)

#endif

/* eml22__ThermalConductivityMeasure has binding name 'eml22__ThermalConductivityMeasure' for type 'eml22:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure (-638)

#endif

/* eml22__ThermalConductanceMeasureExt has binding name 'eml22__ThermalConductanceMeasureExt' for type 'eml22:ThermalConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt (-637)

#endif

/* eml22__ThermalConductanceMeasure has binding name 'eml22__ThermalConductanceMeasure' for type 'eml22:ThermalConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure (-636)

#endif

/* eml22__TemperatureIntervalPerTimeMeasureExt has binding name 'eml22__TemperatureIntervalPerTimeMeasureExt' for type 'eml22:TemperatureIntervalPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt (-635)

#endif

/* eml22__TemperatureIntervalPerTimeMeasure has binding name 'eml22__TemperatureIntervalPerTimeMeasure' for type 'eml22:TemperatureIntervalPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure (-634)

#endif

/* eml22__TemperatureIntervalPerPressureMeasureExt has binding name 'eml22__TemperatureIntervalPerPressureMeasureExt' for type 'eml22:TemperatureIntervalPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt (-633)

#endif

/* eml22__TemperatureIntervalPerPressureMeasure has binding name 'eml22__TemperatureIntervalPerPressureMeasure' for type 'eml22:TemperatureIntervalPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure (-632)

#endif

/* eml22__TemperatureIntervalPerLengthMeasureExt has binding name 'eml22__TemperatureIntervalPerLengthMeasureExt' for type 'eml22:TemperatureIntervalPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt (-631)

#endif

/* eml22__TemperatureIntervalPerLengthMeasure has binding name 'eml22__TemperatureIntervalPerLengthMeasure' for type 'eml22:TemperatureIntervalPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure (-630)

#endif

/* eml22__TemperatureIntervalMeasureExt has binding name 'eml22__TemperatureIntervalMeasureExt' for type 'eml22:TemperatureIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt (-629)

#endif

/* eml22__TemperatureIntervalMeasure has binding name 'eml22__TemperatureIntervalMeasure' for type 'eml22:TemperatureIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure (-628)

#endif

/* eml22__SpecificHeatCapacityMeasureExt has binding name 'eml22__SpecificHeatCapacityMeasureExt' for type 'eml22:SpecificHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt (-627)

#endif

/* eml22__SpecificHeatCapacityMeasure has binding name 'eml22__SpecificHeatCapacityMeasure' for type 'eml22:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure (-626)

#endif

/* eml22__SolidAngleMeasureExt has binding name 'eml22__SolidAngleMeasureExt' for type 'eml22:SolidAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt (-625)

#endif

/* eml22__SolidAngleMeasure has binding name 'eml22__SolidAngleMeasure' for type 'eml22:SolidAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure (-624)

#endif

/* eml22__SignalingEventPerTimeMeasureExt has binding name 'eml22__SignalingEventPerTimeMeasureExt' for type 'eml22:SignalingEventPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt (-623)

#endif

/* eml22__SignalingEventPerTimeMeasure has binding name 'eml22__SignalingEventPerTimeMeasure' for type 'eml22:SignalingEventPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure (-622)

#endif

/* eml22__SecondMomentOfAreaMeasureExt has binding name 'eml22__SecondMomentOfAreaMeasureExt' for type 'eml22:SecondMomentOfAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt (-621)

#endif

/* eml22__SecondMomentOfAreaMeasure has binding name 'eml22__SecondMomentOfAreaMeasure' for type 'eml22:SecondMomentOfAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure (-620)

#endif

/* eml22__ReluctanceMeasureExt has binding name 'eml22__ReluctanceMeasureExt' for type 'eml22:ReluctanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt (-619)

#endif

/* eml22__ReluctanceMeasure has binding name 'eml22__ReluctanceMeasure' for type 'eml22:ReluctanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure (-618)

#endif

/* eml22__ReciprocalVolumeMeasureExt has binding name 'eml22__ReciprocalVolumeMeasureExt' for type 'eml22:ReciprocalVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt (-617)

#endif

/* eml22__ReciprocalVolumeMeasure has binding name 'eml22__ReciprocalVolumeMeasure' for type 'eml22:ReciprocalVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure (-616)

#endif

/* eml22__ReciprocalTimeMeasureExt has binding name 'eml22__ReciprocalTimeMeasureExt' for type 'eml22:ReciprocalTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt (-615)

#endif

/* eml22__ReciprocalTimeMeasure has binding name 'eml22__ReciprocalTimeMeasure' for type 'eml22:ReciprocalTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure (-614)

#endif

/* eml22__ReciprocalPressureMeasureExt has binding name 'eml22__ReciprocalPressureMeasureExt' for type 'eml22:ReciprocalPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt (-613)

#endif

/* eml22__ReciprocalPressureMeasure has binding name 'eml22__ReciprocalPressureMeasure' for type 'eml22:ReciprocalPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure (-612)

#endif

/* eml22__ReciprocalMassTimeMeasureExt has binding name 'eml22__ReciprocalMassTimeMeasureExt' for type 'eml22:ReciprocalMassTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt (-611)

#endif

/* eml22__ReciprocalMassTimeMeasure has binding name 'eml22__ReciprocalMassTimeMeasure' for type 'eml22:ReciprocalMassTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure (-610)

#endif

/* eml22__ReciprocalMassMeasureExt has binding name 'eml22__ReciprocalMassMeasureExt' for type 'eml22:ReciprocalMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt (-609)

#endif

/* eml22__ReciprocalMassMeasure has binding name 'eml22__ReciprocalMassMeasure' for type 'eml22:ReciprocalMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure (-608)

#endif

/* eml22__ReciprocalLengthMeasureExt has binding name 'eml22__ReciprocalLengthMeasureExt' for type 'eml22:ReciprocalLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt (-607)

#endif

/* eml22__ReciprocalLengthMeasure has binding name 'eml22__ReciprocalLengthMeasure' for type 'eml22:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure (-606)

#endif

/* eml22__ReciprocalForceMeasureExt has binding name 'eml22__ReciprocalForceMeasureExt' for type 'eml22:ReciprocalForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt (-605)

#endif

/* eml22__ReciprocalForceMeasure has binding name 'eml22__ReciprocalForceMeasure' for type 'eml22:ReciprocalForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure (-604)

#endif

/* eml22__ReciprocalElectricPotentialDifferenceMeasureExt has binding name 'eml22__ReciprocalElectricPotentialDifferenceMeasureExt' for type 'eml22:ReciprocalElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt (-603)

#endif

/* eml22__ReciprocalElectricPotentialDifferenceMeasure has binding name 'eml22__ReciprocalElectricPotentialDifferenceMeasure' for type 'eml22:ReciprocalElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure (-602)

#endif

/* eml22__ReciprocalAreaMeasureExt has binding name 'eml22__ReciprocalAreaMeasureExt' for type 'eml22:ReciprocalAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt (-601)

#endif

/* eml22__ReciprocalAreaMeasure has binding name 'eml22__ReciprocalAreaMeasure' for type 'eml22:ReciprocalAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure (-600)

#endif

/* eml22__RadiantIntensityMeasureExt has binding name 'eml22__RadiantIntensityMeasureExt' for type 'eml22:RadiantIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt (-599)

#endif

/* eml22__RadiantIntensityMeasure has binding name 'eml22__RadiantIntensityMeasure' for type 'eml22:RadiantIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure (-598)

#endif

/* eml22__RadianceMeasureExt has binding name 'eml22__RadianceMeasureExt' for type 'eml22:RadianceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt (-597)

#endif

/* eml22__RadianceMeasure has binding name 'eml22__RadianceMeasure' for type 'eml22:RadianceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure (-596)

#endif

/* eml22__QuantityOfLightMeasureExt has binding name 'eml22__QuantityOfLightMeasureExt' for type 'eml22:QuantityOfLightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt (-595)

#endif

/* eml22__QuantityOfLightMeasure has binding name 'eml22__QuantityOfLightMeasure' for type 'eml22:QuantityOfLightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure (-594)

#endif

/* eml22__PressureTimePerVolumeMeasureExt has binding name 'eml22__PressureTimePerVolumeMeasureExt' for type 'eml22:PressureTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt (-593)

#endif

/* eml22__PressureTimePerVolumeMeasure has binding name 'eml22__PressureTimePerVolumeMeasure' for type 'eml22:PressureTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure (-592)

#endif

/* eml22__PressureSquaredPerForceTimePerAreaMeasureExt has binding name 'eml22__PressureSquaredPerForceTimePerAreaMeasureExt' for type 'eml22:PressureSquaredPerForceTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt (-591)

#endif

/* eml22__PressureSquaredPerForceTimePerAreaMeasure has binding name 'eml22__PressureSquaredPerForceTimePerAreaMeasure' for type 'eml22:PressureSquaredPerForceTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure (-590)

#endif

/* eml22__PressureSquaredMeasureExt has binding name 'eml22__PressureSquaredMeasureExt' for type 'eml22:PressureSquaredMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt (-589)

#endif

/* eml22__PressureSquaredMeasure has binding name 'eml22__PressureSquaredMeasure' for type 'eml22:PressureSquaredMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure (-588)

#endif

/* eml22__PressurePerVolumeMeasureExt has binding name 'eml22__PressurePerVolumeMeasureExt' for type 'eml22:PressurePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt (-587)

#endif

/* eml22__PressurePerVolumeMeasure has binding name 'eml22__PressurePerVolumeMeasure' for type 'eml22:PressurePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure (-586)

#endif

/* eml22__PressurePerTimeMeasureExt has binding name 'eml22__PressurePerTimeMeasureExt' for type 'eml22:PressurePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt (-585)

#endif

/* eml22__PressurePerTimeMeasure has binding name 'eml22__PressurePerTimeMeasure' for type 'eml22:PressurePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure (-584)

#endif

/* eml22__PressurePerPressureMeasureExt has binding name 'eml22__PressurePerPressureMeasureExt' for type 'eml22:PressurePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt (-583)

#endif

/* eml22__PressurePerPressureMeasure has binding name 'eml22__PressurePerPressureMeasure' for type 'eml22:PressurePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure (-582)

#endif

/* eml22__PressureMeasureExt has binding name 'eml22__PressureMeasureExt' for type 'eml22:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt (-581)

#endif

/* eml22__PressureMeasure has binding name 'eml22__PressureMeasure' for type 'eml22:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure (-580)

#endif

/* eml22__PowerPerVolumeMeasureExt has binding name 'eml22__PowerPerVolumeMeasureExt' for type 'eml22:PowerPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt (-579)

#endif

/* eml22__PowerPerVolumeMeasure has binding name 'eml22__PowerPerVolumeMeasure' for type 'eml22:PowerPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure (-578)

#endif

/* eml22__PowerPerPowerMeasureExt has binding name 'eml22__PowerPerPowerMeasureExt' for type 'eml22:PowerPerPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt (-577)

#endif

/* eml22__PowerPerPowerMeasure has binding name 'eml22__PowerPerPowerMeasure' for type 'eml22:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure (-576)

#endif

/* eml22__PowerPerAreaMeasureExt has binding name 'eml22__PowerPerAreaMeasureExt' for type 'eml22:PowerPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt (-575)

#endif

/* eml22__PowerPerAreaMeasure has binding name 'eml22__PowerPerAreaMeasure' for type 'eml22:PowerPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure (-574)

#endif

/* eml22__PowerMeasureExt has binding name 'eml22__PowerMeasureExt' for type 'eml22:PowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt (-573)

#endif

/* eml22__PowerMeasure has binding name 'eml22__PowerMeasure' for type 'eml22:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure (-572)

#endif

/* eml22__PotentialDifferencePerPowerDropMeasureExt has binding name 'eml22__PotentialDifferencePerPowerDropMeasureExt' for type 'eml22:PotentialDifferencePerPowerDropMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt (-571)

#endif

/* eml22__PotentialDifferencePerPowerDropMeasure has binding name 'eml22__PotentialDifferencePerPowerDropMeasure' for type 'eml22:PotentialDifferencePerPowerDropMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure (-570)

#endif

/* eml22__PlaneAngleMeasureExt has binding name 'eml22__PlaneAngleMeasureExt' for type 'eml22:PlaneAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt (-569)

#endif

/* eml22__PlaneAngleMeasure has binding name 'eml22__PlaneAngleMeasure' for type 'eml22:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure (-568)

#endif

/* eml22__PermittivityMeasureExt has binding name 'eml22__PermittivityMeasureExt' for type 'eml22:PermittivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt (-567)

#endif

/* eml22__PermittivityMeasure has binding name 'eml22__PermittivityMeasure' for type 'eml22:PermittivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure (-566)

#endif

/* eml22__PermeabilityRockMeasureExt has binding name 'eml22__PermeabilityRockMeasureExt' for type 'eml22:PermeabilityRockMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt (-565)

#endif

/* eml22__PermeabilityRockMeasure has binding name 'eml22__PermeabilityRockMeasure' for type 'eml22:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure (-564)

#endif

/* eml22__PermeabilityLengthMeasureExt has binding name 'eml22__PermeabilityLengthMeasureExt' for type 'eml22:PermeabilityLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt (-563)

#endif

/* eml22__PermeabilityLengthMeasure has binding name 'eml22__PermeabilityLengthMeasure' for type 'eml22:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure (-562)

#endif

/* eml22__NormalizedPowerMeasureExt has binding name 'eml22__NormalizedPowerMeasureExt' for type 'eml22:NormalizedPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt (-561)

#endif

/* eml22__NormalizedPowerMeasure has binding name 'eml22__NormalizedPowerMeasure' for type 'eml22:NormalizedPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure (-560)

#endif

/* eml22__MomentumMeasureExt has binding name 'eml22__MomentumMeasureExt' for type 'eml22:MomentumMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt (-559)

#endif

/* eml22__MomentumMeasure has binding name 'eml22__MomentumMeasure' for type 'eml22:MomentumMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure (-558)

#endif

/* eml22__MomentOfInertiaMeasureExt has binding name 'eml22__MomentOfInertiaMeasureExt' for type 'eml22:MomentOfInertiaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt (-557)

#endif

/* eml22__MomentOfInertiaMeasure has binding name 'eml22__MomentOfInertiaMeasure' for type 'eml22:MomentOfInertiaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure (-556)

#endif

/* eml22__MomentOfForceMeasureExt has binding name 'eml22__MomentOfForceMeasureExt' for type 'eml22:MomentOfForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt (-555)

#endif

/* eml22__MomentOfForceMeasure has binding name 'eml22__MomentOfForceMeasure' for type 'eml22:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure (-554)

#endif

/* eml22__MolecularWeightMeasureExt has binding name 'eml22__MolecularWeightMeasureExt' for type 'eml22:MolecularWeightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt (-553)

#endif

/* eml22__MolecularWeightMeasure has binding name 'eml22__MolecularWeightMeasure' for type 'eml22:MolecularWeightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure (-552)

#endif

/* eml22__MolarVolumeMeasureExt has binding name 'eml22__MolarVolumeMeasureExt' for type 'eml22:MolarVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt (-551)

#endif

/* eml22__MolarVolumeMeasure has binding name 'eml22__MolarVolumeMeasure' for type 'eml22:MolarVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure (-550)

#endif

/* eml22__MolarHeatCapacityMeasureExt has binding name 'eml22__MolarHeatCapacityMeasureExt' for type 'eml22:MolarHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt (-549)

#endif

/* eml22__MolarHeatCapacityMeasure has binding name 'eml22__MolarHeatCapacityMeasure' for type 'eml22:MolarHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure (-548)

#endif

/* eml22__MolarEnergyMeasureExt has binding name 'eml22__MolarEnergyMeasureExt' for type 'eml22:MolarEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt (-547)

#endif

/* eml22__MolarEnergyMeasure has binding name 'eml22__MolarEnergyMeasure' for type 'eml22:MolarEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure (-546)

#endif

/* eml22__MobilityMeasureExt has binding name 'eml22__MobilityMeasureExt' for type 'eml22:MobilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt (-545)

#endif

/* eml22__MobilityMeasure has binding name 'eml22__MobilityMeasure' for type 'eml22:MobilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure (-544)

#endif

/* eml22__MassPerVolumePerTemperatureMeasureExt has binding name 'eml22__MassPerVolumePerTemperatureMeasureExt' for type 'eml22:MassPerVolumePerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt (-543)

#endif

/* eml22__MassPerVolumePerTemperatureMeasure has binding name 'eml22__MassPerVolumePerTemperatureMeasure' for type 'eml22:MassPerVolumePerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure (-542)

#endif

/* eml22__MassPerVolumePerPressureMeasureExt has binding name 'eml22__MassPerVolumePerPressureMeasureExt' for type 'eml22:MassPerVolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt (-541)

#endif

/* eml22__MassPerVolumePerPressureMeasure has binding name 'eml22__MassPerVolumePerPressureMeasure' for type 'eml22:MassPerVolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure (-540)

#endif

/* eml22__MassPerVolumePerLengthMeasureExt has binding name 'eml22__MassPerVolumePerLengthMeasureExt' for type 'eml22:MassPerVolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt (-539)

#endif

/* eml22__MassPerVolumePerLengthMeasure has binding name 'eml22__MassPerVolumePerLengthMeasure' for type 'eml22:MassPerVolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure (-538)

#endif

/* eml22__MassPerVolumeMeasureExt has binding name 'eml22__MassPerVolumeMeasureExt' for type 'eml22:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt (-537)

#endif

/* eml22__MassPerVolumeMeasure has binding name 'eml22__MassPerVolumeMeasure' for type 'eml22:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure (-536)

#endif

/* eml22__MassPerTimePerLengthMeasureExt has binding name 'eml22__MassPerTimePerLengthMeasureExt' for type 'eml22:MassPerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt (-535)

#endif

/* eml22__MassPerTimePerLengthMeasure has binding name 'eml22__MassPerTimePerLengthMeasure' for type 'eml22:MassPerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure (-534)

#endif

/* eml22__MassPerTimePerAreaMeasureExt has binding name 'eml22__MassPerTimePerAreaMeasureExt' for type 'eml22:MassPerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt (-533)

#endif

/* eml22__MassPerTimePerAreaMeasure has binding name 'eml22__MassPerTimePerAreaMeasure' for type 'eml22:MassPerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure (-532)

#endif

/* eml22__MassPerTimeMeasureExt has binding name 'eml22__MassPerTimeMeasureExt' for type 'eml22:MassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt (-531)

#endif

/* eml22__MassPerTimeMeasure has binding name 'eml22__MassPerTimeMeasure' for type 'eml22:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure (-530)

#endif

/* eml22__MassPerMassMeasureExt has binding name 'eml22__MassPerMassMeasureExt' for type 'eml22:MassPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt (-529)

#endif

/* eml22__MassPerMassMeasure has binding name 'eml22__MassPerMassMeasure' for type 'eml22:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure (-528)

#endif

/* eml22__MassPerLengthMeasureExt has binding name 'eml22__MassPerLengthMeasureExt' for type 'eml22:MassPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt (-527)

#endif

/* eml22__MassPerLengthMeasure has binding name 'eml22__MassPerLengthMeasure' for type 'eml22:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure (-526)

#endif

/* eml22__MassPerEnergyMeasureExt has binding name 'eml22__MassPerEnergyMeasureExt' for type 'eml22:MassPerEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt (-525)

#endif

/* eml22__MassPerEnergyMeasure has binding name 'eml22__MassPerEnergyMeasure' for type 'eml22:MassPerEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure (-524)

#endif

/* eml22__MassPerAreaMeasureExt has binding name 'eml22__MassPerAreaMeasureExt' for type 'eml22:MassPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt (-523)

#endif

/* eml22__MassPerAreaMeasure has binding name 'eml22__MassPerAreaMeasure' for type 'eml22:MassPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure (-522)

#endif

/* eml22__MassMeasureExt has binding name 'eml22__MassMeasureExt' for type 'eml22:MassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt (-521)

#endif

/* eml22__MassMeasure has binding name 'eml22__MassMeasure' for type 'eml22:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure (-520)

#endif

/* eml22__MassLengthMeasureExt has binding name 'eml22__MassLengthMeasureExt' for type 'eml22:MassLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt (-519)

#endif

/* eml22__MassLengthMeasure has binding name 'eml22__MassLengthMeasure' for type 'eml22:MassLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure (-518)

#endif

/* eml22__MagneticVectorPotentialMeasureExt has binding name 'eml22__MagneticVectorPotentialMeasureExt' for type 'eml22:MagneticVectorPotentialMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt (-517)

#endif

/* eml22__MagneticVectorPotentialMeasure has binding name 'eml22__MagneticVectorPotentialMeasure' for type 'eml22:MagneticVectorPotentialMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure (-516)

#endif

/* eml22__MagneticPermeabilityMeasureExt has binding name 'eml22__MagneticPermeabilityMeasureExt' for type 'eml22:MagneticPermeabilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt (-515)

#endif

/* eml22__MagneticPermeabilityMeasure has binding name 'eml22__MagneticPermeabilityMeasure' for type 'eml22:MagneticPermeabilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure (-514)

#endif

/* eml22__MagneticFluxMeasureExt has binding name 'eml22__MagneticFluxMeasureExt' for type 'eml22:MagneticFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt (-513)

#endif

/* eml22__MagneticFluxMeasure has binding name 'eml22__MagneticFluxMeasure' for type 'eml22:MagneticFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure (-512)

#endif

/* eml22__MagneticFluxDensityPerLengthMeasureExt has binding name 'eml22__MagneticFluxDensityPerLengthMeasureExt' for type 'eml22:MagneticFluxDensityPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt (-511)

#endif

/* eml22__MagneticFluxDensityPerLengthMeasure has binding name 'eml22__MagneticFluxDensityPerLengthMeasure' for type 'eml22:MagneticFluxDensityPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure (-510)

#endif

/* eml22__MagneticFluxDensityMeasureExt has binding name 'eml22__MagneticFluxDensityMeasureExt' for type 'eml22:MagneticFluxDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt (-509)

#endif

/* eml22__MagneticFluxDensityMeasure has binding name 'eml22__MagneticFluxDensityMeasure' for type 'eml22:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure (-508)

#endif

/* eml22__MagneticFieldStrengthMeasureExt has binding name 'eml22__MagneticFieldStrengthMeasureExt' for type 'eml22:MagneticFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt (-507)

#endif

/* eml22__MagneticFieldStrengthMeasure has binding name 'eml22__MagneticFieldStrengthMeasure' for type 'eml22:MagneticFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure (-506)

#endif

/* eml22__MagneticDipoleMomentMeasureExt has binding name 'eml22__MagneticDipoleMomentMeasureExt' for type 'eml22:MagneticDipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt (-505)

#endif

/* eml22__MagneticDipoleMomentMeasure has binding name 'eml22__MagneticDipoleMomentMeasure' for type 'eml22:MagneticDipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure (-504)

#endif

/* eml22__LuminousIntensityMeasureExt has binding name 'eml22__LuminousIntensityMeasureExt' for type 'eml22:LuminousIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt (-503)

#endif

/* eml22__LuminousIntensityMeasure has binding name 'eml22__LuminousIntensityMeasure' for type 'eml22:LuminousIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure (-502)

#endif

/* eml22__LuminousFluxMeasureExt has binding name 'eml22__LuminousFluxMeasureExt' for type 'eml22:LuminousFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt (-501)

#endif

/* eml22__LuminousFluxMeasure has binding name 'eml22__LuminousFluxMeasure' for type 'eml22:LuminousFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure (-500)

#endif

/* eml22__LuminousEfficacyMeasureExt has binding name 'eml22__LuminousEfficacyMeasureExt' for type 'eml22:LuminousEfficacyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt (-499)

#endif

/* eml22__LuminousEfficacyMeasure has binding name 'eml22__LuminousEfficacyMeasure' for type 'eml22:LuminousEfficacyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure (-498)

#endif

/* eml22__LuminanceMeasureExt has binding name 'eml22__LuminanceMeasureExt' for type 'eml22:LuminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt (-497)

#endif

/* eml22__LuminanceMeasure has binding name 'eml22__LuminanceMeasure' for type 'eml22:LuminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure (-496)

#endif

/* eml22__LogarithmicPowerRatioPerLengthMeasureExt has binding name 'eml22__LogarithmicPowerRatioPerLengthMeasureExt' for type 'eml22:LogarithmicPowerRatioPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt (-495)

#endif

/* eml22__LogarithmicPowerRatioPerLengthMeasure has binding name 'eml22__LogarithmicPowerRatioPerLengthMeasure' for type 'eml22:LogarithmicPowerRatioPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure (-494)

#endif

/* eml22__LogarithmicPowerRatioMeasureExt has binding name 'eml22__LogarithmicPowerRatioMeasureExt' for type 'eml22:LogarithmicPowerRatioMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt (-493)

#endif

/* eml22__LogarithmicPowerRatioMeasure has binding name 'eml22__LogarithmicPowerRatioMeasure' for type 'eml22:LogarithmicPowerRatioMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure (-492)

#endif

/* eml22__LinearThermalExpansionMeasureExt has binding name 'eml22__LinearThermalExpansionMeasureExt' for type 'eml22:LinearThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt (-491)

#endif

/* eml22__LinearThermalExpansionMeasure has binding name 'eml22__LinearThermalExpansionMeasure' for type 'eml22:LinearThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure (-490)

#endif

/* eml22__LinearAccelerationMeasureExt has binding name 'eml22__LinearAccelerationMeasureExt' for type 'eml22:LinearAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt (-489)

#endif

/* eml22__LinearAccelerationMeasure has binding name 'eml22__LinearAccelerationMeasure' for type 'eml22:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure (-488)

#endif

/* eml22__LightExposureMeasureExt has binding name 'eml22__LightExposureMeasureExt' for type 'eml22:LightExposureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt (-487)

#endif

/* eml22__LightExposureMeasure has binding name 'eml22__LightExposureMeasure' for type 'eml22:LightExposureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure (-486)

#endif

/* eml22__LengthPerVolumeMeasureExt has binding name 'eml22__LengthPerVolumeMeasureExt' for type 'eml22:LengthPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt (-485)

#endif

/* eml22__LengthPerVolumeMeasure has binding name 'eml22__LengthPerVolumeMeasure' for type 'eml22:LengthPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure (-484)

#endif

/* eml22__LengthPerTimeMeasureExt has binding name 'eml22__LengthPerTimeMeasureExt' for type 'eml22:LengthPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt (-483)

#endif

/* eml22__LengthPerTimeMeasure has binding name 'eml22__LengthPerTimeMeasure' for type 'eml22:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure (-482)

#endif

/* eml22__LengthPerTemperatureMeasureExt has binding name 'eml22__LengthPerTemperatureMeasureExt' for type 'eml22:LengthPerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt (-481)

#endif

/* eml22__LengthPerTemperatureMeasure has binding name 'eml22__LengthPerTemperatureMeasure' for type 'eml22:LengthPerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure (-480)

#endif

/* eml22__LengthPerPressureMeasureExt has binding name 'eml22__LengthPerPressureMeasureExt' for type 'eml22:LengthPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt (-479)

#endif

/* eml22__LengthPerPressureMeasure has binding name 'eml22__LengthPerPressureMeasure' for type 'eml22:LengthPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure (-478)

#endif

/* eml22__LengthPerMassMeasureExt has binding name 'eml22__LengthPerMassMeasureExt' for type 'eml22:LengthPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt (-477)

#endif

/* eml22__LengthPerMassMeasure has binding name 'eml22__LengthPerMassMeasure' for type 'eml22:LengthPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure (-476)

#endif

/* eml22__LengthPerLengthMeasureExt has binding name 'eml22__LengthPerLengthMeasureExt' for type 'eml22:LengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt (-475)

#endif

/* eml22__LengthPerLengthMeasure has binding name 'eml22__LengthPerLengthMeasure' for type 'eml22:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure (-474)

#endif

/* eml22__LengthMeasureExt has binding name 'eml22__LengthMeasureExt' for type 'eml22:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt (-473)

#endif

/* eml22__LengthMeasure has binding name 'eml22__LengthMeasure' for type 'eml22:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure (-472)

#endif

/* eml22__KinematicViscosityMeasureExt has binding name 'eml22__KinematicViscosityMeasureExt' for type 'eml22:KinematicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt (-471)

#endif

/* eml22__KinematicViscosityMeasure has binding name 'eml22__KinematicViscosityMeasure' for type 'eml22:KinematicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure (-470)

#endif

/* eml22__IsothermalCompressibilityMeasureExt has binding name 'eml22__IsothermalCompressibilityMeasureExt' for type 'eml22:IsothermalCompressibilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt (-469)

#endif

/* eml22__IsothermalCompressibilityMeasure has binding name 'eml22__IsothermalCompressibilityMeasure' for type 'eml22:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure (-468)

#endif

/* eml22__InductanceMeasureExt has binding name 'eml22__InductanceMeasureExt' for type 'eml22:InductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt (-467)

#endif

/* eml22__InductanceMeasure has binding name 'eml22__InductanceMeasure' for type 'eml22:InductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure (-466)

#endif

/* eml22__IlluminanceMeasureExt has binding name 'eml22__IlluminanceMeasureExt' for type 'eml22:IlluminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt (-465)

#endif

/* eml22__IlluminanceMeasure has binding name 'eml22__IlluminanceMeasure' for type 'eml22:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure (-464)

#endif

/* eml22__HeatTransferCoefficientMeasureExt has binding name 'eml22__HeatTransferCoefficientMeasureExt' for type 'eml22:HeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt (-463)

#endif

/* eml22__HeatTransferCoefficientMeasure has binding name 'eml22__HeatTransferCoefficientMeasure' for type 'eml22:HeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure (-462)

#endif

/* eml22__HeatFlowRateMeasureExt has binding name 'eml22__HeatFlowRateMeasureExt' for type 'eml22:HeatFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt (-461)

#endif

/* eml22__HeatFlowRateMeasure has binding name 'eml22__HeatFlowRateMeasure' for type 'eml22:HeatFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure (-460)

#endif

/* eml22__HeatCapacityMeasureExt has binding name 'eml22__HeatCapacityMeasureExt' for type 'eml22:HeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt (-459)

#endif

/* eml22__HeatCapacityMeasure has binding name 'eml22__HeatCapacityMeasure' for type 'eml22:HeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure (-458)

#endif

/* eml22__FrequencyMeasureExt has binding name 'eml22__FrequencyMeasureExt' for type 'eml22:FrequencyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt (-457)

#endif

/* eml22__FrequencyMeasure has binding name 'eml22__FrequencyMeasure' for type 'eml22:FrequencyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure (-456)

#endif

/* eml22__FrequencyIntervalMeasureExt has binding name 'eml22__FrequencyIntervalMeasureExt' for type 'eml22:FrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt (-455)

#endif

/* eml22__FrequencyIntervalMeasure has binding name 'eml22__FrequencyIntervalMeasure' for type 'eml22:FrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure (-454)

#endif

/* eml22__ForcePerVolumeMeasureExt has binding name 'eml22__ForcePerVolumeMeasureExt' for type 'eml22:ForcePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt (-453)

#endif

/* eml22__ForcePerVolumeMeasure has binding name 'eml22__ForcePerVolumeMeasure' for type 'eml22:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure (-452)

#endif

/* eml22__ForcePerLengthMeasureExt has binding name 'eml22__ForcePerLengthMeasureExt' for type 'eml22:ForcePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt (-451)

#endif

/* eml22__ForcePerLengthMeasure has binding name 'eml22__ForcePerLengthMeasure' for type 'eml22:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure (-450)

#endif

/* eml22__ForcePerForceMeasureExt has binding name 'eml22__ForcePerForceMeasureExt' for type 'eml22:ForcePerForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt (-449)

#endif

/* eml22__ForcePerForceMeasure has binding name 'eml22__ForcePerForceMeasure' for type 'eml22:ForcePerForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure (-448)

#endif

/* eml22__ForceMeasureExt has binding name 'eml22__ForceMeasureExt' for type 'eml22:ForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt (-447)

#endif

/* eml22__ForceMeasure has binding name 'eml22__ForceMeasure' for type 'eml22:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure (-446)

#endif

/* eml22__ForceLengthPerLengthMeasureExt has binding name 'eml22__ForceLengthPerLengthMeasureExt' for type 'eml22:ForceLengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt (-445)

#endif

/* eml22__ForceLengthPerLengthMeasure has binding name 'eml22__ForceLengthPerLengthMeasure' for type 'eml22:ForceLengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure (-444)

#endif

/* eml22__ForceAreaMeasureExt has binding name 'eml22__ForceAreaMeasureExt' for type 'eml22:ForceAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt (-443)

#endif

/* eml22__ForceAreaMeasure has binding name 'eml22__ForceAreaMeasure' for type 'eml22:ForceAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure (-442)

#endif

/* eml22__EnergyPerVolumeMeasureExt has binding name 'eml22__EnergyPerVolumeMeasureExt' for type 'eml22:EnergyPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt (-441)

#endif

/* eml22__EnergyPerVolumeMeasure has binding name 'eml22__EnergyPerVolumeMeasure' for type 'eml22:EnergyPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure (-440)

#endif

/* eml22__EnergyPerMassPerTimeMeasureExt has binding name 'eml22__EnergyPerMassPerTimeMeasureExt' for type 'eml22:EnergyPerMassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt (-439)

#endif

/* eml22__EnergyPerMassPerTimeMeasure has binding name 'eml22__EnergyPerMassPerTimeMeasure' for type 'eml22:EnergyPerMassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure (-438)

#endif

/* eml22__EnergyPerMassMeasureExt has binding name 'eml22__EnergyPerMassMeasureExt' for type 'eml22:EnergyPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt (-437)

#endif

/* eml22__EnergyPerMassMeasure has binding name 'eml22__EnergyPerMassMeasure' for type 'eml22:EnergyPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure (-436)

#endif

/* eml22__EnergyPerLengthMeasureExt has binding name 'eml22__EnergyPerLengthMeasureExt' for type 'eml22:EnergyPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt (-435)

#endif

/* eml22__EnergyPerLengthMeasure has binding name 'eml22__EnergyPerLengthMeasure' for type 'eml22:EnergyPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure (-434)

#endif

/* eml22__EnergyPerAreaMeasureExt has binding name 'eml22__EnergyPerAreaMeasureExt' for type 'eml22:EnergyPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt (-433)

#endif

/* eml22__EnergyPerAreaMeasure has binding name 'eml22__EnergyPerAreaMeasure' for type 'eml22:EnergyPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure (-432)

#endif

/* eml22__EnergyMeasureExt has binding name 'eml22__EnergyMeasureExt' for type 'eml22:EnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt (-431)

#endif

/* eml22__EnergyMeasure has binding name 'eml22__EnergyMeasure' for type 'eml22:EnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure (-430)

#endif

/* eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt' for type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt (-429)

#endif

/* eml22__EnergyLengthPerTimeAreaTemperatureMeasure has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureMeasure' for type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure (-428)

#endif

/* eml22__EnergyLengthPerAreaMeasureExt has binding name 'eml22__EnergyLengthPerAreaMeasureExt' for type 'eml22:EnergyLengthPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt (-427)

#endif

/* eml22__EnergyLengthPerAreaMeasure has binding name 'eml22__EnergyLengthPerAreaMeasure' for type 'eml22:EnergyLengthPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure (-426)

#endif

/* eml22__ElectromagneticMomentMeasureExt has binding name 'eml22__ElectromagneticMomentMeasureExt' for type 'eml22:ElectromagneticMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt (-425)

#endif

/* eml22__ElectromagneticMomentMeasure has binding name 'eml22__ElectromagneticMomentMeasure' for type 'eml22:ElectromagneticMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure (-424)

#endif

/* eml22__ElectricResistancePerLengthMeasureExt has binding name 'eml22__ElectricResistancePerLengthMeasureExt' for type 'eml22:ElectricResistancePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt (-423)

#endif

/* eml22__ElectricResistancePerLengthMeasure has binding name 'eml22__ElectricResistancePerLengthMeasure' for type 'eml22:ElectricResistancePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure (-422)

#endif

/* eml22__ElectricResistanceMeasureExt has binding name 'eml22__ElectricResistanceMeasureExt' for type 'eml22:ElectricResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt (-421)

#endif

/* eml22__ElectricResistanceMeasure has binding name 'eml22__ElectricResistanceMeasure' for type 'eml22:ElectricResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure (-420)

#endif

/* eml22__ElectricPotentialDifferenceMeasureExt has binding name 'eml22__ElectricPotentialDifferenceMeasureExt' for type 'eml22:ElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt (-419)

#endif

/* eml22__ElectricPotentialDifferenceMeasure has binding name 'eml22__ElectricPotentialDifferenceMeasure' for type 'eml22:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure (-418)

#endif

/* eml22__ElectricFieldStrengthMeasureExt has binding name 'eml22__ElectricFieldStrengthMeasureExt' for type 'eml22:ElectricFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt (-417)

#endif

/* eml22__ElectricFieldStrengthMeasure has binding name 'eml22__ElectricFieldStrengthMeasure' for type 'eml22:ElectricFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure (-416)

#endif

/* eml22__ElectricCurrentMeasureExt has binding name 'eml22__ElectricCurrentMeasureExt' for type 'eml22:ElectricCurrentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt (-415)

#endif

/* eml22__ElectricCurrentMeasure has binding name 'eml22__ElectricCurrentMeasure' for type 'eml22:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure (-414)

#endif

/* eml22__ElectricCurrentDensityMeasureExt has binding name 'eml22__ElectricCurrentDensityMeasureExt' for type 'eml22:ElectricCurrentDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt (-413)

#endif

/* eml22__ElectricCurrentDensityMeasure has binding name 'eml22__ElectricCurrentDensityMeasure' for type 'eml22:ElectricCurrentDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure (-412)

#endif

/* eml22__ElectricConductivityMeasureExt has binding name 'eml22__ElectricConductivityMeasureExt' for type 'eml22:ElectricConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt (-411)

#endif

/* eml22__ElectricConductivityMeasure has binding name 'eml22__ElectricConductivityMeasure' for type 'eml22:ElectricConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure (-410)

#endif

/* eml22__ElectricConductanceMeasureExt has binding name 'eml22__ElectricConductanceMeasureExt' for type 'eml22:ElectricConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt (-409)

#endif

/* eml22__ElectricConductanceMeasure has binding name 'eml22__ElectricConductanceMeasure' for type 'eml22:ElectricConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure (-408)

#endif

/* eml22__ElectricChargePerVolumeMeasureExt has binding name 'eml22__ElectricChargePerVolumeMeasureExt' for type 'eml22:ElectricChargePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt (-407)

#endif

/* eml22__ElectricChargePerVolumeMeasure has binding name 'eml22__ElectricChargePerVolumeMeasure' for type 'eml22:ElectricChargePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure (-406)

#endif

/* eml22__ElectricChargePerMassMeasureExt has binding name 'eml22__ElectricChargePerMassMeasureExt' for type 'eml22:ElectricChargePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt (-405)

#endif

/* eml22__ElectricChargePerMassMeasure has binding name 'eml22__ElectricChargePerMassMeasure' for type 'eml22:ElectricChargePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure (-404)

#endif

/* eml22__ElectricChargePerAreaMeasureExt has binding name 'eml22__ElectricChargePerAreaMeasureExt' for type 'eml22:ElectricChargePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt (-403)

#endif

/* eml22__ElectricChargePerAreaMeasure has binding name 'eml22__ElectricChargePerAreaMeasure' for type 'eml22:ElectricChargePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure (-402)

#endif

/* eml22__ElectricChargeMeasureExt has binding name 'eml22__ElectricChargeMeasureExt' for type 'eml22:ElectricChargeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt (-401)

#endif

/* eml22__ElectricChargeMeasure has binding name 'eml22__ElectricChargeMeasure' for type 'eml22:ElectricChargeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure (-400)

#endif

/* eml22__ElectricalResistivityMeasureExt has binding name 'eml22__ElectricalResistivityMeasureExt' for type 'eml22:ElectricalResistivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt (-399)

#endif

/* eml22__ElectricalResistivityMeasure has binding name 'eml22__ElectricalResistivityMeasure' for type 'eml22:ElectricalResistivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure (-398)

#endif

/* eml22__DynamicViscosityMeasureExt has binding name 'eml22__DynamicViscosityMeasureExt' for type 'eml22:DynamicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt (-397)

#endif

/* eml22__DynamicViscosityMeasure has binding name 'eml22__DynamicViscosityMeasure' for type 'eml22:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure (-396)

#endif

/* eml22__DoseEquivalentMeasureExt has binding name 'eml22__DoseEquivalentMeasureExt' for type 'eml22:DoseEquivalentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt (-395)

#endif

/* eml22__DoseEquivalentMeasure has binding name 'eml22__DoseEquivalentMeasure' for type 'eml22:DoseEquivalentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure (-394)

#endif

/* eml22__DipoleMomentMeasureExt has binding name 'eml22__DipoleMomentMeasureExt' for type 'eml22:DipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt (-393)

#endif

/* eml22__DipoleMomentMeasure has binding name 'eml22__DipoleMomentMeasure' for type 'eml22:DipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure (-392)

#endif

/* eml22__DimensionlessMeasureExt has binding name 'eml22__DimensionlessMeasureExt' for type 'eml22:DimensionlessMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt (-391)

#endif

/* eml22__DimensionlessMeasure has binding name 'eml22__DimensionlessMeasure' for type 'eml22:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure (-390)

#endif

/* eml22__DigitalStorageMeasureExt has binding name 'eml22__DigitalStorageMeasureExt' for type 'eml22:DigitalStorageMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt (-389)

#endif

/* eml22__DigitalStorageMeasure has binding name 'eml22__DigitalStorageMeasure' for type 'eml22:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure (-388)

#endif

/* eml22__DiffusiveTimeOfFlightMeasureExt has binding name 'eml22__DiffusiveTimeOfFlightMeasureExt' for type 'eml22:DiffusiveTimeOfFlightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt (-387)

#endif

/* eml22__DiffusiveTimeOfFlightMeasure has binding name 'eml22__DiffusiveTimeOfFlightMeasure' for type 'eml22:DiffusiveTimeOfFlightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure (-386)

#endif

/* eml22__DiffusionCoefficientMeasureExt has binding name 'eml22__DiffusionCoefficientMeasureExt' for type 'eml22:DiffusionCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt (-385)

#endif

/* eml22__DiffusionCoefficientMeasure has binding name 'eml22__DiffusionCoefficientMeasure' for type 'eml22:DiffusionCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure (-384)

#endif

/* eml22__DataTransferSpeedMeasureExt has binding name 'eml22__DataTransferSpeedMeasureExt' for type 'eml22:DataTransferSpeedMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt (-383)

#endif

/* eml22__DataTransferSpeedMeasure has binding name 'eml22__DataTransferSpeedMeasure' for type 'eml22:DataTransferSpeedMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure (-382)

#endif

/* eml22__CationExchangeCapacityMeasureExt has binding name 'eml22__CationExchangeCapacityMeasureExt' for type 'eml22:CationExchangeCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt (-381)

#endif

/* eml22__CationExchangeCapacityMeasure has binding name 'eml22__CationExchangeCapacityMeasure' for type 'eml22:CationExchangeCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure (-380)

#endif

/* eml22__CapacitanceMeasureExt has binding name 'eml22__CapacitanceMeasureExt' for type 'eml22:CapacitanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt (-379)

#endif

/* eml22__CapacitanceMeasure has binding name 'eml22__CapacitanceMeasure' for type 'eml22:CapacitanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure (-378)

#endif

/* eml22__AttenuationPerFrequencyIntervalMeasureExt has binding name 'eml22__AttenuationPerFrequencyIntervalMeasureExt' for type 'eml22:AttenuationPerFrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt (-377)

#endif

/* eml22__AttenuationPerFrequencyIntervalMeasure has binding name 'eml22__AttenuationPerFrequencyIntervalMeasure' for type 'eml22:AttenuationPerFrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure (-376)

#endif

/* eml22__AreaPerVolumeMeasureExt has binding name 'eml22__AreaPerVolumeMeasureExt' for type 'eml22:AreaPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt (-375)

#endif

/* eml22__AreaPerVolumeMeasure has binding name 'eml22__AreaPerVolumeMeasure' for type 'eml22:AreaPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure (-374)

#endif

/* eml22__AreaPerTimeMeasureExt has binding name 'eml22__AreaPerTimeMeasureExt' for type 'eml22:AreaPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt (-373)

#endif

/* eml22__AreaPerTimeMeasure has binding name 'eml22__AreaPerTimeMeasure' for type 'eml22:AreaPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure (-372)

#endif

/* eml22__AreaPerMassMeasureExt has binding name 'eml22__AreaPerMassMeasureExt' for type 'eml22:AreaPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt (-371)

#endif

/* eml22__AreaPerMassMeasure has binding name 'eml22__AreaPerMassMeasure' for type 'eml22:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure (-370)

#endif

/* eml22__AreaPerCountMeasureExt has binding name 'eml22__AreaPerCountMeasureExt' for type 'eml22:AreaPerCountMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt (-369)

#endif

/* eml22__AreaPerCountMeasure has binding name 'eml22__AreaPerCountMeasure' for type 'eml22:AreaPerCountMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure (-368)

#endif

/* eml22__AreaPerAreaMeasureExt has binding name 'eml22__AreaPerAreaMeasureExt' for type 'eml22:AreaPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt (-367)

#endif

/* eml22__AreaPerAreaMeasure has binding name 'eml22__AreaPerAreaMeasure' for type 'eml22:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure (-366)

#endif

/* eml22__AreaPerAmountOfSubstanceMeasureExt has binding name 'eml22__AreaPerAmountOfSubstanceMeasureExt' for type 'eml22:AreaPerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt (-365)

#endif

/* eml22__AreaPerAmountOfSubstanceMeasure has binding name 'eml22__AreaPerAmountOfSubstanceMeasure' for type 'eml22:AreaPerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure (-364)

#endif

/* eml22__AreaMeasureExt has binding name 'eml22__AreaMeasureExt' for type 'eml22:AreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt (-363)

#endif

/* eml22__AreaMeasure has binding name 'eml22__AreaMeasure' for type 'eml22:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure (-362)

#endif

/* eml22__APINeutronMeasureExt has binding name 'eml22__APINeutronMeasureExt' for type 'eml22:APINeutronMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt (-361)

#endif

/* eml22__APINeutronMeasure has binding name 'eml22__APINeutronMeasure' for type 'eml22:APINeutronMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure (-360)

#endif

/* eml22__APIGravityMeasureExt has binding name 'eml22__APIGravityMeasureExt' for type 'eml22:APIGravityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt (-359)

#endif

/* eml22__APIGravityMeasure has binding name 'eml22__APIGravityMeasure' for type 'eml22:APIGravityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure (-358)

#endif

/* eml22__APIGammaRayMeasureExt has binding name 'eml22__APIGammaRayMeasureExt' for type 'eml22:APIGammaRayMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt (-357)

#endif

/* eml22__APIGammaRayMeasure has binding name 'eml22__APIGammaRayMeasure' for type 'eml22:APIGammaRayMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure (-356)

#endif

/* eml22__AngularVelocityMeasureExt has binding name 'eml22__AngularVelocityMeasureExt' for type 'eml22:AngularVelocityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt (-355)

#endif

/* eml22__AngularVelocityMeasure has binding name 'eml22__AngularVelocityMeasure' for type 'eml22:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure (-354)

#endif

/* eml22__AngularAccelerationMeasureExt has binding name 'eml22__AngularAccelerationMeasureExt' for type 'eml22:AngularAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt (-353)

#endif

/* eml22__AngularAccelerationMeasure has binding name 'eml22__AngularAccelerationMeasure' for type 'eml22:AngularAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure (-352)

#endif

/* eml22__AnglePerVolumeMeasureExt has binding name 'eml22__AnglePerVolumeMeasureExt' for type 'eml22:AnglePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt (-351)

#endif

/* eml22__AnglePerVolumeMeasure has binding name 'eml22__AnglePerVolumeMeasure' for type 'eml22:AnglePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure (-350)

#endif

/* eml22__AnglePerLengthMeasureExt has binding name 'eml22__AnglePerLengthMeasureExt' for type 'eml22:AnglePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt (-349)

#endif

/* eml22__AnglePerLengthMeasure has binding name 'eml22__AnglePerLengthMeasure' for type 'eml22:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure (-348)

#endif

/* eml22__AmountOfSubstancePerVolumeMeasureExt has binding name 'eml22__AmountOfSubstancePerVolumeMeasureExt' for type 'eml22:AmountOfSubstancePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt (-347)

#endif

/* eml22__AmountOfSubstancePerVolumeMeasure has binding name 'eml22__AmountOfSubstancePerVolumeMeasure' for type 'eml22:AmountOfSubstancePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure (-346)

#endif

/* eml22__AmountOfSubstancePerTimePerAreaMeasureExt has binding name 'eml22__AmountOfSubstancePerTimePerAreaMeasureExt' for type 'eml22:AmountOfSubstancePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt (-345)

#endif

/* eml22__AmountOfSubstancePerTimePerAreaMeasure has binding name 'eml22__AmountOfSubstancePerTimePerAreaMeasure' for type 'eml22:AmountOfSubstancePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure (-344)

#endif

/* eml22__AmountOfSubstancePerTimeMeasureExt has binding name 'eml22__AmountOfSubstancePerTimeMeasureExt' for type 'eml22:AmountOfSubstancePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt (-343)

#endif

/* eml22__AmountOfSubstancePerTimeMeasure has binding name 'eml22__AmountOfSubstancePerTimeMeasure' for type 'eml22:AmountOfSubstancePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure (-342)

#endif

/* eml22__AmountOfSubstancePerAreaMeasureExt has binding name 'eml22__AmountOfSubstancePerAreaMeasureExt' for type 'eml22:AmountOfSubstancePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt (-341)

#endif

/* eml22__AmountOfSubstancePerAreaMeasure has binding name 'eml22__AmountOfSubstancePerAreaMeasure' for type 'eml22:AmountOfSubstancePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure (-340)

#endif

/* eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-339)

#endif

/* eml22__AmountOfSubstancePerAmountOfSubstanceMeasure has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceMeasure' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure (-338)

#endif

/* eml22__AmountOfSubstanceMeasureExt has binding name 'eml22__AmountOfSubstanceMeasureExt' for type 'eml22:AmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt (-337)

#endif

/* eml22__AmountOfSubstanceMeasure has binding name 'eml22__AmountOfSubstanceMeasure' for type 'eml22:AmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure (-336)

#endif

/* eml22__ActivityOfRadioactivityMeasureExt has binding name 'eml22__ActivityOfRadioactivityMeasureExt' for type 'eml22:ActivityOfRadioactivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt (-335)

#endif

/* eml22__ActivityOfRadioactivityMeasure has binding name 'eml22__ActivityOfRadioactivityMeasure' for type 'eml22:ActivityOfRadioactivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure (-334)

#endif

/* eml22__AbsorbedDoseMeasureExt has binding name 'eml22__AbsorbedDoseMeasureExt' for type 'eml22:AbsorbedDoseMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt (-333)

#endif

/* eml22__AbsorbedDoseMeasure has binding name 'eml22__AbsorbedDoseMeasure' for type 'eml22:AbsorbedDoseMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure (-332)

#endif

/* eml22__WellVerticalDepthCoord has binding name 'eml22__WellVerticalDepthCoord' for type 'eml22:WellVerticalDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellVerticalDepthCoord (-331)

#endif

/* eml22__TvdInterval has binding name 'eml22__TvdInterval' for type 'eml22:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval (-330)

#endif

/* eml22__StringMeasure has binding name 'eml22__StringMeasure' for type 'eml22:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure (-329)

#endif

/* eml22__StringExternalArray has binding name 'eml22__StringExternalArray' for type 'eml22:StringExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray (-328)

#endif

/* eml22__StringConstantArray has binding name 'eml22__StringConstantArray' for type 'eml22:StringConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray (-327)

#endif

/* eml22__MeasuredDepthCoord has binding name 'eml22__MeasuredDepthCoord' for type 'eml22:MeasuredDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_2_eml22__MeasuredDepthCoord (-326)

#endif

/* eml22__MdInterval has binding name 'eml22__MdInterval' for type 'eml22:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval (-325)

#endif

/* eml22__JaggedArray has binding name 'eml22__JaggedArray' for type 'eml22:JaggedArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray (-324)

#endif

/* eml22__IntegerRangeArray has binding name 'eml22__IntegerRangeArray' for type 'eml22:IntegerRangeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray (-323)

#endif

/* eml22__IntegerLatticeArray has binding name 'eml22__IntegerLatticeArray' for type 'eml22:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray (-322)

#endif

/* eml22__IntegerExternalArray has binding name 'eml22__IntegerExternalArray' for type 'eml22:IntegerExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray (-321)

#endif

/* eml22__IntegerConstantArray has binding name 'eml22__IntegerConstantArray' for type 'eml22:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray (-320)

#endif

/* eml22__IntegerArrayFromBooleanMaskArray has binding name 'eml22__IntegerArrayFromBooleanMaskArray' for type 'eml22:IntegerArrayFromBooleanMaskArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray (-319)

#endif

/* eml22__GenericMeasure has binding name 'eml22__GenericMeasure' for type 'eml22:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure (-318)

#endif

/* eml22__FloatingPointLatticeArray has binding name 'eml22__FloatingPointLatticeArray' for type 'eml22:FloatingPointLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray (-317)

#endif

/* eml22__FloatingPointExternalArray has binding name 'eml22__FloatingPointExternalArray' for type 'eml22:FloatingPointExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray (-316)

#endif

/* eml22__FloatingPointConstantArray has binding name 'eml22__FloatingPointConstantArray' for type 'eml22:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray (-315)

#endif

/* eml22__FloatExternalArray has binding name 'eml22__FloatExternalArray' for type 'eml22:FloatExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray (-314)

#endif

/* eml22__DummyType has binding name 'eml22__DummyType' for type 'eml22:DummyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DummyType
#define SOAP_TYPE_gsoap_eml2_2_eml22__DummyType (-313)

#endif

/* eml22__DoubleExternalArray has binding name 'eml22__DoubleExternalArray' for type 'eml22:DoubleExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray (-312)

#endif

/* eml22__Cost has binding name 'eml22__Cost' for type 'eml22:Cost' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Cost
#define SOAP_TYPE_gsoap_eml2_2_eml22__Cost (-311)

#endif

/* eml22__BooleanExternalArray has binding name 'eml22__BooleanExternalArray' for type 'eml22:BooleanExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray (-310)

#endif

/* eml22__BooleanConstantArray has binding name 'eml22__BooleanConstantArray' for type 'eml22:BooleanConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray (-309)

#endif

/* eml22__BooleanArrayFromIndexArray has binding name 'eml22__BooleanArrayFromIndexArray' for type 'eml22:BooleanArrayFromIndexArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray (-308)

#endif

/* eml22__AuthorityQualifiedName has binding name 'eml22__AuthorityQualifiedName' for type 'eml22:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName (-307)

#endif

/* eml22__AbstractValueArray has binding name 'eml22__AbstractValueArray' for type 'eml22:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray (-306)

#endif

/* eml22__AbstractStringArray has binding name 'eml22__AbstractStringArray' for type 'eml22:AbstractStringArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray (-305)

#endif

/* eml22__AbstractNumericArray has binding name 'eml22__AbstractNumericArray' for type 'eml22:AbstractNumericArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray (-304)

#endif

/* eml22__AbstractIntegerArray has binding name 'eml22__AbstractIntegerArray' for type 'eml22:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray (-303)

#endif

/* eml22__AbstractFloatingPointArray has binding name 'eml22__AbstractFloatingPointArray' for type 'eml22:AbstractFloatingPointArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray (-302)

#endif

/* eml22__AbstractBooleanArray has binding name 'eml22__AbstractBooleanArray' for type 'eml22:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray (-301)

#endif

/* eml22__ObjectAlias has binding name 'eml22__ObjectAlias' for type 'eml22:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias (-300)

#endif

/* eml22__ExtensionNameValue has binding name 'eml22__ExtensionNameValue' for type 'eml22:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue (-299)

#endif

/* eml22__CustomData has binding name 'eml22__CustomData' for type 'eml22:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CustomData
#define SOAP_TYPE_gsoap_eml2_2_eml22__CustomData (-298)

#endif

/* eml22__Citation has binding name 'eml22__Citation' for type 'eml22:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Citation
#define SOAP_TYPE_gsoap_eml2_2_eml22__Citation (-297)

#endif

/* eml22__AbstractObject has binding name 'eml22__AbstractObject' for type 'eml22:AbstractObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject (-296)

#endif

/* witsml2__WellboreCompletion has binding name 'witsml2__WellboreCompletion' for type 'witsml2:WellboreCompletion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreCompletion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreCompletion (-295)

#endif

/* witsml2__SlotsInterval has binding name 'witsml2__SlotsInterval' for type 'witsml2:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SlotsInterval (-294)

#endif

/* witsml2__PerforationStatusHistory has binding name 'witsml2__PerforationStatusHistory' for type 'witsml2:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationStatusHistory (-293)

#endif

/* witsml2__PerforationSetInterval has binding name 'witsml2__PerforationSetInterval' for type 'witsml2:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSetInterval (-292)

#endif

/* witsml2__OpenHoleInterval has binding name 'witsml2__OpenHoleInterval' for type 'witsml2:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OpenHoleInterval (-291)

#endif

/* witsml2__IntervalStatusHistory has binding name 'witsml2__IntervalStatusHistory' for type 'witsml2:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IntervalStatusHistory (-290)

#endif

/* witsml2__GravelPackInterval has binding name 'witsml2__GravelPackInterval' for type 'witsml2:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GravelPackInterval (-289)

#endif

/* witsml2__ContactIntervalSet has binding name 'witsml2__ContactIntervalSet' for type 'witsml2:ContactIntervalSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ContactIntervalSet (-288)

#endif

/* witsml2__WellCompletion has binding name 'witsml2__WellCompletion' for type 'witsml2:WellCompletion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellCompletion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellCompletion (-287)

#endif

/* witsml2__CompletionStatusHistory has binding name 'witsml2__CompletionStatusHistory' for type 'witsml2:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CompletionStatusHistory (-286)

#endif

/* witsml2__WellboreMarkerSet has binding name 'witsml2__WellboreMarkerSet' for type 'witsml2:WellboreMarkerSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarkerSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarkerSet (-285)

#endif

/* witsml2__WellboreMarker has binding name 'witsml2__WellboreMarker' for type 'witsml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreMarker (-284)

#endif

/* witsml2__WobStatistics has binding name 'witsml2__WobStatistics' for type 'witsml2:WobStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WobStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WobStatistics (-283)

#endif

/* witsml2__TorqueStatistics has binding name 'witsml2__TorqueStatistics' for type 'witsml2:TorqueStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueStatistics (-282)

#endif

/* witsml2__TorqueCurrentStatistics has binding name 'witsml2__TorqueCurrentStatistics' for type 'witsml2:TorqueCurrentStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueCurrentStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TorqueCurrentStatistics (-281)

#endif

/* witsml2__RpmStatistics has binding name 'witsml2__RpmStatistics' for type 'witsml2:RpmStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RpmStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RpmStatistics (-280)

#endif

/* witsml2__RopStatistics has binding name 'witsml2__RopStatistics' for type 'witsml2:RopStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RopStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RopStatistics (-279)

#endif

/* witsml2__MudLogStringParameter has binding name 'witsml2__MudLogStringParameter' for type 'witsml2:MudLogStringParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogStringParameter (-278)

#endif

/* witsml2__MudlogReportInterval has binding name 'witsml2__MudlogReportInterval' for type 'witsml2:MudlogReportInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudlogReportInterval (-277)

#endif

/* witsml2__MudLogReport has binding name 'witsml2__MudLogReport' for type 'witsml2:MudLogReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogReport (-276)

#endif

/* witsml2__MudLogPressureParameter has binding name 'witsml2__MudLogPressureParameter' for type 'witsml2:MudLogPressureParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureParameter (-275)

#endif

/* witsml2__MudLogPressureGradientParameter has binding name 'witsml2__MudLogPressureGradientParameter' for type 'witsml2:MudLogPressureGradientParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureGradientParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogPressureGradientParameter (-274)

#endif

/* witsml2__MudLogParameter has binding name 'witsml2__MudLogParameter' for type 'witsml2:MudLogParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogParameter (-273)

#endif

/* witsml2__MudLogForceParameter has binding name 'witsml2__MudLogForceParameter' for type 'witsml2:MudLogForceParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogForceParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogForceParameter (-272)

#endif

/* witsml2__MudLogConcentrationParameter has binding name 'witsml2__MudLogConcentrationParameter' for type 'witsml2:MudLogConcentrationParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogConcentrationParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLogConcentrationParameter (-271)

#endif

/* witsml2__MudGas has binding name 'witsml2__MudGas' for type 'witsml2:MudGas' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudGas (-270)

#endif

/* witsml2__MudDensityStatistics has binding name 'witsml2__MudDensityStatistics' for type 'witsml2:MudDensityStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudDensityStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudDensityStatistics (-269)

#endif

/* witsml2__GasPeak has binding name 'witsml2__GasPeak' for type 'witsml2:GasPeak' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GasPeak (-268)

#endif

/* witsml2__GasInMud has binding name 'witsml2__GasInMud' for type 'witsml2:GasInMud' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GasInMud
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GasInMud (-267)

#endif

/* witsml2__EcdStatistics has binding name 'witsml2__EcdStatistics' for type 'witsml2:EcdStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EcdStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EcdStatistics (-266)

#endif

/* witsml2__DxcStatistics has binding name 'witsml2__DxcStatistics' for type 'witsml2:DxcStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DxcStatistics
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DxcStatistics (-265)

#endif

/* witsml2__DrillingParameters has binding name 'witsml2__DrillingParameters' for type 'witsml2:DrillingParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParameters (-264)

#endif

/* witsml2__Chromatograph has binding name 'witsml2__Chromatograph' for type 'witsml2:Chromatograph' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Chromatograph
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Chromatograph (-263)

#endif

/* witsml2__WellboreGeology has binding name 'witsml2__WellboreGeology' for type 'witsml2:WellboreGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeology (-262)

#endif

/* witsml2__ShowEvaluationInterval has binding name 'witsml2__ShowEvaluationInterval' for type 'witsml2:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluationInterval (-261)

#endif

/* witsml2__ShowEvaluation has binding name 'witsml2__ShowEvaluation' for type 'witsml2:ShowEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShowEvaluation (-260)

#endif

/* witsml2__LithostratigraphicUnit has binding name 'witsml2__LithostratigraphicUnit' for type 'witsml2:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LithostratigraphicUnit (-259)

#endif

/* witsml2__LithologyQualifier has binding name 'witsml2__LithologyQualifier' for type 'witsml2:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LithologyQualifier (-258)

#endif

/* witsml2__InterpretedIntervalLithology has binding name 'witsml2__InterpretedIntervalLithology' for type 'witsml2:InterpretedIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedIntervalLithology (-257)

#endif

/* witsml2__InterpretedGeologyInterval has binding name 'witsml2__InterpretedGeologyInterval' for type 'witsml2:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeologyInterval (-256)

#endif

/* witsml2__InterpretedGeology has binding name 'witsml2__InterpretedGeology' for type 'witsml2:InterpretedGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__InterpretedGeology (-255)

#endif

/* witsml2__GeochronologicalUnit has binding name 'witsml2__GeochronologicalUnit' for type 'witsml2:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeochronologicalUnit (-254)

#endif

/* witsml2__CuttingsIntervalShow has binding name 'witsml2__CuttingsIntervalShow' for type 'witsml2:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalShow (-253)

#endif

/* witsml2__CuttingsIntervalLithology has binding name 'witsml2__CuttingsIntervalLithology' for type 'witsml2:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsIntervalLithology (-252)

#endif

/* witsml2__CuttingsGeologyInterval has binding name 'witsml2__CuttingsGeologyInterval' for type 'witsml2:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeologyInterval (-251)

#endif

/* witsml2__CuttingsGeology has binding name 'witsml2__CuttingsGeology' for type 'witsml2:CuttingsGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CuttingsGeology (-250)

#endif

/* witsml2__SurveySection has binding name 'witsml2__SurveySection' for type 'witsml2:SurveySection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurveySection (-249)

#endif

/* witsml2__SurveyProgram has binding name 'witsml2__SurveyProgram' for type 'witsml2:SurveyProgram' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurveyProgram
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurveyProgram (-248)

#endif

/* witsml2__StimTubular has binding name 'witsml2__StimTubular' for type 'witsml2:StimTubular' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimTubular (-247)

#endif

/* witsml2__StimStepTest has binding name 'witsml2__StimStepTest' for type 'witsml2:StimStepTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepTest (-246)

#endif

/* witsml2__StimStepDownTest has binding name 'witsml2__StimStepDownTest' for type 'witsml2:StimStepDownTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimStepDownTest (-245)

#endif

/* witsml2__StimShutInPressure has binding name 'witsml2__StimShutInPressure' for type 'witsml2:StimShutInPressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimShutInPressure (-244)

#endif

/* witsml2__StimReservoirInterval has binding name 'witsml2__StimReservoirInterval' for type 'witsml2:StimReservoirInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimReservoirInterval (-243)

#endif

/* witsml2__StimPumpFlowBackTestStep has binding name 'witsml2__StimPumpFlowBackTestStep' for type 'witsml2:StimPumpFlowBackTestStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTestStep (-242)

#endif

/* witsml2__StimPumpFlowBackTest has binding name 'witsml2__StimPumpFlowBackTest' for type 'witsml2:StimPumpFlowBackTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPumpFlowBackTest (-241)

#endif

/* witsml2__StimProppantAgent has binding name 'witsml2__StimProppantAgent' for type 'witsml2:StimProppantAgent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimProppantAgent (-240)

#endif

/* witsml2__StimPressureFlowRate has binding name 'witsml2__StimPressureFlowRate' for type 'witsml2:StimPressureFlowRate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPressureFlowRate (-239)

#endif

/* witsml2__StimPerforationClusterSet has binding name 'witsml2__StimPerforationClusterSet' for type 'witsml2:StimPerforationClusterSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationClusterSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationClusterSet (-238)

#endif

/* witsml2__StimPerforationCluster has binding name 'witsml2__StimPerforationCluster' for type 'witsml2:StimPerforationCluster' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimPerforationCluster (-237)

#endif

/* witsml2__StimMaterialQuantity has binding name 'witsml2__StimMaterialQuantity' for type 'witsml2:StimMaterialQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterialQuantity (-236)

#endif

/* witsml2__StimMaterial has binding name 'witsml2__StimMaterial' for type 'witsml2:StimMaterial' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterial
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimMaterial (-235)

#endif

/* witsml2__StimJobStep has binding name 'witsml2__StimJobStep' for type 'witsml2:StimJobStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStep (-234)

#endif

/* witsml2__StimJobStage has binding name 'witsml2__StimJobStage' for type 'witsml2:StimJobStage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobStage (-233)

#endif

/* witsml2__StimJobMaterialCatalog has binding name 'witsml2__StimJobMaterialCatalog' for type 'witsml2:StimJobMaterialCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobMaterialCatalog
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobMaterialCatalog (-232)

#endif

/* witsml2__StimJobLogCatalog has binding name 'witsml2__StimJobLogCatalog' for type 'witsml2:StimJobLogCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobLogCatalog (-231)

#endif

/* witsml2__StimJobDiversion has binding name 'witsml2__StimJobDiversion' for type 'witsml2:StimJobDiversion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversion
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiversion (-230)

#endif

/* witsml2__StimJobDiagnosticSession has binding name 'witsml2__StimJobDiagnosticSession' for type 'witsml2:StimJobDiagnosticSession' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJobDiagnosticSession (-229)

#endif

/* witsml2__StimJob has binding name 'witsml2__StimJob' for type 'witsml2:StimJob' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimJob
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimJob (-228)

#endif

/* witsml2__StimISO13503_USCORE5Point has binding name 'witsml2__StimISO13503_USCORE5Point' for type 'witsml2:StimISO13503_5Point' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE5Point (-227)

#endif

/* witsml2__StimISO13503_USCORE2Properties has binding name 'witsml2__StimISO13503_USCORE2Properties' for type 'witsml2:StimISO13503_2Properties' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimISO13503_USCORE2Properties (-226)

#endif

/* witsml2__StimFluid has binding name 'witsml2__StimFluid' for type 'witsml2:StimFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFluid (-225)

#endif

/* witsml2__StimFlowPath has binding name 'witsml2__StimFlowPath' for type 'witsml2:StimFlowPath' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPath
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFlowPath (-224)

#endif

/* witsml2__StimFetTest has binding name 'witsml2__StimFetTest' for type 'witsml2:StimFetTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimFetTest (-223)

#endif

/* witsml2__StimEvent has binding name 'witsml2__StimEvent' for type 'witsml2:StimEvent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimEvent (-222)

#endif

/* witsml2__StimAdditive has binding name 'witsml2__StimAdditive' for type 'witsml2:StimAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StimAdditive (-221)

#endif

/* witsml2__ISO13503_USCORE2SieveAnalysisData has binding name 'witsml2__ISO13503_USCORE2SieveAnalysisData' for type 'witsml2:ISO13503_2SieveAnalysisData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2SieveAnalysisData (-220)

#endif

/* witsml2__ISO13503_USCORE2CrushTestData has binding name 'witsml2__ISO13503_USCORE2CrushTestData' for type 'witsml2:ISO13503_2CrushTestData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ISO13503_USCORE2CrushTestData (-219)

#endif

/* witsml2__Risk has binding name 'witsml2__Risk' for type 'witsml2:Risk' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Risk
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Risk (-218)

#endif

/* witsml2__SurfaceEquipment has binding name 'witsml2__SurfaceEquipment' for type 'witsml2:SurfaceEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SurfaceEquipment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SurfaceEquipment (-217)

#endif

/* witsml2__Shaker has binding name 'witsml2__Shaker' for type 'witsml2:Shaker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Shaker (-216)

#endif

/* witsml2__RigUtilization has binding name 'witsml2__RigUtilization' for type 'witsml2:RigUtilization' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RigUtilization
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RigUtilization (-215)

#endif

/* witsml2__Rig has binding name 'witsml2__Rig' for type 'witsml2:Rig' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Rig
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Rig (-214)

#endif

/* witsml2__Pit has binding name 'witsml2__Pit' for type 'witsml2:Pit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Pit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Pit (-213)

#endif

/* witsml2__MudPump has binding name 'witsml2__MudPump' for type 'witsml2:MudPump' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudPump (-212)

#endif

/* witsml2__Hydrocyclone has binding name 'witsml2__Hydrocyclone' for type 'witsml2:Hydrocyclone' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Hydrocyclone (-211)

#endif

/* witsml2__Degasser has binding name 'witsml2__Degasser' for type 'witsml2:Degasser' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Degasser (-210)

#endif

/* witsml2__Centrifuge has binding name 'witsml2__Centrifuge' for type 'witsml2:Centrifuge' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Centrifuge (-209)

#endif

/* witsml2__BopComponent has binding name 'witsml2__BopComponent' for type 'witsml2:BopComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BopComponent (-208)

#endif

/* witsml2__Bop has binding name 'witsml2__Bop' for type 'witsml2:Bop' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Bop
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Bop (-207)

#endif

/* witsml2__XyAccelerometer has binding name 'witsml2__XyAccelerometer' for type 'witsml2:XyAccelerometer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__XyAccelerometer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__XyAccelerometer (-206)

#endif

/* witsml2__WeightingFunctionDictionary has binding name 'witsml2__WeightingFunctionDictionary' for type 'witsml2:WeightingFunctionDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunctionDictionary
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunctionDictionary (-205)

#endif

/* witsml2__WeightingFunction has binding name 'witsml2__WeightingFunction' for type 'witsml2:WeightingFunction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunction
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WeightingFunction (-204)

#endif

/* witsml2__ToolErrorModelDictionary has binding name 'witsml2__ToolErrorModelDictionary' for type 'witsml2:ToolErrorModelDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModelDictionary
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModelDictionary (-203)

#endif

/* witsml2__ToolErrorModel has binding name 'witsml2__ToolErrorModel' for type 'witsml2:ToolErrorModel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ToolErrorModel (-202)

#endif

/* witsml2__PlaneAngleOperatingRange has binding name 'witsml2__PlaneAngleOperatingRange' for type 'witsml2:PlaneAngleOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PlaneAngleOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PlaneAngleOperatingRange (-201)

#endif

/* witsml2__Parameter has binding name 'witsml2__Parameter' for type 'witsml2:Parameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Parameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Parameter (-200)

#endif

/* witsml2__OperatingConstraints has binding name 'witsml2__OperatingConstraints' for type 'witsml2:OperatingConstraints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConstraints
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OperatingConstraints (-199)

#endif

/* witsml2__GyroToolConfiguration has binding name 'witsml2__GyroToolConfiguration' for type 'witsml2:GyroToolConfiguration' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GyroToolConfiguration
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GyroToolConfiguration (-198)

#endif

/* witsml2__Gyro has binding name 'witsml2__Gyro' for type 'witsml2:Gyro' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Gyro
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Gyro (-197)

#endif

/* witsml2__ErrorTermValue has binding name 'witsml2__ErrorTermValue' for type 'witsml2:ErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermValue (-196)

#endif

/* witsml2__ErrorTermDictionary has binding name 'witsml2__ErrorTermDictionary' for type 'witsml2:ErrorTermDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermDictionary
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTermDictionary (-195)

#endif

/* witsml2__ErrorTerm has binding name 'witsml2__ErrorTerm' for type 'witsml2:ErrorTerm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTerm
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ErrorTerm (-194)

#endif

/* witsml2__CustomOperatingRange has binding name 'witsml2__CustomOperatingRange' for type 'witsml2:CustomOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CustomOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CustomOperatingRange (-193)

#endif

/* witsml2__ContinuousAzimuthFormula has binding name 'witsml2__ContinuousAzimuthFormula' for type 'witsml2:ContinuousAzimuthFormula' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ContinuousAzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ContinuousAzimuthFormula (-192)

#endif

/* witsml2__AzimuthRange has binding name 'witsml2__AzimuthRange' for type 'witsml2:AzimuthRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthRange (-191)

#endif

/* witsml2__AzimuthFormula has binding name 'witsml2__AzimuthFormula' for type 'witsml2:AzimuthFormula' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AzimuthFormula (-190)

#endif

/* witsml2__Authorization has binding name 'witsml2__Authorization' for type 'witsml2:Authorization' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Authorization
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Authorization (-189)

#endif

/* witsml2__AbstractOperatingRange has binding name 'witsml2__AbstractOperatingRange' for type 'witsml2:AbstractOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractOperatingRange (-188)

#endif

/* witsml2__TrajectoryStation has binding name 'witsml2__TrajectoryStation' for type 'witsml2:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TrajectoryStation (-187)

#endif

/* witsml2__Trajectory has binding name 'witsml2__Trajectory' for type 'witsml2:Trajectory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Trajectory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Trajectory (-186)

#endif

/* witsml2__StnTrajValid has binding name 'witsml2__StnTrajValid' for type 'witsml2:StnTrajValid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajValid (-185)

#endif

/* witsml2__StnTrajRawData has binding name 'witsml2__StnTrajRawData' for type 'witsml2:StnTrajRawData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajRawData (-184)

#endif

/* witsml2__StnTrajMatrixCov has binding name 'witsml2__StnTrajMatrixCov' for type 'witsml2:StnTrajMatrixCov' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajMatrixCov (-183)

#endif

/* witsml2__StnTrajCorUsed has binding name 'witsml2__StnTrajCorUsed' for type 'witsml2:StnTrajCorUsed' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StnTrajCorUsed (-182)

#endif

/* witsml2__RefWellboreTrajectoryStation has binding name 'witsml2__RefWellboreTrajectoryStation' for type 'witsml2:RefWellboreTrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreTrajectoryStation (-181)

#endif

/* witsml2__Weather has binding name 'witsml2__Weather' for type 'witsml2:Weather' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Weather
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Weather (-180)

#endif

/* witsml2__SupportCraft has binding name 'witsml2__SupportCraft' for type 'witsml2:SupportCraft' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_2_witsml2__SupportCraft (-179)

#endif

/* witsml2__ShakerScreen has binding name 'witsml2__ShakerScreen' for type 'witsml2:ShakerScreen' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerScreen
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerScreen (-178)

#endif

/* witsml2__ShakerOp has binding name 'witsml2__ShakerOp' for type 'witsml2:ShakerOp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ShakerOp (-177)

#endif

/* witsml2__Scr has binding name 'witsml2__Scr' for type 'witsml2:Scr' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Scr
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Scr (-176)

#endif

/* witsml2__RigResponse has binding name 'witsml2__RigResponse' for type 'witsml2:RigResponse' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RigResponse
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RigResponse (-175)

#endif

/* witsml2__PumpOp has binding name 'witsml2__PumpOp' for type 'witsml2:PumpOp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PumpOp (-174)

#endif

/* witsml2__PitVolume has binding name 'witsml2__PitVolume' for type 'witsml2:PitVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PitVolume (-173)

#endif

/* witsml2__Personnel has binding name 'witsml2__Personnel' for type 'witsml2:Personnel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Personnel (-172)

#endif

/* witsml2__OpsReport has binding name 'witsml2__OpsReport' for type 'witsml2:OpsReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OpsReport (-171)

#endif

/* witsml2__MudVolume has binding name 'witsml2__MudVolume' for type 'witsml2:MudVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudVolume
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudVolume (-170)

#endif

/* witsml2__MudLosses has binding name 'witsml2__MudLosses' for type 'witsml2:MudLosses' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MudLosses
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MudLosses (-169)

#endif

/* witsml2__ItemWtPerUnit has binding name 'witsml2__ItemWtPerUnit' for type 'witsml2:ItemWtPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ItemWtPerUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ItemWtPerUnit (-168)

#endif

/* witsml2__ItemVolPerUnit has binding name 'witsml2__ItemVolPerUnit' for type 'witsml2:ItemVolPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ItemVolPerUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ItemVolPerUnit (-167)

#endif

/* witsml2__Inventory has binding name 'witsml2__Inventory' for type 'witsml2:Inventory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Inventory (-166)

#endif

/* witsml2__Incident has binding name 'witsml2__Incident' for type 'witsml2:Incident' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Incident
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Incident (-165)

#endif

/* witsml2__Hse has binding name 'witsml2__Hse' for type 'witsml2:Hse' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Hse
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Hse (-164)

#endif

/* witsml2__DayCost has binding name 'witsml2__DayCost' for type 'witsml2:DayCost' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DayCost (-163)

#endif

/* witsml2__AnchorState has binding name 'witsml2__AnchorState' for type 'witsml2:AnchorState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AnchorState (-162)

#endif

/* witsml2__AbstractItemWtOrVolPerUnit has binding name 'witsml2__AbstractItemWtOrVolPerUnit' for type 'witsml2:AbstractItemWtOrVolPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractItemWtOrVolPerUnit
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractItemWtOrVolPerUnit (-161)

#endif

/* witsml2__TubingConnectionType has binding name 'witsml2__TubingConnectionType' for type 'witsml2:TubingConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubingConnectionType (-160)

#endif

/* witsml2__StringEquipmentSet has binding name 'witsml2__StringEquipmentSet' for type 'witsml2:StringEquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipmentSet (-159)

#endif

/* witsml2__StringEquipment has binding name 'witsml2__StringEquipment' for type 'witsml2:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StringEquipment (-158)

#endif

/* witsml2__StringAccessory has binding name 'witsml2__StringAccessory' for type 'witsml2:StringAccessory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__StringAccessory
#define SOAP_TYPE_gsoap_eml2_2_witsml2__StringAccessory (-157)

#endif

/* witsml2__RodConnectionType has binding name 'witsml2__RodConnectionType' for type 'witsml2:RodConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RodConnectionType (-156)

#endif

/* witsml2__ReferenceContainer has binding name 'witsml2__ReferenceContainer' for type 'witsml2:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ReferenceContainer (-155)

#endif

/* witsml2__PerfSlot has binding name 'witsml2__PerfSlot' for type 'witsml2:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerfSlot (-154)

#endif

/* witsml2__PerforationSets has binding name 'witsml2__PerforationSets' for type 'witsml2:PerforationSets' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSets
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSets (-153)

#endif

/* witsml2__PerforationSet has binding name 'witsml2__PerforationSet' for type 'witsml2:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforationSet (-152)

#endif

/* witsml2__PerfHole has binding name 'witsml2__PerfHole' for type 'witsml2:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerfHole (-151)

#endif

/* witsml2__OtherConnectionType has binding name 'witsml2__OtherConnectionType' for type 'witsml2:OtherConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__OtherConnectionType (-150)

#endif

/* witsml2__ObjectSequence has binding name 'witsml2__ObjectSequence' for type 'witsml2:ObjectSequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectSequence (-149)

#endif

/* witsml2__GeologyFeature has binding name 'witsml2__GeologyFeature' for type 'witsml2:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeologyFeature (-148)

#endif

/* witsml2__ExtPropNameValue has binding name 'witsml2__ExtPropNameValue' for type 'witsml2:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ExtPropNameValue (-147)

#endif

/* witsml2__EventRefInfo has binding name 'witsml2__EventRefInfo' for type 'witsml2:EventRefInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventRefInfo (-146)

#endif

/* witsml2__EventInfo has binding name 'witsml2__EventInfo' for type 'witsml2:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventInfo (-145)

#endif

/* witsml2__EquipmentSet has binding name 'witsml2__EquipmentSet' for type 'witsml2:EquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentSet (-144)

#endif

/* witsml2__EquipmentConnection has binding name 'witsml2__EquipmentConnection' for type 'witsml2:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EquipmentConnection (-143)

#endif

/* witsml2__Equipment has binding name 'witsml2__Equipment' for type 'witsml2:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Equipment (-142)

#endif

/* witsml2__DownholeStringSet has binding name 'witsml2__DownholeStringSet' for type 'witsml2:DownholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringSet (-141)

#endif

/* witsml2__DownholeString has binding name 'witsml2__DownholeString' for type 'witsml2:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeString (-140)

#endif

/* witsml2__DownholeComponent has binding name 'witsml2__DownholeComponent' for type 'witsml2:DownholeComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponent (-139)

#endif

/* witsml2__CasingConnectionType has binding name 'witsml2__CasingConnectionType' for type 'witsml2:CasingConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CasingConnectionType (-138)

#endif

/* witsml2__BoreholeStringSet has binding name 'witsml2__BoreholeStringSet' for type 'witsml2:BoreholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringSet (-137)

#endif

/* witsml2__BoreholeString has binding name 'witsml2__BoreholeString' for type 'witsml2:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeString (-136)

#endif

/* witsml2__Borehole has binding name 'witsml2__Borehole' for type 'witsml2:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Borehole (-135)

#endif

/* witsml2__Assembly has binding name 'witsml2__Assembly' for type 'witsml2:Assembly' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Assembly
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Assembly (-134)

#endif

/* witsml2__AbstractConnectionType has binding name 'witsml2__AbstractConnectionType' for type 'witsml2:AbstractConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractConnectionType (-133)

#endif

/* witsml2__WellCMLedger has binding name 'witsml2__WellCMLedger' for type 'witsml2:WellCMLedger' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellCMLedger
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellCMLedger (-132)

#endif

/* witsml2__WaitingOnExtension has binding name 'witsml2__WaitingOnExtension' for type 'witsml2:WaitingOnExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WaitingOnExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WaitingOnExtension (-131)

#endif

/* witsml2__PressureTestExtension has binding name 'witsml2__PressureTestExtension' for type 'witsml2:PressureTestExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PressureTestExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PressureTestExtension (-130)

#endif

/* witsml2__PerforatingExtension has binding name 'witsml2__PerforatingExtension' for type 'witsml2:PerforatingExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PerforatingExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PerforatingExtension (-129)

#endif

/* witsml2__Perforating has binding name 'witsml2__Perforating' for type 'witsml2:Perforating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Perforating (-128)

#endif

/* witsml2__Participant has binding name 'witsml2__Participant' for type 'witsml2:Participant' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Participant
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Participant (-127)

#endif

/* witsml2__MemberObject has binding name 'witsml2__MemberObject' for type 'witsml2:MemberObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MemberObject (-126)

#endif

/* witsml2__LostCirculationExtension has binding name 'witsml2__LostCirculationExtension' for type 'witsml2:LostCirculationExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LostCirculationExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LostCirculationExtension (-125)

#endif

/* witsml2__JobExtension has binding name 'witsml2__JobExtension' for type 'witsml2:JobExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__JobExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__JobExtension (-124)

#endif

/* witsml2__FluidReportExtension has binding name 'witsml2__FluidReportExtension' for type 'witsml2:FluidReportExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FluidReportExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FluidReportExtension (-123)

#endif

/* witsml2__EventType has binding name 'witsml2__EventType' for type 'witsml2:EventType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__EventType
#define SOAP_TYPE_gsoap_eml2_2_witsml2__EventType (-122)

#endif

/* witsml2__DownholeStringReference has binding name 'witsml2__DownholeStringReference' for type 'witsml2:DownholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeStringReference (-121)

#endif

/* witsml2__DownholeExtension has binding name 'witsml2__DownholeExtension' for type 'witsml2:DownholeExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeExtension (-120)

#endif

/* witsml2__DownholeComponentReference has binding name 'witsml2__DownholeComponentReference' for type 'witsml2:DownholeComponentReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponentReference
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DownholeComponentReference (-119)

#endif

/* witsml2__DirectionalSurveyExtension has binding name 'witsml2__DirectionalSurveyExtension' for type 'witsml2:DirectionalSurveyExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DirectionalSurveyExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DirectionalSurveyExtension (-118)

#endif

/* witsml2__CleanFillExtension has binding name 'witsml2__CleanFillExtension' for type 'witsml2:CleanFillExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CleanFillExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CleanFillExtension (-117)

#endif

/* witsml2__CementExtension has binding name 'witsml2__CementExtension' for type 'witsml2:CementExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementExtension (-116)

#endif

/* witsml2__BoreholeStringReference has binding name 'witsml2__BoreholeStringReference' for type 'witsml2:BoreholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BoreholeStringReference (-115)

#endif

/* witsml2__BHPExtension has binding name 'witsml2__BHPExtension' for type 'witsml2:BHPExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BHPExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BHPExtension (-114)

#endif

/* witsml2__AcidizefracExtension has binding name 'witsml2__AcidizefracExtension' for type 'witsml2:AcidizefracExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AcidizefracExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AcidizefracExtension (-113)

#endif

/* witsml2__AbstractEventExtension has binding name 'witsml2__AbstractEventExtension' for type 'witsml2:AbstractEventExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractEventExtension (-112)

#endif

/* witsml2__DepthRegTrackCurve has binding name 'witsml2__DepthRegTrackCurve' for type 'witsml2:DepthRegTrackCurve' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrackCurve (-111)

#endif

/* witsml2__DepthRegTrack has binding name 'witsml2__DepthRegTrack' for type 'witsml2:DepthRegTrack' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegTrack (-110)

#endif

/* witsml2__DepthRegRectangle has binding name 'witsml2__DepthRegRectangle' for type 'witsml2:DepthRegRectangle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegRectangle (-109)

#endif

/* witsml2__DepthRegPoint has binding name 'witsml2__DepthRegPoint' for type 'witsml2:DepthRegPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegPoint
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegPoint (-108)

#endif

/* witsml2__DepthRegParameter has binding name 'witsml2__DepthRegParameter' for type 'witsml2:DepthRegParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegParameter (-107)

#endif

/* witsml2__DepthRegLogSection has binding name 'witsml2__DepthRegLogSection' for type 'witsml2:DepthRegLogSection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogSection (-106)

#endif

/* witsml2__DepthRegLogRect has binding name 'witsml2__DepthRegLogRect' for type 'witsml2:DepthRegLogRect' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegLogRect (-105)

#endif

/* witsml2__DepthRegImage has binding name 'witsml2__DepthRegImage' for type 'witsml2:DepthRegImage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegImage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegImage (-104)

#endif

/* witsml2__DepthRegCalibrationPoint has binding name 'witsml2__DepthRegCalibrationPoint' for type 'witsml2:DepthRegCalibrationPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthRegCalibrationPoint (-103)

#endif

/* witsml2__TimeIndexValue has binding name 'witsml2__TimeIndexValue' for type 'witsml2:TimeIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TimeIndexValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TimeIndexValue (-102)

#endif

/* witsml2__PointMetadata has binding name 'witsml2__PointMetadata' for type 'witsml2:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PointMetadata (-101)

#endif

/* witsml2__PassIndexedDepth has binding name 'witsml2__PassIndexedDepth' for type 'witsml2:PassIndexedDepth' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__PassIndexedDepth
#define SOAP_TYPE_gsoap_eml2_2_witsml2__PassIndexedDepth (-100)

#endif

/* witsml2__ObjectContext has binding name 'witsml2__ObjectContext' for type 'witsml2:ObjectContext' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ObjectContext (-99)

#endif

/* witsml2__LogChannelAxis has binding name 'witsml2__LogChannelAxis' for type 'witsml2:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_2_witsml2__LogChannelAxis (-98)

#endif

/* witsml2__Log has binding name 'witsml2__Log' for type 'witsml2:Log' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Log
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Log (-97)

#endif

/* witsml2__IndexRangeContext has binding name 'witsml2__IndexRangeContext' for type 'witsml2:IndexRangeContext' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__IndexRangeContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__IndexRangeContext (-96)

#endif

/* witsml2__DepthIndexValue has binding name 'witsml2__DepthIndexValue' for type 'witsml2:DepthIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DepthIndexValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DepthIndexValue (-95)

#endif

/* witsml2__ChannelValueContext has binding name 'witsml2__ChannelValueContext' for type 'witsml2:ChannelValueContext' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelValueContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelValueContext (-94)

#endif

/* witsml2__ChannelSet has binding name 'witsml2__ChannelSet' for type 'witsml2:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelSet (-93)

#endif

/* witsml2__ChannelIndex has binding name 'witsml2__ChannelIndex' for type 'witsml2:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelIndex (-92)

#endif

/* witsml2__ChannelData has binding name 'witsml2__ChannelData' for type 'witsml2:ChannelData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelData
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ChannelData (-91)

#endif

/* witsml2__Channel has binding name 'witsml2__Channel' for type 'witsml2:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Channel
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Channel (-90)

#endif

/* witsml2__AbstractLogDataContext has binding name 'witsml2__AbstractLogDataContext' for type 'witsml2:AbstractLogDataContext' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractLogDataContext (-89)

#endif

/* witsml2__AbstractIndexValue has binding name 'witsml2__AbstractIndexValue' for type 'witsml2:AbstractIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractIndexValue (-88)

#endif

/* witsml2__WellboreGeometrySection has binding name 'witsml2__WellboreGeometrySection' for type 'witsml2:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometrySection (-87)

#endif

/* witsml2__WellboreGeometry has binding name 'witsml2__WellboreGeometry' for type 'witsml2:WellboreGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometry
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellboreGeometry (-86)

#endif

/* witsml2__FluidLocation has binding name 'witsml2__FluidLocation' for type 'witsml2:FluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FluidLocation (-85)

#endif

/* witsml2__CementStageReport has binding name 'witsml2__CementStageReport' for type 'witsml2:CementStageReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageReport (-84)

#endif

/* witsml2__CementStageDesign has binding name 'witsml2__CementStageDesign' for type 'witsml2:CementStageDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementStageDesign (-83)

#endif

/* witsml2__CementPumpScheduleStep has binding name 'witsml2__CementPumpScheduleStep' for type 'witsml2:CementPumpScheduleStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementPumpScheduleStep (-82)

#endif

/* witsml2__CementJobReport has binding name 'witsml2__CementJobReport' for type 'witsml2:CementJobReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobReport (-81)

#endif

/* witsml2__CementJobEvaluation has binding name 'witsml2__CementJobEvaluation' for type 'witsml2:CementJobEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobEvaluation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobEvaluation (-80)

#endif

/* witsml2__CementJobDesign has binding name 'witsml2__CementJobDesign' for type 'witsml2:CementJobDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobDesign
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJobDesign (-79)

#endif

/* witsml2__CementJob has binding name 'witsml2__CementJob' for type 'witsml2:CementJob' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementJob
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementJob (-78)

#endif

/* witsml2__CementingFluid has binding name 'witsml2__CementingFluid' for type 'witsml2:CementingFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementingFluid (-77)

#endif

/* witsml2__CementDesignStage has binding name 'witsml2__CementDesignStage' for type 'witsml2:CementDesignStage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementDesignStage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementDesignStage (-76)

#endif

/* witsml2__CementAdditive has binding name 'witsml2__CementAdditive' for type 'witsml2:CementAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_2_witsml2__CementAdditive (-75)

#endif

/* witsml2__AbstractCementStage has binding name 'witsml2__AbstractCementStage' for type 'witsml2:AbstractCementStage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementStage
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementStage (-74)

#endif

/* witsml2__AbstractCementJob has binding name 'witsml2__AbstractCementJob' for type 'witsml2:AbstractCementJob' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementJob
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractCementJob (-73)

#endif

/* witsml2__NameTag has binding name 'witsml2__NameTag' for type 'witsml2:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_2_witsml2__NameTag (-72)

#endif

/* witsml2__TubularComponent has binding name 'witsml2__TubularComponent' for type 'witsml2:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TubularComponent (-71)

#endif

/* witsml2__Tubular has binding name 'witsml2__Tubular' for type 'witsml2:Tubular' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Tubular
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Tubular (-70)

#endif

/* witsml2__Stabilizer has binding name 'witsml2__Stabilizer' for type 'witsml2:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Stabilizer (-69)

#endif

/* witsml2__Sensor has binding name 'witsml2__Sensor' for type 'witsml2:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Sensor (-68)

#endif

/* witsml2__RotarySteerableTool has binding name 'witsml2__RotarySteerableTool' for type 'witsml2:RotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RotarySteerableTool (-67)

#endif

/* witsml2__Nozzle has binding name 'witsml2__Nozzle' for type 'witsml2:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Nozzle (-66)

#endif

/* witsml2__MwdTool has binding name 'witsml2__MwdTool' for type 'witsml2:MwdTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__MwdTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__MwdTool (-65)

#endif

/* witsml2__Motor has binding name 'witsml2__Motor' for type 'witsml2:Motor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Motor
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Motor (-64)

#endif

/* witsml2__Jar has binding name 'witsml2__Jar' for type 'witsml2:Jar' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Jar
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Jar (-63)

#endif

/* witsml2__HoleOpener has binding name 'witsml2__HoleOpener' for type 'witsml2:HoleOpener' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpener
#define SOAP_TYPE_gsoap_eml2_2_witsml2__HoleOpener (-62)

#endif

/* witsml2__Connection has binding name 'witsml2__Connection' for type 'witsml2:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Connection
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Connection (-61)

#endif

/* witsml2__BitRecord has binding name 'witsml2__BitRecord' for type 'witsml2:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BitRecord (-60)

#endif

/* witsml2__BendOffset has binding name 'witsml2__BendOffset' for type 'witsml2:BendOffset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BendOffset
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BendOffset (-59)

#endif

/* witsml2__BendAngle has binding name 'witsml2__BendAngle' for type 'witsml2:BendAngle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BendAngle
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BendAngle (-58)

#endif

/* witsml2__Bend has binding name 'witsml2__Bend' for type 'witsml2:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Bend
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Bend (-57)

#endif

/* witsml2__AbstractRotarySteerableTool has binding name 'witsml2__AbstractRotarySteerableTool' for type 'witsml2:AbstractRotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractRotarySteerableTool (-56)

#endif

/* witsml2__TimestampedCommentString has binding name 'witsml2__TimestampedCommentString' for type 'witsml2:TimestampedCommentString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_2_witsml2__TimestampedCommentString (-55)

#endif

/* witsml2__Rheometer has binding name 'witsml2__Rheometer' for type 'witsml2:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Rheometer (-54)

#endif

/* witsml2__DrillReportWellTestInfo has binding name 'witsml2__DrillReportWellTestInfo' for type 'witsml2:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellTestInfo (-53)

#endif

/* witsml2__DrillReportWellboreInfo has binding name 'witsml2__DrillReportWellboreInfo' for type 'witsml2:DrillReportWellboreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportWellboreInfo (-52)

#endif

/* witsml2__DrillReportSurveyStation has binding name 'witsml2__DrillReportSurveyStation' for type 'witsml2:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportSurveyStation (-51)

#endif

/* witsml2__DrillReportStratInfo has binding name 'witsml2__DrillReportStratInfo' for type 'witsml2:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStratInfo (-50)

#endif

/* witsml2__DrillReportStatusInfo has binding name 'witsml2__DrillReportStatusInfo' for type 'witsml2:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportStatusInfo (-49)

#endif

/* witsml2__DrillReportPorePressure has binding name 'witsml2__DrillReportPorePressure' for type 'witsml2:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPorePressure (-48)

#endif

/* witsml2__DrillReportPerfInfo has binding name 'witsml2__DrillReportPerfInfo' for type 'witsml2:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportPerfInfo (-47)

#endif

/* witsml2__DrillReportLogInfo has binding name 'witsml2__DrillReportLogInfo' for type 'witsml2:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLogInfo (-46)

#endif

/* witsml2__DrillReportLithShowInfo has binding name 'witsml2__DrillReportLithShowInfo' for type 'witsml2:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportLithShowInfo (-45)

#endif

/* witsml2__DrillReportGasReadingInfo has binding name 'witsml2__DrillReportGasReadingInfo' for type 'witsml2:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportGasReadingInfo (-44)

#endif

/* witsml2__DrillReportFormTestInfo has binding name 'witsml2__DrillReportFormTestInfo' for type 'witsml2:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportFormTestInfo (-43)

#endif

/* witsml2__DrillReportEquipFailureInfo has binding name 'witsml2__DrillReportEquipFailureInfo' for type 'witsml2:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportEquipFailureInfo (-42)

#endif

/* witsml2__DrillReportCoreInfo has binding name 'witsml2__DrillReportCoreInfo' for type 'witsml2:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportCoreInfo (-41)

#endif

/* witsml2__DrillReportControlIncidentInfo has binding name 'witsml2__DrillReportControlIncidentInfo' for type 'witsml2:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReportControlIncidentInfo (-40)

#endif

/* witsml2__DrillReport has binding name 'witsml2__DrillReport' for type 'witsml2:DrillReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillReport (-39)

#endif

/* witsml2__DrillActivity has binding name 'witsml2__DrillActivity' for type 'witsml2:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillActivity (-38)

#endif

/* witsml2__BottomHoleStaticTemperature has binding name 'witsml2__BottomHoleStaticTemperature' for type 'witsml2:BottomHoleStaticTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleStaticTemperature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleStaticTemperature (-37)

#endif

/* witsml2__BottomHoleCirculatingTemperature has binding name 'witsml2__BottomHoleCirculatingTemperature' for type 'witsml2:BottomHoleCirculatingTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleCirculatingTemperature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BottomHoleCirculatingTemperature (-36)

#endif

/* witsml2__AbstractBottomHoleTemperature has binding name 'witsml2__AbstractBottomHoleTemperature' for type 'witsml2:AbstractBottomHoleTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractBottomHoleTemperature (-35)

#endif

/* witsml2__RheometerViscosity has binding name 'witsml2__RheometerViscosity' for type 'witsml2:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RheometerViscosity (-34)

#endif

/* witsml2__FluidsReport has binding name 'witsml2__FluidsReport' for type 'witsml2:FluidsReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__FluidsReport
#define SOAP_TYPE_gsoap_eml2_2_witsml2__FluidsReport (-33)

#endif

/* witsml2__Fluid has binding name 'witsml2__Fluid' for type 'witsml2:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Fluid (-32)

#endif

/* witsml2__DrillingParams has binding name 'witsml2__DrillingParams' for type 'witsml2:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_2_witsml2__DrillingParams (-31)

#endif

/* witsml2__BhaRun has binding name 'witsml2__BhaRun' for type 'witsml2:BhaRun' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__BhaRun
#define SOAP_TYPE_gsoap_eml2_2_witsml2__BhaRun (-30)

#endif

/* witsml2__WellElevationCoord has binding name 'witsml2__WellElevationCoord' for type 'witsml2:WellElevationCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellElevationCoord (-29)

#endif

/* witsml2__WellDatum has binding name 'witsml2__WellDatum' for type 'witsml2:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_2_witsml2__WellDatum (-28)

#endif

/* witsml2__Well has binding name 'witsml2__Well' for type 'witsml2:Well' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Well
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Well (-27)

#endif

/* witsml2__RefWellboreRig has binding name 'witsml2__RefWellboreRig' for type 'witsml2:RefWellboreRig' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellboreRig (-26)

#endif

/* witsml2__RefWellbore has binding name 'witsml2__RefWellbore' for type 'witsml2:RefWellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellbore
#define SOAP_TYPE_gsoap_eml2_2_witsml2__RefWellbore (-25)

#endif

/* witsml2__ReferencePoint has binding name 'witsml2__ReferencePoint' for type 'witsml2:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ReferencePoint (-24)

#endif

/* witsml2__ProjectedWellLocation has binding name 'witsml2__ProjectedWellLocation' for type 'witsml2:ProjectedWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__ProjectedWellLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__ProjectedWellLocation (-23)

#endif

/* witsml2__GeodeticWellLocation has binding name 'witsml2__GeodeticWellLocation' for type 'witsml2:GeodeticWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__GeodeticWellLocation (-22)

#endif

/* witsml2__AbstractWellLocation has binding name 'witsml2__AbstractWellLocation' for type 'witsml2:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_2_witsml2__AbstractWellLocation (-21)

#endif

/* witsml2__Wellbore has binding name 'witsml2__Wellbore' for type 'witsml2:Wellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Wellbore
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Wellbore (-20)

#endif

/* witsml2__Attachment has binding name 'witsml2__Attachment' for type 'witsml2:Attachment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_witsml2__Attachment
#define SOAP_TYPE_gsoap_eml2_2_witsml2__Attachment (-19)

#endif

/* xsd__gYear has binding name 'xsd__gYear' for type 'xsd:gYear' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__gYear
#define SOAP_TYPE_gsoap_eml2_2_xsd__gYear (-18)

#endif

/* xsd__date has binding name 'xsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__date
#define SOAP_TYPE_gsoap_eml2_2_xsd__date (-17)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_2_xsd__anyURI (-16)

#endif

/* xsd__ID has binding name 'xsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__ID
#define SOAP_TYPE_gsoap_eml2_2_xsd__ID (-15)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__string
#define SOAP_TYPE_gsoap_eml2_2_std__string (-14)

#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__base64Binary
#define SOAP_TYPE_gsoap_eml2_2_xsd__base64Binary (-8)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault (-845619207)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason (-845619206)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail (-845619203)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code (-845619201)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header (-845619200)

#endif

/* _gco__DateTime has binding name '_gco__DateTime' for type '' */
#ifndef SOAP_TYPE__gco__DateTime
#define SOAP_TYPE__gco__DateTime (-2380)

#endif

/* eml22__TimeStamp has binding name 'eml22__TimeStamp' for type 'eml22:TimeStamp' */
#ifndef SOAP_TYPE_eml22__TimeStamp
#define SOAP_TYPE_eml22__TimeStamp (-1070)

#endif

/* xsd__dateTime has binding name 'xsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-13)

#endif

/* struct tm has binding name 'tm' for type 'tm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_tm
#define SOAP_TYPE_gsoap_eml2_2_tm (-12)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Reason (-845619209)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Detail (-845619208)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Code (-845619202)

#endif

/* gml__GeodeticCRSPropertyType * has binding name 'PointerTogml__GeodeticCRSPropertyType' for type 'gml:GeodeticCRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSPropertyType (-2253)

#endif

/* gml__VerticalDatumPropertyType * has binding name 'PointerTogml__VerticalDatumPropertyType' for type 'gml:VerticalDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumPropertyType (-2252)

#endif

/* gml__VerticalCSPropertyType * has binding name 'PointerTogml__VerticalCSPropertyType' for type 'gml:VerticalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSPropertyType (-2251)

#endif

/* gml__GeneralConversionPropertyType * has binding name 'PointerTogml__GeneralConversionPropertyType' for type 'gml:GeneralConversionPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeneralConversionPropertyType (-2250)

#endif

/* gml__EllipsoidPropertyType * has binding name 'PointerTogml__EllipsoidPropertyType' for type 'gml:EllipsoidPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidPropertyType (-2249)

#endif

/* gml__PrimeMeridianPropertyType * has binding name 'PointerTogml__PrimeMeridianPropertyType' for type 'gml:PrimeMeridianPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianPropertyType (-2248)

#endif

/* gml__GeodeticDatumPropertyType * has binding name 'PointerTogml__GeodeticDatumPropertyType' for type 'gml:GeodeticDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumPropertyType (-2247)

#endif

/* gml__SphericalCSPropertyType * has binding name 'PointerTogml__SphericalCSPropertyType' for type 'gml:SphericalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSPropertyType (-2245)

#endif

/* gml__CartesianCSPropertyType * has binding name 'PointerTogml__CartesianCSPropertyType' for type 'gml:CartesianCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSPropertyType (-2244)

#endif

/* gml__EllipsoidalCSPropertyType * has binding name 'PointerTogml__EllipsoidalCSPropertyType' for type 'gml:EllipsoidalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSPropertyType (-2243)

#endif

/* gml__CRSPropertyType * has binding name 'PointerTogml__CRSPropertyType' for type 'gml:CRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CRSPropertyType (-2242)

#endif

/* _gml__coordinateOperationAccuracy * has binding name 'PointerTo_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__coordinateOperationAccuracy (-2240)

#endif

/* _gml__secondDefiningParameter * has binding name 'PointerTo_gml__secondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__secondDefiningParameter (-2239)

#endif

/* gml__AngleType * has binding name 'PointerTogml__AngleType' for type 'gml:AngleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__AngleType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__AngleType (-2238)

#endif

/* enum gml__AggregationType * has binding name 'PointerTogml__AggregationType' for type 'gml:AggregationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__AggregationType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__AggregationType (-2237)

#endif

/* gml__CoordinateSystemAxisPropertyType * has binding name 'PointerTogml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisPropertyType (-2235)

#endif

/* _gml__domainOfValidity * has binding name 'PointerTo_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__domainOfValidity (-2232)

#endif

/* std::string * has binding name 'PointerToeml22__UnitOfMeasureExt' for type 'eml22:UnitOfMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UnitOfMeasureExt (-2231)

#endif

/* eml22__IntegerConstantArray * has binding name 'PointerToeml22__IntegerConstantArray' for type 'eml22:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IntegerConstantArray (-2229)

#endif

/* eml22__AbstractBooleanArray * has binding name 'PointerToeml22__AbstractBooleanArray' for type 'eml22:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractBooleanArray (-2228)

#endif

/* eml22__FloatingPointConstantArray * has binding name 'PointerToeml22__FloatingPointConstantArray' for type 'eml22:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FloatingPointConstantArray (-2226)

#endif

/* gml__RelatedTimeType * has binding name 'PointerTogml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__RelatedTimeType (-2224)

#endif

/* enum eml22__ReferencePressureKind * has binding name 'PointerToeml22__ReferencePressureKind' for type 'eml22:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressureKind (-2223)

#endif

/* eml22__ExternalDataset * has binding name 'PointerToeml22__ExternalDataset' for type 'eml22:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDataset (-2222)

#endif

/* gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType' for type 'gmd:CI_OnLineFunctionCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-2221)

#endif

/* gmd__URL_USCOREPropertyType * has binding name 'PointerTogmd__URL_USCOREPropertyType' for type 'gmd:URL_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__URL_USCOREPropertyType (-2220)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType' for type 'gmd:CI_OnlineResource_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType (-2219)

#endif

/* gmd__CI_USCOREAddress_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREAddress_USCOREPropertyType' for type 'gmd:CI_Address_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREPropertyType (-2218)

#endif

/* gmd__CI_USCORETelephone_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORETelephone_USCOREPropertyType' for type 'gmd:CI_Telephone_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREPropertyType (-2217)

#endif

/* gmd__CI_USCORERoleCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORERoleCode_USCOREPropertyType' for type 'gmd:CI_RoleCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORERoleCode_USCOREPropertyType (-2216)

#endif

/* gmd__CI_USCOREContact_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREContact_USCOREPropertyType' for type 'gmd:CI_Contact_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREPropertyType (-2215)

#endif

/* gmd__CI_USCOREDateTypeCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType' for type 'gmd:CI_DateTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType (-2214)

#endif

/* gmd__CI_USCORESeries_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORESeries_USCOREPropertyType' for type 'gmd:CI_Series_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREPropertyType (-2213)

#endif

/* gmd__CI_USCOREPresentationFormCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-2211)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType (-2209)

#endif

/* gco__Date_USCOREPropertyType * has binding name 'PointerTogco__Date_USCOREPropertyType' for type 'gco:Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREPropertyType (-2207)

#endif

/* gmd__CI_USCOREDate_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREPropertyType (-2205)

#endif

/* gmd__DQ_USCOREResult_USCOREPropertyType * has binding name 'PointerTogmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREResult_USCOREPropertyType (-2203)

#endif

/* gco__DateTime_USCOREPropertyType * has binding name 'PointerTogco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__DateTime_USCOREPropertyType (-2201)

#endif

/* gmd__CI_USCORECitation_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORECitation_USCOREPropertyType' for type 'gmd:CI_Citation_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREPropertyType (-2200)

#endif

/* gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType * has binding name 'PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType' for type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-2199)

#endif

/* gmd__MD_USCOREIdentifier_USCOREPropertyType * has binding name 'PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType (-2198)

#endif

/* gsr__SC_USCORECRS_USCOREPropertyType * has binding name 'PointerTogsr__SC_USCORECRS_USCOREPropertyType' for type 'gsr:SC_CRS_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogsr__SC_USCORECRS_USCOREPropertyType (-2196)

#endif

/* gco__Real_USCOREPropertyType * has binding name 'PointerTogco__Real_USCOREPropertyType' for type 'gco:Real_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Real_USCOREPropertyType (-2195)

#endif

/* gts__TM_USCOREPrimitive_USCOREPropertyType * has binding name 'PointerTogts__TM_USCOREPrimitive_USCOREPropertyType' for type 'gts:TM_Primitive_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogts__TM_USCOREPrimitive_USCOREPropertyType (-2194)

#endif

/* gco__Boolean_USCOREPropertyType * has binding name 'PointerTogco__Boolean_USCOREPropertyType' for type 'gco:Boolean_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Boolean_USCOREPropertyType (-2193)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType (-2191)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType (-2189)

#endif

/* gmd__EX_USCOREGeographicExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType (-2187)

#endif

/* gco__CharacterString_USCOREPropertyType * has binding name 'PointerTogco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__CharacterString_USCOREPropertyType (-2186)

#endif

/* enum _gml__RelatedTimeType_relativePosition * has binding name 'PointerTo_gml__RelatedTimeType_relativePosition' for type 'gml:RelatedTimeType-relativePosition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__RelatedTimeType_relativePosition (-2185)

#endif

/* eml22__AbstractGraphicalInformation * has binding name 'PointerToeml22__AbstractGraphicalInformation' for type 'eml22:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGraphicalInformation (-2182)

#endif

/* eml22__FailingRule * has binding name 'PointerToeml22__FailingRule' for type 'eml22:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FailingRule (-2180)

#endif

/* eml22__IndexRange * has binding name 'PointerToeml22__IndexRange' for type 'eml22:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IndexRange
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IndexRange (-2179)

#endif

/* gml__VerticalCRSType * has binding name 'PointerTogml__VerticalCRSType' for type 'gml:VerticalCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCRSType (-2178)

#endif

/* gml__ProjectedCRSType * has binding name 'PointerTogml__ProjectedCRSType' for type 'gml:ProjectedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__ProjectedCRSType (-2177)

#endif

/* std::string * has binding name 'PointerToeml22__LengthUomExt' for type 'eml22:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthUomExt (-2176)

#endif

/* eml22__AuthorityQualifiedName * has binding name 'PointerToeml22__AuthorityQualifiedName' for type 'eml22:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AuthorityQualifiedName (-2175)

#endif

/* std::string * has binding name 'PointerToeml22__ReferenceConditionExt' for type 'eml22:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferenceConditionExt (-2173)

#endif

/* eml22__ReferencePressure * has binding name 'PointerToeml22__ReferencePressure' for type 'eml22:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressure (-2172)

#endif

/* eml22__TimeSeriesParentage * has binding name 'PointerToeml22__TimeSeriesParentage' for type 'eml22:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeSeriesParentage (-2171)

#endif

/* eml22__GeologicTime * has binding name 'PointerToeml22__GeologicTime' for type 'eml22:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__GeologicTime (-2169)

#endif

/* eml22__PropertyKind * has binding name 'PointerToeml22__PropertyKind' for type 'eml22:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PropertyKind (-2167)

#endif

/* eml22__ParameterTemplate * has binding name 'PointerToeml22__ParameterTemplate' for type 'eml22:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ParameterTemplate (-2165)

#endif

/* witsml2__ContactIntervalSet * has binding name 'PointerTowitsml2__ContactIntervalSet' for type 'witsml2:ContactIntervalSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ContactIntervalSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ContactIntervalSet (-2164)

#endif

/* witsml2__CompletionStatusHistory * has binding name 'PointerTowitsml2__CompletionStatusHistory' for type 'witsml2:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CompletionStatusHistory (-2162)

#endif

/* witsml2__WellboreMarker * has binding name 'PointerTowitsml2__WellboreMarker' for type 'witsml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreMarker (-2160)

#endif

/* witsml2__MudLogParameter * has binding name 'PointerTowitsml2__MudLogParameter' for type 'witsml2:MudLogParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudLogParameter (-2158)

#endif

/* witsml2__MudlogReportInterval * has binding name 'PointerTowitsml2__MudlogReportInterval' for type 'witsml2:MudlogReportInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudlogReportInterval (-2156)

#endif

/* eml22__ForcePerVolumeMeasureExt * has binding name 'PointerToeml22__ForcePerVolumeMeasureExt' for type 'eml22:ForcePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForcePerVolumeMeasureExt (-2155)

#endif

/* eml22__ForceMeasureExt * has binding name 'PointerToeml22__ForceMeasureExt' for type 'eml22:ForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForceMeasureExt (-2154)

#endif

/* eml22__VolumePerVolumeMeasureExt * has binding name 'PointerToeml22__VolumePerVolumeMeasureExt' for type 'eml22:VolumePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerVolumeMeasureExt (-2153)

#endif

/* witsml2__CuttingsGeology * has binding name 'PointerTowitsml2__CuttingsGeology' for type 'witsml2:CuttingsGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsGeology
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsGeology (-2152)

#endif

/* witsml2__InterpretedGeology * has binding name 'PointerTowitsml2__InterpretedGeology' for type 'witsml2:InterpretedGeology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InterpretedGeology
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InterpretedGeology (-2151)

#endif

/* witsml2__ShowEvaluation * has binding name 'PointerTowitsml2__ShowEvaluation' for type 'witsml2:ShowEvaluation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowEvaluation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowEvaluation (-2150)

#endif

/* witsml2__ShowEvaluationInterval * has binding name 'PointerTowitsml2__ShowEvaluationInterval' for type 'witsml2:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowEvaluationInterval (-2148)

#endif

/* witsml2__InterpretedIntervalLithology * has binding name 'PointerTowitsml2__InterpretedIntervalLithology' for type 'witsml2:InterpretedIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InterpretedIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InterpretedIntervalLithology (-2147)

#endif

/* witsml2__LithostratigraphicUnit * has binding name 'PointerTowitsml2__LithostratigraphicUnit' for type 'witsml2:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LithostratigraphicUnit (-2145)

#endif

/* witsml2__GeochronologicalUnit * has binding name 'PointerTowitsml2__GeochronologicalUnit' for type 'witsml2:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeochronologicalUnit (-2143)

#endif

/* witsml2__InterpretedGeologyInterval * has binding name 'PointerTowitsml2__InterpretedGeologyInterval' for type 'witsml2:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InterpretedGeologyInterval (-2141)

#endif

/* witsml2__CuttingsIntervalLithology * has binding name 'PointerTowitsml2__CuttingsIntervalLithology' for type 'witsml2:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsIntervalLithology (-2139)

#endif

/* eml22__IlluminanceMeasure * has binding name 'PointerToeml22__IlluminanceMeasure' for type 'eml22:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IlluminanceMeasure (-2138)

#endif

/* witsml2__CuttingsGeologyInterval * has binding name 'PointerTowitsml2__CuttingsGeologyInterval' for type 'witsml2:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsGeologyInterval (-2136)

#endif

/* witsml2__SurveySection * has binding name 'PointerTowitsml2__SurveySection' for type 'witsml2:SurveySection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SurveySection (-2134)

#endif

/* witsml2__StimISO13503_USCORE5Point * has binding name 'PointerTowitsml2__StimISO13503_USCORE5Point' for type 'witsml2:StimISO13503_5Point' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimISO13503_USCORE5Point (-2132)

#endif

/* witsml2__StimISO13503_USCORE2Properties * has binding name 'PointerTowitsml2__StimISO13503_USCORE2Properties' for type 'witsml2:StimISO13503_2Properties' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimISO13503_USCORE2Properties (-2130)

#endif

/* enum witsml2__ProppantAgentKind * has binding name 'PointerTowitsml2__ProppantAgentKind' for type 'witsml2:ProppantAgentKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ProppantAgentKind
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ProppantAgentKind (-2129)

#endif

/* eml22__AreaPerMassMeasure * has binding name 'PointerToeml22__AreaPerMassMeasure' for type 'eml22:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AreaPerMassMeasure (-2128)

#endif

/* witsml2__StimJobDiversion * has binding name 'PointerTowitsml2__StimJobDiversion' for type 'witsml2:StimJobDiversion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobDiversion
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobDiversion (-2127)

#endif

/* witsml2__StimReservoirInterval * has binding name 'PointerTowitsml2__StimReservoirInterval' for type 'witsml2:StimReservoirInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimReservoirInterval (-2125)

#endif

/* witsml2__StimFlowPath * has binding name 'PointerTowitsml2__StimFlowPath' for type 'witsml2:StimFlowPath' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFlowPath
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFlowPath (-2124)

#endif

/* witsml2__StimJobStep * has binding name 'PointerTowitsml2__StimJobStep' for type 'witsml2:StimJobStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobStep (-2122)

#endif

/* witsml2__StimEvent * has binding name 'PointerTowitsml2__StimEvent' for type 'witsml2:StimEvent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimEvent (-2120)

#endif

/* witsml2__StimShutInPressure * has binding name 'PointerTowitsml2__StimShutInPressure' for type 'witsml2:StimShutInPressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimShutInPressure (-2118)

#endif

/* witsml2__StimJobDiagnosticSession * has binding name 'PointerTowitsml2__StimJobDiagnosticSession' for type 'witsml2:StimJobDiagnosticSession' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobDiagnosticSession (-2116)

#endif

/* witsml2__StimJobLogCatalog * has binding name 'PointerTowitsml2__StimJobLogCatalog' for type 'witsml2:StimJobLogCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobLogCatalog (-2114)

#endif

/* witsml2__StimJobMaterialCatalog * has binding name 'PointerTowitsml2__StimJobMaterialCatalog' for type 'witsml2:StimJobMaterialCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobMaterialCatalog
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobMaterialCatalog (-2113)

#endif

/* witsml2__StimJobStage * has binding name 'PointerTowitsml2__StimJobStage' for type 'witsml2:StimJobStage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobStage (-2111)

#endif

/* enum witsml2__PIDXCommodityCode * has binding name 'PointerTowitsml2__PIDXCommodityCode' for type 'witsml2:PIDXCommodityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PIDXCommodityCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PIDXCommodityCode (-2110)

#endif

/* witsml2__StimPerforationClusterSet * has binding name 'PointerTowitsml2__StimPerforationClusterSet' for type 'witsml2:StimPerforationClusterSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPerforationClusterSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPerforationClusterSet (-2109)

#endif

/* enum witsml2__StimAdditiveKind * has binding name 'PointerTowitsml2__StimAdditiveKind' for type 'witsml2:StimAdditiveKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimAdditiveKind
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimAdditiveKind (-2108)

#endif

/* short * has binding name 'PointerTowitsml2__LevelIntegerCode' for type 'witsml2:LevelIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LevelIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LevelIntegerCode (-2107)

#endif

/* enum witsml2__RiskSubCategory * has binding name 'PointerTowitsml2__RiskSubCategory' for type 'witsml2:RiskSubCategory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RiskSubCategory
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RiskSubCategory (-2105)

#endif

/* witsml2__SurfaceEquipment * has binding name 'PointerTowitsml2__SurfaceEquipment' for type 'witsml2:SurfaceEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SurfaceEquipment
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SurfaceEquipment (-2104)

#endif

/* witsml2__Degasser * has binding name 'PointerTowitsml2__Degasser' for type 'witsml2:Degasser' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Degasser (-2102)

#endif

/* witsml2__Hydrocyclone * has binding name 'PointerTowitsml2__Hydrocyclone' for type 'witsml2:Hydrocyclone' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Hydrocyclone (-2100)

#endif

/* witsml2__Centrifuge * has binding name 'PointerTowitsml2__Centrifuge' for type 'witsml2:Centrifuge' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Centrifuge (-2098)

#endif

/* witsml2__MudPump * has binding name 'PointerTowitsml2__MudPump' for type 'witsml2:MudPump' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudPump (-2096)

#endif

/* witsml2__Pit * has binding name 'PointerTowitsml2__Pit' for type 'witsml2:Pit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Pit
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Pit (-2094)

#endif

/* witsml2__Bop * has binding name 'PointerTowitsml2__Bop' for type 'witsml2:Bop' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Bop
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Bop (-2093)

#endif

/* witsml2__Shaker * has binding name 'PointerTowitsml2__Shaker' for type 'witsml2:Shaker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Shaker (-2091)

#endif

/* enum witsml2__DriveType * has binding name 'PointerTowitsml2__DriveType' for type 'witsml2:DriveType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DriveType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DriveType (-2090)

#endif

/* enum witsml2__DrawWorksType * has binding name 'PointerTowitsml2__DrawWorksType' for type 'witsml2:DrawWorksType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrawWorksType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrawWorksType (-2089)

#endif

/* enum witsml2__DerrickType * has binding name 'PointerTowitsml2__DerrickType' for type 'witsml2:DerrickType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DerrickType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DerrickType (-2088)

#endif

/* std::string * has binding name 'PointerToxsd__gYear' for type 'xsd:gYear' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__gYear
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__gYear (-2087)

#endif

/* enum witsml2__RigType * has binding name 'PointerTowitsml2__RigType' for type 'witsml2:RigType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RigType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RigType (-2086)

#endif

/* witsml2__WeightingFunction * has binding name 'PointerTowitsml2__WeightingFunction' for type 'witsml2:WeightingFunction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WeightingFunction
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WeightingFunction (-2084)

#endif

/* witsml2__ContinuousAzimuthFormula * has binding name 'PointerTowitsml2__ContinuousAzimuthFormula' for type 'witsml2:ContinuousAzimuthFormula' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ContinuousAzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ContinuousAzimuthFormula (-2082)

#endif

/* witsml2__AzimuthFormula * has binding name 'PointerTowitsml2__AzimuthFormula' for type 'witsml2:AzimuthFormula' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AzimuthFormula (-2081)

#endif

/* enum witsml2__ErrorKind * has binding name 'PointerTowitsml2__ErrorKind' for type 'witsml2:ErrorKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ErrorKind
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ErrorKind (-2080)

#endif

/* witsml2__ToolErrorModel * has binding name 'PointerTowitsml2__ToolErrorModel' for type 'witsml2:ToolErrorModel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ToolErrorModel (-2078)

#endif

/* witsml2__GyroToolConfiguration * has binding name 'PointerTowitsml2__GyroToolConfiguration' for type 'witsml2:GyroToolConfiguration' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GyroToolConfiguration
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GyroToolConfiguration (-2077)

#endif

/* witsml2__ErrorTermValue * has binding name 'PointerTowitsml2__ErrorTermValue' for type 'witsml2:ErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ErrorTermValue
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ErrorTermValue (-2075)

#endif

/* witsml2__OperatingConstraints * has binding name 'PointerTowitsml2__OperatingConstraints' for type 'witsml2:OperatingConstraints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__OperatingConstraints
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__OperatingConstraints (-2074)

#endif

/* witsml2__Authorization * has binding name 'PointerTowitsml2__Authorization' for type 'witsml2:Authorization' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Authorization
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Authorization (-2073)

#endif

/* enum witsml2__ToolKind * has binding name 'PointerTowitsml2__ToolKind' for type 'witsml2:ToolKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ToolKind
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ToolKind (-2069)

#endif

/* witsml2__ErrorTerm * has binding name 'PointerTowitsml2__ErrorTerm' for type 'witsml2:ErrorTerm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ErrorTerm
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ErrorTerm (-2067)

#endif

/* enum witsml2__GyroMode * has binding name 'PointerTowitsml2__GyroMode' for type 'witsml2:GyroMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GyroMode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GyroMode (-2066)

#endif

/* enum witsml2__GyroAxisCombination * has binding name 'PointerTowitsml2__GyroAxisCombination' for type 'witsml2:GyroAxisCombination' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GyroAxisCombination
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GyroAxisCombination (-2065)

#endif

/* enum witsml2__AziRef * has binding name 'PointerTowitsml2__AziRef' for type 'witsml2:AziRef' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AziRef
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AziRef (-2064)

#endif

/* witsml2__PumpOp * has binding name 'PointerTowitsml2__PumpOp' for type 'witsml2:PumpOp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpOp (-2062)

#endif

/* witsml2__PitVolume * has binding name 'PointerTowitsml2__PitVolume' for type 'witsml2:PitVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PitVolume (-2060)

#endif

/* witsml2__Scr * has binding name 'PointerTowitsml2__Scr' for type 'witsml2:Scr' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Scr
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Scr (-2058)

#endif

/* witsml2__TrajectoryStation * has binding name 'PointerTowitsml2__TrajectoryStation' for type 'witsml2:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TrajectoryStation (-2056)

#endif

/* witsml2__Personnel * has binding name 'PointerTowitsml2__Personnel' for type 'witsml2:Personnel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Personnel (-2054)

#endif

/* witsml2__MudVolume * has binding name 'PointerTowitsml2__MudVolume' for type 'witsml2:MudVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudVolume
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudVolume (-2053)

#endif

/* witsml2__Inventory * has binding name 'PointerTowitsml2__Inventory' for type 'witsml2:Inventory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Inventory (-2051)

#endif

/* witsml2__Weather * has binding name 'PointerTowitsml2__Weather' for type 'witsml2:Weather' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Weather
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Weather (-2049)

#endif

/* witsml2__SupportCraft * has binding name 'PointerTowitsml2__SupportCraft' for type 'witsml2:SupportCraft' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SupportCraft (-2047)

#endif

/* witsml2__Hse * has binding name 'PointerTowitsml2__Hse' for type 'witsml2:Hse' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Hse
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Hse (-2046)

#endif

/* witsml2__ShakerOp * has binding name 'PointerTowitsml2__ShakerOp' for type 'witsml2:ShakerOp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShakerOp (-2044)

#endif

/* witsml2__RigResponse * has binding name 'PointerTowitsml2__RigResponse' for type 'witsml2:RigResponse' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RigResponse
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RigResponse (-2043)

#endif

/* witsml2__AbstractConnectionType * has binding name 'PointerTowitsml2__AbstractConnectionType' for type 'witsml2:AbstractConnectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractConnectionType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractConnectionType (-2042)

#endif

/* enum witsml2__ConnectionFormType * has binding name 'PointerTowitsml2__ConnectionFormType' for type 'witsml2:ConnectionFormType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ConnectionFormType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ConnectionFormType (-2041)

#endif

/* witsml2__BoreholeStringSet * has binding name 'PointerTowitsml2__BoreholeStringSet' for type 'witsml2:BoreholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeStringSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeStringSet (-2040)

#endif

/* witsml2__EquipmentSet * has binding name 'PointerTowitsml2__EquipmentSet' for type 'witsml2:EquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EquipmentSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EquipmentSet (-2039)

#endif

/* witsml2__PerforationSets * has binding name 'PointerTowitsml2__PerforationSets' for type 'witsml2:PerforationSets' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationSets
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationSets (-2038)

#endif

/* witsml2__DownholeStringSet * has binding name 'PointerTowitsml2__DownholeStringSet' for type 'witsml2:DownholeStringSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeStringSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeStringSet (-2037)

#endif

/* witsml2__Participant * has binding name 'PointerTowitsml2__Participant' for type 'witsml2:Participant' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Participant
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Participant (-2036)

#endif

/* witsml2__DownholeComponentReference * has binding name 'PointerTowitsml2__DownholeComponentReference' for type 'witsml2:DownholeComponentReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeComponentReference
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeComponentReference (-2035)

#endif

/* witsml2__DayCost * has binding name 'PointerTowitsml2__DayCost' for type 'witsml2:DayCost' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DayCost (-2033)

#endif

/* witsml2__AbstractEventExtension * has binding name 'PointerTowitsml2__AbstractEventExtension' for type 'witsml2:AbstractEventExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractEventExtension (-2031)

#endif

/* witsml2__EventType * has binding name 'PointerTowitsml2__EventType' for type 'witsml2:EventType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EventType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EventType (-2030)

#endif

/* witsml2__Perforating * has binding name 'PointerTowitsml2__Perforating' for type 'witsml2:Perforating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Perforating (-2028)

#endif

/* witsml2__DepthRegLogSection * has binding name 'PointerTowitsml2__DepthRegLogSection' for type 'witsml2:DepthRegLogSection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegLogSection (-2025)

#endif

/* witsml2__DepthRegLogRect * has binding name 'PointerTowitsml2__DepthRegLogRect' for type 'witsml2:DepthRegLogRect' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegLogRect (-2024)

#endif

/* enum witsml2__MessageDigestType * has binding name 'PointerTowitsml2__MessageDigestType' for type 'witsml2:MessageDigestType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MessageDigestType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MessageDigestType (-2023)

#endif

/* eml22__DigitalStorageMeasure * has binding name 'PointerToeml22__DigitalStorageMeasure' for type 'eml22:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DigitalStorageMeasure (-2022)

#endif

/* enum witsml2__MimeType * has binding name 'PointerTowitsml2__MimeType' for type 'witsml2:MimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MimeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MimeType (-2021)

#endif

/* enum witsml2__FileNameType * has binding name 'PointerTowitsml2__FileNameType' for type 'witsml2:FileNameType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__FileNameType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__FileNameType (-2020)

#endif

/* witsml2__ChannelSet * has binding name 'PointerTowitsml2__ChannelSet' for type 'witsml2:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelSet (-2018)

#endif

/* witsml2__AbstractLogDataContext * has binding name 'PointerTowitsml2__AbstractLogDataContext' for type 'witsml2:AbstractLogDataContext' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractLogDataContext
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractLogDataContext (-2016)

#endif

/* witsml2__ChannelData * has binding name 'PointerTowitsml2__ChannelData' for type 'witsml2:ChannelData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelData
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelData (-2015)

#endif

/* witsml2__Channel * has binding name 'PointerTowitsml2__Channel' for type 'witsml2:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Channel
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Channel (-2013)

#endif

/* witsml2__ChannelIndex * has binding name 'PointerTowitsml2__ChannelIndex' for type 'witsml2:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelIndex (-2011)

#endif

/* witsml2__PointMetadata * has binding name 'PointerTowitsml2__PointMetadata' for type 'witsml2:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PointMetadata (-2009)

#endif

/* enum witsml2__LoggingMethod * has binding name 'PointerTowitsml2__LoggingMethod' for type 'witsml2:LoggingMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LoggingMethod
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LoggingMethod (-2008)

#endif

/* enum witsml2__ChannelDerivation * has binding name 'PointerTowitsml2__ChannelDerivation' for type 'witsml2:ChannelDerivation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelDerivation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelDerivation (-2007)

#endif

/* witsml2__AbstractIndexValue * has binding name 'PointerTowitsml2__AbstractIndexValue' for type 'witsml2:AbstractIndexValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractIndexValue
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractIndexValue (-2006)

#endif

/* enum witsml2__ChannelState * has binding name 'PointerTowitsml2__ChannelState' for type 'witsml2:ChannelState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelState
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ChannelState (-2005)

#endif

/* witsml2__LogChannelAxis * has binding name 'PointerTowitsml2__LogChannelAxis' for type 'witsml2:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogChannelAxis (-2003)

#endif

/* witsml2__WellboreGeometrySection * has binding name 'PointerTowitsml2__WellboreGeometrySection' for type 'witsml2:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreGeometrySection (-2001)

#endif

/* witsml2__CementStageReport * has binding name 'PointerTowitsml2__CementStageReport' for type 'witsml2:CementStageReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementStageReport (-1999)

#endif

/* witsml2__CementStageDesign * has binding name 'PointerTowitsml2__CementStageDesign' for type 'witsml2:CementStageDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementStageDesign (-1997)

#endif

/* witsml2__CementingFluid * has binding name 'PointerTowitsml2__CementingFluid' for type 'witsml2:CementingFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementingFluid (-1995)

#endif

/* witsml2__CementJobDesign * has binding name 'PointerTowitsml2__CementJobDesign' for type 'witsml2:CementJobDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementJobDesign
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementJobDesign (-1994)

#endif

/* witsml2__CementJobReport * has binding name 'PointerTowitsml2__CementJobReport' for type 'witsml2:CementJobReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementJobReport
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementJobReport (-1993)

#endif

/* enum witsml2__CementJobType * has binding name 'PointerTowitsml2__CementJobType' for type 'witsml2:CementJobType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementJobType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementJobType (-1992)

#endif

/* witsml2__TubularComponent * has binding name 'PointerTowitsml2__TubularComponent' for type 'witsml2:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TubularComponent (-1990)

#endif

/* __witsml2__BendOffset_sequence * has binding name 'PointerTo__witsml2__BendOffset_sequence' for type '-witsml2:BendOffset-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BendOffset_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BendOffset_sequence (-1989)

#endif

/* __witsml2__BendAngle_sequence * has binding name 'PointerTo__witsml2__BendAngle_sequence' for type '-witsml2:BendAngle-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BendAngle_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BendAngle_sequence (-1987)

#endif

/* witsml2__DrillReportSurveyStation * has binding name 'PointerTowitsml2__DrillReportSurveyStation' for type 'witsml2:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportSurveyStation (-1984)

#endif

/* witsml2__TimestampedCommentString * has binding name 'PointerTowitsml2__TimestampedCommentString' for type 'witsml2:TimestampedCommentString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TimestampedCommentString
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TimestampedCommentString (-1983)

#endif

/* witsml2__DrillReportPorePressure * has binding name 'PointerTowitsml2__DrillReportPorePressure' for type 'witsml2:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportPorePressure (-1981)

#endif

/* witsml2__DrillReportStatusInfo * has binding name 'PointerTowitsml2__DrillReportStatusInfo' for type 'witsml2:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportStatusInfo (-1979)

#endif

/* witsml2__DrillReportWellboreInfo * has binding name 'PointerTowitsml2__DrillReportWellboreInfo' for type 'witsml2:DrillReportWellboreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportWellboreInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportWellboreInfo (-1978)

#endif

/* witsml2__DrillReportGasReadingInfo * has binding name 'PointerTowitsml2__DrillReportGasReadingInfo' for type 'witsml2:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportGasReadingInfo (-1976)

#endif

/* witsml2__DrillReportPerfInfo * has binding name 'PointerTowitsml2__DrillReportPerfInfo' for type 'witsml2:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportPerfInfo (-1974)

#endif

/* witsml2__DrillReportStratInfo * has binding name 'PointerTowitsml2__DrillReportStratInfo' for type 'witsml2:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportStratInfo (-1972)

#endif

/* witsml2__DrillReportControlIncidentInfo * has binding name 'PointerTowitsml2__DrillReportControlIncidentInfo' for type 'witsml2:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportControlIncidentInfo (-1970)

#endif

/* witsml2__DrillReportEquipFailureInfo * has binding name 'PointerTowitsml2__DrillReportEquipFailureInfo' for type 'witsml2:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportEquipFailureInfo (-1968)

#endif

/* witsml2__DrillReportLithShowInfo * has binding name 'PointerTowitsml2__DrillReportLithShowInfo' for type 'witsml2:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportLithShowInfo (-1966)

#endif

/* witsml2__DrillReportFormTestInfo * has binding name 'PointerTowitsml2__DrillReportFormTestInfo' for type 'witsml2:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportFormTestInfo (-1964)

#endif

/* witsml2__DrillReportWellTestInfo * has binding name 'PointerTowitsml2__DrillReportWellTestInfo' for type 'witsml2:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportWellTestInfo (-1962)

#endif

/* witsml2__DrillReportCoreInfo * has binding name 'PointerTowitsml2__DrillReportCoreInfo' for type 'witsml2:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportCoreInfo (-1960)

#endif

/* witsml2__DrillReportLogInfo * has binding name 'PointerTowitsml2__DrillReportLogInfo' for type 'witsml2:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillReportLogInfo (-1958)

#endif

/* witsml2__DrillActivity * has binding name 'PointerTowitsml2__DrillActivity' for type 'witsml2:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillActivity (-1956)

#endif

/* enum witsml2__OpsReportVersion * has binding name 'PointerTowitsml2__OpsReportVersion' for type 'witsml2:OpsReportVersion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__OpsReportVersion
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__OpsReportVersion (-1954)

#endif

/* __witsml2__BottomHoleStaticTemperature_sequence_ * has binding name 'PointerTo__witsml2__BottomHoleStaticTemperature_sequence_' for type '-witsml2:BottomHoleStaticTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BottomHoleStaticTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BottomHoleStaticTemperature_sequence_ (-1953)

#endif

/* __witsml2__BottomHoleCirculatingTemperature_sequence_ * has binding name 'PointerTo__witsml2__BottomHoleCirculatingTemperature_sequence_' for type '-witsml2:BottomHoleCirculatingTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BottomHoleCirculatingTemperature_sequence_
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__BottomHoleCirculatingTemperature_sequence_ (-1951)

#endif

/* witsml2__Fluid * has binding name 'PointerTowitsml2__Fluid' for type 'witsml2:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Fluid (-1948)

#endif

/* witsml2__DrillingParams * has binding name 'PointerTowitsml2__DrillingParams' for type 'witsml2:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillingParams (-1946)

#endif

/* enum witsml2__BhaStatus * has binding name 'PointerTowitsml2__BhaStatus' for type 'witsml2:BhaStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BhaStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BhaStatus (-1945)

#endif

/* witsml2__WellDatum * has binding name 'PointerTowitsml2__WellDatum' for type 'witsml2:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellDatum (-1943)

#endif

/* witsml2__ReferencePoint * has binding name 'PointerTowitsml2__ReferencePoint' for type 'witsml2:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ReferencePoint (-1941)

#endif

/* eml22__PublicLandSurveySystem * has binding name 'PointerToeml22__PublicLandSurveySystem' for type 'eml22:PublicLandSurveySystem' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PublicLandSurveySystem
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PublicLandSurveySystem (-1940)

#endif

/* witsml2__GeodeticWellLocation * has binding name 'PointerTowitsml2__GeodeticWellLocation' for type 'witsml2:GeodeticWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeodeticWellLocation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeodeticWellLocation (-1939)

#endif

/* enum witsml2__WellDirection * has binding name 'PointerTowitsml2__WellDirection' for type 'witsml2:WellDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellDirection
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellDirection (-1938)

#endif

/* enum witsml2__WellFluid * has binding name 'PointerTowitsml2__WellFluid' for type 'witsml2:WellFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellFluid
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellFluid (-1937)

#endif

/* std::string * has binding name 'PointerToeml22__TimeZone' for type 'eml22:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeZone
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeZone (-1936)

#endif

/* eml22__AbstractProjectedCrs * has binding name 'PointerToeml22__AbstractProjectedCrs' for type 'eml22:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractProjectedCrs (-1935)

#endif

/* eml22__AbstractGeodeticCrs * has binding name 'PointerToeml22__AbstractGeodeticCrs' for type 'eml22:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGeodeticCrs (-1934)

#endif

/* enum witsml2__WellboreShape * has binding name 'PointerTowitsml2__WellboreShape' for type 'witsml2:WellboreShape' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreShape
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreShape (-1933)

#endif

/* enum witsml2__WellPurpose * has binding name 'PointerTowitsml2__WellPurpose' for type 'witsml2:WellPurpose' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellPurpose
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellPurpose (-1932)

#endif

/* enum eml22__WellStatus * has binding name 'PointerToeml22__WellStatus' for type 'eml22:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__WellStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__WellStatus (-1931)

#endif

/* __gsr__SC_USCORECRS_USCOREPropertyType_sequence * has binding name 'PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence' for type '-gsr:SC_CRS_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence (-1930)

#endif

/* __gco__DateTime_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__DateTime_USCOREPropertyType_sequence' for type '-gco:DateTime_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__DateTime_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__DateTime_USCOREPropertyType_sequence (-1927)

#endif

/* struct tm * has binding name 'PointerToxsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__dateTime
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__dateTime (-1924)

#endif

/* std::string * has binding name 'PointerTogco__Date_USCOREType' for type 'gco:Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREType (-1923)

#endif

/* __gco__Real_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__Real_USCOREPropertyType_sequence' for type '-gco:Real_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Real_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Real_USCOREPropertyType_sequence (-1922)

#endif

/* __gco__Boolean_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__Boolean_USCOREPropertyType_sequence' for type '-gco:Boolean_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Boolean_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Boolean_USCOREPropertyType_sequence (-1920)

#endif

/* __gco__CharacterString_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__CharacterString_USCOREPropertyType_sequence' for type '-gco:CharacterString_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__CharacterString_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__CharacterString_USCOREPropertyType_sequence (-1918)

#endif

/* std::string * has binding name 'PointerToxsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__ID
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__ID (-1915)

#endif

/* __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence * has binding name 'PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence' for type '-gts:TM_Primitive_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence (-1914)

#endif

/* __gmd__DQ_USCOREResult_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence' for type '-gmd:DQ_Result_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence (-1911)

#endif

/* __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence' for type '-gmd:DQ_EvaluationMethodTypeCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence (-1908)

#endif

/* __gmd__CI_USCORESeries_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence' for type '-gmd:CI_Series_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence (-1906)

#endif

/* gmd__CI_USCORESeries_USCOREType * has binding name 'PointerTogmd__CI_USCORESeries_USCOREType' for type 'gmd:CI_Series_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREType (-1905)

#endif

/* __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence' for type '-gmd:CI_PresentationFormCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence (-1903)

#endif

/* __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence' for type '-gmd:CI_RoleCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence (-1901)

#endif

/* __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence' for type '-gmd:CI_OnLineFunctionCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence (-1899)

#endif

/* __gmd__URL_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__URL_USCOREPropertyType_sequence' for type '-gmd:URL_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__URL_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__URL_USCOREPropertyType_sequence (-1897)

#endif

/* __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence' for type '-gmd:CI_OnlineResource_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence (-1895)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREType * has binding name 'PointerTogmd__CI_USCOREOnlineResource_USCOREType' for type 'gmd:CI_OnlineResource_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREType (-1894)

#endif

/* __gmd__CI_USCOREAddress_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence' for type '-gmd:CI_Address_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence (-1892)

#endif

/* gmd__CI_USCOREAddress_USCOREType * has binding name 'PointerTogmd__CI_USCOREAddress_USCOREType' for type 'gmd:CI_Address_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREType (-1891)

#endif

/* __gmd__CI_USCORETelephone_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence' for type '-gmd:CI_Telephone_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence (-1889)

#endif

/* gmd__CI_USCORETelephone_USCOREType * has binding name 'PointerTogmd__CI_USCORETelephone_USCOREType' for type 'gmd:CI_Telephone_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREType (-1888)

#endif

/* __gmd__CI_USCOREContact_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence' for type '-gmd:CI_Contact_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence (-1886)

#endif

/* gmd__CI_USCOREContact_USCOREType * has binding name 'PointerTogmd__CI_USCOREContact_USCOREType' for type 'gmd:CI_Contact_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREType (-1885)

#endif

/* __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence' for type '-gmd:CI_ResponsibleParty_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence (-1883)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREType * has binding name 'PointerTogmd__CI_USCOREResponsibleParty_USCOREType' for type 'gmd:CI_ResponsibleParty_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREType (-1882)

#endif

/* __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence' for type '-gmd:CI_DateTypeCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence (-1880)

#endif

/* gco__CodeListValue_USCOREType * has binding name 'PointerTogco__CodeListValue_USCOREType' for type 'gco:CodeListValue_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__CodeListValue_USCOREType (-1879)

#endif

/* __gmd__CI_USCOREDate_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence' for type '-gmd:CI_Date_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence (-1877)

#endif

/* gmd__CI_USCOREDate_USCOREType * has binding name 'PointerTogmd__CI_USCOREDate_USCOREType' for type 'gmd:CI_Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREType (-1876)

#endif

/* __gmd__CI_USCORECitation_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence' for type '-gmd:CI_Citation_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence (-1874)

#endif

/* gmd__CI_USCORECitation_USCOREType * has binding name 'PointerTogmd__CI_USCORECitation_USCOREType' for type 'gmd:CI_Citation_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREType (-1873)

#endif

/* __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence' for type '-gmd:MD_Identifier_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence (-1871)

#endif

/* gmd__MD_USCOREIdentifier_USCOREType * has binding name 'PointerTogmd__MD_USCOREIdentifier_USCOREType' for type 'gmd:MD_Identifier_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREType (-1870)

#endif

/* __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence' for type '-gmd:EX_VerticalExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence (-1868)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREType * has binding name 'PointerTogmd__EX_USCOREVerticalExtent_USCOREType' for type 'gmd:EX_VerticalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREType (-1867)

#endif

/* __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence' for type '-gmd:EX_TemporalExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence (-1865)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREType * has binding name 'PointerTogmd__EX_USCORETemporalExtent_USCOREType' for type 'gmd:EX_TemporalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREType (-1864)

#endif

/* __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence' for type '-gmd:EX_GeographicExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence (-1862)

#endif

/* __gml__coordinateOperationAccuracy_sequence * has binding name 'PointerTo__gml__coordinateOperationAccuracy_sequence' for type '-gml:coordinateOperationAccuracy-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__coordinateOperationAccuracy_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__coordinateOperationAccuracy_sequence (-1859)

#endif

/* gml__LengthType * has binding name 'PointerTogml__LengthType' for type 'gml:LengthType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__LengthType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__LengthType (-1855)

#endif

/* gml__MeasureType * has binding name 'PointerTogml__MeasureType' for type 'gml:MeasureType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__MeasureType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__MeasureType (-1854)

#endif

/* _gml__SecondDefiningParameter * has binding name 'PointerTo_gml__SecondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__SecondDefiningParameter (-1853)

#endif

/* __gml__domainOfValidity_sequence * has binding name 'PointerTo__gml__domainOfValidity_sequence' for type '-gml:domainOfValidity-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__domainOfValidity_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__domainOfValidity_sequence (-1852)

#endif

/* gmd__EX_USCOREExtent_USCOREType * has binding name 'PointerTogmd__EX_USCOREExtent_USCOREType' for type 'gmd:EX_Extent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREExtent_USCOREType (-1851)

#endif

/* __gml__VerticalDatumPropertyType_sequence * has binding name 'PointerTo__gml__VerticalDatumPropertyType_sequence' for type '-gml:VerticalDatumPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalDatumPropertyType_sequence (-1849)

#endif

/* gml__VerticalDatumType * has binding name 'PointerTogml__VerticalDatumType' for type 'gml:VerticalDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumType (-1848)

#endif

/* __gml__VerticalCSPropertyType_sequence * has binding name 'PointerTo__gml__VerticalCSPropertyType_sequence' for type '-gml:VerticalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalCSPropertyType_sequence (-1846)

#endif

/* gml__VerticalCSType * has binding name 'PointerTogml__VerticalCSType' for type 'gml:VerticalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSType (-1845)

#endif

/* __gml__GeodeticCRSPropertyType_sequence * has binding name 'PointerTo__gml__GeodeticCRSPropertyType_sequence' for type '-gml:GeodeticCRSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticCRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticCRSPropertyType_sequence (-1843)

#endif

/* gml__GeodeticCRSType * has binding name 'PointerTogml__GeodeticCRSType' for type 'gml:GeodeticCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSType (-1842)

#endif

/* __gml__CRSPropertyType_sequence * has binding name 'PointerTo__gml__CRSPropertyType_sequence' for type '-gml:CRSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CRSPropertyType_sequence (-1840)

#endif

/* __gml__GeneralConversionPropertyType_sequence * has binding name 'PointerTo__gml__GeneralConversionPropertyType_sequence' for type '-gml:GeneralConversionPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeneralConversionPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeneralConversionPropertyType_sequence (-1837)

#endif

/* __gml__EllipsoidPropertyType_sequence * has binding name 'PointerTo__gml__EllipsoidPropertyType_sequence' for type '-gml:EllipsoidPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidPropertyType_sequence (-1834)

#endif

/* gml__EllipsoidType * has binding name 'PointerTogml__EllipsoidType' for type 'gml:EllipsoidType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidType (-1833)

#endif

/* __gml__PrimeMeridianPropertyType_sequence * has binding name 'PointerTo__gml__PrimeMeridianPropertyType_sequence' for type '-gml:PrimeMeridianPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__PrimeMeridianPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__PrimeMeridianPropertyType_sequence (-1831)

#endif

/* gml__PrimeMeridianType * has binding name 'PointerTogml__PrimeMeridianType' for type 'gml:PrimeMeridianType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianType (-1830)

#endif

/* __gml__GeodeticDatumPropertyType_sequence * has binding name 'PointerTo__gml__GeodeticDatumPropertyType_sequence' for type '-gml:GeodeticDatumPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticDatumPropertyType_sequence (-1828)

#endif

/* gml__GeodeticDatumType * has binding name 'PointerTogml__GeodeticDatumType' for type 'gml:GeodeticDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumType (-1827)

#endif

/* __gml__SphericalCSPropertyType_sequence * has binding name 'PointerTo__gml__SphericalCSPropertyType_sequence' for type '-gml:SphericalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__SphericalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__SphericalCSPropertyType_sequence (-1825)

#endif

/* gml__SphericalCSType * has binding name 'PointerTogml__SphericalCSType' for type 'gml:SphericalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSType (-1824)

#endif

/* __gml__CartesianCSPropertyType_sequence * has binding name 'PointerTo__gml__CartesianCSPropertyType_sequence' for type '-gml:CartesianCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CartesianCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CartesianCSPropertyType_sequence (-1822)

#endif

/* gml__CartesianCSType * has binding name 'PointerTogml__CartesianCSType' for type 'gml:CartesianCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSType (-1821)

#endif

/* __gml__CoordinateSystemAxisPropertyType_sequence * has binding name 'PointerTo__gml__CoordinateSystemAxisPropertyType_sequence' for type '-gml:CoordinateSystemAxisPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CoordinateSystemAxisPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CoordinateSystemAxisPropertyType_sequence (-1819)

#endif

/* gml__CoordinateSystemAxisType * has binding name 'PointerTogml__CoordinateSystemAxisType' for type 'gml:CoordinateSystemAxisType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisType (-1818)

#endif

/* __gml__EllipsoidalCSPropertyType_sequence * has binding name 'PointerTo__gml__EllipsoidalCSPropertyType_sequence' for type '-gml:EllipsoidalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidalCSPropertyType_sequence (-1816)

#endif

/* gml__EllipsoidalCSType * has binding name 'PointerTogml__EllipsoidalCSType' for type 'gml:EllipsoidalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSType (-1815)

#endif

/* __gml__TimePrimitivePropertyType_sequence * has binding name 'PointerTo__gml__TimePrimitivePropertyType_sequence' for type '-gml:TimePrimitivePropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__TimePrimitivePropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__TimePrimitivePropertyType_sequence (-1813)

#endif

/* enum _xlink__actuate * has binding name 'PointerTo_xlink__actuate' for type 'xlink:actuate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__actuate
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__actuate (-1810)

#endif

/* enum _xlink__show * has binding name 'PointerTo_xlink__show' for type 'xlink:show' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__show
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__show (-1809)

#endif

/* std::string * has binding name 'PointerTogml__NilReasonType' for type 'gml:NilReasonType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__NilReasonType (-1808)

#endif

/* gml__CodeType * has binding name 'PointerTogml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeType (-1806)

#endif

/* gml__CodeWithAuthorityType * has binding name 'PointerTogml__CodeWithAuthorityType' for type 'gml:CodeWithAuthorityType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeWithAuthorityType (-1805)

#endif

/* gml__ReferenceType * has binding name 'PointerTogml__ReferenceType' for type 'gml:ReferenceType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__ReferenceType (-1804)

#endif

/* gml__StringOrRefType * has binding name 'PointerTogml__StringOrRefType' for type 'gml:StringOrRefType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__StringOrRefType (-1803)

#endif

/* eml22__DistanceEastWest * has binding name 'PointerToeml22__DistanceEastWest' for type 'eml22:DistanceEastWest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DistanceEastWest
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DistanceEastWest (-1802)

#endif

/* eml22__DistanceNorthSouth * has binding name 'PointerToeml22__DistanceNorthSouth' for type 'eml22:DistanceNorthSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DistanceNorthSouth
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DistanceNorthSouth (-1801)

#endif

/* std::string * has binding name 'PointerToeml22__PublicLandSurveySystemQuarterTownship' for type 'eml22:PublicLandSurveySystemQuarterTownship' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PublicLandSurveySystemQuarterTownship
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PublicLandSurveySystemQuarterTownship (-1800)

#endif

/* std::string * has binding name 'PointerToeml22__PublicLandSurveySystemQuarterSection' for type 'eml22:PublicLandSurveySystemQuarterSection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PublicLandSurveySystemQuarterSection
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PublicLandSurveySystemQuarterSection (-1799)

#endif

/* std::string * has binding name 'PointerToeml22__SectionNumber' for type 'eml22:SectionNumber' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__SectionNumber
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__SectionNumber (-1798)

#endif

/* enum eml22__NorthOrSouth * has binding name 'PointerToeml22__NorthOrSouth' for type 'eml22:NorthOrSouth' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__NorthOrSouth
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__NorthOrSouth (-1797)

#endif

/* enum eml22__EastOrWest * has binding name 'PointerToeml22__EastOrWest' for type 'eml22:EastOrWest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__EastOrWest
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__EastOrWest (-1796)

#endif

/* enum eml22__PrincipalMeridian * has binding name 'PointerToeml22__PrincipalMeridian' for type 'eml22:PrincipalMeridian' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PrincipalMeridian
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PrincipalMeridian (-1795)

#endif

/* eml22__VolumeMeasureExt * has binding name 'PointerToeml22__VolumeMeasureExt' for type 'eml22:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumeMeasureExt (-1794)

#endif

/* eml22__AbstractPressureValue * has binding name 'PointerToeml22__AbstractPressureValue' for type 'eml22:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractPressureValue (-1793)

#endif

/* eml22__VolumePerTimeMeasureExt * has binding name 'PointerToeml22__VolumePerTimeMeasureExt' for type 'eml22:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerTimeMeasureExt (-1792)

#endif

/* eml22__AbstractTemperaturePressure * has binding name 'PointerToeml22__AbstractTemperaturePressure' for type 'eml22:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractTemperaturePressure (-1791)

#endif

/* eml22__MassPerVolumeMeasureExt * has binding name 'PointerToeml22__MassPerVolumeMeasureExt' for type 'eml22:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerVolumeMeasureExt (-1790)

#endif

/* eml22__TimeIndex * has binding name 'PointerToeml22__TimeIndex' for type 'eml22:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeIndex
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeIndex (-1788)

#endif

/* eml22__AbstractActivityParameter * has binding name 'PointerToeml22__AbstractActivityParameter' for type 'eml22:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractActivityParameter (-1786)

#endif

/* eml22__AbstractParameterKey * has binding name 'PointerToeml22__AbstractParameterKey' for type 'eml22:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractParameterKey (-1783)

#endif

/* eml22__ExternalDatasetPart * has binding name 'PointerToeml22__ExternalDatasetPart' for type 'eml22:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDatasetPart (-1781)

#endif

/* eml22__AbstractIntegerArray * has binding name 'PointerToeml22__AbstractIntegerArray' for type 'eml22:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractIntegerArray (-1780)

#endif

/* eml22__AbstractValueArray * has binding name 'PointerToeml22__AbstractValueArray' for type 'eml22:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractValueArray (-1779)

#endif

/* LONG64 * has binding name 'PointerToLONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToLONG64
#define SOAP_TYPE_gsoap_eml2_2_PointerToLONG64 (-1778)

#endif

/* enum eml22__MeasureClass * has binding name 'PointerToeml22__MeasureClass' for type 'eml22:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MeasureClass
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MeasureClass (-1776)

#endif

/* eml22__StringMeasure * has binding name 'PointerToeml22__StringMeasure' for type 'eml22:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__StringMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__StringMeasure (-1775)

#endif

/* enum witsml2__PerforationStatus * has binding name 'PointerTowitsml2__PerforationStatus' for type 'witsml2:PerforationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationStatus (-1773)

#endif

/* witsml2__PerforationStatusHistory * has binding name 'PointerTowitsml2__PerforationStatusHistory' for type 'witsml2:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationStatusHistory (-1771)

#endif

/* double * has binding name 'PointerTowitsml2__NonNegativeFraction' for type 'witsml2:NonNegativeFraction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NonNegativeFraction
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NonNegativeFraction (-1770)

#endif

/* enum witsml2__PhysicalStatus * has binding name 'PointerTowitsml2__PhysicalStatus' for type 'witsml2:PhysicalStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PhysicalStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PhysicalStatus (-1769)

#endif

/* witsml2__IntervalStatusHistory * has binding name 'PointerTowitsml2__IntervalStatusHistory' for type 'witsml2:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__IntervalStatusHistory (-1767)

#endif

/* witsml2__GravelPackInterval * has binding name 'PointerTowitsml2__GravelPackInterval' for type 'witsml2:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GravelPackInterval (-1765)

#endif

/* witsml2__PerforationSetInterval * has binding name 'PointerTowitsml2__PerforationSetInterval' for type 'witsml2:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationSetInterval (-1763)

#endif

/* witsml2__OpenHoleInterval * has binding name 'PointerTowitsml2__OpenHoleInterval' for type 'witsml2:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__OpenHoleInterval (-1761)

#endif

/* witsml2__SlotsInterval * has binding name 'PointerTowitsml2__SlotsInterval' for type 'witsml2:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SlotsInterval (-1759)

#endif

/* enum witsml2__CompletionStatus * has binding name 'PointerTowitsml2__CompletionStatus' for type 'witsml2:CompletionStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CompletionStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CompletionStatus (-1758)

#endif

/* __witsml2__WobStatistics_sequence * has binding name 'PointerTo__witsml2__WobStatistics_sequence' for type '-witsml2:WobStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__WobStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__WobStatistics_sequence (-1757)

#endif

/* __witsml2__TorqueStatistics_sequence * has binding name 'PointerTo__witsml2__TorqueStatistics_sequence' for type '-witsml2:TorqueStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__TorqueStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__TorqueStatistics_sequence (-1755)

#endif

/* __witsml2__TorqueCurrentStatistics_sequence * has binding name 'PointerTo__witsml2__TorqueCurrentStatistics_sequence' for type '-witsml2:TorqueCurrentStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__TorqueCurrentStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__TorqueCurrentStatistics_sequence (-1753)

#endif

/* eml22__ElectricCurrentMeasure * has binding name 'PointerToeml22__ElectricCurrentMeasure' for type 'eml22:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ElectricCurrentMeasure (-1752)

#endif

/* __witsml2__RpmStatistics_sequence * has binding name 'PointerTo__witsml2__RpmStatistics_sequence' for type '-witsml2:RpmStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__RpmStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__RpmStatistics_sequence (-1750)

#endif

/* __witsml2__RopStatistics_sequence * has binding name 'PointerTo__witsml2__RopStatistics_sequence' for type '-witsml2:RopStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__RopStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__RopStatistics_sequence (-1748)

#endif

/* witsml2__MudGas * has binding name 'PointerTowitsml2__MudGas' for type 'witsml2:MudGas' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudGas (-1745)

#endif

/* witsml2__DrillingParameters * has binding name 'PointerTowitsml2__DrillingParameters' for type 'witsml2:DrillingParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillingParameters (-1743)

#endif

/* witsml2__Chromatograph * has binding name 'PointerTowitsml2__Chromatograph' for type 'witsml2:Chromatograph' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Chromatograph
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Chromatograph (-1742)

#endif

/* __witsml2__MudGas_sequence * has binding name 'PointerTo__witsml2__MudGas_sequence' for type '-witsml2:MudGas-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__MudGas_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__MudGas_sequence (-1741)

#endif

/* witsml2__GasPeak * has binding name 'PointerTowitsml2__GasPeak' for type 'witsml2:GasPeak' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GasPeak (-1739)

#endif

/* witsml2__GasInMud * has binding name 'PointerTowitsml2__GasInMud' for type 'witsml2:GasInMud' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GasInMud
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GasInMud (-1738)

#endif

/* __witsml2__MudDensityStatistics_sequence * has binding name 'PointerTo__witsml2__MudDensityStatistics_sequence' for type '-witsml2:MudDensityStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__MudDensityStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__MudDensityStatistics_sequence (-1736)

#endif

/* __witsml2__EcdStatistics_sequence * has binding name 'PointerTo__witsml2__EcdStatistics_sequence' for type '-witsml2:EcdStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__EcdStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__EcdStatistics_sequence (-1734)

#endif

/* __witsml2__DxcStatistics_sequence * has binding name 'PointerTo__witsml2__DxcStatistics_sequence' for type '-witsml2:DxcStatistics-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__DxcStatistics_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__DxcStatistics_sequence (-1732)

#endif

/* __witsml2__DrillingParameters_sequence * has binding name 'PointerTo__witsml2__DrillingParameters_sequence' for type '-witsml2:DrillingParameters-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__DrillingParameters_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__DrillingParameters_sequence (-1730)

#endif

/* witsml2__DxcStatistics * has binding name 'PointerTowitsml2__DxcStatistics' for type 'witsml2:DxcStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DxcStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DxcStatistics (-1729)

#endif

/* witsml2__EcdStatistics * has binding name 'PointerTowitsml2__EcdStatistics' for type 'witsml2:EcdStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EcdStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EcdStatistics (-1728)

#endif

/* witsml2__MudDensityStatistics * has binding name 'PointerTowitsml2__MudDensityStatistics' for type 'witsml2:MudDensityStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudDensityStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudDensityStatistics (-1727)

#endif

/* witsml2__RpmStatistics * has binding name 'PointerTowitsml2__RpmStatistics' for type 'witsml2:RpmStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RpmStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RpmStatistics (-1726)

#endif

/* witsml2__TorqueCurrentStatistics * has binding name 'PointerTowitsml2__TorqueCurrentStatistics' for type 'witsml2:TorqueCurrentStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TorqueCurrentStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TorqueCurrentStatistics (-1725)

#endif

/* witsml2__TorqueStatistics * has binding name 'PointerTowitsml2__TorqueStatistics' for type 'witsml2:TorqueStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TorqueStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TorqueStatistics (-1724)

#endif

/* witsml2__WobStatistics * has binding name 'PointerTowitsml2__WobStatistics' for type 'witsml2:WobStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WobStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WobStatistics (-1723)

#endif

/* witsml2__RopStatistics * has binding name 'PointerTowitsml2__RopStatistics' for type 'witsml2:RopStatistics' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RopStatistics
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RopStatistics (-1722)

#endif

/* enum witsml2__ShowFluorescence * has binding name 'PointerTowitsml2__ShowFluorescence' for type 'witsml2:ShowFluorescence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowFluorescence
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowFluorescence (-1720)

#endif

/* enum witsml2__ShowLevel * has binding name 'PointerTowitsml2__ShowLevel' for type 'witsml2:ShowLevel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowLevel
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowLevel (-1719)

#endif

/* enum witsml2__ShowSpeed * has binding name 'PointerTowitsml2__ShowSpeed' for type 'witsml2:ShowSpeed' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowSpeed
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowSpeed (-1718)

#endif

/* enum witsml2__ShowRating * has binding name 'PointerTowitsml2__ShowRating' for type 'witsml2:ShowRating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowRating
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShowRating (-1717)

#endif

/* witsml2__LithologyQualifier * has binding name 'PointerTowitsml2__LithologyQualifier' for type 'witsml2:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LithologyQualifier (-1715)

#endif

/* witsml2__CuttingsIntervalShow * has binding name 'PointerTowitsml2__CuttingsIntervalShow' for type 'witsml2:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CuttingsIntervalShow (-1713)

#endif

/* enum eml22__MatrixCementKind * has binding name 'PointerToeml22__MatrixCementKind' for type 'eml22:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MatrixCementKind (-1712)

#endif

/* enum eml22__ExistenceKind * has binding name 'PointerToeml22__ExistenceKind' for type 'eml22:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExistenceKind (-1711)

#endif

/* eml22__VolumePerLengthMeasure * has binding name 'PointerToeml22__VolumePerLengthMeasure' for type 'eml22:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerLengthMeasure (-1710)

#endif

/* witsml2__StimPressureFlowRate * has binding name 'PointerTowitsml2__StimPressureFlowRate' for type 'witsml2:StimPressureFlowRate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPressureFlowRate (-1708)

#endif

/* witsml2__StimPumpFlowBackTestStep * has binding name 'PointerTowitsml2__StimPumpFlowBackTestStep' for type 'witsml2:StimPumpFlowBackTestStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPumpFlowBackTestStep (-1706)

#endif

/* witsml2__StimPerforationCluster * has binding name 'PointerTowitsml2__StimPerforationCluster' for type 'witsml2:StimPerforationCluster' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPerforationCluster (-1704)

#endif

/* eml22__MassPerTimeMeasure * has binding name 'PointerToeml22__MassPerTimeMeasure' for type 'eml22:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerTimeMeasure (-1703)

#endif

/* enum witsml2__StimMaterialKind * has binding name 'PointerTowitsml2__StimMaterialKind' for type 'witsml2:StimMaterialKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimMaterialKind
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimMaterialKind (-1702)

#endif

/* witsml2__StimFluid * has binding name 'PointerTowitsml2__StimFluid' for type 'witsml2:StimFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFluid
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFluid (-1701)

#endif

/* witsml2__StimProppantAgent * has binding name 'PointerTowitsml2__StimProppantAgent' for type 'witsml2:StimProppantAgent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimProppantAgent (-1699)

#endif

/* witsml2__StimAdditive * has binding name 'PointerTowitsml2__StimAdditive' for type 'witsml2:StimAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimAdditive (-1697)

#endif

/* __witsml2__StimJobDiversion_sequence * has binding name 'PointerTo__witsml2__StimJobDiversion_sequence' for type '-witsml2:StimJobDiversion-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__StimJobDiversion_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__StimJobDiversion_sequence (-1696)

#endif

/* enum witsml2__StimJobDiversionMethod * has binding name 'PointerTowitsml2__StimJobDiversionMethod' for type 'witsml2:StimJobDiversionMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobDiversionMethod
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimJobDiversionMethod (-1695)

#endif

/* witsml2__StimPumpFlowBackTest * has binding name 'PointerTowitsml2__StimPumpFlowBackTest' for type 'witsml2:StimPumpFlowBackTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimPumpFlowBackTest (-1692)

#endif

/* witsml2__StimStepTest * has binding name 'PointerTowitsml2__StimStepTest' for type 'witsml2:StimStepTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimStepTest (-1690)

#endif

/* witsml2__StimStepDownTest * has binding name 'PointerTowitsml2__StimStepDownTest' for type 'witsml2:StimStepDownTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimStepDownTest (-1688)

#endif

/* witsml2__StimFetTest * has binding name 'PointerTowitsml2__StimFetTest' for type 'witsml2:StimFetTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFetTest (-1686)

#endif

/* eml22__VolumetricThermalExpansionMeasure * has binding name 'PointerToeml22__VolumetricThermalExpansionMeasure' for type 'eml22:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumetricThermalExpansionMeasure (-1685)

#endif

/* eml22__ThermalConductivityMeasure * has binding name 'PointerToeml22__ThermalConductivityMeasure' for type 'eml22:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermalConductivityMeasure (-1684)

#endif

/* eml22__SpecificHeatCapacityMeasure * has binding name 'PointerToeml22__SpecificHeatCapacityMeasure' for type 'eml22:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__SpecificHeatCapacityMeasure (-1683)

#endif

/* eml22__IsothermalCompressibilityMeasure * has binding name 'PointerToeml22__IsothermalCompressibilityMeasure' for type 'eml22:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IsothermalCompressibilityMeasure (-1682)

#endif

/* eml22__PermeabilityLengthMeasure * has binding name 'PointerToeml22__PermeabilityLengthMeasure' for type 'eml22:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PermeabilityLengthMeasure (-1681)

#endif

/* witsml2__ISO13503_USCORE2SieveAnalysisData * has binding name 'PointerTowitsml2__ISO13503_USCORE2SieveAnalysisData' for type 'witsml2:ISO13503_2SieveAnalysisData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ISO13503_USCORE2SieveAnalysisData (-1679)

#endif

/* witsml2__ISO13503_USCORE2CrushTestData * has binding name 'PointerTowitsml2__ISO13503_USCORE2CrushTestData' for type 'witsml2:ISO13503_2CrushTestData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ISO13503_USCORE2CrushTestData (-1677)

#endif

/* witsml2__StimMaterialQuantity * has binding name 'PointerTowitsml2__StimMaterialQuantity' for type 'witsml2:StimMaterialQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimMaterialQuantity (-1675)

#endif

/* eml22__UnitlessMeasure * has binding name 'PointerToeml22__UnitlessMeasure' for type 'eml22:UnitlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UnitlessMeasure (-1674)

#endif

/* enum witsml2__StimFluidSubtype * has binding name 'PointerTowitsml2__StimFluidSubtype' for type 'witsml2:StimFluidSubtype' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFluidSubtype
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFluidSubtype (-1673)

#endif

/* enum witsml2__StimFluidKind * has binding name 'PointerTowitsml2__StimFluidKind' for type 'witsml2:StimFluidKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFluidKind
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFluidKind (-1672)

#endif

/* witsml2__StimTubular * has binding name 'PointerTowitsml2__StimTubular' for type 'witsml2:StimTubular' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimTubular (-1670)

#endif

/* enum witsml2__StimFlowPathType * has binding name 'PointerTowitsml2__StimFlowPathType' for type 'witsml2:StimFlowPathType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFlowPathType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StimFlowPathType (-1669)

#endif

/* eml22__PermeabilityRockMeasure * has binding name 'PointerToeml22__PermeabilityRockMeasure' for type 'eml22:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PermeabilityRockMeasure (-1668)

#endif

/* eml22__ForcePerVolumeMeasure * has binding name 'PointerToeml22__ForcePerVolumeMeasure' for type 'eml22:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForcePerVolumeMeasure (-1667)

#endif

/* enum witsml2__PitType * has binding name 'PointerTowitsml2__PitType' for type 'witsml2:PitType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PitType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PitType (-1665)

#endif

/* short * has binding name 'PointerTowitsml2__PumpActionIntegerCode' for type 'witsml2:PumpActionIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpActionIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpActionIntegerCode (-1664)

#endif

/* enum witsml2__PumpType * has binding name 'PointerTowitsml2__PumpType' for type 'witsml2:PumpType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpType (-1663)

#endif

/* enum witsml2__BopType * has binding name 'PointerTowitsml2__BopType' for type 'witsml2:BopType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BopType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BopType (-1662)

#endif

/* witsml2__BopComponent * has binding name 'PointerTowitsml2__BopComponent' for type 'witsml2:BopComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BopComponent (-1660)

#endif

/* witsml2__AzimuthRange * has binding name 'PointerTowitsml2__AzimuthRange' for type 'witsml2:AzimuthRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AzimuthRange
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AzimuthRange (-1658)

#endif

/* witsml2__CustomOperatingRange * has binding name 'PointerTowitsml2__CustomOperatingRange' for type 'witsml2:CustomOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CustomOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CustomOperatingRange (-1656)

#endif

/* witsml2__PlaneAngleOperatingRange * has binding name 'PointerTowitsml2__PlaneAngleOperatingRange' for type 'witsml2:PlaneAngleOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PlaneAngleOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PlaneAngleOperatingRange (-1654)

#endif

/* eml22__ThermodynamicTemperatureMeasureExt * has binding name 'PointerToeml22__ThermodynamicTemperatureMeasureExt' for type 'eml22:ThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermodynamicTemperatureMeasureExt (-1653)

#endif

/* eml22__PressureMeasureExt * has binding name 'PointerToeml22__PressureMeasureExt' for type 'eml22:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasureExt (-1652)

#endif

/* witsml2__XyAccelerometer * has binding name 'PointerTowitsml2__XyAccelerometer' for type 'witsml2:XyAccelerometer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__XyAccelerometer
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__XyAccelerometer (-1648)

#endif

/* witsml2__Gyro * has binding name 'PointerTowitsml2__Gyro' for type 'witsml2:Gyro' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Gyro
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Gyro (-1646)

#endif

/* enum witsml2__AccelerometerAxisCombination * has binding name 'PointerTowitsml2__AccelerometerAxisCombination' for type 'witsml2:AccelerometerAxisCombination' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AccelerometerAxisCombination
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AccelerometerAxisCombination (-1645)

#endif

/* eml22__PlaneAngleMeasureExt * has binding name 'PointerToeml22__PlaneAngleMeasureExt' for type 'eml22:PlaneAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PlaneAngleMeasureExt (-1644)

#endif

/* eml22__LengthPerTimeMeasureExt * has binding name 'PointerToeml22__LengthPerTimeMeasureExt' for type 'eml22:LengthPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthPerTimeMeasureExt (-1643)

#endif

/* eml22__LengthMeasureExt * has binding name 'PointerToeml22__LengthMeasureExt' for type 'eml22:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasureExt (-1642)

#endif

/* witsml2__Parameter * has binding name 'PointerTowitsml2__Parameter' for type 'witsml2:Parameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Parameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Parameter (-1640)

#endif

/* enum witsml2__AuthorizationStatus * has binding name 'PointerTowitsml2__AuthorizationStatus' for type 'witsml2:AuthorizationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AuthorizationStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AuthorizationStatus (-1639)

#endif

/* witsml2__StnTrajCorUsed * has binding name 'PointerTowitsml2__StnTrajCorUsed' for type 'witsml2:StnTrajCorUsed' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajCorUsed
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajCorUsed (-1638)

#endif

/* witsml2__StnTrajRawData * has binding name 'PointerTowitsml2__StnTrajRawData' for type 'witsml2:StnTrajRawData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajRawData
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajRawData (-1637)

#endif

/* witsml2__RefWellboreTrajectoryStation * has binding name 'PointerTowitsml2__RefWellboreTrajectoryStation' for type 'witsml2:RefWellboreTrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RefWellboreTrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RefWellboreTrajectoryStation (-1636)

#endif

/* witsml2__StnTrajMatrixCov * has binding name 'PointerTowitsml2__StnTrajMatrixCov' for type 'witsml2:StnTrajMatrixCov' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajMatrixCov
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajMatrixCov (-1635)

#endif

/* witsml2__StnTrajValid * has binding name 'PointerTowitsml2__StnTrajValid' for type 'witsml2:StnTrajValid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajValid
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StnTrajValid (-1634)

#endif

/* enum witsml2__TrajStationStatus * has binding name 'PointerTowitsml2__TrajStationStatus' for type 'witsml2:TrajStationStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TrajStationStatus
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TrajStationStatus (-1633)

#endif

/* enum witsml2__TrajStnCalcAlgorithm * has binding name 'PointerTowitsml2__TrajStnCalcAlgorithm' for type 'witsml2:TrajStnCalcAlgorithm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TrajStnCalcAlgorithm
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TrajStnCalcAlgorithm (-1632)

#endif

/* enum witsml2__TypeSurveyTool * has binding name 'PointerTowitsml2__TypeSurveyTool' for type 'witsml2:TypeSurveyTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TypeSurveyTool
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__TypeSurveyTool (-1631)

#endif

/* eml22__MagneticFluxDensityMeasure * has binding name 'PointerToeml22__MagneticFluxDensityMeasure' for type 'eml22:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MagneticFluxDensityMeasure (-1630)

#endif

/* eml22__LinearAccelerationMeasure * has binding name 'PointerToeml22__LinearAccelerationMeasure' for type 'eml22:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LinearAccelerationMeasure (-1629)

#endif

/* short * has binding name 'PointerTowitsml2__BeaufortScaleIntegerCode' for type 'witsml2:BeaufortScaleIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BeaufortScaleIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BeaufortScaleIntegerCode (-1628)

#endif

/* witsml2__ShakerScreen * has binding name 'PointerTowitsml2__ShakerScreen' for type 'witsml2:ShakerScreen' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShakerScreen
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ShakerScreen (-1627)

#endif

/* eml22__AreaPerAreaMeasure * has binding name 'PointerToeml22__AreaPerAreaMeasure' for type 'eml22:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AreaPerAreaMeasure (-1626)

#endif

/* witsml2__AnchorState * has binding name 'PointerTowitsml2__AnchorState' for type 'witsml2:AnchorState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AnchorState (-1624)

#endif

/* eml22__PowerPerPowerMeasure * has binding name 'PointerToeml22__PowerPerPowerMeasure' for type 'eml22:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PowerPerPowerMeasure (-1623)

#endif

/* enum witsml2__PumpOpType * has binding name 'PointerTowitsml2__PumpOpType' for type 'witsml2:PumpOpType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpOpType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PumpOpType (-1622)

#endif

/* witsml2__MudLosses * has binding name 'PointerTowitsml2__MudLosses' for type 'witsml2:MudLosses' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudLosses
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudLosses (-1621)

#endif

/* witsml2__AbstractItemWtOrVolPerUnit * has binding name 'PointerTowitsml2__AbstractItemWtOrVolPerUnit' for type 'witsml2:AbstractItemWtOrVolPerUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractItemWtOrVolPerUnit
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractItemWtOrVolPerUnit (-1620)

#endif

/* witsml2__Incident * has binding name 'PointerTowitsml2__Incident' for type 'witsml2:Incident' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Incident
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Incident (-1618)

#endif

/* std::string * has binding name 'PointerToeml22__UomEnum' for type 'eml22:UomEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UomEnum
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UomEnum (-1617)

#endif

/* __witsml2__AbstractItemWtOrVolPerUnit_sequence * has binding name 'PointerTo__witsml2__AbstractItemWtOrVolPerUnit_sequence' for type '-witsml2:AbstractItemWtOrVolPerUnit-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__AbstractItemWtOrVolPerUnit_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__AbstractItemWtOrVolPerUnit_sequence (-1616)

#endif

/* witsml2__EquipmentConnection * has binding name 'PointerTowitsml2__EquipmentConnection' for type 'witsml2:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EquipmentConnection (-1613)

#endif

/* witsml2__ReferenceContainer * has binding name 'PointerTowitsml2__ReferenceContainer' for type 'witsml2:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ReferenceContainer (-1611)

#endif

/* witsml2__Assembly * has binding name 'PointerTowitsml2__Assembly' for type 'witsml2:Assembly' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Assembly
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Assembly (-1610)

#endif

/* std::string * has binding name 'PointerTowitsml2__EquipmentTypeExt' for type 'witsml2:EquipmentTypeExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EquipmentTypeExt
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EquipmentTypeExt (-1608)

#endif

/* witsml2__PerforationSet * has binding name 'PointerTowitsml2__PerforationSet' for type 'witsml2:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationSet (-1606)

#endif

/* enum witsml2__PerforationToolType * has binding name 'PointerTowitsml2__PerforationToolType' for type 'witsml2:PerforationToolType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationToolType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerforationToolType (-1605)

#endif

/* enum witsml2__GeologyType * has binding name 'PointerTowitsml2__GeologyType' for type 'witsml2:GeologyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeologyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeologyType (-1604)

#endif

/* witsml2__EventRefInfo * has binding name 'PointerTowitsml2__EventRefInfo' for type 'witsml2:EventRefInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EventRefInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EventRefInfo (-1603)

#endif

/* witsml2__Equipment * has binding name 'PointerTowitsml2__Equipment' for type 'witsml2:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Equipment (-1601)

#endif

/* witsml2__PerfHole * has binding name 'PointerTowitsml2__PerfHole' for type 'witsml2:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerfHole (-1599)

#endif

/* witsml2__PerfSlot * has binding name 'PointerTowitsml2__PerfSlot' for type 'witsml2:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerfSlot (-1597)

#endif

/* witsml2__ExtPropNameValue * has binding name 'PointerTowitsml2__ExtPropNameValue' for type 'witsml2:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ExtPropNameValue (-1595)

#endif

/* enum witsml2__Coating * has binding name 'PointerTowitsml2__Coating' for type 'witsml2:Coating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Coating
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Coating (-1594)

#endif

/* enum witsml2__GradeType * has binding name 'PointerTowitsml2__GradeType' for type 'witsml2:GradeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GradeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GradeType (-1593)

#endif

/* witsml2__DownholeString * has binding name 'PointerTowitsml2__DownholeString' for type 'witsml2:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeString (-1591)

#endif

/* witsml2__StringEquipmentSet * has binding name 'PointerTowitsml2__StringEquipmentSet' for type 'witsml2:StringEquipmentSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StringEquipmentSet
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StringEquipmentSet (-1590)

#endif

/* enum witsml2__SubStringType * has binding name 'PointerTowitsml2__SubStringType' for type 'witsml2:SubStringType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SubStringType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__SubStringType (-1589)

#endif

/* witsml2__BoreholeString * has binding name 'PointerTowitsml2__BoreholeString' for type 'witsml2:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeString (-1587)

#endif

/* witsml2__GeologyFeature * has binding name 'PointerTowitsml2__GeologyFeature' for type 'witsml2:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GeologyFeature (-1585)

#endif

/* witsml2__Borehole * has binding name 'PointerTowitsml2__Borehole' for type 'witsml2:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Borehole (-1583)

#endif

/* witsml2__StringAccessory * has binding name 'PointerTowitsml2__StringAccessory' for type 'witsml2:StringAccessory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StringAccessory
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StringAccessory (-1582)

#endif

/* witsml2__EventInfo * has binding name 'PointerTowitsml2__EventInfo' for type 'witsml2:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__EventInfo (-1581)

#endif

/* enum witsml2__BoreholeType * has binding name 'PointerTowitsml2__BoreholeType' for type 'witsml2:BoreholeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeType (-1580)

#endif

/* witsml2__StringEquipment * has binding name 'PointerTowitsml2__StringEquipment' for type 'witsml2:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StringEquipment (-1578)

#endif

/* eml22__ReciprocalLengthMeasure * has binding name 'PointerToeml22__ReciprocalLengthMeasure' for type 'eml22:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReciprocalLengthMeasure (-1577)

#endif

/* enum witsml2__PerfConveyanceMethod * has binding name 'PointerTowitsml2__PerfConveyanceMethod' for type 'witsml2:PerfConveyanceMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerfConveyanceMethod
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PerfConveyanceMethod (-1576)

#endif

/* witsml2__MemberObject * has binding name 'PointerTowitsml2__MemberObject' for type 'witsml2:MemberObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MemberObject (-1574)

#endif

/* witsml2__ObjectSequence * has binding name 'PointerTowitsml2__ObjectSequence' for type 'witsml2:ObjectSequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ObjectSequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ObjectSequence (-1573)

#endif

/* enum witsml2__LogIndexType * has binding name 'PointerTowitsml2__LogIndexType' for type 'witsml2:LogIndexType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogIndexType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogIndexType (-1572)

#endif

/* witsml2__DownholeStringReference * has binding name 'PointerTowitsml2__DownholeStringReference' for type 'witsml2:DownholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DownholeStringReference (-1570)

#endif

/* witsml2__BoreholeStringReference * has binding name 'PointerTowitsml2__BoreholeStringReference' for type 'witsml2:BoreholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoreholeStringReference (-1568)

#endif

/* witsml2__DepthRegTrackCurve * has binding name 'PointerTowitsml2__DepthRegTrackCurve' for type 'witsml2:DepthRegTrackCurve' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegTrackCurve (-1566)

#endif

/* witsml2__DepthRegTrack * has binding name 'PointerTowitsml2__DepthRegTrack' for type 'witsml2:DepthRegTrack' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegTrack (-1564)

#endif

/* witsml2__DepthRegCalibrationPoint * has binding name 'PointerTowitsml2__DepthRegCalibrationPoint' for type 'witsml2:DepthRegCalibrationPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegCalibrationPoint (-1562)

#endif

/* enum witsml2__LogSectionType * has binding name 'PointerTowitsml2__LogSectionType' for type 'witsml2:LogSectionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogSectionType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogSectionType (-1560)

#endif

/* witsml2__DepthRegRectangle * has binding name 'PointerTowitsml2__DepthRegRectangle' for type 'witsml2:DepthRegRectangle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegRectangle (-1559)

#endif

/* enum witsml2__LogRectangleType * has binding name 'PointerTowitsml2__LogRectangleType' for type 'witsml2:LogRectangleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogRectangleType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__LogRectangleType (-1558)

#endif

/* witsml2__DepthRegPoint * has binding name 'PointerTowitsml2__DepthRegPoint' for type 'witsml2:DepthRegPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegPoint
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegPoint (-1557)

#endif

/* witsml2__DepthRegParameter * has binding name 'PointerTowitsml2__DepthRegParameter' for type 'witsml2:DepthRegParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DepthRegParameter (-1555)

#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__anyURI
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__anyURI (-1553)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTostd__string
#define SOAP_TYPE_gsoap_eml2_2_PointerTostd__string (-1552)

#endif

/* eml22__DataObjectReference * has binding name 'PointerToeml22__DataObjectReference' for type 'eml22:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DataObjectReference (-1550)

#endif

/* enum witsml2__HoleCasingType * has binding name 'PointerTowitsml2__HoleCasingType' for type 'witsml2:HoleCasingType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__HoleCasingType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__HoleCasingType (-1549)

#endif

/* eml22__Citation * has binding name 'PointerToeml22__Citation' for type 'eml22:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__Citation
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__Citation (-1548)

#endif

/* witsml2__CementAdditive * has binding name 'PointerTowitsml2__CementAdditive' for type 'witsml2:CementAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementAdditive (-1546)

#endif

/* eml22__DimensionlessMeasure * has binding name 'PointerToeml22__DimensionlessMeasure' for type 'eml22:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DimensionlessMeasure (-1545)

#endif

/* eml22__VolumePerMassMeasure * has binding name 'PointerToeml22__VolumePerMassMeasure' for type 'eml22:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerMassMeasure (-1544)

#endif

/* ULONG64 * has binding name 'PointerToULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToULONG64
#define SOAP_TYPE_gsoap_eml2_2_PointerToULONG64 (-1543)

#endif

/* witsml2__CementPumpScheduleStep * has binding name 'PointerTowitsml2__CementPumpScheduleStep' for type 'witsml2:CementPumpScheduleStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__CementPumpScheduleStep (-1541)

#endif

/* witsml2__FluidLocation * has binding name 'PointerTowitsml2__FluidLocation' for type 'witsml2:FluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__FluidLocation (-1539)

#endif

/* std::string * has binding name 'PointerToeml22__UuidString' for type 'eml22:UuidString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UuidString
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UuidString (-1538)

#endif

/* enum witsml2__NameTagLocation * has binding name 'PointerTowitsml2__NameTagLocation' for type 'witsml2:NameTagLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NameTagLocation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NameTagLocation (-1537)

#endif

/* enum witsml2__NameTagTechnology * has binding name 'PointerTowitsml2__NameTagTechnology' for type 'witsml2:NameTagTechnology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NameTagTechnology
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NameTagTechnology (-1536)

#endif

/* witsml2__Nozzle * has binding name 'PointerTowitsml2__Nozzle' for type 'witsml2:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Nozzle (-1534)

#endif

/* witsml2__RotarySteerableTool * has binding name 'PointerTowitsml2__RotarySteerableTool' for type 'witsml2:RotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RotarySteerableTool (-1533)

#endif

/* witsml2__HoleOpener * has binding name 'PointerTowitsml2__HoleOpener' for type 'witsml2:HoleOpener' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__HoleOpener
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__HoleOpener (-1532)

#endif

/* witsml2__Bend * has binding name 'PointerTowitsml2__Bend' for type 'witsml2:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Bend
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Bend (-1530)

#endif

/* witsml2__Stabilizer * has binding name 'PointerTowitsml2__Stabilizer' for type 'witsml2:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Stabilizer (-1528)

#endif

/* witsml2__Motor * has binding name 'PointerTowitsml2__Motor' for type 'witsml2:Motor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Motor
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Motor (-1527)

#endif

/* witsml2__BitRecord * has binding name 'PointerTowitsml2__BitRecord' for type 'witsml2:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitRecord (-1526)

#endif

/* witsml2__MwdTool * has binding name 'PointerTowitsml2__MwdTool' for type 'witsml2:MwdTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MwdTool
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MwdTool (-1525)

#endif

/* witsml2__Jar * has binding name 'PointerTowitsml2__Jar' for type 'witsml2:Jar' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Jar
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Jar (-1524)

#endif

/* witsml2__Connection * has binding name 'PointerTowitsml2__Connection' for type 'witsml2:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Connection
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Connection (-1522)

#endif

/* witsml2__NameTag * has binding name 'PointerTowitsml2__NameTag' for type 'witsml2:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NameTag (-1520)

#endif

/* enum witsml2__MaterialType * has binding name 'PointerTowitsml2__MaterialType' for type 'witsml2:MaterialType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MaterialType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MaterialType (-1519)

#endif

/* eml22__ForcePerLengthMeasure * has binding name 'PointerToeml22__ForcePerLengthMeasure' for type 'eml22:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForcePerLengthMeasure (-1518)

#endif

/* enum witsml2__BoxPinConfig * has binding name 'PointerTowitsml2__BoxPinConfig' for type 'witsml2:BoxPinConfig' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoxPinConfig
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BoxPinConfig (-1517)

#endif

/* eml22__LengthPerLengthMeasure * has binding name 'PointerToeml22__LengthPerLengthMeasure' for type 'eml22:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthPerLengthMeasure (-1516)

#endif

/* eml22__MassPerLengthMeasure * has binding name 'PointerToeml22__MassPerLengthMeasure' for type 'eml22:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerLengthMeasure (-1515)

#endif

/* enum witsml2__BladeType * has binding name 'PointerTowitsml2__BladeType' for type 'witsml2:BladeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BladeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BladeType (-1514)

#endif

/* enum witsml2__BladeShapeType * has binding name 'PointerTowitsml2__BladeShapeType' for type 'witsml2:BladeShapeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BladeShapeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BladeShapeType (-1513)

#endif

/* enum witsml2__MeasurementType * has binding name 'PointerTowitsml2__MeasurementType' for type 'witsml2:MeasurementType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MeasurementType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MeasurementType (-1512)

#endif

/* witsml2__AbstractRotarySteerableTool * has binding name 'PointerTowitsml2__AbstractRotarySteerableTool' for type 'witsml2:AbstractRotarySteerableTool' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractRotarySteerableTool
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractRotarySteerableTool (-1511)

#endif

/* enum witsml2__NozzleType * has binding name 'PointerTowitsml2__NozzleType' for type 'witsml2:NozzleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NozzleType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__NozzleType (-1510)

#endif

/* witsml2__Sensor * has binding name 'PointerTowitsml2__Sensor' for type 'witsml2:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Sensor (-1508)

#endif

/* enum witsml2__BearingType * has binding name 'PointerTowitsml2__BearingType' for type 'witsml2:BearingType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BearingType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BearingType (-1507)

#endif

/* enum witsml2__JarAction * has binding name 'PointerTowitsml2__JarAction' for type 'witsml2:JarAction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__JarAction
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__JarAction (-1506)

#endif

/* enum witsml2__JarType * has binding name 'PointerTowitsml2__JarType' for type 'witsml2:JarType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__JarType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__JarType (-1505)

#endif

/* enum witsml2__HoleOpenerType * has binding name 'PointerTowitsml2__HoleOpenerType' for type 'witsml2:HoleOpenerType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__HoleOpenerType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__HoleOpenerType (-1504)

#endif

/* eml22__AreaMeasure * has binding name 'PointerToeml22__AreaMeasure' for type 'eml22:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AreaMeasure (-1503)

#endif

/* enum witsml2__ConnectionPosition * has binding name 'PointerTowitsml2__ConnectionPosition' for type 'witsml2:ConnectionPosition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ConnectionPosition
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ConnectionPosition (-1502)

#endif

/* enum witsml2__BitReasonPulled * has binding name 'PointerTowitsml2__BitReasonPulled' for type 'witsml2:BitReasonPulled' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitReasonPulled
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitReasonPulled (-1501)

#endif

/* enum witsml2__IadcBearingWearCode * has binding name 'PointerTowitsml2__IadcBearingWearCode' for type 'witsml2:IadcBearingWearCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__IadcBearingWearCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__IadcBearingWearCode (-1500)

#endif

/* enum witsml2__BitDullCode * has binding name 'PointerTowitsml2__BitDullCode' for type 'witsml2:BitDullCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitDullCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitDullCode (-1499)

#endif

/* enum witsml2__IadcIntegerCode * has binding name 'PointerTowitsml2__IadcIntegerCode' for type 'witsml2:IadcIntegerCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__IadcIntegerCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__IadcIntegerCode (-1498)

#endif

/* enum witsml2__BitType * has binding name 'PointerTowitsml2__BitType' for type 'witsml2:BitType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__BitType (-1497)

#endif

/* eml22__CustomData * has binding name 'PointerToeml22__CustomData' for type 'eml22:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__CustomData
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__CustomData (-1496)

#endif

/* witsml2__RheometerViscosity * has binding name 'PointerTowitsml2__RheometerViscosity' for type 'witsml2:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RheometerViscosity (-1494)

#endif

/* enum witsml2__WellTestType * has binding name 'PointerTowitsml2__WellTestType' for type 'witsml2:WellTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellTestType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellTestType (-1493)

#endif

/* std::string * has binding name 'PointerToxsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__date
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__date (-1492)

#endif

/* eml22__AnglePerLengthMeasure * has binding name 'PointerToeml22__AnglePerLengthMeasure' for type 'eml22:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AnglePerLengthMeasure (-1491)

#endif

/* eml22__Cost * has binding name 'PointerToeml22__Cost' for type 'eml22:Cost' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__Cost
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__Cost (-1490)

#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToint
#define SOAP_TYPE_gsoap_eml2_2_PointerToint (-1489)

#endif

/* enum witsml2__PresTestType * has binding name 'PointerTowitsml2__PresTestType' for type 'witsml2:PresTestType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PresTestType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__PresTestType (-1488)

#endif

/* enum witsml2__WellboreType * has binding name 'PointerTowitsml2__WellboreType' for type 'witsml2:WellboreType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellboreType (-1487)

#endif

/* witsml2__AbstractBottomHoleTemperature * has binding name 'PointerTowitsml2__AbstractBottomHoleTemperature' for type 'witsml2:AbstractBottomHoleTemperature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractBottomHoleTemperature
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractBottomHoleTemperature (-1486)

#endif

/* enum witsml2__GasPeakType * has binding name 'PointerTowitsml2__GasPeakType' for type 'witsml2:GasPeakType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GasPeakType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__GasPeakType (-1485)

#endif

/* enum witsml2__InnerBarrelType * has binding name 'PointerTowitsml2__InnerBarrelType' for type 'witsml2:InnerBarrelType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InnerBarrelType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__InnerBarrelType (-1484)

#endif

/* enum witsml2__WellKillingProcedureType * has binding name 'PointerTowitsml2__WellKillingProcedureType' for type 'witsml2:WellKillingProcedureType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellKillingProcedureType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellKillingProcedureType (-1483)

#endif

/* enum witsml2__WellControlIncidentType * has binding name 'PointerTowitsml2__WellControlIncidentType' for type 'witsml2:WellControlIncidentType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellControlIncidentType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellControlIncidentType (-1482)

#endif

/* eml22__ObjectAlias * has binding name 'PointerToeml22__ObjectAlias' for type 'eml22:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ObjectAlias (-1480)

#endif

/* enum witsml2__ItemState * has binding name 'PointerTowitsml2__ItemState' for type 'witsml2:ItemState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ItemState
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__ItemState (-1479)

#endif

/* enum witsml2__StateDetailActivity * has binding name 'PointerTowitsml2__StateDetailActivity' for type 'witsml2:StateDetailActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StateDetailActivity
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__StateDetailActivity (-1478)

#endif

/* eml22__TvdInterval * has binding name 'PointerToeml22__TvdInterval' for type 'eml22:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TvdInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TvdInterval (-1477)

#endif

/* eml22__MdInterval * has binding name 'PointerToeml22__MdInterval' for type 'eml22:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MdInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MdInterval (-1476)

#endif

/* enum witsml2__DrillActivityClassType * has binding name 'PointerTowitsml2__DrillActivityClassType' for type 'witsml2:DrillActivityClassType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillActivityClassType
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillActivityClassType (-1475)

#endif

/* enum witsml2__DrillActivityCode * has binding name 'PointerTowitsml2__DrillActivityCode' for type 'witsml2:DrillActivityCode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillActivityCode
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__DrillActivityCode (-1474)

#endif

/* __witsml2__AbstractBottomHoleTemperature_sequence * has binding name 'PointerTo__witsml2__AbstractBottomHoleTemperature_sequence' for type '-witsml2:AbstractBottomHoleTemperature-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__AbstractBottomHoleTemperature_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__witsml2__AbstractBottomHoleTemperature_sequence (-1473)

#endif

/* witsml2__Rheometer * has binding name 'PointerTowitsml2__Rheometer' for type 'witsml2:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__Rheometer (-1470)

#endif

/* eml22__MassMeasure * has binding name 'PointerToeml22__MassMeasure' for type 'eml22:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassMeasure (-1469)

#endif

/* eml22__MassPerMassMeasure * has binding name 'PointerToeml22__MassPerMassMeasure' for type 'eml22:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerMassMeasure (-1468)

#endif

/* eml22__ElectricPotentialDifferenceMeasure * has binding name 'PointerToeml22__ElectricPotentialDifferenceMeasure' for type 'eml22:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ElectricPotentialDifferenceMeasure (-1467)

#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTodouble
#define SOAP_TYPE_gsoap_eml2_2_PointerTodouble (-1466)

#endif

/* eml22__GenericMeasure * has binding name 'PointerToeml22__GenericMeasure' for type 'eml22:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__GenericMeasure (-1465)

#endif

/* eml22__VolumePerVolumeMeasure * has binding name 'PointerToeml22__VolumePerVolumeMeasure' for type 'eml22:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerVolumeMeasure (-1464)

#endif

/* eml22__DynamicViscosityMeasure * has binding name 'PointerToeml22__DynamicViscosityMeasure' for type 'eml22:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DynamicViscosityMeasure (-1463)

#endif

/* eml22__VolumeMeasure * has binding name 'PointerToeml22__VolumeMeasure' for type 'eml22:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumeMeasure (-1462)

#endif

/* eml22__WellVerticalDepthCoord * has binding name 'PointerToeml22__WellVerticalDepthCoord' for type 'eml22:WellVerticalDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__WellVerticalDepthCoord
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__WellVerticalDepthCoord (-1461)

#endif

/* struct tm * has binding name 'PointerToeml22__TimeStamp' for type 'eml22:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeStamp
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeStamp (-1460)

#endif

/* enum witsml2__MudSubClass * has binding name 'PointerTowitsml2__MudSubClass' for type 'witsml2:MudSubClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudSubClass
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudSubClass (-1459)

#endif

/* enum witsml2__MudClass * has binding name 'PointerTowitsml2__MudClass' for type 'witsml2:MudClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudClass
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__MudClass (-1458)

#endif

/* eml22__ThermodynamicTemperatureMeasure * has binding name 'PointerToeml22__ThermodynamicTemperatureMeasure' for type 'eml22:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermodynamicTemperatureMeasure (-1457)

#endif

/* eml22__PlaneAngleMeasure * has binding name 'PointerToeml22__PlaneAngleMeasure' for type 'eml22:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PlaneAngleMeasure (-1456)

#endif

/* eml22__AngularVelocityMeasure * has binding name 'PointerToeml22__AngularVelocityMeasure' for type 'eml22:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AngularVelocityMeasure (-1455)

#endif

/* eml22__LengthMeasure * has binding name 'PointerToeml22__LengthMeasure' for type 'eml22:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasure (-1454)

#endif

/* eml22__PressureMeasure * has binding name 'PointerToeml22__PressureMeasure' for type 'eml22:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasure (-1453)

#endif

/* eml22__PowerMeasure * has binding name 'PointerToeml22__PowerMeasure' for type 'eml22:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PowerMeasure (-1452)

#endif

/* eml22__LengthPerTimeMeasure * has binding name 'PointerToeml22__LengthPerTimeMeasure' for type 'eml22:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthPerTimeMeasure (-1451)

#endif

/* eml22__VolumePerTimeMeasure * has binding name 'PointerToeml22__VolumePerTimeMeasure' for type 'eml22:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerTimeMeasure (-1450)

#endif

/* eml22__MassPerVolumeMeasure * has binding name 'PointerToeml22__MassPerVolumeMeasure' for type 'eml22:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerVolumeMeasure (-1449)

#endif

/* eml22__MomentOfForceMeasure * has binding name 'PointerToeml22__MomentOfForceMeasure' for type 'eml22:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MomentOfForceMeasure (-1448)

#endif

/* eml22__ForceMeasure * has binding name 'PointerToeml22__ForceMeasure' for type 'eml22:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ForceMeasure (-1447)

#endif

/* eml22__TimeMeasure * has binding name 'PointerToeml22__TimeMeasure' for type 'eml22:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeMeasure (-1446)

#endif

/* eml22__AbstractVerticalCrs * has binding name 'PointerToeml22__AbstractVerticalCrs' for type 'eml22:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractVerticalCrs (-1445)

#endif

/* witsml2__RefWellboreRig * has binding name 'PointerTowitsml2__RefWellboreRig' for type 'witsml2:RefWellboreRig' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RefWellboreRig
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RefWellboreRig (-1444)

#endif

/* witsml2__RefWellbore * has binding name 'PointerTowitsml2__RefWellbore' for type 'witsml2:RefWellbore' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RefWellbore
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__RefWellbore (-1443)

#endif

/* enum eml22__WellboreDatumReference * has binding name 'PointerToeml22__WellboreDatumReference' for type 'eml22:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__WellboreDatumReference (-1441)

#endif

/* witsml2__AbstractWellLocation * has binding name 'PointerTowitsml2__AbstractWellLocation' for type 'witsml2:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__AbstractWellLocation (-1439)

#endif

/* witsml2__WellElevationCoord * has binding name 'PointerTowitsml2__WellElevationCoord' for type 'witsml2:WellElevationCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellElevationCoord
#define SOAP_TYPE_gsoap_eml2_2_PointerTowitsml2__WellElevationCoord (-1438)

#endif

/* eml22__MeasuredDepthCoord * has binding name 'PointerToeml22__MeasuredDepthCoord' for type 'eml22:MeasuredDepthCoord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MeasuredDepthCoord
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MeasuredDepthCoord (-1437)

#endif

/* std::string * has binding name 'PointerToeml22__String64' for type 'eml22:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String64
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String64 (-1436)

#endif

/* eml22__ExtensionNameValue * has binding name 'PointerToeml22__ExtensionNameValue' for type 'eml22:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExtensionNameValue (-1433)

#endif

/* std::string * has binding name 'PointerToeml22__String2000' for type 'eml22:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String2000 (-1432)

#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTobool
#define SOAP_TYPE_gsoap_eml2_2_PointerTobool (-1431)

#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTounsignedByte
#define SOAP_TYPE_gsoap_eml2_2_PointerTounsignedByte (-11)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_gsoap_eml2_2__QName
#define SOAP_TYPE_gsoap_eml2_2__QName (-6)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__XML
#define SOAP_TYPE_gsoap_eml2_2__XML (-5)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_string
#define SOAP_TYPE_gsoap_eml2_2_string (-4)

#endif

/* std::vector<_gml__coordinateOperationAccuracy *>  has binding name 'std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy (-2241)

#endif

/* std::vector<gml__CoordinateSystemAxisPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType (-2236)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfstd__string
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfstd__string (-2234)

#endif

/* std::vector<_gml__domainOfValidity *>  has binding name 'std__vectorTemplateOfPointerTo_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__domainOfValidity (-2233)

#endif

/* std::vector<eml22__IntegerConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml22__IntegerConstantArray' for type 'eml22:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__IntegerConstantArray (-2230)

#endif

/* std::vector<eml22__FloatingPointConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml22__FloatingPointConstantArray' for type 'eml22:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FloatingPointConstantArray (-2227)

#endif

/* std::vector<gml__RelatedTimeType *>  has binding name 'std__vectorTemplateOfPointerTogml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__RelatedTimeType (-2225)

#endif

/* std::vector<gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-2212)

#endif

/* std::vector<gmd__CI_USCOREResponsibleParty_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType (-2210)

#endif

/* std::vector<gmd__MD_USCOREIdentifier_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType (-2208)

#endif

/* std::vector<gmd__CI_USCOREDate_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType (-2206)

#endif

/* std::vector<gmd__DQ_USCOREResult_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType (-2204)

#endif

/* std::vector<gco__DateTime_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType (-2202)

#endif

/* std::vector<gco__CharacterString_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType (-2197)

#endif

/* std::vector<gmd__EX_USCOREVerticalExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType (-2192)

#endif

/* std::vector<gmd__EX_USCORETemporalExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType (-2190)

#endif

/* std::vector<gmd__EX_USCOREGeographicExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType (-2188)

#endif

/* std::vector<eml22__AbstractGraphicalInformation *>  has binding name 'std__vectorTemplateOfPointerToeml22__AbstractGraphicalInformation' for type 'eml22:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractGraphicalInformation (-2183)

#endif

/* std::vector<eml22__FailingRule *>  has binding name 'std__vectorTemplateOfPointerToeml22__FailingRule' for type 'eml22:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FailingRule (-2181)

#endif

/* std::vector<eml22__GeologicTime *>  has binding name 'std__vectorTemplateOfPointerToeml22__GeologicTime' for type 'eml22:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__GeologicTime (-2170)

#endif

/* std::vector<eml22__PropertyKind *>  has binding name 'std__vectorTemplateOfPointerToeml22__PropertyKind' for type 'eml22:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__PropertyKind (-2168)

#endif

/* std::vector<eml22__ParameterTemplate *>  has binding name 'std__vectorTemplateOfPointerToeml22__ParameterTemplate' for type 'eml22:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ParameterTemplate (-2166)

#endif

/* std::vector<witsml2__CompletionStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CompletionStatusHistory' for type 'witsml2:CompletionStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CompletionStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CompletionStatusHistory (-2163)

#endif

/* std::vector<witsml2__WellboreMarker *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WellboreMarker' for type 'witsml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WellboreMarker (-2161)

#endif

/* std::vector<witsml2__MudLogParameter *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudLogParameter' for type 'witsml2:MudLogParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudLogParameter
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudLogParameter (-2159)

#endif

/* std::vector<witsml2__MudlogReportInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudlogReportInterval' for type 'witsml2:MudlogReportInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudlogReportInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudlogReportInterval (-2157)

#endif

/* std::vector<witsml2__ShowEvaluationInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ShowEvaluationInterval' for type 'witsml2:ShowEvaluationInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ShowEvaluationInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ShowEvaluationInterval (-2149)

#endif

/* std::vector<witsml2__LithostratigraphicUnit *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__LithostratigraphicUnit' for type 'witsml2:LithostratigraphicUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__LithostratigraphicUnit
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__LithostratigraphicUnit (-2146)

#endif

/* std::vector<witsml2__GeochronologicalUnit *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GeochronologicalUnit' for type 'witsml2:GeochronologicalUnit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GeochronologicalUnit
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GeochronologicalUnit (-2144)

#endif

/* std::vector<witsml2__InterpretedGeologyInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__InterpretedGeologyInterval' for type 'witsml2:InterpretedGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__InterpretedGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__InterpretedGeologyInterval (-2142)

#endif

/* std::vector<witsml2__CuttingsIntervalLithology *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalLithology' for type 'witsml2:CuttingsIntervalLithology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalLithology
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalLithology (-2140)

#endif

/* std::vector<witsml2__CuttingsGeologyInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CuttingsGeologyInterval' for type 'witsml2:CuttingsGeologyInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CuttingsGeologyInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CuttingsGeologyInterval (-2137)

#endif

/* std::vector<witsml2__SurveySection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__SurveySection' for type 'witsml2:SurveySection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__SurveySection
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__SurveySection (-2135)

#endif

/* std::vector<witsml2__StimISO13503_USCORE5Point *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE5Point' for type 'witsml2:StimISO13503_5Point' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE5Point
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE5Point (-2133)

#endif

/* std::vector<witsml2__StimISO13503_USCORE2Properties *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE2Properties' for type 'witsml2:StimISO13503_2Properties' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE2Properties
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimISO13503_USCORE2Properties (-2131)

#endif

/* std::vector<witsml2__StimReservoirInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimReservoirInterval' for type 'witsml2:StimReservoirInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimReservoirInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimReservoirInterval (-2126)

#endif

/* std::vector<witsml2__StimJobStep *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobStep' for type 'witsml2:StimJobStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobStep
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobStep (-2123)

#endif

/* std::vector<witsml2__StimEvent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimEvent' for type 'witsml2:StimEvent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimEvent
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimEvent (-2121)

#endif

/* std::vector<witsml2__StimShutInPressure *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimShutInPressure' for type 'witsml2:StimShutInPressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimShutInPressure
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimShutInPressure (-2119)

#endif

/* std::vector<witsml2__StimJobDiagnosticSession *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobDiagnosticSession' for type 'witsml2:StimJobDiagnosticSession' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobDiagnosticSession
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobDiagnosticSession (-2117)

#endif

/* std::vector<witsml2__StimJobLogCatalog *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobLogCatalog' for type 'witsml2:StimJobLogCatalog' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobLogCatalog
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobLogCatalog (-2115)

#endif

/* std::vector<witsml2__StimJobStage *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimJobStage' for type 'witsml2:StimJobStage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobStage
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimJobStage (-2112)

#endif

/* std::vector<enum witsml2__RiskAffectedPersonnel>  has binding name 'std__vectorTemplateOfwitsml2__RiskAffectedPersonnel' for type 'witsml2:RiskAffectedPersonnel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__RiskAffectedPersonnel
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__RiskAffectedPersonnel (-2106)

#endif

/* std::vector<witsml2__Degasser *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Degasser' for type 'witsml2:Degasser' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Degasser
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Degasser (-2103)

#endif

/* std::vector<witsml2__Hydrocyclone *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Hydrocyclone' for type 'witsml2:Hydrocyclone' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Hydrocyclone
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Hydrocyclone (-2101)

#endif

/* std::vector<witsml2__Centrifuge *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Centrifuge' for type 'witsml2:Centrifuge' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Centrifuge
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Centrifuge (-2099)

#endif

/* std::vector<witsml2__MudPump *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudPump' for type 'witsml2:MudPump' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudPump
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudPump (-2097)

#endif

/* std::vector<witsml2__Pit *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Pit' for type 'witsml2:Pit' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Pit
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Pit (-2095)

#endif

/* std::vector<witsml2__Shaker *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Shaker' for type 'witsml2:Shaker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Shaker
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Shaker (-2092)

#endif

/* std::vector<witsml2__WeightingFunction *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WeightingFunction' for type 'witsml2:WeightingFunction' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WeightingFunction
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WeightingFunction (-2085)

#endif

/* std::vector<witsml2__ContinuousAzimuthFormula *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ContinuousAzimuthFormula' for type 'witsml2:ContinuousAzimuthFormula' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ContinuousAzimuthFormula
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ContinuousAzimuthFormula (-2083)

#endif

/* std::vector<witsml2__ToolErrorModel *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ToolErrorModel' for type 'witsml2:ToolErrorModel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ToolErrorModel
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ToolErrorModel (-2079)

#endif

/* std::vector<witsml2__ErrorTermValue *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ErrorTermValue' for type 'witsml2:ErrorTermValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ErrorTermValue
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ErrorTermValue (-2076)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfwitsml2__CorrectionConsideredExt' for type 'witsml2:CorrectionConsideredExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__CorrectionConsideredExt
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__CorrectionConsideredExt (-2072)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfwitsml2__OperatingConditionExt' for type 'witsml2:OperatingConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__OperatingConditionExt
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__OperatingConditionExt (-2071)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfwitsml2__ToolSubKindExt' for type 'witsml2:ToolSubKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__ToolSubKindExt
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__ToolSubKindExt (-2070)

#endif

/* std::vector<witsml2__ErrorTerm *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ErrorTerm' for type 'witsml2:ErrorTerm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ErrorTerm
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ErrorTerm (-2068)

#endif

/* std::vector<witsml2__PumpOp *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PumpOp' for type 'witsml2:PumpOp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PumpOp
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PumpOp (-2063)

#endif

/* std::vector<witsml2__PitVolume *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PitVolume' for type 'witsml2:PitVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PitVolume
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PitVolume (-2061)

#endif

/* std::vector<witsml2__Scr *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Scr' for type 'witsml2:Scr' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Scr
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Scr (-2059)

#endif

/* std::vector<witsml2__TrajectoryStation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__TrajectoryStation' for type 'witsml2:TrajectoryStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__TrajectoryStation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__TrajectoryStation (-2057)

#endif

/* std::vector<witsml2__Personnel *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Personnel' for type 'witsml2:Personnel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Personnel
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Personnel (-2055)

#endif

/* std::vector<witsml2__Inventory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Inventory' for type 'witsml2:Inventory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Inventory
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Inventory (-2052)

#endif

/* std::vector<witsml2__Weather *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Weather' for type 'witsml2:Weather' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Weather
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Weather (-2050)

#endif

/* std::vector<witsml2__SupportCraft *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__SupportCraft' for type 'witsml2:SupportCraft' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__SupportCraft
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__SupportCraft (-2048)

#endif

/* std::vector<witsml2__ShakerOp *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ShakerOp' for type 'witsml2:ShakerOp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ShakerOp
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ShakerOp (-2045)

#endif

/* std::vector<witsml2__DayCost *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DayCost' for type 'witsml2:DayCost' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DayCost
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DayCost (-2034)

#endif

/* std::vector<witsml2__AbstractEventExtension *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AbstractEventExtension' for type 'witsml2:AbstractEventExtension' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AbstractEventExtension
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AbstractEventExtension (-2032)

#endif

/* std::vector<witsml2__Perforating *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Perforating' for type 'witsml2:Perforating' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Perforating
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Perforating (-2029)

#endif

/* std::vector<witsml2__DepthRegLogRect *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegLogRect' for type 'witsml2:DepthRegLogRect' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegLogRect
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegLogRect (-2027)

#endif

/* std::vector<witsml2__DepthRegLogSection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegLogSection' for type 'witsml2:DepthRegLogSection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegLogSection
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegLogSection (-2026)

#endif

/* std::vector<witsml2__ChannelSet *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ChannelSet' for type 'witsml2:ChannelSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ChannelSet
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ChannelSet (-2019)

#endif

/* std::vector<witsml2__Channel *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Channel' for type 'witsml2:Channel' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Channel
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Channel (-2014)

#endif

/* std::vector<witsml2__ChannelIndex *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ChannelIndex' for type 'witsml2:ChannelIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ChannelIndex
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ChannelIndex (-2012)

#endif

/* std::vector<witsml2__PointMetadata *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PointMetadata' for type 'witsml2:PointMetadata' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PointMetadata
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PointMetadata (-2010)

#endif

/* std::vector<witsml2__LogChannelAxis *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__LogChannelAxis' for type 'witsml2:LogChannelAxis' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__LogChannelAxis
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__LogChannelAxis (-2004)

#endif

/* std::vector<witsml2__WellboreGeometrySection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WellboreGeometrySection' for type 'witsml2:WellboreGeometrySection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WellboreGeometrySection
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WellboreGeometrySection (-2002)

#endif

/* std::vector<witsml2__CementStageReport *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementStageReport' for type 'witsml2:CementStageReport' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementStageReport
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementStageReport (-2000)

#endif

/* std::vector<witsml2__CementStageDesign *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementStageDesign' for type 'witsml2:CementStageDesign' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementStageDesign
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementStageDesign (-1998)

#endif

/* std::vector<witsml2__CementingFluid *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementingFluid' for type 'witsml2:CementingFluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementingFluid
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementingFluid (-1996)

#endif

/* std::vector<witsml2__TubularComponent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__TubularComponent' for type 'witsml2:TubularComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__TubularComponent
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__TubularComponent (-1991)

#endif

/* std::vector<witsml2__DrillReportSurveyStation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportSurveyStation' for type 'witsml2:DrillReportSurveyStation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportSurveyStation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportSurveyStation (-1985)

#endif

/* std::vector<witsml2__DrillReportPorePressure *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportPorePressure' for type 'witsml2:DrillReportPorePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportPorePressure
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportPorePressure (-1982)

#endif

/* std::vector<witsml2__DrillReportStatusInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportStatusInfo' for type 'witsml2:DrillReportStatusInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportStatusInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportStatusInfo (-1980)

#endif

/* std::vector<witsml2__DrillReportGasReadingInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportGasReadingInfo' for type 'witsml2:DrillReportGasReadingInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportGasReadingInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportGasReadingInfo (-1977)

#endif

/* std::vector<witsml2__DrillReportPerfInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportPerfInfo' for type 'witsml2:DrillReportPerfInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportPerfInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportPerfInfo (-1975)

#endif

/* std::vector<witsml2__DrillReportStratInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportStratInfo' for type 'witsml2:DrillReportStratInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportStratInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportStratInfo (-1973)

#endif

/* std::vector<witsml2__DrillReportControlIncidentInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportControlIncidentInfo' for type 'witsml2:DrillReportControlIncidentInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportControlIncidentInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportControlIncidentInfo (-1971)

#endif

/* std::vector<witsml2__DrillReportEquipFailureInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportEquipFailureInfo' for type 'witsml2:DrillReportEquipFailureInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportEquipFailureInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportEquipFailureInfo (-1969)

#endif

/* std::vector<witsml2__DrillReportLithShowInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportLithShowInfo' for type 'witsml2:DrillReportLithShowInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportLithShowInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportLithShowInfo (-1967)

#endif

/* std::vector<witsml2__DrillReportFormTestInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportFormTestInfo' for type 'witsml2:DrillReportFormTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportFormTestInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportFormTestInfo (-1965)

#endif

/* std::vector<witsml2__DrillReportWellTestInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportWellTestInfo' for type 'witsml2:DrillReportWellTestInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportWellTestInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportWellTestInfo (-1963)

#endif

/* std::vector<witsml2__DrillReportCoreInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportCoreInfo' for type 'witsml2:DrillReportCoreInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportCoreInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportCoreInfo (-1961)

#endif

/* std::vector<witsml2__DrillReportLogInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillReportLogInfo' for type 'witsml2:DrillReportLogInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportLogInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillReportLogInfo (-1959)

#endif

/* std::vector<witsml2__DrillActivity *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillActivity' for type 'witsml2:DrillActivity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillActivity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillActivity (-1957)

#endif

/* std::vector<witsml2__BitRecord *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BitRecord' for type 'witsml2:BitRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BitRecord
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BitRecord (-1955)

#endif

/* std::vector<witsml2__Fluid *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Fluid' for type 'witsml2:Fluid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Fluid
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Fluid (-1949)

#endif

/* std::vector<witsml2__DrillingParams *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillingParams' for type 'witsml2:DrillingParams' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillingParams
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillingParams (-1947)

#endif

/* std::vector<witsml2__WellDatum *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__WellDatum' for type 'witsml2:WellDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WellDatum
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__WellDatum (-1944)

#endif

/* std::vector<witsml2__ReferencePoint *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ReferencePoint' for type 'witsml2:ReferencePoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ReferencePoint
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ReferencePoint (-1942)

#endif

/* std::vector<gml__CodeType *>  has binding name 'std__vectorTemplateOfPointerTogml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CodeType (-1807)

#endif

/* std::vector<eml22__AbstractActivityParameter *>  has binding name 'std__vectorTemplateOfPointerToeml22__AbstractActivityParameter' for type 'eml22:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractActivityParameter (-1787)

#endif

/* std::vector<enum eml22__ActivityParameterKind>  has binding name 'std__vectorTemplateOfeml22__ActivityParameterKind' for type 'eml22:ActivityParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__ActivityParameterKind
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__ActivityParameterKind (-1785)

#endif

/* std::vector<eml22__AbstractParameterKey *>  has binding name 'std__vectorTemplateOfPointerToeml22__AbstractParameterKey' for type 'eml22:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractParameterKey (-1784)

#endif

/* std::vector<eml22__ExternalDatasetPart *>  has binding name 'std__vectorTemplateOfPointerToeml22__ExternalDatasetPart' for type 'eml22:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExternalDatasetPart (-1782)

#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOf_XML
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOf_XML (-1774)

#endif

/* std::vector<witsml2__PerforationStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerforationStatusHistory' for type 'witsml2:PerforationStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerforationStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerforationStatusHistory (-1772)

#endif

/* std::vector<witsml2__IntervalStatusHistory *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__IntervalStatusHistory' for type 'witsml2:IntervalStatusHistory' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__IntervalStatusHistory
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__IntervalStatusHistory (-1768)

#endif

/* std::vector<witsml2__GravelPackInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GravelPackInterval' for type 'witsml2:GravelPackInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GravelPackInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GravelPackInterval (-1766)

#endif

/* std::vector<witsml2__PerforationSetInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerforationSetInterval' for type 'witsml2:PerforationSetInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerforationSetInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerforationSetInterval (-1764)

#endif

/* std::vector<witsml2__OpenHoleInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__OpenHoleInterval' for type 'witsml2:OpenHoleInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__OpenHoleInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__OpenHoleInterval (-1762)

#endif

/* std::vector<witsml2__SlotsInterval *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__SlotsInterval' for type 'witsml2:SlotsInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__SlotsInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__SlotsInterval (-1760)

#endif

/* std::vector<witsml2__MudGas *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MudGas' for type 'witsml2:MudGas' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudGas
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MudGas (-1746)

#endif

/* std::vector<witsml2__DrillingParameters *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DrillingParameters' for type 'witsml2:DrillingParameters' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillingParameters
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DrillingParameters (-1744)

#endif

/* std::vector<witsml2__GasPeak *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GasPeak' for type 'witsml2:GasPeak' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GasPeak
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GasPeak (-1740)

#endif

/* std::vector<witsml2__LithologyQualifier *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__LithologyQualifier' for type 'witsml2:LithologyQualifier' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__LithologyQualifier
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__LithologyQualifier (-1716)

#endif

/* std::vector<witsml2__CuttingsIntervalShow *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalShow' for type 'witsml2:CuttingsIntervalShow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalShow
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CuttingsIntervalShow (-1714)

#endif

/* std::vector<witsml2__StimPressureFlowRate *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPressureFlowRate' for type 'witsml2:StimPressureFlowRate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPressureFlowRate
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPressureFlowRate (-1709)

#endif

/* std::vector<witsml2__StimPumpFlowBackTestStep *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTestStep' for type 'witsml2:StimPumpFlowBackTestStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTestStep
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTestStep (-1707)

#endif

/* std::vector<witsml2__StimPerforationCluster *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPerforationCluster' for type 'witsml2:StimPerforationCluster' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPerforationCluster
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPerforationCluster (-1705)

#endif

/* std::vector<witsml2__StimProppantAgent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimProppantAgent' for type 'witsml2:StimProppantAgent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimProppantAgent
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimProppantAgent (-1700)

#endif

/* std::vector<witsml2__StimAdditive *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimAdditive' for type 'witsml2:StimAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimAdditive
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimAdditive (-1698)

#endif

/* std::vector<witsml2__StimPumpFlowBackTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTest' for type 'witsml2:StimPumpFlowBackTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTest
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimPumpFlowBackTest (-1693)

#endif

/* std::vector<witsml2__StimStepTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimStepTest' for type 'witsml2:StimStepTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimStepTest
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimStepTest (-1691)

#endif

/* std::vector<witsml2__StimStepDownTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimStepDownTest' for type 'witsml2:StimStepDownTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimStepDownTest
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimStepDownTest (-1689)

#endif

/* std::vector<witsml2__StimFetTest *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimFetTest' for type 'witsml2:StimFetTest' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimFetTest
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimFetTest (-1687)

#endif

/* std::vector<witsml2__ISO13503_USCORE2SieveAnalysisData *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2SieveAnalysisData' for type 'witsml2:ISO13503_2SieveAnalysisData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2SieveAnalysisData
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2SieveAnalysisData (-1680)

#endif

/* std::vector<witsml2__ISO13503_USCORE2CrushTestData *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2CrushTestData' for type 'witsml2:ISO13503_2CrushTestData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2CrushTestData
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ISO13503_USCORE2CrushTestData (-1678)

#endif

/* std::vector<witsml2__StimMaterialQuantity *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimMaterialQuantity' for type 'witsml2:StimMaterialQuantity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimMaterialQuantity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimMaterialQuantity (-1676)

#endif

/* std::vector<witsml2__StimTubular *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StimTubular' for type 'witsml2:StimTubular' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimTubular
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StimTubular (-1671)

#endif

/* std::vector<enum witsml2__StimFetTestAnalysisMethod>  has binding name 'std__vectorTemplateOfwitsml2__StimFetTestAnalysisMethod' for type 'witsml2:StimFetTestAnalysisMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__StimFetTestAnalysisMethod
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfwitsml2__StimFetTestAnalysisMethod (-1666)

#endif

/* std::vector<witsml2__BopComponent *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BopComponent' for type 'witsml2:BopComponent' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BopComponent
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BopComponent (-1661)

#endif

/* std::vector<witsml2__AzimuthRange *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AzimuthRange' for type 'witsml2:AzimuthRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AzimuthRange
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AzimuthRange (-1659)

#endif

/* std::vector<witsml2__CustomOperatingRange *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CustomOperatingRange' for type 'witsml2:CustomOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CustomOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CustomOperatingRange (-1657)

#endif

/* std::vector<witsml2__PlaneAngleOperatingRange *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PlaneAngleOperatingRange' for type 'witsml2:PlaneAngleOperatingRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PlaneAngleOperatingRange
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PlaneAngleOperatingRange (-1655)

#endif

/* std::vector<eml22__TvdInterval *>  has binding name 'std__vectorTemplateOfPointerToeml22__TvdInterval' for type 'eml22:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__TvdInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__TvdInterval (-1651)

#endif

/* std::vector<eml22__MdInterval *>  has binding name 'std__vectorTemplateOfPointerToeml22__MdInterval' for type 'eml22:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__MdInterval
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__MdInterval (-1650)

#endif

/* std::vector<eml22__GenericMeasure *>  has binding name 'std__vectorTemplateOfPointerToeml22__GenericMeasure' for type 'eml22:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__GenericMeasure (-1649)

#endif

/* std::vector<witsml2__Gyro *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Gyro' for type 'witsml2:Gyro' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Gyro
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Gyro (-1647)

#endif

/* std::vector<witsml2__Parameter *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Parameter' for type 'witsml2:Parameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Parameter
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Parameter (-1641)

#endif

/* std::vector<witsml2__AnchorState *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AnchorState' for type 'witsml2:AnchorState' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AnchorState
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AnchorState (-1625)

#endif

/* std::vector<witsml2__Incident *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Incident' for type 'witsml2:Incident' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Incident
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Incident (-1619)

#endif

/* std::vector<witsml2__EquipmentConnection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__EquipmentConnection' for type 'witsml2:EquipmentConnection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__EquipmentConnection
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__EquipmentConnection (-1614)

#endif

/* std::vector<witsml2__ReferenceContainer *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ReferenceContainer' for type 'witsml2:ReferenceContainer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ReferenceContainer
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ReferenceContainer (-1612)

#endif

/* std::vector<witsml2__EventInfo *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__EventInfo' for type 'witsml2:EventInfo' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__EventInfo
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__EventInfo (-1609)

#endif

/* std::vector<witsml2__PerforationSet *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerforationSet' for type 'witsml2:PerforationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerforationSet
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerforationSet (-1607)

#endif

/* std::vector<witsml2__Equipment *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Equipment' for type 'witsml2:Equipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Equipment
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Equipment (-1602)

#endif

/* std::vector<witsml2__PerfHole *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerfHole' for type 'witsml2:PerfHole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerfHole
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerfHole (-1600)

#endif

/* std::vector<witsml2__PerfSlot *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__PerfSlot' for type 'witsml2:PerfSlot' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerfSlot
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__PerfSlot (-1598)

#endif

/* std::vector<witsml2__ExtPropNameValue *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__ExtPropNameValue' for type 'witsml2:ExtPropNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ExtPropNameValue
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__ExtPropNameValue (-1596)

#endif

/* std::vector<witsml2__DownholeString *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DownholeString' for type 'witsml2:DownholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DownholeString
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DownholeString (-1592)

#endif

/* std::vector<witsml2__BoreholeString *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BoreholeString' for type 'witsml2:BoreholeString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BoreholeString
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BoreholeString (-1588)

#endif

/* std::vector<witsml2__GeologyFeature *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__GeologyFeature' for type 'witsml2:GeologyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GeologyFeature
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__GeologyFeature (-1586)

#endif

/* std::vector<witsml2__Borehole *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Borehole' for type 'witsml2:Borehole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Borehole
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Borehole (-1584)

#endif

/* std::vector<witsml2__StringEquipment *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__StringEquipment' for type 'witsml2:StringEquipment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StringEquipment
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__StringEquipment (-1579)

#endif

/* std::vector<witsml2__MemberObject *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__MemberObject' for type 'witsml2:MemberObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MemberObject
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__MemberObject (-1575)

#endif

/* std::vector<witsml2__DownholeStringReference *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DownholeStringReference' for type 'witsml2:DownholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DownholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DownholeStringReference (-1571)

#endif

/* std::vector<witsml2__BoreholeStringReference *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__BoreholeStringReference' for type 'witsml2:BoreholeStringReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BoreholeStringReference
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__BoreholeStringReference (-1569)

#endif

/* std::vector<witsml2__DepthRegTrackCurve *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegTrackCurve' for type 'witsml2:DepthRegTrackCurve' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegTrackCurve
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegTrackCurve (-1567)

#endif

/* std::vector<witsml2__DepthRegTrack *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegTrack' for type 'witsml2:DepthRegTrack' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegTrack
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegTrack (-1565)

#endif

/* std::vector<witsml2__DepthRegCalibrationPoint *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegCalibrationPoint' for type 'witsml2:DepthRegCalibrationPoint' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegCalibrationPoint
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegCalibrationPoint (-1563)

#endif

/* std::vector<witsml2__DepthRegRectangle *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegRectangle' for type 'witsml2:DepthRegRectangle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegRectangle
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegRectangle (-1561)

#endif

/* std::vector<witsml2__DepthRegParameter *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__DepthRegParameter' for type 'witsml2:DepthRegParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegParameter
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__DepthRegParameter (-1556)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml22__String2000' for type 'eml22:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__String2000 (-1554)

#endif

/* std::vector<eml22__DataObjectReference *>  has binding name 'std__vectorTemplateOfPointerToeml22__DataObjectReference' for type 'eml22:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__DataObjectReference (-1551)

#endif

/* std::vector<witsml2__CementAdditive *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementAdditive' for type 'witsml2:CementAdditive' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementAdditive
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementAdditive (-1547)

#endif

/* std::vector<witsml2__CementPumpScheduleStep *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__CementPumpScheduleStep' for type 'witsml2:CementPumpScheduleStep' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementPumpScheduleStep
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__CementPumpScheduleStep (-1542)

#endif

/* std::vector<witsml2__FluidLocation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__FluidLocation' for type 'witsml2:FluidLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__FluidLocation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__FluidLocation (-1540)

#endif

/* std::vector<witsml2__Nozzle *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Nozzle' for type 'witsml2:Nozzle' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Nozzle
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Nozzle (-1535)

#endif

/* std::vector<witsml2__Bend *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Bend' for type 'witsml2:Bend' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Bend
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Bend (-1531)

#endif

/* std::vector<witsml2__Stabilizer *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Stabilizer' for type 'witsml2:Stabilizer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Stabilizer
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Stabilizer (-1529)

#endif

/* std::vector<witsml2__Connection *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Connection' for type 'witsml2:Connection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Connection
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Connection (-1523)

#endif

/* std::vector<witsml2__NameTag *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__NameTag' for type 'witsml2:NameTag' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__NameTag
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__NameTag (-1521)

#endif

/* std::vector<witsml2__Sensor *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Sensor' for type 'witsml2:Sensor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Sensor
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Sensor (-1509)

#endif

/* std::vector<witsml2__RheometerViscosity *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__RheometerViscosity' for type 'witsml2:RheometerViscosity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__RheometerViscosity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__RheometerViscosity (-1495)

#endif

/* std::vector<eml22__ObjectAlias *>  has binding name 'std__vectorTemplateOfPointerToeml22__ObjectAlias' for type 'eml22:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ObjectAlias (-1481)

#endif

/* std::vector<witsml2__Rheometer *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__Rheometer' for type 'witsml2:Rheometer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Rheometer
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__Rheometer (-1471)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml22__String64' for type 'eml22:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__String64
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__String64 (-1442)

#endif

/* std::vector<witsml2__AbstractWellLocation *>  has binding name 'std__vectorTemplateOfPointerTowitsml2__AbstractWellLocation' for type 'witsml2:AbstractWellLocation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AbstractWellLocation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTowitsml2__AbstractWellLocation (-1440)

#endif

/* std::vector<eml22__ExtensionNameValue *>  has binding name 'std__vectorTemplateOfPointerToeml22__ExtensionNameValue' for type 'eml22:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExtensionNameValue (-1434)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace gsoap_eml2_2


#endif

/* End of gsoap_eml2_2Stub.h */
