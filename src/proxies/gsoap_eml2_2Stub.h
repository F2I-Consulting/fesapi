/* gsoap_eml2_2Stub.h
   Generated by gSOAP 2.8.82 for eml2_2ForGsoap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_resqml2	"http://www.energistics.org/energyml/data/resqmlv2"
#define SOAP_NAMESPACE_OF_eml22	"http://www.energistics.org/energyml/data/commonv2"
#define SOAP_NAMESPACE_OF_gml	"http://www.opengis.net/gml/3.2"
#define SOAP_NAMESPACE_OF_xlink	"http://www.w3.org/1999/xlink"
#define SOAP_NAMESPACE_OF_gmd	"http://www.isotc211.org/2005/gmd"
#define SOAP_NAMESPACE_OF_gts	"http://www.isotc211.org/2005/gts"
#define SOAP_NAMESPACE_OF_gco	"http://www.isotc211.org/2005/gco"
#define SOAP_NAMESPACE_OF_gsr	"http://www.isotc211.org/2005/gsr"
#include <time.h>

#ifndef gsoap_eml2_2Stub_H
#define gsoap_eml2_2Stub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20882
# error "GSOAP VERSION 20882 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace gsoap_eml2_2 {

/******************************************************************************\
 *                                                                            *
 * Enumeration Types                                                          *
 *                                                                            *
\******************************************************************************/


/* eml2_2ForGsoap.h:2556 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ParameterKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ParameterKind (-1004)

/* eml22:ParameterKind */
enum eml22__ParameterKind {
	eml22__ParameterKind__dataObject = 0,
	eml22__ParameterKind__double_ = 1,
	eml22__ParameterKind__integer = 2,
	eml22__ParameterKind__string = 3,
	eml22__ParameterKind__timestamp = 4,
	eml22__ParameterKind__subActivity = 5
};
#endif

/* eml2_2ForGsoap.h:2573 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d (-1005)

/* eml22:AxisOrder2d */
enum eml22__AxisOrder2d {
	eml22__AxisOrder2d__easting_x0020northing = 0,
	eml22__AxisOrder2d__northing_x0020easting = 1,
	eml22__AxisOrder2d__westing_x0020southing = 2,
	eml22__AxisOrder2d__southing_x0020westing = 3,
	eml22__AxisOrder2d__northing_x0020westing = 4,
	eml22__AxisOrder2d__westing_x0020northing = 5
};
#endif

/* eml2_2ForGsoap.h:2610 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection (-1006)

/* eml22:VerticalDirection */
enum eml22__VerticalDirection {
	eml22__VerticalDirection__up = 0,
	eml22__VerticalDirection__down = 1
};
#endif

/* eml2_2ForGsoap.h:2655 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AggregationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AggregationType (-1009)

/* gml:AggregationType */
enum gml__AggregationType {
	gml__AggregationType__set = 0,
	gml__AggregationType__bag = 1,
	gml__AggregationType__sequence = 2,
	gml__AggregationType__array = 3,
	gml__AggregationType__record = 4,
	gml__AggregationType__table = 5
};
#endif

/* eml2_2ForGsoap.h:2683 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__show
#define SOAP_TYPE_gsoap_eml2_2__xlink__show (-1010)

/* xlink:show */
enum _xlink__show {
	_xlink__show__new_ = 0,
	_xlink__show__replace = 1,
	_xlink__show__embed = 2,
	_xlink__show__other = 3,
	_xlink__show__none = 4
};
#endif

/* eml2_2ForGsoap.h:2700 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__actuate
#define SOAP_TYPE_gsoap_eml2_2__xlink__actuate (-1011)

/* xlink:actuate */
enum _xlink__actuate {
	_xlink__actuate__onLoad = 0,
	_xlink__actuate__onRequest = 1,
	_xlink__actuate__other = 2,
	_xlink__actuate__none = 3
};
#endif

/* eml2_2ForGsoap.h:2842 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure (-1018)

/* eml22:LegacyUnitOfMeasure */
enum eml22__LegacyUnitOfMeasure {
	eml22__LegacyUnitOfMeasure__1000scf_x002fd = 0,
	eml22__LegacyUnitOfMeasure__1000scf_x002fmo = 1,
	eml22__LegacyUnitOfMeasure__1000scf_x002fstb = 2,
	eml22__LegacyUnitOfMeasure__1000scm = 3,
	eml22__LegacyUnitOfMeasure__1000scm_x002fd = 4,
	eml22__LegacyUnitOfMeasure__1000scm_x002fmo = 5,
	eml22__LegacyUnitOfMeasure__1000stb = 6,
	eml22__LegacyUnitOfMeasure__1000stb_x002fd = 7,
	eml22__LegacyUnitOfMeasure__1000stb_x002fmo = 8,
	eml22__LegacyUnitOfMeasure__1E6scf = 9,
	eml22__LegacyUnitOfMeasure__1E6scf_x002fd = 10,
	eml22__LegacyUnitOfMeasure__1E6scf_x002fmo = 11,
	eml22__LegacyUnitOfMeasure__1E6scf_x002fstb = 12,
	eml22__LegacyUnitOfMeasure__1E6scm = 13,
	eml22__LegacyUnitOfMeasure__1E6scm_x002fd = 14,
	eml22__LegacyUnitOfMeasure__1E6scm_x002fmo = 15,
	eml22__LegacyUnitOfMeasure__1E6stb = 16,
	eml22__LegacyUnitOfMeasure__1E6stb_x002facre = 17,
	eml22__LegacyUnitOfMeasure__1E6stb_x002facre_x002eft = 18,
	eml22__LegacyUnitOfMeasure__1E6stb_x002fd = 19,
	eml22__LegacyUnitOfMeasure__1E6stb_x002fmo = 20,
	eml22__LegacyUnitOfMeasure__1E9scf = 21,
	eml22__LegacyUnitOfMeasure__acre_x002eft_x002f1E6stb = 22,
	eml22__LegacyUnitOfMeasure__bbl_x002f1000scf = 23,
	eml22__LegacyUnitOfMeasure__bbl_x002f1E6scf = 24,
	eml22__LegacyUnitOfMeasure__bbl_x002fscf = 25,
	eml22__LegacyUnitOfMeasure__bbl_x002fstb = 26,
	eml22__LegacyUnitOfMeasure__ft3_x002fscf = 27,
	eml22__LegacyUnitOfMeasure__ft3_x002fstb = 28,
	eml22__LegacyUnitOfMeasure__galUS_x002f1000scf = 29,
	eml22__LegacyUnitOfMeasure__kg_x002fscm = 30,
	eml22__LegacyUnitOfMeasure__kscf = 31,
	eml22__LegacyUnitOfMeasure__lbm_x002f1000scf = 32,
	eml22__LegacyUnitOfMeasure__lbm_x002f1E6scf = 33,
	eml22__LegacyUnitOfMeasure__m3_x002fscm = 34,
	eml22__LegacyUnitOfMeasure__ml_x002fscm = 35,
	eml22__LegacyUnitOfMeasure__Pa_x002fscm = 36,
	eml22__LegacyUnitOfMeasure__psi_x002f1000scf = 37,
	eml22__LegacyUnitOfMeasure__psi_x002f1E6scf = 38,
	eml22__LegacyUnitOfMeasure__psia = 39,
	eml22__LegacyUnitOfMeasure__psig = 40,
	eml22__LegacyUnitOfMeasure__scf = 41,
	eml22__LegacyUnitOfMeasure__scf_x002fbbl = 42,
	eml22__LegacyUnitOfMeasure__scf_x002fd = 43,
	eml22__LegacyUnitOfMeasure__scf_x002fft2 = 44,
	eml22__LegacyUnitOfMeasure__scf_x002fft3 = 45,
	eml22__LegacyUnitOfMeasure__scf_x002fscf = 46,
	eml22__LegacyUnitOfMeasure__scf_x002fstb = 47,
	eml22__LegacyUnitOfMeasure__scm = 48,
	eml22__LegacyUnitOfMeasure__scm_x002fd = 49,
	eml22__LegacyUnitOfMeasure__scm_x002fh = 50,
	eml22__LegacyUnitOfMeasure__scm_x002fm2 = 51,
	eml22__LegacyUnitOfMeasure__scm_x002fm3 = 52,
	eml22__LegacyUnitOfMeasure__scm_x002fmo = 53,
	eml22__LegacyUnitOfMeasure__scm_x002fs = 54,
	eml22__LegacyUnitOfMeasure__scm_x002fscm = 55,
	eml22__LegacyUnitOfMeasure__scm_x002fstb = 56,
	eml22__LegacyUnitOfMeasure__stb = 57,
	eml22__LegacyUnitOfMeasure__stb_x002f1000scf = 58,
	eml22__LegacyUnitOfMeasure__stb_x002f1000scm = 59,
	eml22__LegacyUnitOfMeasure__stb_x002f1E6scf = 60,
	eml22__LegacyUnitOfMeasure__stb_x002f1E6scm = 61,
	eml22__LegacyUnitOfMeasure__stb_x002facre = 62,
	eml22__LegacyUnitOfMeasure__stb_x002fbbl = 63,
	eml22__LegacyUnitOfMeasure__stb_x002fd = 64,
	eml22__LegacyUnitOfMeasure__stb_x002fmo = 'A',
	eml22__LegacyUnitOfMeasure__stb_x002fscm = 'B',
	eml22__LegacyUnitOfMeasure__stb_x002fstb = 'C'
};
#endif

/* eml2_2ForGsoap.h:2921 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure (-1019)

/* eml22:UnitOfMeasure */
enum eml22__UnitOfMeasure {
	eml22__UnitOfMeasure__A = 'A',
	eml22__UnitOfMeasure__a = 'a',
	eml22__UnitOfMeasure__b = 'b',
	eml22__UnitOfMeasure__B = 'B',
	eml22__UnitOfMeasure__C = 'C',
	eml22__UnitOfMeasure__D = 'D',
	eml22__UnitOfMeasure__d = 'd',
	eml22__UnitOfMeasure__F = 'F',
	eml22__UnitOfMeasure__g = 'g',
	eml22__UnitOfMeasure__H = 'H',
	eml22__UnitOfMeasure__h = 'h',
	eml22__UnitOfMeasure__J = 'J',
	eml22__UnitOfMeasure__K = 'K',
	eml22__UnitOfMeasure__L = 'L',
	eml22__UnitOfMeasure__m = 'm',
	eml22__UnitOfMeasure__N = 'N',
	eml22__UnitOfMeasure__O = 'O',
	eml22__UnitOfMeasure__P = 'P',
	eml22__UnitOfMeasure__S = 'S',
	eml22__UnitOfMeasure__s = 's',
	eml22__UnitOfMeasure__t = 't',
	eml22__UnitOfMeasure__T = 'T',
	eml22__UnitOfMeasure__V = 'V',
	eml22__UnitOfMeasure__W = 'W',
	eml22__UnitOfMeasure___x0025 = 'u',
	eml22__UnitOfMeasure___x0025_x005barea_x005d = 'v',
	eml22__UnitOfMeasure___x0025_x005bmass_x005d = 'w',
	eml22__UnitOfMeasure___x0025_x005bmolar_x005d = 'x',
	eml22__UnitOfMeasure___x0025_x005bvol_x005d = 'y',
	eml22__UnitOfMeasure___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 'z',
	eml22__UnitOfMeasure___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 123,
	eml22__UnitOfMeasure___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 124,
	eml22__UnitOfMeasure__0_x002e001_x0020bbl_x002fft3 = 125,
	eml22__UnitOfMeasure__0_x002e001_x0020bbl_x002fm3 = 126,
	eml22__UnitOfMeasure__0_x002e001_x0020d_x002fft3 = 127,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 128,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 129,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 130,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 131,
	eml22__UnitOfMeasure__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 132,
	eml22__UnitOfMeasure__0_x002e001_x0020h_x002fft = 133,
	eml22__UnitOfMeasure__0_x002e001_x0020kPa2_x002fcP = 134,
	eml22__UnitOfMeasure__0_x002e001_x0020lbm_x002fbbl = 135,
	eml22__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 136,
	eml22__UnitOfMeasure__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 137,
	eml22__UnitOfMeasure__0_x002e001_x0020psi_x002fft = 138,
	eml22__UnitOfMeasure__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 139,
	eml22__UnitOfMeasure__0_x002e001_x0020seca = 140,
	eml22__UnitOfMeasure__0_x002e01_x0020bbl_x002fbbl = 141,
	eml22__UnitOfMeasure__0_x002e01_x0020dega_x002fft = 142,
	eml22__UnitOfMeasure__0_x002e01_x0020degF_x002fft = 143,
	eml22__UnitOfMeasure__0_x002e01_x0020dm3_x002fkm = 144,
	eml22__UnitOfMeasure__0_x002e01_x0020ft_x002fft = 145,
	eml22__UnitOfMeasure__0_x002e01_x0020grain_x002fft3 = 146,
	eml22__UnitOfMeasure__0_x002e01_x0020L_x002fkg = 147,
	eml22__UnitOfMeasure__0_x002e01_x0020L_x002fkm = 148,
	eml22__UnitOfMeasure__0_x002e01_x0020lbf_x002fft = 149,
	eml22__UnitOfMeasure__0_x002e01_x0020lbf_x002fft2 = 150,
	eml22__UnitOfMeasure__0_x002e01_x0020lbm_x002fft2 = 151,
	eml22__UnitOfMeasure__0_x002e01_x0020psi_x002fft = 152,
	eml22__UnitOfMeasure__0_x002e1_x0020ft = 153,
	eml22__UnitOfMeasure__0_x002e1_x0020ft_x005bUS_x005d = 154,
	eml22__UnitOfMeasure__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 155,
	eml22__UnitOfMeasure__0_x002e1_x0020in = 156,
	eml22__UnitOfMeasure__0_x002e1_x0020L_x002fbbl = 157,
	eml22__UnitOfMeasure__0_x002e1_x0020lbm_x002fbbl = 158,
	eml22__UnitOfMeasure__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 159,
	eml22__UnitOfMeasure__0_x002e1_x0020yd = 160,
	eml22__UnitOfMeasure__1_x002f_x0028kg_x002es_x0029 = 161,
	eml22__UnitOfMeasure__1_x002f16_x0020in = 162,
	eml22__UnitOfMeasure__1_x002f2_x0020ft = 163,
	eml22__UnitOfMeasure__1_x002f2_x0020ms = 164,
	eml22__UnitOfMeasure__1_x002f30_x0020cm3_x002fmin = 165,
	eml22__UnitOfMeasure__1_x002f30_x0020dega_x002fft = 166,
	eml22__UnitOfMeasure__1_x002f30_x0020dega_x002fm = 167,
	eml22__UnitOfMeasure__1_x002f30_x0020lbf_x002fm = 168,
	eml22__UnitOfMeasure__1_x002f30_x0020m_x002fm = 169,
	eml22__UnitOfMeasure__1_x002f30_x0020N_x002fm = 170,
	eml22__UnitOfMeasure__1_x002f32_x0020in = 171,
	eml22__UnitOfMeasure__1_x002f64_x0020in = 172,
	eml22__UnitOfMeasure__1_x002fa = 173,
	eml22__UnitOfMeasure__1_x002fangstrom = 174,
	eml22__UnitOfMeasure__1_x002fbar = 175,
	eml22__UnitOfMeasure__1_x002fbbl = 176,
	eml22__UnitOfMeasure__1_x002fcm = 177,
	eml22__UnitOfMeasure__1_x002fd = 178,
	eml22__UnitOfMeasure__1_x002fdegC = 179,
	eml22__UnitOfMeasure__1_x002fdegF = 180,
	eml22__UnitOfMeasure__1_x002fdegR = 181,
	eml22__UnitOfMeasure__1_x002fft = 182,
	eml22__UnitOfMeasure__1_x002fft2 = 183,
	eml22__UnitOfMeasure__1_x002fft3 = 184,
	eml22__UnitOfMeasure__1_x002fg = 185,
	eml22__UnitOfMeasure__1_x002fgal_x005bUK_x005d = 186,
	eml22__UnitOfMeasure__1_x002fgal_x005bUS_x005d = 187,
	eml22__UnitOfMeasure__1_x002fh = 188,
	eml22__UnitOfMeasure__1_x002fH = 189,
	eml22__UnitOfMeasure__1_x002fin = 190,
	eml22__UnitOfMeasure__1_x002fK = 191,
	eml22__UnitOfMeasure__1_x002fkg = 192,
	eml22__UnitOfMeasure__1_x002fkm2 = 193,
	eml22__UnitOfMeasure__1_x002fkPa = 194,
	eml22__UnitOfMeasure__1_x002fL = 195,
	eml22__UnitOfMeasure__1_x002flbf = 196,
	eml22__UnitOfMeasure__1_x002flbm = 197,
	eml22__UnitOfMeasure__1_x002fm = 198,
	eml22__UnitOfMeasure__1_x002fm2 = 199,
	eml22__UnitOfMeasure__1_x002fm3 = 200,
	eml22__UnitOfMeasure__1_x002fmi = 201,
	eml22__UnitOfMeasure__1_x002fmi2 = 202,
	eml22__UnitOfMeasure__1_x002fmin = 203,
	eml22__UnitOfMeasure__1_x002fmm = 204,
	eml22__UnitOfMeasure__1_x002fms = 205,
	eml22__UnitOfMeasure__1_x002fN = 206,
	eml22__UnitOfMeasure__1_x002fnm = 207,
	eml22__UnitOfMeasure__1_x002fPa = 208,
	eml22__UnitOfMeasure__1_x002fpPa = 209,
	eml22__UnitOfMeasure__1_x002fpsi = 210,
	eml22__UnitOfMeasure__1_x002fs = 211,
	eml22__UnitOfMeasure__1_x002fupsi = 212,
	eml22__UnitOfMeasure__1_x002fus = 213,
	eml22__UnitOfMeasure__1_x002fuV = 214,
	eml22__UnitOfMeasure__1_x002fV = 215,
	eml22__UnitOfMeasure__1_x002fwk = 216,
	eml22__UnitOfMeasure__1_x002fyd = 217,
	eml22__UnitOfMeasure__10_x0020ft = 218,
	eml22__UnitOfMeasure__10_x0020in = 219,
	eml22__UnitOfMeasure__10_x0020km = 220,
	eml22__UnitOfMeasure__10_x0020kN = 221,
	eml22__UnitOfMeasure__10_x0020Mg_x002fm3 = 222,
	eml22__UnitOfMeasure__100_x0020ft = 223,
	eml22__UnitOfMeasure__100_x0020ka_x005bt_x005d = 224,
	eml22__UnitOfMeasure__100_x0020km = 225,
	eml22__UnitOfMeasure__1000_x0020bbl = 226,
	eml22__UnitOfMeasure__1000_x0020bbl_x002eft_x002fd = 227,
	eml22__UnitOfMeasure__1000_x0020bbl_x002fd = 228,
	eml22__UnitOfMeasure__1000_x0020ft = 229,
	eml22__UnitOfMeasure__1000_x0020ft_x002fh = 230,
	eml22__UnitOfMeasure__1000_x0020ft_x002fs = 231,
	eml22__UnitOfMeasure__1000_x0020ft3 = 232,
	eml22__UnitOfMeasure__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 233,
	eml22__UnitOfMeasure__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 234,
	eml22__UnitOfMeasure__1000_x0020ft3_x002fbbl = 235,
	eml22__UnitOfMeasure__1000_x0020ft3_x002fd = 236,
	eml22__UnitOfMeasure__1000_x0020gal_x005bUK_x005d = 237,
	eml22__UnitOfMeasure__1000_x0020gal_x005bUS_x005d = 238,
	eml22__UnitOfMeasure__1000_x0020lbf_x002eft = 239,
	eml22__UnitOfMeasure__1000_x0020m3 = 240,
	eml22__UnitOfMeasure__1000_x0020m3_x002f_x0028d_x002em_x0029 = 241,
	eml22__UnitOfMeasure__1000_x0020m3_x002f_x0028h_x002em_x0029 = 242,
	eml22__UnitOfMeasure__1000_x0020m3_x002fd = 243,
	eml22__UnitOfMeasure__1000_x0020m3_x002fh = 244,
	eml22__UnitOfMeasure__1000_x0020m3_x002fm3 = 245,
	eml22__UnitOfMeasure__1000_x0020m4_x002fd = 246,
	eml22__UnitOfMeasure__1E12_x0020ft3 = 247,
	eml22__UnitOfMeasure__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 248,
	eml22__UnitOfMeasure__1E_6_x0020acre_x002eft_x002fbbl = 249,
	eml22__UnitOfMeasure__1E6_x0020bbl = 250,
	eml22__UnitOfMeasure__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 251,
	eml22__UnitOfMeasure__1E6_x0020bbl_x002facre = 252,
	eml22__UnitOfMeasure__1E6_x0020bbl_x002fd = 253,
	eml22__UnitOfMeasure__1E_6_x0020bbl_x002fft3 = 254,
	eml22__UnitOfMeasure__1E_6_x0020bbl_x002fm3 = 255,
	eml22__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d = 256,
	eml22__UnitOfMeasure__1E6_x0020Btu_x005bIT_x005d_x002fh = 257,
	eml22__UnitOfMeasure__1E6_x0020ft3 = 258,
	eml22__UnitOfMeasure__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 259,
	eml22__UnitOfMeasure__1E6_x0020ft3_x002fbbl = 260,
	eml22__UnitOfMeasure__1E6_x0020ft3_x002fd = 261,
	eml22__UnitOfMeasure__1E_6_x0020gal_x005bUS_x005d = 262,
	eml22__UnitOfMeasure__1E6_x0020lbm_x002fa = 263,
	eml22__UnitOfMeasure__1E6_x0020m3 = 264,
	eml22__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegC_x0029 = 265,
	eml22__UnitOfMeasure__1E_6_x0020m3_x002f_x0028m3_x002edegF_x0029 = 266,
	eml22__UnitOfMeasure__1E6_x0020m3_x002fd = 267,
	eml22__UnitOfMeasure__1E_9_x00201_x002fft = 268,
	eml22__UnitOfMeasure__1E9_x0020bbl = 269,
	eml22__UnitOfMeasure__1E9_x0020ft3 = 270,
	eml22__UnitOfMeasure__30_x0020ft = 271,
	eml22__UnitOfMeasure__30_x0020m = 272,
	eml22__UnitOfMeasure__A_x002eh = 273,
	eml22__UnitOfMeasure__A_x002em2 = 274,
	eml22__UnitOfMeasure__A_x002es = 275,
	eml22__UnitOfMeasure__A_x002es_x002fkg = 276,
	eml22__UnitOfMeasure__A_x002es_x002fm3 = 277,
	eml22__UnitOfMeasure__A_x002fcm2 = 278,
	eml22__UnitOfMeasure__A_x002fft2 = 279,
	eml22__UnitOfMeasure__A_x002fm = 280,
	eml22__UnitOfMeasure__A_x002fm2 = 281,
	eml22__UnitOfMeasure__A_x002fmm = 282,
	eml22__UnitOfMeasure__A_x002fmm2 = 283,
	eml22__UnitOfMeasure__a_x005bt_x005d = 284,
	eml22__UnitOfMeasure__acre = 285,
	eml22__UnitOfMeasure__acre_x002eft = 286,
	eml22__UnitOfMeasure__ag = 287,
	eml22__UnitOfMeasure__aJ = 288,
	eml22__UnitOfMeasure__angstrom = 289,
	eml22__UnitOfMeasure__at = 290,
	eml22__UnitOfMeasure__atm = 291,
	eml22__UnitOfMeasure__atm_x002fft = 292,
	eml22__UnitOfMeasure__atm_x002fh = 293,
	eml22__UnitOfMeasure__atm_x002fhm = 294,
	eml22__UnitOfMeasure__atm_x002fm = 295,
	eml22__UnitOfMeasure__B_x002eW = 296,
	eml22__UnitOfMeasure__b_x002fcm3 = 297,
	eml22__UnitOfMeasure__B_x002fm = 298,
	eml22__UnitOfMeasure__B_x002fO = 299,
	eml22__UnitOfMeasure__bar = 300,
	eml22__UnitOfMeasure__bar_x002fh = 301,
	eml22__UnitOfMeasure__bar_x002fkm = 302,
	eml22__UnitOfMeasure__bar_x002fm = 303,
	eml22__UnitOfMeasure__bar2 = 304,
	eml22__UnitOfMeasure__bar2_x002fcP = 305,
	eml22__UnitOfMeasure__bbl = 306,
	eml22__UnitOfMeasure__bbl_x002f_x0028acre_x002eft_x0029 = 307,
	eml22__UnitOfMeasure__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 308,
	eml22__UnitOfMeasure__bbl_x002f_x0028d_x002eft_x0029 = 309,
	eml22__UnitOfMeasure__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 310,
	eml22__UnitOfMeasure__bbl_x002f_x0028kPa_x002ed_x0029 = 311,
	eml22__UnitOfMeasure__bbl_x002f_x0028psi_x002ed_x0029 = 312,
	eml22__UnitOfMeasure__bbl_x002facre = 313,
	eml22__UnitOfMeasure__bbl_x002fbbl = 314,
	eml22__UnitOfMeasure__bbl_x002fd = 315,
	eml22__UnitOfMeasure__bbl_x002fd2 = 316,
	eml22__UnitOfMeasure__bbl_x002fft = 317,
	eml22__UnitOfMeasure__bbl_x002fft3 = 318,
	eml22__UnitOfMeasure__bbl_x002fh = 319,
	eml22__UnitOfMeasure__bbl_x002fh2 = 320,
	eml22__UnitOfMeasure__bbl_x002fin = 321,
	eml22__UnitOfMeasure__bbl_x002fm3 = 322,
	eml22__UnitOfMeasure__bbl_x002fmi = 323,
	eml22__UnitOfMeasure__bbl_x002fmin = 324,
	eml22__UnitOfMeasure__bbl_x002fpsi = 325,
	eml22__UnitOfMeasure__bbl_x002fton_x005bUK_x005d = 326,
	eml22__UnitOfMeasure__bbl_x002fton_x005bUS_x005d = 327,
	eml22__UnitOfMeasure__Bd = 328,
	eml22__UnitOfMeasure__bit = 329,
	eml22__UnitOfMeasure__bit_x002fs = 330,
	eml22__UnitOfMeasure__Bq = 331,
	eml22__UnitOfMeasure__Bq_x002fkg = 332,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d = 333,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edegF_x0029 = 334,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edegF_x0029 = 335,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 336,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegF_x0029 = 337,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edegR_x0029 = 338,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 339,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edegF_x0029 = 340,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 341,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 342,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegF_x0029 = 343,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbm_x002edegR_x0029 = 344,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edegF_x0029 = 345,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 346,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edegF_x0029 = 347,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 348,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edegF_x0029 = 349,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fbbl = 350,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fft3 = 351,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 352,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 353,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fh = 354,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002flbm = 355,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002flbmol = 356,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fmin = 357,
	eml22__UnitOfMeasure__Btu_x005bIT_x005d_x002fs = 358,
	eml22__UnitOfMeasure__Btu_x005bth_x005d = 359,
	eml22__UnitOfMeasure__Btu_x005bUK_x005d = 360,
	eml22__UnitOfMeasure__byte = 361,
	eml22__UnitOfMeasure__byte_x002fs = 362,
	eml22__UnitOfMeasure__C_x002em = 363,
	eml22__UnitOfMeasure__C_x002fcm2 = 364,
	eml22__UnitOfMeasure__C_x002fcm3 = 365,
	eml22__UnitOfMeasure__C_x002fg = 366,
	eml22__UnitOfMeasure__C_x002fkg = 367,
	eml22__UnitOfMeasure__C_x002fm2 = 368,
	eml22__UnitOfMeasure__C_x002fm3 = 369,
	eml22__UnitOfMeasure__C_x002fmm2 = 370,
	eml22__UnitOfMeasure__C_x002fmm3 = 371,
	eml22__UnitOfMeasure__ca = 372,
	eml22__UnitOfMeasure__cA = 373,
	eml22__UnitOfMeasure__cal_x005bIT_x005d = 374,
	eml22__UnitOfMeasure__cal_x005bth_x005d = 375,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028g_x002eK_x0029 = 376,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edegC_x0029 = 377,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 378,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edegC_x0029 = 379,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 380,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028mol_x002edegC_x0029 = 381,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edegC_x0029 = 382,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edegC_x0029 = 383,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 384,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fcm3 = 385,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fg = 386,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fh = 387,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fkg = 388,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002flbm = 389,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fmL = 390,
	eml22__UnitOfMeasure__cal_x005bth_x005d_x002fmm3 = 391,
	eml22__UnitOfMeasure__cC = 392,
	eml22__UnitOfMeasure__ccal_x005bth_x005d = 393,
	eml22__UnitOfMeasure__ccgr = 394,
	eml22__UnitOfMeasure__cd = 395,
	eml22__UnitOfMeasure__cd_x002fm2 = 396,
	eml22__UnitOfMeasure__cEuc = 397,
	eml22__UnitOfMeasure__ceV = 398,
	eml22__UnitOfMeasure__cF = 399,
	eml22__UnitOfMeasure__cg = 400,
	eml22__UnitOfMeasure__cgauss = 401,
	eml22__UnitOfMeasure__cgr = 402,
	eml22__UnitOfMeasure__cGy = 403,
	eml22__UnitOfMeasure__cH = 404,
	eml22__UnitOfMeasure__chain = 405,
	eml22__UnitOfMeasure__chain_x005bBnA_x005d = 406,
	eml22__UnitOfMeasure__chain_x005bBnB_x005d = 407,
	eml22__UnitOfMeasure__chain_x005bCla_x005d = 408,
	eml22__UnitOfMeasure__chain_x005bInd37_x005d = 409,
	eml22__UnitOfMeasure__chain_x005bSe_x005d = 410,
	eml22__UnitOfMeasure__chain_x005bSeT_x005d = 411,
	eml22__UnitOfMeasure__chain_x005bUS_x005d = 412,
	eml22__UnitOfMeasure__cHz = 413,
	eml22__UnitOfMeasure__Ci = 414,
	eml22__UnitOfMeasure__cJ = 415,
	eml22__UnitOfMeasure__cm = 416,
	eml22__UnitOfMeasure__cm_x002fa = 417,
	eml22__UnitOfMeasure__cm_x002fs = 418,
	eml22__UnitOfMeasure__cm_x002fs2 = 419,
	eml22__UnitOfMeasure__cm2 = 420,
	eml22__UnitOfMeasure__cm2_x002fg = 421,
	eml22__UnitOfMeasure__cm2_x002fs = 422,
	eml22__UnitOfMeasure__cm3 = 423,
	eml22__UnitOfMeasure__cm3_x002fcm3 = 424,
	eml22__UnitOfMeasure__cm3_x002fg = 425,
	eml22__UnitOfMeasure__cm3_x002fh = 426,
	eml22__UnitOfMeasure__cm3_x002fL = 427,
	eml22__UnitOfMeasure__cm3_x002fm3 = 428,
	eml22__UnitOfMeasure__cm3_x002fmin = 429,
	eml22__UnitOfMeasure__cm3_x002fs = 430,
	eml22__UnitOfMeasure__cm4 = 431,
	eml22__UnitOfMeasure__cmH2O_x005b4degC_x005d = 432,
	eml22__UnitOfMeasure__cN = 433,
	eml22__UnitOfMeasure__cohm = 434,
	eml22__UnitOfMeasure__cP = 435,
	eml22__UnitOfMeasure__cPa = 436,
	eml22__UnitOfMeasure__crd = 437,
	eml22__UnitOfMeasure__cS = 438,
	eml22__UnitOfMeasure__cs = 439,
	eml22__UnitOfMeasure__cSt = 440,
	eml22__UnitOfMeasure__ct = 441,
	eml22__UnitOfMeasure__cT = 442,
	eml22__UnitOfMeasure__cu = 443,
	eml22__UnitOfMeasure__cV = 444,
	eml22__UnitOfMeasure__cW = 445,
	eml22__UnitOfMeasure__cWb = 446,
	eml22__UnitOfMeasure__cwt_x005bUK_x005d = 447,
	eml22__UnitOfMeasure__cwt_x005bUS_x005d = 448,
	eml22__UnitOfMeasure__D_x002eft = 449,
	eml22__UnitOfMeasure__D_x002em = 450,
	eml22__UnitOfMeasure__D_x002f_x0028Pa_x002es_x0029 = 451,
	eml22__UnitOfMeasure__d_x002fbbl = 452,
	eml22__UnitOfMeasure__D_x002fcP = 453,
	eml22__UnitOfMeasure__d_x002fft3 = 454,
	eml22__UnitOfMeasure__d_x002fm3 = 455,
	eml22__UnitOfMeasure__D_x005bAPI_x005d = 456,
	eml22__UnitOfMeasure__dA = 457,
	eml22__UnitOfMeasure__dam = 458,
	eml22__UnitOfMeasure__daN = 459,
	eml22__UnitOfMeasure__daN_x002em = 460,
	eml22__UnitOfMeasure__dAPI = 461,
	eml22__UnitOfMeasure__dB = 462,
	eml22__UnitOfMeasure__dB_x002emW = 463,
	eml22__UnitOfMeasure__dB_x002eMW = 464,
	eml22__UnitOfMeasure__dB_x002eW = 465,
	eml22__UnitOfMeasure__dB_x002fft = 466,
	eml22__UnitOfMeasure__dB_x002fkm = 467,
	eml22__UnitOfMeasure__dB_x002fm = 468,
	eml22__UnitOfMeasure__dB_x002fO = 469,
	eml22__UnitOfMeasure__dC = 470,
	eml22__UnitOfMeasure__dcal_x005bth_x005d = 471,
	eml22__UnitOfMeasure__dega = 472,
	eml22__UnitOfMeasure__dega_x002fft = 473,
	eml22__UnitOfMeasure__dega_x002fh = 474,
	eml22__UnitOfMeasure__dega_x002fm = 475,
	eml22__UnitOfMeasure__dega_x002fmin = 476,
	eml22__UnitOfMeasure__dega_x002fs = 477,
	eml22__UnitOfMeasure__degC = 478,
	eml22__UnitOfMeasure__degC_x002em2_x002eh_x002fkcal_x005bth_x005d = 479,
	eml22__UnitOfMeasure__degC_x002fft = 480,
	eml22__UnitOfMeasure__degC_x002fh = 481,
	eml22__UnitOfMeasure__degC_x002fhm = 482,
	eml22__UnitOfMeasure__degC_x002fkm = 483,
	eml22__UnitOfMeasure__degC_x002fkPa = 484,
	eml22__UnitOfMeasure__degC_x002fm = 485,
	eml22__UnitOfMeasure__degC_x002fmin = 486,
	eml22__UnitOfMeasure__degC_x002fs = 487,
	eml22__UnitOfMeasure__degF = 488,
	eml22__UnitOfMeasure__degF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 489,
	eml22__UnitOfMeasure__degF_x002fft = 490,
	eml22__UnitOfMeasure__degF_x002fh = 491,
	eml22__UnitOfMeasure__degF_x002fm = 492,
	eml22__UnitOfMeasure__degF_x002fmin = 493,
	eml22__UnitOfMeasure__degF_x002fpsi = 494,
	eml22__UnitOfMeasure__degF_x002fs = 495,
	eml22__UnitOfMeasure__degR = 496,
	eml22__UnitOfMeasure__dEuc = 497,
	eml22__UnitOfMeasure__deV = 498,
	eml22__UnitOfMeasure__dF = 499,
	eml22__UnitOfMeasure__dgauss = 500,
	eml22__UnitOfMeasure__dGy = 501,
	eml22__UnitOfMeasure__dH = 502,
	eml22__UnitOfMeasure__dHz = 503,
	eml22__UnitOfMeasure__dJ = 504,
	eml22__UnitOfMeasure__dm = 505,
	eml22__UnitOfMeasure__dm_x002fs = 506,
	eml22__UnitOfMeasure__dm3 = 507,
	eml22__UnitOfMeasure__dm3_x002f_x0028kW_x002eh_x0029 = 508,
	eml22__UnitOfMeasure__dm3_x002fkg = 509,
	eml22__UnitOfMeasure__dm3_x002fkmol = 510,
	eml22__UnitOfMeasure__dm3_x002fm = 511,
	eml22__UnitOfMeasure__dm3_x002fm3 = 512,
	eml22__UnitOfMeasure__dm3_x002fMJ = 513,
	eml22__UnitOfMeasure__dm3_x002fs = 514,
	eml22__UnitOfMeasure__dm3_x002fs2 = 515,
	eml22__UnitOfMeasure__dm3_x002ft = 516,
	eml22__UnitOfMeasure__dN = 517,
	eml22__UnitOfMeasure__dN_x002em = 518,
	eml22__UnitOfMeasure__dohm = 519,
	eml22__UnitOfMeasure__dP = 520,
	eml22__UnitOfMeasure__dPa = 521,
	eml22__UnitOfMeasure__drd = 522,
	eml22__UnitOfMeasure__ds = 523,
	eml22__UnitOfMeasure__dS = 524,
	eml22__UnitOfMeasure__dT = 525,
	eml22__UnitOfMeasure__dV = 526,
	eml22__UnitOfMeasure__dW = 527,
	eml22__UnitOfMeasure__dWb = 528,
	eml22__UnitOfMeasure__dyne = 529,
	eml22__UnitOfMeasure__dyne_x002ecm2 = 530,
	eml22__UnitOfMeasure__dyne_x002es_x002fcm2 = 531,
	eml22__UnitOfMeasure__dyne_x002fcm = 532,
	eml22__UnitOfMeasure__dyne_x002fcm2 = 533,
	eml22__UnitOfMeasure__EA = 534,
	eml22__UnitOfMeasure__Ea_x005bt_x005d = 535,
	eml22__UnitOfMeasure__EC = 536,
	eml22__UnitOfMeasure__Ecal_x005bth_x005d = 537,
	eml22__UnitOfMeasure__EEuc = 538,
	eml22__UnitOfMeasure__EeV = 539,
	eml22__UnitOfMeasure__EF = 540,
	eml22__UnitOfMeasure__Eg = 541,
	eml22__UnitOfMeasure__Egauss = 542,
	eml22__UnitOfMeasure__EGy = 543,
	eml22__UnitOfMeasure__EH = 544,
	eml22__UnitOfMeasure__EHz = 545,
	eml22__UnitOfMeasure__EJ = 546,
	eml22__UnitOfMeasure__EJ_x002fa = 547,
	eml22__UnitOfMeasure__Em = 548,
	eml22__UnitOfMeasure__EN = 549,
	eml22__UnitOfMeasure__Eohm = 550,
	eml22__UnitOfMeasure__EP = 551,
	eml22__UnitOfMeasure__EPa = 552,
	eml22__UnitOfMeasure__Erd = 553,
	eml22__UnitOfMeasure__erg = 554,
	eml22__UnitOfMeasure__erg_x002fa = 555,
	eml22__UnitOfMeasure__erg_x002fcm2 = 556,
	eml22__UnitOfMeasure__erg_x002fcm3 = 557,
	eml22__UnitOfMeasure__erg_x002fg = 558,
	eml22__UnitOfMeasure__erg_x002fkg = 559,
	eml22__UnitOfMeasure__erg_x002fm3 = 560,
	eml22__UnitOfMeasure__ES = 561,
	eml22__UnitOfMeasure__ET = 562,
	eml22__UnitOfMeasure__Euc = 563,
	eml22__UnitOfMeasure__eV = 564,
	eml22__UnitOfMeasure__EW = 565,
	eml22__UnitOfMeasure__EWb = 566,
	eml22__UnitOfMeasure__F_x002fm = 567,
	eml22__UnitOfMeasure__fa = 568,
	eml22__UnitOfMeasure__fA = 569,
	eml22__UnitOfMeasure__fathom = 570,
	eml22__UnitOfMeasure__fC = 571,
	eml22__UnitOfMeasure__fcal_x005bth_x005d = 572,
	eml22__UnitOfMeasure__fEuc = 573,
	eml22__UnitOfMeasure__feV = 574,
	eml22__UnitOfMeasure__fF = 575,
	eml22__UnitOfMeasure__fg = 576,
	eml22__UnitOfMeasure__fgauss = 577,
	eml22__UnitOfMeasure__fGy = 578,
	eml22__UnitOfMeasure__fH = 579,
	eml22__UnitOfMeasure__fHz = 580,
	eml22__UnitOfMeasure__fJ = 581,
	eml22__UnitOfMeasure__floz_x005bUK_x005d = 582,
	eml22__UnitOfMeasure__floz_x005bUS_x005d = 583,
	eml22__UnitOfMeasure__fm = 584,
	eml22__UnitOfMeasure__fN = 585,
	eml22__UnitOfMeasure__fohm = 586,
	eml22__UnitOfMeasure__footcandle = 587,
	eml22__UnitOfMeasure__footcandle_x002es = 588,
	eml22__UnitOfMeasure__fP = 589,
	eml22__UnitOfMeasure__fPa = 590,
	eml22__UnitOfMeasure__frd = 591,
	eml22__UnitOfMeasure__fS = 592,
	eml22__UnitOfMeasure__ft = 593,
	eml22__UnitOfMeasure__fT = 594,
	eml22__UnitOfMeasure__ft_x002fbbl = 595,
	eml22__UnitOfMeasure__ft_x002fd = 596,
	eml22__UnitOfMeasure__ft_x002fdegF = 597,
	eml22__UnitOfMeasure__ft_x002fft = 598,
	eml22__UnitOfMeasure__ft_x002fft3 = 599,
	eml22__UnitOfMeasure__ft_x002fgal_x005bUS_x005d = 600,
	eml22__UnitOfMeasure__ft_x002fh = 601,
	eml22__UnitOfMeasure__ft_x002fin = 602,
	eml22__UnitOfMeasure__ft_x002flbm = 603,
	eml22__UnitOfMeasure__ft_x002fm = 604,
	eml22__UnitOfMeasure__ft_x002fmi = 605,
	eml22__UnitOfMeasure__ft_x002fmin = 606,
	eml22__UnitOfMeasure__ft_x002fms = 607,
	eml22__UnitOfMeasure__ft_x002fpsi = 608,
	eml22__UnitOfMeasure__ft_x002fs = 609,
	eml22__UnitOfMeasure__ft_x002fs2 = 610,
	eml22__UnitOfMeasure__ft_x002fus = 611,
	eml22__UnitOfMeasure__ft_x005bBnA_x005d = 612,
	eml22__UnitOfMeasure__ft_x005bBnB_x005d = 613,
	eml22__UnitOfMeasure__ft_x005bBr36_x005d = 614,
	eml22__UnitOfMeasure__ft_x005bBr65_x005d = 615,
	eml22__UnitOfMeasure__ft_x005bCla_x005d = 616,
	eml22__UnitOfMeasure__ft_x005bGC_x005d = 617,
	eml22__UnitOfMeasure__ft_x005bInd_x005d = 618,
	eml22__UnitOfMeasure__ft_x005bInd37_x005d = 619,
	eml22__UnitOfMeasure__ft_x005bInd62_x005d = 620,
	eml22__UnitOfMeasure__ft_x005bInd75_x005d = 621,
	eml22__UnitOfMeasure__ft_x005bSe_x005d = 622,
	eml22__UnitOfMeasure__ft_x005bSeT_x005d = 623,
	eml22__UnitOfMeasure__ft_x005bUS_x005d = 624,
	eml22__UnitOfMeasure__ft2 = 625,
	eml22__UnitOfMeasure__ft2_x002fh = 626,
	eml22__UnitOfMeasure__ft2_x002fin3 = 627,
	eml22__UnitOfMeasure__ft2_x002flbm = 628,
	eml22__UnitOfMeasure__ft2_x002fs = 629,
	eml22__UnitOfMeasure__ft3 = 630,
	eml22__UnitOfMeasure__ft3_x002f_x0028d_x002eft_x0029 = 631,
	eml22__UnitOfMeasure__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 632,
	eml22__UnitOfMeasure__ft3_x002f_x0028min_x002eft2_x0029 = 633,
	eml22__UnitOfMeasure__ft3_x002f_x0028s_x002eft2_x0029 = 634,
	eml22__UnitOfMeasure__ft3_x002fbbl = 635,
	eml22__UnitOfMeasure__ft3_x002fd = 636,
	eml22__UnitOfMeasure__ft3_x002fd2 = 637,
	eml22__UnitOfMeasure__ft3_x002fft = 638,
	eml22__UnitOfMeasure__ft3_x002fft2 = 639,
	eml22__UnitOfMeasure__ft3_x002fft3 = 640,
	eml22__UnitOfMeasure__ft3_x002fh = 641,
	eml22__UnitOfMeasure__ft3_x002fh2 = 642,
	eml22__UnitOfMeasure__ft3_x002fkg = 643,
	eml22__UnitOfMeasure__ft3_x002flbm = 644,
	eml22__UnitOfMeasure__ft3_x002flbmol = 645,
	eml22__UnitOfMeasure__ft3_x002fmin = 646,
	eml22__UnitOfMeasure__ft3_x002fmin2 = 647,
	eml22__UnitOfMeasure__ft3_x002frad = 648,
	eml22__UnitOfMeasure__ft3_x002fs = 649,
	eml22__UnitOfMeasure__ft3_x002fs2 = 650,
	eml22__UnitOfMeasure__ft3_x002fsack_x005b94lbm_x005d = 651,
	eml22__UnitOfMeasure__fur_x005bUS_x005d = 652,
	eml22__UnitOfMeasure__fV = 653,
	eml22__UnitOfMeasure__fW = 654,
	eml22__UnitOfMeasure__fWb = 655,
	eml22__UnitOfMeasure__g_x002eft_x002f_x0028cm3_x002es_x0029 = 656,
	eml22__UnitOfMeasure__g_x002em_x002f_x0028cm3_x002es_x0029 = 657,
	eml22__UnitOfMeasure__g_x002fcm3 = 658,
	eml22__UnitOfMeasure__g_x002fcm4 = 659,
	eml22__UnitOfMeasure__g_x002fdm3 = 660,
	eml22__UnitOfMeasure__g_x002fgal_x005bUK_x005d = 661,
	eml22__UnitOfMeasure__g_x002fgal_x005bUS_x005d = 662,
	eml22__UnitOfMeasure__g_x002fkg = 663,
	eml22__UnitOfMeasure__g_x002fL = 664,
	eml22__UnitOfMeasure__g_x002fm3 = 665,
	eml22__UnitOfMeasure__g_x002fmol = 666,
	eml22__UnitOfMeasure__g_x002fs = 667,
	eml22__UnitOfMeasure__g_x002ft = 668,
	eml22__UnitOfMeasure__GA = 669,
	eml22__UnitOfMeasure__Ga_x005bt_x005d = 670,
	eml22__UnitOfMeasure__Gal = 671,
	eml22__UnitOfMeasure__gal_x005bUK_x005d = 672,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 673,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 674,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 675,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 676,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 677,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 678,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fd = 679,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fft3 = 680,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fh = 681,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fh2 = 682,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002flbm = 683,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fmi = 684,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fmin = 685,
	eml22__UnitOfMeasure__gal_x005bUK_x005d_x002fmin2 = 686,
	eml22__UnitOfMeasure__gal_x005bUS_x005d = 687,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 688,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 689,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 690,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 691,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 692,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 693,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fbbl = 694,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fd = 695,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fft = 696,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fft3 = 697,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fh = 698,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fh2 = 699,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002flbm = 700,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fmi = 701,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fmin = 702,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fmin2 = 703,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 704,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 705,
	eml22__UnitOfMeasure__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 706,
	eml22__UnitOfMeasure__gAPI = 707,
	eml22__UnitOfMeasure__gauss = 708,
	eml22__UnitOfMeasure__gauss_x002fcm = 709,
	eml22__UnitOfMeasure__GBq = 710,
	eml22__UnitOfMeasure__GC = 711,
	eml22__UnitOfMeasure__Gcal_x005bth_x005d = 712,
	eml22__UnitOfMeasure__GEuc = 713,
	eml22__UnitOfMeasure__GeV = 714,
	eml22__UnitOfMeasure__gf = 715,
	eml22__UnitOfMeasure__GF = 716,
	eml22__UnitOfMeasure__Gg = 717,
	eml22__UnitOfMeasure__Ggauss = 718,
	eml22__UnitOfMeasure__GGy = 719,
	eml22__UnitOfMeasure__GH = 720,
	eml22__UnitOfMeasure__GHz = 721,
	eml22__UnitOfMeasure__GJ = 722,
	eml22__UnitOfMeasure__Gm = 723,
	eml22__UnitOfMeasure__GN = 724,
	eml22__UnitOfMeasure__gn = 725,
	eml22__UnitOfMeasure__Gohm = 726,
	eml22__UnitOfMeasure__gon = 727,
	eml22__UnitOfMeasure__GP = 728,
	eml22__UnitOfMeasure__GPa = 729,
	eml22__UnitOfMeasure__GPa_x002fcm = 730,
	eml22__UnitOfMeasure__GPa2 = 731,
	eml22__UnitOfMeasure__grain = 732,
	eml22__UnitOfMeasure__grain_x002fft3 = 733,
	eml22__UnitOfMeasure__grain_x002fgal_x005bUS_x005d = 734,
	eml22__UnitOfMeasure__Grd = 735,
	eml22__UnitOfMeasure__GS = 736,
	eml22__UnitOfMeasure__GT = 737,
	eml22__UnitOfMeasure__GV = 738,
	eml22__UnitOfMeasure__GW = 739,
	eml22__UnitOfMeasure__GW_x002eh = 740,
	eml22__UnitOfMeasure__GWb = 741,
	eml22__UnitOfMeasure__Gy = 742,
	eml22__UnitOfMeasure__h_x002fft3 = 743,
	eml22__UnitOfMeasure__h_x002fkm = 744,
	eml22__UnitOfMeasure__H_x002fm = 745,
	eml22__UnitOfMeasure__h_x002fm3 = 746,
	eml22__UnitOfMeasure__ha = 747,
	eml22__UnitOfMeasure__ha_x002em = 748,
	eml22__UnitOfMeasure__hbar = 749,
	eml22__UnitOfMeasure__hg = 750,
	eml22__UnitOfMeasure__hL = 751,
	eml22__UnitOfMeasure__hm = 752,
	eml22__UnitOfMeasure__hN = 753,
	eml22__UnitOfMeasure__hp = 754,
	eml22__UnitOfMeasure__hp_x002eh = 755,
	eml22__UnitOfMeasure__hp_x002eh_x002fbbl = 756,
	eml22__UnitOfMeasure__hp_x002eh_x002flbm = 757,
	eml22__UnitOfMeasure__hp_x002fft3 = 758,
	eml22__UnitOfMeasure__hp_x002fin2 = 759,
	eml22__UnitOfMeasure__hp_x005belec_x005d = 760,
	eml22__UnitOfMeasure__hp_x005bhyd_x005d = 761,
	eml22__UnitOfMeasure__hp_x005bhyd_x005d_x002fin2 = 762,
	eml22__UnitOfMeasure__hp_x005bmetric_x005d = 763,
	eml22__UnitOfMeasure__hp_x005bmetric_x005d_x002eh = 764,
	eml22__UnitOfMeasure__hs = 765,
	eml22__UnitOfMeasure__Hz = 766,
	eml22__UnitOfMeasure__in = 767,
	eml22__UnitOfMeasure__in_x002f_x0028in_x002edegF_x0029 = 768,
	eml22__UnitOfMeasure__in_x002fa = 769,
	eml22__UnitOfMeasure__in_x002fmin = 770,
	eml22__UnitOfMeasure__in_x002fs = 771,
	eml22__UnitOfMeasure__in_x002fs2 = 772,
	eml22__UnitOfMeasure__in_x005bUS_x005d = 773,
	eml22__UnitOfMeasure__in2 = 774,
	eml22__UnitOfMeasure__in2_x002fft2 = 775,
	eml22__UnitOfMeasure__in2_x002fin2 = 776,
	eml22__UnitOfMeasure__in2_x002fs = 777,
	eml22__UnitOfMeasure__in3 = 778,
	eml22__UnitOfMeasure__in3_x002fft = 779,
	eml22__UnitOfMeasure__in4 = 780,
	eml22__UnitOfMeasure__inH2O_x005b39degF_x005d = 781,
	eml22__UnitOfMeasure__inH2O_x005b60degF_x005d = 782,
	eml22__UnitOfMeasure__inHg_x005b32degF_x005d = 783,
	eml22__UnitOfMeasure__inHg_x005b60degF_x005d = 784,
	eml22__UnitOfMeasure__J_x002em_x002f_x0028s_x002em2_x002eK_x0029 = 785,
	eml22__UnitOfMeasure__J_x002em_x002fm2 = 786,
	eml22__UnitOfMeasure__J_x002f_x0028g_x002eK_x0029 = 787,
	eml22__UnitOfMeasure__J_x002f_x0028kg_x002eK_x0029 = 788,
	eml22__UnitOfMeasure__J_x002f_x0028mol_x002eK_x0029 = 789,
	eml22__UnitOfMeasure__J_x002f_x0028s_x002em2_x002edegC_x0029 = 790,
	eml22__UnitOfMeasure__J_x002fcm2 = 791,
	eml22__UnitOfMeasure__J_x002fdm3 = 792,
	eml22__UnitOfMeasure__J_x002fg = 793,
	eml22__UnitOfMeasure__J_x002fK = 794,
	eml22__UnitOfMeasure__J_x002fkg = 795,
	eml22__UnitOfMeasure__J_x002fm = 796,
	eml22__UnitOfMeasure__J_x002fm2 = 797,
	eml22__UnitOfMeasure__J_x002fm3 = 798,
	eml22__UnitOfMeasure__J_x002fmol = 799,
	eml22__UnitOfMeasure__J_x002fs = 800,
	eml22__UnitOfMeasure__K_x002em2_x002fkW = 801,
	eml22__UnitOfMeasure__K_x002em2_x002fW = 802,
	eml22__UnitOfMeasure__K_x002fkm = 803,
	eml22__UnitOfMeasure__K_x002fm = 804,
	eml22__UnitOfMeasure__K_x002fPa = 805,
	eml22__UnitOfMeasure__K_x002fs = 806,
	eml22__UnitOfMeasure__K_x002fW = 807,
	eml22__UnitOfMeasure__kA = 808,
	eml22__UnitOfMeasure__ka_x005bt_x005d = 809,
	eml22__UnitOfMeasure__kC = 810,
	eml22__UnitOfMeasure__kcal_x005bth_x005d = 811,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002em_x002fcm2 = 812,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edegC_x0029 = 813,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edegC_x0029 = 814,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002f_x0028kg_x002edegC_x0029 = 815,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fcm3 = 816,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fg = 817,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fh = 818,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fkg = 819,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fm3 = 820,
	eml22__UnitOfMeasure__kcal_x005bth_x005d_x002fmol = 821,
	eml22__UnitOfMeasure__kcd = 822,
	eml22__UnitOfMeasure__kdyne = 823,
	eml22__UnitOfMeasure__kEuc = 824,
	eml22__UnitOfMeasure__keV = 825,
	eml22__UnitOfMeasure__kF = 826,
	eml22__UnitOfMeasure__kg = 827,
	eml22__UnitOfMeasure__kg_x002em = 828,
	eml22__UnitOfMeasure__kg_x002em_x002fcm2 = 829,
	eml22__UnitOfMeasure__kg_x002em_x002fs = 830,
	eml22__UnitOfMeasure__kg_x002em2 = 831,
	eml22__UnitOfMeasure__kg_x002f_x0028kW_x002eh_x0029 = 832,
	eml22__UnitOfMeasure__kg_x002f_x0028m_x002es_x0029 = 833,
	eml22__UnitOfMeasure__kg_x002f_x0028m2_x002es_x0029 = 834,
	eml22__UnitOfMeasure__kg_x002fd = 835,
	eml22__UnitOfMeasure__kg_x002fdm3 = 836,
	eml22__UnitOfMeasure__kg_x002fdm4 = 837,
	eml22__UnitOfMeasure__kg_x002fh = 838,
	eml22__UnitOfMeasure__kg_x002fJ = 839,
	eml22__UnitOfMeasure__kg_x002fkg = 840,
	eml22__UnitOfMeasure__kg_x002fL = 841,
	eml22__UnitOfMeasure__kg_x002fm = 842,
	eml22__UnitOfMeasure__kg_x002fm2 = 843,
	eml22__UnitOfMeasure__kg_x002fm3 = 844,
	eml22__UnitOfMeasure__kg_x002fm4 = 845,
	eml22__UnitOfMeasure__kg_x002fmin = 846,
	eml22__UnitOfMeasure__kg_x002fMJ = 847,
	eml22__UnitOfMeasure__kg_x002fmol = 848,
	eml22__UnitOfMeasure__kg_x002fs = 849,
	eml22__UnitOfMeasure__kg_x002fsack_x005b94lbm_x005d = 850,
	eml22__UnitOfMeasure__kg_x002ft = 851,
	eml22__UnitOfMeasure__kgauss = 852,
	eml22__UnitOfMeasure__kgf = 853,
	eml22__UnitOfMeasure__kgf_x002em = 854,
	eml22__UnitOfMeasure__kgf_x002em_x002fcm2 = 855,
	eml22__UnitOfMeasure__kgf_x002em_x002fm = 856,
	eml22__UnitOfMeasure__kgf_x002em2 = 857,
	eml22__UnitOfMeasure__kgf_x002es_x002fm2 = 858,
	eml22__UnitOfMeasure__kgf_x002fcm = 859,
	eml22__UnitOfMeasure__kgf_x002fcm2 = 860,
	eml22__UnitOfMeasure__kgf_x002fkgf = 861,
	eml22__UnitOfMeasure__kgf_x002fm2 = 862,
	eml22__UnitOfMeasure__kgf_x002fmm2 = 863,
	eml22__UnitOfMeasure__kGy = 864,
	eml22__UnitOfMeasure__kH = 865,
	eml22__UnitOfMeasure__kHz = 866,
	eml22__UnitOfMeasure__Kibyte = 867,
	eml22__UnitOfMeasure__kJ = 868,
	eml22__UnitOfMeasure__kJ_x002em_x002f_x0028h_x002em2_x002eK_x0029 = 869,
	eml22__UnitOfMeasure__kJ_x002f_x0028h_x002em2_x002eK_x0029 = 870,
	eml22__UnitOfMeasure__kJ_x002f_x0028kg_x002eK_x0029 = 871,
	eml22__UnitOfMeasure__kJ_x002f_x0028kmol_x002eK_x0029 = 872,
	eml22__UnitOfMeasure__kJ_x002fdm3 = 873,
	eml22__UnitOfMeasure__kJ_x002fkg = 874,
	eml22__UnitOfMeasure__kJ_x002fkmol = 875,
	eml22__UnitOfMeasure__kJ_x002fm3 = 876,
	eml22__UnitOfMeasure__klbf = 877,
	eml22__UnitOfMeasure__klbm = 878,
	eml22__UnitOfMeasure__klbm_x002fin = 879,
	eml22__UnitOfMeasure__klx = 880,
	eml22__UnitOfMeasure__km = 881,
	eml22__UnitOfMeasure__km_x002fcm = 882,
	eml22__UnitOfMeasure__km_x002fdm3 = 883,
	eml22__UnitOfMeasure__km_x002fh = 884,
	eml22__UnitOfMeasure__km_x002fL = 885,
	eml22__UnitOfMeasure__km_x002fs = 886,
	eml22__UnitOfMeasure__km2 = 887,
	eml22__UnitOfMeasure__km3 = 888,
	eml22__UnitOfMeasure__kmol = 889,
	eml22__UnitOfMeasure__kmol_x002fh = 890,
	eml22__UnitOfMeasure__kmol_x002fm3 = 891,
	eml22__UnitOfMeasure__kmol_x002fs = 892,
	eml22__UnitOfMeasure__kN = 893,
	eml22__UnitOfMeasure__kN_x002em = 894,
	eml22__UnitOfMeasure__kN_x002em2 = 895,
	eml22__UnitOfMeasure__kN_x002fm = 896,
	eml22__UnitOfMeasure__kN_x002fm2 = 897,
	eml22__UnitOfMeasure__knot = 898,
	eml22__UnitOfMeasure__kohm = 899,
	eml22__UnitOfMeasure__kohm_x002em = 900,
	eml22__UnitOfMeasure__kP = 901,
	eml22__UnitOfMeasure__kPa = 902,
	eml22__UnitOfMeasure__kPa_x002es_x002fm = 903,
	eml22__UnitOfMeasure__kPa_x002fh = 904,
	eml22__UnitOfMeasure__kPa_x002fhm = 905,
	eml22__UnitOfMeasure__kPa_x002fm = 906,
	eml22__UnitOfMeasure__kPa_x002fmin = 907,
	eml22__UnitOfMeasure__kPa2 = 908,
	eml22__UnitOfMeasure__kPa2_x002fcP = 909,
	eml22__UnitOfMeasure__kpsi = 910,
	eml22__UnitOfMeasure__kpsi2 = 911,
	eml22__UnitOfMeasure__krad = 912,
	eml22__UnitOfMeasure__krd = 913,
	eml22__UnitOfMeasure__kS = 914,
	eml22__UnitOfMeasure__kS_x002fm = 915,
	eml22__UnitOfMeasure__kT = 916,
	eml22__UnitOfMeasure__kV = 917,
	eml22__UnitOfMeasure__kW = 918,
	eml22__UnitOfMeasure__kW_x002eh = 919,
	eml22__UnitOfMeasure__kW_x002eh_x002f_x0028kg_x002edegC_x0029 = 920,
	eml22__UnitOfMeasure__kW_x002eh_x002fdm3 = 921,
	eml22__UnitOfMeasure__kW_x002eh_x002fkg = 922,
	eml22__UnitOfMeasure__kW_x002eh_x002fm3 = 923,
	eml22__UnitOfMeasure__kW_x002f_x0028m2_x002eK_x0029 = 924,
	eml22__UnitOfMeasure__kW_x002f_x0028m3_x002eK_x0029 = 925,
	eml22__UnitOfMeasure__kW_x002fcm2 = 926,
	eml22__UnitOfMeasure__kW_x002fm2 = 927,
	eml22__UnitOfMeasure__kW_x002fm3 = 928,
	eml22__UnitOfMeasure__kWb = 929,
	eml22__UnitOfMeasure__L_x002f_x0028bar_x002emin_x0029 = 930,
	eml22__UnitOfMeasure__L_x002fh = 931,
	eml22__UnitOfMeasure__L_x002fkg = 932,
	eml22__UnitOfMeasure__L_x002fkmol = 933,
	eml22__UnitOfMeasure__L_x002fm = 934,
	eml22__UnitOfMeasure__L_x002fm3 = 935,
	eml22__UnitOfMeasure__L_x002fmin = 936,
	eml22__UnitOfMeasure__L_x002fmol = 937,
	eml22__UnitOfMeasure__L_x002fs = 938,
	eml22__UnitOfMeasure__L_x002fs2 = 939,
	eml22__UnitOfMeasure__L_x002ft = 940,
	eml22__UnitOfMeasure__L_x002fton_x005bUK_x005d = 941,
	eml22__UnitOfMeasure__lbf = 942,
	eml22__UnitOfMeasure__lbf_x002eft = 943,
	eml22__UnitOfMeasure__lbf_x002eft_x002fbbl = 944,
	eml22__UnitOfMeasure__lbf_x002eft_x002fgal_x005bUS_x005d = 945,
	eml22__UnitOfMeasure__lbf_x002eft_x002fin = 946,
	eml22__UnitOfMeasure__lbf_x002eft_x002fin2 = 947,
	eml22__UnitOfMeasure__lbf_x002eft_x002flbm = 948,
	eml22__UnitOfMeasure__lbf_x002eft_x002fmin = 949,
	eml22__UnitOfMeasure__lbf_x002eft_x002fs = 950,
	eml22__UnitOfMeasure__lbf_x002ein = 951,
	eml22__UnitOfMeasure__lbf_x002ein_x002fin = 952,
	eml22__UnitOfMeasure__lbf_x002ein2 = 953,
	eml22__UnitOfMeasure__lbf_x002es_x002fft2 = 954,
	eml22__UnitOfMeasure__lbf_x002es_x002fin2 = 955,
	eml22__UnitOfMeasure__lbf_x002fft = 956,
	eml22__UnitOfMeasure__lbf_x002fft2 = 957,
	eml22__UnitOfMeasure__lbf_x002fft3 = 958,
	eml22__UnitOfMeasure__lbf_x002fgal_x005bUS_x005d = 959,
	eml22__UnitOfMeasure__lbf_x002fin = 960,
	eml22__UnitOfMeasure__lbf_x002flbf = 961,
	eml22__UnitOfMeasure__lbm = 962,
	eml22__UnitOfMeasure__lbm_x002eft = 963,
	eml22__UnitOfMeasure__lbm_x002eft_x002fs = 964,
	eml22__UnitOfMeasure__lbm_x002eft2 = 965,
	eml22__UnitOfMeasure__lbm_x002eft2_x002fs2 = 966,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft_x002eh_x0029 = 967,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft_x002es_x0029 = 968,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft2_x002eh_x0029 = 969,
	eml22__UnitOfMeasure__lbm_x002f_x0028ft2_x002es_x0029 = 970,
	eml22__UnitOfMeasure__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 971,
	eml22__UnitOfMeasure__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 972,
	eml22__UnitOfMeasure__lbm_x002f_x0028hp_x002eh_x0029 = 973,
	eml22__UnitOfMeasure__lbm_x002fbbl = 974,
	eml22__UnitOfMeasure__lbm_x002fd = 975,
	eml22__UnitOfMeasure__lbm_x002fft = 976,
	eml22__UnitOfMeasure__lbm_x002fft2 = 977,
	eml22__UnitOfMeasure__lbm_x002fft3 = 978,
	eml22__UnitOfMeasure__lbm_x002fft4 = 979,
	eml22__UnitOfMeasure__lbm_x002fgal_x005bUK_x005d = 980,
	eml22__UnitOfMeasure__lbm_x002fgal_x005bUS_x005d = 981,
	eml22__UnitOfMeasure__lbm_x002fh = 982,
	eml22__UnitOfMeasure__lbm_x002fin3 = 983,
	eml22__UnitOfMeasure__lbm_x002flbmol = 984,
	eml22__UnitOfMeasure__lbm_x002fmin = 985,
	eml22__UnitOfMeasure__lbm_x002fs = 986,
	eml22__UnitOfMeasure__lbmol = 987,
	eml22__UnitOfMeasure__lbmol_x002f_x0028h_x002eft2_x0029 = 988,
	eml22__UnitOfMeasure__lbmol_x002f_x0028s_x002eft2_x0029 = 989,
	eml22__UnitOfMeasure__lbmol_x002fft3 = 990,
	eml22__UnitOfMeasure__lbmol_x002fgal_x005bUK_x005d = 991,
	eml22__UnitOfMeasure__lbmol_x002fgal_x005bUS_x005d = 992,
	eml22__UnitOfMeasure__lbmol_x002fh = 993,
	eml22__UnitOfMeasure__lbmol_x002fs = 994,
	eml22__UnitOfMeasure__link = 995,
	eml22__UnitOfMeasure__link_x005bBnA_x005d = 996,
	eml22__UnitOfMeasure__link_x005bBnB_x005d = 997,
	eml22__UnitOfMeasure__link_x005bCla_x005d = 998,
	eml22__UnitOfMeasure__link_x005bSe_x005d = 999,
	eml22__UnitOfMeasure__link_x005bSeT_x005d = 1000,
	eml22__UnitOfMeasure__link_x005bUS_x005d = 1001,
	eml22__UnitOfMeasure__lm = 1002,
	eml22__UnitOfMeasure__lm_x002es = 1003,
	eml22__UnitOfMeasure__lm_x002fm2 = 1004,
	eml22__UnitOfMeasure__lm_x002fW = 1005,
	eml22__UnitOfMeasure__lx = 1006,
	eml22__UnitOfMeasure__lx_x002es = 1007,
	eml22__UnitOfMeasure__m_x002f_x0028m_x002eK_x0029 = 1008,
	eml22__UnitOfMeasure__m_x002fcm = 1009,
	eml22__UnitOfMeasure__m_x002fd = 1010,
	eml22__UnitOfMeasure__m_x002fh = 1011,
	eml22__UnitOfMeasure__m_x002fK = 1012,
	eml22__UnitOfMeasure__m_x002fkg = 1013,
	eml22__UnitOfMeasure__m_x002fkm = 1014,
	eml22__UnitOfMeasure__m_x002fkPa = 1015,
	eml22__UnitOfMeasure__m_x002fm = 1016,
	eml22__UnitOfMeasure__m_x002fm3 = 1017,
	eml22__UnitOfMeasure__m_x002fmin = 1018,
	eml22__UnitOfMeasure__m_x002fms = 1019,
	eml22__UnitOfMeasure__m_x002fPa = 1020,
	eml22__UnitOfMeasure__m_x002fs = 1021,
	eml22__UnitOfMeasure__m_x002fs2 = 1022,
	eml22__UnitOfMeasure__m_x005bGer_x005d = 1023,
	eml22__UnitOfMeasure__m2 = 1024,
	eml22__UnitOfMeasure__m2_x002f_x0028kPa_x002ed_x0029 = 1025,
	eml22__UnitOfMeasure__m2_x002f_x0028Pa_x002es_x0029 = 1026,
	eml22__UnitOfMeasure__m2_x002fcm3 = 1027,
	eml22__UnitOfMeasure__m2_x002fd = 1028,
	eml22__UnitOfMeasure__m2_x002fg = 1029,
	eml22__UnitOfMeasure__m2_x002fh = 1030,
	eml22__UnitOfMeasure__m2_x002fkg = 1031,
	eml22__UnitOfMeasure__m2_x002fm2 = 1032,
	eml22__UnitOfMeasure__m2_x002fm3 = 1033,
	eml22__UnitOfMeasure__m2_x002fmol = 1034,
	eml22__UnitOfMeasure__m2_x002fs = 1035,
	eml22__UnitOfMeasure__m3 = 1036,
	eml22__UnitOfMeasure__m3_x002f_x0028bar_x002ed_x0029 = 1037,
	eml22__UnitOfMeasure__m3_x002f_x0028bar_x002eh_x0029 = 1038,
	eml22__UnitOfMeasure__m3_x002f_x0028bar_x002emin_x0029 = 1039,
	eml22__UnitOfMeasure__m3_x002f_x0028d_x002em_x0029 = 1040,
	eml22__UnitOfMeasure__m3_x002f_x0028h_x002em_x0029 = 1041,
	eml22__UnitOfMeasure__m3_x002f_x0028ha_x002em_x0029 = 1042,
	eml22__UnitOfMeasure__m3_x002f_x0028kPa_x002ed_x0029 = 1043,
	eml22__UnitOfMeasure__m3_x002f_x0028kPa_x002eh_x0029 = 1044,
	eml22__UnitOfMeasure__m3_x002f_x0028kW_x002eh_x0029 = 1045,
	eml22__UnitOfMeasure__m3_x002f_x0028m3_x002eK_x0029 = 1046,
	eml22__UnitOfMeasure__m3_x002f_x0028Pa_x002es_x0029 = 1047,
	eml22__UnitOfMeasure__m3_x002f_x0028psi_x002ed_x0029 = 1048,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002eft_x0029 = 1049,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002em_x0029 = 1050,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002em2_x0029 = 1051,
	eml22__UnitOfMeasure__m3_x002f_x0028s_x002em3_x0029 = 1052,
	eml22__UnitOfMeasure__m3_x002fbbl = 1053,
	eml22__UnitOfMeasure__m3_x002fd = 1054,
	eml22__UnitOfMeasure__m3_x002fd2 = 1055,
	eml22__UnitOfMeasure__m3_x002fg = 1056,
	eml22__UnitOfMeasure__m3_x002fh = 1057,
	eml22__UnitOfMeasure__m3_x002fJ = 1058,
	eml22__UnitOfMeasure__m3_x002fkg = 1059,
	eml22__UnitOfMeasure__m3_x002fkm = 1060,
	eml22__UnitOfMeasure__m3_x002fkmol = 1061,
	eml22__UnitOfMeasure__m3_x002fkPa = 1062,
	eml22__UnitOfMeasure__m3_x002fm = 1063,
	eml22__UnitOfMeasure__m3_x002fm2 = 1064,
	eml22__UnitOfMeasure__m3_x002fm3 = 1065,
	eml22__UnitOfMeasure__m3_x002fmin = 1066,
	eml22__UnitOfMeasure__m3_x002fmol = 1067,
	eml22__UnitOfMeasure__m3_x002fPa = 1068,
	eml22__UnitOfMeasure__m3_x002frad = 1069,
	eml22__UnitOfMeasure__m3_x002frev = 1070,
	eml22__UnitOfMeasure__m3_x002fs = 1071,
	eml22__UnitOfMeasure__m3_x002fs2 = 1072,
	eml22__UnitOfMeasure__m3_x002ft = 1073,
	eml22__UnitOfMeasure__m3_x002fton_x005bUK_x005d = 1074,
	eml22__UnitOfMeasure__m3_x002fton_x005bUS_x005d = 1075,
	eml22__UnitOfMeasure__m4 = 1076,
	eml22__UnitOfMeasure__m4_x002fs = 1077,
	eml22__UnitOfMeasure__mA = 1078,
	eml22__UnitOfMeasure__MA = 1079,
	eml22__UnitOfMeasure__mA_x002fcm2 = 1080,
	eml22__UnitOfMeasure__mA_x002fft2 = 1081,
	eml22__UnitOfMeasure__Ma_x005bt_x005d = 1082,
	eml22__UnitOfMeasure__mbar = 1083,
	eml22__UnitOfMeasure__MBq = 1084,
	eml22__UnitOfMeasure__mC = 1085,
	eml22__UnitOfMeasure__MC = 1086,
	eml22__UnitOfMeasure__mC_x002fm2 = 1087,
	eml22__UnitOfMeasure__mcal_x005bth_x005d = 1088,
	eml22__UnitOfMeasure__Mcal_x005bth_x005d = 1089,
	eml22__UnitOfMeasure__mCi = 1090,
	eml22__UnitOfMeasure__mD = 1091,
	eml22__UnitOfMeasure__mD_x002eft = 1092,
	eml22__UnitOfMeasure__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 1093,
	eml22__UnitOfMeasure__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 1094,
	eml22__UnitOfMeasure__mD_x002em = 1095,
	eml22__UnitOfMeasure__mD_x002f_x0028Pa_x002es_x0029 = 1096,
	eml22__UnitOfMeasure__mD_x002fcP = 1097,
	eml22__UnitOfMeasure__MEuc = 1098,
	eml22__UnitOfMeasure__mEuc = 1099,
	eml22__UnitOfMeasure__meV = 1100,
	eml22__UnitOfMeasure__MeV = 1101,
	eml22__UnitOfMeasure__MF = 1102,
	eml22__UnitOfMeasure__mF = 1103,
	eml22__UnitOfMeasure__mg = 1104,
	eml22__UnitOfMeasure__Mg = 1105,
	eml22__UnitOfMeasure__Mg_x002fa = 1106,
	eml22__UnitOfMeasure__Mg_x002fd = 1107,
	eml22__UnitOfMeasure__mg_x002fdm3 = 1108,
	eml22__UnitOfMeasure__mg_x002fg = 1109,
	eml22__UnitOfMeasure__mg_x002fgal_x005bUS_x005d = 1110,
	eml22__UnitOfMeasure__Mg_x002fh = 1111,
	eml22__UnitOfMeasure__Mg_x002fin = 1112,
	eml22__UnitOfMeasure__mg_x002fJ = 1113,
	eml22__UnitOfMeasure__mg_x002fkg = 1114,
	eml22__UnitOfMeasure__mg_x002fL = 1115,
	eml22__UnitOfMeasure__Mg_x002fm2 = 1116,
	eml22__UnitOfMeasure__mg_x002fm3 = 1117,
	eml22__UnitOfMeasure__Mg_x002fm3 = 1118,
	eml22__UnitOfMeasure__Mg_x002fmin = 1119,
	eml22__UnitOfMeasure__mGal = 1120,
	eml22__UnitOfMeasure__mgauss = 1121,
	eml22__UnitOfMeasure__Mgauss = 1122,
	eml22__UnitOfMeasure__Mgf = 1123,
	eml22__UnitOfMeasure__mgn = 1124,
	eml22__UnitOfMeasure__MGy = 1125,
	eml22__UnitOfMeasure__mGy = 1126,
	eml22__UnitOfMeasure__mH = 1127,
	eml22__UnitOfMeasure__MH = 1128,
	eml22__UnitOfMeasure__mHz = 1129,
	eml22__UnitOfMeasure__MHz = 1130,
	eml22__UnitOfMeasure__mi = 1131,
	eml22__UnitOfMeasure__mi_x002fgal_x005bUK_x005d = 1132,
	eml22__UnitOfMeasure__mi_x002fgal_x005bUS_x005d = 1133,
	eml22__UnitOfMeasure__mi_x002fh = 1134,
	eml22__UnitOfMeasure__mi_x002fin = 1135,
	eml22__UnitOfMeasure__mi_x005bnaut_x005d = 1136,
	eml22__UnitOfMeasure__mi_x005bnautUK_x005d = 1137,
	eml22__UnitOfMeasure__mi_x005bUS_x005d = 1138,
	eml22__UnitOfMeasure__mi_x005bUS_x005d2 = 1139,
	eml22__UnitOfMeasure__mi2 = 1140,
	eml22__UnitOfMeasure__mi3 = 1141,
	eml22__UnitOfMeasure__Mibyte = 1142,
	eml22__UnitOfMeasure__mil = 1143,
	eml22__UnitOfMeasure__mil_x002fa = 1144,
	eml22__UnitOfMeasure__mila = 1145,
	eml22__UnitOfMeasure__min_ = 1146,
	eml22__UnitOfMeasure__min_x002fft = 1147,
	eml22__UnitOfMeasure__min_x002fm = 1148,
	eml22__UnitOfMeasure__mina = 1149,
	eml22__UnitOfMeasure__mJ = 1150,
	eml22__UnitOfMeasure__MJ = 1151,
	eml22__UnitOfMeasure__MJ_x002fa = 1152,
	eml22__UnitOfMeasure__mJ_x002fcm2 = 1153,
	eml22__UnitOfMeasure__MJ_x002fkg = 1154,
	eml22__UnitOfMeasure__MJ_x002fkmol = 1155,
	eml22__UnitOfMeasure__MJ_x002fm = 1156,
	eml22__UnitOfMeasure__mJ_x002fm2 = 1157,
	eml22__UnitOfMeasure__MJ_x002fm3 = 1158,
	eml22__UnitOfMeasure__mL = 1159,
	eml22__UnitOfMeasure__mL_x002fgal_x005bUK_x005d = 1160,
	eml22__UnitOfMeasure__mL_x002fgal_x005bUS_x005d = 1161,
	eml22__UnitOfMeasure__mL_x002fmL = 1162,
	eml22__UnitOfMeasure__mm = 1163,
	eml22__UnitOfMeasure__Mm = 1164,
	eml22__UnitOfMeasure__mm_x002f_x0028mm_x002eK_x0029 = 1165,
	eml22__UnitOfMeasure__mm_x002fa = 1166,
	eml22__UnitOfMeasure__mm_x002fs = 1167,
	eml22__UnitOfMeasure__mm2 = 1168,
	eml22__UnitOfMeasure__mm2_x002fmm2 = 1169,
	eml22__UnitOfMeasure__mm2_x002fs = 1170,
	eml22__UnitOfMeasure__mm3 = 1171,
	eml22__UnitOfMeasure__mm3_x002fJ = 1172,
	eml22__UnitOfMeasure__mmHg_x005b0degC_x005d = 1173,
	eml22__UnitOfMeasure__mmol = 1174,
	eml22__UnitOfMeasure__MN = 1175,
	eml22__UnitOfMeasure__mN = 1176,
	eml22__UnitOfMeasure__mN_x002em2 = 1177,
	eml22__UnitOfMeasure__mN_x002fkm = 1178,
	eml22__UnitOfMeasure__mN_x002fm = 1179,
	eml22__UnitOfMeasure__Mohm = 1180,
	eml22__UnitOfMeasure__mohm = 1181,
	eml22__UnitOfMeasure__mol = 1182,
	eml22__UnitOfMeasure__mol_x002em2_x002f_x0028mol_x002es_x0029 = 1183,
	eml22__UnitOfMeasure__mol_x002f_x0028s_x002em2_x0029 = 1184,
	eml22__UnitOfMeasure__mol_x002fm2 = 1185,
	eml22__UnitOfMeasure__mol_x002fm3 = 1186,
	eml22__UnitOfMeasure__mol_x002fmol = 1187,
	eml22__UnitOfMeasure__mol_x002fs = 1188,
	eml22__UnitOfMeasure__MP = 1189,
	eml22__UnitOfMeasure__mP = 1190,
	eml22__UnitOfMeasure__mPa = 1191,
	eml22__UnitOfMeasure__MPa = 1192,
	eml22__UnitOfMeasure__mPa_x002es = 1193,
	eml22__UnitOfMeasure__MPa_x002es_x002fm = 1194,
	eml22__UnitOfMeasure__MPa_x002fh = 1195,
	eml22__UnitOfMeasure__MPa_x002fm = 1196,
	eml22__UnitOfMeasure__Mpsi = 1197,
	eml22__UnitOfMeasure__Mrad = 1198,
	eml22__UnitOfMeasure__mrad = 1199,
	eml22__UnitOfMeasure__mrd = 1200,
	eml22__UnitOfMeasure__Mrd = 1201,
	eml22__UnitOfMeasure__mrem = 1202,
	eml22__UnitOfMeasure__mrem_x002fh = 1203,
	eml22__UnitOfMeasure__ms = 1204,
	eml22__UnitOfMeasure__MS = 1205,
	eml22__UnitOfMeasure__mS = 1206,
	eml22__UnitOfMeasure__mS_x002fcm = 1207,
	eml22__UnitOfMeasure__ms_x002fcm = 1208,
	eml22__UnitOfMeasure__ms_x002fft = 1209,
	eml22__UnitOfMeasure__ms_x002fin = 1210,
	eml22__UnitOfMeasure__mS_x002fm = 1211,
	eml22__UnitOfMeasure__ms_x002fm = 1212,
	eml22__UnitOfMeasure__ms_x002fs = 1213,
	eml22__UnitOfMeasure__mSv = 1214,
	eml22__UnitOfMeasure__mSv_x002fh = 1215,
	eml22__UnitOfMeasure__mT = 1216,
	eml22__UnitOfMeasure__mT_x002fdm = 1217,
	eml22__UnitOfMeasure__MV = 1218,
	eml22__UnitOfMeasure__mV = 1219,
	eml22__UnitOfMeasure__mV_x002fft = 1220,
	eml22__UnitOfMeasure__mV_x002fm = 1221,
	eml22__UnitOfMeasure__mW = 1222,
	eml22__UnitOfMeasure__MW = 1223,
	eml22__UnitOfMeasure__MW_x002eh = 1224,
	eml22__UnitOfMeasure__MW_x002eh_x002fkg = 1225,
	eml22__UnitOfMeasure__MW_x002eh_x002fm3 = 1226,
	eml22__UnitOfMeasure__mW_x002fm2 = 1227,
	eml22__UnitOfMeasure__MWb = 1228,
	eml22__UnitOfMeasure__mWb = 1229,
	eml22__UnitOfMeasure__N_x002em = 1230,
	eml22__UnitOfMeasure__N_x002em_x002fm = 1231,
	eml22__UnitOfMeasure__N_x002em2 = 1232,
	eml22__UnitOfMeasure__N_x002es_x002fm2 = 1233,
	eml22__UnitOfMeasure__N_x002fm = 1234,
	eml22__UnitOfMeasure__N_x002fm2 = 1235,
	eml22__UnitOfMeasure__N_x002fm3 = 1236,
	eml22__UnitOfMeasure__N_x002fmm2 = 1237,
	eml22__UnitOfMeasure__N_x002fN = 1238,
	eml22__UnitOfMeasure__na = 1239,
	eml22__UnitOfMeasure__nA = 1240,
	eml22__UnitOfMeasure__nAPI = 1241,
	eml22__UnitOfMeasure__nC = 1242,
	eml22__UnitOfMeasure__ncal_x005bth_x005d = 1243,
	eml22__UnitOfMeasure__nCi = 1244,
	eml22__UnitOfMeasure__nEuc = 1245,
	eml22__UnitOfMeasure__neV = 1246,
	eml22__UnitOfMeasure__nF = 1247,
	eml22__UnitOfMeasure__ng = 1248,
	eml22__UnitOfMeasure__ng_x002fg = 1249,
	eml22__UnitOfMeasure__ng_x002fmg = 1250,
	eml22__UnitOfMeasure__ngauss = 1251,
	eml22__UnitOfMeasure__nGy = 1252,
	eml22__UnitOfMeasure__nH = 1253,
	eml22__UnitOfMeasure__nHz = 1254,
	eml22__UnitOfMeasure__nJ = 1255,
	eml22__UnitOfMeasure__nm = 1256,
	eml22__UnitOfMeasure__nm_x002fs = 1257,
	eml22__UnitOfMeasure__nN = 1258,
	eml22__UnitOfMeasure__nohm = 1259,
	eml22__UnitOfMeasure__nohm_x002emil2_x002fft = 1260,
	eml22__UnitOfMeasure__nohm_x002emm2_x002fm = 1261,
	eml22__UnitOfMeasure__nP = 1262,
	eml22__UnitOfMeasure__nPa = 1263,
	eml22__UnitOfMeasure__nrd = 1264,
	eml22__UnitOfMeasure__ns = 1265,
	eml22__UnitOfMeasure__nS = 1266,
	eml22__UnitOfMeasure__ns_x002fft = 1267,
	eml22__UnitOfMeasure__ns_x002fm = 1268,
	eml22__UnitOfMeasure__nT = 1269,
	eml22__UnitOfMeasure__nV = 1270,
	eml22__UnitOfMeasure__nW = 1271,
	eml22__UnitOfMeasure__nWb = 1272,
	eml22__UnitOfMeasure__Oe = 1273,
	eml22__UnitOfMeasure__ohm = 1274,
	eml22__UnitOfMeasure__ohm_x002ecm = 1275,
	eml22__UnitOfMeasure__ohm_x002em = 1276,
	eml22__UnitOfMeasure__ohm_x002em2_x002fm = 1277,
	eml22__UnitOfMeasure__ohm_x002fm = 1278,
	eml22__UnitOfMeasure__ozf = 1279,
	eml22__UnitOfMeasure__ozm = 1280,
	eml22__UnitOfMeasure__ozm_x005btroy_x005d = 1281,
	eml22__UnitOfMeasure__Pa = 1282,
	eml22__UnitOfMeasure__pA = 1283,
	eml22__UnitOfMeasure__Pa_x002es = 1284,
	eml22__UnitOfMeasure__Pa_x002es_x002em3_x002fkg = 1285,
	eml22__UnitOfMeasure__Pa_x002es_x002fm3 = 1286,
	eml22__UnitOfMeasure__Pa_x002es2_x002fm3 = 1287,
	eml22__UnitOfMeasure__Pa_x002fh = 1288,
	eml22__UnitOfMeasure__Pa_x002fm = 1289,
	eml22__UnitOfMeasure__Pa_x002fm3 = 1290,
	eml22__UnitOfMeasure__Pa_x002fs = 1291,
	eml22__UnitOfMeasure__Pa2 = 1292,
	eml22__UnitOfMeasure__Pa2_x002f_x0028Pa_x002es_x0029 = 1293,
	eml22__UnitOfMeasure__pC = 1294,
	eml22__UnitOfMeasure__pcal_x005bth_x005d = 1295,
	eml22__UnitOfMeasure__pCi = 1296,
	eml22__UnitOfMeasure__pCi_x002fg = 1297,
	eml22__UnitOfMeasure__pdl = 1298,
	eml22__UnitOfMeasure__pdl_x002ecm2 = 1299,
	eml22__UnitOfMeasure__pdl_x002eft = 1300,
	eml22__UnitOfMeasure__pdl_x002fcm = 1301,
	eml22__UnitOfMeasure__pEuc = 1302,
	eml22__UnitOfMeasure__peV = 1303,
	eml22__UnitOfMeasure__pF = 1304,
	eml22__UnitOfMeasure__pg = 1305,
	eml22__UnitOfMeasure__pgauss = 1306,
	eml22__UnitOfMeasure__pGy = 1307,
	eml22__UnitOfMeasure__pHz = 1308,
	eml22__UnitOfMeasure__pJ = 1309,
	eml22__UnitOfMeasure__pm = 1310,
	eml22__UnitOfMeasure__pN = 1311,
	eml22__UnitOfMeasure__pohm = 1312,
	eml22__UnitOfMeasure__pP = 1313,
	eml22__UnitOfMeasure__pPa = 1314,
	eml22__UnitOfMeasure__ppk = 1315,
	eml22__UnitOfMeasure__ppm = 1316,
	eml22__UnitOfMeasure__ppm_x005bmass_x005d = 1317,
	eml22__UnitOfMeasure__ppm_x005bvol_x005d = 1318,
	eml22__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegC = 1319,
	eml22__UnitOfMeasure__ppm_x005bvol_x005d_x002fdegF = 1320,
	eml22__UnitOfMeasure__prd = 1321,
	eml22__UnitOfMeasure__pS = 1322,
	eml22__UnitOfMeasure__ps = 1323,
	eml22__UnitOfMeasure__psi = 1324,
	eml22__UnitOfMeasure__psi_x002ed_x002fbbl = 1325,
	eml22__UnitOfMeasure__psi_x002es = 1326,
	eml22__UnitOfMeasure__psi_x002fft = 1327,
	eml22__UnitOfMeasure__psi_x002fh = 1328,
	eml22__UnitOfMeasure__psi_x002fm = 1329,
	eml22__UnitOfMeasure__psi_x002fmin = 1330,
	eml22__UnitOfMeasure__psi2 = 1331,
	eml22__UnitOfMeasure__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1332,
	eml22__UnitOfMeasure__psi2_x002fcP = 1333,
	eml22__UnitOfMeasure__pT = 1334,
	eml22__UnitOfMeasure__pt_x005bUK_x005d = 1335,
	eml22__UnitOfMeasure__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 1336,
	eml22__UnitOfMeasure__pt_x005bUS_x005d = 1337,
	eml22__UnitOfMeasure__pV = 1338,
	eml22__UnitOfMeasure__pW = 1339,
	eml22__UnitOfMeasure__pWb = 1340,
	eml22__UnitOfMeasure__qt_x005bUK_x005d = 1341,
	eml22__UnitOfMeasure__qt_x005bUS_x005d = 1342,
	eml22__UnitOfMeasure__quad = 1343,
	eml22__UnitOfMeasure__quad_x002fa = 1344,
	eml22__UnitOfMeasure__rad = 1345,
	eml22__UnitOfMeasure__rad_x002fft = 1346,
	eml22__UnitOfMeasure__rad_x002fft3 = 1347,
	eml22__UnitOfMeasure__rad_x002fm = 1348,
	eml22__UnitOfMeasure__rad_x002fm3 = 1349,
	eml22__UnitOfMeasure__rad_x002fs = 1350,
	eml22__UnitOfMeasure__rad_x002fs2 = 1351,
	eml22__UnitOfMeasure__rd = 1352,
	eml22__UnitOfMeasure__rem = 1353,
	eml22__UnitOfMeasure__rem_x002fh = 1354,
	eml22__UnitOfMeasure__rev = 1355,
	eml22__UnitOfMeasure__rev_x002fft = 1356,
	eml22__UnitOfMeasure__rev_x002fm = 1357,
	eml22__UnitOfMeasure__rev_x002fs = 1358,
	eml22__UnitOfMeasure__rod_x005bUS_x005d = 1359,
	eml22__UnitOfMeasure__rpm = 1360,
	eml22__UnitOfMeasure__rpm_x002fs = 1361,
	eml22__UnitOfMeasure__s_x002fcm = 1362,
	eml22__UnitOfMeasure__s_x002fft = 1363,
	eml22__UnitOfMeasure__s_x002fft3 = 1364,
	eml22__UnitOfMeasure__s_x002fin = 1365,
	eml22__UnitOfMeasure__s_x002fkg = 1366,
	eml22__UnitOfMeasure__s_x002fL = 1367,
	eml22__UnitOfMeasure__s_x002fm = 1368,
	eml22__UnitOfMeasure__S_x002fm = 1369,
	eml22__UnitOfMeasure__s_x002fm3 = 1370,
	eml22__UnitOfMeasure__s_x002fqt_x005bUK_x005d = 1371,
	eml22__UnitOfMeasure__s_x002fqt_x005bUS_x005d = 1372,
	eml22__UnitOfMeasure__s_x002fs = 1373,
	eml22__UnitOfMeasure__sack_x005b94lbm_x005d = 1374,
	eml22__UnitOfMeasure__seca = 1375,
	eml22__UnitOfMeasure__section = 1376,
	eml22__UnitOfMeasure__sr = 1377,
	eml22__UnitOfMeasure__St = 1378,
	eml22__UnitOfMeasure__Sv = 1379,
	eml22__UnitOfMeasure__Sv_x002fh = 1380,
	eml22__UnitOfMeasure__Sv_x002fs = 1381,
	eml22__UnitOfMeasure__t_x002fa = 1382,
	eml22__UnitOfMeasure__t_x002fd = 1383,
	eml22__UnitOfMeasure__t_x002fh = 1384,
	eml22__UnitOfMeasure__T_x002fm = 1385,
	eml22__UnitOfMeasure__t_x002fm3 = 1386,
	eml22__UnitOfMeasure__t_x002fmin = 1387,
	eml22__UnitOfMeasure__TA = 1388,
	eml22__UnitOfMeasure__Ta_x005bt_x005d = 1389,
	eml22__UnitOfMeasure__TBq = 1390,
	eml22__UnitOfMeasure__TC = 1391,
	eml22__UnitOfMeasure__Tcal_x005bth_x005d = 1392,
	eml22__UnitOfMeasure__TD_x005bAPI_x005d = 1393,
	eml22__UnitOfMeasure__TD_x005bAPI_x005d_x002em = 1394,
	eml22__UnitOfMeasure__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 1395,
	eml22__UnitOfMeasure__TEuc = 1396,
	eml22__UnitOfMeasure__TeV = 1397,
	eml22__UnitOfMeasure__TF = 1398,
	eml22__UnitOfMeasure__Tg = 1399,
	eml22__UnitOfMeasure__Tgauss = 1400,
	eml22__UnitOfMeasure__TGy = 1401,
	eml22__UnitOfMeasure__TH = 1402,
	eml22__UnitOfMeasure__therm_x005bEC_x005d = 1403,
	eml22__UnitOfMeasure__therm_x005bUK_x005d = 1404,
	eml22__UnitOfMeasure__therm_x005bUS_x005d = 1405,
	eml22__UnitOfMeasure__THz = 1406,
	eml22__UnitOfMeasure__TJ = 1407,
	eml22__UnitOfMeasure__TJ_x002fa = 1408,
	eml22__UnitOfMeasure__Tm = 1409,
	eml22__UnitOfMeasure__TN = 1410,
	eml22__UnitOfMeasure__Tohm = 1411,
	eml22__UnitOfMeasure__ton_x005bUK_x005d = 1412,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fa = 1413,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fd = 1414,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fh = 1415,
	eml22__UnitOfMeasure__ton_x005bUK_x005d_x002fmin = 1416,
	eml22__UnitOfMeasure__ton_x005bUS_x005d = 1417,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fa = 1418,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fd = 1419,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fft2 = 1420,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fh = 1421,
	eml22__UnitOfMeasure__ton_x005bUS_x005d_x002fmin = 1422,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d = 1423,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d_x002eft2 = 1424,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d_x002fft = 1425,
	eml22__UnitOfMeasure__tonf_x005bUK_x005d_x002fft2 = 1426,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d = 1427,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002eft = 1428,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002eft2 = 1429,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002emi = 1430,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fbbl = 1431,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002emi_x002fft = 1432,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002fft = 1433,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002fft2 = 1434,
	eml22__UnitOfMeasure__tonf_x005bUS_x005d_x002fin2 = 1435,
	eml22__UnitOfMeasure__tonRefrig = 1436,
	eml22__UnitOfMeasure__torr = 1437,
	eml22__UnitOfMeasure__TP = 1438,
	eml22__UnitOfMeasure__TPa = 1439,
	eml22__UnitOfMeasure__Trd = 1440,
	eml22__UnitOfMeasure__TS = 1441,
	eml22__UnitOfMeasure__TT = 1442,
	eml22__UnitOfMeasure__TV = 1443,
	eml22__UnitOfMeasure__TW = 1444,
	eml22__UnitOfMeasure__TW_x002eh = 1445,
	eml22__UnitOfMeasure__TWb = 1446,
	eml22__UnitOfMeasure__uA = 1447,
	eml22__UnitOfMeasure__uA_x002fcm2 = 1448,
	eml22__UnitOfMeasure__uA_x002fin2 = 1449,
	eml22__UnitOfMeasure__ubar = 1450,
	eml22__UnitOfMeasure__uC = 1451,
	eml22__UnitOfMeasure__ucal_x005bth_x005d = 1452,
	eml22__UnitOfMeasure__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 1453,
	eml22__UnitOfMeasure__ucal_x005bth_x005d_x002fs = 1454,
	eml22__UnitOfMeasure__uCi = 1455,
	eml22__UnitOfMeasure__uEuc = 1456,
	eml22__UnitOfMeasure__ueV = 1457,
	eml22__UnitOfMeasure__uF = 1458,
	eml22__UnitOfMeasure__uF_x002fm = 1459,
	eml22__UnitOfMeasure__ug = 1460,
	eml22__UnitOfMeasure__ug_x002fcm3 = 1461,
	eml22__UnitOfMeasure__ug_x002fg = 1462,
	eml22__UnitOfMeasure__ug_x002fmg = 1463,
	eml22__UnitOfMeasure__ugauss = 1464,
	eml22__UnitOfMeasure__uGy = 1465,
	eml22__UnitOfMeasure__uH = 1466,
	eml22__UnitOfMeasure__uH_x002fm = 1467,
	eml22__UnitOfMeasure__uHz = 1468,
	eml22__UnitOfMeasure__uJ = 1469,
	eml22__UnitOfMeasure__um = 1470,
	eml22__UnitOfMeasure__um_x002fs = 1471,
	eml22__UnitOfMeasure__um2 = 1472,
	eml22__UnitOfMeasure__um2_x002em = 1473,
	eml22__UnitOfMeasure__umHg_x005b0degC_x005d = 1474,
	eml22__UnitOfMeasure__umol = 1475,
	eml22__UnitOfMeasure__uN = 1476,
	eml22__UnitOfMeasure__uohm = 1477,
	eml22__UnitOfMeasure__uohm_x002fft = 1478,
	eml22__UnitOfMeasure__uohm_x002fm = 1479,
	eml22__UnitOfMeasure__uP = 1480,
	eml22__UnitOfMeasure__uPa = 1481,
	eml22__UnitOfMeasure__upsi = 1482,
	eml22__UnitOfMeasure__urad = 1483,
	eml22__UnitOfMeasure__urd = 1484,
	eml22__UnitOfMeasure__us = 1485,
	eml22__UnitOfMeasure__uS = 1486,
	eml22__UnitOfMeasure__us_x002fft = 1487,
	eml22__UnitOfMeasure__us_x002fin = 1488,
	eml22__UnitOfMeasure__us_x002fm = 1489,
	eml22__UnitOfMeasure__uT = 1490,
	eml22__UnitOfMeasure__uV = 1491,
	eml22__UnitOfMeasure__uV_x002fft = 1492,
	eml22__UnitOfMeasure__uV_x002fm = 1493,
	eml22__UnitOfMeasure__uW = 1494,
	eml22__UnitOfMeasure__uW_x002fm3 = 1495,
	eml22__UnitOfMeasure__uWb = 1496,
	eml22__UnitOfMeasure__V_x002fB = 1497,
	eml22__UnitOfMeasure__V_x002fdB = 1498,
	eml22__UnitOfMeasure__V_x002fm = 1499,
	eml22__UnitOfMeasure__W_x002em2_x002eK_x002f_x0028J_x002eK_x0029 = 1500,
	eml22__UnitOfMeasure__W_x002f_x0028m_x002eK_x0029 = 1501,
	eml22__UnitOfMeasure__W_x002f_x0028m2_x002eK_x0029 = 1502,
	eml22__UnitOfMeasure__W_x002f_x0028m2_x002esr_x0029 = 1503,
	eml22__UnitOfMeasure__W_x002f_x0028m3_x002eK_x0029 = 1504,
	eml22__UnitOfMeasure__W_x002fcm2 = 1505,
	eml22__UnitOfMeasure__W_x002fK = 1506,
	eml22__UnitOfMeasure__W_x002fkW = 1507,
	eml22__UnitOfMeasure__W_x002fm2 = 1508,
	eml22__UnitOfMeasure__W_x002fm3 = 1509,
	eml22__UnitOfMeasure__W_x002fmm2 = 1510,
	eml22__UnitOfMeasure__W_x002fsr = 1511,
	eml22__UnitOfMeasure__W_x002fW = 1512,
	eml22__UnitOfMeasure__Wb = 1513,
	eml22__UnitOfMeasure__Wb_x002em = 1514,
	eml22__UnitOfMeasure__Wb_x002fm = 1515,
	eml22__UnitOfMeasure__Wb_x002fmm = 1516,
	eml22__UnitOfMeasure__wk = 1517,
	eml22__UnitOfMeasure__yd = 1518,
	eml22__UnitOfMeasure__yd_x005bBnA_x005d = 1519,
	eml22__UnitOfMeasure__yd_x005bBnB_x005d = 1520,
	eml22__UnitOfMeasure__yd_x005bCla_x005d = 1521,
	eml22__UnitOfMeasure__yd_x005bInd_x005d = 1522,
	eml22__UnitOfMeasure__yd_x005bInd37_x005d = 1523,
	eml22__UnitOfMeasure__yd_x005bInd62_x005d = 1524,
	eml22__UnitOfMeasure__yd_x005bInd75_x005d = 1525,
	eml22__UnitOfMeasure__yd_x005bSe_x005d = 1526,
	eml22__UnitOfMeasure__yd_x005bSeT_x005d = 1527,
	eml22__UnitOfMeasure__yd_x005bUS_x005d = 1528,
	eml22__UnitOfMeasure__yd2 = 1529,
	eml22__UnitOfMeasure__yd3 = 1530
};
#endif

/* eml2_2ForGsoap.h:4383 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom (-1022)

/* eml22:LegacyMassPerVolumeUom */
enum eml22__LegacyMassPerVolumeUom {
	eml22__LegacyMassPerVolumeUom__kg_x002fscm = 0,
	eml22__LegacyMassPerVolumeUom__lbm_x002f1000scf = 1,
	eml22__LegacyMassPerVolumeUom__lbm_x002f1E6scf = 2
};
#endif

/* eml2_2ForGsoap.h:4393 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom (-1023)

/* eml22:LegacyPressurePerVolumeUom */
enum eml22__LegacyPressurePerVolumeUom {
	eml22__LegacyPressurePerVolumeUom__Pa_x002fscm = 0,
	eml22__LegacyPressurePerVolumeUom__psi_x002f1000scf = 1,
	eml22__LegacyPressurePerVolumeUom__psi_x002f1E6scf = 2
};
#endif

/* eml2_2ForGsoap.h:4403 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom (-1024)

/* eml22:LegacyPressureUom */
enum eml22__LegacyPressureUom {
	eml22__LegacyPressureUom__psia = 0,
	eml22__LegacyPressureUom__psig = 1
};
#endif

/* eml2_2ForGsoap.h:4412 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom (-1025)

/* eml22:LegacyVolumePerAreaUom */
enum eml22__LegacyVolumePerAreaUom {
	eml22__LegacyVolumePerAreaUom__1E6stb_x002facre = 0,
	eml22__LegacyVolumePerAreaUom__scf_x002fft2 = 1,
	eml22__LegacyVolumePerAreaUom__scm_x002fm2 = 2,
	eml22__LegacyVolumePerAreaUom__stb_x002facre = 3
};
#endif

/* eml2_2ForGsoap.h:4423 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom (-1026)

/* eml22:LegacyVolumePerTimeUom */
enum eml22__LegacyVolumePerTimeUom {
	eml22__LegacyVolumePerTimeUom__1000scf_x002fd = 0,
	eml22__LegacyVolumePerTimeUom__1000scf_x002fmo = 1,
	eml22__LegacyVolumePerTimeUom__1000scm_x002fd = 2,
	eml22__LegacyVolumePerTimeUom__1000scm_x002fmo = 3,
	eml22__LegacyVolumePerTimeUom__1000stb_x002fd = 4,
	eml22__LegacyVolumePerTimeUom__1000stb_x002fmo = 5,
	eml22__LegacyVolumePerTimeUom__1E6scf_x002fd = 6,
	eml22__LegacyVolumePerTimeUom__1E6scf_x002fmo = 7,
	eml22__LegacyVolumePerTimeUom__1E6scm_x002fd = 8,
	eml22__LegacyVolumePerTimeUom__1E6scm_x002fmo = 9,
	eml22__LegacyVolumePerTimeUom__1E6stb_x002fd = 10,
	eml22__LegacyVolumePerTimeUom__1E6stb_x002fmo = 11,
	eml22__LegacyVolumePerTimeUom__scf_x002fd = 12,
	eml22__LegacyVolumePerTimeUom__scm_x002fd = 13,
	eml22__LegacyVolumePerTimeUom__scm_x002fh = 14,
	eml22__LegacyVolumePerTimeUom__scm_x002fmo = 15,
	eml22__LegacyVolumePerTimeUom__scm_x002fs = 16,
	eml22__LegacyVolumePerTimeUom__stb_x002fd = 17,
	eml22__LegacyVolumePerTimeUom__stb_x002fmo = 18
};
#endif

/* eml2_2ForGsoap.h:4449 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom (-1027)

/* eml22:LegacyVolumePerVolumeUom */
enum eml22__LegacyVolumePerVolumeUom {
	eml22__LegacyVolumePerVolumeUom__1000scf_x002fstb = 0,
	eml22__LegacyVolumePerVolumeUom__1E6scf_x002fstb = 1,
	eml22__LegacyVolumePerVolumeUom__1E6stb_x002facre_x002eft = 2,
	eml22__LegacyVolumePerVolumeUom__acre_x002eft_x002f1E6stb = 3,
	eml22__LegacyVolumePerVolumeUom__bbl_x002f1000scf = 4,
	eml22__LegacyVolumePerVolumeUom__bbl_x002f1E6scf = 5,
	eml22__LegacyVolumePerVolumeUom__bbl_x002fscf = 6,
	eml22__LegacyVolumePerVolumeUom__bbl_x002fstb = 7,
	eml22__LegacyVolumePerVolumeUom__ft3_x002fscf = 8,
	eml22__LegacyVolumePerVolumeUom__ft3_x002fstb = 9,
	eml22__LegacyVolumePerVolumeUom__galUS_x002f1000scf = 10,
	eml22__LegacyVolumePerVolumeUom__m3_x002fscm = 11,
	eml22__LegacyVolumePerVolumeUom__ml_x002fscm = 12,
	eml22__LegacyVolumePerVolumeUom__scf_x002fbbl = 13,
	eml22__LegacyVolumePerVolumeUom__scf_x002fft3 = 14,
	eml22__LegacyVolumePerVolumeUom__scf_x002fscf = 15,
	eml22__LegacyVolumePerVolumeUom__scf_x002fstb = 16,
	eml22__LegacyVolumePerVolumeUom__scm_x002fm3 = 17,
	eml22__LegacyVolumePerVolumeUom__scm_x002fscm = 18,
	eml22__LegacyVolumePerVolumeUom__scm_x002fstb = 19,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1000scf = 20,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1000scm = 21,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1E6scf = 22,
	eml22__LegacyVolumePerVolumeUom__stb_x002f1E6scm = 23,
	eml22__LegacyVolumePerVolumeUom__stb_x002fbbl = 24,
	eml22__LegacyVolumePerVolumeUom__stb_x002fscm = 25,
	eml22__LegacyVolumePerVolumeUom__stb_x002fstb = 26
};
#endif

/* eml2_2ForGsoap.h:4483 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom (-1028)

/* eml22:LegacyVolumeUom */
enum eml22__LegacyVolumeUom {
	eml22__LegacyVolumeUom__1000scm = 0,
	eml22__LegacyVolumeUom__1000stb = 1,
	eml22__LegacyVolumeUom__1E6scf = 2,
	eml22__LegacyVolumeUom__1E6scm = 3,
	eml22__LegacyVolumeUom__1E6stb = 4,
	eml22__LegacyVolumeUom__1E9scf = 5,
	eml22__LegacyVolumeUom__kscf = 6,
	eml22__LegacyVolumeUom__scf = 7,
	eml22__LegacyVolumeUom__scm = 8,
	eml22__LegacyVolumeUom__stb = 9
};
#endif

/* eml2_2ForGsoap.h:4500 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom (-1029)

/* eml22:AbsorbedDoseUom */
enum eml22__AbsorbedDoseUom {
	eml22__AbsorbedDoseUom__cGy = 0,
	eml22__AbsorbedDoseUom__crd = 1,
	eml22__AbsorbedDoseUom__dGy = 2,
	eml22__AbsorbedDoseUom__drd = 3,
	eml22__AbsorbedDoseUom__EGy = 4,
	eml22__AbsorbedDoseUom__Erd = 5,
	eml22__AbsorbedDoseUom__fGy = 6,
	eml22__AbsorbedDoseUom__frd = 7,
	eml22__AbsorbedDoseUom__GGy = 8,
	eml22__AbsorbedDoseUom__Grd = 9,
	eml22__AbsorbedDoseUom__Gy = 10,
	eml22__AbsorbedDoseUom__kGy = 11,
	eml22__AbsorbedDoseUom__krd = 12,
	eml22__AbsorbedDoseUom__mGy = 13,
	eml22__AbsorbedDoseUom__MGy = 14,
	eml22__AbsorbedDoseUom__Mrd = 15,
	eml22__AbsorbedDoseUom__mrd = 16,
	eml22__AbsorbedDoseUom__nGy = 17,
	eml22__AbsorbedDoseUom__nrd = 18,
	eml22__AbsorbedDoseUom__pGy = 19,
	eml22__AbsorbedDoseUom__prd = 20,
	eml22__AbsorbedDoseUom__rd = 21,
	eml22__AbsorbedDoseUom__TGy = 22,
	eml22__AbsorbedDoseUom__Trd = 23,
	eml22__AbsorbedDoseUom__uGy = 24,
	eml22__AbsorbedDoseUom__urd = 25
};
#endif

/* eml2_2ForGsoap.h:4637 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom (-1030)

/* eml22:ActivityOfRadioactivityUom */
enum eml22__ActivityOfRadioactivityUom {
	eml22__ActivityOfRadioactivityUom__Bq = 0,
	eml22__ActivityOfRadioactivityUom__Ci = 1,
	eml22__ActivityOfRadioactivityUom__GBq = 2,
	eml22__ActivityOfRadioactivityUom__MBq = 3,
	eml22__ActivityOfRadioactivityUom__mCi = 4,
	eml22__ActivityOfRadioactivityUom__nCi = 5,
	eml22__ActivityOfRadioactivityUom__pCi = 6,
	eml22__ActivityOfRadioactivityUom__TBq = 7,
	eml22__ActivityOfRadioactivityUom__uCi = 8
};
#endif

/* eml2_2ForGsoap.h:4689 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom (-1031)

/* eml22:AmountOfSubstancePerAmountOfSubstanceUom */
enum eml22__AmountOfSubstancePerAmountOfSubstanceUom {
	eml22__AmountOfSubstancePerAmountOfSubstanceUom___x0025 = 0,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom___x0025_x005bmolar_x005d = 1,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__Euc = 2,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__mol_x002fmol = 3,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__nEuc = 4,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__ppk = 5,
	eml22__AmountOfSubstancePerAmountOfSubstanceUom__ppm = 6
};
#endif

/* eml2_2ForGsoap.h:4731 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom (-1032)

/* eml22:AmountOfSubstancePerAreaUom */
enum eml22__AmountOfSubstancePerAreaUom {
	eml22__AmountOfSubstancePerAreaUom__mol_x002fm2 = 0
};
#endif

/* eml2_2ForGsoap.h:4743 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom (-1033)

/* eml22:AmountOfSubstancePerTimePerAreaUom */
enum eml22__AmountOfSubstancePerTimePerAreaUom {
	eml22__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028h_x002eft2_x0029 = 0,
	eml22__AmountOfSubstancePerTimePerAreaUom__lbmol_x002f_x0028s_x002eft2_x0029 = 1,
	eml22__AmountOfSubstancePerTimePerAreaUom__mol_x002f_x0028s_x002em2_x0029 = 2
};
#endif

/* eml2_2ForGsoap.h:4765 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom (-1034)

/* eml22:AmountOfSubstancePerTimeUom */
enum eml22__AmountOfSubstancePerTimeUom {
	eml22__AmountOfSubstancePerTimeUom__kat = 0,
	eml22__AmountOfSubstancePerTimeUom__kmol_x002fh = 1,
	eml22__AmountOfSubstancePerTimeUom__kmol_x002fs = 2,
	eml22__AmountOfSubstancePerTimeUom__lbmol_x002fh = 3,
	eml22__AmountOfSubstancePerTimeUom__lbmol_x002fs = 4,
	eml22__AmountOfSubstancePerTimeUom__mol_x002fs = 5
};
#endif

/* eml2_2ForGsoap.h:4802 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom (-1035)

/* eml22:AmountOfSubstancePerVolumeUom */
enum eml22__AmountOfSubstancePerVolumeUom {
	eml22__AmountOfSubstancePerVolumeUom__kmol_x002fm3 = 0,
	eml22__AmountOfSubstancePerVolumeUom__lbmol_x002fft3 = 1,
	eml22__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUK_x005d = 2,
	eml22__AmountOfSubstancePerVolumeUom__lbmol_x002fgal_x005bUS_x005d = 3,
	eml22__AmountOfSubstancePerVolumeUom__mol_x002fm3 = 4
};
#endif

/* eml2_2ForGsoap.h:4834 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom (-1036)

/* eml22:AmountOfSubstanceUom */
enum eml22__AmountOfSubstanceUom {
	eml22__AmountOfSubstanceUom__kmol = 0,
	eml22__AmountOfSubstanceUom__lbmol = 1,
	eml22__AmountOfSubstanceUom__mmol = 2,
	eml22__AmountOfSubstanceUom__mol = 3,
	eml22__AmountOfSubstanceUom__umol = 4
};
#endif

/* eml2_2ForGsoap.h:4866 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom (-1037)

/* eml22:AnglePerLengthUom */
enum eml22__AnglePerLengthUom {
	eml22__AnglePerLengthUom__0_x002e01_x0020dega_x002fft = 0,
	eml22__AnglePerLengthUom__1_x002f30_x0020dega_x002fft = 1,
	eml22__AnglePerLengthUom__1_x002f30_x0020dega_x002fm = 2,
	eml22__AnglePerLengthUom__dega_x002fft = 3,
	eml22__AnglePerLengthUom__dega_x002fm = 4,
	eml22__AnglePerLengthUom__rad_x002fft = 5,
	eml22__AnglePerLengthUom__rad_x002fm = 6,
	eml22__AnglePerLengthUom__rev_x002fft = 7,
	eml22__AnglePerLengthUom__rev_x002fm = 8
};
#endif

/* eml2_2ForGsoap.h:4918 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom (-1038)

/* eml22:AnglePerVolumeUom */
enum eml22__AnglePerVolumeUom {
	eml22__AnglePerVolumeUom__rad_x002fft3 = 0,
	eml22__AnglePerVolumeUom__rad_x002fm3 = 1
};
#endif

/* eml2_2ForGsoap.h:4935 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom (-1039)

/* eml22:AngularAccelerationUom */
enum eml22__AngularAccelerationUom {
	eml22__AngularAccelerationUom__rad_x002fs2 = 0,
	eml22__AngularAccelerationUom__rpm_x002fs = 1
};
#endif

/* eml2_2ForGsoap.h:4952 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom (-1040)

/* eml22:AngularVelocityUom */
enum eml22__AngularVelocityUom {
	eml22__AngularVelocityUom__dega_x002fh = 0,
	eml22__AngularVelocityUom__dega_x002fmin = 1,
	eml22__AngularVelocityUom__dega_x002fs = 2,
	eml22__AngularVelocityUom__rad_x002fs = 3,
	eml22__AngularVelocityUom__rev_x002fs = 4,
	eml22__AngularVelocityUom__rpm = 5
};
#endif

/* eml2_2ForGsoap.h:4989 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom (-1041)

/* eml22:APIGammaRayUom */
enum eml22__APIGammaRayUom {
	eml22__APIGammaRayUom__gAPI = 0
};
#endif

/* eml2_2ForGsoap.h:5001 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom (-1042)

/* eml22:APIGravityUom */
enum eml22__APIGravityUom {
	eml22__APIGravityUom__dAPI = 0
};
#endif

/* eml2_2ForGsoap.h:5013 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom (-1043)

/* eml22:APINeutronUom */
enum eml22__APINeutronUom {
	eml22__APINeutronUom__nAPI = 0
};
#endif

/* eml2_2ForGsoap.h:5025 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom (-1044)

/* eml22:AreaPerAmountOfSubstanceUom */
enum eml22__AreaPerAmountOfSubstanceUom {
	eml22__AreaPerAmountOfSubstanceUom__m2_x002fmol = 0
};
#endif

/* eml2_2ForGsoap.h:5037 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom (-1045)

/* eml22:AreaPerAreaUom */
enum eml22__AreaPerAreaUom {
	eml22__AreaPerAreaUom___x0025 = 0,
	eml22__AreaPerAreaUom___x0025_x005barea_x005d = 1,
	eml22__AreaPerAreaUom__cEuc = 2,
	eml22__AreaPerAreaUom__Euc = 3,
	eml22__AreaPerAreaUom__in2_x002fft2 = 4,
	eml22__AreaPerAreaUom__in2_x002fin2 = 5,
	eml22__AreaPerAreaUom__m2_x002fm2 = 6,
	eml22__AreaPerAreaUom__mm2_x002fmm2 = 7
};
#endif

/* eml2_2ForGsoap.h:5084 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom (-1046)

/* eml22:AreaPerCountUom */
enum eml22__AreaPerCountUom {
	eml22__AreaPerCountUom__b_x002felectron = 0
};
#endif

/* eml2_2ForGsoap.h:5092 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom (-1047)

/* eml22:AreaPerMassUom */
enum eml22__AreaPerMassUom {
	eml22__AreaPerMassUom__cm2_x002fg = 0,
	eml22__AreaPerMassUom__ft2_x002flbm = 1,
	eml22__AreaPerMassUom__m2_x002fg = 2,
	eml22__AreaPerMassUom__m2_x002fkg = 3
};
#endif

/* eml2_2ForGsoap.h:5119 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom (-1048)

/* eml22:AreaPerTimeUom */
enum eml22__AreaPerTimeUom {
	eml22__AreaPerTimeUom__cm2_x002fs = 0,
	eml22__AreaPerTimeUom__ft2_x002fh = 1,
	eml22__AreaPerTimeUom__ft2_x002fs = 2,
	eml22__AreaPerTimeUom__in2_x002fs = 3,
	eml22__AreaPerTimeUom__m2_x002fd = 4,
	eml22__AreaPerTimeUom__m2_x002fh = 5,
	eml22__AreaPerTimeUom__m2_x002fs = 6,
	eml22__AreaPerTimeUom__mm2_x002fs = 7
};
#endif

/* eml2_2ForGsoap.h:5166 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom (-1049)

/* eml22:AreaPerVolumeUom */
enum eml22__AreaPerVolumeUom {
	eml22__AreaPerVolumeUom__1_x002fm = 0,
	eml22__AreaPerVolumeUom__b_x002fcm3 = 1,
	eml22__AreaPerVolumeUom__cu = 2,
	eml22__AreaPerVolumeUom__ft2_x002fin3 = 3,
	eml22__AreaPerVolumeUom__m2_x002fcm3 = 4,
	eml22__AreaPerVolumeUom__m2_x002fm3 = 5
};
#endif

/* eml2_2ForGsoap.h:5203 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom (-1050)

/* eml22:AreaUom */
enum eml22__AreaUom {
	eml22__AreaUom__b = 'b',
	eml22__AreaUom__acre = 'c',
	eml22__AreaUom__cm2 = 'd',
	eml22__AreaUom__ft2 = 'e',
	eml22__AreaUom__ha = 'f',
	eml22__AreaUom__in2 = 'g',
	eml22__AreaUom__km2 = 'h',
	eml22__AreaUom__m2 = 'i',
	eml22__AreaUom__mi_x005bUS_x005d2 = 'j',
	eml22__AreaUom__mi2 = 'k',
	eml22__AreaUom__mm2 = 'l',
	eml22__AreaUom__section = 'm',
	eml22__AreaUom__um2 = 'n',
	eml22__AreaUom__yd2 = 'o'
};
#endif

/* eml2_2ForGsoap.h:5280 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom (-1051)

/* eml22:AttenuationPerFrequencyIntervalUom */
enum eml22__AttenuationPerFrequencyIntervalUom {
	eml22__AttenuationPerFrequencyIntervalUom__B_x002fO = 0,
	eml22__AttenuationPerFrequencyIntervalUom__dB_x002fO = 1
};
#endif

/* eml2_2ForGsoap.h:5297 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom (-1052)

/* eml22:CapacitanceUom */
enum eml22__CapacitanceUom {
	eml22__CapacitanceUom__F = 'F',
	eml22__CapacitanceUom__cF = 'G',
	eml22__CapacitanceUom__dF = 'H',
	eml22__CapacitanceUom__EF = 'I',
	eml22__CapacitanceUom__fF = 'J',
	eml22__CapacitanceUom__GF = 'K',
	eml22__CapacitanceUom__kF = 'L',
	eml22__CapacitanceUom__mF = 'M',
	eml22__CapacitanceUom__MF = 'N',
	eml22__CapacitanceUom__nF = 'O',
	eml22__CapacitanceUom__pF = 'P',
	eml22__CapacitanceUom__TF = 'Q',
	eml22__CapacitanceUom__uF = 'R'
};
#endif

/* eml2_2ForGsoap.h:5369 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom (-1053)

/* eml22:CationExchangeCapacityUom */
enum eml22__CationExchangeCapacityUom {
	eml22__CationExchangeCapacityUom___x002e01_x0020meq_x002fg = 0
};
#endif

/* eml2_2ForGsoap.h:5377 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom (-1054)

/* eml22:DataTransferSpeedUom */
enum eml22__DataTransferSpeedUom {
	eml22__DataTransferSpeedUom__bit_x002fs = 0,
	eml22__DataTransferSpeedUom__byte_x002fs = 1
};
#endif

/* eml2_2ForGsoap.h:5394 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom (-1055)

/* eml22:DiffusionCoefficientUom */
enum eml22__DiffusionCoefficientUom {
	eml22__DiffusionCoefficientUom__m2_x002fs = 0
};
#endif

/* eml2_2ForGsoap.h:5406 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom (-1056)

/* eml22:DiffusiveTimeOfFlightUom */
enum eml22__DiffusiveTimeOfFlightUom {
	eml22__DiffusiveTimeOfFlightUom__h_x00280_x002e5_x0029 = 0,
	eml22__DiffusiveTimeOfFlightUom__s_x00280_x002e5_x0029 = 1
};
#endif

/* eml2_2ForGsoap.h:5419 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom (-1057)

/* eml22:DigitalStorageUom */
enum eml22__DigitalStorageUom {
	eml22__DigitalStorageUom__bit = 0,
	eml22__DigitalStorageUom__byte = 1,
	eml22__DigitalStorageUom__Kibyte = 2,
	eml22__DigitalStorageUom__Mibyte = 3
};
#endif

/* eml2_2ForGsoap.h:5446 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom (-1058)

/* eml22:DimensionlessUom */
enum eml22__DimensionlessUom {
	eml22__DimensionlessUom___x0025 = 0,
	eml22__DimensionlessUom__cEuc = 1,
	eml22__DimensionlessUom__dEuc = 2,
	eml22__DimensionlessUom__EEuc = 3,
	eml22__DimensionlessUom__Euc = 4,
	eml22__DimensionlessUom__fEuc = 5,
	eml22__DimensionlessUom__GEuc = 6,
	eml22__DimensionlessUom__kEuc = 7,
	eml22__DimensionlessUom__MEuc = 8,
	eml22__DimensionlessUom__mEuc = 9,
	eml22__DimensionlessUom__nEuc = 10,
	eml22__DimensionlessUom__pEuc = 11,
	eml22__DimensionlessUom__ppk = 12,
	eml22__DimensionlessUom__ppm = 13,
	eml22__DimensionlessUom__TEuc = 14,
	eml22__DimensionlessUom__uEuc = 15
};
#endif

/* eml2_2ForGsoap.h:5533 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom (-1059)

/* eml22:DipoleMomentUom */
enum eml22__DipoleMomentUom {
	eml22__DipoleMomentUom__C_x002em = 0
};
#endif

/* eml2_2ForGsoap.h:5545 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom (-1060)

/* eml22:DoseEquivalentUom */
enum eml22__DoseEquivalentUom {
	eml22__DoseEquivalentUom__mrem = 0,
	eml22__DoseEquivalentUom__mSv = 1,
	eml22__DoseEquivalentUom__rem = 2,
	eml22__DoseEquivalentUom__Sv = 3
};
#endif

/* eml2_2ForGsoap.h:5572 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom (-1061)

/* eml22:DynamicViscosityUom */
enum eml22__DynamicViscosityUom {
	eml22__DynamicViscosityUom__P = 'P',
	eml22__DynamicViscosityUom__cP = 'Q',
	eml22__DynamicViscosityUom__dP = 'R',
	eml22__DynamicViscosityUom__dyne_x002es_x002fcm2 = 'S',
	eml22__DynamicViscosityUom__EP = 'T',
	eml22__DynamicViscosityUom__fP = 'U',
	eml22__DynamicViscosityUom__GP = 'V',
	eml22__DynamicViscosityUom__kgf_x002es_x002fm2 = 'W',
	eml22__DynamicViscosityUom__kP = 'X',
	eml22__DynamicViscosityUom__lbf_x002es_x002fft2 = 'Y',
	eml22__DynamicViscosityUom__lbf_x002es_x002fin2 = 'Z',
	eml22__DynamicViscosityUom__mP = 91,
	eml22__DynamicViscosityUom__MP = 92,
	eml22__DynamicViscosityUom__mPa_x002es = 93,
	eml22__DynamicViscosityUom__N_x002es_x002fm2 = 94,
	eml22__DynamicViscosityUom__nP = 95,
	eml22__DynamicViscosityUom__Pa_x002es = 96,
	eml22__DynamicViscosityUom__pP = 'a',
	eml22__DynamicViscosityUom__psi_x002es = 'b',
	eml22__DynamicViscosityUom__TP = 'c',
	eml22__DynamicViscosityUom__uP = 'd'
};
#endif

/* eml2_2ForGsoap.h:5684 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom (-1062)

/* eml22:ElectricalResistivityUom */
enum eml22__ElectricalResistivityUom {
	eml22__ElectricalResistivityUom__kohm_x002em = 0,
	eml22__ElectricalResistivityUom__nohm_x002emil2_x002fft = 1,
	eml22__ElectricalResistivityUom__nohm_x002emm2_x002fm = 2,
	eml22__ElectricalResistivityUom__ohm_x002ecm = 3,
	eml22__ElectricalResistivityUom__ohm_x002em = 4,
	eml22__ElectricalResistivityUom__ohm_x002em2_x002fm = 5
};
#endif

/* eml2_2ForGsoap.h:5721 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom (-1063)

/* eml22:ElectricChargePerAreaUom */
enum eml22__ElectricChargePerAreaUom {
	eml22__ElectricChargePerAreaUom__C_x002fcm2 = 0,
	eml22__ElectricChargePerAreaUom__C_x002fm2 = 1,
	eml22__ElectricChargePerAreaUom__C_x002fmm2 = 2,
	eml22__ElectricChargePerAreaUom__mC_x002fm2 = 3
};
#endif

/* eml2_2ForGsoap.h:5748 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom (-1064)

/* eml22:ElectricChargePerMassUom */
enum eml22__ElectricChargePerMassUom {
	eml22__ElectricChargePerMassUom__A_x002es_x002fkg = 0,
	eml22__ElectricChargePerMassUom__C_x002fg = 1,
	eml22__ElectricChargePerMassUom__C_x002fkg = 2
};
#endif

/* eml2_2ForGsoap.h:5770 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom (-1065)

/* eml22:ElectricChargePerVolumeUom */
enum eml22__ElectricChargePerVolumeUom {
	eml22__ElectricChargePerVolumeUom__A_x002es_x002fm3 = 0,
	eml22__ElectricChargePerVolumeUom__C_x002fcm3 = 1,
	eml22__ElectricChargePerVolumeUom__C_x002fm3 = 2,
	eml22__ElectricChargePerVolumeUom__C_x002fmm3 = 3
};
#endif

/* eml2_2ForGsoap.h:5797 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom (-1066)

/* eml22:ElectricChargeUom */
enum eml22__ElectricChargeUom {
	eml22__ElectricChargeUom__C = 'C',
	eml22__ElectricChargeUom__A_x002eh = 'D',
	eml22__ElectricChargeUom__A_x002es = 'E',
	eml22__ElectricChargeUom__cC = 'F',
	eml22__ElectricChargeUom__dC = 'G',
	eml22__ElectricChargeUom__EC = 'H',
	eml22__ElectricChargeUom__fC = 'I',
	eml22__ElectricChargeUom__GC = 'J',
	eml22__ElectricChargeUom__kC = 'K',
	eml22__ElectricChargeUom__MC = 'L',
	eml22__ElectricChargeUom__mC = 'M',
	eml22__ElectricChargeUom__nC = 'N',
	eml22__ElectricChargeUom__pC = 'O',
	eml22__ElectricChargeUom__TC = 'P',
	eml22__ElectricChargeUom__uC = 'Q'
};
#endif

/* eml2_2ForGsoap.h:5879 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom (-1067)

/* eml22:ElectricConductanceUom */
enum eml22__ElectricConductanceUom {
	eml22__ElectricConductanceUom__S = 'S',
	eml22__ElectricConductanceUom__cS = 'T',
	eml22__ElectricConductanceUom__dS = 'U',
	eml22__ElectricConductanceUom__ES = 'V',
	eml22__ElectricConductanceUom__fS = 'W',
	eml22__ElectricConductanceUom__GS = 'X',
	eml22__ElectricConductanceUom__kS = 'Y',
	eml22__ElectricConductanceUom__mS = 'Z',
	eml22__ElectricConductanceUom__MS = 91,
	eml22__ElectricConductanceUom__nS = 92,
	eml22__ElectricConductanceUom__pS = 93,
	eml22__ElectricConductanceUom__TS = 94,
	eml22__ElectricConductanceUom__uS = 95
};
#endif

/* eml2_2ForGsoap.h:5951 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom (-1068)

/* eml22:ElectricConductivityUom */
enum eml22__ElectricConductivityUom {
	eml22__ElectricConductivityUom__kS_x002fm = 0,
	eml22__ElectricConductivityUom__mS_x002fcm = 1,
	eml22__ElectricConductivityUom__mS_x002fm = 2,
	eml22__ElectricConductivityUom__S_x002fm = 3
};
#endif

/* eml2_2ForGsoap.h:5978 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom (-1069)

/* eml22:ElectricCurrentDensityUom */
enum eml22__ElectricCurrentDensityUom {
	eml22__ElectricCurrentDensityUom__A_x002fcm2 = 0,
	eml22__ElectricCurrentDensityUom__A_x002fft2 = 1,
	eml22__ElectricCurrentDensityUom__A_x002fm2 = 2,
	eml22__ElectricCurrentDensityUom__A_x002fmm2 = 3,
	eml22__ElectricCurrentDensityUom__mA_x002fcm2 = 4,
	eml22__ElectricCurrentDensityUom__mA_x002fft2 = 5,
	eml22__ElectricCurrentDensityUom__uA_x002fcm2 = 6,
	eml22__ElectricCurrentDensityUom__uA_x002fin2 = 7
};
#endif

/* eml2_2ForGsoap.h:6025 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom (-1070)

/* eml22:ElectricCurrentUom */
enum eml22__ElectricCurrentUom {
	eml22__ElectricCurrentUom__A = 'A',
	eml22__ElectricCurrentUom__cA = 'B',
	eml22__ElectricCurrentUom__dA = 'C',
	eml22__ElectricCurrentUom__EA = 'D',
	eml22__ElectricCurrentUom__fA = 'E',
	eml22__ElectricCurrentUom__GA = 'F',
	eml22__ElectricCurrentUom__kA = 'G',
	eml22__ElectricCurrentUom__MA = 'H',
	eml22__ElectricCurrentUom__mA = 'I',
	eml22__ElectricCurrentUom__nA = 'J',
	eml22__ElectricCurrentUom__pA = 'K',
	eml22__ElectricCurrentUom__TA = 'L',
	eml22__ElectricCurrentUom__uA = 'M'
};
#endif

/* eml2_2ForGsoap.h:6097 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom (-1071)

/* eml22:ElectricFieldStrengthUom */
enum eml22__ElectricFieldStrengthUom {
	eml22__ElectricFieldStrengthUom__mV_x002fft = 0,
	eml22__ElectricFieldStrengthUom__mV_x002fm = 1,
	eml22__ElectricFieldStrengthUom__uV_x002fft = 2,
	eml22__ElectricFieldStrengthUom__uV_x002fm = 3,
	eml22__ElectricFieldStrengthUom__V_x002fm = 4
};
#endif

/* eml2_2ForGsoap.h:6129 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom (-1072)

/* eml22:ElectricPotentialDifferenceUom */
enum eml22__ElectricPotentialDifferenceUom {
	eml22__ElectricPotentialDifferenceUom__V = 'V',
	eml22__ElectricPotentialDifferenceUom__cV = 'W',
	eml22__ElectricPotentialDifferenceUom__dV = 'X',
	eml22__ElectricPotentialDifferenceUom__fV = 'Y',
	eml22__ElectricPotentialDifferenceUom__GV = 'Z',
	eml22__ElectricPotentialDifferenceUom__kV = 91,
	eml22__ElectricPotentialDifferenceUom__mV = 92,
	eml22__ElectricPotentialDifferenceUom__MV = 93,
	eml22__ElectricPotentialDifferenceUom__nV = 94,
	eml22__ElectricPotentialDifferenceUom__pV = 95,
	eml22__ElectricPotentialDifferenceUom__TV = 96,
	eml22__ElectricPotentialDifferenceUom__uV = 'a'
};
#endif

/* eml2_2ForGsoap.h:6196 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom (-1073)

/* eml22:ElectricResistancePerLengthUom */
enum eml22__ElectricResistancePerLengthUom {
	eml22__ElectricResistancePerLengthUom__ohm_x002fm = 0,
	eml22__ElectricResistancePerLengthUom__uohm_x002fft = 1,
	eml22__ElectricResistancePerLengthUom__uohm_x002fm = 2
};
#endif

/* eml2_2ForGsoap.h:6218 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom (-1074)

/* eml22:ElectricResistanceUom */
enum eml22__ElectricResistanceUom {
	eml22__ElectricResistanceUom__cohm = 0,
	eml22__ElectricResistanceUom__dohm = 1,
	eml22__ElectricResistanceUom__Eohm = 2,
	eml22__ElectricResistanceUom__fohm = 3,
	eml22__ElectricResistanceUom__Gohm = 4,
	eml22__ElectricResistanceUom__kohm = 5,
	eml22__ElectricResistanceUom__Mohm = 6,
	eml22__ElectricResistanceUom__mohm = 7,
	eml22__ElectricResistanceUom__nohm = 8,
	eml22__ElectricResistanceUom__ohm = 9,
	eml22__ElectricResistanceUom__pohm = 10,
	eml22__ElectricResistanceUom__Tohm = 11,
	eml22__ElectricResistanceUom__uohm = 12
};
#endif

/* eml2_2ForGsoap.h:6290 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom (-1075)

/* eml22:ElectromagneticMomentUom */
enum eml22__ElectromagneticMomentUom {
	eml22__ElectromagneticMomentUom__A_x002em2 = 0
};
#endif

/* eml2_2ForGsoap.h:6302 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom (-1076)

/* eml22:EnergyLengthPerAreaUom */
enum eml22__EnergyLengthPerAreaUom {
	eml22__EnergyLengthPerAreaUom__J_x002em_x002fm2 = 0,
	eml22__EnergyLengthPerAreaUom__kcal_x005bth_x005d_x002em_x002fcm2 = 1
};
#endif

/* eml2_2ForGsoap.h:6319 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom (-1077)

/* eml22:EnergyLengthPerTimeAreaTemperatureUom */
enum eml22__EnergyLengthPerTimeAreaTemperatureUom {
	eml22__EnergyLengthPerTimeAreaTemperatureUom__Btu_x005bIT_x005d_x002ein_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml22__EnergyLengthPerTimeAreaTemperatureUom__J_x002em_x002f_x0028s_x002em2_x002edeltaK_x0029 = 1,
	eml22__EnergyLengthPerTimeAreaTemperatureUom__kJ_x002em_x002f_x0028h_x002em2_x002edeltaK_x0029 = 2,
	eml22__EnergyLengthPerTimeAreaTemperatureUom__W_x002f_x0028m_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:6346 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom (-1078)

/* eml22:EnergyPerAreaUom */
enum eml22__EnergyPerAreaUom {
	eml22__EnergyPerAreaUom__erg_x002fcm2 = 0,
	eml22__EnergyPerAreaUom__J_x002fcm2 = 1,
	eml22__EnergyPerAreaUom__J_x002fm2 = 2,
	eml22__EnergyPerAreaUom__kgf_x002em_x002fcm2 = 3,
	eml22__EnergyPerAreaUom__lbf_x002eft_x002fin2 = 4,
	eml22__EnergyPerAreaUom__mJ_x002fcm2 = 5,
	eml22__EnergyPerAreaUom__mJ_x002fm2 = 6,
	eml22__EnergyPerAreaUom__N_x002fm = 7
};
#endif

/* eml2_2ForGsoap.h:6393 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom (-1079)

/* eml22:EnergyPerLengthUom */
enum eml22__EnergyPerLengthUom {
	eml22__EnergyPerLengthUom__J_x002fm = 0,
	eml22__EnergyPerLengthUom__MJ_x002fm = 1
};
#endif

/* eml2_2ForGsoap.h:6410 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom (-1080)

/* eml22:EnergyPerMassPerTimeUom */
enum eml22__EnergyPerMassPerTimeUom {
	eml22__EnergyPerMassPerTimeUom__mrem_x002fh = 0,
	eml22__EnergyPerMassPerTimeUom__mSv_x002fh = 1,
	eml22__EnergyPerMassPerTimeUom__rem_x002fh = 2,
	eml22__EnergyPerMassPerTimeUom__Sv_x002fh = 3,
	eml22__EnergyPerMassPerTimeUom__Sv_x002fs = 4
};
#endif

/* eml2_2ForGsoap.h:6442 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom (-1081)

/* eml22:EnergyPerMassUom */
enum eml22__EnergyPerMassUom {
	eml22__EnergyPerMassUom__Btu_x005bIT_x005d_x002flbm = 0,
	eml22__EnergyPerMassUom__cal_x005bth_x005d_x002fg = 1,
	eml22__EnergyPerMassUom__cal_x005bth_x005d_x002fkg = 2,
	eml22__EnergyPerMassUom__cal_x005bth_x005d_x002flbm = 3,
	eml22__EnergyPerMassUom__erg_x002fg = 4,
	eml22__EnergyPerMassUom__erg_x002fkg = 5,
	eml22__EnergyPerMassUom__hp_x002eh_x002flbm = 6,
	eml22__EnergyPerMassUom__J_x002fg = 7,
	eml22__EnergyPerMassUom__J_x002fkg = 8,
	eml22__EnergyPerMassUom__kcal_x005bth_x005d_x002fg = 9,
	eml22__EnergyPerMassUom__kcal_x005bth_x005d_x002fkg = 10,
	eml22__EnergyPerMassUom__kJ_x002fkg = 11,
	eml22__EnergyPerMassUom__kW_x002eh_x002fkg = 12,
	eml22__EnergyPerMassUom__lbf_x002eft_x002flbm = 13,
	eml22__EnergyPerMassUom__MJ_x002fkg = 14,
	eml22__EnergyPerMassUom__MW_x002eh_x002fkg = 15
};
#endif

/* eml2_2ForGsoap.h:6529 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom (-1082)

/* eml22:EnergyPerVolumeUom */
enum eml22__EnergyPerVolumeUom {
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fbbl = 0,
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fft3 = 1,
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUK_x005d = 2,
	eml22__EnergyPerVolumeUom__Btu_x005bIT_x005d_x002fgal_x005bUS_x005d = 3,
	eml22__EnergyPerVolumeUom__cal_x005bth_x005d_x002fcm3 = 4,
	eml22__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmL = 5,
	eml22__EnergyPerVolumeUom__cal_x005bth_x005d_x002fmm3 = 6,
	eml22__EnergyPerVolumeUom__erg_x002fcm3 = 7,
	eml22__EnergyPerVolumeUom__erg_x002fm3 = 8,
	eml22__EnergyPerVolumeUom__hp_x002eh_x002fbbl = 9,
	eml22__EnergyPerVolumeUom__J_x002fdm3 = 10,
	eml22__EnergyPerVolumeUom__J_x002fm3 = 11,
	eml22__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fcm3 = 12,
	eml22__EnergyPerVolumeUom__kcal_x005bth_x005d_x002fm3 = 13,
	eml22__EnergyPerVolumeUom__kJ_x002fdm3 = 14,
	eml22__EnergyPerVolumeUom__kJ_x002fm3 = 15,
	eml22__EnergyPerVolumeUom__kW_x002eh_x002fdm3 = 16,
	eml22__EnergyPerVolumeUom__kW_x002eh_x002fm3 = 17,
	eml22__EnergyPerVolumeUom__lbf_x002eft_x002fbbl = 18,
	eml22__EnergyPerVolumeUom__lbf_x002eft_x002fgal_x005bUS_x005d = 19,
	eml22__EnergyPerVolumeUom__MJ_x002fm3 = 20,
	eml22__EnergyPerVolumeUom__MW_x002eh_x002fm3 = 21,
	eml22__EnergyPerVolumeUom__tonf_x005bUS_x005d_x002emi_x002fbbl = 22
};
#endif

/* eml2_2ForGsoap.h:6651 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom (-1083)

/* eml22:EnergyUom */
enum eml22__EnergyUom {
	eml22__EnergyUom__J = 'J',
	eml22__EnergyUom__1E6_x0020Btu_x005bIT_x005d = 'K',
	eml22__EnergyUom__aJ = 'L',
	eml22__EnergyUom__Btu_x005bIT_x005d = 'M',
	eml22__EnergyUom__Btu_x005bth_x005d = 'N',
	eml22__EnergyUom__Btu_x005bUK_x005d = 'O',
	eml22__EnergyUom__cal_x005bIT_x005d = 'P',
	eml22__EnergyUom__cal_x005bth_x005d = 'Q',
	eml22__EnergyUom__ccal_x005bth_x005d = 'R',
	eml22__EnergyUom__ceV = 'S',
	eml22__EnergyUom__cJ = 'T',
	eml22__EnergyUom__dcal_x005bth_x005d = 'U',
	eml22__EnergyUom__deV = 'V',
	eml22__EnergyUom__dJ = 'W',
	eml22__EnergyUom__Ecal_x005bth_x005d = 'X',
	eml22__EnergyUom__EeV = 'Y',
	eml22__EnergyUom__EJ = 'Z',
	eml22__EnergyUom__erg = 91,
	eml22__EnergyUom__eV = 92,
	eml22__EnergyUom__fcal_x005bth_x005d = 93,
	eml22__EnergyUom__feV = 94,
	eml22__EnergyUom__fJ = 95,
	eml22__EnergyUom__Gcal_x005bth_x005d = 96,
	eml22__EnergyUom__GeV = 'a',
	eml22__EnergyUom__GJ = 'b',
	eml22__EnergyUom__GW_x002eh = 'c',
	eml22__EnergyUom__hp_x002eh = 'd',
	eml22__EnergyUom__hp_x005bmetric_x005d_x002eh = 'e',
	eml22__EnergyUom__kcal_x005bth_x005d = 'f',
	eml22__EnergyUom__keV = 'g',
	eml22__EnergyUom__kJ = 'h',
	eml22__EnergyUom__kW_x002eh = 'i',
	eml22__EnergyUom__mcal_x005bth_x005d = 'j',
	eml22__EnergyUom__Mcal_x005bth_x005d = 'k',
	eml22__EnergyUom__meV = 'l',
	eml22__EnergyUom__MeV = 'm',
	eml22__EnergyUom__MJ = 'n',
	eml22__EnergyUom__mJ = 'o',
	eml22__EnergyUom__MW_x002eh = 'p',
	eml22__EnergyUom__ncal_x005bth_x005d = 'q',
	eml22__EnergyUom__neV = 'r',
	eml22__EnergyUom__nJ = 's',
	eml22__EnergyUom__pcal_x005bth_x005d = 't',
	eml22__EnergyUom__peV = 'u',
	eml22__EnergyUom__pJ = 'v',
	eml22__EnergyUom__quad = 'w',
	eml22__EnergyUom__Tcal_x005bth_x005d = 'x',
	eml22__EnergyUom__TeV = 'y',
	eml22__EnergyUom__therm_x005bEC_x005d = 'z',
	eml22__EnergyUom__therm_x005bUK_x005d = 123,
	eml22__EnergyUom__therm_x005bUS_x005d = 124,
	eml22__EnergyUom__TJ = 125,
	eml22__EnergyUom__TW_x002eh = 126,
	eml22__EnergyUom__ucal_x005bth_x005d = 127,
	eml22__EnergyUom__ueV = 128,
	eml22__EnergyUom__uJ = 129
};
#endif

/* eml2_2ForGsoap.h:6938 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom (-1084)

/* eml22:ForceAreaUom */
enum eml22__ForceAreaUom {
	eml22__ForceAreaUom__dyne_x002ecm2 = 0,
	eml22__ForceAreaUom__kgf_x002em2 = 1,
	eml22__ForceAreaUom__kN_x002em2 = 2,
	eml22__ForceAreaUom__lbf_x002ein2 = 3,
	eml22__ForceAreaUom__mN_x002em2 = 4,
	eml22__ForceAreaUom__N_x002em2 = 5,
	eml22__ForceAreaUom__pdl_x002ecm2 = 6,
	eml22__ForceAreaUom__tonf_x005bUK_x005d_x002eft2 = 7,
	eml22__ForceAreaUom__tonf_x005bUS_x005d_x002eft2 = 8
};
#endif

/* eml2_2ForGsoap.h:6990 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom (-1085)

/* eml22:ForceLengthPerLengthUom */
enum eml22__ForceLengthPerLengthUom {
	eml22__ForceLengthPerLengthUom__kgf_x002em_x002fm = 0,
	eml22__ForceLengthPerLengthUom__lbf_x002eft_x002fin = 1,
	eml22__ForceLengthPerLengthUom__lbf_x002ein_x002fin = 2,
	eml22__ForceLengthPerLengthUom__N_x002em_x002fm = 3,
	eml22__ForceLengthPerLengthUom__tonf_x005bUS_x005d_x002emi_x002fft = 4
};
#endif

/* eml2_2ForGsoap.h:7022 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom (-1086)

/* eml22:ForcePerForceUom */
enum eml22__ForcePerForceUom {
	eml22__ForcePerForceUom___x0025 = 0,
	eml22__ForcePerForceUom__Euc = 1,
	eml22__ForcePerForceUom__kgf_x002fkgf = 2,
	eml22__ForcePerForceUom__lbf_x002flbf = 3,
	eml22__ForcePerForceUom__N_x002fN = 4
};
#endif

/* eml2_2ForGsoap.h:7054 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom (-1087)

/* eml22:ForcePerLengthUom */
enum eml22__ForcePerLengthUom {
	eml22__ForcePerLengthUom__0_x002e01_x0020lbf_x002fft = 0,
	eml22__ForcePerLengthUom__1_x002f30_x0020lbf_x002fm = 1,
	eml22__ForcePerLengthUom__1_x002f30_x0020N_x002fm = 2,
	eml22__ForcePerLengthUom__dyne_x002fcm = 3,
	eml22__ForcePerLengthUom__kgf_x002fcm = 4,
	eml22__ForcePerLengthUom__kN_x002fm = 5,
	eml22__ForcePerLengthUom__lbf_x002fft = 6,
	eml22__ForcePerLengthUom__lbf_x002fin = 7,
	eml22__ForcePerLengthUom__mN_x002fkm = 8,
	eml22__ForcePerLengthUom__mN_x002fm = 9,
	eml22__ForcePerLengthUom__N_x002fm = 10,
	eml22__ForcePerLengthUom__pdl_x002fcm = 11,
	eml22__ForcePerLengthUom__tonf_x005bUK_x005d_x002fft = 12,
	eml22__ForcePerLengthUom__tonf_x005bUS_x005d_x002fft = 13
};
#endif

/* eml2_2ForGsoap.h:7131 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom (-1088)

/* eml22:ForcePerVolumeUom */
enum eml22__ForcePerVolumeUom {
	eml22__ForcePerVolumeUom__0_x002e001_x0020psi_x002fft = 0,
	eml22__ForcePerVolumeUom__0_x002e01_x0020psi_x002fft = 1,
	eml22__ForcePerVolumeUom__atm_x002fft = 2,
	eml22__ForcePerVolumeUom__atm_x002fhm = 3,
	eml22__ForcePerVolumeUom__atm_x002fm = 4,
	eml22__ForcePerVolumeUom__bar_x002fkm = 5,
	eml22__ForcePerVolumeUom__bar_x002fm = 6,
	eml22__ForcePerVolumeUom__GPa_x002fcm = 7,
	eml22__ForcePerVolumeUom__kPa_x002fhm = 8,
	eml22__ForcePerVolumeUom__kPa_x002fm = 9,
	eml22__ForcePerVolumeUom__lbf_x002fft3 = 10,
	eml22__ForcePerVolumeUom__lbf_x002fgal_x005bUS_x005d = 11,
	eml22__ForcePerVolumeUom__MPa_x002fm = 12,
	eml22__ForcePerVolumeUom__N_x002fm3 = 13,
	eml22__ForcePerVolumeUom__Pa_x002fm = 14,
	eml22__ForcePerVolumeUom__psi_x002fft = 15,
	eml22__ForcePerVolumeUom__psi_x002fm = 16
};
#endif

/* eml2_2ForGsoap.h:7223 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom (-1089)

/* eml22:ForceUom */
enum eml22__ForceUom {
	eml22__ForceUom__N = 'N',
	eml22__ForceUom__10_x0020kN = 'O',
	eml22__ForceUom__cN = 'P',
	eml22__ForceUom__daN = 'Q',
	eml22__ForceUom__dN = 'R',
	eml22__ForceUom__dyne = 'S',
	eml22__ForceUom__EN = 'T',
	eml22__ForceUom__fN = 'U',
	eml22__ForceUom__gf = 'V',
	eml22__ForceUom__GN = 'W',
	eml22__ForceUom__hN = 'X',
	eml22__ForceUom__kdyne = 'Y',
	eml22__ForceUom__kgf = 'Z',
	eml22__ForceUom__klbf = 91,
	eml22__ForceUom__kN = 92,
	eml22__ForceUom__lbf = 93,
	eml22__ForceUom__Mgf = 94,
	eml22__ForceUom__mN = 95,
	eml22__ForceUom__MN = 96,
	eml22__ForceUom__nN = 'a',
	eml22__ForceUom__ozf = 'b',
	eml22__ForceUom__pdl = 'c',
	eml22__ForceUom__pN = 'd',
	eml22__ForceUom__TN = 'e',
	eml22__ForceUom__tonf_x005bUK_x005d = 'f',
	eml22__ForceUom__tonf_x005bUS_x005d = 'g',
	eml22__ForceUom__uN = 'h'
};
#endif

/* eml2_2ForGsoap.h:7365 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom (-1090)

/* eml22:FrequencyIntervalUom */
enum eml22__FrequencyIntervalUom {
	eml22__FrequencyIntervalUom__O = 'O'
};
#endif

/* eml2_2ForGsoap.h:7377 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom (-1091)

/* eml22:FrequencyUom */
enum eml22__FrequencyUom {
	eml22__FrequencyUom__cHz = 0,
	eml22__FrequencyUom__dHz = 1,
	eml22__FrequencyUom__EHz = 2,
	eml22__FrequencyUom__fHz = 3,
	eml22__FrequencyUom__GHz = 4,
	eml22__FrequencyUom__Hz = 5,
	eml22__FrequencyUom__kHz = 6,
	eml22__FrequencyUom__mHz = 7,
	eml22__FrequencyUom__MHz = 8,
	eml22__FrequencyUom__nHz = 9,
	eml22__FrequencyUom__pHz = 10,
	eml22__FrequencyUom__THz = 11,
	eml22__FrequencyUom__uHz = 12
};
#endif

/* eml2_2ForGsoap.h:7449 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom (-1092)

/* eml22:HeatCapacityUom */
enum eml22__HeatCapacityUom {
	eml22__HeatCapacityUom__J_x002fdeltaK = 0
};
#endif

/* eml2_2ForGsoap.h:7461 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom (-1093)

/* eml22:HeatFlowRateUom */
enum eml22__HeatFlowRateUom {
	eml22__HeatFlowRateUom__W = 'W',
	eml22__HeatFlowRateUom__1E6_x0020Btu_x005bIT_x005d_x002fh = 'X',
	eml22__HeatFlowRateUom__Btu_x005bIT_x005d_x002fh = 'Y',
	eml22__HeatFlowRateUom__Btu_x005bIT_x005d_x002fmin = 'Z',
	eml22__HeatFlowRateUom__Btu_x005bIT_x005d_x002fs = 91,
	eml22__HeatFlowRateUom__cal_x005bth_x005d_x002fh = 92,
	eml22__HeatFlowRateUom__EJ_x002fa = 93,
	eml22__HeatFlowRateUom__erg_x002fa = 94,
	eml22__HeatFlowRateUom__GW = 95,
	eml22__HeatFlowRateUom__J_x002fs = 96,
	eml22__HeatFlowRateUom__kcal_x005bth_x005d_x002fh = 'a',
	eml22__HeatFlowRateUom__kW = 'b',
	eml22__HeatFlowRateUom__lbf_x002eft_x002fmin = 'c',
	eml22__HeatFlowRateUom__lbf_x002eft_x002fs = 'd',
	eml22__HeatFlowRateUom__MJ_x002fa = 'e',
	eml22__HeatFlowRateUom__mW = 'f',
	eml22__HeatFlowRateUom__MW = 'g',
	eml22__HeatFlowRateUom__nW = 'h',
	eml22__HeatFlowRateUom__quad_x002fa = 'i',
	eml22__HeatFlowRateUom__TJ_x002fa = 'j',
	eml22__HeatFlowRateUom__TW = 'k',
	eml22__HeatFlowRateUom__ucal_x005bth_x005d_x002fs = 'l',
	eml22__HeatFlowRateUom__uW = 'm'
};
#endif

/* eml2_2ForGsoap.h:7583 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom (-1094)

/* eml22:HeatTransferCoefficientUom */
enum eml22__HeatTransferCoefficientUom {
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaF_x0029 = 0,
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x002edeltaR_x0029 = 1,
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 2,
	eml22__HeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x002edeltaF_x0029 = 3,
	eml22__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x002edeltaC_x0029 = 4,
	eml22__HeatTransferCoefficientUom__cal_x005bth_x005d_x002f_x0028s_x002ecm2_x002edeltaC_x0029 = 5,
	eml22__HeatTransferCoefficientUom__J_x002f_x0028s_x002em2_x002edeltaC_x0029 = 6,
	eml22__HeatTransferCoefficientUom__kcal_x005bth_x005d_x002f_x0028h_x002em2_x002edeltaC_x0029 = 7,
	eml22__HeatTransferCoefficientUom__kJ_x002f_x0028h_x002em2_x002edeltaK_x0029 = 8,
	eml22__HeatTransferCoefficientUom__kW_x002f_x0028m2_x002edeltaK_x0029 = 9,
	eml22__HeatTransferCoefficientUom__W_x002f_x0028m2_x002edeltaK_x0029 = 10
};
#endif

/* eml2_2ForGsoap.h:7645 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom (-1095)

/* eml22:IlluminanceUom */
enum eml22__IlluminanceUom {
	eml22__IlluminanceUom__footcandle = 0,
	eml22__IlluminanceUom__klx = 1,
	eml22__IlluminanceUom__lm_x002fm2 = 2,
	eml22__IlluminanceUom__lx = 3
};
#endif

/* eml2_2ForGsoap.h:7672 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom (-1096)

/* eml22:InductanceUom */
enum eml22__InductanceUom {
	eml22__InductanceUom__H = 'H',
	eml22__InductanceUom__cH = 'I',
	eml22__InductanceUom__dH = 'J',
	eml22__InductanceUom__EH = 'K',
	eml22__InductanceUom__fH = 'L',
	eml22__InductanceUom__GH = 'M',
	eml22__InductanceUom__kH = 'N',
	eml22__InductanceUom__MH = 'O',
	eml22__InductanceUom__mH = 'P',
	eml22__InductanceUom__nH = 'Q',
	eml22__InductanceUom__TH = 'R',
	eml22__InductanceUom__uH = 'S'
};
#endif

/* eml2_2ForGsoap.h:7739 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom (-1097)

/* eml22:IsothermalCompressibilityUom */
enum eml22__IsothermalCompressibilityUom {
	eml22__IsothermalCompressibilityUom__dm3_x002f_x0028kW_x002eh_x0029 = 0,
	eml22__IsothermalCompressibilityUom__dm3_x002fMJ = 1,
	eml22__IsothermalCompressibilityUom__m3_x002f_x0028kW_x002eh_x0029 = 2,
	eml22__IsothermalCompressibilityUom__m3_x002fJ = 3,
	eml22__IsothermalCompressibilityUom__mm3_x002fJ = 4,
	eml22__IsothermalCompressibilityUom__pt_x005bUK_x005d_x002f_x0028hp_x002eh_x0029 = 5
};
#endif

/* eml2_2ForGsoap.h:7776 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom (-1098)

/* eml22:KinematicViscosityUom */
enum eml22__KinematicViscosityUom {
	eml22__KinematicViscosityUom__cm2_x002fs = 0,
	eml22__KinematicViscosityUom__cSt = 1,
	eml22__KinematicViscosityUom__ft2_x002fh = 2,
	eml22__KinematicViscosityUom__ft2_x002fs = 3,
	eml22__KinematicViscosityUom__in2_x002fs = 4,
	eml22__KinematicViscosityUom__m2_x002fh = 5,
	eml22__KinematicViscosityUom__m2_x002fs = 6,
	eml22__KinematicViscosityUom__mm2_x002fs = 7,
	eml22__KinematicViscosityUom__Pa_x002es_x002em3_x002fkg = 8,
	eml22__KinematicViscosityUom__St = 9
};
#endif

/* eml2_2ForGsoap.h:7833 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom (-1099)

/* eml22:LengthPerLengthUom */
enum eml22__LengthPerLengthUom {
	eml22__LengthPerLengthUom___x0025 = 0,
	eml22__LengthPerLengthUom__0_x002e01_x0020ft_x002fft = 1,
	eml22__LengthPerLengthUom__1_x002f30_x0020m_x002fm = 2,
	eml22__LengthPerLengthUom__Euc = 3,
	eml22__LengthPerLengthUom__ft_x002fft = 4,
	eml22__LengthPerLengthUom__ft_x002fin = 5,
	eml22__LengthPerLengthUom__ft_x002fm = 6,
	eml22__LengthPerLengthUom__ft_x002fmi = 7,
	eml22__LengthPerLengthUom__km_x002fcm = 8,
	eml22__LengthPerLengthUom__m_x002fcm = 9,
	eml22__LengthPerLengthUom__m_x002fkm = 10,
	eml22__LengthPerLengthUom__m_x002fm = 11,
	eml22__LengthPerLengthUom__mi_x002fin = 12
};
#endif

/* eml2_2ForGsoap.h:7905 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom (-1100)

/* eml22:LengthPerMassUom */
enum eml22__LengthPerMassUom {
	eml22__LengthPerMassUom__ft_x002flbm = 0,
	eml22__LengthPerMassUom__m_x002fkg = 1
};
#endif

/* eml2_2ForGsoap.h:7922 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom (-1101)

/* eml22:LengthPerPressureUom */
enum eml22__LengthPerPressureUom {
	eml22__LengthPerPressureUom__ft_x002fpsi = 0,
	eml22__LengthPerPressureUom__m_x002fkPa = 1,
	eml22__LengthPerPressureUom__m_x002fPa = 2
};
#endif

/* eml2_2ForGsoap.h:7944 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom (-1102)

/* eml22:LengthPerTemperatureUom */
enum eml22__LengthPerTemperatureUom {
	eml22__LengthPerTemperatureUom__ft_x002fdeltaF = 0,
	eml22__LengthPerTemperatureUom__m_x002fdeltaK = 1
};
#endif

/* eml2_2ForGsoap.h:7961 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom (-1103)

/* eml22:LengthPerTimeUom */
enum eml22__LengthPerTimeUom {
	eml22__LengthPerTimeUom__1000_x0020ft_x002fh = 0,
	eml22__LengthPerTimeUom__1000_x0020ft_x002fs = 1,
	eml22__LengthPerTimeUom__cm_x002fa = 2,
	eml22__LengthPerTimeUom__cm_x002fs = 3,
	eml22__LengthPerTimeUom__dm_x002fs = 4,
	eml22__LengthPerTimeUom__ft_x002fd = 5,
	eml22__LengthPerTimeUom__ft_x002fh = 6,
	eml22__LengthPerTimeUom__ft_x002fmin = 7,
	eml22__LengthPerTimeUom__ft_x002fms = 8,
	eml22__LengthPerTimeUom__ft_x002fs = 9,
	eml22__LengthPerTimeUom__ft_x002fus = 10,
	eml22__LengthPerTimeUom__in_x002fa = 11,
	eml22__LengthPerTimeUom__in_x002fmin = 12,
	eml22__LengthPerTimeUom__in_x002fs = 13,
	eml22__LengthPerTimeUom__km_x002fh = 14,
	eml22__LengthPerTimeUom__km_x002fs = 15,
	eml22__LengthPerTimeUom__knot = 16,
	eml22__LengthPerTimeUom__m_x002fd = 17,
	eml22__LengthPerTimeUom__m_x002fh = 18,
	eml22__LengthPerTimeUom__m_x002fmin = 19,
	eml22__LengthPerTimeUom__m_x002fms = 20,
	eml22__LengthPerTimeUom__m_x002fs = 21,
	eml22__LengthPerTimeUom__mi_x002fh = 22,
	eml22__LengthPerTimeUom__mil_x002fa = 23,
	eml22__LengthPerTimeUom__mm_x002fa = 24,
	eml22__LengthPerTimeUom__mm_x002fs = 25,
	eml22__LengthPerTimeUom__nm_x002fs = 26,
	eml22__LengthPerTimeUom__um_x002fs = 27
};
#endif

/* eml2_2ForGsoap.h:8108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom (-1104)

/* eml22:LengthPerVolumeUom */
enum eml22__LengthPerVolumeUom {
	eml22__LengthPerVolumeUom__ft_x002fbbl = 0,
	eml22__LengthPerVolumeUom__ft_x002fft3 = 1,
	eml22__LengthPerVolumeUom__ft_x002fgal_x005bUS_x005d = 2,
	eml22__LengthPerVolumeUom__km_x002fdm3 = 3,
	eml22__LengthPerVolumeUom__km_x002fL = 4,
	eml22__LengthPerVolumeUom__m_x002fm3 = 5,
	eml22__LengthPerVolumeUom__mi_x002fgal_x005bUK_x005d = 6,
	eml22__LengthPerVolumeUom__mi_x002fgal_x005bUS_x005d = 7
};
#endif

/* eml2_2ForGsoap.h:8155 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom (-1105)

/* eml22:LengthUom */
enum eml22__LengthUom {
	eml22__LengthUom__m = 'm',
	eml22__LengthUom__0_x002e1_x0020ft = 'n',
	eml22__LengthUom__0_x002e1_x0020ft_x005bUS_x005d = 'o',
	eml22__LengthUom__0_x002e1_x0020in = 'p',
	eml22__LengthUom__0_x002e1_x0020yd = 'q',
	eml22__LengthUom__1_x002f16_x0020in = 'r',
	eml22__LengthUom__1_x002f2_x0020ft = 's',
	eml22__LengthUom__1_x002f32_x0020in = 't',
	eml22__LengthUom__1_x002f64_x0020in = 'u',
	eml22__LengthUom__10_x0020ft = 'v',
	eml22__LengthUom__10_x0020in = 'w',
	eml22__LengthUom__10_x0020km = 'x',
	eml22__LengthUom__100_x0020ft = 'y',
	eml22__LengthUom__100_x0020km = 'z',
	eml22__LengthUom__1000_x0020ft = 123,
	eml22__LengthUom__30_x0020ft = 124,
	eml22__LengthUom__30_x0020m = 125,
	eml22__LengthUom__angstrom = 126,
	eml22__LengthUom__chain = 127,
	eml22__LengthUom__chain_x005bBnA_x005d = 128,
	eml22__LengthUom__chain_x005bBnB_x005d = 129,
	eml22__LengthUom__chain_x005bCla_x005d = 130,
	eml22__LengthUom__chain_x005bInd37_x005d = 131,
	eml22__LengthUom__chain_x005bSe_x005d = 132,
	eml22__LengthUom__chain_x005bSeT_x005d = 133,
	eml22__LengthUom__chain_x005bUS_x005d = 134,
	eml22__LengthUom__cm = 135,
	eml22__LengthUom__dam = 136,
	eml22__LengthUom__dm = 137,
	eml22__LengthUom__Em = 138,
	eml22__LengthUom__fathom = 139,
	eml22__LengthUom__fm = 140,
	eml22__LengthUom__ft = 141,
	eml22__LengthUom__ft_x005bBnA_x005d = 142,
	eml22__LengthUom__ft_x005bBnB_x005d = 143,
	eml22__LengthUom__ft_x005bBr36_x005d = 144,
	eml22__LengthUom__ft_x005bBr65_x005d = 145,
	eml22__LengthUom__ft_x005bCla_x005d = 146,
	eml22__LengthUom__ft_x005bGC_x005d = 147,
	eml22__LengthUom__ft_x005bInd_x005d = 148,
	eml22__LengthUom__ft_x005bInd37_x005d = 149,
	eml22__LengthUom__ft_x005bInd62_x005d = 150,
	eml22__LengthUom__ft_x005bInd75_x005d = 151,
	eml22__LengthUom__ft_x005bSe_x005d = 152,
	eml22__LengthUom__ft_x005bSeT_x005d = 153,
	eml22__LengthUom__ft_x005bUS_x005d = 154,
	eml22__LengthUom__fur_x005bUS_x005d = 155,
	eml22__LengthUom__Gm = 156,
	eml22__LengthUom__hm = 157,
	eml22__LengthUom__in = 158,
	eml22__LengthUom__in_x005bUS_x005d = 159,
	eml22__LengthUom__km = 160,
	eml22__LengthUom__link = 161,
	eml22__LengthUom__link_x005bBnA_x005d = 162,
	eml22__LengthUom__link_x005bBnB_x005d = 163,
	eml22__LengthUom__link_x005bCla_x005d = 164,
	eml22__LengthUom__link_x005bSe_x005d = 165,
	eml22__LengthUom__link_x005bSeT_x005d = 166,
	eml22__LengthUom__link_x005bUS_x005d = 167,
	eml22__LengthUom__m_x005bGer_x005d = 168,
	eml22__LengthUom__mi = 169,
	eml22__LengthUom__mi_x005bnaut_x005d = 170,
	eml22__LengthUom__mi_x005bnautUK_x005d = 171,
	eml22__LengthUom__mi_x005bUS_x005d = 172,
	eml22__LengthUom__mil = 173,
	eml22__LengthUom__mm = 174,
	eml22__LengthUom__Mm = 175,
	eml22__LengthUom__nm = 176,
	eml22__LengthUom__pm = 177,
	eml22__LengthUom__rod_x005bUS_x005d = 178,
	eml22__LengthUom__Tm = 179,
	eml22__LengthUom__um = 180,
	eml22__LengthUom__yd = 181,
	eml22__LengthUom__yd_x005bBnA_x005d = 182,
	eml22__LengthUom__yd_x005bBnB_x005d = 183,
	eml22__LengthUom__yd_x005bCla_x005d = 184,
	eml22__LengthUom__yd_x005bInd_x005d = 185,
	eml22__LengthUom__yd_x005bInd37_x005d = 186,
	eml22__LengthUom__yd_x005bInd62_x005d = 187,
	eml22__LengthUom__yd_x005bInd75_x005d = 188,
	eml22__LengthUom__yd_x005bSe_x005d = 189,
	eml22__LengthUom__yd_x005bSeT_x005d = 190,
	eml22__LengthUom__yd_x005bUS_x005d = 191
};
#endif

/* eml2_2ForGsoap.h:8577 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom (-1106)

/* eml22:LightExposureUom */
enum eml22__LightExposureUom {
	eml22__LightExposureUom__footcandle_x002es = 0,
	eml22__LightExposureUom__lx_x002es = 1
};
#endif

/* eml2_2ForGsoap.h:8594 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom (-1107)

/* eml22:LinearAccelerationUom */
enum eml22__LinearAccelerationUom {
	eml22__LinearAccelerationUom__cm_x002fs2 = 0,
	eml22__LinearAccelerationUom__ft_x002fs2 = 1,
	eml22__LinearAccelerationUom__Gal = 2,
	eml22__LinearAccelerationUom__gn = 3,
	eml22__LinearAccelerationUom__in_x002fs2 = 4,
	eml22__LinearAccelerationUom__m_x002fs2 = 5,
	eml22__LinearAccelerationUom__mGal = 6,
	eml22__LinearAccelerationUom__mgn = 7
};
#endif

/* eml2_2ForGsoap.h:8641 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom (-1108)

/* eml22:LinearThermalExpansionUom */
enum eml22__LinearThermalExpansionUom {
	eml22__LinearThermalExpansionUom__1_x002fdeltaK = 0,
	eml22__LinearThermalExpansionUom__in_x002f_x0028in_x002edeltaF_x0029 = 1,
	eml22__LinearThermalExpansionUom__m_x002f_x0028m_x002edeltaK_x0029 = 2,
	eml22__LinearThermalExpansionUom__mm_x002f_x0028mm_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:8668 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom (-1109)

/* eml22:LogarithmicPowerRatioPerLengthUom */
enum eml22__LogarithmicPowerRatioPerLengthUom {
	eml22__LogarithmicPowerRatioPerLengthUom__B_x002fm = 0,
	eml22__LogarithmicPowerRatioPerLengthUom__dB_x002fft = 1,
	eml22__LogarithmicPowerRatioPerLengthUom__dB_x002fkm = 2,
	eml22__LogarithmicPowerRatioPerLengthUom__dB_x002fm = 3
};
#endif

/* eml2_2ForGsoap.h:8695 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom (-1110)

/* eml22:LogarithmicPowerRatioUom */
enum eml22__LogarithmicPowerRatioUom {
	eml22__LogarithmicPowerRatioUom__B = 'B',
	eml22__LogarithmicPowerRatioUom__dB = 'C'
};
#endif

/* eml2_2ForGsoap.h:8712 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom (-1111)

/* eml22:LuminanceUom */
enum eml22__LuminanceUom {
	eml22__LuminanceUom__cd_x002fm2 = 0
};
#endif

/* eml2_2ForGsoap.h:8724 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom (-1112)

/* eml22:LuminousEfficacyUom */
enum eml22__LuminousEfficacyUom {
	eml22__LuminousEfficacyUom__lm_x002fW = 0
};
#endif

/* eml2_2ForGsoap.h:8736 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom (-1113)

/* eml22:LuminousFluxUom */
enum eml22__LuminousFluxUom {
	eml22__LuminousFluxUom__lm = 0
};
#endif

/* eml2_2ForGsoap.h:8748 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom (-1114)

/* eml22:LuminousIntensityUom */
enum eml22__LuminousIntensityUom {
	eml22__LuminousIntensityUom__cd = 0,
	eml22__LuminousIntensityUom__kcd = 1
};
#endif

/* eml2_2ForGsoap.h:8765 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom (-1115)

/* eml22:MagneticDipoleMomentUom */
enum eml22__MagneticDipoleMomentUom {
	eml22__MagneticDipoleMomentUom__Wb_x002em = 0
};
#endif

/* eml2_2ForGsoap.h:8777 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom (-1116)

/* eml22:MagneticFieldStrengthUom */
enum eml22__MagneticFieldStrengthUom {
	eml22__MagneticFieldStrengthUom__A_x002fm = 0,
	eml22__MagneticFieldStrengthUom__A_x002fmm = 1,
	eml22__MagneticFieldStrengthUom__Oe = 2
};
#endif

/* eml2_2ForGsoap.h:8799 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom (-1117)

/* eml22:MagneticFluxDensityPerLengthUom */
enum eml22__MagneticFluxDensityPerLengthUom {
	eml22__MagneticFluxDensityPerLengthUom__gauss_x002fcm = 0,
	eml22__MagneticFluxDensityPerLengthUom__mT_x002fdm = 1,
	eml22__MagneticFluxDensityPerLengthUom__T_x002fm = 2
};
#endif

/* eml2_2ForGsoap.h:8821 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom (-1118)

/* eml22:MagneticFluxDensityUom */
enum eml22__MagneticFluxDensityUom {
	eml22__MagneticFluxDensityUom__T = 'T',
	eml22__MagneticFluxDensityUom__cgauss = 'U',
	eml22__MagneticFluxDensityUom__cT = 'V',
	eml22__MagneticFluxDensityUom__dgauss = 'W',
	eml22__MagneticFluxDensityUom__dT = 'X',
	eml22__MagneticFluxDensityUom__Egauss = 'Y',
	eml22__MagneticFluxDensityUom__ET = 'Z',
	eml22__MagneticFluxDensityUom__fgauss = 91,
	eml22__MagneticFluxDensityUom__fT = 92,
	eml22__MagneticFluxDensityUom__gauss = 93,
	eml22__MagneticFluxDensityUom__Ggauss = 94,
	eml22__MagneticFluxDensityUom__GT = 95,
	eml22__MagneticFluxDensityUom__kgauss = 96,
	eml22__MagneticFluxDensityUom__kT = 'a',
	eml22__MagneticFluxDensityUom__mgauss = 'b',
	eml22__MagneticFluxDensityUom__Mgauss = 'c',
	eml22__MagneticFluxDensityUom__mT = 'd',
	eml22__MagneticFluxDensityUom__ngauss = 'e',
	eml22__MagneticFluxDensityUom__nT = 'f',
	eml22__MagneticFluxDensityUom__pgauss = 'g',
	eml22__MagneticFluxDensityUom__pT = 'h',
	eml22__MagneticFluxDensityUom__Tgauss = 'i',
	eml22__MagneticFluxDensityUom__TT = 'j',
	eml22__MagneticFluxDensityUom__ugauss = 'k',
	eml22__MagneticFluxDensityUom__uT = 'l'
};
#endif

/* eml2_2ForGsoap.h:8953 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom (-1119)

/* eml22:MagneticFluxUom */
enum eml22__MagneticFluxUom {
	eml22__MagneticFluxUom__cWb = 0,
	eml22__MagneticFluxUom__dWb = 1,
	eml22__MagneticFluxUom__EWb = 2,
	eml22__MagneticFluxUom__fWb = 3,
	eml22__MagneticFluxUom__GWb = 4,
	eml22__MagneticFluxUom__kWb = 5,
	eml22__MagneticFluxUom__mWb = 6,
	eml22__MagneticFluxUom__MWb = 7,
	eml22__MagneticFluxUom__nWb = 8,
	eml22__MagneticFluxUom__pWb = 9,
	eml22__MagneticFluxUom__TWb = 10,
	eml22__MagneticFluxUom__uWb = 11,
	eml22__MagneticFluxUom__Wb = 12
};
#endif

/* eml2_2ForGsoap.h:9025 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom (-1120)

/* eml22:MagneticPermeabilityUom */
enum eml22__MagneticPermeabilityUom {
	eml22__MagneticPermeabilityUom__H_x002fm = 0,
	eml22__MagneticPermeabilityUom__uH_x002fm = 1
};
#endif

/* eml2_2ForGsoap.h:9042 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom (-1121)

/* eml22:MagneticVectorPotentialUom */
enum eml22__MagneticVectorPotentialUom {
	eml22__MagneticVectorPotentialUom__Wb_x002fm = 0,
	eml22__MagneticVectorPotentialUom__Wb_x002fmm = 1
};
#endif

/* eml2_2ForGsoap.h:9059 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom (-1122)

/* eml22:MassLengthUom */
enum eml22__MassLengthUom {
	eml22__MassLengthUom__kg_x002em = 0,
	eml22__MassLengthUom__lbm_x002eft = 1
};
#endif

/* eml2_2ForGsoap.h:9076 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom (-1123)

/* eml22:MassPerAreaUom */
enum eml22__MassPerAreaUom {
	eml22__MassPerAreaUom__0_x002e01_x0020lbm_x002fft2 = 0,
	eml22__MassPerAreaUom__kg_x002fm2 = 1,
	eml22__MassPerAreaUom__lbm_x002fft2 = 2,
	eml22__MassPerAreaUom__Mg_x002fm2 = 3,
	eml22__MassPerAreaUom__ton_x005bUS_x005d_x002fft2 = 4
};
#endif

/* eml2_2ForGsoap.h:9108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom (-1124)

/* eml22:MassPerEnergyUom */
enum eml22__MassPerEnergyUom {
	eml22__MassPerEnergyUom__kg_x002f_x0028kW_x002eh_x0029 = 0,
	eml22__MassPerEnergyUom__kg_x002fJ = 1,
	eml22__MassPerEnergyUom__kg_x002fMJ = 2,
	eml22__MassPerEnergyUom__lbm_x002f_x0028hp_x002eh_x0029 = 3,
	eml22__MassPerEnergyUom__mg_x002fJ = 4
};
#endif

/* eml2_2ForGsoap.h:9140 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom (-1125)

/* eml22:MassPerLengthUom */
enum eml22__MassPerLengthUom {
	eml22__MassPerLengthUom__kg_x002em_x002fcm2 = 0,
	eml22__MassPerLengthUom__kg_x002fm = 1,
	eml22__MassPerLengthUom__klbm_x002fin = 2,
	eml22__MassPerLengthUom__lbm_x002fft = 3,
	eml22__MassPerLengthUom__Mg_x002fin = 4
};
#endif

/* eml2_2ForGsoap.h:9172 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom (-1126)

/* eml22:MassPerMassUom */
enum eml22__MassPerMassUom {
	eml22__MassPerMassUom___x0025 = 0,
	eml22__MassPerMassUom___x0025_x005bmass_x005d = 1,
	eml22__MassPerMassUom__Euc = 2,
	eml22__MassPerMassUom__g_x002fkg = 3,
	eml22__MassPerMassUom__g_x002ft = 4,
	eml22__MassPerMassUom__kg_x002fkg = 5,
	eml22__MassPerMassUom__kg_x002fsack_x005b94lbm_x005d = 6,
	eml22__MassPerMassUom__kg_x002ft = 7,
	eml22__MassPerMassUom__mg_x002fg = 8,
	eml22__MassPerMassUom__mg_x002fkg = 9,
	eml22__MassPerMassUom__ng_x002fg = 10,
	eml22__MassPerMassUom__ng_x002fmg = 11,
	eml22__MassPerMassUom__ppk = 12,
	eml22__MassPerMassUom__ppm = 13,
	eml22__MassPerMassUom__ppm_x005bmass_x005d = 14,
	eml22__MassPerMassUom__ug_x002fg = 15,
	eml22__MassPerMassUom__ug_x002fmg = 16
};
#endif

/* eml2_2ForGsoap.h:9264 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom (-1127)

/* eml22:MassPerTimePerAreaUom */
enum eml22__MassPerTimePerAreaUom {
	eml22__MassPerTimePerAreaUom__g_x002eft_x002f_x0028cm3_x002es_x0029 = 0,
	eml22__MassPerTimePerAreaUom__g_x002em_x002f_x0028cm3_x002es_x0029 = 1,
	eml22__MassPerTimePerAreaUom__kg_x002f_x0028m2_x002es_x0029 = 2,
	eml22__MassPerTimePerAreaUom__kPa_x002es_x002fm = 3,
	eml22__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002eh_x0029 = 4,
	eml22__MassPerTimePerAreaUom__lbm_x002f_x0028ft2_x002es_x0029 = 5,
	eml22__MassPerTimePerAreaUom__MPa_x002es_x002fm = 6
};
#endif

/* eml2_2ForGsoap.h:9306 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom (-1128)

/* eml22:MassPerTimePerLengthUom */
enum eml22__MassPerTimePerLengthUom {
	eml22__MassPerTimePerLengthUom__kg_x002f_x0028m_x002es_x0029 = 0,
	eml22__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002eh_x0029 = 1,
	eml22__MassPerTimePerLengthUom__lbm_x002f_x0028ft_x002es_x0029 = 2,
	eml22__MassPerTimePerLengthUom__Pa_x002es = 3
};
#endif

/* eml2_2ForGsoap.h:9333 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom (-1129)

/* eml22:MassPerTimeUom */
enum eml22__MassPerTimeUom {
	eml22__MassPerTimeUom__1E6_x0020lbm_x002fa = 0,
	eml22__MassPerTimeUom__g_x002fs = 1,
	eml22__MassPerTimeUom__kg_x002fd = 2,
	eml22__MassPerTimeUom__kg_x002fh = 3,
	eml22__MassPerTimeUom__kg_x002fmin = 4,
	eml22__MassPerTimeUom__kg_x002fs = 5,
	eml22__MassPerTimeUom__lbm_x002fd = 6,
	eml22__MassPerTimeUom__lbm_x002fh = 7,
	eml22__MassPerTimeUom__lbm_x002fmin = 8,
	eml22__MassPerTimeUom__lbm_x002fs = 9,
	eml22__MassPerTimeUom__Mg_x002fa = 10,
	eml22__MassPerTimeUom__Mg_x002fd = 11,
	eml22__MassPerTimeUom__Mg_x002fh = 12,
	eml22__MassPerTimeUom__Mg_x002fmin = 13,
	eml22__MassPerTimeUom__t_x002fa = 14,
	eml22__MassPerTimeUom__t_x002fd = 15,
	eml22__MassPerTimeUom__t_x002fh = 16,
	eml22__MassPerTimeUom__t_x002fmin = 17,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fa = 18,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fd = 19,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fh = 20,
	eml22__MassPerTimeUom__ton_x005bUK_x005d_x002fmin = 21,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fa = 22,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fd = 23,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fh = 24,
	eml22__MassPerTimeUom__ton_x005bUS_x005d_x002fmin = 25
};
#endif

/* eml2_2ForGsoap.h:9470 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom (-1130)

/* eml22:MassPerVolumePerLengthUom */
enum eml22__MassPerVolumePerLengthUom {
	eml22__MassPerVolumePerLengthUom__g_x002fcm4 = 0,
	eml22__MassPerVolumePerLengthUom__kg_x002fdm4 = 1,
	eml22__MassPerVolumePerLengthUom__kg_x002fm4 = 2,
	eml22__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUK_x005d_x002eft_x0029 = 3,
	eml22__MassPerVolumePerLengthUom__lbm_x002f_x0028gal_x005bUS_x005d_x002eft_x0029 = 4,
	eml22__MassPerVolumePerLengthUom__lbm_x002fft4 = 5,
	eml22__MassPerVolumePerLengthUom__Pa_x002es2_x002fm3 = 6
};
#endif

/* eml2_2ForGsoap.h:9512 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom (-1131)

/* eml22:MassPerVolumePerPressureUom */
enum eml22__MassPerVolumePerPressureUom {
	eml22__MassPerVolumePerPressureUom__kg_x002fm3_x002ekPa = 0,
	eml22__MassPerVolumePerPressureUom__lb_x002fft_x002epsi = 1
};
#endif

/* eml2_2ForGsoap.h:9521 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom (-1132)

/* eml22:MassPerVolumePerTemperatureUom */
enum eml22__MassPerVolumePerTemperatureUom {
	eml22__MassPerVolumePerTemperatureUom__kg_x002fm3_x002edegC = 0,
	eml22__MassPerVolumePerTemperatureUom__kg_x002fm3_x002eK = 1,
	eml22__MassPerVolumePerTemperatureUom__lb_x002fft_x002edegF = 2
};
#endif

/* eml2_2ForGsoap.h:9531 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom (-1133)

/* eml22:MassPerVolumeUom */
enum eml22__MassPerVolumeUom {
	eml22__MassPerVolumeUom__0_x002e001_x0020lbm_x002fbbl = 0,
	eml22__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUK_x005d = 1,
	eml22__MassPerVolumeUom__0_x002e001_x0020lbm_x002fgal_x005bUS_x005d = 2,
	eml22__MassPerVolumeUom__0_x002e01_x0020grain_x002fft3 = 3,
	eml22__MassPerVolumeUom__0_x002e1_x0020lbm_x002fbbl = 4,
	eml22__MassPerVolumeUom__10_x0020Mg_x002fm3 = 5,
	eml22__MassPerVolumeUom__g_x002fcm3 = 6,
	eml22__MassPerVolumeUom__g_x002fdm3 = 7,
	eml22__MassPerVolumeUom__g_x002fgal_x005bUK_x005d = 8,
	eml22__MassPerVolumeUom__g_x002fgal_x005bUS_x005d = 9,
	eml22__MassPerVolumeUom__g_x002fL = 10,
	eml22__MassPerVolumeUom__g_x002fm3 = 11,
	eml22__MassPerVolumeUom__grain_x002fft3 = 12,
	eml22__MassPerVolumeUom__grain_x002fgal_x005bUS_x005d = 13,
	eml22__MassPerVolumeUom__kg_x002fdm3 = 14,
	eml22__MassPerVolumeUom__kg_x002fL = 15,
	eml22__MassPerVolumeUom__kg_x002fm3 = 16,
	eml22__MassPerVolumeUom__lbm_x002fbbl = 17,
	eml22__MassPerVolumeUom__lbm_x002fft3 = 18,
	eml22__MassPerVolumeUom__lbm_x002fgal_x005bUK_x005d = 19,
	eml22__MassPerVolumeUom__lbm_x002fgal_x005bUS_x005d = 20,
	eml22__MassPerVolumeUom__lbm_x002fin3 = 21,
	eml22__MassPerVolumeUom__mg_x002fdm3 = 22,
	eml22__MassPerVolumeUom__mg_x002fgal_x005bUS_x005d = 23,
	eml22__MassPerVolumeUom__mg_x002fL = 24,
	eml22__MassPerVolumeUom__mg_x002fm3 = 25,
	eml22__MassPerVolumeUom__Mg_x002fm3 = 26,
	eml22__MassPerVolumeUom__t_x002fm3 = 27,
	eml22__MassPerVolumeUom__ug_x002fcm3 = 28
};
#endif

/* eml2_2ForGsoap.h:9683 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUom (-1134)

/* eml22:MassUom */
enum eml22__MassUom {
	eml22__MassUom__g = 'g',
	eml22__MassUom__t = 't',
	eml22__MassUom__ag = 'u',
	eml22__MassUom__cg = 'v',
	eml22__MassUom__ct = 'w',
	eml22__MassUom__cwt_x005bUK_x005d = 'x',
	eml22__MassUom__cwt_x005bUS_x005d = 'y',
	eml22__MassUom__Eg = 'z',
	eml22__MassUom__fg = 123,
	eml22__MassUom__Gg = 124,
	eml22__MassUom__grain = 125,
	eml22__MassUom__hg = 126,
	eml22__MassUom__kg = 127,
	eml22__MassUom__klbm = 128,
	eml22__MassUom__lbm = 129,
	eml22__MassUom__mg = 130,
	eml22__MassUom__Mg = 131,
	eml22__MassUom__ng = 132,
	eml22__MassUom__ozm = 133,
	eml22__MassUom__ozm_x005btroy_x005d = 134,
	eml22__MassUom__pg = 135,
	eml22__MassUom__sack_x005b94lbm_x005d = 136,
	eml22__MassUom__Tg = 137,
	eml22__MassUom__ton_x005bUK_x005d = 138,
	eml22__MassUom__ton_x005bUS_x005d = 139,
	eml22__MassUom__ug = 140
};
#endif

/* eml2_2ForGsoap.h:9820 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom (-1135)

/* eml22:MobilityUom */
enum eml22__MobilityUom {
	eml22__MobilityUom__D_x002f_x0028Pa_x002es_x0029 = 0,
	eml22__MobilityUom__D_x002fcP = 1,
	eml22__MobilityUom__mD_x002eft2_x002f_x0028lbf_x002es_x0029 = 2,
	eml22__MobilityUom__mD_x002ein2_x002f_x0028lbf_x002es_x0029 = 3,
	eml22__MobilityUom__mD_x002f_x0028Pa_x002es_x0029 = 4,
	eml22__MobilityUom__mD_x002fcP = 5,
	eml22__MobilityUom__TD_x005bAPI_x005d_x002f_x0028Pa_x002es_x0029 = 6
};
#endif

/* eml2_2ForGsoap.h:9862 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom (-1136)

/* eml22:MolarEnergyUom */
enum eml22__MolarEnergyUom {
	eml22__MolarEnergyUom__Btu_x005bIT_x005d_x002flbmol = 0,
	eml22__MolarEnergyUom__J_x002fmol = 1,
	eml22__MolarEnergyUom__kcal_x005bth_x005d_x002fmol = 2,
	eml22__MolarEnergyUom__kJ_x002fkmol = 3,
	eml22__MolarEnergyUom__MJ_x002fkmol = 4
};
#endif

/* eml2_2ForGsoap.h:9894 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom (-1137)

/* eml22:MolarHeatCapacityUom */
enum eml22__MolarHeatCapacityUom {
	eml22__MolarHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbmol_x002edeltaF_x0029 = 0,
	eml22__MolarHeatCapacityUom__cal_x005bth_x005d_x002f_x0028mol_x002edeltaC_x0029 = 1,
	eml22__MolarHeatCapacityUom__J_x002f_x0028mol_x002edeltaK_x0029 = 2,
	eml22__MolarHeatCapacityUom__kJ_x002f_x0028kmol_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:9921 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom (-1138)

/* eml22:MolarVolumeUom */
enum eml22__MolarVolumeUom {
	eml22__MolarVolumeUom__dm3_x002fkmol = 0,
	eml22__MolarVolumeUom__ft3_x002flbmol = 1,
	eml22__MolarVolumeUom__L_x002fkmol = 2,
	eml22__MolarVolumeUom__L_x002fmol = 3,
	eml22__MolarVolumeUom__m3_x002fkmol = 4,
	eml22__MolarVolumeUom__m3_x002fmol = 5
};
#endif

/* eml2_2ForGsoap.h:9958 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom (-1139)

/* eml22:MolecularWeightUom */
enum eml22__MolecularWeightUom {
	eml22__MolecularWeightUom__g_x002fmol = 0,
	eml22__MolecularWeightUom__kg_x002fmol = 1,
	eml22__MolecularWeightUom__lbm_x002flbmol = 2
};
#endif

/* eml2_2ForGsoap.h:9980 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom (-1140)

/* eml22:MomentOfForceUom */
enum eml22__MomentOfForceUom {
	eml22__MomentOfForceUom__J = 'J',
	eml22__MomentOfForceUom__1000_x0020lbf_x002eft = 'K',
	eml22__MomentOfForceUom__daN_x002em = 'L',
	eml22__MomentOfForceUom__dN_x002em = 'M',
	eml22__MomentOfForceUom__kgf_x002em = 'N',
	eml22__MomentOfForceUom__kN_x002em = 'O',
	eml22__MomentOfForceUom__lbf_x002eft = 'P',
	eml22__MomentOfForceUom__lbf_x002ein = 'Q',
	eml22__MomentOfForceUom__lbm_x002eft2_x002fs2 = 'R',
	eml22__MomentOfForceUom__N_x002em = 'S',
	eml22__MomentOfForceUom__pdl_x002eft = 'T',
	eml22__MomentOfForceUom__tonf_x005bUS_x005d_x002eft = 'U',
	eml22__MomentOfForceUom__tonf_x005bUS_x005d_x002emi = 'V'
};
#endif

/* eml2_2ForGsoap.h:10052 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom (-1141)

/* eml22:MomentOfInertiaUom */
enum eml22__MomentOfInertiaUom {
	eml22__MomentOfInertiaUom__kg_x002em2 = 0,
	eml22__MomentOfInertiaUom__lbm_x002eft2 = 1
};
#endif

/* eml2_2ForGsoap.h:10069 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom (-1142)

/* eml22:MomentumUom */
enum eml22__MomentumUom {
	eml22__MomentumUom__kg_x002em_x002fs = 0,
	eml22__MomentumUom__lbm_x002eft_x002fs = 1
};
#endif

/* eml2_2ForGsoap.h:10086 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom (-1143)

/* eml22:NormalizedPowerUom */
enum eml22__NormalizedPowerUom {
	eml22__NormalizedPowerUom__B_x002eW = 0,
	eml22__NormalizedPowerUom__dB_x002emW = 1,
	eml22__NormalizedPowerUom__dB_x002eMW = 2,
	eml22__NormalizedPowerUom__dB_x002eW = 3
};
#endif

/* eml2_2ForGsoap.h:10113 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom (-1144)

/* eml22:PermeabilityLengthUom */
enum eml22__PermeabilityLengthUom {
	eml22__PermeabilityLengthUom__D_x002eft = 0,
	eml22__PermeabilityLengthUom__D_x002em = 1,
	eml22__PermeabilityLengthUom__mD_x002eft = 2,
	eml22__PermeabilityLengthUom__mD_x002em = 3,
	eml22__PermeabilityLengthUom__TD_x005bAPI_x005d_x002em = 4
};
#endif

/* eml2_2ForGsoap.h:10145 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom (-1145)

/* eml22:PermeabilityRockUom */
enum eml22__PermeabilityRockUom {
	eml22__PermeabilityRockUom__D = 'D',
	eml22__PermeabilityRockUom__D_x005bAPI_x005d = 'E',
	eml22__PermeabilityRockUom__mD = 'F',
	eml22__PermeabilityRockUom__TD_x005bAPI_x005d = 'G'
};
#endif

/* eml2_2ForGsoap.h:10172 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom (-1146)

/* eml22:PermittivityUom */
enum eml22__PermittivityUom {
	eml22__PermittivityUom__F_x002fm = 0,
	eml22__PermittivityUom__uF_x002fm = 1
};
#endif

/* eml2_2ForGsoap.h:10189 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom (-1147)

/* eml22:PlaneAngleUom */
enum eml22__PlaneAngleUom {
	eml22__PlaneAngleUom__0_x002e001_x0020seca = 0,
	eml22__PlaneAngleUom__ccgr = 1,
	eml22__PlaneAngleUom__cgr = 2,
	eml22__PlaneAngleUom__dega = 3,
	eml22__PlaneAngleUom__gon = 4,
	eml22__PlaneAngleUom__krad = 5,
	eml22__PlaneAngleUom__mila = 6,
	eml22__PlaneAngleUom__mina = 7,
	eml22__PlaneAngleUom__Mrad = 8,
	eml22__PlaneAngleUom__mrad = 9,
	eml22__PlaneAngleUom__rad = 10,
	eml22__PlaneAngleUom__rev = 11,
	eml22__PlaneAngleUom__seca = 12,
	eml22__PlaneAngleUom__urad = 13
};
#endif

/* eml2_2ForGsoap.h:10266 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom (-1148)

/* eml22:PotentialDifferencePerPowerDropUom */
enum eml22__PotentialDifferencePerPowerDropUom {
	eml22__PotentialDifferencePerPowerDropUom__V_x002fB = 0,
	eml22__PotentialDifferencePerPowerDropUom__V_x002fdB = 1
};
#endif

/* eml2_2ForGsoap.h:10283 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom (-1149)

/* eml22:PowerPerAreaUom */
enum eml22__PowerPerAreaUom {
	eml22__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft2_x0029 = 0,
	eml22__PowerPerAreaUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft2_x0029 = 1,
	eml22__PowerPerAreaUom__cal_x005bth_x005d_x002f_x0028h_x002ecm2_x0029 = 2,
	eml22__PowerPerAreaUom__hp_x002fin2 = 3,
	eml22__PowerPerAreaUom__hp_x005bhyd_x005d_x002fin2 = 4,
	eml22__PowerPerAreaUom__kW_x002fcm2 = 5,
	eml22__PowerPerAreaUom__kW_x002fm2 = 6,
	eml22__PowerPerAreaUom__mW_x002fm2 = 7,
	eml22__PowerPerAreaUom__ucal_x005bth_x005d_x002f_x0028s_x002ecm2_x0029 = 8,
	eml22__PowerPerAreaUom__W_x002fcm2 = 9,
	eml22__PowerPerAreaUom__W_x002fm2 = 10,
	eml22__PowerPerAreaUom__W_x002fmm2 = 11
};
#endif

/* eml2_2ForGsoap.h:10350 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom (-1150)

/* eml22:PowerPerPowerUom */
enum eml22__PowerPerPowerUom {
	eml22__PowerPerPowerUom___x0025 = 0,
	eml22__PowerPerPowerUom__Btu_x005bIT_x005d_x002f_x0028hp_x002eh_x0029 = 1,
	eml22__PowerPerPowerUom__Euc = 2,
	eml22__PowerPerPowerUom__W_x002fkW = 3,
	eml22__PowerPerPowerUom__W_x002fW = 4
};
#endif

/* eml2_2ForGsoap.h:10382 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom (-1151)

/* eml22:PowerPerVolumeUom */
enum eml22__PowerPerVolumeUom {
	eml22__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x0029 = 0,
	eml22__PowerPerVolumeUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x0029 = 1,
	eml22__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028h_x002ecm3_x0029 = 2,
	eml22__PowerPerVolumeUom__cal_x005bth_x005d_x002f_x0028s_x002ecm3_x0029 = 3,
	eml22__PowerPerVolumeUom__hp_x002fft3 = 4,
	eml22__PowerPerVolumeUom__kW_x002fm3 = 5,
	eml22__PowerPerVolumeUom__uW_x002fm3 = 6,
	eml22__PowerPerVolumeUom__W_x002fm3 = 7
};
#endif

/* eml2_2ForGsoap.h:10429 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom (-1152)

/* eml22:PowerUom */
enum eml22__PowerUom {
	eml22__PowerUom__W = 'W',
	eml22__PowerUom__cW = 'X',
	eml22__PowerUom__dW = 'Y',
	eml22__PowerUom__EW = 'Z',
	eml22__PowerUom__fW = 91,
	eml22__PowerUom__GW = 92,
	eml22__PowerUom__hp = 93,
	eml22__PowerUom__hp_x005belec_x005d = 94,
	eml22__PowerUom__hp_x005bhyd_x005d = 95,
	eml22__PowerUom__hp_x005bmetric_x005d = 96,
	eml22__PowerUom__kW = 'a',
	eml22__PowerUom__MW = 'b',
	eml22__PowerUom__mW = 'c',
	eml22__PowerUom__nW = 'd',
	eml22__PowerUom__pW = 'e',
	eml22__PowerUom__tonRefrig = 'f',
	eml22__PowerUom__TW = 'g',
	eml22__PowerUom__uW = 'h'
};
#endif

/* eml2_2ForGsoap.h:10526 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom (-1153)

/* eml22:PressurePerPressureUom */
enum eml22__PressurePerPressureUom {
	eml22__PressurePerPressureUom__atm_x002fatm = 0,
	eml22__PressurePerPressureUom__bar_x002fbar = 1,
	eml22__PressurePerPressureUom__Euc = 2,
	eml22__PressurePerPressureUom__kPa_x002fkPa = 3,
	eml22__PressurePerPressureUom__MPa_x002fMPa = 4,
	eml22__PressurePerPressureUom__Pa_x002fPa = 5,
	eml22__PressurePerPressureUom__psi_x002fpsi = 6
};
#endif

/* eml2_2ForGsoap.h:10568 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom (-1154)

/* eml22:PressurePerTimeUom */
enum eml22__PressurePerTimeUom {
	eml22__PressurePerTimeUom__atm_x002fh = 0,
	eml22__PressurePerTimeUom__bar_x002fh = 1,
	eml22__PressurePerTimeUom__kPa_x002fh = 2,
	eml22__PressurePerTimeUom__kPa_x002fmin = 3,
	eml22__PressurePerTimeUom__MPa_x002fh = 4,
	eml22__PressurePerTimeUom__Pa_x002fh = 5,
	eml22__PressurePerTimeUom__Pa_x002fs = 6,
	eml22__PressurePerTimeUom__psi_x002fh = 7,
	eml22__PressurePerTimeUom__psi_x002fmin = 8
};
#endif

/* eml2_2ForGsoap.h:10620 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom (-1155)

/* eml22:PressurePerVolumeUom */
enum eml22__PressurePerVolumeUom {
	eml22__PressurePerVolumeUom__Pa_x002fm3 = 0,
	eml22__PressurePerVolumeUom__psi2_x002ed_x002f_x0028cP_x002eft3_x0029 = 1
};
#endif

/* eml2_2ForGsoap.h:10637 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom (-1156)

/* eml22:PressureSquaredPerForceTimePerAreaUom */
enum eml22__PressureSquaredPerForceTimePerAreaUom {
	eml22__PressureSquaredPerForceTimePerAreaUom__0_x002e001_x0020kPa2_x002fcP = 0,
	eml22__PressureSquaredPerForceTimePerAreaUom__bar2_x002fcP = 1,
	eml22__PressureSquaredPerForceTimePerAreaUom__kPa2_x002fcP = 2,
	eml22__PressureSquaredPerForceTimePerAreaUom__Pa2_x002f_x0028Pa_x002es_x0029 = 3,
	eml22__PressureSquaredPerForceTimePerAreaUom__psi2_x002fcP = 4
};
#endif

/* eml2_2ForGsoap.h:10669 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom (-1157)

/* eml22:PressureSquaredUom */
enum eml22__PressureSquaredUom {
	eml22__PressureSquaredUom__bar2 = 0,
	eml22__PressureSquaredUom__GPa2 = 1,
	eml22__PressureSquaredUom__kPa2 = 2,
	eml22__PressureSquaredUom__kpsi2 = 3,
	eml22__PressureSquaredUom__Pa2 = 4,
	eml22__PressureSquaredUom__psi2 = 5
};
#endif

/* eml2_2ForGsoap.h:10706 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom (-1158)

/* eml22:PressureTimePerVolumeUom */
enum eml22__PressureTimePerVolumeUom {
	eml22__PressureTimePerVolumeUom__Pa_x002es_x002fm3 = 0,
	eml22__PressureTimePerVolumeUom__psi_x002ed_x002fbbl = 1
};
#endif

/* eml2_2ForGsoap.h:10723 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom (-1159)

/* eml22:PressureUom */
enum eml22__PressureUom {
	eml22__PressureUom__0_x002e01_x0020lbf_x002fft2 = 0,
	eml22__PressureUom__at = 1,
	eml22__PressureUom__atm = 2,
	eml22__PressureUom__bar = 3,
	eml22__PressureUom__cmH2O_x005b4degC_x005d = 4,
	eml22__PressureUom__cPa = 5,
	eml22__PressureUom__dPa = 6,
	eml22__PressureUom__dyne_x002fcm2 = 7,
	eml22__PressureUom__EPa = 8,
	eml22__PressureUom__fPa = 9,
	eml22__PressureUom__GPa = 10,
	eml22__PressureUom__hbar = 11,
	eml22__PressureUom__inH2O_x005b39degF_x005d = 12,
	eml22__PressureUom__inH2O_x005b60degF_x005d = 13,
	eml22__PressureUom__inHg_x005b32degF_x005d = 14,
	eml22__PressureUom__inHg_x005b60degF_x005d = 15,
	eml22__PressureUom__kgf_x002fcm2 = 16,
	eml22__PressureUom__kgf_x002fm2 = 17,
	eml22__PressureUom__kgf_x002fmm2 = 18,
	eml22__PressureUom__kN_x002fm2 = 19,
	eml22__PressureUom__kPa = 20,
	eml22__PressureUom__kpsi = 21,
	eml22__PressureUom__lbf_x002fft2 = 22,
	eml22__PressureUom__mbar = 23,
	eml22__PressureUom__mmHg_x005b0degC_x005d = 24,
	eml22__PressureUom__mPa = 25,
	eml22__PressureUom__MPa = 26,
	eml22__PressureUom__Mpsi = 27,
	eml22__PressureUom__N_x002fm2 = 28,
	eml22__PressureUom__N_x002fmm2 = 29,
	eml22__PressureUom__nPa = 30,
	eml22__PressureUom__Pa = 31,
	eml22__PressureUom__pPa = 32,
	eml22__PressureUom__psi = 33,
	eml22__PressureUom__tonf_x005bUK_x005d_x002fft2 = 34,
	eml22__PressureUom__tonf_x005bUS_x005d_x002fft2 = 35,
	eml22__PressureUom__tonf_x005bUS_x005d_x002fin2 = 36,
	eml22__PressureUom__torr = 37,
	eml22__PressureUom__TPa = 38,
	eml22__PressureUom__ubar = 39,
	eml22__PressureUom__umHg_x005b0degC_x005d = 40,
	eml22__PressureUom__uPa = 41,
	eml22__PressureUom__upsi = 42
};
#endif

/* eml2_2ForGsoap.h:10945 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom (-1160)

/* eml22:QuantityOfLightUom */
enum eml22__QuantityOfLightUom {
	eml22__QuantityOfLightUom__lm_x002es = 0
};
#endif

/* eml2_2ForGsoap.h:10957 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom (-1161)

/* eml22:RadianceUom */
enum eml22__RadianceUom {
	eml22__RadianceUom__W_x002f_x0028m2_x002esr_x0029 = 0
};
#endif

/* eml2_2ForGsoap.h:10969 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom (-1162)

/* eml22:RadiantIntensityUom */
enum eml22__RadiantIntensityUom {
	eml22__RadiantIntensityUom__W_x002fsr = 0
};
#endif

/* eml2_2ForGsoap.h:10981 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom (-1163)

/* eml22:ReciprocalAreaUom */
enum eml22__ReciprocalAreaUom {
	eml22__ReciprocalAreaUom__1_x002fft2 = 0,
	eml22__ReciprocalAreaUom__1_x002fkm2 = 1,
	eml22__ReciprocalAreaUom__1_x002fm2 = 2,
	eml22__ReciprocalAreaUom__1_x002fmi2 = 3
};
#endif

/* eml2_2ForGsoap.h:11008 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom (-1164)

/* eml22:ReciprocalElectricPotentialDifferenceUom */
enum eml22__ReciprocalElectricPotentialDifferenceUom {
	eml22__ReciprocalElectricPotentialDifferenceUom__1_x002fuV = 0,
	eml22__ReciprocalElectricPotentialDifferenceUom__1_x002fV = 1
};
#endif

/* eml2_2ForGsoap.h:11025 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom (-1165)

/* eml22:ReciprocalForceUom */
enum eml22__ReciprocalForceUom {
	eml22__ReciprocalForceUom__1_x002flbf = 0,
	eml22__ReciprocalForceUom__1_x002fN = 1
};
#endif

/* eml2_2ForGsoap.h:11042 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom (-1166)

/* eml22:ReciprocalLengthUom */
enum eml22__ReciprocalLengthUom {
	eml22__ReciprocalLengthUom__1_x002fangstrom = 0,
	eml22__ReciprocalLengthUom__1_x002fcm = 1,
	eml22__ReciprocalLengthUom__1_x002fft = 2,
	eml22__ReciprocalLengthUom__1_x002fin = 3,
	eml22__ReciprocalLengthUom__1_x002fm = 4,
	eml22__ReciprocalLengthUom__1_x002fmi = 5,
	eml22__ReciprocalLengthUom__1_x002fmm = 6,
	eml22__ReciprocalLengthUom__1_x002fnm = 7,
	eml22__ReciprocalLengthUom__1_x002fyd = 8,
	eml22__ReciprocalLengthUom__1E_9_x00201_x002fft = 9
};
#endif

/* eml2_2ForGsoap.h:11099 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom (-1167)

/* eml22:ReciprocalMassTimeUom */
enum eml22__ReciprocalMassTimeUom {
	eml22__ReciprocalMassTimeUom__1_x002f_x0028kg_x002es_x0029 = 0,
	eml22__ReciprocalMassTimeUom__Bq_x002fkg = 1,
	eml22__ReciprocalMassTimeUom__pCi_x002fg = 2
};
#endif

/* eml2_2ForGsoap.h:11121 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom (-1168)

/* eml22:ReciprocalMassUom */
enum eml22__ReciprocalMassUom {
	eml22__ReciprocalMassUom__1_x002fg = 0,
	eml22__ReciprocalMassUom__1_x002fkg = 1,
	eml22__ReciprocalMassUom__1_x002flbm = 2
};
#endif

/* eml2_2ForGsoap.h:11143 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom (-1169)

/* eml22:ReciprocalPressureUom */
enum eml22__ReciprocalPressureUom {
	eml22__ReciprocalPressureUom__1_x002fbar = 0,
	eml22__ReciprocalPressureUom__1_x002fkPa = 1,
	eml22__ReciprocalPressureUom__1_x002fPa = 2,
	eml22__ReciprocalPressureUom__1_x002fpPa = 3,
	eml22__ReciprocalPressureUom__1_x002fpsi = 4,
	eml22__ReciprocalPressureUom__1_x002fupsi = 5
};
#endif

/* eml2_2ForGsoap.h:11180 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom (-1170)

/* eml22:ReciprocalTimeUom */
enum eml22__ReciprocalTimeUom {
	eml22__ReciprocalTimeUom__1_x002fa = 0,
	eml22__ReciprocalTimeUom__1_x002fd = 1,
	eml22__ReciprocalTimeUom__1_x002fh = 2,
	eml22__ReciprocalTimeUom__1_x002fmin = 3,
	eml22__ReciprocalTimeUom__1_x002fms = 4,
	eml22__ReciprocalTimeUom__1_x002fs = 5,
	eml22__ReciprocalTimeUom__1_x002fus = 6,
	eml22__ReciprocalTimeUom__1_x002fwk = 7
};
#endif

/* eml2_2ForGsoap.h:11227 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom (-1171)

/* eml22:ReciprocalVolumeUom */
enum eml22__ReciprocalVolumeUom {
	eml22__ReciprocalVolumeUom__1_x002fbbl = 0,
	eml22__ReciprocalVolumeUom__1_x002fft3 = 1,
	eml22__ReciprocalVolumeUom__1_x002fgal_x005bUK_x005d = 2,
	eml22__ReciprocalVolumeUom__1_x002fgal_x005bUS_x005d = 3,
	eml22__ReciprocalVolumeUom__1_x002fL = 4,
	eml22__ReciprocalVolumeUom__1_x002fm3 = 5
};
#endif

/* eml2_2ForGsoap.h:11264 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom (-1172)

/* eml22:ReluctanceUom */
enum eml22__ReluctanceUom {
	eml22__ReluctanceUom__1_x002fH = 0
};
#endif

/* eml2_2ForGsoap.h:11276 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom (-1173)

/* eml22:SecondMomentOfAreaUom */
enum eml22__SecondMomentOfAreaUom {
	eml22__SecondMomentOfAreaUom__cm4 = 0,
	eml22__SecondMomentOfAreaUom__in4 = 1,
	eml22__SecondMomentOfAreaUom__m4 = 2
};
#endif

/* eml2_2ForGsoap.h:11298 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom (-1174)

/* eml22:SignalingEventPerTimeUom */
enum eml22__SignalingEventPerTimeUom {
	eml22__SignalingEventPerTimeUom__Bd = 0
};
#endif

/* eml2_2ForGsoap.h:11310 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom (-1175)

/* eml22:SolidAngleUom */
enum eml22__SolidAngleUom {
	eml22__SolidAngleUom__sr = 0
};
#endif

/* eml2_2ForGsoap.h:11322 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom (-1176)

/* eml22:SpecificHeatCapacityUom */
enum eml22__SpecificHeatCapacityUom {
	eml22__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaF_x0029 = 0,
	eml22__SpecificHeatCapacityUom__Btu_x005bIT_x005d_x002f_x0028lbm_x002edeltaR_x0029 = 1,
	eml22__SpecificHeatCapacityUom__cal_x005bth_x005d_x002f_x0028g_x002edeltaK_x0029 = 2,
	eml22__SpecificHeatCapacityUom__J_x002f_x0028g_x002edeltaK_x0029 = 3,
	eml22__SpecificHeatCapacityUom__J_x002f_x0028kg_x002edeltaK_x0029 = 4,
	eml22__SpecificHeatCapacityUom__kcal_x005bth_x005d_x002f_x0028kg_x002edeltaC_x0029 = 5,
	eml22__SpecificHeatCapacityUom__kJ_x002f_x0028kg_x002edeltaK_x0029 = 6,
	eml22__SpecificHeatCapacityUom__kW_x002eh_x002f_x0028kg_x002edeltaC_x0029 = 7
};
#endif

/* eml2_2ForGsoap.h:11369 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom (-1177)

/* eml22:TemperatureIntervalPerLengthUom */
enum eml22__TemperatureIntervalPerLengthUom {
	eml22__TemperatureIntervalPerLengthUom__0_x002e01_x0020deltaF_x002fft = 0,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fft = 1,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fhm = 2,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fkm = 3,
	eml22__TemperatureIntervalPerLengthUom__deltaC_x002fm = 4,
	eml22__TemperatureIntervalPerLengthUom__deltaF_x002fft = 5,
	eml22__TemperatureIntervalPerLengthUom__deltaF_x002fm = 6,
	eml22__TemperatureIntervalPerLengthUom__deltaK_x002fkm = 7,
	eml22__TemperatureIntervalPerLengthUom__deltaK_x002fm = 8
};
#endif

/* eml2_2ForGsoap.h:11421 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom (-1178)

/* eml22:TemperatureIntervalPerPressureUom */
enum eml22__TemperatureIntervalPerPressureUom {
	eml22__TemperatureIntervalPerPressureUom__deltaC_x002fkPa = 0,
	eml22__TemperatureIntervalPerPressureUom__deltaF_x002fpsi = 1,
	eml22__TemperatureIntervalPerPressureUom__deltaK_x002fPa = 2
};
#endif

/* eml2_2ForGsoap.h:11443 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom (-1179)

/* eml22:TemperatureIntervalPerTimeUom */
enum eml22__TemperatureIntervalPerTimeUom {
	eml22__TemperatureIntervalPerTimeUom__deltaC_x002fh = 0,
	eml22__TemperatureIntervalPerTimeUom__deltaC_x002fmin = 1,
	eml22__TemperatureIntervalPerTimeUom__deltaC_x002fs = 2,
	eml22__TemperatureIntervalPerTimeUom__deltaF_x002fh = 3,
	eml22__TemperatureIntervalPerTimeUom__deltaF_x002fmin = 4,
	eml22__TemperatureIntervalPerTimeUom__deltaF_x002fs = 5,
	eml22__TemperatureIntervalPerTimeUom__deltaK_x002fs = 6
};
#endif

/* eml2_2ForGsoap.h:11485 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom (-1180)

/* eml22:TemperatureIntervalUom */
enum eml22__TemperatureIntervalUom {
	eml22__TemperatureIntervalUom__deltaC = 0,
	eml22__TemperatureIntervalUom__deltaF = 1,
	eml22__TemperatureIntervalUom__deltaK = 2,
	eml22__TemperatureIntervalUom__deltaR = 3
};
#endif

/* eml2_2ForGsoap.h:11512 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom (-1181)

/* eml22:ThermalConductanceUom */
enum eml22__ThermalConductanceUom {
	eml22__ThermalConductanceUom__W_x002fdeltaK = 0
};
#endif

/* eml2_2ForGsoap.h:11524 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom (-1182)

/* eml22:ThermalConductivityUom */
enum eml22__ThermalConductivityUom {
	eml22__ThermalConductivityUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft_x002edeltaF_x0029 = 0,
	eml22__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028h_x002ecm_x002edeltaC_x0029 = 1,
	eml22__ThermalConductivityUom__cal_x005bth_x005d_x002f_x0028s_x002ecm_x002edeltaC_x0029 = 2,
	eml22__ThermalConductivityUom__kcal_x005bth_x005d_x002f_x0028h_x002em_x002edeltaC_x0029 = 3,
	eml22__ThermalConductivityUom__W_x002f_x0028m_x002edeltaK_x0029 = 4
};
#endif

/* eml2_2ForGsoap.h:11556 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom (-1183)

/* eml22:ThermalDiffusivityUom */
enum eml22__ThermalDiffusivityUom {
	eml22__ThermalDiffusivityUom__cm2_x002fs = 0,
	eml22__ThermalDiffusivityUom__ft2_x002fh = 1,
	eml22__ThermalDiffusivityUom__ft2_x002fs = 2,
	eml22__ThermalDiffusivityUom__in2_x002fs = 3,
	eml22__ThermalDiffusivityUom__m2_x002fh = 4,
	eml22__ThermalDiffusivityUom__m2_x002fs = 5,
	eml22__ThermalDiffusivityUom__mm2_x002fs = 6
};
#endif

/* eml2_2ForGsoap.h:11598 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom (-1184)

/* eml22:ThermalInsulanceUom */
enum eml22__ThermalInsulanceUom {
	eml22__ThermalInsulanceUom__deltaC_x002em2_x002eh_x002fkcal_x005bth_x005d = 0,
	eml22__ThermalInsulanceUom__deltaF_x002eft2_x002eh_x002fBtu_x005bIT_x005d = 1,
	eml22__ThermalInsulanceUom__deltaK_x002em2_x002fkW = 2,
	eml22__ThermalInsulanceUom__deltaK_x002em2_x002fW = 3
};
#endif

/* eml2_2ForGsoap.h:11625 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom (-1185)

/* eml22:ThermalResistanceUom */
enum eml22__ThermalResistanceUom {
	eml22__ThermalResistanceUom__deltaK_x002fW = 0
};
#endif

/* eml2_2ForGsoap.h:11637 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-1186)

/* eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUom */
enum eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom {
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degC_x002fdegC = 0,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degF_x002fdegF = 1,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__degR_x002fdegR = 2,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__Euc = 3,
	eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom__K_x002fK = 4
};
#endif

/* eml2_2ForGsoap.h:11669 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom (-1187)

/* eml22:ThermodynamicTemperatureUom */
enum eml22__ThermodynamicTemperatureUom {
	eml22__ThermodynamicTemperatureUom__K = 'K',
	eml22__ThermodynamicTemperatureUom__degC = 'L',
	eml22__ThermodynamicTemperatureUom__degF = 'M',
	eml22__ThermodynamicTemperatureUom__degR = 'N'
};
#endif

/* eml2_2ForGsoap.h:11696 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom (-1188)

/* eml22:TimePerLengthUom */
enum eml22__TimePerLengthUom {
	eml22__TimePerLengthUom__0_x002e001_x0020h_x002fft = 0,
	eml22__TimePerLengthUom__h_x002fkm = 1,
	eml22__TimePerLengthUom__min_x002fft = 2,
	eml22__TimePerLengthUom__min_x002fm = 3,
	eml22__TimePerLengthUom__ms_x002fcm = 4,
	eml22__TimePerLengthUom__ms_x002fft = 5,
	eml22__TimePerLengthUom__ms_x002fin = 6,
	eml22__TimePerLengthUom__ms_x002fm = 7,
	eml22__TimePerLengthUom__ns_x002fft = 8,
	eml22__TimePerLengthUom__ns_x002fm = 9,
	eml22__TimePerLengthUom__s_x002fcm = 10,
	eml22__TimePerLengthUom__s_x002fft = 11,
	eml22__TimePerLengthUom__s_x002fin = 12,
	eml22__TimePerLengthUom__s_x002fm = 13,
	eml22__TimePerLengthUom__us_x002fft = 14,
	eml22__TimePerLengthUom__us_x002fin = 15,
	eml22__TimePerLengthUom__us_x002fm = 16
};
#endif

/* eml2_2ForGsoap.h:11788 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom (-1189)

/* eml22:TimePerMassUom */
enum eml22__TimePerMassUom {
	eml22__TimePerMassUom__s_x002fkg = 0
};
#endif

/* eml2_2ForGsoap.h:11800 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom (-1190)

/* eml22:TimePerTimeUom */
enum eml22__TimePerTimeUom {
	eml22__TimePerTimeUom___x0025 = 0,
	eml22__TimePerTimeUom__Euc = 1,
	eml22__TimePerTimeUom__ms_x002fs = 2,
	eml22__TimePerTimeUom__s_x002fs = 3
};
#endif

/* eml2_2ForGsoap.h:11827 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom (-1191)

/* eml22:TimePerVolumeUom */
enum eml22__TimePerVolumeUom {
	eml22__TimePerVolumeUom__0_x002e001_x0020d_x002fft3 = 0,
	eml22__TimePerVolumeUom__d_x002fbbl = 1,
	eml22__TimePerVolumeUom__d_x002fft3 = 2,
	eml22__TimePerVolumeUom__d_x002fm3 = 3,
	eml22__TimePerVolumeUom__h_x002fft3 = 4,
	eml22__TimePerVolumeUom__h_x002fm3 = 5,
	eml22__TimePerVolumeUom__s_x002fft3 = 6,
	eml22__TimePerVolumeUom__s_x002fL = 7,
	eml22__TimePerVolumeUom__s_x002fm3 = 8,
	eml22__TimePerVolumeUom__s_x002fqt_x005bUK_x005d = 9,
	eml22__TimePerVolumeUom__s_x002fqt_x005bUS_x005d = 10
};
#endif

/* eml2_2ForGsoap.h:11889 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom (-1192)

/* eml22:TimeUom */
enum eml22__TimeUom {
	eml22__TimeUom__a = 'a',
	eml22__TimeUom__d = 'd',
	eml22__TimeUom__h = 'h',
	eml22__TimeUom__s = 's',
	eml22__TimeUom__1_x002f2_x0020ms = 't',
	eml22__TimeUom__100_x0020ka_x005bt_x005d = 'u',
	eml22__TimeUom__a_x005bt_x005d = 'v',
	eml22__TimeUom__ca = 'w',
	eml22__TimeUom__cs = 'x',
	eml22__TimeUom__ds = 'y',
	eml22__TimeUom__Ea_x005bt_x005d = 'z',
	eml22__TimeUom__fa = 123,
	eml22__TimeUom__Ga_x005bt_x005d = 124,
	eml22__TimeUom__hs = 125,
	eml22__TimeUom__ka_x005bt_x005d = 126,
	eml22__TimeUom__Ma_x005bt_x005d = 127,
	eml22__TimeUom__min_ = 128,
	eml22__TimeUom__ms = 129,
	eml22__TimeUom__na = 130,
	eml22__TimeUom__ns = 131,
	eml22__TimeUom__ps = 132,
	eml22__TimeUom__Ta_x005bt_x005d = 133,
	eml22__TimeUom__us = 134,
	eml22__TimeUom__wk = 135
};
#endif

/* eml2_2ForGsoap.h:12020 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom (-1193)

/* eml22:VerticalCoordinateUom */
enum eml22__VerticalCoordinateUom {
	eml22__VerticalCoordinateUom__m = 'm',
	eml22__VerticalCoordinateUom__ft = 'n',
	eml22__VerticalCoordinateUom__ftUS = 'o',
	eml22__VerticalCoordinateUom__ftBr_x002865_x0029 = 'p'
};
#endif

/* eml2_2ForGsoap.h:12047 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom (-1194)

/* eml22:VolumeFlowRatePerVolumeFlowRateUom */
enum eml22__VolumeFlowRatePerVolumeFlowRateUom {
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0025 = 0,
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0028bbl_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 1,
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fd_x0029_x002f_x0028m3_x002fd_x0029 = 2,
	eml22__VolumeFlowRatePerVolumeFlowRateUom___x0028m3_x002fs_x0029_x002f_x0028m3_x002fs_x0029 = 3,
	eml22__VolumeFlowRatePerVolumeFlowRateUom__1E6_x0020_x0028ft3_x002fd_x0029_x002f_x0028bbl_x002fd_x0029 = 4,
	eml22__VolumeFlowRatePerVolumeFlowRateUom__Euc = 5
};
#endif

/* eml2_2ForGsoap.h:12084 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom (-1195)

/* eml22:VolumePerAreaUom */
enum eml22__VolumePerAreaUom {
	eml22__VolumePerAreaUom__1E6_x0020bbl_x002facre = 0,
	eml22__VolumePerAreaUom__bbl_x002facre = 1,
	eml22__VolumePerAreaUom__ft3_x002fft2 = 2,
	eml22__VolumePerAreaUom__m3_x002fm2 = 3
};
#endif

/* eml2_2ForGsoap.h:12111 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom (-1196)

/* eml22:VolumePerLengthUom */
enum eml22__VolumePerLengthUom {
	eml22__VolumePerLengthUom__0_x002e01_x0020dm3_x002fkm = 0,
	eml22__VolumePerLengthUom__0_x002e01_x0020L_x002fkm = 1,
	eml22__VolumePerLengthUom__bbl_x002fft = 2,
	eml22__VolumePerLengthUom__bbl_x002fin = 3,
	eml22__VolumePerLengthUom__bbl_x002fmi = 4,
	eml22__VolumePerLengthUom__dm3_x002fm = 5,
	eml22__VolumePerLengthUom__ft3_x002fft = 6,
	eml22__VolumePerLengthUom__gal_x005bUK_x005d_x002fmi = 7,
	eml22__VolumePerLengthUom__gal_x005bUS_x005d_x002fft = 8,
	eml22__VolumePerLengthUom__gal_x005bUS_x005d_x002fmi = 9,
	eml22__VolumePerLengthUom__in3_x002fft = 10,
	eml22__VolumePerLengthUom__L_x002fm = 11,
	eml22__VolumePerLengthUom__m3_x002fkm = 12,
	eml22__VolumePerLengthUom__m3_x002fm = 13
};
#endif

/* eml2_2ForGsoap.h:12188 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom (-1197)

/* eml22:VolumePerMassUom */
enum eml22__VolumePerMassUom {
	eml22__VolumePerMassUom__0_x002e01_x0020L_x002fkg = 0,
	eml22__VolumePerMassUom__bbl_x002fton_x005bUK_x005d = 1,
	eml22__VolumePerMassUom__bbl_x002fton_x005bUS_x005d = 2,
	eml22__VolumePerMassUom__cm3_x002fg = 3,
	eml22__VolumePerMassUom__dm3_x002fkg = 4,
	eml22__VolumePerMassUom__dm3_x002ft = 5,
	eml22__VolumePerMassUom__ft3_x002fkg = 6,
	eml22__VolumePerMassUom__ft3_x002flbm = 7,
	eml22__VolumePerMassUom__ft3_x002fsack_x005b94lbm_x005d = 8,
	eml22__VolumePerMassUom__gal_x005bUK_x005d_x002flbm = 9,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002flbm = 10,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002fsack_x005b94lbm_x005d = 11,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUK_x005d = 12,
	eml22__VolumePerMassUom__gal_x005bUS_x005d_x002fton_x005bUS_x005d = 13,
	eml22__VolumePerMassUom__L_x002fkg = 14,
	eml22__VolumePerMassUom__L_x002ft = 15,
	eml22__VolumePerMassUom__L_x002fton_x005bUK_x005d = 16,
	eml22__VolumePerMassUom__m3_x002fg = 17,
	eml22__VolumePerMassUom__m3_x002fkg = 18,
	eml22__VolumePerMassUom__m3_x002ft = 19,
	eml22__VolumePerMassUom__m3_x002fton_x005bUK_x005d = 20,
	eml22__VolumePerMassUom__m3_x002fton_x005bUS_x005d = 21
};
#endif

/* eml2_2ForGsoap.h:12305 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom (-1198)

/* eml22:VolumePerPressureUom */
enum eml22__VolumePerPressureUom {
	eml22__VolumePerPressureUom__bbl_x002fpsi = 0,
	eml22__VolumePerPressureUom__m3_x002fkPa = 1,
	eml22__VolumePerPressureUom__m3_x002fPa = 2
};
#endif

/* eml2_2ForGsoap.h:12327 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom (-1199)

/* eml22:VolumePerRotationUom */
enum eml22__VolumePerRotationUom {
	eml22__VolumePerRotationUom__ft3_x002frad = 0,
	eml22__VolumePerRotationUom__m3_x002frad = 1,
	eml22__VolumePerRotationUom__m3_x002frev = 2
};
#endif

/* eml2_2ForGsoap.h:12349 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom (-1200)

/* eml22:VolumePerTimeLengthUom */
enum eml22__VolumePerTimeLengthUom {
	eml22__VolumePerTimeLengthUom__1000_x0020bbl_x002eft_x002fd = 0,
	eml22__VolumePerTimeLengthUom__1000_x0020m4_x002fd = 1,
	eml22__VolumePerTimeLengthUom__m4_x002fs = 2
};
#endif

/* eml2_2ForGsoap.h:12371 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom (-1201)

/* eml22:VolumePerTimePerAreaUom */
enum eml22__VolumePerTimePerAreaUom {
	eml22__VolumePerTimePerAreaUom__ft3_x002f_x0028min_x002eft2_x0029 = 0,
	eml22__VolumePerTimePerAreaUom__ft3_x002f_x0028s_x002eft2_x0029 = 1,
	eml22__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002eft2_x0029 = 2,
	eml22__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028h_x002ein2_x0029 = 3,
	eml22__VolumePerTimePerAreaUom__gal_x005bUK_x005d_x002f_x0028min_x002eft2_x0029 = 4,
	eml22__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002eft2_x0029 = 5,
	eml22__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028h_x002ein2_x0029 = 6,
	eml22__VolumePerTimePerAreaUom__gal_x005bUS_x005d_x002f_x0028min_x002eft2_x0029 = 7,
	eml22__VolumePerTimePerAreaUom__m3_x002f_x0028s_x002em2_x0029 = 8
};
#endif

/* eml2_2ForGsoap.h:12423 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom (-1202)

/* eml22:VolumePerTimePerLengthUom */
enum eml22__VolumePerTimePerLengthUom {
	eml22__VolumePerTimePerLengthUom__1000_x0020ft3_x002f_x0028d_x002eft_x0029 = 0,
	eml22__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028d_x002em_x0029 = 1,
	eml22__VolumePerTimePerLengthUom__1000_x0020m3_x002f_x0028h_x002em_x0029 = 2,
	eml22__VolumePerTimePerLengthUom__bbl_x002f_x0028d_x002eft_x0029 = 3,
	eml22__VolumePerTimePerLengthUom__ft3_x002f_x0028d_x002eft_x0029 = 4,
	eml22__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002eft_x0029 = 5,
	eml22__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028h_x002ein_x0029 = 6,
	eml22__VolumePerTimePerLengthUom__gal_x005bUK_x005d_x002f_x0028min_x002eft_x0029 = 7,
	eml22__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002eft_x0029 = 8,
	eml22__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028h_x002ein_x0029 = 9,
	eml22__VolumePerTimePerLengthUom__gal_x005bUS_x005d_x002f_x0028min_x002eft_x0029 = 10,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028d_x002em_x0029 = 11,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028h_x002em_x0029 = 12,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002eft_x0029 = 13,
	eml22__VolumePerTimePerLengthUom__m3_x002f_x0028s_x002em_x0029 = 14
};
#endif

/* eml2_2ForGsoap.h:12505 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom (-1203)

/* eml22:VolumePerTimePerPressureLengthUom */
enum eml22__VolumePerTimePerPressureLengthUom {
	eml22__VolumePerTimePerPressureLengthUom__bbl_x002f_x0028ft_x002epsi_x002ed_x0029 = 0,
	eml22__VolumePerTimePerPressureLengthUom__ft3_x002f_x0028ft_x002epsi_x002ed_x0029 = 1,
	eml22__VolumePerTimePerPressureLengthUom__m2_x002f_x0028kPa_x002ed_x0029 = 2,
	eml22__VolumePerTimePerPressureLengthUom__m2_x002f_x0028Pa_x002es_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:12532 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom (-1204)

/* eml22:VolumePerTimePerPressureUom */
enum eml22__VolumePerTimePerPressureUom {
	eml22__VolumePerTimePerPressureUom__1000_x0020ft3_x002f_x0028psi_x002ed_x0029 = 0,
	eml22__VolumePerTimePerPressureUom__bbl_x002f_x0028kPa_x002ed_x0029 = 1,
	eml22__VolumePerTimePerPressureUom__bbl_x002f_x0028psi_x002ed_x0029 = 2,
	eml22__VolumePerTimePerPressureUom__L_x002f_x0028bar_x002emin_x0029 = 3,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002ed_x0029 = 4,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002eh_x0029 = 5,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028bar_x002emin_x0029 = 6,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002ed_x0029 = 7,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028kPa_x002eh_x0029 = 8,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028Pa_x002es_x0029 = 9,
	eml22__VolumePerTimePerPressureUom__m3_x002f_x0028psi_x002ed_x0029 = 10
};
#endif

/* eml2_2ForGsoap.h:12594 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom (-1205)

/* eml22:VolumePerTimePerTimeUom */
enum eml22__VolumePerTimePerTimeUom {
	eml22__VolumePerTimePerTimeUom__bbl_x002fd2 = 0,
	eml22__VolumePerTimePerTimeUom__bbl_x002fh2 = 1,
	eml22__VolumePerTimePerTimeUom__dm3_x002fs2 = 2,
	eml22__VolumePerTimePerTimeUom__ft3_x002fd2 = 3,
	eml22__VolumePerTimePerTimeUom__ft3_x002fh2 = 4,
	eml22__VolumePerTimePerTimeUom__ft3_x002fmin2 = 5,
	eml22__VolumePerTimePerTimeUom__ft3_x002fs2 = 6,
	eml22__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fh2 = 7,
	eml22__VolumePerTimePerTimeUom__gal_x005bUK_x005d_x002fmin2 = 8,
	eml22__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fh2 = 9,
	eml22__VolumePerTimePerTimeUom__gal_x005bUS_x005d_x002fmin2 = 10,
	eml22__VolumePerTimePerTimeUom__L_x002fs2 = 11,
	eml22__VolumePerTimePerTimeUom__m3_x002fd2 = 12,
	eml22__VolumePerTimePerTimeUom__m3_x002fs2 = 13
};
#endif

/* eml2_2ForGsoap.h:12671 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom (-1206)

/* eml22:VolumePerTimePerVolumeUom */
enum eml22__VolumePerTimePerVolumeUom {
	eml22__VolumePerTimePerVolumeUom__bbl_x002f_x0028d_x002eacre_x002eft_x0029 = 0,
	eml22__VolumePerTimePerVolumeUom__m3_x002f_x0028s_x002em3_x0029 = 1
};
#endif

/* eml2_2ForGsoap.h:12688 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom (-1207)

/* eml22:VolumePerTimeUom */
enum eml22__VolumePerTimeUom {
	eml22__VolumePerTimeUom__1_x002f30_x0020cm3_x002fmin = 0,
	eml22__VolumePerTimeUom__1000_x0020bbl_x002fd = 1,
	eml22__VolumePerTimeUom__1000_x0020ft3_x002fd = 2,
	eml22__VolumePerTimeUom__1000_x0020m3_x002fd = 3,
	eml22__VolumePerTimeUom__1000_x0020m3_x002fh = 4,
	eml22__VolumePerTimeUom__1E6_x0020bbl_x002fd = 5,
	eml22__VolumePerTimeUom__1E6_x0020ft3_x002fd = 6,
	eml22__VolumePerTimeUom__1E6_x0020m3_x002fd = 7,
	eml22__VolumePerTimeUom__bbl_x002fd = 8,
	eml22__VolumePerTimeUom__bbl_x002fh = 9,
	eml22__VolumePerTimeUom__bbl_x002fmin = 10,
	eml22__VolumePerTimeUom__cm3_x002fh = 11,
	eml22__VolumePerTimeUom__cm3_x002fmin = 12,
	eml22__VolumePerTimeUom__cm3_x002fs = 13,
	eml22__VolumePerTimeUom__dm3_x002fs = 14,
	eml22__VolumePerTimeUom__ft3_x002fd = 15,
	eml22__VolumePerTimeUom__ft3_x002fh = 16,
	eml22__VolumePerTimeUom__ft3_x002fmin = 17,
	eml22__VolumePerTimeUom__ft3_x002fs = 18,
	eml22__VolumePerTimeUom__gal_x005bUK_x005d_x002fd = 19,
	eml22__VolumePerTimeUom__gal_x005bUK_x005d_x002fh = 20,
	eml22__VolumePerTimeUom__gal_x005bUK_x005d_x002fmin = 21,
	eml22__VolumePerTimeUom__gal_x005bUS_x005d_x002fd = 22,
	eml22__VolumePerTimeUom__gal_x005bUS_x005d_x002fh = 23,
	eml22__VolumePerTimeUom__gal_x005bUS_x005d_x002fmin = 24,
	eml22__VolumePerTimeUom__L_x002fh = 25,
	eml22__VolumePerTimeUom__L_x002fmin = 26,
	eml22__VolumePerTimeUom__L_x002fs = 27,
	eml22__VolumePerTimeUom__m3_x002fd = 28,
	eml22__VolumePerTimeUom__m3_x002fh = 29,
	eml22__VolumePerTimeUom__m3_x002fmin = 30,
	eml22__VolumePerTimeUom__m3_x002fs = 31
};
#endif

/* eml2_2ForGsoap.h:12855 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom (-1208)

/* eml22:VolumePerVolumeUom */
enum eml22__VolumePerVolumeUom {
	eml22__VolumePerVolumeUom___x0025 = 0,
	eml22__VolumePerVolumeUom___x0025_x005bvol_x005d = 1,
	eml22__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fft3 = 2,
	eml22__VolumePerVolumeUom__0_x002e001_x0020bbl_x002fm3 = 3,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fbbl = 4,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUK_x005d_x002fgal_x005bUK_x005d = 5,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fbbl = 6,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fft3 = 7,
	eml22__VolumePerVolumeUom__0_x002e001_x0020gal_x005bUS_x005d_x002fgal_x005bUS_x005d = 8,
	eml22__VolumePerVolumeUom__0_x002e001_x0020pt_x005bUK_x005d_x002fbbl = 9,
	eml22__VolumePerVolumeUom__0_x002e01_x0020bbl_x002fbbl = 10,
	eml22__VolumePerVolumeUom__0_x002e1_x0020gal_x005bUS_x005d_x002fbbl = 11,
	eml22__VolumePerVolumeUom__0_x002e1_x0020L_x002fbbl = 12,
	eml22__VolumePerVolumeUom__0_x002e1_x0020pt_x005bUS_x005d_x002fbbl = 13,
	eml22__VolumePerVolumeUom__1000_x0020ft3_x002fbbl = 14,
	eml22__VolumePerVolumeUom__1000_x0020m3_x002fm3 = 15,
	eml22__VolumePerVolumeUom__1E_6_x0020acre_x002eft_x002fbbl = 16,
	eml22__VolumePerVolumeUom__1E_6_x0020bbl_x002fft3 = 17,
	eml22__VolumePerVolumeUom__1E_6_x0020bbl_x002fm3 = 18,
	eml22__VolumePerVolumeUom__1E6_x0020bbl_x002f_x0028acre_x002eft_x0029 = 19,
	eml22__VolumePerVolumeUom__1E6_x0020ft3_x002f_x0028acre_x002eft_x0029 = 20,
	eml22__VolumePerVolumeUom__1E6_x0020ft3_x002fbbl = 21,
	eml22__VolumePerVolumeUom__bbl_x002f_x0028acre_x002eft_x0029 = 22,
	eml22__VolumePerVolumeUom__bbl_x002fbbl = 23,
	eml22__VolumePerVolumeUom__bbl_x002fft3 = 24,
	eml22__VolumePerVolumeUom__bbl_x002fm3 = 25,
	eml22__VolumePerVolumeUom__cEuc = 26,
	eml22__VolumePerVolumeUom__cm3_x002fcm3 = 27,
	eml22__VolumePerVolumeUom__cm3_x002fL = 28,
	eml22__VolumePerVolumeUom__cm3_x002fm3 = 29,
	eml22__VolumePerVolumeUom__dm3_x002fm3 = 30,
	eml22__VolumePerVolumeUom__Euc = 31,
	eml22__VolumePerVolumeUom__ft3_x002fbbl = 32,
	eml22__VolumePerVolumeUom__ft3_x002fft3 = 33,
	eml22__VolumePerVolumeUom__gal_x005bUK_x005d_x002fft3 = 34,
	eml22__VolumePerVolumeUom__gal_x005bUS_x005d_x002fbbl = 35,
	eml22__VolumePerVolumeUom__gal_x005bUS_x005d_x002fft3 = 36,
	eml22__VolumePerVolumeUom__L_x002fm3 = 37,
	eml22__VolumePerVolumeUom__m3_x002f_x0028ha_x002em_x0029 = 38,
	eml22__VolumePerVolumeUom__m3_x002fbbl = 39,
	eml22__VolumePerVolumeUom__m3_x002fm3 = 40,
	eml22__VolumePerVolumeUom__mL_x002fgal_x005bUK_x005d = 41,
	eml22__VolumePerVolumeUom__mL_x002fgal_x005bUS_x005d = 42,
	eml22__VolumePerVolumeUom__mL_x002fmL = 43,
	eml22__VolumePerVolumeUom__ppk = 44,
	eml22__VolumePerVolumeUom__ppm = 45,
	eml22__VolumePerVolumeUom__ppm_x005bvol_x005d = 46
};
#endif

/* eml2_2ForGsoap.h:13097 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom (-1209)

/* eml22:VolumetricHeatTransferCoefficientUom */
enum eml22__VolumetricHeatTransferCoefficientUom {
	eml22__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028h_x002eft3_x002edeltaF_x0029 = 0,
	eml22__VolumetricHeatTransferCoefficientUom__Btu_x005bIT_x005d_x002f_x0028s_x002eft3_x002edeltaF_x0029 = 1,
	eml22__VolumetricHeatTransferCoefficientUom__kW_x002f_x0028m3_x002edeltaK_x0029 = 2,
	eml22__VolumetricHeatTransferCoefficientUom__W_x002f_x0028m3_x002edeltaK_x0029 = 3
};
#endif

/* eml2_2ForGsoap.h:13124 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom (-1210)

/* eml22:VolumetricThermalExpansionUom */
enum eml22__VolumetricThermalExpansionUom {
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaC = 0,
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaF = 1,
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaK = 2,
	eml22__VolumetricThermalExpansionUom__1_x002fdeltaR = 3,
	eml22__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaC_x0029 = 4,
	eml22__VolumetricThermalExpansionUom__1E_6_x0020m3_x002f_x0028m3_x002edeltaF_x0029 = 5,
	eml22__VolumetricThermalExpansionUom__m3_x002f_x0028m3_x002edeltaK_x0029 = 6,
	eml22__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaC = 7,
	eml22__VolumetricThermalExpansionUom__ppm_x005bvol_x005d_x002fdeltaF = 8
};
#endif

/* eml2_2ForGsoap.h:13176 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom (-1211)

/* eml22:VolumeUom */
enum eml22__VolumeUom {
	eml22__VolumeUom__L = 'L',
	eml22__VolumeUom__1000_x0020bbl = 'M',
	eml22__VolumeUom__1000_x0020ft3 = 'N',
	eml22__VolumeUom__1000_x0020gal_x005bUK_x005d = 'O',
	eml22__VolumeUom__1000_x0020gal_x005bUS_x005d = 'P',
	eml22__VolumeUom__1000_x0020m3 = 'Q',
	eml22__VolumeUom__1E_6_x0020gal_x005bUS_x005d = 'R',
	eml22__VolumeUom__1E12_x0020ft3 = 'S',
	eml22__VolumeUom__1E6_x0020bbl = 'T',
	eml22__VolumeUom__1E6_x0020ft3 = 'U',
	eml22__VolumeUom__1E6_x0020m3 = 'V',
	eml22__VolumeUom__1E9_x0020bbl = 'W',
	eml22__VolumeUom__1E9_x0020ft3 = 'X',
	eml22__VolumeUom__acre_x002eft = 'Y',
	eml22__VolumeUom__bbl = 'Z',
	eml22__VolumeUom__cm3 = 91,
	eml22__VolumeUom__dm3 = 92,
	eml22__VolumeUom__floz_x005bUK_x005d = 93,
	eml22__VolumeUom__floz_x005bUS_x005d = 94,
	eml22__VolumeUom__ft3 = 95,
	eml22__VolumeUom__gal_x005bUK_x005d = 96,
	eml22__VolumeUom__gal_x005bUS_x005d = 'a',
	eml22__VolumeUom__ha_x002em = 'b',
	eml22__VolumeUom__hL = 'c',
	eml22__VolumeUom__in3 = 'd',
	eml22__VolumeUom__km3 = 'e',
	eml22__VolumeUom__m3 = 'f',
	eml22__VolumeUom__mi3 = 'g',
	eml22__VolumeUom__mL = 'h',
	eml22__VolumeUom__mm3 = 'i',
	eml22__VolumeUom__pt_x005bUK_x005d = 'j',
	eml22__VolumeUom__pt_x005bUS_x005d = 'k',
	eml22__VolumeUom__qt_x005bUK_x005d = 'l',
	eml22__VolumeUom__qt_x005bUS_x005d = 'm',
	eml22__VolumeUom__um2_x002em = 'n',
	eml22__VolumeUom__yd3 = 'o'
};
#endif

/* eml2_2ForGsoap.h:13411 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DisplaySpace
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DisplaySpace (-1212)

/* resqml2:DisplaySpace */
enum resqml2__DisplaySpace {
	resqml2__DisplaySpace__device = 0,
	resqml2__DisplaySpace__model = 1
};
#endif

/* eml2_2ForGsoap.h:13420 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePattern
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePattern (-1213)

/* resqml2:EdgePattern */
enum resqml2__EdgePattern {
	resqml2__EdgePattern__dashed = 0,
	resqml2__EdgePattern__dotted = 1,
	resqml2__EdgePattern__solid = 2,
	resqml2__EdgePattern__wavy = 3
};
#endif

/* eml2_2ForGsoap.h:13431 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationDomain
#define SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationDomain (-1214)

/* resqml2:InterpolationDomain */
enum resqml2__InterpolationDomain {
	resqml2__InterpolationDomain__hsv = 0,
	resqml2__InterpolationDomain__rgb = 1
};
#endif

/* eml2_2ForGsoap.h:13440 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationMethod
#define SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationMethod (-1215)

/* resqml2:InterpolationMethod */
enum resqml2__InterpolationMethod {
	resqml2__InterpolationMethod__linear = 0,
	resqml2__InterpolationMethod__logarithmic = 1
};
#endif

/* eml2_2ForGsoap.h:13449 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbol
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbol (-1216)

/* resqml2:NodeSymbol */
enum resqml2__NodeSymbol {
	resqml2__NodeSymbol__circle = 0,
	resqml2__NodeSymbol__cross = 1,
	resqml2__NodeSymbol__cube = 2,
	resqml2__NodeSymbol__diamond = 3,
	resqml2__NodeSymbol__plus = 4,
	resqml2__NodeSymbol__point = 5,
	resqml2__NodeSymbol__pyramid = 6,
	resqml2__NodeSymbol__sphere = 7,
	resqml2__NodeSymbol__star = 8,
	resqml2__NodeSymbol__tetrahedron = 9
};
#endif

/* eml2_2ForGsoap.h:13466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKind (-1217)

/* resqml2:ViewerKind */
enum resqml2__ViewerKind {
	resqml2__ViewerKind__3d = 0,
	resqml2__ViewerKind__base_x0020map = 1,
	resqml2__ViewerKind__section = 2,
	resqml2__ViewerKind__well_x0020correlation = 3
};
#endif

/* eml2_2ForGsoap.h:13481 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FluidContact
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FluidContact (-1218)

/* resqml2:FluidContact */
enum resqml2__FluidContact {
	resqml2__FluidContact__free_x0020water_x0020contact = 0,
	resqml2__FluidContact__gas_x0020oil_x0020contact = 1,
	resqml2__FluidContact__gas_x0020water_x0020contact = 2,
	resqml2__FluidContact__seal = 3,
	resqml2__FluidContact__water_x0020oil_x0020contact = 4
};
#endif

/* eml2_2ForGsoap.h:13517 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FluidMarker
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FluidMarker (-1219)

/* resqml2:FluidMarker */
enum resqml2__FluidMarker {
	resqml2__FluidMarker__gas_x0020down_x0020to = 0,
	resqml2__FluidMarker__gas_x0020up_x0020to = 1,
	resqml2__FluidMarker__oil_x0020down_x0020to = 2,
	resqml2__FluidMarker__oil_x0020up_x0020to = 3,
	resqml2__FluidMarker__water_x0020down_x0020to = 4,
	resqml2__FluidMarker__water_x0020up_x0020to = 5
};
#endif

/* eml2_2ForGsoap.h:13535 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Phase
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Phase (-1220)

/* resqml2:Phase */
enum resqml2__Phase {
	resqml2__Phase__aquifer = 0,
	resqml2__Phase__gas_x0020cap = 1,
	resqml2__Phase__oil_x0020column = 2,
	resqml2__Phase__seal = 3
};
#endif

/* eml2_2ForGsoap.h:13566 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryRelation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryRelation (-1221)

/* resqml2:BoundaryRelation */
enum resqml2__BoundaryRelation {
	resqml2__BoundaryRelation__conformable = 0,
	resqml2__BoundaryRelation__unconformable_x0020below_x0020and_x0020above = 1,
	resqml2__BoundaryRelation__unconformable_x0020above = 2,
	resqml2__BoundaryRelation__unconformable_x0020below = 3
};
#endif

/* eml2_2ForGsoap.h:13594 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactMode
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactMode (-1222)

/* resqml2:ContactMode */
enum resqml2__ContactMode {
	resqml2__ContactMode__conformable = 0,
	resqml2__ContactMode__extended = 1,
	resqml2__ContactMode__unconformable = 2
};
#endif

/* eml2_2ForGsoap.h:13609 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactSide
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactSide (-1223)

/* resqml2:ContactSide */
enum resqml2__ContactSide {
	resqml2__ContactSide__footwall = 0,
	resqml2__ContactSide__hanging_x0020wall = 1,
	resqml2__ContactSide__north = 2,
	resqml2__ContactSide__south = 3,
	resqml2__ContactSide__east = 4,
	resqml2__ContactSide__west = 5,
	resqml2__ContactSide__younger = 6,
	resqml2__ContactSide__older = 7,
	resqml2__ContactSide__both = 8
};
#endif

/* eml2_2ForGsoap.h:13661 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactVerb
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactVerb (-1224)

/* resqml2:ContactVerb */
enum resqml2__ContactVerb {
	resqml2__ContactVerb__stops = 0,
	resqml2__ContactVerb__interrupts = 1,
	resqml2__ContactVerb__crosses = 2
};
#endif

/* eml2_2ForGsoap.h:13683 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DepositionMode
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DepositionMode (-1225)

/* resqml2:DepositionMode */
enum resqml2__DepositionMode {
	resqml2__DepositionMode__proportional_x0020between_x0020top_x0020and_x0020bottom = 0,
	resqml2__DepositionMode__parallel_x0020to_x0020bottom = 1,
	resqml2__DepositionMode__parallel_x0020to_x0020top = 2,
	resqml2__DepositionMode__parallel_x0020to_x0020another_x0020boundary = 3
};
#endif

/* eml2_2ForGsoap.h:13698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Domain
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Domain (-1226)

/* resqml2:Domain */
enum resqml2__Domain {
	resqml2__Domain__depth = 0,
	resqml2__Domain__time = 1,
	resqml2__Domain__mixed = 2
};
#endif

/* eml2_2ForGsoap.h:13724 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitMaterialEmplacement
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitMaterialEmplacement (-1227)

/* resqml2:GeologicUnitMaterialEmplacement */
enum resqml2__GeologicUnitMaterialEmplacement {
	resqml2__GeologicUnitMaterialEmplacement__intrusive = 0,
	resqml2__GeologicUnitMaterialEmplacement__non_intrusive = 1
};
#endif

/* eml2_2ForGsoap.h:13738 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonStratigraphicRole
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonStratigraphicRole (-1228)

/* resqml2:HorizonStratigraphicRole */
enum resqml2__HorizonStratigraphicRole {
	resqml2__HorizonStratigraphicRole__chronostratigraphic = 0,
	resqml2__HorizonStratigraphicRole__lithostratigraphic = 1,
	resqml2__HorizonStratigraphicRole__biostratigraphic = 2
};
#endif

/* eml2_2ForGsoap.h:13752 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__OrderingCriteria
#define SOAP_TYPE_gsoap_eml2_2_resqml2__OrderingCriteria (-1229)

/* resqml2:OrderingCriteria */
enum resqml2__OrderingCriteria {
	resqml2__OrderingCriteria__age = 0,
	resqml2__OrderingCriteria__apparent_x0020depth = 1,
	resqml2__OrderingCriteria__measured_x0020depth = 2
};
#endif

/* eml2_2ForGsoap.h:13778 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SequenceStratigraphySurface
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SequenceStratigraphySurface (-1230)

/* resqml2:SequenceStratigraphySurface */
enum resqml2__SequenceStratigraphySurface {
	resqml2__SequenceStratigraphySurface__flooding = 0,
	resqml2__SequenceStratigraphySurface__ravinement = 1,
	resqml2__SequenceStratigraphySurface__maximum_x0020flooding = 2,
	resqml2__SequenceStratigraphySurface__transgressive = 3
};
#endif

/* eml2_2ForGsoap.h:13793 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3d (-1231)

/* resqml2:Shape3d */
enum resqml2__Shape3d {
	resqml2__Shape3d__sheet = 0,
	resqml2__Shape3d__dyke = 1,
	resqml2__Shape3d__dome = 2,
	resqml2__Shape3d__mushroom = 3,
	resqml2__Shape3d__channel = 4,
	resqml2__Shape3d__delta = 5,
	resqml2__Shape3d__dune = 6,
	resqml2__Shape3d__fan = 7,
	resqml2__Shape3d__reef = 8,
	resqml2__Shape3d__wedge = 9
};
#endif

/* eml2_2ForGsoap.h:13814 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitKind (-1232)

/* resqml2:StratigraphicUnitKind */
enum resqml2__StratigraphicUnitKind {
	resqml2__StratigraphicUnitKind__chronostratigraphic = 0,
	resqml2__StratigraphicUnitKind__lithostratigraphic = 1,
	resqml2__StratigraphicUnitKind__biostratigraphic = 2
};
#endif

/* eml2_2ForGsoap.h:13828 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKind (-1233)

/* resqml2:ThrowKind */
enum resqml2__ThrowKind {
	resqml2__ThrowKind__reverse = 0,
	resqml2__ThrowKind__normal = 1,
	resqml2__ThrowKind__thrust = 2,
	resqml2__ThrowKind__strike_x0020and_x0020slip = 3,
	resqml2__ThrowKind__scissor = 4,
	resqml2__ThrowKind__variable = 5
};
#endif

/* eml2_2ForGsoap.h:13849 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MdDomain
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MdDomain (-1234)

/* resqml2:MdDomain */
enum resqml2__MdDomain {
	resqml2__MdDomain__driller = 0,
	resqml2__MdDomain__logger = 1
};
#endif

/* eml2_2ForGsoap.h:13870 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameIndexableElements (-1235)

/* resqml2:WellboreFrameIndexableElements */
enum resqml2__WellboreFrameIndexableElements {
	resqml2__WellboreFrameIndexableElements__intervals = 0,
	resqml2__WellboreFrameIndexableElements__nodes = 1,
	resqml2__WellboreFrameIndexableElements__cells = 2,
	resqml2__WellboreFrameIndexableElements__intervals_x0020from_x0020datum = 3
};
#endif

/* eml2_2ForGsoap.h:13898 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicBoundaryKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicBoundaryKind (-1236)

/* resqml2:GeologicBoundaryKind */
enum resqml2__GeologicBoundaryKind {
	resqml2__GeologicBoundaryKind__fault = 0,
	resqml2__GeologicBoundaryKind__geobody = 1,
	resqml2__GeologicBoundaryKind__horizon = 2
};
#endif

/* eml2_2ForGsoap.h:13912 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LineRole
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LineRole (-1237)

/* resqml2:LineRole */
enum resqml2__LineRole {
	resqml2__LineRole__fault_x0020center_x0020line = 0,
	resqml2__LineRole__pick = 1,
	resqml2__LineRole__inner_x0020ring = 2,
	resqml2__LineRole__outer_x0020ring = 3,
	resqml2__LineRole__trajectory = 4,
	resqml2__LineRole__interpretation_x0020line = 5,
	resqml2__LineRole__contact = 6,
	resqml2__LineRole__depositional_x0020line = 7,
	resqml2__LineRole__erosion_x0020line = 8,
	resqml2__LineRole__contouring = 9,
	resqml2__LineRole__pillar = 10
};
#endif

/* eml2_2ForGsoap.h:13979 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SurfaceRole
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SurfaceRole (-1238)

/* resqml2:SurfaceRole */
enum resqml2__SurfaceRole {
	resqml2__SurfaceRole__map = 0,
	resqml2__SurfaceRole__pick = 1
};
#endif

/* eml2_2ForGsoap.h:14002 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellShape
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellShape (-1239)

/* resqml2:CellShape */
enum resqml2__CellShape {
	resqml2__CellShape__tetrahedral = 0,
	resqml2__CellShape__pyramidal = 1,
	resqml2__CellShape__prism = 2,
	resqml2__CellShape__hexahedral = 3,
	resqml2__CellShape__polyhedral = 4
};
#endif

/* eml2_2ForGsoap.h:14040 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnShape
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnShape (-1240)

/* resqml2:ColumnShape */
enum resqml2__ColumnShape {
	resqml2__ColumnShape__triangular = 0,
	resqml2__ColumnShape__quadrilateral = 1,
	resqml2__ColumnShape__polygonal = 2
};
#endif

/* eml2_2ForGsoap.h:14066 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GridGeometryAttachment
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GridGeometryAttachment (-1241)

/* resqml2:GridGeometryAttachment */
enum resqml2__GridGeometryAttachment {
	resqml2__GridGeometryAttachment__cells = 0,
	resqml2__GridGeometryAttachment__edges = 1,
	resqml2__GridGeometryAttachment__faces = 2,
	resqml2__GridGeometryAttachment__hinge_x0020node_x0020faces = 3,
	resqml2__GridGeometryAttachment__nodes = 4,
	resqml2__GridGeometryAttachment__radial_x0020origin_x0020polyline = 5,
	resqml2__GridGeometryAttachment__subnodes = 6
};
#endif

/* eml2_2ForGsoap.h:14116 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkIndexableElements (-1242)

/* resqml2:IjkIndexableElements */
enum resqml2__IjkIndexableElements {
	resqml2__IjkIndexableElements__cells = 0,
	resqml2__IjkIndexableElements__column_x0020edges = 1,
	resqml2__IjkIndexableElements__columns = 2,
	resqml2__IjkIndexableElements__coordinate_x0020lines = 3,
	resqml2__IjkIndexableElements__edges = 4,
	resqml2__IjkIndexableElements__edges_x0020per_x0020column = 5,
	resqml2__IjkIndexableElements__faces = 6,
	resqml2__IjkIndexableElements__faces_x0020per_x0020cell = 7,
	resqml2__IjkIndexableElements__hinge_x0020node_x0020faces = 8,
	resqml2__IjkIndexableElements__interval_x0020edges = 9,
	resqml2__IjkIndexableElements__intervals = 10,
	resqml2__IjkIndexableElements__I0 = 11,
	resqml2__IjkIndexableElements__I0_x0020edges = 12,
	resqml2__IjkIndexableElements__J0 = 13,
	resqml2__IjkIndexableElements__J0_x0020edges = 14,
	resqml2__IjkIndexableElements__layers = 15,
	resqml2__IjkIndexableElements__nodes = 16,
	resqml2__IjkIndexableElements__nodes_x0020per_x0020cell = 17,
	resqml2__IjkIndexableElements__nodes_x0020per_x0020edge = 18,
	resqml2__IjkIndexableElements__nodes_x0020per_x0020face = 19,
	resqml2__IjkIndexableElements__pillars = 20,
	resqml2__IjkIndexableElements__radial_x0020origin_x0020polyline = 21,
	resqml2__IjkIndexableElements__subnodes = 22
};
#endif

/* eml2_2ForGsoap.h:14242 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__KDirection
#define SOAP_TYPE_gsoap_eml2_2_resqml2__KDirection (-1243)

/* resqml2:KDirection */
enum resqml2__KDirection {
	resqml2__KDirection__down = 0,
	resqml2__KDirection__up = 1,
	resqml2__KDirection__not_x0020monotonic = 2
};
#endif

/* eml2_2ForGsoap.h:14271 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PillarShape
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PillarShape (-1244)

/* resqml2:PillarShape */
enum resqml2__PillarShape {
	resqml2__PillarShape__vertical = 0,
	resqml2__PillarShape__straight = 1,
	resqml2__PillarShape__curved = 2
};
#endif

/* eml2_2ForGsoap.h:14297 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeNodeObject
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeNodeObject (-1245)

/* resqml2:SubnodeNodeObject */
enum resqml2__SubnodeNodeObject {
	resqml2__SubnodeNodeObject__cell = 0,
	resqml2__SubnodeNodeObject__face = 1,
	resqml2__SubnodeNodeObject__edge = 2
};
#endif

/* eml2_2ForGsoap.h:14324 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredCellIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredCellIndexableElements (-1246)

/* resqml2:UnstructuredCellIndexableElements */
enum resqml2__UnstructuredCellIndexableElements {
	resqml2__UnstructuredCellIndexableElements__cells = 0,
	resqml2__UnstructuredCellIndexableElements__edges = 1,
	resqml2__UnstructuredCellIndexableElements__faces = 2,
	resqml2__UnstructuredCellIndexableElements__faces_x0020per_x0020cell = 3,
	resqml2__UnstructuredCellIndexableElements__hinge_x0020node_x0020faces = 4,
	resqml2__UnstructuredCellIndexableElements__nodes = 5,
	resqml2__UnstructuredCellIndexableElements__nodes_x0020per_x0020cell = 6,
	resqml2__UnstructuredCellIndexableElements__nodes_x0020per_x0020edge = 7,
	resqml2__UnstructuredCellIndexableElements__nodes_x0020per_x0020face = 8,
	resqml2__UnstructuredCellIndexableElements__subnodes = 9
};
#endif

/* eml2_2ForGsoap.h:14385 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerIndexableElements (-1247)

/* resqml2:UnstructuredColumnLayerIndexableElements */
enum resqml2__UnstructuredColumnLayerIndexableElements {
	resqml2__UnstructuredColumnLayerIndexableElements__cells = 0,
	resqml2__UnstructuredColumnLayerIndexableElements__column_x0020edges = 1,
	resqml2__UnstructuredColumnLayerIndexableElements__columns = 2,
	resqml2__UnstructuredColumnLayerIndexableElements__coordinate_x0020lines = 3,
	resqml2__UnstructuredColumnLayerIndexableElements__edges = 4,
	resqml2__UnstructuredColumnLayerIndexableElements__edges_x0020per_x0020column = 5,
	resqml2__UnstructuredColumnLayerIndexableElements__faces = 6,
	resqml2__UnstructuredColumnLayerIndexableElements__faces_x0020per_x0020cell = 7,
	resqml2__UnstructuredColumnLayerIndexableElements__hinge_x0020node_x0020faces = 8,
	resqml2__UnstructuredColumnLayerIndexableElements__interval_x0020edges = 9,
	resqml2__UnstructuredColumnLayerIndexableElements__intervals = 10,
	resqml2__UnstructuredColumnLayerIndexableElements__layers = 11,
	resqml2__UnstructuredColumnLayerIndexableElements__nodes = 12,
	resqml2__UnstructuredColumnLayerIndexableElements__nodes_x0020per_x0020cell = 13,
	resqml2__UnstructuredColumnLayerIndexableElements__nodes_x0020per_x0020edge = 14,
	resqml2__UnstructuredColumnLayerIndexableElements__nodes_x0020per_x0020face = 15,
	resqml2__UnstructuredColumnLayerIndexableElements__pillars = 16,
	resqml2__UnstructuredColumnLayerIndexableElements__subnodes = 17
};
#endif

/* eml2_2ForGsoap.h:14487 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IdentityKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IdentityKind (-1248)

/* resqml2:IdentityKind */
enum resqml2__IdentityKind {
	resqml2__IdentityKind__collocation = 0,
	resqml2__IdentityKind__previous_x0020collocation = 1,
	resqml2__IdentityKind__equivalence = 2,
	resqml2__IdentityKind__previous_x0020equivalence = 3
};
#endif

/* eml2_2ForGsoap.h:14524 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IndexableElement
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IndexableElement (-1249)

/* resqml2:IndexableElement */
enum resqml2__IndexableElement {
	resqml2__IndexableElement__cells = 0,
	resqml2__IndexableElement__intervals_x0020from_x0020datum = 1,
	resqml2__IndexableElement__column_x0020edges = 2,
	resqml2__IndexableElement__columns = 3,
	resqml2__IndexableElement__contacts = 4,
	resqml2__IndexableElement__coordinate_x0020lines = 5,
	resqml2__IndexableElement__edges = 6,
	resqml2__IndexableElement__edges_x0020per_x0020column = 7,
	resqml2__IndexableElement__enumerated_x0020elements = 8,
	resqml2__IndexableElement__faces = 9,
	resqml2__IndexableElement__faces_x0020per_x0020cell = 10,
	resqml2__IndexableElement__interval_x0020edges = 11,
	resqml2__IndexableElement__intervals = 12,
	resqml2__IndexableElement__I0 = 13,
	resqml2__IndexableElement__I0_x0020edges = 14,
	resqml2__IndexableElement__J0 = 15,
	resqml2__IndexableElement__J0_x0020edges = 16,
	resqml2__IndexableElement__layers = 17,
	resqml2__IndexableElement__lines = 18,
	resqml2__IndexableElement__nodes = 19,
	resqml2__IndexableElement__nodes_x0020per_x0020cell = 20,
	resqml2__IndexableElement__nodes_x0020per_x0020edge = 21,
	resqml2__IndexableElement__nodes_x0020per_x0020face = 22,
	resqml2__IndexableElement__patches = 23,
	resqml2__IndexableElement__pillars = 24,
	resqml2__IndexableElement__regions = 25,
	resqml2__IndexableElement__representation = 26,
	resqml2__IndexableElement__subnodes = 27,
	resqml2__IndexableElement__triangles = 28
};
#endif

/* eml2_2ForGsoap.h:14588 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Facet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Facet (-1250)

/* resqml2:Facet */
enum resqml2__Facet {
	resqml2__Facet__I = 'I',
	resqml2__Facet__J = 'J',
	resqml2__Facet__K = 'K',
	resqml2__Facet__X = 'X',
	resqml2__Facet__Y = 'Y',
	resqml2__Facet__Z = 'Z',
	resqml2__Facet__I_x002b = 91,
	resqml2__Facet__J_x002b = 92,
	resqml2__Facet__K_x002b = 93,
	resqml2__Facet__X_x002b = 94,
	resqml2__Facet__Y_x002b = 95,
	resqml2__Facet__Z_x002b = 96,
	resqml2__Facet__I_x002d = 'a',
	resqml2__Facet__J_x002d = 'b',
	resqml2__Facet__K_x002d = 'c',
	resqml2__Facet__X_x002d = 'd',
	resqml2__Facet__Y_x002d = 'e',
	resqml2__Facet__Z_x002d = 'f',
	resqml2__Facet__net = 'g',
	resqml2__Facet__gross = 'h',
	resqml2__Facet__plus = 'i',
	resqml2__Facet__minus = 'j',
	resqml2__Facet__average = 'k',
	resqml2__Facet__maximum = 'l',
	resqml2__Facet__minimum = 'm',
	resqml2__Facet__maximum_x0020threshold = 'n',
	resqml2__Facet__minimum_x0020threshold = 'o',
	resqml2__Facet__surface_x0020condition = 'p',
	resqml2__Facet__reservoir_x0020condition = 'q',
	resqml2__Facet__oil = 'r',
	resqml2__Facet__water = 's',
	resqml2__Facet__gas = 't',
	resqml2__Facet__condensate = 'u',
	resqml2__Facet__cumulative = 'v'
};
#endif

/* eml2_2ForGsoap.h:14761 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FacetKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FacetKind (-1251)

/* resqml2:FacetKind */
enum resqml2__FacetKind {
	resqml2__FacetKind__conditions = 0,
	resqml2__FacetKind__side = 1,
	resqml2__FacetKind__direction = 2,
	resqml2__FacetKind__netgross = 3,
	resqml2__FacetKind__qualifier = 4,
	resqml2__FacetKind__statistics = 5,
	resqml2__FacetKind__what = 6
};
#endif

/* eml2_2ForGsoap.h:14807 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ResqmlPropertyKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ResqmlPropertyKind (-1252)

/* resqml2:ResqmlPropertyKind */
enum resqml2__ResqmlPropertyKind {
	resqml2__ResqmlPropertyKind__absorbed_x0020dose = 0,
	resqml2__ResqmlPropertyKind__acceleration_x0020linear = 1,
	resqml2__ResqmlPropertyKind__active = 2,
	resqml2__ResqmlPropertyKind__activity_x0020_x0028of_x0020radioactivity_x0029 = 3,
	resqml2__ResqmlPropertyKind__amount_x0020of_x0020substance = 4,
	resqml2__ResqmlPropertyKind__amplitude = 5,
	resqml2__ResqmlPropertyKind__angle_x0020per_x0020length = 6,
	resqml2__ResqmlPropertyKind__angle_x0020per_x0020time = 7,
	resqml2__ResqmlPropertyKind__angle_x0020per_x0020volume = 8,
	resqml2__ResqmlPropertyKind__angular_x0020acceleration = 9,
	resqml2__ResqmlPropertyKind__area = 10,
	resqml2__ResqmlPropertyKind__attenuation = 11,
	resqml2__ResqmlPropertyKind__area_x0020per_x0020area = 12,
	resqml2__ResqmlPropertyKind__attenuation_x0020per_x0020length = 13,
	resqml2__ResqmlPropertyKind__area_x0020per_x0020volume = 14,
	resqml2__ResqmlPropertyKind__azimuth = 15,
	resqml2__ResqmlPropertyKind__bubble_x0020point_x0020pressure = 16,
	resqml2__ResqmlPropertyKind__bulk_x0020modulus = 17,
	resqml2__ResqmlPropertyKind__capacitance = 18,
	resqml2__ResqmlPropertyKind__categorical = 19,
	resqml2__ResqmlPropertyKind__cell_x0020length = 20,
	resqml2__ResqmlPropertyKind__code = 21,
	resqml2__ResqmlPropertyKind__charge_x0020density = 22,
	resqml2__ResqmlPropertyKind__compressibility = 23,
	resqml2__ResqmlPropertyKind__chemical_x0020potential = 24,
	resqml2__ResqmlPropertyKind__concentration_x0020of_x0020B = 25,
	resqml2__ResqmlPropertyKind__conductivity = 26,
	resqml2__ResqmlPropertyKind__continuous = 27,
	resqml2__ResqmlPropertyKind__cross_x0020section_x0020absorption = 28,
	resqml2__ResqmlPropertyKind__current_x0020density = 29,
	resqml2__ResqmlPropertyKind__Darcy_x0020flow_x0020coefficient = 30,
	resqml2__ResqmlPropertyKind__data_x0020transmission_x0020speed = 31,
	resqml2__ResqmlPropertyKind__delta_x0020temperature = 32,
	resqml2__ResqmlPropertyKind__density = 33,
	resqml2__ResqmlPropertyKind__depth = 34,
	resqml2__ResqmlPropertyKind__diffusion_x0020coefficient = 35,
	resqml2__ResqmlPropertyKind__digital_x0020storage = 36,
	resqml2__ResqmlPropertyKind__dimensionless = 37,
	resqml2__ResqmlPropertyKind__dip = 38,
	resqml2__ResqmlPropertyKind__discrete = 39,
	resqml2__ResqmlPropertyKind__dose_x0020equivalent = 40,
	resqml2__ResqmlPropertyKind__dose_x0020equivalent_x0020rate = 41,
	resqml2__ResqmlPropertyKind__dynamic_x0020viscosity = 42,
	resqml2__ResqmlPropertyKind__electric_x0020charge = 43,
	resqml2__ResqmlPropertyKind__electric_x0020conductance = 44,
	resqml2__ResqmlPropertyKind__electric_x0020current = 45,
	resqml2__ResqmlPropertyKind__electric_x0020dipole_x0020moment = 46,
	resqml2__ResqmlPropertyKind__electric_x0020field_x0020strength = 47,
	resqml2__ResqmlPropertyKind__electric_x0020polarization = 48,
	resqml2__ResqmlPropertyKind__electric_x0020potential = 49,
	resqml2__ResqmlPropertyKind__electrical_x0020resistivity = 50,
	resqml2__ResqmlPropertyKind__electrochemical_x0020equivalent = 51,
	resqml2__ResqmlPropertyKind__electromagnetic_x0020moment = 52,
	resqml2__ResqmlPropertyKind__energy_x0020length_x0020per_x0020area = 53,
	resqml2__ResqmlPropertyKind__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 54,
	resqml2__ResqmlPropertyKind__energy_x0020per_x0020area = 55,
	resqml2__ResqmlPropertyKind__energy_x0020per_x0020length = 56,
	resqml2__ResqmlPropertyKind__equivalent_x0020per_x0020mass = 57,
	resqml2__ResqmlPropertyKind__equivalent_x0020per_x0020volume = 58,
	resqml2__ResqmlPropertyKind__exposure_x0020_x0028radioactivity_x0029 = 59,
	resqml2__ResqmlPropertyKind__fault_x0020block = 60,
	resqml2__ResqmlPropertyKind__fluid_x0020volume = 61,
	resqml2__ResqmlPropertyKind__force = 62,
	resqml2__ResqmlPropertyKind__force_x0020area = 63,
	resqml2__ResqmlPropertyKind__force_x0020length_x0020per_x0020length = 64,
	resqml2__ResqmlPropertyKind__force_x0020per_x0020force = 'A',
	resqml2__ResqmlPropertyKind__force_x0020per_x0020length = 'B',
	resqml2__ResqmlPropertyKind__force_x0020per_x0020volume = 'C',
	resqml2__ResqmlPropertyKind__formation_x0020volume_x0020factor = 'D',
	resqml2__ResqmlPropertyKind__frequency = 'E',
	resqml2__ResqmlPropertyKind__frequency_x0020interval = 'F',
	resqml2__ResqmlPropertyKind__gamma_x0020ray_x0020API_x0020unit = 'G',
	resqml2__ResqmlPropertyKind__geologic_x0020k = 'H',
	resqml2__ResqmlPropertyKind__heat_x0020capacity = 'I',
	resqml2__ResqmlPropertyKind__heat_x0020flow_x0020rate = 'J',
	resqml2__ResqmlPropertyKind__heat_x0020transfer_x0020coefficient = 'K',
	resqml2__ResqmlPropertyKind__illuminance = 'L',
	resqml2__ResqmlPropertyKind__index = 'M',
	resqml2__ResqmlPropertyKind__irradiance = 'N',
	resqml2__ResqmlPropertyKind__isothermal_x0020compressibility = 'O',
	resqml2__ResqmlPropertyKind__kinematic_x0020viscosity = 'P',
	resqml2__ResqmlPropertyKind__Lambda_x0020Rho = 'Q',
	resqml2__ResqmlPropertyKind__Lame_x0020constant = 'R',
	resqml2__ResqmlPropertyKind__length = 'S',
	resqml2__ResqmlPropertyKind__length_x0020per_x0020length = 'T',
	resqml2__ResqmlPropertyKind__length_x0020per_x0020temperature = 'U',
	resqml2__ResqmlPropertyKind__length_x0020per_x0020volume = 'V',
	resqml2__ResqmlPropertyKind__level_x0020of_x0020power_x0020intensity = 'W',
	resqml2__ResqmlPropertyKind__light_x0020exposure = 'X',
	resqml2__ResqmlPropertyKind__linear_x0020thermal_x0020expansion = 'Y',
	resqml2__ResqmlPropertyKind__luminance = 'Z',
	resqml2__ResqmlPropertyKind__luminous_x0020efficacy = 91,
	resqml2__ResqmlPropertyKind__luminous_x0020flux = 92,
	resqml2__ResqmlPropertyKind__luminous_x0020intensity = 93,
	resqml2__ResqmlPropertyKind__magnetic_x0020dipole_x0020moment = 94,
	resqml2__ResqmlPropertyKind__magnetic_x0020field_x0020strength = 95,
	resqml2__ResqmlPropertyKind__magnetic_x0020flux = 96,
	resqml2__ResqmlPropertyKind__magnetic_x0020induction = 'a',
	resqml2__ResqmlPropertyKind__magnetic_x0020permeability = 'b',
	resqml2__ResqmlPropertyKind__magnetic_x0020vector_x0020potential = 'c',
	resqml2__ResqmlPropertyKind__mass = 'd',
	resqml2__ResqmlPropertyKind__mass_x0020attenuation_x0020coefficient = 'e',
	resqml2__ResqmlPropertyKind__mass_x0020concentration = 'f',
	resqml2__ResqmlPropertyKind__mass_x0020flow_x0020rate = 'g',
	resqml2__ResqmlPropertyKind__mass_x0020length = 'h',
	resqml2__ResqmlPropertyKind__mass_x0020per_x0020energy = 'i',
	resqml2__ResqmlPropertyKind__mass_x0020per_x0020length = 'j',
	resqml2__ResqmlPropertyKind__mass_x0020per_x0020time_x0020per_x0020area = 'k',
	resqml2__ResqmlPropertyKind__mass_x0020per_x0020time_x0020per_x0020length = 'l',
	resqml2__ResqmlPropertyKind__mass_x0020per_x0020volume_x0020per_x0020length = 'm',
	resqml2__ResqmlPropertyKind__mobility = 'n',
	resqml2__ResqmlPropertyKind__modulus_x0020of_x0020compression = 'o',
	resqml2__ResqmlPropertyKind__molar_x0020concentration = 'p',
	resqml2__ResqmlPropertyKind__molar_x0020heat_x0020capacity = 'q',
	resqml2__ResqmlPropertyKind__molar_x0020volume = 'r',
	resqml2__ResqmlPropertyKind__mole_x0020per_x0020area = 's',
	resqml2__ResqmlPropertyKind__mole_x0020per_x0020time = 't',
	resqml2__ResqmlPropertyKind__mole_x0020per_x0020time_x0020per_x0020area = 'u',
	resqml2__ResqmlPropertyKind__moment_x0020of_x0020force = 'v',
	resqml2__ResqmlPropertyKind__moment_x0020of_x0020inertia = 'w',
	resqml2__ResqmlPropertyKind__moment_x0020of_x0020section = 'x',
	resqml2__ResqmlPropertyKind__momentum = 'y',
	resqml2__ResqmlPropertyKind__Mu_x0020Rho = 'z',
	resqml2__ResqmlPropertyKind__net_x0020to_x0020gross_x0020ratio = 123,
	resqml2__ResqmlPropertyKind__neutron_x0020API_x0020unit = 124,
	resqml2__ResqmlPropertyKind__nonDarcy_x0020flow_x0020coefficient = 125,
	resqml2__ResqmlPropertyKind__operations_x0020per_x0020time = 126,
	resqml2__ResqmlPropertyKind__parachor = 127,
	resqml2__ResqmlPropertyKind__per_x0020area = 128,
	resqml2__ResqmlPropertyKind__per_x0020electric_x0020potential = 129,
	resqml2__ResqmlPropertyKind__per_x0020force = 130,
	resqml2__ResqmlPropertyKind__per_x0020length = 131,
	resqml2__ResqmlPropertyKind__per_x0020mass = 132,
	resqml2__ResqmlPropertyKind__per_x0020volume = 133,
	resqml2__ResqmlPropertyKind__permeability_x0020length = 134,
	resqml2__ResqmlPropertyKind__permeability_x0020rock = 135,
	resqml2__ResqmlPropertyKind__permeability_x0020thickness = 136,
	resqml2__ResqmlPropertyKind__permeance = 137,
	resqml2__ResqmlPropertyKind__permittivity = 138,
	resqml2__ResqmlPropertyKind__pH = 139,
	resqml2__ResqmlPropertyKind__plane_x0020angle = 140,
	resqml2__ResqmlPropertyKind__Poisson_x0020ratio = 141,
	resqml2__ResqmlPropertyKind__pore_x0020volume = 142,
	resqml2__ResqmlPropertyKind__porosity = 143,
	resqml2__ResqmlPropertyKind__potential_x0020difference_x0020per_x0020power_x0020drop = 144,
	resqml2__ResqmlPropertyKind__power = 145,
	resqml2__ResqmlPropertyKind__power_x0020per_x0020volume = 146,
	resqml2__ResqmlPropertyKind__pressure = 147,
	resqml2__ResqmlPropertyKind__pressure_x0020per_x0020time = 148,
	resqml2__ResqmlPropertyKind__pressure_x0020squared = 149,
	resqml2__ResqmlPropertyKind__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 150,
	resqml2__ResqmlPropertyKind__pressure_x0020time_x0020per_x0020volume = 151,
	resqml2__ResqmlPropertyKind__productivity_x0020index = 152,
	resqml2__ResqmlPropertyKind__property_x0020multiplier = 153,
	resqml2__ResqmlPropertyKind__quantity = 154,
	resqml2__ResqmlPropertyKind__quantity_x0020of_x0020light = 155,
	resqml2__ResqmlPropertyKind__radiance = 156,
	resqml2__ResqmlPropertyKind__radiant_x0020intensity = 157,
	resqml2__ResqmlPropertyKind__region_x0020initialization = 158,
	resqml2__ResqmlPropertyKind__relative_x0020permeability = 159,
	resqml2__ResqmlPropertyKind__relative_x0020power = 160,
	resqml2__ResqmlPropertyKind__relative_x0020time = 161,
	resqml2__ResqmlPropertyKind__reluctance = 162,
	resqml2__ResqmlPropertyKind__resistance = 163,
	resqml2__ResqmlPropertyKind__resistivity_x0020per_x0020length = 164,
	resqml2__ResqmlPropertyKind__RESQML_x0020root_x0020property = 165,
	resqml2__ResqmlPropertyKind__Rock_x0020Impedance = 166,
	resqml2__ResqmlPropertyKind__rock_x0020permeability = 167,
	resqml2__ResqmlPropertyKind__rock_x0020volume = 168,
	resqml2__ResqmlPropertyKind__saturation = 169,
	resqml2__ResqmlPropertyKind__second_x0020moment_x0020of_x0020area = 170,
	resqml2__ResqmlPropertyKind__shear_x0020modulus = 171,
	resqml2__ResqmlPropertyKind__solid_x0020angle = 172,
	resqml2__ResqmlPropertyKind__solution_x0020gas_oil_x0020ratio = 173,
	resqml2__ResqmlPropertyKind__specific_x0020activity_x0020_x0028of_x0020radioactivity_x0029 = 174,
	resqml2__ResqmlPropertyKind__specific_x0020energy = 175,
	resqml2__ResqmlPropertyKind__specific_x0020heat_x0020capacity = 176,
	resqml2__ResqmlPropertyKind__specific_x0020productivity_x0020index = 177,
	resqml2__ResqmlPropertyKind__specific_x0020volume = 178,
	resqml2__ResqmlPropertyKind__surface_x0020density = 179,
	resqml2__ResqmlPropertyKind__temperature_x0020per_x0020length = 180,
	resqml2__ResqmlPropertyKind__temperature_x0020per_x0020time = 181,
	resqml2__ResqmlPropertyKind__thermal_x0020conductance = 182,
	resqml2__ResqmlPropertyKind__thermal_x0020conductivity = 183,
	resqml2__ResqmlPropertyKind__thermal_x0020diffusivity = 184,
	resqml2__ResqmlPropertyKind__thermal_x0020insulance = 185,
	resqml2__ResqmlPropertyKind__thermal_x0020resistance = 186,
	resqml2__ResqmlPropertyKind__thermodynamic_x0020temperature = 187,
	resqml2__ResqmlPropertyKind__thickness = 188,
	resqml2__ResqmlPropertyKind__time = 189,
	resqml2__ResqmlPropertyKind__time_x0020per_x0020length = 190,
	resqml2__ResqmlPropertyKind__time_x0020per_x0020volume = 191,
	resqml2__ResqmlPropertyKind__transmissibility = 192,
	resqml2__ResqmlPropertyKind__unit_x0020productivity_x0020index = 193,
	resqml2__ResqmlPropertyKind__unitless = 194,
	resqml2__ResqmlPropertyKind__vapor_x0020oil_gas_x0020ratio = 195,
	resqml2__ResqmlPropertyKind__velocity = 196,
	resqml2__ResqmlPropertyKind__volume = 197,
	resqml2__ResqmlPropertyKind__volume_x0020flow_x0020rate = 198,
	resqml2__ResqmlPropertyKind__volume_x0020length_x0020per_x0020time = 199,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020area = 200,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020length = 201,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020time_x0020per_x0020area = 202,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020time_x0020per_x0020length = 203,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020time_x0020per_x0020time = 204,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020time_x0020per_x0020volume = 205,
	resqml2__ResqmlPropertyKind__volume_x0020per_x0020volume = 206,
	resqml2__ResqmlPropertyKind__volumetric_x0020heat_x0020transfer_x0020coefficient = 207,
	resqml2__ResqmlPropertyKind__volumetric_x0020thermal_x0020expansion = 208,
	resqml2__ResqmlPropertyKind__work = 209,
	resqml2__ResqmlPropertyKind__Young_x0020modulus = 210
};
#endif

/* eml2_2ForGsoap.h:15273 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TimeSetKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TimeSetKind (-1253)

/* resqml2:TimeSetKind */
enum resqml2__TimeSetKind {
	resqml2__TimeSetKind__single_x0020time = 0,
	resqml2__TimeSetKind__single_x0020time_x0020series = 1,
	resqml2__TimeSetKind__equivalent_x0020times = 2,
	resqml2__TimeSetKind__not_x0020a_x0020time_x0020set = 3
};
#endif

/* eml2_2ForGsoap.h:15304 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineFlux
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineFlux (-1254)

/* resqml2:StreamlineFlux */
enum resqml2__StreamlineFlux {
	resqml2__StreamlineFlux__oil = 0,
	resqml2__StreamlineFlux__gas = 1,
	resqml2__StreamlineFlux__water = 2,
	resqml2__StreamlineFlux__total = 3,
	resqml2__StreamlineFlux__other = 4
};
#endif

/* eml2_2ForGsoap.h:15349 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind (-1255)

/* eml22:ExistenceKind */
enum eml22__ExistenceKind {
	eml22__ExistenceKind__actual = 0,
	eml22__ExistenceKind__planned = 1,
	eml22__ExistenceKind__simulated = 2
};
#endif

/* eml2_2ForGsoap.h:15375 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank (-1256)

/* eml22:GeochronologicalRank */
enum eml22__GeochronologicalRank {
	eml22__GeochronologicalRank__eon = 0,
	eml22__GeochronologicalRank__era = 1,
	eml22__GeochronologicalRank__period = 2,
	eml22__GeochronologicalRank__epoch = 3,
	eml22__GeochronologicalRank__age = 4,
	eml22__GeochronologicalRank__chron = 5
};
#endif

/* eml2_2ForGsoap.h:15392 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind (-1257)

/* eml22:LithologyKind */
enum eml22__LithologyKind {
	eml22__LithologyKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml22__LithologyKind__alkali_x0020olivine_x0020basalt = 1,
	eml22__LithologyKind__amphibolite = 2,
	eml22__LithologyKind__andesite = 3,
	eml22__LithologyKind__anhydrite = 4,
	eml22__LithologyKind__anorthositic_x0020rock = 5,
	eml22__LithologyKind__anthracite = 6,
	eml22__LithologyKind__aplite = 7,
	eml22__LithologyKind__arenite = 8,
	eml22__LithologyKind__argillaceous = 9,
	eml22__LithologyKind__arkose = 10,
	eml22__LithologyKind__basalt = 11,
	eml22__LithologyKind__basanite = 12,
	eml22__LithologyKind__bauxite = 13,
	eml22__LithologyKind__bituminous_x0020coal = 14,
	eml22__LithologyKind__blueschist_x0020metamorphic_x0020rock = 15,
	eml22__LithologyKind__boninite = 16,
	eml22__LithologyKind__breccia = 17,
	eml22__LithologyKind__carbonate_x0020ooze = 18,
	eml22__LithologyKind__carbonatite = 19,
	eml22__LithologyKind__chalk = 20,
	eml22__LithologyKind__chert = 21,
	eml22__LithologyKind__clay = 22,
	eml22__LithologyKind__claystone = 23,
	eml22__LithologyKind__coal = 24,
	eml22__LithologyKind__conglomerate = 25,
	eml22__LithologyKind__dacite = 26,
	eml22__LithologyKind__diabase = 27,
	eml22__LithologyKind__diamictite = 28,
	eml22__LithologyKind__diorite = 29,
	eml22__LithologyKind__dioritoid = 30,
	eml22__LithologyKind__doleritic_x0020rock = 31,
	eml22__LithologyKind__dolomite = 32,
	eml22__LithologyKind__dolomitic = 33,
	eml22__LithologyKind__eclogite = 34,
	eml22__LithologyKind__exotic_x0020alkaline_x0020rock = 35,
	eml22__LithologyKind__feldspar = 36,
	eml22__LithologyKind__feldspathic_x0020arenite = 37,
	eml22__LithologyKind__fine_x0020grained_x0020igneous_x0020rock = 38,
	eml22__LithologyKind__foid_x0020dioritoid = 39,
	eml22__LithologyKind__foid_x0020gabbroid = 40,
	eml22__LithologyKind__foid_x0020syenitoid = 41,
	eml22__LithologyKind__foidite = 42,
	eml22__LithologyKind__foiditoid = 43,
	eml22__LithologyKind__foidolite = 44,
	eml22__LithologyKind__foliated_x0020metamorphic_x0020rock = 45,
	eml22__LithologyKind__fragmental_x0020igneous_x0020rock = 46,
	eml22__LithologyKind__gabbro = 47,
	eml22__LithologyKind__gabbroic_x0020rock = 48,
	eml22__LithologyKind__gabbroid = 49,
	eml22__LithologyKind__glauconite = 50,
	eml22__LithologyKind__gneiss = 51,
	eml22__LithologyKind__granite = 52,
	eml22__LithologyKind__granodiorite = 53,
	eml22__LithologyKind__granofels = 54,
	eml22__LithologyKind__granulite = 55,
	eml22__LithologyKind__gravel = 56,
	eml22__LithologyKind__greenstone = 57,
	eml22__LithologyKind__gumbo = 58,
	eml22__LithologyKind__gypsum = 59,
	eml22__LithologyKind__halite = 60,
	eml22__LithologyKind__hornfels = 61,
	eml22__LithologyKind__igneous_x0020rock = 62,
	eml22__LithologyKind__impact_x0020generated_x0020material = 63,
	eml22__LithologyKind__impure_x0020dolomite = 64,
	eml22__LithologyKind__impure_x0020limestone = 'A',
	eml22__LithologyKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 'B',
	eml22__LithologyKind__iron_x0020rich_x0020sedimentary_x0020rock = 'C',
	eml22__LithologyKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 'D',
	eml22__LithologyKind__komatiitic_x0020rock = 'E',
	eml22__LithologyKind__latitic_x0020rock = 'F',
	eml22__LithologyKind__lignite = 'G',
	eml22__LithologyKind__lime_x0020boundstone = 'H',
	eml22__LithologyKind__lime_x0020framestone = 'I',
	eml22__LithologyKind__lime_x0020grainstone = 'J',
	eml22__LithologyKind__lime_x0020mudstone = 'K',
	eml22__LithologyKind__lime_x0020packstone = 'L',
	eml22__LithologyKind__lime_x0020wackestone = 'M',
	eml22__LithologyKind__limestone = 'N',
	eml22__LithologyKind__marble = 'O',
	eml22__LithologyKind__marl = 'P',
	eml22__LithologyKind__metamorphic_x0020rock = 'Q',
	eml22__LithologyKind__mica_x0020schist = 'R',
	eml22__LithologyKind__migmatite = 'S',
	eml22__LithologyKind__monzogabbro = 'T',
	eml22__LithologyKind__mud = 'U',
	eml22__LithologyKind__mudstone = 'V',
	eml22__LithologyKind__mylonitic_x0020rock = 'W',
	eml22__LithologyKind__no_x0020description = 'X',
	eml22__LithologyKind__no_x0020sample = 'Y',
	eml22__LithologyKind__ooze = 'Z',
	eml22__LithologyKind__ophiolite = 91,
	eml22__LithologyKind__organic_x0020bearing_x0020mudstone = 92,
	eml22__LithologyKind__peat = 93,
	eml22__LithologyKind__pegmatite = 94,
	eml22__LithologyKind__peridotite = 95,
	eml22__LithologyKind__phaneritic_x0020igneous_x0020rock = 96,
	eml22__LithologyKind__phonolite = 'a',
	eml22__LithologyKind__phonolitoid = 'b',
	eml22__LithologyKind__phosphate = 'c',
	eml22__LithologyKind__phosphate_x0020rock = 'd',
	eml22__LithologyKind__phyllite = 'e',
	eml22__LithologyKind__porphyry = 'f',
	eml22__LithologyKind__potassium_x0020and_x0020magnesium_x0020salts = 'g',
	eml22__LithologyKind__pyroclastic_x0020breccia = 'h',
	eml22__LithologyKind__pyroclastic_x0020rock = 'i',
	eml22__LithologyKind__pyroxenite = 'j',
	eml22__LithologyKind__quartz_x0020arenite = 'k',
	eml22__LithologyKind__quartzite = 'l',
	eml22__LithologyKind__rhyolite = 'm',
	eml22__LithologyKind__rock_x0020salt = 'n',
	eml22__LithologyKind__sand = 'o',
	eml22__LithologyKind__sandstone = 'p',
	eml22__LithologyKind__sandy = 'q',
	eml22__LithologyKind__sapropel = 'r',
	eml22__LithologyKind__schist = 's',
	eml22__LithologyKind__serpentinite = 't',
	eml22__LithologyKind__shale = 'u',
	eml22__LithologyKind__siliceous_x0020ooze = 'v',
	eml22__LithologyKind__silt = 'w',
	eml22__LithologyKind__siltstone = 'x',
	eml22__LithologyKind__skarn = 'y',
	eml22__LithologyKind__slate = 'z',
	eml22__LithologyKind__spilite = 123,
	eml22__LithologyKind__syenite = 124,
	eml22__LithologyKind__syenitoid = 125,
	eml22__LithologyKind__sylvite = 126,
	eml22__LithologyKind__tephrite = 127,
	eml22__LithologyKind__tephritoid = 128,
	eml22__LithologyKind__tholeiitic_x0020basalt = 129,
	eml22__LithologyKind__tonalite = 130,
	eml22__LithologyKind__trachyte = 131,
	eml22__LithologyKind__trachytic_x0020rock = 132,
	eml22__LithologyKind__trachytoid = 133,
	eml22__LithologyKind__travertine = 134,
	eml22__LithologyKind__tuff = 135,
	eml22__LithologyKind__tuffite = 136,
	eml22__LithologyKind__ultrabasic = 137,
	eml22__LithologyKind__undifferentiated = 138,
	eml22__LithologyKind__unknown = 139,
	eml22__LithologyKind__wacke = 140
};
#endif

/* eml2_2ForGsoap.h:15540 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind (-1258)

/* eml22:LithologyQualifierKind */
enum eml22__LithologyQualifierKind {
	eml22__LithologyQualifierKind__alkali_x0020feldspar_x0020rhyolite = 0,
	eml22__LithologyQualifierKind__alkali_x0020olivine_x0020basalt = 1,
	eml22__LithologyQualifierKind__amphibolite = 2,
	eml22__LithologyQualifierKind__amphibolitic = 3,
	eml22__LithologyQualifierKind__andesite = 4,
	eml22__LithologyQualifierKind__andesitic = 5,
	eml22__LithologyQualifierKind__anhydrite = 6,
	eml22__LithologyQualifierKind__anhydritic = 7,
	eml22__LithologyQualifierKind__ankerite = 8,
	eml22__LithologyQualifierKind__ankeritic = 9,
	eml22__LithologyQualifierKind__anorthositic_x0020rock = 10,
	eml22__LithologyQualifierKind__anthracite = 11,
	eml22__LithologyQualifierKind__anthracitic = 12,
	eml22__LithologyQualifierKind__aplite = 13,
	eml22__LithologyQualifierKind__aplitic = 14,
	eml22__LithologyQualifierKind__arenite = 15,
	eml22__LithologyQualifierKind__arenitic = 16,
	eml22__LithologyQualifierKind__argillaceous = 17,
	eml22__LithologyQualifierKind__arkose = 18,
	eml22__LithologyQualifierKind__arkosic = 19,
	eml22__LithologyQualifierKind__barite = 20,
	eml22__LithologyQualifierKind__baritic = 21,
	eml22__LithologyQualifierKind__basalt = 22,
	eml22__LithologyQualifierKind__basaltic = 23,
	eml22__LithologyQualifierKind__basanite = 24,
	eml22__LithologyQualifierKind__basanitic = 25,
	eml22__LithologyQualifierKind__bauxite = 26,
	eml22__LithologyQualifierKind__bauxitic = 27,
	eml22__LithologyQualifierKind__belemnites = 28,
	eml22__LithologyQualifierKind__belemnitic = 29,
	eml22__LithologyQualifierKind__bioturbated = 30,
	eml22__LithologyQualifierKind__bioturbation = 31,
	eml22__LithologyQualifierKind__bitumen = 32,
	eml22__LithologyQualifierKind__bituminous = 33,
	eml22__LithologyQualifierKind__bituminous_x0020coal = 34,
	eml22__LithologyQualifierKind__blueschist_x0020metamorphic_x0020rock = 35,
	eml22__LithologyQualifierKind__boninite = 36,
	eml22__LithologyQualifierKind__breccia = 37,
	eml22__LithologyQualifierKind__brecciated = 38,
	eml22__LithologyQualifierKind__bryozoan = 39,
	eml22__LithologyQualifierKind__bryozoans = 40,
	eml22__LithologyQualifierKind__burrowed = 41,
	eml22__LithologyQualifierKind__burrows = 42,
	eml22__LithologyQualifierKind__calcareous = 43,
	eml22__LithologyQualifierKind__calcite = 44,
	eml22__LithologyQualifierKind__calcite_x0020concretion = 45,
	eml22__LithologyQualifierKind__calcitic = 46,
	eml22__LithologyQualifierKind__carbonaceous = 47,
	eml22__LithologyQualifierKind__carbonate_x0020ooze = 48,
	eml22__LithologyQualifierKind__carbonatite = 49,
	eml22__LithologyQualifierKind__carbonatitic = 50,
	eml22__LithologyQualifierKind__chalk = 51,
	eml22__LithologyQualifierKind__chalky = 52,
	eml22__LithologyQualifierKind__chamosite = 53,
	eml22__LithologyQualifierKind__chamositic = 54,
	eml22__LithologyQualifierKind__chert = 55,
	eml22__LithologyQualifierKind__cherty = 56,
	eml22__LithologyQualifierKind__chlorite = 57,
	eml22__LithologyQualifierKind__chloritic = 58,
	eml22__LithologyQualifierKind__clay = 59,
	eml22__LithologyQualifierKind__claystone = 60,
	eml22__LithologyQualifierKind__coal = 61,
	eml22__LithologyQualifierKind__concretionary = 62,
	eml22__LithologyQualifierKind__concretions = 63,
	eml22__LithologyQualifierKind__conglomerate = 64,
	eml22__LithologyQualifierKind__conglomeratic = 'A',
	eml22__LithologyQualifierKind__coral_x0020fragments = 'B',
	eml22__LithologyQualifierKind__coralline = 'C',
	eml22__LithologyQualifierKind__crinoidal = 'D',
	eml22__LithologyQualifierKind__crinoids = 'E',
	eml22__LithologyQualifierKind__dacite = 'F',
	eml22__LithologyQualifierKind__dacitic = 'G',
	eml22__LithologyQualifierKind__diabase = 'H',
	eml22__LithologyQualifierKind__diabasic = 'I',
	eml22__LithologyQualifierKind__diamictite = 'J',
	eml22__LithologyQualifierKind__diamictitic = 'K',
	eml22__LithologyQualifierKind__diatomaceous = 'L',
	eml22__LithologyQualifierKind__diatoms = 'M',
	eml22__LithologyQualifierKind__diorite = 'N',
	eml22__LithologyQualifierKind__dioritic = 'O',
	eml22__LithologyQualifierKind__dioritoid = 'P',
	eml22__LithologyQualifierKind__dioritoidic = 'Q',
	eml22__LithologyQualifierKind__doleritic_x0020rock = 'R',
	eml22__LithologyQualifierKind__dolomite = 'S',
	eml22__LithologyQualifierKind__dolomite_x0020concretion = 'T',
	eml22__LithologyQualifierKind__dolomite_x0020stringer = 'U',
	eml22__LithologyQualifierKind__dolomitic = 'V',
	eml22__LithologyQualifierKind__eclogite = 'W',
	eml22__LithologyQualifierKind__eclogitic = 'X',
	eml22__LithologyQualifierKind__exotic_x0020alkaline_x0020rock = 'Y',
	eml22__LithologyQualifierKind__feldspar = 'Z',
	eml22__LithologyQualifierKind__feldsparic = 91,
	eml22__LithologyQualifierKind__feldspathic = 92,
	eml22__LithologyQualifierKind__feldspathic_x0020arenite = 93,
	eml22__LithologyQualifierKind__ferruginous = 94,
	eml22__LithologyQualifierKind__fine_x0020grained_x0020igneous_x0020rock = 95,
	eml22__LithologyQualifierKind__foid_x0020dioritoid = 96,
	eml22__LithologyQualifierKind__foid_x0020gabbroid = 'a',
	eml22__LithologyQualifierKind__foid_x0020syenitoid = 'b',
	eml22__LithologyQualifierKind__foidite = 'c',
	eml22__LithologyQualifierKind__foiditic = 'd',
	eml22__LithologyQualifierKind__foiditoid = 'e',
	eml22__LithologyQualifierKind__foidolite = 'f',
	eml22__LithologyQualifierKind__foidolitic = 'g',
	eml22__LithologyQualifierKind__foliated_x0020metamorphic_x0020rock = 'h',
	eml22__LithologyQualifierKind__foraminifera = 'i',
	eml22__LithologyQualifierKind__foraminiferous = 'j',
	eml22__LithologyQualifierKind__forams = 'k',
	eml22__LithologyQualifierKind__fossil_x0020fragments = 'l',
	eml22__LithologyQualifierKind__fossiliferous = 'm',
	eml22__LithologyQualifierKind__fossils_x0020undifferentiated = 'n',
	eml22__LithologyQualifierKind__fragmental_x0020igneous_x0020rock = 'o',
	eml22__LithologyQualifierKind__gabbro = 'p',
	eml22__LithologyQualifierKind__gabbroic = 'q',
	eml22__LithologyQualifierKind__gabbroic_x0020rock = 'r',
	eml22__LithologyQualifierKind__gabbroid = 's',
	eml22__LithologyQualifierKind__gabbroidic = 't',
	eml22__LithologyQualifierKind__gilsonite = 'u',
	eml22__LithologyQualifierKind__gilsonitic = 'v',
	eml22__LithologyQualifierKind__glauconite = 'w',
	eml22__LithologyQualifierKind__glauconitic = 'x',
	eml22__LithologyQualifierKind__gneiss = 'y',
	eml22__LithologyQualifierKind__gneissic = 'z',
	eml22__LithologyQualifierKind__granite = 123,
	eml22__LithologyQualifierKind__granitic = 124,
	eml22__LithologyQualifierKind__granodiorite = 125,
	eml22__LithologyQualifierKind__granodioritic = 126,
	eml22__LithologyQualifierKind__granofels = 127,
	eml22__LithologyQualifierKind__granulite = 128,
	eml22__LithologyQualifierKind__granulitic = 129,
	eml22__LithologyQualifierKind__gravel = 130,
	eml22__LithologyQualifierKind__gravelly = 131,
	eml22__LithologyQualifierKind__greenstone = 132,
	eml22__LithologyQualifierKind__gumbo = 133,
	eml22__LithologyQualifierKind__gypsiferous = 134,
	eml22__LithologyQualifierKind__gypsum = 135,
	eml22__LithologyQualifierKind__halite = 136,
	eml22__LithologyQualifierKind__halitic = 137,
	eml22__LithologyQualifierKind__hornfels = 138,
	eml22__LithologyQualifierKind__hornfelsic = 139,
	eml22__LithologyQualifierKind__igneous = 140,
	eml22__LithologyQualifierKind__igneous_x0020rock = 141,
	eml22__LithologyQualifierKind__illite = 142,
	eml22__LithologyQualifierKind__illitic = 143,
	eml22__LithologyQualifierKind__impact_x0020generated_x0020material = 144,
	eml22__LithologyQualifierKind__impure_x0020dolomite = 145,
	eml22__LithologyQualifierKind__impure_x0020limestone = 146,
	eml22__LithologyQualifierKind__intrusive_x0020rock_x0020_x0028plutonic_x0029 = 147,
	eml22__LithologyQualifierKind__iron_x0020rich_x0020sedimentary_x0020rock = 148,
	eml22__LithologyQualifierKind__kalsilitic_x0020and_x0020melilitic_x0020rocks = 149,
	eml22__LithologyQualifierKind__kaolinite = 150,
	eml22__LithologyQualifierKind__kaolinitic = 151,
	eml22__LithologyQualifierKind__komatiitic_x0020rock = 152,
	eml22__LithologyQualifierKind__latitic_x0020rock = 153,
	eml22__LithologyQualifierKind__lignite = 154,
	eml22__LithologyQualifierKind__lignitic = 155,
	eml22__LithologyQualifierKind__lime_x0020boundstone = 156,
	eml22__LithologyQualifierKind__lime_x0020framestone = 157,
	eml22__LithologyQualifierKind__lime_x0020grainstone = 158,
	eml22__LithologyQualifierKind__lime_x0020mudstone = 159,
	eml22__LithologyQualifierKind__lime_x0020packstone = 160,
	eml22__LithologyQualifierKind__lime_x0020wackestone = 161,
	eml22__LithologyQualifierKind__limestone = 162,
	eml22__LithologyQualifierKind__limestone_x0020stringer = 163,
	eml22__LithologyQualifierKind__lithic = 164,
	eml22__LithologyQualifierKind__lithic_x0020fragments = 165,
	eml22__LithologyQualifierKind__marble = 166,
	eml22__LithologyQualifierKind__marcasite = 167,
	eml22__LithologyQualifierKind__marcasitic = 168,
	eml22__LithologyQualifierKind__marl = 169,
	eml22__LithologyQualifierKind__marly = 170,
	eml22__LithologyQualifierKind__metamorphic_x0020rock = 171,
	eml22__LithologyQualifierKind__mica = 172,
	eml22__LithologyQualifierKind__mica_x0020schist = 173,
	eml22__LithologyQualifierKind__micaceous = 174,
	eml22__LithologyQualifierKind__microfossiliferous = 175,
	eml22__LithologyQualifierKind__microfossils = 176,
	eml22__LithologyQualifierKind__migmatite = 177,
	eml22__LithologyQualifierKind__migmatitic = 178,
	eml22__LithologyQualifierKind__monzogabbro = 179,
	eml22__LithologyQualifierKind__monzogabbroic = 180,
	eml22__LithologyQualifierKind__mud = 181,
	eml22__LithologyQualifierKind__muddy = 182,
	eml22__LithologyQualifierKind__mudstone = 183,
	eml22__LithologyQualifierKind__mylonitic_x0020rock = 184,
	eml22__LithologyQualifierKind__no_x0020sample = 185,
	eml22__LithologyQualifierKind__oncolite = 186,
	eml22__LithologyQualifierKind__oncoliths = 187,
	eml22__LithologyQualifierKind__oncolitic = 188,
	eml22__LithologyQualifierKind__ooids = 189,
	eml22__LithologyQualifierKind__ooliths = 190,
	eml22__LithologyQualifierKind__oolitic = 191,
	eml22__LithologyQualifierKind__ooze = 192,
	eml22__LithologyQualifierKind__ophiolite = 193,
	eml22__LithologyQualifierKind__ophiolitic = 194,
	eml22__LithologyQualifierKind__organic_x0020bearing_x0020mudstone = 195,
	eml22__LithologyQualifierKind__ostracodal = 196,
	eml22__LithologyQualifierKind__ostracods = 197,
	eml22__LithologyQualifierKind__peat = 198,
	eml22__LithologyQualifierKind__peaty = 199,
	eml22__LithologyQualifierKind__pebble = 200,
	eml22__LithologyQualifierKind__pebbly = 201,
	eml22__LithologyQualifierKind__pegmatite = 202,
	eml22__LithologyQualifierKind__pegmatitic = 203,
	eml22__LithologyQualifierKind__pelletal = 204,
	eml22__LithologyQualifierKind__pellets = 205,
	eml22__LithologyQualifierKind__peloidal = 206,
	eml22__LithologyQualifierKind__peloids = 207,
	eml22__LithologyQualifierKind__peridotite = 208,
	eml22__LithologyQualifierKind__peridotitic = 209,
	eml22__LithologyQualifierKind__phaneritic_x0020igneous_x0020rock = 210,
	eml22__LithologyQualifierKind__phonolite = 211,
	eml22__LithologyQualifierKind__phonolitic = 212,
	eml22__LithologyQualifierKind__phonolitoid = 213,
	eml22__LithologyQualifierKind__phosphate = 214,
	eml22__LithologyQualifierKind__phosphate_x0020rock = 215,
	eml22__LithologyQualifierKind__phosphatic = 216,
	eml22__LithologyQualifierKind__phyllite = 217,
	eml22__LithologyQualifierKind__phyllitic = 218,
	eml22__LithologyQualifierKind__pisolite = 219,
	eml22__LithologyQualifierKind__pisoliths = 220,
	eml22__LithologyQualifierKind__pisolitic = 221,
	eml22__LithologyQualifierKind__plant_x0020remains = 222,
	eml22__LithologyQualifierKind__porphyritic = 223,
	eml22__LithologyQualifierKind__porphyry = 224,
	eml22__LithologyQualifierKind__potassium_x0020and_x0020magnesium_x0020salts = 225,
	eml22__LithologyQualifierKind__pyrite = 226,
	eml22__LithologyQualifierKind__pyritic = 227,
	eml22__LithologyQualifierKind__pyroclastic_x0020breccia = 228,
	eml22__LithologyQualifierKind__pyroclastic_x0020rock = 229,
	eml22__LithologyQualifierKind__pyroxenite = 230,
	eml22__LithologyQualifierKind__pyroxenitic = 231,
	eml22__LithologyQualifierKind__quartiferous = 232,
	eml22__LithologyQualifierKind__quartz = 233,
	eml22__LithologyQualifierKind__quartz_x0020arenite = 234,
	eml22__LithologyQualifierKind__quartzite = 235,
	eml22__LithologyQualifierKind__quartzitic = 236,
	eml22__LithologyQualifierKind__radiolaria = 237,
	eml22__LithologyQualifierKind__radiolarian = 238,
	eml22__LithologyQualifierKind__rhyolite = 239,
	eml22__LithologyQualifierKind__rhyolitic = 240,
	eml22__LithologyQualifierKind__rock_x0020salt = 241,
	eml22__LithologyQualifierKind__rootlets = 242,
	eml22__LithologyQualifierKind__salty = 243,
	eml22__LithologyQualifierKind__sand = 244,
	eml22__LithologyQualifierKind__sandstone = 245,
	eml22__LithologyQualifierKind__sandy = 246,
	eml22__LithologyQualifierKind__sapropel = 247,
	eml22__LithologyQualifierKind__sapropelic = 248,
	eml22__LithologyQualifierKind__schist = 249,
	eml22__LithologyQualifierKind__schisty = 250,
	eml22__LithologyQualifierKind__sepentinitic = 251,
	eml22__LithologyQualifierKind__serpentinite = 252,
	eml22__LithologyQualifierKind__shale = 253,
	eml22__LithologyQualifierKind__shaly = 254,
	eml22__LithologyQualifierKind__shell_x0020fragments = 255,
	eml22__LithologyQualifierKind__shelly = 256,
	eml22__LithologyQualifierKind__siderite = 257,
	eml22__LithologyQualifierKind__siderite_x0020concretion = 258,
	eml22__LithologyQualifierKind__sideritic = 259,
	eml22__LithologyQualifierKind__siliceous_x0020ooze = 260,
	eml22__LithologyQualifierKind__silt = 261,
	eml22__LithologyQualifierKind__siltstone = 262,
	eml22__LithologyQualifierKind__silty = 263,
	eml22__LithologyQualifierKind__skarn = 264,
	eml22__LithologyQualifierKind__skarny = 265,
	eml22__LithologyQualifierKind__slate = 266,
	eml22__LithologyQualifierKind__slaty = 267,
	eml22__LithologyQualifierKind__smectite = 268,
	eml22__LithologyQualifierKind__smectitic = 269,
	eml22__LithologyQualifierKind__spicular = 270,
	eml22__LithologyQualifierKind__spicules = 271,
	eml22__LithologyQualifierKind__spilite = 272,
	eml22__LithologyQualifierKind__spilitic = 273,
	eml22__LithologyQualifierKind__stylolites = 274,
	eml22__LithologyQualifierKind__stylolitic = 275,
	eml22__LithologyQualifierKind__syenite = 276,
	eml22__LithologyQualifierKind__syenitic = 277,
	eml22__LithologyQualifierKind__syenitoid = 278,
	eml22__LithologyQualifierKind__sylvite = 279,
	eml22__LithologyQualifierKind__sylvitic = 280,
	eml22__LithologyQualifierKind__tarry = 281,
	eml22__LithologyQualifierKind__tephrite = 282,
	eml22__LithologyQualifierKind__tephritic = 283,
	eml22__LithologyQualifierKind__tephritoid = 284,
	eml22__LithologyQualifierKind__tholeiitic_x0020basalt = 285,
	eml22__LithologyQualifierKind__tonalite = 286,
	eml22__LithologyQualifierKind__tonalitic = 287,
	eml22__LithologyQualifierKind__trachyte = 288,
	eml22__LithologyQualifierKind__trachytic = 289,
	eml22__LithologyQualifierKind__trachytic_x0020rock = 290,
	eml22__LithologyQualifierKind__trachytoid = 291,
	eml22__LithologyQualifierKind__travertine = 292,
	eml22__LithologyQualifierKind__tuff = 293,
	eml22__LithologyQualifierKind__tuffaceous = 294,
	eml22__LithologyQualifierKind__tuffite = 295,
	eml22__LithologyQualifierKind__tuffitic = 296,
	eml22__LithologyQualifierKind__ultrabasic = 297,
	eml22__LithologyQualifierKind__undifferentiated = 298,
	eml22__LithologyQualifierKind__unknown = 299,
	eml22__LithologyQualifierKind__wacke = 300
};
#endif

/* eml2_2ForGsoap.h:15852 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank (-1259)

/* eml22:LithostratigraphicRank */
enum eml22__LithostratigraphicRank {
	eml22__LithostratigraphicRank__group = 0,
	eml22__LithostratigraphicRank__formation = 1,
	eml22__LithostratigraphicRank__member = 2,
	eml22__LithostratigraphicRank__bed = 3
};
#endif

/* eml2_2ForGsoap.h:15901 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind (-1260)

/* eml22:MatrixCementKind */
enum eml22__MatrixCementKind {
	eml22__MatrixCementKind__ankerite = 0,
	eml22__MatrixCementKind__calcite = 1,
	eml22__MatrixCementKind__chlorite = 2,
	eml22__MatrixCementKind__dolomite = 3,
	eml22__MatrixCementKind__illite = 4,
	eml22__MatrixCementKind__kaolinite = 5,
	eml22__MatrixCementKind__quartz = 6,
	eml22__MatrixCementKind__siderite = 7,
	eml22__MatrixCementKind__smectite = 8
};
#endif

/* eml2_2ForGsoap.h:15921 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass
#define SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass (-1261)

/* eml22:MeasureClass */
enum eml22__MeasureClass {
	eml22__MeasureClass__absorbed_x0020dose = 0,
	eml22__MeasureClass__activity_x0020of_x0020radioactivity = 1,
	eml22__MeasureClass__amount_x0020of_x0020substance = 2,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml22__MeasureClass__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml22__MeasureClass__angle_x0020per_x0020length = 8,
	eml22__MeasureClass__angle_x0020per_x0020volume = 9,
	eml22__MeasureClass__angular_x0020acceleration = 10,
	eml22__MeasureClass__angular_x0020velocity = 11,
	eml22__MeasureClass__api_x0020gamma_x0020ray = 12,
	eml22__MeasureClass__api_x0020gravity = 13,
	eml22__MeasureClass__api_x0020neutron = 14,
	eml22__MeasureClass__area = 15,
	eml22__MeasureClass__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml22__MeasureClass__area_x0020per_x0020area = 17,
	eml22__MeasureClass__area_x0020per_x0020count = 18,
	eml22__MeasureClass__area_x0020per_x0020mass = 19,
	eml22__MeasureClass__area_x0020per_x0020time = 20,
	eml22__MeasureClass__area_x0020per_x0020volume = 21,
	eml22__MeasureClass__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml22__MeasureClass__capacitance = 23,
	eml22__MeasureClass__cation_x0020exchange_x0020capacity = 24,
	eml22__MeasureClass__data_x0020transfer_x0020speed = 25,
	eml22__MeasureClass__diffusion_x0020coefficient = 26,
	eml22__MeasureClass__diffusive_x0020time_x0020of_x0020flight = 27,
	eml22__MeasureClass__digital_x0020storage = 28,
	eml22__MeasureClass__dimensionless = 29,
	eml22__MeasureClass__dipole_x0020moment = 30,
	eml22__MeasureClass__dose_x0020equivalent = 31,
	eml22__MeasureClass__dynamic_x0020viscosity = 32,
	eml22__MeasureClass__electric_x0020charge = 33,
	eml22__MeasureClass__electric_x0020charge_x0020per_x0020area = 34,
	eml22__MeasureClass__electric_x0020charge_x0020per_x0020mass = 35,
	eml22__MeasureClass__electric_x0020charge_x0020per_x0020volume = 36,
	eml22__MeasureClass__electric_x0020conductance = 37,
	eml22__MeasureClass__electric_x0020conductivity = 38,
	eml22__MeasureClass__electric_x0020current = 39,
	eml22__MeasureClass__electric_x0020current_x0020density = 40,
	eml22__MeasureClass__electric_x0020field_x0020strength = 41,
	eml22__MeasureClass__electric_x0020potential_x0020difference = 42,
	eml22__MeasureClass__electric_x0020resistance = 43,
	eml22__MeasureClass__electric_x0020resistance_x0020per_x0020length = 44,
	eml22__MeasureClass__electrical_x0020resistivity = 45,
	eml22__MeasureClass__electromagnetic_x0020moment = 46,
	eml22__MeasureClass__energy = 47,
	eml22__MeasureClass__energy_x0020length_x0020per_x0020area = 48,
	eml22__MeasureClass__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml22__MeasureClass__energy_x0020per_x0020area = 50,
	eml22__MeasureClass__energy_x0020per_x0020length = 51,
	eml22__MeasureClass__energy_x0020per_x0020mass = 52,
	eml22__MeasureClass__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml22__MeasureClass__energy_x0020per_x0020volume = 54,
	eml22__MeasureClass__force = 55,
	eml22__MeasureClass__force_x0020area = 56,
	eml22__MeasureClass__force_x0020length_x0020per_x0020length = 57,
	eml22__MeasureClass__force_x0020per_x0020force = 58,
	eml22__MeasureClass__force_x0020per_x0020length = 59,
	eml22__MeasureClass__force_x0020per_x0020volume = 60,
	eml22__MeasureClass__frequency = 61,
	eml22__MeasureClass__frequency_x0020interval = 62,
	eml22__MeasureClass__heat_x0020capacity = 63,
	eml22__MeasureClass__heat_x0020flow_x0020rate = 64,
	eml22__MeasureClass__heat_x0020transfer_x0020coefficient = 'A',
	eml22__MeasureClass__illuminance = 'B',
	eml22__MeasureClass__inductance = 'C',
	eml22__MeasureClass__isothermal_x0020compressibility = 'D',
	eml22__MeasureClass__kinematic_x0020viscosity = 'E',
	eml22__MeasureClass__length = 'F',
	eml22__MeasureClass__length_x0020per_x0020length = 'G',
	eml22__MeasureClass__length_x0020per_x0020mass = 'H',
	eml22__MeasureClass__length_x0020per_x0020pressure = 'I',
	eml22__MeasureClass__length_x0020per_x0020temperature = 'J',
	eml22__MeasureClass__length_x0020per_x0020time = 'K',
	eml22__MeasureClass__length_x0020per_x0020volume = 'L',
	eml22__MeasureClass__light_x0020exposure = 'M',
	eml22__MeasureClass__linear_x0020acceleration = 'N',
	eml22__MeasureClass__linear_x0020thermal_x0020expansion = 'O',
	eml22__MeasureClass__logarithmic_x0020power_x0020ratio = 'P',
	eml22__MeasureClass__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml22__MeasureClass__luminance = 'R',
	eml22__MeasureClass__luminous_x0020efficacy = 'S',
	eml22__MeasureClass__luminous_x0020flux = 'T',
	eml22__MeasureClass__luminous_x0020intensity = 'U',
	eml22__MeasureClass__magnetic_x0020dipole_x0020moment = 'V',
	eml22__MeasureClass__magnetic_x0020field_x0020strength = 'W',
	eml22__MeasureClass__magnetic_x0020flux = 'X',
	eml22__MeasureClass__magnetic_x0020flux_x0020density = 'Y',
	eml22__MeasureClass__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml22__MeasureClass__magnetic_x0020permeability = 91,
	eml22__MeasureClass__magnetic_x0020vector_x0020potential = 92,
	eml22__MeasureClass__mass = 93,
	eml22__MeasureClass__mass_x0020length = 94,
	eml22__MeasureClass__mass_x0020per_x0020area = 95,
	eml22__MeasureClass__mass_x0020per_x0020energy = 96,
	eml22__MeasureClass__mass_x0020per_x0020length = 'a',
	eml22__MeasureClass__mass_x0020per_x0020mass = 'b',
	eml22__MeasureClass__mass_x0020per_x0020time = 'c',
	eml22__MeasureClass__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml22__MeasureClass__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml22__MeasureClass__mass_x0020per_x0020volume = 'f',
	eml22__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml22__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml22__MeasureClass__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml22__MeasureClass__mobility = 'j',
	eml22__MeasureClass__molar_x0020energy = 'k',
	eml22__MeasureClass__molar_x0020heat_x0020capacity = 'l',
	eml22__MeasureClass__molar_x0020volume = 'm',
	eml22__MeasureClass__molecular_x0020weight = 'n',
	eml22__MeasureClass__moment_x0020of_x0020force = 'o',
	eml22__MeasureClass__moment_x0020of_x0020inertia = 'p',
	eml22__MeasureClass__momentum = 'q',
	eml22__MeasureClass__normalized_x0020power = 'r',
	eml22__MeasureClass__permeability_x0020length = 's',
	eml22__MeasureClass__permeability_x0020rock = 't',
	eml22__MeasureClass__permittivity = 'u',
	eml22__MeasureClass__plane_x0020angle = 'v',
	eml22__MeasureClass__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml22__MeasureClass__power = 'x',
	eml22__MeasureClass__power_x0020per_x0020area = 'y',
	eml22__MeasureClass__power_x0020per_x0020power = 'z',
	eml22__MeasureClass__power_x0020per_x0020volume = 123,
	eml22__MeasureClass__pressure = 124,
	eml22__MeasureClass__pressure_x0020per_x0020pressure = 125,
	eml22__MeasureClass__pressure_x0020per_x0020time = 126,
	eml22__MeasureClass__pressure_x0020per_x0020volume = 127,
	eml22__MeasureClass__pressure_x0020squared = 128,
	eml22__MeasureClass__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml22__MeasureClass__pressure_x0020time_x0020per_x0020volume = 130,
	eml22__MeasureClass__quantity_x0020of_x0020light = 131,
	eml22__MeasureClass__radiance = 132,
	eml22__MeasureClass__radiant_x0020intensity = 133,
	eml22__MeasureClass__reciprocal_x0020area = 134,
	eml22__MeasureClass__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml22__MeasureClass__reciprocal_x0020force = 136,
	eml22__MeasureClass__reciprocal_x0020length = 137,
	eml22__MeasureClass__reciprocal_x0020mass = 138,
	eml22__MeasureClass__reciprocal_x0020mass_x0020time = 139,
	eml22__MeasureClass__reciprocal_x0020pressure = 140,
	eml22__MeasureClass__reciprocal_x0020time = 141,
	eml22__MeasureClass__reciprocal_x0020volume = 142,
	eml22__MeasureClass__reluctance = 143,
	eml22__MeasureClass__second_x0020moment_x0020of_x0020area = 144,
	eml22__MeasureClass__signaling_x0020event_x0020per_x0020time = 145,
	eml22__MeasureClass__solid_x0020angle = 146,
	eml22__MeasureClass__specific_x0020heat_x0020capacity = 147,
	eml22__MeasureClass__temperature_x0020interval = 148,
	eml22__MeasureClass__temperature_x0020interval_x0020per_x0020length = 149,
	eml22__MeasureClass__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml22__MeasureClass__temperature_x0020interval_x0020per_x0020time = 151,
	eml22__MeasureClass__thermal_x0020conductance = 152,
	eml22__MeasureClass__thermal_x0020conductivity = 153,
	eml22__MeasureClass__thermal_x0020diffusivity = 154,
	eml22__MeasureClass__thermal_x0020insulance = 155,
	eml22__MeasureClass__thermal_x0020resistance = 156,
	eml22__MeasureClass__thermodynamic_x0020temperature = 157,
	eml22__MeasureClass__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml22__MeasureClass__time = 159,
	eml22__MeasureClass__time_x0020per_x0020length = 160,
	eml22__MeasureClass__time_x0020per_x0020mass = 161,
	eml22__MeasureClass__time_x0020per_x0020time = 162,
	eml22__MeasureClass__time_x0020per_x0020volume = 163,
	eml22__MeasureClass__vertical_x0020coordinate = 164,
	eml22__MeasureClass__volume = 165,
	eml22__MeasureClass__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml22__MeasureClass__volume_x0020per_x0020area = 167,
	eml22__MeasureClass__volume_x0020per_x0020length = 168,
	eml22__MeasureClass__volume_x0020per_x0020mass = 169,
	eml22__MeasureClass__volume_x0020per_x0020pressure = 170,
	eml22__MeasureClass__volume_x0020per_x0020rotation = 171,
	eml22__MeasureClass__volume_x0020per_x0020time = 172,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020length = 173,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml22__MeasureClass__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml22__MeasureClass__volume_x0020per_x0020volume = 180,
	eml22__MeasureClass__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml22__MeasureClass__volumetric_x0020thermal_x0020expansion = 182,
	eml22__MeasureClass__unitless = 183
};
#endif

/* eml2_2ForGsoap.h:16112 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind (-1262)

/* eml22:QuantityClassKind */
enum eml22__QuantityClassKind {
	eml22__QuantityClassKind__absorbed_x0020dose = 0,
	eml22__QuantityClassKind__activity_x0020of_x0020radioactivity = 1,
	eml22__QuantityClassKind__amount_x0020of_x0020substance = 2,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020amount_x0020of_x0020substance = 3,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020area = 4,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time = 5,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020time_x0020per_x0020area = 6,
	eml22__QuantityClassKind__amount_x0020of_x0020substance_x0020per_x0020volume = 7,
	eml22__QuantityClassKind__angle_x0020per_x0020length = 8,
	eml22__QuantityClassKind__angle_x0020per_x0020volume = 9,
	eml22__QuantityClassKind__angular_x0020acceleration = 10,
	eml22__QuantityClassKind__angular_x0020velocity = 11,
	eml22__QuantityClassKind__api_x0020gamma_x0020ray = 12,
	eml22__QuantityClassKind__api_x0020gravity = 13,
	eml22__QuantityClassKind__api_x0020neutron = 14,
	eml22__QuantityClassKind__area = 15,
	eml22__QuantityClassKind__area_x0020per_x0020amount_x0020of_x0020substance = 16,
	eml22__QuantityClassKind__area_x0020per_x0020area = 17,
	eml22__QuantityClassKind__area_x0020per_x0020count = 18,
	eml22__QuantityClassKind__area_x0020per_x0020mass = 19,
	eml22__QuantityClassKind__area_x0020per_x0020time = 20,
	eml22__QuantityClassKind__area_x0020per_x0020volume = 21,
	eml22__QuantityClassKind__attenuation_x0020per_x0020frequency_x0020interval = 22,
	eml22__QuantityClassKind__capacitance = 23,
	eml22__QuantityClassKind__cation_x0020exchange_x0020capacity = 24,
	eml22__QuantityClassKind__data_x0020transfer_x0020speed = 25,
	eml22__QuantityClassKind__diffusion_x0020coefficient = 26,
	eml22__QuantityClassKind__diffusive_x0020time_x0020of_x0020flight = 27,
	eml22__QuantityClassKind__digital_x0020storage = 28,
	eml22__QuantityClassKind__dimensionless = 29,
	eml22__QuantityClassKind__dipole_x0020moment = 30,
	eml22__QuantityClassKind__dose_x0020equivalent = 31,
	eml22__QuantityClassKind__dynamic_x0020viscosity = 32,
	eml22__QuantityClassKind__electric_x0020charge = 33,
	eml22__QuantityClassKind__electric_x0020charge_x0020per_x0020area = 34,
	eml22__QuantityClassKind__electric_x0020charge_x0020per_x0020mass = 35,
	eml22__QuantityClassKind__electric_x0020charge_x0020per_x0020volume = 36,
	eml22__QuantityClassKind__electric_x0020conductance = 37,
	eml22__QuantityClassKind__electric_x0020conductivity = 38,
	eml22__QuantityClassKind__electric_x0020current = 39,
	eml22__QuantityClassKind__electric_x0020current_x0020density = 40,
	eml22__QuantityClassKind__electric_x0020field_x0020strength = 41,
	eml22__QuantityClassKind__electric_x0020potential_x0020difference = 42,
	eml22__QuantityClassKind__electric_x0020resistance = 43,
	eml22__QuantityClassKind__electric_x0020resistance_x0020per_x0020length = 44,
	eml22__QuantityClassKind__electrical_x0020resistivity = 45,
	eml22__QuantityClassKind__electromagnetic_x0020moment = 46,
	eml22__QuantityClassKind__energy = 47,
	eml22__QuantityClassKind__energy_x0020length_x0020per_x0020area = 48,
	eml22__QuantityClassKind__energy_x0020length_x0020per_x0020time_x0020area_x0020temperature = 49,
	eml22__QuantityClassKind__energy_x0020per_x0020area = 50,
	eml22__QuantityClassKind__energy_x0020per_x0020length = 51,
	eml22__QuantityClassKind__energy_x0020per_x0020mass = 52,
	eml22__QuantityClassKind__energy_x0020per_x0020mass_x0020per_x0020time = 53,
	eml22__QuantityClassKind__energy_x0020per_x0020volume = 54,
	eml22__QuantityClassKind__force = 55,
	eml22__QuantityClassKind__force_x0020area = 56,
	eml22__QuantityClassKind__force_x0020length_x0020per_x0020length = 57,
	eml22__QuantityClassKind__force_x0020per_x0020force = 58,
	eml22__QuantityClassKind__force_x0020per_x0020length = 59,
	eml22__QuantityClassKind__force_x0020per_x0020volume = 60,
	eml22__QuantityClassKind__frequency = 61,
	eml22__QuantityClassKind__frequency_x0020interval = 62,
	eml22__QuantityClassKind__heat_x0020capacity = 63,
	eml22__QuantityClassKind__heat_x0020flow_x0020rate = 64,
	eml22__QuantityClassKind__heat_x0020transfer_x0020coefficient = 'A',
	eml22__QuantityClassKind__illuminance = 'B',
	eml22__QuantityClassKind__inductance = 'C',
	eml22__QuantityClassKind__isothermal_x0020compressibility = 'D',
	eml22__QuantityClassKind__kinematic_x0020viscosity = 'E',
	eml22__QuantityClassKind__length = 'F',
	eml22__QuantityClassKind__length_x0020per_x0020length = 'G',
	eml22__QuantityClassKind__length_x0020per_x0020mass = 'H',
	eml22__QuantityClassKind__length_x0020per_x0020pressure = 'I',
	eml22__QuantityClassKind__length_x0020per_x0020temperature = 'J',
	eml22__QuantityClassKind__length_x0020per_x0020time = 'K',
	eml22__QuantityClassKind__length_x0020per_x0020volume = 'L',
	eml22__QuantityClassKind__light_x0020exposure = 'M',
	eml22__QuantityClassKind__linear_x0020acceleration = 'N',
	eml22__QuantityClassKind__linear_x0020thermal_x0020expansion = 'O',
	eml22__QuantityClassKind__logarithmic_x0020power_x0020ratio = 'P',
	eml22__QuantityClassKind__logarithmic_x0020power_x0020ratio_x0020per_x0020length = 'Q',
	eml22__QuantityClassKind__luminance = 'R',
	eml22__QuantityClassKind__luminous_x0020efficacy = 'S',
	eml22__QuantityClassKind__luminous_x0020flux = 'T',
	eml22__QuantityClassKind__luminous_x0020intensity = 'U',
	eml22__QuantityClassKind__magnetic_x0020dipole_x0020moment = 'V',
	eml22__QuantityClassKind__magnetic_x0020field_x0020strength = 'W',
	eml22__QuantityClassKind__magnetic_x0020flux = 'X',
	eml22__QuantityClassKind__magnetic_x0020flux_x0020density = 'Y',
	eml22__QuantityClassKind__magnetic_x0020flux_x0020density_x0020per_x0020length = 'Z',
	eml22__QuantityClassKind__magnetic_x0020permeability = 91,
	eml22__QuantityClassKind__magnetic_x0020vector_x0020potential = 92,
	eml22__QuantityClassKind__mass = 93,
	eml22__QuantityClassKind__mass_x0020length = 94,
	eml22__QuantityClassKind__mass_x0020per_x0020area = 95,
	eml22__QuantityClassKind__mass_x0020per_x0020energy = 96,
	eml22__QuantityClassKind__mass_x0020per_x0020length = 'a',
	eml22__QuantityClassKind__mass_x0020per_x0020mass = 'b',
	eml22__QuantityClassKind__mass_x0020per_x0020time = 'c',
	eml22__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020area = 'd',
	eml22__QuantityClassKind__mass_x0020per_x0020time_x0020per_x0020length = 'e',
	eml22__QuantityClassKind__mass_x0020per_x0020volume = 'f',
	eml22__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020length = 'g',
	eml22__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020pressure = 'h',
	eml22__QuantityClassKind__mass_x0020per_x0020volume_x0020per_x0020temperature = 'i',
	eml22__QuantityClassKind__mobility = 'j',
	eml22__QuantityClassKind__molar_x0020energy = 'k',
	eml22__QuantityClassKind__molar_x0020heat_x0020capacity = 'l',
	eml22__QuantityClassKind__molar_x0020volume = 'm',
	eml22__QuantityClassKind__molecular_x0020weight = 'n',
	eml22__QuantityClassKind__moment_x0020of_x0020force = 'o',
	eml22__QuantityClassKind__moment_x0020of_x0020inertia = 'p',
	eml22__QuantityClassKind__momentum = 'q',
	eml22__QuantityClassKind__normalized_x0020power = 'r',
	eml22__QuantityClassKind__permeability_x0020length = 's',
	eml22__QuantityClassKind__permeability_x0020rock = 't',
	eml22__QuantityClassKind__permittivity = 'u',
	eml22__QuantityClassKind__plane_x0020angle = 'v',
	eml22__QuantityClassKind__potential_x0020difference_x0020per_x0020power_x0020drop = 'w',
	eml22__QuantityClassKind__power = 'x',
	eml22__QuantityClassKind__power_x0020per_x0020area = 'y',
	eml22__QuantityClassKind__power_x0020per_x0020power = 'z',
	eml22__QuantityClassKind__power_x0020per_x0020volume = 123,
	eml22__QuantityClassKind__pressure = 124,
	eml22__QuantityClassKind__pressure_x0020per_x0020pressure = 125,
	eml22__QuantityClassKind__pressure_x0020per_x0020time = 126,
	eml22__QuantityClassKind__pressure_x0020per_x0020volume = 127,
	eml22__QuantityClassKind__pressure_x0020squared = 128,
	eml22__QuantityClassKind__pressure_x0020squared_x0020per_x0020force_x0020time_x0020per_x0020area = 129,
	eml22__QuantityClassKind__pressure_x0020time_x0020per_x0020volume = 130,
	eml22__QuantityClassKind__quantity_x0020of_x0020light = 131,
	eml22__QuantityClassKind__radiance = 132,
	eml22__QuantityClassKind__radiant_x0020intensity = 133,
	eml22__QuantityClassKind__reciprocal_x0020area = 134,
	eml22__QuantityClassKind__reciprocal_x0020electric_x0020potential_x0020difference = 135,
	eml22__QuantityClassKind__reciprocal_x0020force = 136,
	eml22__QuantityClassKind__reciprocal_x0020length = 137,
	eml22__QuantityClassKind__reciprocal_x0020mass = 138,
	eml22__QuantityClassKind__reciprocal_x0020mass_x0020time = 139,
	eml22__QuantityClassKind__reciprocal_x0020pressure = 140,
	eml22__QuantityClassKind__reciprocal_x0020time = 141,
	eml22__QuantityClassKind__reciprocal_x0020volume = 142,
	eml22__QuantityClassKind__reluctance = 143,
	eml22__QuantityClassKind__second_x0020moment_x0020of_x0020area = 144,
	eml22__QuantityClassKind__signaling_x0020event_x0020per_x0020time = 145,
	eml22__QuantityClassKind__solid_x0020angle = 146,
	eml22__QuantityClassKind__specific_x0020heat_x0020capacity = 147,
	eml22__QuantityClassKind__temperature_x0020interval = 148,
	eml22__QuantityClassKind__temperature_x0020interval_x0020per_x0020length = 149,
	eml22__QuantityClassKind__temperature_x0020interval_x0020per_x0020pressure = 150,
	eml22__QuantityClassKind__temperature_x0020interval_x0020per_x0020time = 151,
	eml22__QuantityClassKind__thermal_x0020conductance = 152,
	eml22__QuantityClassKind__thermal_x0020conductivity = 153,
	eml22__QuantityClassKind__thermal_x0020diffusivity = 154,
	eml22__QuantityClassKind__thermal_x0020insulance = 155,
	eml22__QuantityClassKind__thermal_x0020resistance = 156,
	eml22__QuantityClassKind__thermodynamic_x0020temperature = 157,
	eml22__QuantityClassKind__thermodynamic_x0020temperature_x0020per_x0020thermodynamic_x0020temperature = 158,
	eml22__QuantityClassKind__time = 159,
	eml22__QuantityClassKind__time_x0020per_x0020length = 160,
	eml22__QuantityClassKind__time_x0020per_x0020mass = 161,
	eml22__QuantityClassKind__time_x0020per_x0020time = 162,
	eml22__QuantityClassKind__time_x0020per_x0020volume = 163,
	eml22__QuantityClassKind__vertical_x0020coordinate = 164,
	eml22__QuantityClassKind__volume = 165,
	eml22__QuantityClassKind__volume_x0020flow_x0020rate_x0020per_x0020volume_x0020flow_x0020rate = 166,
	eml22__QuantityClassKind__volume_x0020per_x0020area = 167,
	eml22__QuantityClassKind__volume_x0020per_x0020length = 168,
	eml22__QuantityClassKind__volume_x0020per_x0020mass = 169,
	eml22__QuantityClassKind__volume_x0020per_x0020pressure = 170,
	eml22__QuantityClassKind__volume_x0020per_x0020rotation = 171,
	eml22__QuantityClassKind__volume_x0020per_x0020time = 172,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020length = 173,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020area = 174,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020length = 175,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure = 176,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020pressure_x0020length = 177,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020time = 178,
	eml22__QuantityClassKind__volume_x0020per_x0020time_x0020per_x0020volume = 179,
	eml22__QuantityClassKind__volume_x0020per_x0020volume = 180,
	eml22__QuantityClassKind__volumetric_x0020heat_x0020transfer_x0020coefficient = 181,
	eml22__QuantityClassKind__volumetric_x0020thermal_x0020expansion = 182,
	eml22__QuantityClassKind__unitless = 183,
	eml22__QuantityClassKind__not_x0020a_x0020measure = 184
};
#endif

/* eml2_2ForGsoap.h:16318 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition (-1263)

/* eml22:ReferenceCondition */
enum eml22__ReferenceCondition {
	eml22__ReferenceCondition__0_x0020degC_x00201_x0020atm = 0,
	eml22__ReferenceCondition__0_x0020degC_x00201_x0020bar = 1,
	eml22__ReferenceCondition__15_x0020degC_x00201_x0020atm = 2,
	eml22__ReferenceCondition__15_x0020degC_x00201_x0020bar = 3,
	eml22__ReferenceCondition__20_x0020degC_x00201_x0020atm = 4,
	eml22__ReferenceCondition__20_x0020degC_x00201_x0020bar = 5,
	eml22__ReferenceCondition__25_x0020degC_x00201_x0020bar = 6,
	eml22__ReferenceCondition__60_x0020degF_x00201_x0020atm = 7,
	eml22__ReferenceCondition__60_x0020degF_x002030_x0020in_x0020Hg = 8,
	eml22__ReferenceCondition__ambient = 9
};
#endif

/* eml2_2ForGsoap.h:16352 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference (-1264)

/* eml22:WellboreDatumReference */
enum eml22__WellboreDatumReference {
	eml22__WellboreDatumReference__ground_x0020level = 0,
	eml22__WellboreDatumReference__kelly_x0020bushing = 1,
	eml22__WellboreDatumReference__mean_x0020sea_x0020level = 2,
	eml22__WellboreDatumReference__derrick_x0020floor = 3,
	eml22__WellboreDatumReference__casing_x0020flange = 4,
	eml22__WellboreDatumReference__crown_x0020valve = 5,
	eml22__WellboreDatumReference__rotary_x0020bushing = 6,
	eml22__WellboreDatumReference__rotary_x0020table = 7,
	eml22__WellboreDatumReference__sea_x0020floor = 8,
	eml22__WellboreDatumReference__lowest_x0020astronomical_x0020tide = 9,
	eml22__WellboreDatumReference__mean_x0020higher_x0020high_x0020water = 10,
	eml22__WellboreDatumReference__mean_x0020high_x0020water = 11,
	eml22__WellboreDatumReference__mean_x0020lower_x0020low_x0020water = 12,
	eml22__WellboreDatumReference__mean_x0020low_x0020water = 13,
	eml22__WellboreDatumReference__mean_x0020tide_x0020level = 14,
	eml22__WellboreDatumReference__kickoff_x0020point = 15
};
#endif

/* eml2_2ForGsoap.h:16415 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus (-1265)

/* eml22:WellStatus */
enum eml22__WellStatus {
	eml22__WellStatus__abandoned = 0,
	eml22__WellStatus__active = 1,
	eml22__WellStatus__active_x0020_x002d__x0020injecting = 2,
	eml22__WellStatus__active_x0020_x002d__x0020producing = 3,
	eml22__WellStatus__completed = 4,
	eml22__WellStatus__drilling = 5,
	eml22__WellStatus__partially_x0020plugged = 6,
	eml22__WellStatus__permitted = 7,
	eml22__WellStatus__plugged_x0020and_x0020abandoned = 8,
	eml22__WellStatus__proposed = 9,
	eml22__WellStatus__sold = 10,
	eml22__WellStatus__suspended = 11,
	eml22__WellStatus__temporarily_x0020abandoned = 12,
	eml22__WellStatus__testing = 13,
	eml22__WellStatus__tight = 14,
	eml22__WellStatus__working_x0020over = 15,
	eml22__WellStatus__unknown = 16
};
#endif

/* eml2_2ForGsoap.h:16513 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind (-1266)

/* eml22:ReferencePressureKind */
enum eml22__ReferencePressureKind {
	eml22__ReferencePressureKind__absolute = 0,
	eml22__ReferencePressureKind__ambient = 1,
	eml22__ReferencePressureKind__legal = 2
};
#endif

/* eml2_2ForGsoap.h:27451 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition (-1567)

/* gml:RelatedTimeType-relativePosition */
enum _gml__RelatedTimeType_relativePosition {
	_gml__RelatedTimeType_relativePosition__Before = 0,
	_gml__RelatedTimeType_relativePosition__After = 1,
	_gml__RelatedTimeType_relativePosition__Begins = 2,
	_gml__RelatedTimeType_relativePosition__Ends = 3,
	_gml__RelatedTimeType_relativePosition__During = 4,
	_gml__RelatedTimeType_relativePosition__Equals = 5,
	_gml__RelatedTimeType_relativePosition__Contains = 6,
	_gml__RelatedTimeType_relativePosition__Overlaps = 7,
	_gml__RelatedTimeType_relativePosition__Meets = 8,
	_gml__RelatedTimeType_relativePosition__OverlappedBy = 9,
	_gml__RelatedTimeType_relativePosition__MetBy = 10,
	_gml__RelatedTimeType_relativePosition__BegunBy = 11,
	_gml__RelatedTimeType_relativePosition__EndedBy = 12
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* custom/struct_tm.h:101 */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-9)

typedef struct tm xsd__dateTime;
#endif

/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class resqml2__AbstractGraphicalInformationForIndexableElement;	/* eml2_2ForGsoap.h:284 */
class resqml2__ContinuousColorMapEntry;	/* eml2_2ForGsoap.h:296 */
class resqml2__DiscreteColorMapEntry;	/* eml2_2ForGsoap.h:304 */
class resqml2__HsvColor;	/* eml2_2ForGsoap.h:316 */
class resqml2__MinMax;	/* eml2_2ForGsoap.h:318 */
class resqml2__AbstractContactInterpretationPart;	/* eml2_2ForGsoap.h:342 */
class resqml2__AbstractTimeInterval;	/* eml2_2ForGsoap.h:350 */
class resqml2__BoundaryFeatureInterpretationPlusItsRank;	/* eml2_2ForGsoap.h:356 */
class resqml2__FaultThrow;	/* eml2_2ForGsoap.h:364 */
class resqml2__CorrectionInformation;	/* eml2_2ForGsoap.h:404 */
class resqml2__TvdInformation;	/* eml2_2ForGsoap.h:412 */
class resqml2__WellboreTrajectoryParentIntersection;	/* eml2_2ForGsoap.h:426 */
class resqml2__WitsmlWellboreReference;	/* eml2_2ForGsoap.h:430 */
class resqml2__AbstractContactRepresentationPart;	/* eml2_2ForGsoap.h:432 */
class resqml2__ContactIdentity;	/* eml2_2ForGsoap.h:438 */
class resqml2__OrientedMacroFace;	/* eml2_2ForGsoap.h:458 */
class resqml2__PatchBoundaries;	/* eml2_2ForGsoap.h:460 */
class resqml2__VolumeRegion;	/* eml2_2ForGsoap.h:478 */
class resqml2__VolumeShell;	/* eml2_2ForGsoap.h:480 */
class resqml2__AbstractGeometry;	/* eml2_2ForGsoap.h:482 */
class resqml2__AbstractParametricLineArray;	/* eml2_2ForGsoap.h:484 */
class resqml2__AbstractPoint3dArray;	/* eml2_2ForGsoap.h:490 */
class resqml2__ParametricLineIntersections;	/* eml2_2ForGsoap.h:502 */
class resqml2__Point3d;	/* eml2_2ForGsoap.h:506 */
class resqml2__Point3dOffset;	/* eml2_2ForGsoap.h:514 */
class resqml2__ThreePoint3d;	/* eml2_2ForGsoap.h:524 */
class resqml2__AbstractSeismicCoordinates;	/* eml2_2ForGsoap.h:528 */
class resqml2__AbstractParentWindow;	/* eml2_2ForGsoap.h:560 */
class resqml2__Activation;	/* eml2_2ForGsoap.h:564 */
class resqml2__AdditionalGridPoints;	/* eml2_2ForGsoap.h:566 */
class resqml2__AdditionalGridTopology;	/* eml2_2ForGsoap.h:568 */
class resqml2__AlternateCellIndex;	/* eml2_2ForGsoap.h:570 */
class resqml2__CellFluidPhaseUnits;	/* eml2_2ForGsoap.h:572 */
struct __resqml2__CellOverlap_sequence;	/* eml2_2ForGsoap.h:17819 */
class resqml2__CellOverlap;	/* eml2_2ForGsoap.h:574 */
class resqml2__ColumnLayerGpGrid;	/* eml2_2ForGsoap.h:578 */
class resqml2__ColumnLayerSplitCoordinateLines;	/* eml2_2ForGsoap.h:582 */
class resqml2__ConnectionInterpretations;	/* eml2_2ForGsoap.h:588 */
class resqml2__Edges;	/* eml2_2ForGsoap.h:590 */
struct __resqml2__IjGaps_sequence;	/* eml2_2ForGsoap.h:18012 */
class resqml2__IjGaps;	/* eml2_2ForGsoap.h:596 */
class resqml2__IntervalGridCells;	/* eml2_2ForGsoap.h:606 */
class resqml2__Intervals;	/* eml2_2ForGsoap.h:608 */
class resqml2__IntervalStratigraphicUnits;	/* eml2_2ForGsoap.h:610 */
struct __resqml2__KGaps_sequence;	/* eml2_2ForGsoap.h:18206 */
class resqml2__KGaps;	/* eml2_2ForGsoap.h:612 */
struct __resqml2__OverlapVolume_sequence;	/* eml2_2ForGsoap.h:18249 */
class resqml2__OverlapVolume;	/* eml2_2ForGsoap.h:616 */
class resqml2__Regrid;	/* eml2_2ForGsoap.h:618 */
class resqml2__SplitColumnEdges;	/* eml2_2ForGsoap.h:620 */
class resqml2__SplitEdges;	/* eml2_2ForGsoap.h:622 */
class resqml2__SplitFaces;	/* eml2_2ForGsoap.h:624 */
class resqml2__SubnodeTopology;	/* eml2_2ForGsoap.h:630 */
class resqml2__UnstructuredColumnEdges;	/* eml2_2ForGsoap.h:640 */
class resqml2__UnstructuredGridHingeNodeFaces;	/* eml2_2ForGsoap.h:652 */
class resqml2__ElementIdentity;	/* eml2_2ForGsoap.h:662 */
struct __resqml2__ElementIndices_sequence;	/* eml2_2ForGsoap.h:18593 */
class resqml2__ElementIndices;	/* eml2_2ForGsoap.h:664 */
class resqml2__Patch;	/* eml2_2ForGsoap.h:666 */
class resqml2__PatchOfGeometry;	/* eml2_2ForGsoap.h:670 */
class resqml2__RepresentationIdentity;	/* eml2_2ForGsoap.h:678 */
class resqml2__DoubleLookup;	/* eml2_2ForGsoap.h:706 */
class resqml2__PatchOfPoints;	/* eml2_2ForGsoap.h:710 */
class resqml2__PatchOfValues;	/* eml2_2ForGsoap.h:712 */
class resqml2__PropertyKindFacet;	/* eml2_2ForGsoap.h:716 */
class resqml2__StringLookup;	/* eml2_2ForGsoap.h:720 */
class resqml2__StreamlineWellbores;	/* eml2_2ForGsoap.h:728 */
class eml22__AbstractObject;	/* eml2_2ForGsoap.h:730 */
class eml22__Citation;	/* eml2_2ForGsoap.h:732 */
class eml22__CustomData;	/* eml2_2ForGsoap.h:734 */
class eml22__ExtensionNameValue;	/* eml2_2ForGsoap.h:736 */
class eml22__ObjectAlias;	/* eml2_2ForGsoap.h:738 */
class eml22__AbstractValueArray;	/* eml2_2ForGsoap.h:750 */
class eml22__DummyType;	/* eml2_2ForGsoap.h:762 */
class eml22__JaggedArray;	/* eml2_2ForGsoap.h:784 */
class eml22__MdInterval;	/* eml2_2ForGsoap.h:786 */
class eml22__TvdInterval;	/* eml2_2ForGsoap.h:794 */
class eml22__DataObjectReference;	/* eml2_2ForGsoap.h:1530 */
class eml22__ExternalDataset;	/* eml2_2ForGsoap.h:1534 */
class eml22__ExternalDatasetPart;	/* eml2_2ForGsoap.h:1536 */
class eml22__AbstractActivityParameter;	/* eml2_2ForGsoap.h:1538 */
class eml22__AbstractParameterKey;	/* eml2_2ForGsoap.h:1540 */
class eml22__ParameterTemplate;	/* eml2_2ForGsoap.h:1554 */
class eml22__GeologicTime;	/* eml2_2ForGsoap.h:1562 */
class eml22__TimeIndex;	/* eml2_2ForGsoap.h:1568 */
class eml22__TimeIndices;	/* eml2_2ForGsoap.h:1570 */
class eml22__TimeSeriesParentage;	/* eml2_2ForGsoap.h:1574 */
class eml22__AbstractPressureValue;	/* eml2_2ForGsoap.h:1578 */
union _eml22__union_AbstractTemperaturePressure;	/* eml2_2ForGsoap.h:19854 */
class eml22__AbstractTemperaturePressure;	/* eml2_2ForGsoap.h:1580 */
class eml22__DensityValue;	/* eml2_2ForGsoap.h:1582 */
class eml22__FlowRateValue;	/* eml2_2ForGsoap.h:1584 */
class eml22__PressureValue;	/* eml2_2ForGsoap.h:1588 */
class eml22__VolumeValue;	/* eml2_2ForGsoap.h:1598 */
class eml22__AbstractGeodeticCrs;	/* eml2_2ForGsoap.h:1600 */
class eml22__AbstractProjectedCrs;	/* eml2_2ForGsoap.h:1602 */
class eml22__AbstractVerticalCrs;	/* eml2_2ForGsoap.h:1604 */
class eml22__FailingRule;	/* eml2_2ForGsoap.h:1644 */
class eml22__IndexRange;	/* eml2_2ForGsoap.h:1646 */
class eml22__AbstractGraphicalInformation;	/* eml2_2ForGsoap.h:1648 */
class gml__AbstractGMLType;	/* eml2_2ForGsoap.h:1662 */
class gml__ReferenceType;	/* eml2_2ForGsoap.h:1666 */
union _gml__union_TimePrimitivePropertyType;	/* eml2_2ForGsoap.h:20325 */
struct __gml__TimePrimitivePropertyType_sequence;	/* eml2_2ForGsoap.h:20315 */
class gml__TimePrimitivePropertyType;	/* eml2_2ForGsoap.h:1678 */
struct __gml__EllipsoidalCSPropertyType_sequence;	/* eml2_2ForGsoap.h:20391 */
class gml__EllipsoidalCSPropertyType;	/* eml2_2ForGsoap.h:1680 */
struct __gml__CoordinateSystemAxisPropertyType_sequence;	/* eml2_2ForGsoap.h:20457 */
class gml__CoordinateSystemAxisPropertyType;	/* eml2_2ForGsoap.h:1686 */
struct __gml__CartesianCSPropertyType_sequence;	/* eml2_2ForGsoap.h:20523 */
class gml__CartesianCSPropertyType;	/* eml2_2ForGsoap.h:1690 */
struct __gml__SphericalCSPropertyType_sequence;	/* eml2_2ForGsoap.h:20589 */
class gml__SphericalCSPropertyType;	/* eml2_2ForGsoap.h:1694 */
struct __gml__GeodeticDatumPropertyType_sequence;	/* eml2_2ForGsoap.h:20655 */
class gml__GeodeticDatumPropertyType;	/* eml2_2ForGsoap.h:1698 */
struct __gml__PrimeMeridianPropertyType_sequence;	/* eml2_2ForGsoap.h:20721 */
class gml__PrimeMeridianPropertyType;	/* eml2_2ForGsoap.h:1704 */
struct __gml__EllipsoidPropertyType_sequence;	/* eml2_2ForGsoap.h:20787 */
class gml__EllipsoidPropertyType;	/* eml2_2ForGsoap.h:1712 */
union _gml__union_GeneralConversionPropertyType;	/* eml2_2ForGsoap.h:20864 */
struct __gml__GeneralConversionPropertyType_sequence;	/* eml2_2ForGsoap.h:20853 */
class gml__GeneralConversionPropertyType;	/* eml2_2ForGsoap.h:1722 */
union _gml__union_CRSPropertyType;	/* eml2_2ForGsoap.h:20936 */
struct __gml__CRSPropertyType_sequence;	/* eml2_2ForGsoap.h:20926 */
class gml__CRSPropertyType;	/* eml2_2ForGsoap.h:1728 */
struct __gml__GeodeticCRSPropertyType_sequence;	/* eml2_2ForGsoap.h:20998 */
class gml__GeodeticCRSPropertyType;	/* eml2_2ForGsoap.h:1730 */
struct __gml__VerticalCSPropertyType_sequence;	/* eml2_2ForGsoap.h:21060 */
class gml__VerticalCSPropertyType;	/* eml2_2ForGsoap.h:1734 */
struct __gml__VerticalDatumPropertyType_sequence;	/* eml2_2ForGsoap.h:21126 */
class gml__VerticalDatumPropertyType;	/* eml2_2ForGsoap.h:1738 */
struct __gml__domainOfValidity_sequence;	/* eml2_2ForGsoap.h:21193 */
class _gml__domainOfValidity;	/* eml2_2ForGsoap.h:1742 */
class _gml__secondDefiningParameter;	/* eml2_2ForGsoap.h:1744 */
union _gml__union_SecondDefiningParameter;	/* eml2_2ForGsoap.h:21282 */
class _gml__SecondDefiningParameter;	/* eml2_2ForGsoap.h:1746 */
union _gml__union_coordinateOperationAccuracy;	/* eml2_2ForGsoap.h:21323 */
struct __gml__coordinateOperationAccuracy_sequence;	/* eml2_2ForGsoap.h:21317 */
class _gml__coordinateOperationAccuracy;	/* eml2_2ForGsoap.h:1748 */
union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:21403 */
struct __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21397 */
class gmd__EX_USCOREGeographicExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:1752 */
struct __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21463 */
class gmd__EX_USCORETemporalExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:1756 */
struct __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21523 */
class gmd__EX_USCOREVerticalExtent_USCOREPropertyType;	/* eml2_2ForGsoap.h:1760 */
struct __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21583 */
class gmd__MD_USCOREIdentifier_USCOREPropertyType;	/* eml2_2ForGsoap.h:1768 */
struct __gmd__CI_USCORECitation_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21643 */
class gmd__CI_USCORECitation_USCOREPropertyType;	/* eml2_2ForGsoap.h:1772 */
struct __gmd__CI_USCOREDate_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21703 */
class gmd__CI_USCOREDate_USCOREPropertyType;	/* eml2_2ForGsoap.h:1776 */
struct __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21763 */
class gmd__CI_USCOREDateTypeCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:1780 */
struct __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21791 */
class gmd__CI_USCOREResponsibleParty_USCOREPropertyType;	/* eml2_2ForGsoap.h:1782 */
struct __gmd__CI_USCOREContact_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21851 */
class gmd__CI_USCOREContact_USCOREPropertyType;	/* eml2_2ForGsoap.h:1786 */
struct __gmd__CI_USCORETelephone_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21911 */
class gmd__CI_USCORETelephone_USCOREPropertyType;	/* eml2_2ForGsoap.h:1790 */
struct __gmd__CI_USCOREAddress_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:21971 */
class gmd__CI_USCOREAddress_USCOREPropertyType;	/* eml2_2ForGsoap.h:1794 */
struct __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22031 */
class gmd__CI_USCOREOnlineResource_USCOREPropertyType;	/* eml2_2ForGsoap.h:1798 */
struct __gmd__URL_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22091 */
class gmd__URL_USCOREPropertyType;	/* eml2_2ForGsoap.h:1802 */
struct __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22119 */
class gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:1804 */
struct __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22147 */
class gmd__CI_USCORERoleCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:1806 */
struct __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22175 */
class gmd__CI_USCOREPresentationFormCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:1808 */
struct __gmd__CI_USCORESeries_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22203 */
class gmd__CI_USCORESeries_USCOREPropertyType;	/* eml2_2ForGsoap.h:1810 */
struct __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22263 */
class gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType;	/* eml2_2ForGsoap.h:1814 */
union _gmd__union_DQ_USCOREResult_USCOREPropertyType;	/* eml2_2ForGsoap.h:22297 */
struct __gmd__DQ_USCOREResult_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22291 */
class gmd__DQ_USCOREResult_USCOREPropertyType;	/* eml2_2ForGsoap.h:1816 */
union _gts__union_TM_USCOREPrimitive_USCOREPropertyType;	/* eml2_2ForGsoap.h:22375 */
struct __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22365 */
class gts__TM_USCOREPrimitive_USCOREPropertyType;	/* eml2_2ForGsoap.h:1820 */
class gco__AbstractObject_USCOREType;	/* eml2_2ForGsoap.h:1822 */
union _gco__union_CharacterString_USCOREPropertyType;	/* eml2_2ForGsoap.h:22490 */
struct __gco__CharacterString_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22485 */
class gco__CharacterString_USCOREPropertyType;	/* eml2_2ForGsoap.h:1824 */
struct __gco__Boolean_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22540 */
class gco__Boolean_USCOREPropertyType;	/* eml2_2ForGsoap.h:1826 */
struct __gco__Real_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22568 */
class gco__Real_USCOREPropertyType;	/* eml2_2ForGsoap.h:1828 */
union _gco__union_Date_USCOREPropertyType;	/* eml2_2ForGsoap.h:22598 */
class gco__Date_USCOREPropertyType;	/* eml2_2ForGsoap.h:1830 */
struct __gco__DateTime_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22628 */
class gco__DateTime_USCOREPropertyType;	/* eml2_2ForGsoap.h:1834 */
union _gsr__union_SC_USCORECRS_USCOREPropertyType;	/* eml2_2ForGsoap.h:22674 */
struct __gsr__SC_USCORECRS_USCOREPropertyType_sequence;	/* eml2_2ForGsoap.h:22664 */
class gsr__SC_USCORECRS_USCOREPropertyType;	/* eml2_2ForGsoap.h:1836 */
class resqml2__AlphaInformation;	/* eml2_2ForGsoap.h:286 */
class resqml2__AnnotationInformation;	/* eml2_2ForGsoap.h:288 */
class resqml2__ColorInformation;	/* eml2_2ForGsoap.h:290 */
class resqml2__ColorMapDictionary;	/* eml2_2ForGsoap.h:292 */
class resqml2__ContinuousColorMap;	/* eml2_2ForGsoap.h:294 */
class resqml2__ContourLineSetInformation;	/* eml2_2ForGsoap.h:298 */
class resqml2__DefaultGraphicalInformation;	/* eml2_2ForGsoap.h:300 */
class resqml2__DiscreteColorMap;	/* eml2_2ForGsoap.h:302 */
class resqml2__GraphicalInformationForEdges;	/* eml2_2ForGsoap.h:306 */
class resqml2__GraphicalInformationForFaces;	/* eml2_2ForGsoap.h:308 */
class resqml2__GraphicalInformationForNodes;	/* eml2_2ForGsoap.h:310 */
class resqml2__GraphicalInformationForVolumes;	/* eml2_2ForGsoap.h:312 */
class resqml2__GraphicalInformationForWholeObject;	/* eml2_2ForGsoap.h:314 */
class resqml2__SizeInformation;	/* eml2_2ForGsoap.h:320 */
class resqml2__AbstractLocal3dCrs;	/* eml2_2ForGsoap.h:322 */
class resqml2__AbstractFeature;	/* eml2_2ForGsoap.h:328 */
class resqml2__RockVolumeFeatureDictionary;	/* eml2_2ForGsoap.h:340 */
class resqml2__AbstractFeatureInterpretation;	/* eml2_2ForGsoap.h:344 */
class resqml2__BinaryContactInterpretationPart;	/* eml2_2ForGsoap.h:352 */
class resqml2__ContactElementReference;	/* eml2_2ForGsoap.h:358 */
class resqml2__FeatureInterpretationSet;	/* eml2_2ForGsoap.h:366 */
class resqml2__GeneticBoundaryBasedTimeInterval;	/* eml2_2ForGsoap.h:372 */
class resqml2__GeologicTimeBasedTimeInterval;	/* eml2_2ForGsoap.h:378 */
class resqml2__MultipleContactInterpretationPart;	/* eml2_2ForGsoap.h:384 */
class resqml2__StratigraphicColumn;	/* eml2_2ForGsoap.h:390 */
class resqml2__StratigraphicUnitDictionary;	/* eml2_2ForGsoap.h:396 */
class resqml2__MdDatum;	/* eml2_2ForGsoap.h:408 */
class resqml2__WellboreMarker;	/* eml2_2ForGsoap.h:422 */
class resqml2__ContactRepresentationReference;	/* eml2_2ForGsoap.h:442 */
class resqml2__Grid2dPatch;	/* eml2_2ForGsoap.h:446 */
class resqml2__NonSealedContactRepresentationPart;	/* eml2_2ForGsoap.h:454 */
class resqml2__SealedContactRepresentationPart;	/* eml2_2ForGsoap.h:468 */
class resqml2__AbstractParametricLineGeometry;	/* eml2_2ForGsoap.h:486 */
class resqml2__AbstractPlaneGeometry;	/* eml2_2ForGsoap.h:488 */
class resqml2__ParametricLineArray;	/* eml2_2ForGsoap.h:494 */
class resqml2__ParametricLineFromRepresentationLatticeArray;	/* eml2_2ForGsoap.h:498 */
class resqml2__Point2dExternalArray;	/* eml2_2ForGsoap.h:504 */
class resqml2__Point3dExternalArray;	/* eml2_2ForGsoap.h:508 */
class resqml2__Point3dFromRepresentationLatticeArray;	/* eml2_2ForGsoap.h:510 */
class resqml2__Point3dLatticeArray;	/* eml2_2ForGsoap.h:512 */
class resqml2__Point3dParametricArray;	/* eml2_2ForGsoap.h:516 */
class resqml2__Point3dZValueArray;	/* eml2_2ForGsoap.h:518 */
class resqml2__PointGeometry;	/* eml2_2ForGsoap.h:520 */
class resqml2__SinglePointGeometry;	/* eml2_2ForGsoap.h:522 */
class resqml2__Seismic2dCoordinates;	/* eml2_2ForGsoap.h:536 */
class resqml2__Seismic3dCoordinates;	/* eml2_2ForGsoap.h:540 */
class resqml2__CellParentWindow;	/* eml2_2ForGsoap.h:576 */
class resqml2__ColumnLayerParentWindow;	/* eml2_2ForGsoap.h:580 */
class resqml2__ColumnLayerSubnodeTopology;	/* eml2_2ForGsoap.h:584 */
class resqml2__IjkGpGridPatch;	/* eml2_2ForGsoap.h:598 */
class resqml2__IjkParentWindow;	/* eml2_2ForGsoap.h:604 */
class resqml2__LocalGridSet;	/* eml2_2ForGsoap.h:614 */
class resqml2__SplitNodePatch;	/* eml2_2ForGsoap.h:626 */
class resqml2__SubnodePatch;	/* eml2_2ForGsoap.h:628 */
class resqml2__TruncationCellPatch;	/* eml2_2ForGsoap.h:636 */
class resqml2__UnstructuredColumnLayerGpGridPatch;	/* eml2_2ForGsoap.h:642 */
class resqml2__UnstructuredGpGridPatch;	/* eml2_2ForGsoap.h:648 */
class resqml2__UnstructuredSubnodeTopology;	/* eml2_2ForGsoap.h:656 */
class resqml2__AbstractRepresentation;	/* eml2_2ForGsoap.h:660 */
class resqml2__Patch1d;	/* eml2_2ForGsoap.h:668 */
class resqml2__PolylineSetPatch;	/* eml2_2ForGsoap.h:672 */
class resqml2__RepresentationIdentitySet;	/* eml2_2ForGsoap.h:680 */
class resqml2__AbstractProperty;	/* eml2_2ForGsoap.h:688 */
class resqml2__AbstractPropertyLookup;	/* eml2_2ForGsoap.h:690 */
class resqml2__PropertySet;	/* eml2_2ForGsoap.h:718 */
class eml22__AbstractBooleanArray;	/* eml2_2ForGsoap.h:740 */
class eml22__AbstractNumericArray;	/* eml2_2ForGsoap.h:746 */
class eml22__AbstractStringArray;	/* eml2_2ForGsoap.h:748 */
class eml22__EpcExternalPartReference;	/* eml2_2ForGsoap.h:1532 */
class eml22__Activity;	/* eml2_2ForGsoap.h:1542 */
class eml22__ActivityTemplate;	/* eml2_2ForGsoap.h:1544 */
class eml22__DataObjectParameter;	/* eml2_2ForGsoap.h:1546 */
class eml22__DoubleQuantityParameter;	/* eml2_2ForGsoap.h:1548 */
class eml22__IntegerQuantityParameter;	/* eml2_2ForGsoap.h:1550 */
class eml22__ObjectParameterKey;	/* eml2_2ForGsoap.h:1552 */
class eml22__StringParameter;	/* eml2_2ForGsoap.h:1556 */
class eml22__TimeIndexParameter;	/* eml2_2ForGsoap.h:1558 */
class eml22__TimeIndexParameterKey;	/* eml2_2ForGsoap.h:1560 */
class eml22__PropertyKind;	/* eml2_2ForGsoap.h:1564 */
class eml22__PropertyKindDictionary;	/* eml2_2ForGsoap.h:1566 */
class eml22__TimeSeries;	/* eml2_2ForGsoap.h:1572 */
class eml22__AbsolutePressure;	/* eml2_2ForGsoap.h:1576 */
class eml22__GaugePressure;	/* eml2_2ForGsoap.h:1586 */
union _eml22__union_ReferenceTemperaturePressure_;	/* eml2_2ForGsoap.h:26448 */
class eml22__ReferenceTemperaturePressure;	/* eml2_2ForGsoap.h:1592 */
class eml22__RelativePressure;	/* eml2_2ForGsoap.h:1594 */
class eml22__TemperaturePressure;	/* eml2_2ForGsoap.h:1596 */
class eml22__GeodeticCrs;	/* eml2_2ForGsoap.h:1606 */
class eml22__GeodeticEpsgCrs;	/* eml2_2ForGsoap.h:1608 */
class eml22__GeodeticGmlCrs;	/* eml2_2ForGsoap.h:1610 */
class eml22__GeodeticLocalAuthorityCrs;	/* eml2_2ForGsoap.h:1612 */
class eml22__GeodeticUnknownCrs;	/* eml2_2ForGsoap.h:1614 */
class eml22__GeodeticWktCrs;	/* eml2_2ForGsoap.h:1616 */
class eml22__ProjectedCrs;	/* eml2_2ForGsoap.h:1618 */
class eml22__ProjectedEpsgCrs;	/* eml2_2ForGsoap.h:1620 */
class eml22__ProjectedGmlCrs;	/* eml2_2ForGsoap.h:1622 */
class eml22__ProjectedLocalAuthorityCrs;	/* eml2_2ForGsoap.h:1624 */
class eml22__ProjectedUnknownCrs;	/* eml2_2ForGsoap.h:1626 */
class eml22__ProjectedWktCrs;	/* eml2_2ForGsoap.h:1628 */
class eml22__VerticalCrs;	/* eml2_2ForGsoap.h:1630 */
class eml22__VerticalEpsgCrs;	/* eml2_2ForGsoap.h:1632 */
class eml22__VerticalGmlCrs;	/* eml2_2ForGsoap.h:1634 */
class eml22__VerticalLocalAuthorityCrs;	/* eml2_2ForGsoap.h:1636 */
class eml22__VerticalUnknownCrs;	/* eml2_2ForGsoap.h:1638 */
class eml22__VerticalWktCrs;	/* eml2_2ForGsoap.h:1640 */
class eml22__DataAssuranceRecord;	/* eml2_2ForGsoap.h:1642 */
class eml22__GraphicalInformationSet;	/* eml2_2ForGsoap.h:1650 */
class gml__DefinitionBaseType;	/* eml2_2ForGsoap.h:1660 */
class gml__StringOrRefType;	/* eml2_2ForGsoap.h:1664 */
class gml__CodeType;	/* eml2_2ForGsoap.h:1670 */
class gml__AbstractTimeObjectType;	/* eml2_2ForGsoap.h:1674 */
class gml__RelatedTimeType;	/* eml2_2ForGsoap.h:1676 */
class gml__MeasureType;	/* eml2_2ForGsoap.h:1710 */
class gmd__EX_USCOREExtent_USCOREType;	/* eml2_2ForGsoap.h:1750 */
class gmd__AbstractEX_USCOREGeographicExtent_USCOREType;	/* eml2_2ForGsoap.h:1754 */
class gmd__EX_USCORETemporalExtent_USCOREType;	/* eml2_2ForGsoap.h:1758 */
class gmd__EX_USCOREVerticalExtent_USCOREType;	/* eml2_2ForGsoap.h:1762 */
class gmd__AbstractDQ_USCOREElement_USCOREType;	/* eml2_2ForGsoap.h:1766 */
class gmd__MD_USCOREIdentifier_USCOREType;	/* eml2_2ForGsoap.h:1770 */
class gmd__CI_USCORECitation_USCOREType;	/* eml2_2ForGsoap.h:1774 */
class gmd__CI_USCOREDate_USCOREType;	/* eml2_2ForGsoap.h:1778 */
class gmd__CI_USCOREResponsibleParty_USCOREType;	/* eml2_2ForGsoap.h:1784 */
class gmd__CI_USCOREContact_USCOREType;	/* eml2_2ForGsoap.h:1788 */
class gmd__CI_USCORETelephone_USCOREType;	/* eml2_2ForGsoap.h:1792 */
class gmd__CI_USCOREAddress_USCOREType;	/* eml2_2ForGsoap.h:1796 */
class gmd__CI_USCOREOnlineResource_USCOREType;	/* eml2_2ForGsoap.h:1800 */
class gmd__CI_USCORESeries_USCOREType;	/* eml2_2ForGsoap.h:1812 */
class gmd__AbstractDQ_USCOREResult_USCOREType;	/* eml2_2ForGsoap.h:1818 */
class gco__CodeListValue_USCOREType;	/* eml2_2ForGsoap.h:1832 */
class resqml2__LocalDepth3dCrs;	/* eml2_2ForGsoap.h:324 */
class resqml2__LocalTime3dCrs;	/* eml2_2ForGsoap.h:326 */
class resqml2__AbstractTechnicalFeature;	/* eml2_2ForGsoap.h:330 */
class resqml2__BoundaryFeature;	/* eml2_2ForGsoap.h:332 */
class resqml2__Model;	/* eml2_2ForGsoap.h:336 */
class resqml2__RockVolumeFeature;	/* eml2_2ForGsoap.h:338 */
class resqml2__AbstractOrganizationInterpretation;	/* eml2_2ForGsoap.h:346 */
class resqml2__BoundaryFeatureInterpretation;	/* eml2_2ForGsoap.h:354 */
class resqml2__EarthModelInterpretation;	/* eml2_2ForGsoap.h:360 */
class resqml2__GenericFeatureInterpretation;	/* eml2_2ForGsoap.h:370 */
class resqml2__GeologicUnitInterpretation;	/* eml2_2ForGsoap.h:380 */
class resqml2__DeviationSurveyRepresentation;	/* eml2_2ForGsoap.h:406 */
class resqml2__WellboreFrameRepresentation;	/* eml2_2ForGsoap.h:416 */
class resqml2__WellboreInterpretation;	/* eml2_2ForGsoap.h:418 */
class resqml2__WellboreInterpretationSet;	/* eml2_2ForGsoap.h:420 */
class resqml2__WellboreTrajectoryRepresentation;	/* eml2_2ForGsoap.h:428 */
class resqml2__AbstractSurfaceRepresentation;	/* eml2_2ForGsoap.h:436 */
class resqml2__ContactPatch;	/* eml2_2ForGsoap.h:440 */
class resqml2__EdgePatch;	/* eml2_2ForGsoap.h:444 */
class resqml2__NodePatch;	/* eml2_2ForGsoap.h:452 */
class resqml2__PointSetRepresentation;	/* eml2_2ForGsoap.h:464 */
class resqml2__PolylineRepresentation;	/* eml2_2ForGsoap.h:466 */
class resqml2__TrianglePatch;	/* eml2_2ForGsoap.h:474 */
class resqml2__HorizontalPlaneGeometry;	/* eml2_2ForGsoap.h:492 */
class resqml2__ParametricLineFromRepresentationGeometry;	/* eml2_2ForGsoap.h:496 */
class resqml2__ParametricLineGeometry;	/* eml2_2ForGsoap.h:500 */
class resqml2__TiltedPlaneGeometry;	/* eml2_2ForGsoap.h:526 */
class resqml2__Seismic2dPostStackRepresentation;	/* eml2_2ForGsoap.h:538 */
class resqml2__AbstractGridGeometry;	/* eml2_2ForGsoap.h:556 */
class resqml2__AbstractGridRepresentation;	/* eml2_2ForGsoap.h:558 */
class resqml2__ColumnSubnodePatch;	/* eml2_2ForGsoap.h:586 */
class resqml2__GridConnectionSetRepresentation;	/* eml2_2ForGsoap.h:594 */
class resqml2__UniformSubnodePatch;	/* eml2_2ForGsoap.h:638 */
class resqml2__VariableSubnodePatch;	/* eml2_2ForGsoap.h:658 */
class resqml2__PolylineSetRepresentation;	/* eml2_2ForGsoap.h:674 */
class resqml2__RedefinedGeometryRepresentation;	/* eml2_2ForGsoap.h:676 */
class resqml2__RepresentationSetRepresentation;	/* eml2_2ForGsoap.h:682 */
class resqml2__SubRepresentation;	/* eml2_2ForGsoap.h:684 */
class resqml2__SubRepresentationPatch;	/* eml2_2ForGsoap.h:686 */
class resqml2__AbstractValuesProperty;	/* eml2_2ForGsoap.h:692 */
class resqml2__BooleanArrayFromDiscretePropertyArray;	/* eml2_2ForGsoap.h:694 */
class resqml2__DoubleTableLookup;	/* eml2_2ForGsoap.h:708 */
class resqml2__PointsProperty;	/* eml2_2ForGsoap.h:714 */
class resqml2__StringTableLookup;	/* eml2_2ForGsoap.h:722 */
class resqml2__StreamlinesRepresentation;	/* eml2_2ForGsoap.h:726 */
class eml22__AbstractFloatingPointArray;	/* eml2_2ForGsoap.h:742 */
class eml22__AbstractIntegerArray;	/* eml2_2ForGsoap.h:744 */
class eml22__BooleanArrayFromIndexArray;	/* eml2_2ForGsoap.h:754 */
class eml22__BooleanConstantArray;	/* eml2_2ForGsoap.h:756 */
class eml22__BooleanExternalArray;	/* eml2_2ForGsoap.h:758 */
class eml22__GenericMeasure;	/* eml2_2ForGsoap.h:772 */
class eml22__StringConstantArray;	/* eml2_2ForGsoap.h:788 */
class eml22__StringExternalArray;	/* eml2_2ForGsoap.h:790 */
class eml22__AbsorbedDoseMeasure;	/* eml2_2ForGsoap.h:796 */
class eml22__AbsorbedDoseMeasureExt;	/* eml2_2ForGsoap.h:798 */
class eml22__ActivityOfRadioactivityMeasure;	/* eml2_2ForGsoap.h:800 */
class eml22__ActivityOfRadioactivityMeasureExt;	/* eml2_2ForGsoap.h:802 */
class eml22__AmountOfSubstanceMeasure;	/* eml2_2ForGsoap.h:804 */
class eml22__AmountOfSubstanceMeasureExt;	/* eml2_2ForGsoap.h:806 */
class eml22__AmountOfSubstancePerAmountOfSubstanceMeasure;	/* eml2_2ForGsoap.h:808 */
class eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt;	/* eml2_2ForGsoap.h:810 */
class eml22__AmountOfSubstancePerAreaMeasure;	/* eml2_2ForGsoap.h:812 */
class eml22__AmountOfSubstancePerAreaMeasureExt;	/* eml2_2ForGsoap.h:814 */
class eml22__AmountOfSubstancePerTimeMeasure;	/* eml2_2ForGsoap.h:816 */
class eml22__AmountOfSubstancePerTimeMeasureExt;	/* eml2_2ForGsoap.h:818 */
class eml22__AmountOfSubstancePerTimePerAreaMeasure;	/* eml2_2ForGsoap.h:820 */
class eml22__AmountOfSubstancePerTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:822 */
class eml22__AmountOfSubstancePerVolumeMeasure;	/* eml2_2ForGsoap.h:824 */
class eml22__AmountOfSubstancePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:826 */
class eml22__AnglePerLengthMeasure;	/* eml2_2ForGsoap.h:828 */
class eml22__AnglePerLengthMeasureExt;	/* eml2_2ForGsoap.h:830 */
class eml22__AnglePerVolumeMeasure;	/* eml2_2ForGsoap.h:832 */
class eml22__AnglePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:834 */
class eml22__AngularAccelerationMeasure;	/* eml2_2ForGsoap.h:836 */
class eml22__AngularAccelerationMeasureExt;	/* eml2_2ForGsoap.h:838 */
class eml22__AngularVelocityMeasure;	/* eml2_2ForGsoap.h:840 */
class eml22__AngularVelocityMeasureExt;	/* eml2_2ForGsoap.h:842 */
class eml22__APIGammaRayMeasure;	/* eml2_2ForGsoap.h:844 */
class eml22__APIGammaRayMeasureExt;	/* eml2_2ForGsoap.h:846 */
class eml22__APIGravityMeasure;	/* eml2_2ForGsoap.h:848 */
class eml22__APIGravityMeasureExt;	/* eml2_2ForGsoap.h:850 */
class eml22__APINeutronMeasure;	/* eml2_2ForGsoap.h:852 */
class eml22__APINeutronMeasureExt;	/* eml2_2ForGsoap.h:854 */
class eml22__AreaMeasure;	/* eml2_2ForGsoap.h:856 */
class eml22__AreaMeasureExt;	/* eml2_2ForGsoap.h:858 */
class eml22__AreaPerAmountOfSubstanceMeasure;	/* eml2_2ForGsoap.h:860 */
class eml22__AreaPerAmountOfSubstanceMeasureExt;	/* eml2_2ForGsoap.h:862 */
class eml22__AreaPerAreaMeasure;	/* eml2_2ForGsoap.h:864 */
class eml22__AreaPerAreaMeasureExt;	/* eml2_2ForGsoap.h:866 */
class eml22__AreaPerCountMeasure;	/* eml2_2ForGsoap.h:868 */
class eml22__AreaPerCountMeasureExt;	/* eml2_2ForGsoap.h:870 */
class eml22__AreaPerMassMeasure;	/* eml2_2ForGsoap.h:872 */
class eml22__AreaPerMassMeasureExt;	/* eml2_2ForGsoap.h:874 */
class eml22__AreaPerTimeMeasure;	/* eml2_2ForGsoap.h:876 */
class eml22__AreaPerTimeMeasureExt;	/* eml2_2ForGsoap.h:878 */
class eml22__AreaPerVolumeMeasure;	/* eml2_2ForGsoap.h:880 */
class eml22__AreaPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:882 */
class eml22__AttenuationPerFrequencyIntervalMeasure;	/* eml2_2ForGsoap.h:884 */
class eml22__AttenuationPerFrequencyIntervalMeasureExt;	/* eml2_2ForGsoap.h:886 */
class eml22__CapacitanceMeasure;	/* eml2_2ForGsoap.h:888 */
class eml22__CapacitanceMeasureExt;	/* eml2_2ForGsoap.h:890 */
class eml22__CationExchangeCapacityMeasure;	/* eml2_2ForGsoap.h:892 */
class eml22__CationExchangeCapacityMeasureExt;	/* eml2_2ForGsoap.h:894 */
class eml22__DataTransferSpeedMeasure;	/* eml2_2ForGsoap.h:896 */
class eml22__DataTransferSpeedMeasureExt;	/* eml2_2ForGsoap.h:898 */
class eml22__DiffusionCoefficientMeasure;	/* eml2_2ForGsoap.h:900 */
class eml22__DiffusionCoefficientMeasureExt;	/* eml2_2ForGsoap.h:902 */
class eml22__DiffusiveTimeOfFlightMeasure;	/* eml2_2ForGsoap.h:904 */
class eml22__DiffusiveTimeOfFlightMeasureExt;	/* eml2_2ForGsoap.h:906 */
class eml22__DigitalStorageMeasure;	/* eml2_2ForGsoap.h:908 */
class eml22__DigitalStorageMeasureExt;	/* eml2_2ForGsoap.h:910 */
class eml22__DimensionlessMeasure;	/* eml2_2ForGsoap.h:912 */
class eml22__DimensionlessMeasureExt;	/* eml2_2ForGsoap.h:914 */
class eml22__DipoleMomentMeasure;	/* eml2_2ForGsoap.h:916 */
class eml22__DipoleMomentMeasureExt;	/* eml2_2ForGsoap.h:918 */
class eml22__DoseEquivalentMeasure;	/* eml2_2ForGsoap.h:920 */
class eml22__DoseEquivalentMeasureExt;	/* eml2_2ForGsoap.h:922 */
class eml22__DynamicViscosityMeasure;	/* eml2_2ForGsoap.h:924 */
class eml22__DynamicViscosityMeasureExt;	/* eml2_2ForGsoap.h:926 */
class eml22__ElectricalResistivityMeasure;	/* eml2_2ForGsoap.h:928 */
class eml22__ElectricalResistivityMeasureExt;	/* eml2_2ForGsoap.h:930 */
class eml22__ElectricChargeMeasure;	/* eml2_2ForGsoap.h:932 */
class eml22__ElectricChargeMeasureExt;	/* eml2_2ForGsoap.h:934 */
class eml22__ElectricChargePerAreaMeasure;	/* eml2_2ForGsoap.h:936 */
class eml22__ElectricChargePerAreaMeasureExt;	/* eml2_2ForGsoap.h:938 */
class eml22__ElectricChargePerMassMeasure;	/* eml2_2ForGsoap.h:940 */
class eml22__ElectricChargePerMassMeasureExt;	/* eml2_2ForGsoap.h:942 */
class eml22__ElectricChargePerVolumeMeasure;	/* eml2_2ForGsoap.h:944 */
class eml22__ElectricChargePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:946 */
class eml22__ElectricConductanceMeasure;	/* eml2_2ForGsoap.h:948 */
class eml22__ElectricConductanceMeasureExt;	/* eml2_2ForGsoap.h:950 */
class eml22__ElectricConductivityMeasure;	/* eml2_2ForGsoap.h:952 */
class eml22__ElectricConductivityMeasureExt;	/* eml2_2ForGsoap.h:954 */
class eml22__ElectricCurrentDensityMeasure;	/* eml2_2ForGsoap.h:956 */
class eml22__ElectricCurrentDensityMeasureExt;	/* eml2_2ForGsoap.h:958 */
class eml22__ElectricCurrentMeasure;	/* eml2_2ForGsoap.h:960 */
class eml22__ElectricCurrentMeasureExt;	/* eml2_2ForGsoap.h:962 */
class eml22__ElectricFieldStrengthMeasure;	/* eml2_2ForGsoap.h:964 */
class eml22__ElectricFieldStrengthMeasureExt;	/* eml2_2ForGsoap.h:966 */
class eml22__ElectricPotentialDifferenceMeasure;	/* eml2_2ForGsoap.h:968 */
class eml22__ElectricPotentialDifferenceMeasureExt;	/* eml2_2ForGsoap.h:970 */
class eml22__ElectricResistanceMeasure;	/* eml2_2ForGsoap.h:972 */
class eml22__ElectricResistanceMeasureExt;	/* eml2_2ForGsoap.h:974 */
class eml22__ElectricResistancePerLengthMeasure;	/* eml2_2ForGsoap.h:976 */
class eml22__ElectricResistancePerLengthMeasureExt;	/* eml2_2ForGsoap.h:978 */
class eml22__ElectromagneticMomentMeasure;	/* eml2_2ForGsoap.h:980 */
class eml22__ElectromagneticMomentMeasureExt;	/* eml2_2ForGsoap.h:982 */
class eml22__EnergyLengthPerAreaMeasure;	/* eml2_2ForGsoap.h:984 */
class eml22__EnergyLengthPerAreaMeasureExt;	/* eml2_2ForGsoap.h:986 */
class eml22__EnergyLengthPerTimeAreaTemperatureMeasure;	/* eml2_2ForGsoap.h:988 */
class eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt;	/* eml2_2ForGsoap.h:990 */
class eml22__EnergyMeasure;	/* eml2_2ForGsoap.h:992 */
class eml22__EnergyMeasureExt;	/* eml2_2ForGsoap.h:994 */
class eml22__EnergyPerAreaMeasure;	/* eml2_2ForGsoap.h:996 */
class eml22__EnergyPerAreaMeasureExt;	/* eml2_2ForGsoap.h:998 */
class eml22__EnergyPerLengthMeasure;	/* eml2_2ForGsoap.h:1000 */
class eml22__EnergyPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1002 */
class eml22__EnergyPerMassMeasure;	/* eml2_2ForGsoap.h:1004 */
class eml22__EnergyPerMassMeasureExt;	/* eml2_2ForGsoap.h:1006 */
class eml22__EnergyPerMassPerTimeMeasure;	/* eml2_2ForGsoap.h:1008 */
class eml22__EnergyPerMassPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1010 */
class eml22__EnergyPerVolumeMeasure;	/* eml2_2ForGsoap.h:1012 */
class eml22__EnergyPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1014 */
class eml22__ForceAreaMeasure;	/* eml2_2ForGsoap.h:1016 */
class eml22__ForceAreaMeasureExt;	/* eml2_2ForGsoap.h:1018 */
class eml22__ForceLengthPerLengthMeasure;	/* eml2_2ForGsoap.h:1020 */
class eml22__ForceLengthPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1022 */
class eml22__ForceMeasure;	/* eml2_2ForGsoap.h:1024 */
class eml22__ForceMeasureExt;	/* eml2_2ForGsoap.h:1026 */
class eml22__ForcePerForceMeasure;	/* eml2_2ForGsoap.h:1028 */
class eml22__ForcePerForceMeasureExt;	/* eml2_2ForGsoap.h:1030 */
class eml22__ForcePerLengthMeasure;	/* eml2_2ForGsoap.h:1032 */
class eml22__ForcePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1034 */
class eml22__ForcePerVolumeMeasure;	/* eml2_2ForGsoap.h:1036 */
class eml22__ForcePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1038 */
class eml22__FrequencyIntervalMeasure;	/* eml2_2ForGsoap.h:1040 */
class eml22__FrequencyIntervalMeasureExt;	/* eml2_2ForGsoap.h:1042 */
class eml22__FrequencyMeasure;	/* eml2_2ForGsoap.h:1044 */
class eml22__FrequencyMeasureExt;	/* eml2_2ForGsoap.h:1046 */
class eml22__HeatCapacityMeasure;	/* eml2_2ForGsoap.h:1048 */
class eml22__HeatCapacityMeasureExt;	/* eml2_2ForGsoap.h:1050 */
class eml22__HeatFlowRateMeasure;	/* eml2_2ForGsoap.h:1052 */
class eml22__HeatFlowRateMeasureExt;	/* eml2_2ForGsoap.h:1054 */
class eml22__HeatTransferCoefficientMeasure;	/* eml2_2ForGsoap.h:1056 */
class eml22__HeatTransferCoefficientMeasureExt;	/* eml2_2ForGsoap.h:1058 */
class eml22__IlluminanceMeasure;	/* eml2_2ForGsoap.h:1060 */
class eml22__IlluminanceMeasureExt;	/* eml2_2ForGsoap.h:1062 */
class eml22__InductanceMeasure;	/* eml2_2ForGsoap.h:1064 */
class eml22__InductanceMeasureExt;	/* eml2_2ForGsoap.h:1066 */
class eml22__IsothermalCompressibilityMeasure;	/* eml2_2ForGsoap.h:1068 */
class eml22__IsothermalCompressibilityMeasureExt;	/* eml2_2ForGsoap.h:1070 */
class eml22__KinematicViscosityMeasure;	/* eml2_2ForGsoap.h:1072 */
class eml22__KinematicViscosityMeasureExt;	/* eml2_2ForGsoap.h:1074 */
class eml22__LengthMeasure;	/* eml2_2ForGsoap.h:1076 */
class eml22__LengthMeasureExt;	/* eml2_2ForGsoap.h:1078 */
class eml22__LengthPerLengthMeasure;	/* eml2_2ForGsoap.h:1080 */
class eml22__LengthPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1082 */
class eml22__LengthPerMassMeasure;	/* eml2_2ForGsoap.h:1084 */
class eml22__LengthPerMassMeasureExt;	/* eml2_2ForGsoap.h:1086 */
class eml22__LengthPerPressureMeasure;	/* eml2_2ForGsoap.h:1088 */
class eml22__LengthPerPressureMeasureExt;	/* eml2_2ForGsoap.h:1090 */
class eml22__LengthPerTemperatureMeasure;	/* eml2_2ForGsoap.h:1092 */
class eml22__LengthPerTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1094 */
class eml22__LengthPerTimeMeasure;	/* eml2_2ForGsoap.h:1096 */
class eml22__LengthPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1098 */
class eml22__LengthPerVolumeMeasure;	/* eml2_2ForGsoap.h:1100 */
class eml22__LengthPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1102 */
class eml22__LightExposureMeasure;	/* eml2_2ForGsoap.h:1104 */
class eml22__LightExposureMeasureExt;	/* eml2_2ForGsoap.h:1106 */
class eml22__LinearAccelerationMeasure;	/* eml2_2ForGsoap.h:1108 */
class eml22__LinearAccelerationMeasureExt;	/* eml2_2ForGsoap.h:1110 */
class eml22__LinearThermalExpansionMeasure;	/* eml2_2ForGsoap.h:1112 */
class eml22__LinearThermalExpansionMeasureExt;	/* eml2_2ForGsoap.h:1114 */
class eml22__LogarithmicPowerRatioMeasure;	/* eml2_2ForGsoap.h:1116 */
class eml22__LogarithmicPowerRatioMeasureExt;	/* eml2_2ForGsoap.h:1118 */
class eml22__LogarithmicPowerRatioPerLengthMeasure;	/* eml2_2ForGsoap.h:1120 */
class eml22__LogarithmicPowerRatioPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1122 */
class eml22__LuminanceMeasure;	/* eml2_2ForGsoap.h:1124 */
class eml22__LuminanceMeasureExt;	/* eml2_2ForGsoap.h:1126 */
class eml22__LuminousEfficacyMeasure;	/* eml2_2ForGsoap.h:1128 */
class eml22__LuminousEfficacyMeasureExt;	/* eml2_2ForGsoap.h:1130 */
class eml22__LuminousFluxMeasure;	/* eml2_2ForGsoap.h:1132 */
class eml22__LuminousFluxMeasureExt;	/* eml2_2ForGsoap.h:1134 */
class eml22__LuminousIntensityMeasure;	/* eml2_2ForGsoap.h:1136 */
class eml22__LuminousIntensityMeasureExt;	/* eml2_2ForGsoap.h:1138 */
class eml22__MagneticDipoleMomentMeasure;	/* eml2_2ForGsoap.h:1140 */
class eml22__MagneticDipoleMomentMeasureExt;	/* eml2_2ForGsoap.h:1142 */
class eml22__MagneticFieldStrengthMeasure;	/* eml2_2ForGsoap.h:1144 */
class eml22__MagneticFieldStrengthMeasureExt;	/* eml2_2ForGsoap.h:1146 */
class eml22__MagneticFluxDensityMeasure;	/* eml2_2ForGsoap.h:1148 */
class eml22__MagneticFluxDensityMeasureExt;	/* eml2_2ForGsoap.h:1150 */
class eml22__MagneticFluxDensityPerLengthMeasure;	/* eml2_2ForGsoap.h:1152 */
class eml22__MagneticFluxDensityPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1154 */
class eml22__MagneticFluxMeasure;	/* eml2_2ForGsoap.h:1156 */
class eml22__MagneticFluxMeasureExt;	/* eml2_2ForGsoap.h:1158 */
class eml22__MagneticPermeabilityMeasure;	/* eml2_2ForGsoap.h:1160 */
class eml22__MagneticPermeabilityMeasureExt;	/* eml2_2ForGsoap.h:1162 */
class eml22__MagneticVectorPotentialMeasure;	/* eml2_2ForGsoap.h:1164 */
class eml22__MagneticVectorPotentialMeasureExt;	/* eml2_2ForGsoap.h:1166 */
class eml22__MassLengthMeasure;	/* eml2_2ForGsoap.h:1168 */
class eml22__MassLengthMeasureExt;	/* eml2_2ForGsoap.h:1170 */
class eml22__MassMeasure;	/* eml2_2ForGsoap.h:1172 */
class eml22__MassMeasureExt;	/* eml2_2ForGsoap.h:1174 */
class eml22__MassPerAreaMeasure;	/* eml2_2ForGsoap.h:1176 */
class eml22__MassPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1178 */
class eml22__MassPerEnergyMeasure;	/* eml2_2ForGsoap.h:1180 */
class eml22__MassPerEnergyMeasureExt;	/* eml2_2ForGsoap.h:1182 */
class eml22__MassPerLengthMeasure;	/* eml2_2ForGsoap.h:1184 */
class eml22__MassPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1186 */
class eml22__MassPerMassMeasure;	/* eml2_2ForGsoap.h:1188 */
class eml22__MassPerMassMeasureExt;	/* eml2_2ForGsoap.h:1190 */
class eml22__MassPerTimeMeasure;	/* eml2_2ForGsoap.h:1192 */
class eml22__MassPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1194 */
class eml22__MassPerTimePerAreaMeasure;	/* eml2_2ForGsoap.h:1196 */
class eml22__MassPerTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1198 */
class eml22__MassPerTimePerLengthMeasure;	/* eml2_2ForGsoap.h:1200 */
class eml22__MassPerTimePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1202 */
class eml22__MassPerVolumeMeasure;	/* eml2_2ForGsoap.h:1204 */
class eml22__MassPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1206 */
class eml22__MassPerVolumePerLengthMeasure;	/* eml2_2ForGsoap.h:1208 */
class eml22__MassPerVolumePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1210 */
class eml22__MassPerVolumePerPressureMeasure;	/* eml2_2ForGsoap.h:1212 */
class eml22__MassPerVolumePerPressureMeasureExt;	/* eml2_2ForGsoap.h:1214 */
class eml22__MassPerVolumePerTemperatureMeasure;	/* eml2_2ForGsoap.h:1216 */
class eml22__MassPerVolumePerTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1218 */
class eml22__MobilityMeasure;	/* eml2_2ForGsoap.h:1220 */
class eml22__MobilityMeasureExt;	/* eml2_2ForGsoap.h:1222 */
class eml22__MolarEnergyMeasure;	/* eml2_2ForGsoap.h:1224 */
class eml22__MolarEnergyMeasureExt;	/* eml2_2ForGsoap.h:1226 */
class eml22__MolarHeatCapacityMeasure;	/* eml2_2ForGsoap.h:1228 */
class eml22__MolarHeatCapacityMeasureExt;	/* eml2_2ForGsoap.h:1230 */
class eml22__MolarVolumeMeasure;	/* eml2_2ForGsoap.h:1232 */
class eml22__MolarVolumeMeasureExt;	/* eml2_2ForGsoap.h:1234 */
class eml22__MolecularWeightMeasure;	/* eml2_2ForGsoap.h:1236 */
class eml22__MolecularWeightMeasureExt;	/* eml2_2ForGsoap.h:1238 */
class eml22__MomentOfForceMeasure;	/* eml2_2ForGsoap.h:1240 */
class eml22__MomentOfForceMeasureExt;	/* eml2_2ForGsoap.h:1242 */
class eml22__MomentOfInertiaMeasure;	/* eml2_2ForGsoap.h:1244 */
class eml22__MomentOfInertiaMeasureExt;	/* eml2_2ForGsoap.h:1246 */
class eml22__MomentumMeasure;	/* eml2_2ForGsoap.h:1248 */
class eml22__MomentumMeasureExt;	/* eml2_2ForGsoap.h:1250 */
class eml22__NormalizedPowerMeasure;	/* eml2_2ForGsoap.h:1252 */
class eml22__NormalizedPowerMeasureExt;	/* eml2_2ForGsoap.h:1254 */
class eml22__PermeabilityLengthMeasure;	/* eml2_2ForGsoap.h:1256 */
class eml22__PermeabilityLengthMeasureExt;	/* eml2_2ForGsoap.h:1258 */
class eml22__PermeabilityRockMeasure;	/* eml2_2ForGsoap.h:1260 */
class eml22__PermeabilityRockMeasureExt;	/* eml2_2ForGsoap.h:1262 */
class eml22__PermittivityMeasure;	/* eml2_2ForGsoap.h:1264 */
class eml22__PermittivityMeasureExt;	/* eml2_2ForGsoap.h:1266 */
class eml22__PlaneAngleMeasure;	/* eml2_2ForGsoap.h:1268 */
class eml22__PlaneAngleMeasureExt;	/* eml2_2ForGsoap.h:1270 */
class eml22__PotentialDifferencePerPowerDropMeasure;	/* eml2_2ForGsoap.h:1272 */
class eml22__PotentialDifferencePerPowerDropMeasureExt;	/* eml2_2ForGsoap.h:1274 */
class eml22__PowerMeasure;	/* eml2_2ForGsoap.h:1276 */
class eml22__PowerMeasureExt;	/* eml2_2ForGsoap.h:1278 */
class eml22__PowerPerAreaMeasure;	/* eml2_2ForGsoap.h:1280 */
class eml22__PowerPerAreaMeasureExt;	/* eml2_2ForGsoap.h:1282 */
class eml22__PowerPerPowerMeasure;	/* eml2_2ForGsoap.h:1284 */
class eml22__PowerPerPowerMeasureExt;	/* eml2_2ForGsoap.h:1286 */
class eml22__PowerPerVolumeMeasure;	/* eml2_2ForGsoap.h:1288 */
class eml22__PowerPerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1290 */
class eml22__PressureMeasure;	/* eml2_2ForGsoap.h:1292 */
class eml22__PressureMeasureExt;	/* eml2_2ForGsoap.h:1294 */
class eml22__PressurePerPressureMeasure;	/* eml2_2ForGsoap.h:1296 */
class eml22__PressurePerPressureMeasureExt;	/* eml2_2ForGsoap.h:1298 */
class eml22__PressurePerTimeMeasure;	/* eml2_2ForGsoap.h:1300 */
class eml22__PressurePerTimeMeasureExt;	/* eml2_2ForGsoap.h:1302 */
class eml22__PressurePerVolumeMeasure;	/* eml2_2ForGsoap.h:1304 */
class eml22__PressurePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1306 */
class eml22__PressureSquaredMeasure;	/* eml2_2ForGsoap.h:1308 */
class eml22__PressureSquaredMeasureExt;	/* eml2_2ForGsoap.h:1310 */
class eml22__PressureSquaredPerForceTimePerAreaMeasure;	/* eml2_2ForGsoap.h:1312 */
class eml22__PressureSquaredPerForceTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1314 */
class eml22__PressureTimePerVolumeMeasure;	/* eml2_2ForGsoap.h:1316 */
class eml22__PressureTimePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1318 */
class eml22__QuantityOfLightMeasure;	/* eml2_2ForGsoap.h:1320 */
class eml22__QuantityOfLightMeasureExt;	/* eml2_2ForGsoap.h:1322 */
class eml22__RadianceMeasure;	/* eml2_2ForGsoap.h:1324 */
class eml22__RadianceMeasureExt;	/* eml2_2ForGsoap.h:1326 */
class eml22__RadiantIntensityMeasure;	/* eml2_2ForGsoap.h:1328 */
class eml22__RadiantIntensityMeasureExt;	/* eml2_2ForGsoap.h:1330 */
class eml22__ReciprocalAreaMeasure;	/* eml2_2ForGsoap.h:1332 */
class eml22__ReciprocalAreaMeasureExt;	/* eml2_2ForGsoap.h:1334 */
class eml22__ReciprocalElectricPotentialDifferenceMeasure;	/* eml2_2ForGsoap.h:1336 */
class eml22__ReciprocalElectricPotentialDifferenceMeasureExt;	/* eml2_2ForGsoap.h:1338 */
class eml22__ReciprocalForceMeasure;	/* eml2_2ForGsoap.h:1340 */
class eml22__ReciprocalForceMeasureExt;	/* eml2_2ForGsoap.h:1342 */
class eml22__ReciprocalLengthMeasure;	/* eml2_2ForGsoap.h:1344 */
class eml22__ReciprocalLengthMeasureExt;	/* eml2_2ForGsoap.h:1346 */
class eml22__ReciprocalMassMeasure;	/* eml2_2ForGsoap.h:1348 */
class eml22__ReciprocalMassMeasureExt;	/* eml2_2ForGsoap.h:1350 */
class eml22__ReciprocalMassTimeMeasure;	/* eml2_2ForGsoap.h:1352 */
class eml22__ReciprocalMassTimeMeasureExt;	/* eml2_2ForGsoap.h:1354 */
class eml22__ReciprocalPressureMeasure;	/* eml2_2ForGsoap.h:1356 */
class eml22__ReciprocalPressureMeasureExt;	/* eml2_2ForGsoap.h:1358 */
class eml22__ReciprocalTimeMeasure;	/* eml2_2ForGsoap.h:1360 */
class eml22__ReciprocalTimeMeasureExt;	/* eml2_2ForGsoap.h:1362 */
class eml22__ReciprocalVolumeMeasure;	/* eml2_2ForGsoap.h:1364 */
class eml22__ReciprocalVolumeMeasureExt;	/* eml2_2ForGsoap.h:1366 */
class eml22__ReluctanceMeasure;	/* eml2_2ForGsoap.h:1368 */
class eml22__ReluctanceMeasureExt;	/* eml2_2ForGsoap.h:1370 */
class eml22__SecondMomentOfAreaMeasure;	/* eml2_2ForGsoap.h:1372 */
class eml22__SecondMomentOfAreaMeasureExt;	/* eml2_2ForGsoap.h:1374 */
class eml22__SignalingEventPerTimeMeasure;	/* eml2_2ForGsoap.h:1376 */
class eml22__SignalingEventPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1378 */
class eml22__SolidAngleMeasure;	/* eml2_2ForGsoap.h:1380 */
class eml22__SolidAngleMeasureExt;	/* eml2_2ForGsoap.h:1382 */
class eml22__SpecificHeatCapacityMeasure;	/* eml2_2ForGsoap.h:1384 */
class eml22__SpecificHeatCapacityMeasureExt;	/* eml2_2ForGsoap.h:1386 */
class eml22__TemperatureIntervalMeasure;	/* eml2_2ForGsoap.h:1388 */
class eml22__TemperatureIntervalMeasureExt;	/* eml2_2ForGsoap.h:1390 */
class eml22__TemperatureIntervalPerLengthMeasure;	/* eml2_2ForGsoap.h:1392 */
class eml22__TemperatureIntervalPerLengthMeasureExt;	/* eml2_2ForGsoap.h:1394 */
class eml22__TemperatureIntervalPerPressureMeasure;	/* eml2_2ForGsoap.h:1396 */
class eml22__TemperatureIntervalPerPressureMeasureExt;	/* eml2_2ForGsoap.h:1398 */
class eml22__TemperatureIntervalPerTimeMeasure;	/* eml2_2ForGsoap.h:1400 */
class eml22__TemperatureIntervalPerTimeMeasureExt;	/* eml2_2ForGsoap.h:1402 */
class eml22__ThermalConductanceMeasure;	/* eml2_2ForGsoap.h:1404 */
class eml22__ThermalConductanceMeasureExt;	/* eml2_2ForGsoap.h:1406 */
class eml22__ThermalConductivityMeasure;	/* eml2_2ForGsoap.h:1408 */
class eml22__ThermalConductivityMeasureExt;	/* eml2_2ForGsoap.h:1410 */
class eml22__ThermalDiffusivityMeasure;	/* eml2_2ForGsoap.h:1412 */
class eml22__ThermalDiffusivityMeasureExt;	/* eml2_2ForGsoap.h:1414 */
class eml22__ThermalInsulanceMeasure;	/* eml2_2ForGsoap.h:1416 */
class eml22__ThermalInsulanceMeasureExt;	/* eml2_2ForGsoap.h:1418 */
class eml22__ThermalResistanceMeasure;	/* eml2_2ForGsoap.h:1420 */
class eml22__ThermalResistanceMeasureExt;	/* eml2_2ForGsoap.h:1422 */
class eml22__ThermodynamicTemperatureMeasure;	/* eml2_2ForGsoap.h:1424 */
class eml22__ThermodynamicTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1426 */
class eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure;	/* eml2_2ForGsoap.h:1428 */
class eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt;	/* eml2_2ForGsoap.h:1430 */
class eml22__TimeMeasure;	/* eml2_2ForGsoap.h:1432 */
class eml22__TimeMeasureExt;	/* eml2_2ForGsoap.h:1434 */
class eml22__TimePerLengthMeasure;	/* eml2_2ForGsoap.h:1436 */
class eml22__TimePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1438 */
class eml22__TimePerMassMeasure;	/* eml2_2ForGsoap.h:1440 */
class eml22__TimePerMassMeasureExt;	/* eml2_2ForGsoap.h:1442 */
class eml22__TimePerTimeMeasure;	/* eml2_2ForGsoap.h:1444 */
class eml22__TimePerTimeMeasureExt;	/* eml2_2ForGsoap.h:1446 */
class eml22__TimePerVolumeMeasure;	/* eml2_2ForGsoap.h:1448 */
class eml22__TimePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1450 */
class eml22__UnitlessMeasure;	/* eml2_2ForGsoap.h:1452 */
class eml22__VerticalCoordinateMeasure;	/* eml2_2ForGsoap.h:1454 */
class eml22__VerticalCoordinateMeasureExt;	/* eml2_2ForGsoap.h:1456 */
class eml22__VolumeFlowRatePerVolumeFlowRateMeasure;	/* eml2_2ForGsoap.h:1458 */
class eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt;	/* eml2_2ForGsoap.h:1460 */
class eml22__VolumeMeasure;	/* eml2_2ForGsoap.h:1462 */
class eml22__VolumeMeasureExt;	/* eml2_2ForGsoap.h:1464 */
class eml22__VolumePerAreaMeasure;	/* eml2_2ForGsoap.h:1466 */
class eml22__VolumePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1468 */
class eml22__VolumePerLengthMeasure;	/* eml2_2ForGsoap.h:1470 */
class eml22__VolumePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1472 */
class eml22__VolumePerMassMeasure;	/* eml2_2ForGsoap.h:1474 */
class eml22__VolumePerMassMeasureExt;	/* eml2_2ForGsoap.h:1476 */
class eml22__VolumePerPressureMeasure;	/* eml2_2ForGsoap.h:1478 */
class eml22__VolumePerPressureMeasureExt;	/* eml2_2ForGsoap.h:1480 */
class eml22__VolumePerRotationMeasure;	/* eml2_2ForGsoap.h:1482 */
class eml22__VolumePerRotationMeasureExt;	/* eml2_2ForGsoap.h:1484 */
class eml22__VolumePerTimeLengthMeasure;	/* eml2_2ForGsoap.h:1486 */
class eml22__VolumePerTimeLengthMeasureExt;	/* eml2_2ForGsoap.h:1488 */
class eml22__VolumePerTimeMeasure;	/* eml2_2ForGsoap.h:1490 */
class eml22__VolumePerTimeMeasureExt;	/* eml2_2ForGsoap.h:1492 */
class eml22__VolumePerTimePerAreaMeasure;	/* eml2_2ForGsoap.h:1494 */
class eml22__VolumePerTimePerAreaMeasureExt;	/* eml2_2ForGsoap.h:1496 */
class eml22__VolumePerTimePerLengthMeasure;	/* eml2_2ForGsoap.h:1498 */
class eml22__VolumePerTimePerLengthMeasureExt;	/* eml2_2ForGsoap.h:1500 */
class eml22__VolumePerTimePerPressureLengthMeasure;	/* eml2_2ForGsoap.h:1502 */
class eml22__VolumePerTimePerPressureLengthMeasureExt;	/* eml2_2ForGsoap.h:1504 */
class eml22__VolumePerTimePerPressureMeasure;	/* eml2_2ForGsoap.h:1506 */
class eml22__VolumePerTimePerPressureMeasureExt;	/* eml2_2ForGsoap.h:1508 */
class eml22__VolumePerTimePerTimeMeasure;	/* eml2_2ForGsoap.h:1510 */
class eml22__VolumePerTimePerTimeMeasureExt;	/* eml2_2ForGsoap.h:1512 */
class eml22__VolumePerTimePerVolumeMeasure;	/* eml2_2ForGsoap.h:1514 */
class eml22__VolumePerTimePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1516 */
class eml22__VolumePerVolumeMeasure;	/* eml2_2ForGsoap.h:1518 */
class eml22__VolumePerVolumeMeasureExt;	/* eml2_2ForGsoap.h:1520 */
class eml22__VolumetricHeatTransferCoefficientMeasure;	/* eml2_2ForGsoap.h:1522 */
class eml22__VolumetricHeatTransferCoefficientMeasureExt;	/* eml2_2ForGsoap.h:1524 */
class eml22__VolumetricThermalExpansionMeasure;	/* eml2_2ForGsoap.h:1526 */
class eml22__VolumetricThermalExpansionMeasureExt;	/* eml2_2ForGsoap.h:1528 */
class eml22__ReferencePressure;	/* eml2_2ForGsoap.h:1590 */
class gml__DefinitionType;	/* eml2_2ForGsoap.h:1658 */
class gml__CodeWithAuthorityType;	/* eml2_2ForGsoap.h:1668 */
class gml__AbstractTimePrimitiveType;	/* eml2_2ForGsoap.h:1672 */
class gml__AngleType;	/* eml2_2ForGsoap.h:1708 */
class gml__LengthType;	/* eml2_2ForGsoap.h:1716 */
class gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType;	/* eml2_2ForGsoap.h:1764 */
class resqml2__FrontierFeature;	/* eml2_2ForGsoap.h:334 */
class resqml2__AbstractStratigraphicOrganizationInterpretation;	/* eml2_2ForGsoap.h:348 */
class resqml2__FaultInterpretation;	/* eml2_2ForGsoap.h:362 */
class resqml2__FluidBoundaryInterpretation;	/* eml2_2ForGsoap.h:368 */
class resqml2__GeobodyBoundaryInterpretation;	/* eml2_2ForGsoap.h:374 */
class resqml2__GeobodyInterpretation;	/* eml2_2ForGsoap.h:376 */
struct __resqml2__HorizonInterpretation_sequence;	/* eml2_2ForGsoap.h:40171 */
class resqml2__HorizonInterpretation;	/* eml2_2ForGsoap.h:382 */
class resqml2__RockFluidOrganizationInterpretation;	/* eml2_2ForGsoap.h:386 */
class resqml2__RockFluidUnitInterpretation;	/* eml2_2ForGsoap.h:388 */
class resqml2__StratigraphicUnitInterpretation;	/* eml2_2ForGsoap.h:398 */
class resqml2__StructuralOrganizationInterpretation;	/* eml2_2ForGsoap.h:400 */
class resqml2__BlockedWellboreRepresentation;	/* eml2_2ForGsoap.h:402 */
class resqml2__SeismicWellboreFrameRepresentation;	/* eml2_2ForGsoap.h:410 */
class resqml2__WellboreFeature;	/* eml2_2ForGsoap.h:414 */
class resqml2__WellboreMarkerFrameRepresentation;	/* eml2_2ForGsoap.h:424 */
class resqml2__AbstractSurfaceFrameworkRepresentation;	/* eml2_2ForGsoap.h:434 */
class resqml2__Grid2dRepresentation;	/* eml2_2ForGsoap.h:448 */
class resqml2__Grid2dSetRepresentation;	/* eml2_2ForGsoap.h:450 */
class resqml2__PlaneSetRepresentation;	/* eml2_2ForGsoap.h:462 */
class resqml2__SealedVolumeFrameworkRepresentation;	/* eml2_2ForGsoap.h:472 */
class resqml2__TriangulatedSetRepresentation;	/* eml2_2ForGsoap.h:476 */
class resqml2__AbstractSeismicSurveyFeature;	/* eml2_2ForGsoap.h:532 */
class resqml2__Seismic3dPostStackRepresentation;	/* eml2_2ForGsoap.h:542 */
class resqml2__AbstractColumnLayerGridGeometry;	/* eml2_2ForGsoap.h:552 */
class resqml2__AbstractColumnLayerGridRepresentation;	/* eml2_2ForGsoap.h:554 */
class resqml2__AbstractTruncatedColumnLayerGridRepresentation;	/* eml2_2ForGsoap.h:562 */
class resqml2__GpGridRepresentation;	/* eml2_2ForGsoap.h:592 */
class resqml2__UnstructuredGridGeometry;	/* eml2_2ForGsoap.h:650 */
class resqml2__UnstructuredGridRepresentation;	/* eml2_2ForGsoap.h:654 */
class resqml2__BooleanProperty;	/* eml2_2ForGsoap.h:696 */
class resqml2__CategoricalProperty;	/* eml2_2ForGsoap.h:698 */
class resqml2__CommentProperty;	/* eml2_2ForGsoap.h:700 */
class resqml2__ContinuousProperty;	/* eml2_2ForGsoap.h:702 */
class resqml2__DiscreteProperty;	/* eml2_2ForGsoap.h:704 */
class resqml2__StreamlinesFeature;	/* eml2_2ForGsoap.h:724 */
class eml22__AuthorityQualifiedName;	/* eml2_2ForGsoap.h:752 */
class eml22__FloatingPointConstantArray;	/* eml2_2ForGsoap.h:766 */
class eml22__FloatingPointExternalArray;	/* eml2_2ForGsoap.h:768 */
class eml22__FloatingPointLatticeArray;	/* eml2_2ForGsoap.h:770 */
class eml22__IntegerArrayFromBooleanMaskArray;	/* eml2_2ForGsoap.h:774 */
class eml22__IntegerConstantArray;	/* eml2_2ForGsoap.h:776 */
class eml22__IntegerExternalArray;	/* eml2_2ForGsoap.h:778 */
class eml22__IntegerLatticeArray;	/* eml2_2ForGsoap.h:780 */
class eml22__IntegerRangeArray;	/* eml2_2ForGsoap.h:782 */
class eml22__StringMeasure;	/* eml2_2ForGsoap.h:792 */
class gml__IdentifiedObjectType;	/* eml2_2ForGsoap.h:1656 */
class resqml2__StratigraphicColumnRankInterpretation;	/* eml2_2ForGsoap.h:392 */
class resqml2__StratigraphicOccurrenceInterpretation;	/* eml2_2ForGsoap.h:394 */
class resqml2__NonSealedSurfaceFrameworkRepresentation;	/* eml2_2ForGsoap.h:456 */
class resqml2__SealedSurfaceFrameworkRepresentation;	/* eml2_2ForGsoap.h:470 */
class resqml2__AbstractSeismicLineFeature;	/* eml2_2ForGsoap.h:530 */
class resqml2__SeismicLatticeFeature;	/* eml2_2ForGsoap.h:544 */
class resqml2__SeismicLatticeSetFeature;	/* eml2_2ForGsoap.h:546 */
class resqml2__SeismicLineSetFeature;	/* eml2_2ForGsoap.h:548 */
class resqml2__IjkGridGeometry;	/* eml2_2ForGsoap.h:600 */
class resqml2__IjkGridRepresentation;	/* eml2_2ForGsoap.h:602 */
class resqml2__TruncatedIjkGridRepresentation;	/* eml2_2ForGsoap.h:632 */
class resqml2__TruncatedUnstructuredColumnLayerGridRepresentation;	/* eml2_2ForGsoap.h:634 */
class resqml2__UnstructuredColumnLayerGridGeometry;	/* eml2_2ForGsoap.h:644 */
class resqml2__UnstructuredColumnLayerGridRepresentation;	/* eml2_2ForGsoap.h:646 */
class eml22__DoubleExternalArray;	/* eml2_2ForGsoap.h:760 */
class eml22__FloatExternalArray;	/* eml2_2ForGsoap.h:764 */
class gml__AbstractCRSType;	/* eml2_2ForGsoap.h:1654 */
class gml__AbstractCoordinateSystemType;	/* eml2_2ForGsoap.h:1684 */
class gml__CoordinateSystemAxisType;	/* eml2_2ForGsoap.h:1688 */
class gml__AbstractDatumType;	/* eml2_2ForGsoap.h:1702 */
class gml__PrimeMeridianType;	/* eml2_2ForGsoap.h:1706 */
class gml__EllipsoidType;	/* eml2_2ForGsoap.h:1714 */
class gml__AbstractCoordinateOperationType;	/* eml2_2ForGsoap.h:1726 */
class resqml2__CmpLineFeature;	/* eml2_2ForGsoap.h:534 */
class resqml2__ShotPointLineFeature;	/* eml2_2ForGsoap.h:550 */
union _gml__union_GeodeticCRSType;	/* eml2_2ForGsoap.h:44202 */
class gml__GeodeticCRSType;	/* eml2_2ForGsoap.h:1652 */
class gml__EllipsoidalCSType;	/* eml2_2ForGsoap.h:1682 */
class gml__CartesianCSType;	/* eml2_2ForGsoap.h:1692 */
class gml__SphericalCSType;	/* eml2_2ForGsoap.h:1696 */
class gml__GeodeticDatumType;	/* eml2_2ForGsoap.h:1700 */
class gml__AbstractGeneralDerivedCRSType;	/* eml2_2ForGsoap.h:1720 */
class gml__AbstractGeneralConversionType;	/* eml2_2ForGsoap.h:1724 */
class gml__VerticalCRSType;	/* eml2_2ForGsoap.h:1732 */
class gml__VerticalCSType;	/* eml2_2ForGsoap.h:1736 */
class gml__VerticalDatumType;	/* eml2_2ForGsoap.h:1740 */
union _gml__union_ProjectedCRSType;	/* eml2_2ForGsoap.h:44736 */
class gml__ProjectedCRSType;	/* eml2_2ForGsoap.h:1718 */

/* custom/struct_tm.h:91 */
#ifndef SOAP_TYPE_gsoap_eml2_2_tm
#define SOAP_TYPE_gsoap_eml2_2_tm (-8)
#if 0 /* Volatile: declared external of the data binding interface and not redeclared here */
struct SOAP_CMAC tm {
      public:
        /** Required element 'tm-sec' of XML schema type 'xsd:int' */
        int tm_sec;
        /** Required element 'tm-min' of XML schema type 'xsd:int' */
        int tm_min;
        /** Required element 'tm-hour' of XML schema type 'xsd:int' */
        int tm_hour;
        /** Required element 'tm-mday' of XML schema type 'xsd:int' */
        int tm_mday;
        /** Required element 'tm-mon' of XML schema type 'xsd:int' */
        int tm_mon;
        /** Required element 'tm-year' of XML schema type 'xsd:int' */
        int tm_year;
        /** Required element 'tm-isdst' of XML schema type 'xsd:int' */
        int tm_isdst;
};
#endif
#endif

/* eml2_2ForGsoap.h:284 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGraphicalInformationForIndexableElement
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGraphicalInformationForIndexableElement (-17)
/* complex XML schema type 'resqml2:AbstractGraphicalInformationForIndexableElement': */
class SOAP_CMAC resqml2__AbstractGraphicalInformationForIndexableElement {
      public:
        /// Optional element 'resqml2:ActiveAlphaInformationIndex' of XML schema type 'xsd:integer'
        LONG64 *ActiveAlphaInformationIndex;
        /// Optional element 'resqml2:ActiveAnnotationInformationIndex' of XML schema type 'xsd:integer'
        LONG64 *ActiveAnnotationInformationIndex;
        /// Optional element 'resqml2:ActiveColorInformationIndex' of XML schema type 'xsd:integer'
        LONG64 *ActiveColorInformationIndex;
        /// Optional element 'resqml2:ActiveSizeInformationIndex' of XML schema type 'xsd:integer'
        LONG64 *ActiveSizeInformationIndex;
        /// Optional element 'resqml2:ConstantAlpha' of XML schema type 'xsd:double'
        double *ConstantAlpha;
        /// Required element 'resqml2:IsVisible' of XML schema type 'xsd:boolean'
        bool IsVisible;
        /// Optional element 'resqml2:OverwriteColorAlpha' of XML schema type 'xsd:boolean'
        bool *OverwriteColorAlpha;
        /// Optional element 'resqml2:ConstantColor' of XML schema type 'resqml2:HsvColor'
        resqml2__HsvColor *ConstantColor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGraphicalInformationForIndexableElement
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGraphicalInformationForIndexableElement; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractGraphicalInformationForIndexableElement, default initialized and not managed by a soap context
        virtual resqml2__AbstractGraphicalInformationForIndexableElement *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractGraphicalInformationForIndexableElement); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractGraphicalInformationForIndexableElement() : ActiveAlphaInformationIndex(), ActiveAnnotationInformationIndex(), ActiveColorInformationIndex(), ActiveSizeInformationIndex(), ConstantAlpha(), IsVisible(), OverwriteColorAlpha(), ConstantColor(), soap() { }
        virtual ~resqml2__AbstractGraphicalInformationForIndexableElement() { }
        /// Friend allocator used by soap_new_resqml2__AbstractGraphicalInformationForIndexableElement(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractGraphicalInformationForIndexableElement * SOAP_FMAC2 soap_instantiate_resqml2__AbstractGraphicalInformationForIndexableElement(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:296 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMapEntry (-23)
/* complex XML schema type 'resqml2:ContinuousColorMapEntry': */
class SOAP_CMAC resqml2__ContinuousColorMapEntry {
      public:
        /// Required element 'resqml2:Index' of XML schema type 'xsd:double'
        double Index;
        /// Required element 'resqml2:Hsv' of XML schema type 'resqml2:HsvColor'
        resqml2__HsvColor *Hsv;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMapEntry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMapEntry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContinuousColorMapEntry, default initialized and not managed by a soap context
        virtual resqml2__ContinuousColorMapEntry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContinuousColorMapEntry); }
      public:
        /// Constructor with default initializations
        resqml2__ContinuousColorMapEntry() : Index(), Hsv(), soap() { }
        virtual ~resqml2__ContinuousColorMapEntry() { }
        /// Friend allocator used by soap_new_resqml2__ContinuousColorMapEntry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContinuousColorMapEntry * SOAP_FMAC2 soap_instantiate_resqml2__ContinuousColorMapEntry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:304 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMapEntry (-27)
/* complex XML schema type 'resqml2:DiscreteColorMapEntry': */
class SOAP_CMAC resqml2__DiscreteColorMapEntry {
      public:
        /// Required element 'resqml2:index' of XML schema type 'xsd:integer'
        LONG64 index;
        /// Required element 'resqml2:Hsv' of XML schema type 'resqml2:HsvColor'
        resqml2__HsvColor *Hsv;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMapEntry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMapEntry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DiscreteColorMapEntry, default initialized and not managed by a soap context
        virtual resqml2__DiscreteColorMapEntry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DiscreteColorMapEntry); }
      public:
        /// Constructor with default initializations
        resqml2__DiscreteColorMapEntry() : index(), Hsv(), soap() { }
        virtual ~resqml2__DiscreteColorMapEntry() { }
        /// Friend allocator used by soap_new_resqml2__DiscreteColorMapEntry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DiscreteColorMapEntry * SOAP_FMAC2 soap_instantiate_resqml2__DiscreteColorMapEntry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:316 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HsvColor
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HsvColor (-33)
/* complex XML schema type 'resqml2:HsvColor': */
class SOAP_CMAC resqml2__HsvColor {
      public:
        /// Required element 'resqml2:Alpha' of XML schema type 'xsd:double'
        double Alpha;
        /// Required element 'resqml2:Hue' of XML schema type 'xsd:double'
        double Hue;
        /// Required element 'resqml2:Saturation' of XML schema type 'xsd:double'
        double Saturation;
        /// Optional element 'resqml2:Title' of XML schema type 'xsd:string'
        std::string *Title;
        /// Required element 'resqml2:Value' of XML schema type 'xsd:double'
        double Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__HsvColor
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__HsvColor; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__HsvColor, default initialized and not managed by a soap context
        virtual resqml2__HsvColor *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__HsvColor); }
      public:
        /// Constructor with default initializations
        resqml2__HsvColor() : Alpha(), Hue(), Saturation(), Title(), Value(), soap() { }
        virtual ~resqml2__HsvColor() { }
        /// Friend allocator used by soap_new_resqml2__HsvColor(struct soap*, int)
        friend SOAP_FMAC1 resqml2__HsvColor * SOAP_FMAC2 soap_instantiate_resqml2__HsvColor(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:318 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MinMax
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MinMax (-34)
/* complex XML schema type 'resqml2:MinMax': */
class SOAP_CMAC resqml2__MinMax {
      public:
        /// Required element 'resqml2:Minimum' of XML schema type 'xsd:double'
        double Minimum;
        /// Required element 'resqml2:Maximum' of XML schema type 'xsd:double'
        double Maximum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__MinMax
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__MinMax; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__MinMax, default initialized and not managed by a soap context
        virtual resqml2__MinMax *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__MinMax); }
      public:
        /// Constructor with default initializations
        resqml2__MinMax() : Minimum(), Maximum(), soap() { }
        virtual ~resqml2__MinMax() { }
        /// Friend allocator used by soap_new_resqml2__MinMax(struct soap*, int)
        friend SOAP_FMAC1 resqml2__MinMax * SOAP_FMAC2 soap_instantiate_resqml2__MinMax(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:342 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactInterpretationPart (-46)
/* complex XML schema type 'resqml2:AbstractContactInterpretationPart': */
class SOAP_CMAC resqml2__AbstractContactInterpretationPart {
      public:
        /// Optional element 'resqml2:PartOf' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *PartOf;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactInterpretationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactInterpretationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractContactInterpretationPart, default initialized and not managed by a soap context
        virtual resqml2__AbstractContactInterpretationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractContactInterpretationPart); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractContactInterpretationPart() : PartOf(), soap() { }
        virtual ~resqml2__AbstractContactInterpretationPart() { }
        /// Friend allocator used by soap_new_resqml2__AbstractContactInterpretationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractContactInterpretationPart * SOAP_FMAC2 soap_instantiate_resqml2__AbstractContactInterpretationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:350 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTimeInterval (-50)
/* complex XML schema type 'resqml2:AbstractTimeInterval': */
class SOAP_CMAC resqml2__AbstractTimeInterval {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTimeInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTimeInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractTimeInterval, default initialized and not managed by a soap context
        virtual resqml2__AbstractTimeInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractTimeInterval); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractTimeInterval() : soap() { }
        virtual ~resqml2__AbstractTimeInterval() { }
        /// Friend allocator used by soap_new_resqml2__AbstractTimeInterval(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractTimeInterval * SOAP_FMAC2 soap_instantiate_resqml2__AbstractTimeInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:356 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretationPlusItsRank
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretationPlusItsRank (-53)
/* complex XML schema type 'resqml2:BoundaryFeatureInterpretationPlusItsRank': */
class SOAP_CMAC resqml2__BoundaryFeatureInterpretationPlusItsRank {
      public:
        /// Optional element 'resqml2:StratigraphicRank' of XML schema type 'eml22:NonNegativeLong'
        LONG64 *StratigraphicRank;
        /// Optional element 'resqml2:FaultCollection' of XML schema type 'resqml2:FeatureInterpretationSet'
        resqml2__FeatureInterpretationSet *FaultCollection;
        /// Optional element 'resqml2:BoundaryFeatureInterpretation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *BoundaryFeatureInterpretation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretationPlusItsRank
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretationPlusItsRank; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BoundaryFeatureInterpretationPlusItsRank, default initialized and not managed by a soap context
        virtual resqml2__BoundaryFeatureInterpretationPlusItsRank *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BoundaryFeatureInterpretationPlusItsRank); }
      public:
        /// Constructor with default initializations
        resqml2__BoundaryFeatureInterpretationPlusItsRank() : StratigraphicRank(), FaultCollection(), BoundaryFeatureInterpretation(), soap() { }
        virtual ~resqml2__BoundaryFeatureInterpretationPlusItsRank() { }
        /// Friend allocator used by soap_new_resqml2__BoundaryFeatureInterpretationPlusItsRank(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BoundaryFeatureInterpretationPlusItsRank * SOAP_FMAC2 soap_instantiate_resqml2__BoundaryFeatureInterpretationPlusItsRank(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:364 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FaultThrow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FaultThrow (-57)
/* complex XML schema type 'resqml2:FaultThrow': */
class SOAP_CMAC resqml2__FaultThrow {
      public:
        /// Required element 'resqml2:Throw' of XML schema type 'resqml2:ThrowKindExt'
        std::vector<std::string> Throw;
        /// Optional element 'resqml2:HasOccurredDuring' of XML schema type 'resqml2:AbstractTimeInterval'
        resqml2__AbstractTimeInterval *HasOccurredDuring;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__FaultThrow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__FaultThrow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__FaultThrow, default initialized and not managed by a soap context
        virtual resqml2__FaultThrow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__FaultThrow); }
      public:
        /// Constructor with default initializations
        resqml2__FaultThrow() : Throw(), HasOccurredDuring(), soap() { }
        virtual ~resqml2__FaultThrow() { }
        /// Friend allocator used by soap_new_resqml2__FaultThrow(struct soap*, int)
        friend SOAP_FMAC1 resqml2__FaultThrow * SOAP_FMAC2 soap_instantiate_resqml2__FaultThrow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:404 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CorrectionInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CorrectionInformation (-77)
/* complex XML schema type 'resqml2:CorrectionInformation': */
class SOAP_CMAC resqml2__CorrectionInformation {
      public:
        /// Optional attribute 'CorrectionAverageVelocity' of XML schema type 'xsd:double'
        double CorrectionAverageVelocity;	///< initialized with default value = 0
        /// Optional attribute 'CorrectionTimeShift' of XML schema type 'xsd:double'
        double CorrectionTimeShift;	///< initialized with default value = 0
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CorrectionInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CorrectionInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CorrectionInformation, default initialized and not managed by a soap context
        virtual resqml2__CorrectionInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CorrectionInformation); }
      public:
        /// Constructor with default initializations
        resqml2__CorrectionInformation() : CorrectionAverageVelocity(0), CorrectionTimeShift(0), soap() { }
        virtual ~resqml2__CorrectionInformation() { }
        /// Friend allocator used by soap_new_resqml2__CorrectionInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CorrectionInformation * SOAP_FMAC2 soap_instantiate_resqml2__CorrectionInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:412 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TvdInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TvdInformation (-81)
/* complex XML schema type 'resqml2:TvdInformation': */
class SOAP_CMAC resqml2__TvdInformation {
      public:
        /// Required element 'resqml2:NodeTvdValues' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *NodeTvdValues;
        /// Required element 'resqml2:TvdDatum' of XML schema type 'xsd:double'
        double TvdDatum;
        /// Required element 'resqml2:TvdReference' of XML schema type 'eml22:WellboreDatumReference'
        enum eml22__WellboreDatumReference TvdReference;
        /// Required element 'resqml2:LocalDepth3dCrs' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *LocalDepth3dCrs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TvdInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TvdInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TvdInformation, default initialized and not managed by a soap context
        virtual resqml2__TvdInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TvdInformation); }
      public:
        /// Constructor with default initializations
        resqml2__TvdInformation() : NodeTvdValues(), TvdDatum(), TvdReference(), LocalDepth3dCrs(), soap() { }
        virtual ~resqml2__TvdInformation() { }
        /// Friend allocator used by soap_new_resqml2__TvdInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TvdInformation * SOAP_FMAC2 soap_instantiate_resqml2__TvdInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:426 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryParentIntersection
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryParentIntersection (-88)
/* complex XML schema type 'resqml2:WellboreTrajectoryParentIntersection': */
class SOAP_CMAC resqml2__WellboreTrajectoryParentIntersection {
      public:
        /// Required element 'resqml2:KickoffMd' of XML schema type 'xsd:double'
        double KickoffMd;
        /// Optional element 'resqml2:ParentMd' of XML schema type 'xsd:double'
        double *ParentMd;
        /// Required element 'resqml2:ParentTrajectory' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ParentTrajectory;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryParentIntersection
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryParentIntersection; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreTrajectoryParentIntersection, default initialized and not managed by a soap context
        virtual resqml2__WellboreTrajectoryParentIntersection *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreTrajectoryParentIntersection); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreTrajectoryParentIntersection() : KickoffMd(), ParentMd(), ParentTrajectory(), soap() { }
        virtual ~resqml2__WellboreTrajectoryParentIntersection() { }
        /// Friend allocator used by soap_new_resqml2__WellboreTrajectoryParentIntersection(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreTrajectoryParentIntersection * SOAP_FMAC2 soap_instantiate_resqml2__WellboreTrajectoryParentIntersection(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:430 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WitsmlWellboreReference
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WitsmlWellboreReference (-90)
/* complex XML schema type 'resqml2:WitsmlWellboreReference': */
class SOAP_CMAC resqml2__WitsmlWellboreReference {
      public:
        /// Required element 'resqml2:WitsmlWell' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WitsmlWell;
        /// Required element 'resqml2:WitsmlWellbore' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WitsmlWellbore;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WitsmlWellboreReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WitsmlWellboreReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WitsmlWellboreReference, default initialized and not managed by a soap context
        virtual resqml2__WitsmlWellboreReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WitsmlWellboreReference); }
      public:
        /// Constructor with default initializations
        resqml2__WitsmlWellboreReference() : WitsmlWell(), WitsmlWellbore(), soap() { }
        virtual ~resqml2__WitsmlWellboreReference() { }
        /// Friend allocator used by soap_new_resqml2__WitsmlWellboreReference(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WitsmlWellboreReference * SOAP_FMAC2 soap_instantiate_resqml2__WitsmlWellboreReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:432 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactRepresentationPart (-91)
/* complex XML schema type 'resqml2:AbstractContactRepresentationPart': */
class SOAP_CMAC resqml2__AbstractContactRepresentationPart {
      public:
        /// Required element 'resqml2:Index' of XML schema type 'eml22:NonNegativeLong'
        LONG64 Index;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactRepresentationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactRepresentationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractContactRepresentationPart, default initialized and not managed by a soap context
        virtual resqml2__AbstractContactRepresentationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractContactRepresentationPart); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractContactRepresentationPart() : Index(), soap() { }
        virtual ~resqml2__AbstractContactRepresentationPart() { }
        /// Friend allocator used by soap_new_resqml2__AbstractContactRepresentationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractContactRepresentationPart * SOAP_FMAC2 soap_instantiate_resqml2__AbstractContactRepresentationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:438 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactIdentity
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactIdentity (-94)
/* complex XML schema type 'resqml2:ContactIdentity': */
class SOAP_CMAC resqml2__ContactIdentity {
      public:
        /// Required element 'resqml2:IdentityKind' of XML schema type 'resqml2:IdentityKind'
        enum resqml2__IdentityKind IdentityKind;
        /// Required element 'resqml2:ListOfContactRepresentations' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ListOfContactRepresentations;
        /// Optional element 'resqml2:ListOfIdenticalNodes' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ListOfIdenticalNodes;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContactIdentity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContactIdentity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContactIdentity, default initialized and not managed by a soap context
        virtual resqml2__ContactIdentity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContactIdentity); }
      public:
        /// Constructor with default initializations
        resqml2__ContactIdentity() : IdentityKind(), ListOfContactRepresentations(), ListOfIdenticalNodes(), soap() { }
        virtual ~resqml2__ContactIdentity() { }
        /// Friend allocator used by soap_new_resqml2__ContactIdentity(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContactIdentity * SOAP_FMAC2 soap_instantiate_resqml2__ContactIdentity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:458 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__OrientedMacroFace
#define SOAP_TYPE_gsoap_eml2_2_resqml2__OrientedMacroFace (-104)
/* complex XML schema type 'resqml2:OrientedMacroFace': */
class SOAP_CMAC resqml2__OrientedMacroFace {
      public:
        /// Required element 'resqml2:PatchIndexOfRepresentation' of XML schema type 'eml22:NonNegativeLong'
        LONG64 PatchIndexOfRepresentation;
        /// Required element 'resqml2:RepresentationIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 RepresentationIndex;
        /// Required element 'resqml2:SideIsPlus' of XML schema type 'xsd:boolean'
        bool SideIsPlus;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__OrientedMacroFace
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__OrientedMacroFace; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__OrientedMacroFace, default initialized and not managed by a soap context
        virtual resqml2__OrientedMacroFace *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__OrientedMacroFace); }
      public:
        /// Constructor with default initializations
        resqml2__OrientedMacroFace() : PatchIndexOfRepresentation(), RepresentationIndex(), SideIsPlus(), soap() { }
        virtual ~resqml2__OrientedMacroFace() { }
        /// Friend allocator used by soap_new_resqml2__OrientedMacroFace(struct soap*, int)
        friend SOAP_FMAC1 resqml2__OrientedMacroFace * SOAP_FMAC2 soap_instantiate_resqml2__OrientedMacroFace(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:460 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchBoundaries
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchBoundaries (-105)
/* complex XML schema type 'resqml2:PatchBoundaries': */
class SOAP_CMAC resqml2__PatchBoundaries {
      public:
        /// Required element 'resqml2:ReferencedPatch' of XML schema type 'eml22:NonNegativeLong'
        LONG64 ReferencedPatch;
        /// Optional element 'resqml2:InnerRing' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> InnerRing;
        /// Optional element 'resqml2:OuterRing' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *OuterRing;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PatchBoundaries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PatchBoundaries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PatchBoundaries, default initialized and not managed by a soap context
        virtual resqml2__PatchBoundaries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PatchBoundaries); }
      public:
        /// Constructor with default initializations
        resqml2__PatchBoundaries() : ReferencedPatch(), InnerRing(), OuterRing(), soap() { }
        virtual ~resqml2__PatchBoundaries() { }
        /// Friend allocator used by soap_new_resqml2__PatchBoundaries(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PatchBoundaries * SOAP_FMAC2 soap_instantiate_resqml2__PatchBoundaries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:478 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeRegion
#define SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeRegion (-114)
/* complex XML schema type 'resqml2:VolumeRegion': */
class SOAP_CMAC resqml2__VolumeRegion {
      public:
        /// Required element 'resqml2:PatchIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 PatchIndex;
        /// Optional element 'resqml2:InternalShells' of XML schema type 'resqml2:VolumeShell'
        std::vector<resqml2__VolumeShell *> InternalShells;
        /// Required element 'resqml2:ExternalShell' of XML schema type 'resqml2:VolumeShell'
        resqml2__VolumeShell *ExternalShell;
        /// Required element 'resqml2:Represents' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Represents;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeRegion
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeRegion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__VolumeRegion, default initialized and not managed by a soap context
        virtual resqml2__VolumeRegion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__VolumeRegion); }
      public:
        /// Constructor with default initializations
        resqml2__VolumeRegion() : PatchIndex(), InternalShells(), ExternalShell(), Represents(), soap() { }
        virtual ~resqml2__VolumeRegion() { }
        /// Friend allocator used by soap_new_resqml2__VolumeRegion(struct soap*, int)
        friend SOAP_FMAC1 resqml2__VolumeRegion * SOAP_FMAC2 soap_instantiate_resqml2__VolumeRegion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:480 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeShell
#define SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeShell (-115)
/* complex XML schema type 'resqml2:VolumeShell': */
class SOAP_CMAC resqml2__VolumeShell {
      public:
        /// Required element 'resqml2:ShellUid' of XML schema type 'eml22:String64'
        std::string ShellUid;
        /// Required element 'resqml2:MacroFaces' of XML schema type 'resqml2:OrientedMacroFace'
        std::vector<resqml2__OrientedMacroFace *> MacroFaces;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeShell
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeShell; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__VolumeShell, default initialized and not managed by a soap context
        virtual resqml2__VolumeShell *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__VolumeShell); }
      public:
        /// Constructor with default initializations
        resqml2__VolumeShell() : ShellUid(), MacroFaces(), soap() { }
        virtual ~resqml2__VolumeShell() { }
        /// Friend allocator used by soap_new_resqml2__VolumeShell(struct soap*, int)
        friend SOAP_FMAC1 resqml2__VolumeShell * SOAP_FMAC2 soap_instantiate_resqml2__VolumeShell(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:482 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGeometry (-116)
/* complex XML schema type 'resqml2:AbstractGeometry': */
class SOAP_CMAC resqml2__AbstractGeometry {
      public:
        /// Optional element 'resqml2:TimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *TimeIndex;
        /// Required element 'resqml2:LocalCrs' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *LocalCrs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractGeometry, default initialized and not managed by a soap context
        virtual resqml2__AbstractGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractGeometry() : TimeIndex(), LocalCrs(), soap() { }
        virtual ~resqml2__AbstractGeometry() { }
        /// Friend allocator used by soap_new_resqml2__AbstractGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractGeometry * SOAP_FMAC2 soap_instantiate_resqml2__AbstractGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:484 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineArray (-117)
/* complex XML schema type 'resqml2:AbstractParametricLineArray': */
class SOAP_CMAC resqml2__AbstractParametricLineArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractParametricLineArray, default initialized and not managed by a soap context
        virtual resqml2__AbstractParametricLineArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractParametricLineArray); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractParametricLineArray() : soap() { }
        virtual ~resqml2__AbstractParametricLineArray() { }
        /// Friend allocator used by soap_new_resqml2__AbstractParametricLineArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractParametricLineArray * SOAP_FMAC2 soap_instantiate_resqml2__AbstractParametricLineArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:490 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPoint3dArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPoint3dArray (-120)
/* Type resqml2__AbstractPoint3dArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:AbstractPoint3dArray': */
class SOAP_CMAC resqml2__AbstractPoint3dArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPoint3dArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPoint3dArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractPoint3dArray, default initialized and not managed by a soap context
        virtual resqml2__AbstractPoint3dArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractPoint3dArray); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractPoint3dArray() : soap() { }
        virtual ~resqml2__AbstractPoint3dArray() { }
        /// Friend allocator used by soap_new_resqml2__AbstractPoint3dArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractPoint3dArray * SOAP_FMAC2 soap_instantiate_resqml2__AbstractPoint3dArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:502 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineIntersections
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineIntersections (-126)
/* complex XML schema type 'resqml2:ParametricLineIntersections': */
class SOAP_CMAC resqml2__ParametricLineIntersections {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:IntersectionLinePairs' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *IntersectionLinePairs;
        /// Required element 'resqml2:ParameterValuePairs' of XML schema type 'eml22:AbstractValueArray'
        eml22__AbstractValueArray *ParameterValuePairs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineIntersections
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineIntersections; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ParametricLineIntersections, default initialized and not managed by a soap context
        virtual resqml2__ParametricLineIntersections *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ParametricLineIntersections); }
      public:
        /// Constructor with default initializations
        resqml2__ParametricLineIntersections() : Count(), IntersectionLinePairs(), ParameterValuePairs(), soap() { }
        virtual ~resqml2__ParametricLineIntersections() { }
        /// Friend allocator used by soap_new_resqml2__ParametricLineIntersections(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ParametricLineIntersections * SOAP_FMAC2 soap_instantiate_resqml2__ParametricLineIntersections(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:506 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3d (-128)
/* complex XML schema type 'resqml2:Point3d': */
class SOAP_CMAC resqml2__Point3d {
      public:
        /// Required element 'resqml2:Coordinate1' of XML schema type 'xsd:double'
        double Coordinate1;
        /// Required element 'resqml2:Coordinate2' of XML schema type 'xsd:double'
        double Coordinate2;
        /// Required element 'resqml2:Coordinate3' of XML schema type 'xsd:double'
        double Coordinate3;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3d
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3d; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3d, default initialized and not managed by a soap context
        virtual resqml2__Point3d *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3d); }
      public:
        /// Constructor with default initializations
        resqml2__Point3d() : Coordinate1(), Coordinate2(), Coordinate3(), soap() { }
        virtual ~resqml2__Point3d() { }
        /// Friend allocator used by soap_new_resqml2__Point3d(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3d * SOAP_FMAC2 soap_instantiate_resqml2__Point3d(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:514 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dOffset
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dOffset (-132)
/* complex XML schema type 'resqml2:Point3dOffset': */
class SOAP_CMAC resqml2__Point3dOffset {
      public:
        /// Required element 'resqml2:Offset' of XML schema type 'resqml2:Point3d'
        resqml2__Point3d *Offset;
        /// Required element 'resqml2:Spacing' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *Spacing;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dOffset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dOffset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3dOffset, default initialized and not managed by a soap context
        virtual resqml2__Point3dOffset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3dOffset); }
      public:
        /// Constructor with default initializations
        resqml2__Point3dOffset() : Offset(), Spacing(), soap() { }
        virtual ~resqml2__Point3dOffset() { }
        /// Friend allocator used by soap_new_resqml2__Point3dOffset(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3dOffset * SOAP_FMAC2 soap_instantiate_resqml2__Point3dOffset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:524 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ThreePoint3d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ThreePoint3d (-137)
/* complex XML schema type 'resqml2:ThreePoint3d': */
class SOAP_CMAC resqml2__ThreePoint3d {
      public:
        /// Sequence of 3 to 3 elements 'resqml2:Point3d' of XML schema type 'resqml2:Point3d'
        std::vector<resqml2__Point3d *> Point3d;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ThreePoint3d
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ThreePoint3d; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ThreePoint3d, default initialized and not managed by a soap context
        virtual resqml2__ThreePoint3d *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ThreePoint3d); }
      public:
        /// Constructor with default initializations
        resqml2__ThreePoint3d() : Point3d(), soap() { }
        virtual ~resqml2__ThreePoint3d() { }
        /// Friend allocator used by soap_new_resqml2__ThreePoint3d(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ThreePoint3d * SOAP_FMAC2 soap_instantiate_resqml2__ThreePoint3d(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:528 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicCoordinates
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicCoordinates (-139)
/* complex XML schema type 'resqml2:AbstractSeismicCoordinates': */
class SOAP_CMAC resqml2__AbstractSeismicCoordinates {
      public:
        /// Required element 'resqml2:SeismicSupport' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SeismicSupport;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicCoordinates
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicCoordinates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractSeismicCoordinates, default initialized and not managed by a soap context
        virtual resqml2__AbstractSeismicCoordinates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractSeismicCoordinates); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractSeismicCoordinates() : SeismicSupport(), soap() { }
        virtual ~resqml2__AbstractSeismicCoordinates() { }
        /// Friend allocator used by soap_new_resqml2__AbstractSeismicCoordinates(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractSeismicCoordinates * SOAP_FMAC2 soap_instantiate_resqml2__AbstractSeismicCoordinates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:560 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParentWindow (-155)
/* complex XML schema type 'resqml2:AbstractParentWindow': */
class SOAP_CMAC resqml2__AbstractParentWindow {
      public:
        /// Optional element 'resqml2:CellOverlap' of XML schema type 'resqml2:CellOverlap'
        resqml2__CellOverlap *CellOverlap;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractParentWindow, default initialized and not managed by a soap context
        virtual resqml2__AbstractParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractParentWindow); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractParentWindow() : CellOverlap(), soap() { }
        virtual ~resqml2__AbstractParentWindow() { }
        /// Friend allocator used by soap_new_resqml2__AbstractParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractParentWindow * SOAP_FMAC2 soap_instantiate_resqml2__AbstractParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:564 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Activation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Activation (-157)
/* complex XML schema type 'resqml2:Activation': */
class SOAP_CMAC resqml2__Activation {
      public:
        /// Required element 'resqml2:ActivationToggleIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ActivationToggleIndices;
        /// Required element 'resqml2:TimeSeries' of XML schema type 'eml22:TimeSeries'
        eml22__TimeSeries *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Activation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Activation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Activation, default initialized and not managed by a soap context
        virtual resqml2__Activation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Activation); }
      public:
        /// Constructor with default initializations
        resqml2__Activation() : ActivationToggleIndices(), TimeSeries(), soap() { }
        virtual ~resqml2__Activation() { }
        /// Friend allocator used by soap_new_resqml2__Activation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Activation * SOAP_FMAC2 soap_instantiate_resqml2__Activation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:566 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridPoints
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridPoints (-158)
/* complex XML schema type 'resqml2:AdditionalGridPoints': */
class SOAP_CMAC resqml2__AdditionalGridPoints {
      public:
        /// Optional element 'resqml2:RepresentationPatchIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 *RepresentationPatchIndex;
        /// Required element 'resqml2:Attachment' of XML schema type 'resqml2:GridGeometryAttachment'
        enum resqml2__GridGeometryAttachment Attachment;
        /// Required element 'resqml2:Points' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *Points;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridPoints
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridPoints; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AdditionalGridPoints, default initialized and not managed by a soap context
        virtual resqml2__AdditionalGridPoints *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AdditionalGridPoints); }
      public:
        /// Constructor with default initializations
        resqml2__AdditionalGridPoints() : RepresentationPatchIndex(), Attachment(), Points(), soap() { }
        virtual ~resqml2__AdditionalGridPoints() { }
        /// Friend allocator used by soap_new_resqml2__AdditionalGridPoints(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AdditionalGridPoints * SOAP_FMAC2 soap_instantiate_resqml2__AdditionalGridPoints(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:568 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridTopology (-159)
/* complex XML schema type 'resqml2:AdditionalGridTopology': */
class SOAP_CMAC resqml2__AdditionalGridTopology {
      public:
        /// Optional element 'resqml2:SplitEdges' of XML schema type 'resqml2:SplitEdges'
        resqml2__SplitEdges *SplitEdges;
        /// Optional element 'resqml2:SplitNodePatch' of XML schema type 'resqml2:SplitNodePatch'
        resqml2__SplitNodePatch *SplitNodePatch;
        /// Optional element 'resqml2:SplitColumnEdges' of XML schema type 'resqml2:SplitColumnEdges'
        resqml2__SplitColumnEdges *SplitColumnEdges;
        /// Optional element 'resqml2:UnstructuredColumnEdges' of XML schema type 'resqml2:UnstructuredColumnEdges'
        resqml2__UnstructuredColumnEdges *UnstructuredColumnEdges;
        /// Optional element 'resqml2:SplitFaces' of XML schema type 'resqml2:SplitFaces'
        resqml2__SplitFaces *SplitFaces;
        /// Optional element 'resqml2:UnstructuredSubnodeTopology' of XML schema type 'resqml2:UnstructuredSubnodeTopology'
        resqml2__UnstructuredSubnodeTopology *UnstructuredSubnodeTopology;
        /// Optional element 'resqml2:ColumnLayerSubnodeTopology' of XML schema type 'resqml2:ColumnLayerSubnodeTopology'
        resqml2__ColumnLayerSubnodeTopology *ColumnLayerSubnodeTopology;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AdditionalGridTopology, default initialized and not managed by a soap context
        virtual resqml2__AdditionalGridTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AdditionalGridTopology); }
      public:
        /// Constructor with default initializations
        resqml2__AdditionalGridTopology() : SplitEdges(), SplitNodePatch(), SplitColumnEdges(), UnstructuredColumnEdges(), SplitFaces(), UnstructuredSubnodeTopology(), ColumnLayerSubnodeTopology(), soap() { }
        virtual ~resqml2__AdditionalGridTopology() { }
        /// Friend allocator used by soap_new_resqml2__AdditionalGridTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AdditionalGridTopology * SOAP_FMAC2 soap_instantiate_resqml2__AdditionalGridTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:570 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AlternateCellIndex
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AlternateCellIndex (-160)
/* complex XML schema type 'resqml2:AlternateCellIndex': */
class SOAP_CMAC resqml2__AlternateCellIndex {
      public:
        /// Required element 'resqml2:CellIndex' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CellIndex;
        /// Required element 'resqml2:GridIndex' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *GridIndex;
        /// Required element 'resqml2:OriginalGrids' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> OriginalGrids;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AlternateCellIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AlternateCellIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AlternateCellIndex, default initialized and not managed by a soap context
        virtual resqml2__AlternateCellIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AlternateCellIndex); }
      public:
        /// Constructor with default initializations
        resqml2__AlternateCellIndex() : CellIndex(), GridIndex(), OriginalGrids(), soap() { }
        virtual ~resqml2__AlternateCellIndex() { }
        /// Friend allocator used by soap_new_resqml2__AlternateCellIndex(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AlternateCellIndex * SOAP_FMAC2 soap_instantiate_resqml2__AlternateCellIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:572 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellFluidPhaseUnits
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellFluidPhaseUnits (-161)
/* complex XML schema type 'resqml2:CellFluidPhaseUnits': */
class SOAP_CMAC resqml2__CellFluidPhaseUnits {
      public:
        /// Required element 'resqml2:PhaseUnitIndices' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *PhaseUnitIndices;
        /// Required element 'resqml2:RockFluidOrganizationInterpretation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *RockFluidOrganizationInterpretation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CellFluidPhaseUnits
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CellFluidPhaseUnits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CellFluidPhaseUnits, default initialized and not managed by a soap context
        virtual resqml2__CellFluidPhaseUnits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CellFluidPhaseUnits); }
      public:
        /// Constructor with default initializations
        resqml2__CellFluidPhaseUnits() : PhaseUnitIndices(), RockFluidOrganizationInterpretation(), soap() { }
        virtual ~resqml2__CellFluidPhaseUnits() { }
        /// Friend allocator used by soap_new_resqml2__CellFluidPhaseUnits(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CellFluidPhaseUnits * SOAP_FMAC2 soap_instantiate_resqml2__CellFluidPhaseUnits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:17819 */
#ifndef SOAP_TYPE_gsoap_eml2_2___resqml2__CellOverlap_sequence
#define SOAP_TYPE_gsoap_eml2_2___resqml2__CellOverlap_sequence (-1301)
/* Wrapper: */
struct SOAP_CMAC __resqml2__CellOverlap_sequence {
      public:
        /** Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong' */
        LONG64 Count;
        /** Required element 'resqml2:ParentChildCellPairs' of XML schema type 'eml22:AbstractIntegerArray' */
        eml22__AbstractIntegerArray *ParentChildCellPairs;
        /** Optional element 'resqml2:OverlapVolume' of XML schema type 'resqml2:OverlapVolume' */
        resqml2__OverlapVolume *OverlapVolume;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___resqml2__CellOverlap_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___resqml2__CellOverlap_sequence; }
        /** Constructor with member initializations */
        __resqml2__CellOverlap_sequence() : Count(), ParentChildCellPairs(), OverlapVolume() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml2__CellOverlap_sequence * SOAP_FMAC2 soap_instantiate___resqml2__CellOverlap_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:574 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellOverlap
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellOverlap (-162)
/* complex XML schema type 'resqml2:CellOverlap': */
class SOAP_CMAC resqml2__CellOverlap {
      public:
        struct __resqml2__CellOverlap_sequence *__CellOverlap_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CellOverlap
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CellOverlap; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CellOverlap, default initialized and not managed by a soap context
        virtual resqml2__CellOverlap *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CellOverlap); }
      public:
        /// Constructor with default initializations
        resqml2__CellOverlap() : __CellOverlap_sequence(), soap() { }
        virtual ~resqml2__CellOverlap() { }
        /// Friend allocator used by soap_new_resqml2__CellOverlap(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CellOverlap * SOAP_FMAC2 soap_instantiate_resqml2__CellOverlap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:578 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerGpGrid
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerGpGrid (-164)
/* complex XML schema type 'resqml2:ColumnLayerGpGrid': */
class SOAP_CMAC resqml2__ColumnLayerGpGrid {
      public:
        /// Required element 'resqml2:Nk' of XML schema type 'eml22:NonNegativeLong'
        LONG64 Nk;
        /// Optional element 'resqml2:KGaps' of XML schema type 'resqml2:KGaps'
        resqml2__KGaps *KGaps;
        /// Optional element 'resqml2:UnstructuredColumnLayerGpGridPatch' of XML schema type 'resqml2:UnstructuredColumnLayerGpGridPatch'
        std::vector<resqml2__UnstructuredColumnLayerGpGridPatch *> UnstructuredColumnLayerGpGridPatch;
        /// Optional element 'resqml2:IjkGpGridPatch' of XML schema type 'resqml2:IjkGpGridPatch'
        std::vector<resqml2__IjkGpGridPatch *> IjkGpGridPatch;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerGpGrid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerGpGrid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColumnLayerGpGrid, default initialized and not managed by a soap context
        virtual resqml2__ColumnLayerGpGrid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColumnLayerGpGrid); }
      public:
        /// Constructor with default initializations
        resqml2__ColumnLayerGpGrid() : Nk(), KGaps(), UnstructuredColumnLayerGpGridPatch(), IjkGpGridPatch(), soap() { }
        virtual ~resqml2__ColumnLayerGpGrid() { }
        /// Friend allocator used by soap_new_resqml2__ColumnLayerGpGrid(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColumnLayerGpGrid * SOAP_FMAC2 soap_instantiate_resqml2__ColumnLayerGpGrid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:582 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSplitCoordinateLines
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSplitCoordinateLines (-166)
/* complex XML schema type 'resqml2:ColumnLayerSplitCoordinateLines': */
class SOAP_CMAC resqml2__ColumnLayerSplitCoordinateLines {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:PillarIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *PillarIndices;
        /// Required element 'resqml2:ColumnsPerSplitCoordinateLine' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *ColumnsPerSplitCoordinateLine;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSplitCoordinateLines
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSplitCoordinateLines; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColumnLayerSplitCoordinateLines, default initialized and not managed by a soap context
        virtual resqml2__ColumnLayerSplitCoordinateLines *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColumnLayerSplitCoordinateLines); }
      public:
        /// Constructor with default initializations
        resqml2__ColumnLayerSplitCoordinateLines() : Count(), PillarIndices(), ColumnsPerSplitCoordinateLine(), soap() { }
        virtual ~resqml2__ColumnLayerSplitCoordinateLines() { }
        /// Friend allocator used by soap_new_resqml2__ColumnLayerSplitCoordinateLines(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColumnLayerSplitCoordinateLines * SOAP_FMAC2 soap_instantiate_resqml2__ColumnLayerSplitCoordinateLines(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:588 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ConnectionInterpretations
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ConnectionInterpretations (-169)
/* complex XML schema type 'resqml2:ConnectionInterpretations': */
class SOAP_CMAC resqml2__ConnectionInterpretations {
      public:
        /// Required element 'resqml2:InterpretationIndices' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *InterpretationIndices;
        /// Required element 'resqml2:FeatureInterpretation' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> FeatureInterpretation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ConnectionInterpretations
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ConnectionInterpretations; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ConnectionInterpretations, default initialized and not managed by a soap context
        virtual resqml2__ConnectionInterpretations *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ConnectionInterpretations); }
      public:
        /// Constructor with default initializations
        resqml2__ConnectionInterpretations() : InterpretationIndices(), FeatureInterpretation(), soap() { }
        virtual ~resqml2__ConnectionInterpretations() { }
        /// Friend allocator used by soap_new_resqml2__ConnectionInterpretations(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ConnectionInterpretations * SOAP_FMAC2 soap_instantiate_resqml2__ConnectionInterpretations(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:590 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Edges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Edges (-170)
/* complex XML schema type 'resqml2:Edges': */
class SOAP_CMAC resqml2__Edges {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:NodesPerEdge' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *NodesPerEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Edges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Edges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Edges, default initialized and not managed by a soap context
        virtual resqml2__Edges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Edges); }
      public:
        /// Constructor with default initializations
        resqml2__Edges() : Count(), NodesPerEdge(), soap() { }
        virtual ~resqml2__Edges() { }
        /// Friend allocator used by soap_new_resqml2__Edges(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Edges * SOAP_FMAC2 soap_instantiate_resqml2__Edges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:18012 */
#ifndef SOAP_TYPE_gsoap_eml2_2___resqml2__IjGaps_sequence
#define SOAP_TYPE_gsoap_eml2_2___resqml2__IjGaps_sequence (-1309)
/* Wrapper: */
struct SOAP_CMAC __resqml2__IjGaps_sequence {
      public:
        /** Required element 'resqml2:SplitPillarCount' of XML schema type 'eml22:PositiveLong' */
        LONG64 SplitPillarCount;
        /** Required element 'resqml2:ParentPillarIndices' of XML schema type 'eml22:AbstractIntegerArray' */
        eml22__AbstractIntegerArray *ParentPillarIndices;
        /** Required element 'resqml2:ColumnsPerSplitPillar' of XML schema type 'eml22:JaggedArray' */
        eml22__JaggedArray *ColumnsPerSplitPillar;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___resqml2__IjGaps_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___resqml2__IjGaps_sequence; }
        /** Constructor with member initializations */
        __resqml2__IjGaps_sequence() : SplitPillarCount(), ParentPillarIndices(), ColumnsPerSplitPillar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml2__IjGaps_sequence * SOAP_FMAC2 soap_instantiate___resqml2__IjGaps_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:596 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjGaps
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjGaps (-173)
/* complex XML schema type 'resqml2:IjGaps': */
class SOAP_CMAC resqml2__IjGaps {
      public:
        struct __resqml2__IjGaps_sequence *__IjGaps_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IjGaps
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IjGaps; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IjGaps, default initialized and not managed by a soap context
        virtual resqml2__IjGaps *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IjGaps); }
      public:
        /// Constructor with default initializations
        resqml2__IjGaps() : __IjGaps_sequence(), soap() { }
        virtual ~resqml2__IjGaps() { }
        /// Friend allocator used by soap_new_resqml2__IjGaps(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IjGaps * SOAP_FMAC2 soap_instantiate_resqml2__IjGaps(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:606 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalGridCells
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalGridCells (-178)
/* complex XML schema type 'resqml2:IntervalGridCells': */
class SOAP_CMAC resqml2__IntervalGridCells {
      public:
        /// Required element 'resqml2:CellCount' of XML schema type 'eml22:PositiveLong'
        LONG64 CellCount;
        /// Required element 'resqml2:GridIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *GridIndices;
        /// Required element 'resqml2:CellIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CellIndices;
        /// Required element 'resqml2:LocalFacePairPerCellIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *LocalFacePairPerCellIndices;
        /// Required element 'resqml2:Grid' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Grid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalGridCells
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalGridCells; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IntervalGridCells, default initialized and not managed by a soap context
        virtual resqml2__IntervalGridCells *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IntervalGridCells); }
      public:
        /// Constructor with default initializations
        resqml2__IntervalGridCells() : CellCount(), GridIndices(), CellIndices(), LocalFacePairPerCellIndices(), Grid(), soap() { }
        virtual ~resqml2__IntervalGridCells() { }
        /// Friend allocator used by soap_new_resqml2__IntervalGridCells(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IntervalGridCells * SOAP_FMAC2 soap_instantiate_resqml2__IntervalGridCells(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:608 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Intervals
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Intervals (-179)
/* complex XML schema type 'resqml2:Intervals': */
class SOAP_CMAC resqml2__Intervals {
      public:
        /// Optional element 'resqml2:ChildCellWeights' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *ChildCellWeights;
        /// Required element 'resqml2:ChildCountPerInterval' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ChildCountPerInterval;
        /// Required element 'resqml2:IntervalCount' of XML schema type 'eml22:PositiveLong'
        LONG64 IntervalCount;
        /// Required element 'resqml2:ParentCountPerInterval' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParentCountPerInterval;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Intervals
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Intervals; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Intervals, default initialized and not managed by a soap context
        virtual resqml2__Intervals *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Intervals); }
      public:
        /// Constructor with default initializations
        resqml2__Intervals() : ChildCellWeights(), ChildCountPerInterval(), IntervalCount(), ParentCountPerInterval(), soap() { }
        virtual ~resqml2__Intervals() { }
        /// Friend allocator used by soap_new_resqml2__Intervals(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Intervals * SOAP_FMAC2 soap_instantiate_resqml2__Intervals(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:610 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalStratigraphicUnits (-180)
/* complex XML schema type 'resqml2:IntervalStratigraphicUnits': */
class SOAP_CMAC resqml2__IntervalStratigraphicUnits {
      public:
        /// Required element 'resqml2:UnitIndices' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *UnitIndices;
        /// Required element 'resqml2:StratigraphicOrganizationInterpretation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *StratigraphicOrganizationInterpretation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalStratigraphicUnits
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalStratigraphicUnits; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IntervalStratigraphicUnits, default initialized and not managed by a soap context
        virtual resqml2__IntervalStratigraphicUnits *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IntervalStratigraphicUnits); }
      public:
        /// Constructor with default initializations
        resqml2__IntervalStratigraphicUnits() : UnitIndices(), StratigraphicOrganizationInterpretation(), soap() { }
        virtual ~resqml2__IntervalStratigraphicUnits() { }
        /// Friend allocator used by soap_new_resqml2__IntervalStratigraphicUnits(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IntervalStratigraphicUnits * SOAP_FMAC2 soap_instantiate_resqml2__IntervalStratigraphicUnits(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:18206 */
#ifndef SOAP_TYPE_gsoap_eml2_2___resqml2__KGaps_sequence
#define SOAP_TYPE_gsoap_eml2_2___resqml2__KGaps_sequence (-1311)
/* Wrapper: */
struct SOAP_CMAC __resqml2__KGaps_sequence {
      public:
        /** Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong' */
        LONG64 Count;
        /** Required element 'resqml2:GapAfterLayer' of XML schema type 'eml22:AbstractBooleanArray' */
        eml22__AbstractBooleanArray *GapAfterLayer;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___resqml2__KGaps_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___resqml2__KGaps_sequence; }
        /** Constructor with member initializations */
        __resqml2__KGaps_sequence() : Count(), GapAfterLayer() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml2__KGaps_sequence * SOAP_FMAC2 soap_instantiate___resqml2__KGaps_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:612 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__KGaps
#define SOAP_TYPE_gsoap_eml2_2_resqml2__KGaps (-181)
/* complex XML schema type 'resqml2:KGaps': */
class SOAP_CMAC resqml2__KGaps {
      public:
        struct __resqml2__KGaps_sequence *__KGaps_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__KGaps
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__KGaps; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__KGaps, default initialized and not managed by a soap context
        virtual resqml2__KGaps *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__KGaps); }
      public:
        /// Constructor with default initializations
        resqml2__KGaps() : __KGaps_sequence(), soap() { }
        virtual ~resqml2__KGaps() { }
        /// Friend allocator used by soap_new_resqml2__KGaps(struct soap*, int)
        friend SOAP_FMAC1 resqml2__KGaps * SOAP_FMAC2 soap_instantiate_resqml2__KGaps(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:18249 */
#ifndef SOAP_TYPE_gsoap_eml2_2___resqml2__OverlapVolume_sequence
#define SOAP_TYPE_gsoap_eml2_2___resqml2__OverlapVolume_sequence (-1314)
/* Wrapper: */
struct SOAP_CMAC __resqml2__OverlapVolume_sequence {
      public:
        /** Required element 'resqml2:OverlapVolumes' of XML schema type 'eml22:AbstractFloatingPointArray' */
        eml22__AbstractFloatingPointArray *OverlapVolumes;
        /** Required element 'resqml2:VolumeUom' of XML schema type 'eml22:VolumeUom' */
        enum eml22__VolumeUom VolumeUom;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___resqml2__OverlapVolume_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___resqml2__OverlapVolume_sequence; }
        /** Constructor with member initializations */
        __resqml2__OverlapVolume_sequence() : OverlapVolumes(), VolumeUom() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml2__OverlapVolume_sequence * SOAP_FMAC2 soap_instantiate___resqml2__OverlapVolume_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:616 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__OverlapVolume
#define SOAP_TYPE_gsoap_eml2_2_resqml2__OverlapVolume (-183)
/* complex XML schema type 'resqml2:OverlapVolume': */
class SOAP_CMAC resqml2__OverlapVolume {
      public:
        struct __resqml2__OverlapVolume_sequence *__OverlapVolume_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__OverlapVolume
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__OverlapVolume; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__OverlapVolume, default initialized and not managed by a soap context
        virtual resqml2__OverlapVolume *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__OverlapVolume); }
      public:
        /// Constructor with default initializations
        resqml2__OverlapVolume() : __OverlapVolume_sequence(), soap() { }
        virtual ~resqml2__OverlapVolume() { }
        /// Friend allocator used by soap_new_resqml2__OverlapVolume(struct soap*, int)
        friend SOAP_FMAC1 resqml2__OverlapVolume * SOAP_FMAC2 soap_instantiate_resqml2__OverlapVolume(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:618 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Regrid
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Regrid (-184)
/* complex XML schema type 'resqml2:Regrid': */
class SOAP_CMAC resqml2__Regrid {
      public:
        /// Required element 'resqml2:InitialIndexOnParentGrid' of XML schema type 'eml22:NonNegativeLong'
        LONG64 InitialIndexOnParentGrid;
        /// Optional element 'resqml2:Intervals' of XML schema type 'resqml2:Intervals'
        resqml2__Intervals *Intervals;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Regrid
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Regrid; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Regrid, default initialized and not managed by a soap context
        virtual resqml2__Regrid *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Regrid); }
      public:
        /// Constructor with default initializations
        resqml2__Regrid() : InitialIndexOnParentGrid(), Intervals(), soap() { }
        virtual ~resqml2__Regrid() { }
        /// Friend allocator used by soap_new_resqml2__Regrid(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Regrid * SOAP_FMAC2 soap_instantiate_resqml2__Regrid(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:620 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitColumnEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitColumnEdges (-185)
/* complex XML schema type 'resqml2:SplitColumnEdges': */
class SOAP_CMAC resqml2__SplitColumnEdges {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:ParentColumnEdgeIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParentColumnEdgeIndices;
        /// Required element 'resqml2:ColumnPerSplitColumnEdge' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ColumnPerSplitColumnEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SplitColumnEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SplitColumnEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SplitColumnEdges, default initialized and not managed by a soap context
        virtual resqml2__SplitColumnEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SplitColumnEdges); }
      public:
        /// Constructor with default initializations
        resqml2__SplitColumnEdges() : Count(), ParentColumnEdgeIndices(), ColumnPerSplitColumnEdge(), soap() { }
        virtual ~resqml2__SplitColumnEdges() { }
        /// Friend allocator used by soap_new_resqml2__SplitColumnEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SplitColumnEdges * SOAP_FMAC2 soap_instantiate_resqml2__SplitColumnEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:622 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitEdges (-186)
/* complex XML schema type 'resqml2:SplitEdges': */
class SOAP_CMAC resqml2__SplitEdges {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:ParentEdgeIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParentEdgeIndices;
        /// Required element 'resqml2:FacesPerSplitEdge' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *FacesPerSplitEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SplitEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SplitEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SplitEdges, default initialized and not managed by a soap context
        virtual resqml2__SplitEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SplitEdges); }
      public:
        /// Constructor with default initializations
        resqml2__SplitEdges() : Count(), ParentEdgeIndices(), FacesPerSplitEdge(), soap() { }
        virtual ~resqml2__SplitEdges() { }
        /// Friend allocator used by soap_new_resqml2__SplitEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SplitEdges * SOAP_FMAC2 soap_instantiate_resqml2__SplitEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:624 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitFaces
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitFaces (-187)
/* complex XML schema type 'resqml2:SplitFaces': */
class SOAP_CMAC resqml2__SplitFaces {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:ParentFaceIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParentFaceIndices;
        /// Required element 'resqml2:CellPerSplitFace' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CellPerSplitFace;
        /// Optional element 'resqml2:SplitEdges' of XML schema type 'resqml2:SplitEdges'
        resqml2__SplitEdges *SplitEdges;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SplitFaces
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SplitFaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SplitFaces, default initialized and not managed by a soap context
        virtual resqml2__SplitFaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SplitFaces); }
      public:
        /// Constructor with default initializations
        resqml2__SplitFaces() : Count(), ParentFaceIndices(), CellPerSplitFace(), SplitEdges(), soap() { }
        virtual ~resqml2__SplitFaces() { }
        /// Friend allocator used by soap_new_resqml2__SplitFaces(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SplitFaces * SOAP_FMAC2 soap_instantiate_resqml2__SplitFaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:630 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeTopology (-190)
/* complex XML schema type 'resqml2:SubnodeTopology': */
class SOAP_CMAC resqml2__SubnodeTopology {
      public:
        /// Optional element 'resqml2:VariableSubnodePatch' of XML schema type 'resqml2:VariableSubnodePatch'
        std::vector<resqml2__VariableSubnodePatch *> VariableSubnodePatch;
        /// Optional element 'resqml2:UniformSubnodePatch' of XML schema type 'resqml2:UniformSubnodePatch'
        std::vector<resqml2__UniformSubnodePatch *> UniformSubnodePatch;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SubnodeTopology, default initialized and not managed by a soap context
        virtual resqml2__SubnodeTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SubnodeTopology); }
      public:
        /// Constructor with default initializations
        resqml2__SubnodeTopology() : VariableSubnodePatch(), UniformSubnodePatch(), soap() { }
        virtual ~resqml2__SubnodeTopology() { }
        /// Friend allocator used by soap_new_resqml2__SubnodeTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SubnodeTopology * SOAP_FMAC2 soap_instantiate_resqml2__SubnodeTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:640 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnEdges (-195)
/* complex XML schema type 'resqml2:UnstructuredColumnEdges': */
class SOAP_CMAC resqml2__UnstructuredColumnEdges {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:PillarsPerColumnEdge' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *PillarsPerColumnEdge;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredColumnEdges, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredColumnEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredColumnEdges); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredColumnEdges() : Count(), PillarsPerColumnEdge(), soap() { }
        virtual ~resqml2__UnstructuredColumnEdges() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredColumnEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredColumnEdges * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredColumnEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:652 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridHingeNodeFaces
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridHingeNodeFaces (-201)
/* complex XML schema type 'resqml2:UnstructuredGridHingeNodeFaces': */
class SOAP_CMAC resqml2__UnstructuredGridHingeNodeFaces {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:FaceIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *FaceIndices;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridHingeNodeFaces
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridHingeNodeFaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredGridHingeNodeFaces, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredGridHingeNodeFaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredGridHingeNodeFaces); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredGridHingeNodeFaces() : Count(), FaceIndices(), soap() { }
        virtual ~resqml2__UnstructuredGridHingeNodeFaces() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredGridHingeNodeFaces(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredGridHingeNodeFaces * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredGridHingeNodeFaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:662 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIdentity
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIdentity (-206)
/* complex XML schema type 'resqml2:ElementIdentity': */
class SOAP_CMAC resqml2__ElementIdentity {
      public:
        /// Optional element 'resqml2:ElementIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ElementIndices;
        /// Required element 'resqml2:IdentityKind' of XML schema type 'resqml2:IdentityKind'
        enum resqml2__IdentityKind IdentityKind;
        /// Required element 'resqml2:IndexableElement' of XML schema type 'resqml2:IndexableElement'
        enum resqml2__IndexableElement IndexableElement;
        /// Required element 'resqml2:Representation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Representation;
        /// Optional element 'resqml2:ToTimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *ToTimeIndex;
        /// Optional element 'resqml2:FromTimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *FromTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIdentity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIdentity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ElementIdentity, default initialized and not managed by a soap context
        virtual resqml2__ElementIdentity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ElementIdentity); }
      public:
        /// Constructor with default initializations
        resqml2__ElementIdentity() : ElementIndices(), IdentityKind(), IndexableElement(), Representation(), ToTimeIndex(), FromTimeIndex(), soap() { }
        virtual ~resqml2__ElementIdentity() { }
        /// Friend allocator used by soap_new_resqml2__ElementIdentity(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ElementIdentity * SOAP_FMAC2 soap_instantiate_resqml2__ElementIdentity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:18593 */
#ifndef SOAP_TYPE_gsoap_eml2_2___resqml2__ElementIndices_sequence
#define SOAP_TYPE_gsoap_eml2_2___resqml2__ElementIndices_sequence (-1321)
/* Wrapper: */
struct SOAP_CMAC __resqml2__ElementIndices_sequence {
      public:
        /** Required element 'resqml2:IndexableElement' of XML schema type 'resqml2:IndexableElement' */
        enum resqml2__IndexableElement IndexableElement;
        /** Required element 'resqml2:Indices' of XML schema type 'eml22:AbstractIntegerArray' */
        eml22__AbstractIntegerArray *Indices;
        /** Optional element 'resqml2:SupportingRepresentationIndex' of XML schema type 'eml22:AbstractIntegerArray' */
        eml22__AbstractIntegerArray *SupportingRepresentationIndex;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___resqml2__ElementIndices_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___resqml2__ElementIndices_sequence; }
        /** Constructor with member initializations */
        __resqml2__ElementIndices_sequence() : IndexableElement(), Indices(), SupportingRepresentationIndex() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml2__ElementIndices_sequence * SOAP_FMAC2 soap_instantiate___resqml2__ElementIndices_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:664 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIndices
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIndices (-207)
/* complex XML schema type 'resqml2:ElementIndices': */
class SOAP_CMAC resqml2__ElementIndices {
      public:
        struct __resqml2__ElementIndices_sequence *__ElementIndices_sequence;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ElementIndices, default initialized and not managed by a soap context
        virtual resqml2__ElementIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ElementIndices); }
      public:
        /// Constructor with default initializations
        resqml2__ElementIndices() : __ElementIndices_sequence(), soap() { }
        virtual ~resqml2__ElementIndices() { }
        /// Friend allocator used by soap_new_resqml2__ElementIndices(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ElementIndices * SOAP_FMAC2 soap_instantiate_resqml2__ElementIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:666 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Patch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Patch (-208)
/* complex XML schema type 'resqml2:Patch': */
class SOAP_CMAC resqml2__Patch {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Patch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Patch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Patch, default initialized and not managed by a soap context
        virtual resqml2__Patch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Patch); }
      public:
        /// Constructor with default initializations
        resqml2__Patch() : soap() { }
        virtual ~resqml2__Patch() { }
        /// Friend allocator used by soap_new_resqml2__Patch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Patch * SOAP_FMAC2 soap_instantiate_resqml2__Patch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:670 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfGeometry (-210)
/* complex XML schema type 'resqml2:PatchOfGeometry': */
class SOAP_CMAC resqml2__PatchOfGeometry {
      public:
        /// Optional element 'resqml2:RepresentationPatchIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 *RepresentationPatchIndex;
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:AbstractGeometry'
        resqml2__AbstractGeometry *Geometry;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PatchOfGeometry, default initialized and not managed by a soap context
        virtual resqml2__PatchOfGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PatchOfGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__PatchOfGeometry() : RepresentationPatchIndex(), Geometry(), soap() { }
        virtual ~resqml2__PatchOfGeometry() { }
        /// Friend allocator used by soap_new_resqml2__PatchOfGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PatchOfGeometry * SOAP_FMAC2 soap_instantiate_resqml2__PatchOfGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:678 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentity
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentity (-214)
/* complex XML schema type 'resqml2:RepresentationIdentity': */
class SOAP_CMAC resqml2__RepresentationIdentity {
      public:
        /// Required element 'resqml2:IdenticalElementCount' of XML schema type 'eml22:PositiveLong'
        LONG64 IdenticalElementCount;
        /// Optional element 'resqml2:AdditionalGridTopology' of XML schema type 'resqml2:AdditionalGridTopology'
        resqml2__AdditionalGridTopology *AdditionalGridTopology;
        /// Required element 'resqml2:ElementIdentity' of XML schema type 'resqml2:ElementIdentity'
        std::vector<resqml2__ElementIdentity *> ElementIdentity;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RepresentationIdentity, default initialized and not managed by a soap context
        virtual resqml2__RepresentationIdentity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RepresentationIdentity); }
      public:
        /// Constructor with default initializations
        resqml2__RepresentationIdentity() : IdenticalElementCount(), AdditionalGridTopology(), ElementIdentity(), soap() { }
        virtual ~resqml2__RepresentationIdentity() { }
        /// Friend allocator used by soap_new_resqml2__RepresentationIdentity(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RepresentationIdentity * SOAP_FMAC2 soap_instantiate_resqml2__RepresentationIdentity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:706 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleLookup (-228)
/* complex XML schema type 'resqml2:DoubleLookup': */
class SOAP_CMAC resqml2__DoubleLookup {
      public:
        /// Required element 'resqml2:Key' of XML schema type 'xsd:double'
        double Key;
        /// Required element 'resqml2:Value' of XML schema type 'xsd:double'
        double Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DoubleLookup, default initialized and not managed by a soap context
        virtual resqml2__DoubleLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DoubleLookup); }
      public:
        /// Constructor with default initializations
        resqml2__DoubleLookup() : Key(), Value(), soap() { }
        virtual ~resqml2__DoubleLookup() { }
        /// Friend allocator used by soap_new_resqml2__DoubleLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DoubleLookup * SOAP_FMAC2 soap_instantiate_resqml2__DoubleLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:710 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfPoints
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfPoints (-230)
/* complex XML schema type 'resqml2:PatchOfPoints': */
class SOAP_CMAC resqml2__PatchOfPoints {
      public:
        /// Optional element 'resqml2:RepresentationPatchIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 *RepresentationPatchIndex;
        /// Required element 'resqml2:Points' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *Points;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfPoints
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfPoints; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PatchOfPoints, default initialized and not managed by a soap context
        virtual resqml2__PatchOfPoints *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PatchOfPoints); }
      public:
        /// Constructor with default initializations
        resqml2__PatchOfPoints() : RepresentationPatchIndex(), Points(), soap() { }
        virtual ~resqml2__PatchOfPoints() { }
        /// Friend allocator used by soap_new_resqml2__PatchOfPoints(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PatchOfPoints * SOAP_FMAC2 soap_instantiate_resqml2__PatchOfPoints(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:712 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfValues
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfValues (-231)
/* complex XML schema type 'resqml2:PatchOfValues': */
class SOAP_CMAC resqml2__PatchOfValues {
      public:
        /// Optional element 'resqml2:RepresentationPatchIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 *RepresentationPatchIndex;
        /// Required element 'resqml2:Values' of XML schema type 'eml22:AbstractValueArray'
        eml22__AbstractValueArray *Values;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfValues
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfValues; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PatchOfValues, default initialized and not managed by a soap context
        virtual resqml2__PatchOfValues *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PatchOfValues); }
      public:
        /// Constructor with default initializations
        resqml2__PatchOfValues() : RepresentationPatchIndex(), Values(), soap() { }
        virtual ~resqml2__PatchOfValues() { }
        /// Friend allocator used by soap_new_resqml2__PatchOfValues(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PatchOfValues * SOAP_FMAC2 soap_instantiate_resqml2__PatchOfValues(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:716 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PropertyKindFacet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PropertyKindFacet (-233)
/* complex XML schema type 'resqml2:PropertyKindFacet': */
class SOAP_CMAC resqml2__PropertyKindFacet {
      public:
        /// Required element 'resqml2:Facet' of XML schema type 'resqml2:FacetExt'
        std::string Facet;
        /// Required element 'resqml2:Kind' of XML schema type 'resqml2:FacetKind'
        enum resqml2__FacetKind Kind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PropertyKindFacet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PropertyKindFacet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PropertyKindFacet, default initialized and not managed by a soap context
        virtual resqml2__PropertyKindFacet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PropertyKindFacet); }
      public:
        /// Constructor with default initializations
        resqml2__PropertyKindFacet() : Facet(), Kind(), soap() { }
        virtual ~resqml2__PropertyKindFacet() { }
        /// Friend allocator used by soap_new_resqml2__PropertyKindFacet(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PropertyKindFacet * SOAP_FMAC2 soap_instantiate_resqml2__PropertyKindFacet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:720 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StringLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StringLookup (-235)
/* complex XML schema type 'resqml2:StringLookup': */
class SOAP_CMAC resqml2__StringLookup {
      public:
        /// Required element 'resqml2:Key' of XML schema type 'xsd:long'
        LONG64 Key;
        /// Required element 'resqml2:Value' of XML schema type 'eml22:String2000'
        std::string Value;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StringLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StringLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StringLookup, default initialized and not managed by a soap context
        virtual resqml2__StringLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StringLookup); }
      public:
        /// Constructor with default initializations
        resqml2__StringLookup() : Key(), Value(), soap() { }
        virtual ~resqml2__StringLookup() { }
        /// Friend allocator used by soap_new_resqml2__StringLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StringLookup * SOAP_FMAC2 soap_instantiate_resqml2__StringLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:728 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineWellbores
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineWellbores (-239)
/* complex XML schema type 'resqml2:StreamlineWellbores': */
class SOAP_CMAC resqml2__StreamlineWellbores {
      public:
        /// Required element 'resqml2:InjectorPerLine' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *InjectorPerLine;
        /// Required element 'resqml2:ProducerPerLine' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ProducerPerLine;
        /// Required element 'resqml2:WellboreTrajectoryRepresentation' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> WellboreTrajectoryRepresentation;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineWellbores
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineWellbores; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StreamlineWellbores, default initialized and not managed by a soap context
        virtual resqml2__StreamlineWellbores *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StreamlineWellbores); }
      public:
        /// Constructor with default initializations
        resqml2__StreamlineWellbores() : InjectorPerLine(), ProducerPerLine(), WellboreTrajectoryRepresentation(), soap() { }
        virtual ~resqml2__StreamlineWellbores() { }
        /// Friend allocator used by soap_new_resqml2__StreamlineWellbores(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StreamlineWellbores * SOAP_FMAC2 soap_instantiate_resqml2__StreamlineWellbores(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:730 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject (-240)
/* complex XML schema type 'eml22:AbstractObject': */
class SOAP_CMAC eml22__AbstractObject {
      public:
        /// Optional element 'eml22:Aliases' of XML schema type 'eml22:ObjectAlias'
        std::vector<eml22__ObjectAlias *> Aliases;
        /// Required element 'eml22:Citation' of XML schema type 'eml22:Citation'
        eml22__Citation *Citation;
        /// Optional element 'eml22:CustomData' of XML schema type 'eml22:CustomData'
        eml22__CustomData *CustomData;
        /// Optional element 'eml22:ExtensionNameValue' of XML schema type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> ExtensionNameValue;
        /// Optional attribute 'objectVersion' of XML schema type 'eml22:String64'
        std::string *objectVersion;
        /// Required attribute 'schemaVersion' of XML schema type 'eml22:String64'
        std::string schemaVersion;
        /// Required attribute 'uuid' of XML schema type 'eml22:UuidString'
        std::string uuid;
        /// Optional attribute 'existenceKind' of XML schema type 'eml22:ExistenceKind'
        enum eml22__ExistenceKind *existenceKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractObject, default initialized and not managed by a soap context
        virtual eml22__AbstractObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractObject); }
      public:
        /// Constructor with default initializations
        eml22__AbstractObject() : Aliases(), Citation(), CustomData(), ExtensionNameValue(), objectVersion(), schemaVersion(), uuid(), existenceKind(), soap() { }
        virtual ~eml22__AbstractObject() { }
        /// Friend allocator used by soap_new_eml22__AbstractObject(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractObject * SOAP_FMAC2 soap_instantiate_eml22__AbstractObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:732 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Citation
#define SOAP_TYPE_gsoap_eml2_2_eml22__Citation (-241)
/* complex XML schema type 'eml22:Citation': */
class SOAP_CMAC eml22__Citation {
      public:
        /// Required element 'eml22:Title' of XML schema type 'eml22:String2000'
        std::string Title;
        /// Required element 'eml22:Originator' of XML schema type 'eml22:String64'
        std::string Originator;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm Creation;
        /// Required element 'eml22:Format' of XML schema type 'eml22:String2000'
        std::string Format;
        /// Optional element 'eml22:Editor' of XML schema type 'eml22:String64'
        std::string *Editor;
        /// Optional element 'eml22:LastUpdate' of XML schema type 'xsd:dateTime'
        struct tm *LastUpdate;
        /// Optional element 'eml22:VersionString' of XML schema type 'eml22:String64'
        std::string *VersionString;
        /// Optional element 'eml22:Description' of XML schema type 'eml22:String2000'
        std::string *Description;
        /// Optional element 'eml22:DescriptiveKeywords' of XML schema type 'eml22:String2000'
        std::string *DescriptiveKeywords;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__Citation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__Citation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__Citation, default initialized and not managed by a soap context
        virtual eml22__Citation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__Citation); }
      public:
        /// Constructor with default initializations
        eml22__Citation() : Title(), Originator(), Creation(), Format(), Editor(), LastUpdate(), VersionString(), Description(), DescriptiveKeywords(), soap() { }
        virtual ~eml22__Citation() { }
        /// Friend allocator used by soap_new_eml22__Citation(struct soap*, int)
        friend SOAP_FMAC1 eml22__Citation * SOAP_FMAC2 soap_instantiate_eml22__Citation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:734 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CustomData
#define SOAP_TYPE_gsoap_eml2_2_eml22__CustomData (-242)
/* complex XML schema type 'eml22:CustomData': */
class SOAP_CMAC eml22__CustomData {
      public:
        std::vector<char *> __any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CustomData
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CustomData; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CustomData, default initialized and not managed by a soap context
        virtual eml22__CustomData *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CustomData); }
      public:
        /// Constructor with default initializations
        eml22__CustomData() : __any(), soap() { }
        virtual ~eml22__CustomData() { }
        /// Friend allocator used by soap_new_eml22__CustomData(struct soap*, int)
        friend SOAP_FMAC1 eml22__CustomData * SOAP_FMAC2 soap_instantiate_eml22__CustomData(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:736 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue (-243)
/* complex XML schema type 'eml22:ExtensionNameValue': */
class SOAP_CMAC eml22__ExtensionNameValue {
      public:
        /// Required element 'eml22:Name' of XML schema type 'eml22:String64'
        std::string Name;
        /// Required element 'eml22:Value' of XML schema type 'eml22:StringMeasure'
        eml22__StringMeasure *Value;
        /// Optional element 'eml22:MeasureClass' of XML schema type 'eml22:MeasureClass'
        enum eml22__MeasureClass *MeasureClass;
        /// Optional element 'eml22:DTim' of XML schema type 'eml22:TimeStamp'
        std::string *DTim;
        /// Optional element 'eml22:Index' of XML schema type 'xsd:int'
        int *Index;
        /// Optional element 'eml22:Description' of XML schema type 'eml22:String2000'
        std::string *Description;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ExtensionNameValue, default initialized and not managed by a soap context
        virtual eml22__ExtensionNameValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ExtensionNameValue); }
      public:
        /// Constructor with default initializations
        eml22__ExtensionNameValue() : Name(), Value(), MeasureClass(), DTim(), Index(), Description(), soap() { }
        virtual ~eml22__ExtensionNameValue() { }
        /// Friend allocator used by soap_new_eml22__ExtensionNameValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__ExtensionNameValue * SOAP_FMAC2 soap_instantiate_eml22__ExtensionNameValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:738 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias (-244)
/* complex XML schema type 'eml22:ObjectAlias': */
class SOAP_CMAC eml22__ObjectAlias {
      public:
        /// Required element 'eml22:Identifier' of XML schema type 'eml22:String64'
        std::string Identifier;
        /// Optional element 'eml22:Description' of XML schema type 'eml22:String2000'
        std::string *Description;
        /// Required attribute 'authority' of XML schema type 'eml22:String64'
        std::string authority;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ObjectAlias, default initialized and not managed by a soap context
        virtual eml22__ObjectAlias *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ObjectAlias); }
      public:
        /// Constructor with default initializations
        eml22__ObjectAlias() : Identifier(), Description(), authority(), soap() { }
        virtual ~eml22__ObjectAlias() { }
        /// Friend allocator used by soap_new_eml22__ObjectAlias(struct soap*, int)
        friend SOAP_FMAC1 eml22__ObjectAlias * SOAP_FMAC2 soap_instantiate_eml22__ObjectAlias(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:750 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray (-250)
/* complex XML schema type 'eml22:AbstractValueArray': */
class SOAP_CMAC eml22__AbstractValueArray {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractValueArray, default initialized and not managed by a soap context
        virtual eml22__AbstractValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractValueArray); }
      public:
        /// Constructor with default initializations
        eml22__AbstractValueArray() : soap() { }
        virtual ~eml22__AbstractValueArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractValueArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractValueArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:762 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DummyType
#define SOAP_TYPE_gsoap_eml2_2_eml22__DummyType (-256)
/* complex XML schema type 'eml22:DummyType': */
class SOAP_CMAC eml22__DummyType {
      public:
        /// Required element 'eml22:DummyElement' of XML schema type 'eml22:CustomData'
        eml22__CustomData *DummyElement;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DummyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DummyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DummyType, default initialized and not managed by a soap context
        virtual eml22__DummyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DummyType); }
      public:
        /// Constructor with default initializations
        eml22__DummyType() : DummyElement(), soap() { }
        virtual ~eml22__DummyType() { }
        /// Friend allocator used by soap_new_eml22__DummyType(struct soap*, int)
        friend SOAP_FMAC1 eml22__DummyType * SOAP_FMAC2 soap_instantiate_eml22__DummyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:784 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray (-267)
/* complex XML schema type 'eml22:JaggedArray': */
class SOAP_CMAC eml22__JaggedArray {
      public:
        /// Required element 'eml22:Elements' of XML schema type 'eml22:AbstractValueArray'
        eml22__AbstractValueArray *Elements;
        /// Required element 'eml22:CumulativeLength' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CumulativeLength;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__JaggedArray, default initialized and not managed by a soap context
        virtual eml22__JaggedArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__JaggedArray); }
      public:
        /// Constructor with default initializations
        eml22__JaggedArray() : Elements(), CumulativeLength(), soap() { }
        virtual ~eml22__JaggedArray() { }
        /// Friend allocator used by soap_new_eml22__JaggedArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__JaggedArray * SOAP_FMAC2 soap_instantiate_eml22__JaggedArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:786 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval (-268)
/* complex XML schema type 'eml22:MdInterval': */
class SOAP_CMAC eml22__MdInterval {
      public:
        /// Required element 'eml22:MdTop' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdTop;
        /// Required element 'eml22:MdBase' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MdBase;
        /// Required attribute 'datum' of XML schema type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MdInterval, default initialized and not managed by a soap context
        virtual eml22__MdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MdInterval); }
      public:
        /// Constructor with default initializations
        eml22__MdInterval() : MdTop(), MdBase(), datum(), soap() { }
        virtual ~eml22__MdInterval() { }
        /// Friend allocator used by soap_new_eml22__MdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml22__MdInterval * SOAP_FMAC2 soap_instantiate_eml22__MdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:794 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval (-272)
/* complex XML schema type 'eml22:TvdInterval': */
class SOAP_CMAC eml22__TvdInterval {
      public:
        /// Required element 'eml22:TvdTop' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *TvdTop;
        /// Required element 'eml22:TvdBase' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *TvdBase;
        /// Required attribute 'datum' of XML schema type 'eml22:String64'
        std::string datum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TvdInterval, default initialized and not managed by a soap context
        virtual eml22__TvdInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TvdInterval); }
      public:
        /// Constructor with default initializations
        eml22__TvdInterval() : TvdTop(), TvdBase(), datum(), soap() { }
        virtual ~eml22__TvdInterval() { }
        /// Friend allocator used by soap_new_eml22__TvdInterval(struct soap*, int)
        friend SOAP_FMAC1 eml22__TvdInterval * SOAP_FMAC2 soap_instantiate_eml22__TvdInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1530 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference (-640)
/* complex XML schema type 'eml22:DataObjectReference': */
class SOAP_CMAC eml22__DataObjectReference {
      public:
        /// Required element 'eml22:ContentType' of XML schema type 'eml22:String2000'
        std::string ContentType;
        /// Required element 'eml22:Title' of XML schema type 'eml22:String2000'
        std::string Title;
        /// Required element 'eml22:Uuid' of XML schema type 'eml22:UuidString'
        std::string Uuid;
        /// Optional element 'eml22:UuidAuthority' of XML schema type 'eml22:String64'
        std::string *UuidAuthority;
        /// Optional element 'eml22:Uri' of XML schema type 'xsd:anyURI'
        std::string *Uri;
        /// Optional element 'eml22:VersionString' of XML schema type 'eml22:String64'
        std::string *VersionString;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataObjectReference, default initialized and not managed by a soap context
        virtual eml22__DataObjectReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataObjectReference); }
      public:
        /// Constructor with default initializations
        eml22__DataObjectReference() : ContentType(), Title(), Uuid(), UuidAuthority(), Uri(), VersionString(), soap() { }
        virtual ~eml22__DataObjectReference() { }
        /// Friend allocator used by soap_new_eml22__DataObjectReference(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataObjectReference * SOAP_FMAC2 soap_instantiate_eml22__DataObjectReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1534 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset (-642)
/* complex XML schema type 'eml22:ExternalDataset': */
class SOAP_CMAC eml22__ExternalDataset {
      public:
        /// Required element 'eml22:ExternalFileProxy' of XML schema type 'eml22:ExternalDatasetPart'
        std::vector<eml22__ExternalDatasetPart *> ExternalFileProxy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ExternalDataset, default initialized and not managed by a soap context
        virtual eml22__ExternalDataset *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ExternalDataset); }
      public:
        /// Constructor with default initializations
        eml22__ExternalDataset() : ExternalFileProxy(), soap() { }
        virtual ~eml22__ExternalDataset() { }
        /// Friend allocator used by soap_new_eml22__ExternalDataset(struct soap*, int)
        friend SOAP_FMAC1 eml22__ExternalDataset * SOAP_FMAC2 soap_instantiate_eml22__ExternalDataset(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1536 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart (-643)
/* complex XML schema type 'eml22:ExternalDatasetPart': */
class SOAP_CMAC eml22__ExternalDatasetPart {
      public:
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'eml22:PathInExternalFile' of XML schema type 'eml22:String2000'
        std::string PathInExternalFile;
        /// Required element 'eml22:StartIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 StartIndex;
        /// Required element 'eml22:EpcExternalPartReference' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *EpcExternalPartReference;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ExternalDatasetPart, default initialized and not managed by a soap context
        virtual eml22__ExternalDatasetPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ExternalDatasetPart); }
      public:
        /// Constructor with default initializations
        eml22__ExternalDatasetPart() : Count(), PathInExternalFile(), StartIndex(), EpcExternalPartReference(), soap() { }
        virtual ~eml22__ExternalDatasetPart() { }
        /// Friend allocator used by soap_new_eml22__ExternalDatasetPart(struct soap*, int)
        friend SOAP_FMAC1 eml22__ExternalDatasetPart * SOAP_FMAC2 soap_instantiate_eml22__ExternalDatasetPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1538 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter (-644)
/* complex XML schema type 'eml22:AbstractActivityParameter': */
class SOAP_CMAC eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Title' of XML schema type 'eml22:String2000'
        std::string Title;
        /// Optional element 'eml22:Index' of XML schema type 'xsd:long'
        LONG64 *Index;
        /// Optional element 'eml22:Selection' of XML schema type 'eml22:String2000'
        std::string *Selection;
        /// Optional element 'eml22:Key' of XML schema type 'eml22:AbstractParameterKey'
        std::vector<eml22__AbstractParameterKey *> Key;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractActivityParameter, default initialized and not managed by a soap context
        virtual eml22__AbstractActivityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractActivityParameter); }
      public:
        /// Constructor with default initializations
        eml22__AbstractActivityParameter() : Title(), Index(), Selection(), Key(), soap() { }
        virtual ~eml22__AbstractActivityParameter() { }
        /// Friend allocator used by soap_new_eml22__AbstractActivityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractActivityParameter * SOAP_FMAC2 soap_instantiate_eml22__AbstractActivityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1540 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey (-645)
/* complex XML schema type 'eml22:AbstractParameterKey': */
class SOAP_CMAC eml22__AbstractParameterKey {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractParameterKey, default initialized and not managed by a soap context
        virtual eml22__AbstractParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractParameterKey); }
      public:
        /// Constructor with default initializations
        eml22__AbstractParameterKey() : soap() { }
        virtual ~eml22__AbstractParameterKey() { }
        /// Friend allocator used by soap_new_eml22__AbstractParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractParameterKey * SOAP_FMAC2 soap_instantiate_eml22__AbstractParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1554 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate (-652)
/* complex XML schema type 'eml22:ParameterTemplate': */
class SOAP_CMAC eml22__ParameterTemplate {
      public:
        /// Optional element 'eml22:AllowedKind' of XML schema type 'eml22:ParameterKind'
        std::vector<enum eml22__ParameterKind> AllowedKind;
        /// Required element 'eml22:IsInput' of XML schema type 'xsd:boolean'
        bool IsInput;
        /// Optional element 'eml22:KeyConstraint' of XML schema type 'eml22:String2000'
        std::vector<std::string> KeyConstraint;
        /// Required element 'eml22:IsOutput' of XML schema type 'xsd:boolean'
        bool IsOutput;
        /// Required element 'eml22:Title' of XML schema type 'eml22:String2000'
        std::string Title;
        /// Optional element 'eml22:DataObjectContentType' of XML schema type 'eml22:String2000'
        std::string *DataObjectContentType;
        /// Required element 'eml22:MaxOccurs' of XML schema type 'xsd:long'
        LONG64 MaxOccurs;
        /// Required element 'eml22:MinOccurs' of XML schema type 'xsd:long'
        LONG64 MinOccurs;
        /// Optional element 'eml22:Constraint' of XML schema type 'eml22:String2000'
        std::string *Constraint;
        /// Optional element 'eml22:DefaultValue' of XML schema type 'eml22:AbstractActivityParameter'
        std::vector<eml22__AbstractActivityParameter *> DefaultValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ParameterTemplate, default initialized and not managed by a soap context
        virtual eml22__ParameterTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ParameterTemplate); }
      public:
        /// Constructor with default initializations
        eml22__ParameterTemplate() : AllowedKind(), IsInput(), KeyConstraint(), IsOutput(), Title(), DataObjectContentType(), MaxOccurs(), MinOccurs(), Constraint(), DefaultValue(), soap() { }
        virtual ~eml22__ParameterTemplate() { }
        /// Friend allocator used by soap_new_eml22__ParameterTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml22__ParameterTemplate * SOAP_FMAC2 soap_instantiate_eml22__ParameterTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1562 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime (-656)
/* complex XML schema type 'eml22:GeologicTime': */
class SOAP_CMAC eml22__GeologicTime {
      public:
        /// Optional element 'eml22:AgeOffsetAttribute' of XML schema type 'xsd:long'
        LONG64 *AgeOffsetAttribute;
        /// Typedef xsd__dateTime with custom serializer for struct tm
        struct tm DateTime;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeologicTime, default initialized and not managed by a soap context
        virtual eml22__GeologicTime *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeologicTime); }
      public:
        /// Constructor with default initializations
        eml22__GeologicTime() : AgeOffsetAttribute(), DateTime(), soap() { }
        virtual ~eml22__GeologicTime() { }
        /// Friend allocator used by soap_new_eml22__GeologicTime(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeologicTime * SOAP_FMAC2 soap_instantiate_eml22__GeologicTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1568 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex (-659)
/* complex XML schema type 'eml22:TimeIndex': */
class SOAP_CMAC eml22__TimeIndex {
      public:
        /// Required element 'eml22:Index' of XML schema type 'eml22:NonNegativeLong'
        LONG64 Index;
        /// Required element 'eml22:TimeSeries' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndex, default initialized and not managed by a soap context
        virtual eml22__TimeIndex *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndex); }
      public:
        /// Constructor with default initializations
        eml22__TimeIndex() : Index(), TimeSeries(), soap() { }
        virtual ~eml22__TimeIndex() { }
        /// Friend allocator used by soap_new_eml22__TimeIndex(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndex * SOAP_FMAC2 soap_instantiate_eml22__TimeIndex(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1570 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices (-660)
/* complex XML schema type 'eml22:TimeIndices': */
class SOAP_CMAC eml22__TimeIndices {
      public:
        /// Required element 'eml22:TimeIndexCount' of XML schema type 'eml22:PositiveLong'
        LONG64 TimeIndexCount;
        /// Optional element 'eml22:TimeIndexStart' of XML schema type 'eml22:NonNegativeLong'
        LONG64 *TimeIndexStart;
        /// Optional element 'eml22:SimulatorTimeStep' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *SimulatorTimeStep;
        /// Required element 'eml22:UseInterval' of XML schema type 'xsd:boolean'
        bool UseInterval;
        /// Required element 'eml22:TimeSeries' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *TimeSeries;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndices, default initialized and not managed by a soap context
        virtual eml22__TimeIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndices); }
      public:
        /// Constructor with default initializations
        eml22__TimeIndices() : TimeIndexCount(), TimeIndexStart(), SimulatorTimeStep(), UseInterval(), TimeSeries(), soap() { }
        virtual ~eml22__TimeIndices() { }
        /// Friend allocator used by soap_new_eml22__TimeIndices(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndices * SOAP_FMAC2 soap_instantiate_eml22__TimeIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1574 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage (-662)
/* complex XML schema type 'eml22:TimeSeriesParentage': */
class SOAP_CMAC eml22__TimeSeriesParentage {
      public:
        /// Required element 'eml22:HasOverlap' of XML schema type 'xsd:boolean'
        bool HasOverlap;
        /// Required element 'eml22:ParentTimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *ParentTimeIndex;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeSeriesParentage, default initialized and not managed by a soap context
        virtual eml22__TimeSeriesParentage *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeSeriesParentage); }
      public:
        /// Constructor with default initializations
        eml22__TimeSeriesParentage() : HasOverlap(), ParentTimeIndex(), soap() { }
        virtual ~eml22__TimeSeriesParentage() { }
        /// Friend allocator used by soap_new_eml22__TimeSeriesParentage(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeSeriesParentage * SOAP_FMAC2 soap_instantiate_eml22__TimeSeriesParentage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1578 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue (-664)
/* complex XML schema type 'eml22:AbstractPressureValue': */
class SOAP_CMAC eml22__AbstractPressureValue {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractPressureValue, default initialized and not managed by a soap context
        virtual eml22__AbstractPressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractPressureValue); }
      public:
        /// Constructor with default initializations
        eml22__AbstractPressureValue() : soap() { }
        virtual ~eml22__AbstractPressureValue() { }
        /// Friend allocator used by soap_new_eml22__AbstractPressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractPressureValue * SOAP_FMAC2 soap_instantiate_eml22__AbstractPressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:19854 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__union_AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2__eml22__union_AbstractTemperaturePressure (-1353)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml22__union_AbstractTemperaturePressure
{
};
#endif

/* eml2_2ForGsoap.h:1580 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure (-665)
/* Choice: */
class SOAP_CMAC eml22__AbstractTemperaturePressure {
      public:
        /// Union with union _eml22__union_AbstractTemperaturePressure variant selector __union_AbstractTemperaturePressure set to one of:
        int __union_AbstractTemperaturePressure;
        union _eml22__union_AbstractTemperaturePressure union_AbstractTemperaturePressure;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractTemperaturePressure, default initialized and not managed by a soap context
        virtual eml22__AbstractTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractTemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml22__AbstractTemperaturePressure() : __union_AbstractTemperaturePressure(), soap() { }
        virtual ~eml22__AbstractTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml22__AbstractTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml22__AbstractTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1582 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue (-666)
/* complex XML schema type 'eml22:DensityValue': */
class SOAP_CMAC eml22__DensityValue {
      public:
        /// Required element 'eml22:Density' of XML schema type 'eml22:MassPerVolumeMeasureExt'
        eml22__MassPerVolumeMeasureExt *Density;
        /// Required element 'eml22:MeasurementPressureTemperature' of XML schema type 'eml22:AbstractTemperaturePressure'
        eml22__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DensityValue, default initialized and not managed by a soap context
        virtual eml22__DensityValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DensityValue); }
      public:
        /// Constructor with default initializations
        eml22__DensityValue() : Density(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml22__DensityValue() { }
        /// Friend allocator used by soap_new_eml22__DensityValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__DensityValue * SOAP_FMAC2 soap_instantiate_eml22__DensityValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1584 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue (-667)
/* complex XML schema type 'eml22:FlowRateValue': */
class SOAP_CMAC eml22__FlowRateValue {
      public:
        /// Required element 'eml22:FlowRate' of XML schema type 'eml22:VolumePerTimeMeasureExt'
        eml22__VolumePerTimeMeasureExt *FlowRate;
        /// Required element 'eml22:MeasurementPressureTemperature' of XML schema type 'eml22:AbstractTemperaturePressure'
        eml22__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FlowRateValue, default initialized and not managed by a soap context
        virtual eml22__FlowRateValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FlowRateValue); }
      public:
        /// Constructor with default initializations
        eml22__FlowRateValue() : FlowRate(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml22__FlowRateValue() { }
        /// Friend allocator used by soap_new_eml22__FlowRateValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__FlowRateValue * SOAP_FMAC2 soap_instantiate_eml22__FlowRateValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1588 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue (-669)
/* complex XML schema type 'eml22:PressureValue': */
class SOAP_CMAC eml22__PressureValue {
      public:
        /// Required element 'eml22:AbstractPressureValue' of XML schema type 'eml22:AbstractPressureValue'
        eml22__AbstractPressureValue *AbstractPressureValue;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureValue, default initialized and not managed by a soap context
        virtual eml22__PressureValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureValue); }
      public:
        /// Constructor with default initializations
        eml22__PressureValue() : AbstractPressureValue(), soap() { }
        virtual ~eml22__PressureValue() { }
        /// Friend allocator used by soap_new_eml22__PressureValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureValue * SOAP_FMAC2 soap_instantiate_eml22__PressureValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1598 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue (-674)
/* complex XML schema type 'eml22:VolumeValue': */
class SOAP_CMAC eml22__VolumeValue {
      public:
        /// Required element 'eml22:Volume' of XML schema type 'eml22:VolumeMeasureExt'
        eml22__VolumeMeasureExt *Volume;
        /// Required element 'eml22:MeasurementPressureTemperature' of XML schema type 'eml22:AbstractTemperaturePressure'
        eml22__AbstractTemperaturePressure *MeasurementPressureTemperature;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeValue, default initialized and not managed by a soap context
        virtual eml22__VolumeValue *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeValue); }
      public:
        /// Constructor with default initializations
        eml22__VolumeValue() : Volume(), MeasurementPressureTemperature(), soap() { }
        virtual ~eml22__VolumeValue() { }
        /// Friend allocator used by soap_new_eml22__VolumeValue(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeValue * SOAP_FMAC2 soap_instantiate_eml22__VolumeValue(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1600 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs (-675)
/* complex XML schema type 'eml22:AbstractGeodeticCrs': */
class SOAP_CMAC eml22__AbstractGeodeticCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractGeodeticCrs, default initialized and not managed by a soap context
        virtual eml22__AbstractGeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractGeodeticCrs); }
      public:
        /// Constructor with default initializations
        eml22__AbstractGeodeticCrs() : soap() { }
        virtual ~eml22__AbstractGeodeticCrs() { }
        /// Friend allocator used by soap_new_eml22__AbstractGeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractGeodeticCrs * SOAP_FMAC2 soap_instantiate_eml22__AbstractGeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1602 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs (-676)
/* complex XML schema type 'eml22:AbstractProjectedCrs': */
class SOAP_CMAC eml22__AbstractProjectedCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractProjectedCrs, default initialized and not managed by a soap context
        virtual eml22__AbstractProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml22__AbstractProjectedCrs() : soap() { }
        virtual ~eml22__AbstractProjectedCrs() { }
        /// Friend allocator used by soap_new_eml22__AbstractProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractProjectedCrs * SOAP_FMAC2 soap_instantiate_eml22__AbstractProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1604 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs (-677)
/* complex XML schema type 'eml22:AbstractVerticalCrs': */
class SOAP_CMAC eml22__AbstractVerticalCrs {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractVerticalCrs, default initialized and not managed by a soap context
        virtual eml22__AbstractVerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractVerticalCrs); }
      public:
        /// Constructor with default initializations
        eml22__AbstractVerticalCrs() : soap() { }
        virtual ~eml22__AbstractVerticalCrs() { }
        /// Friend allocator used by soap_new_eml22__AbstractVerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractVerticalCrs * SOAP_FMAC2 soap_instantiate_eml22__AbstractVerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1644 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule (-697)
/* complex XML schema type 'eml22:FailingRule': */
class SOAP_CMAC eml22__FailingRule {
      public:
        /// Required element 'eml22:RuleId' of XML schema type 'eml22:String64'
        std::string RuleId;
        /// Optional element 'eml22:RuleName' of XML schema type 'eml22:String2000'
        std::string *RuleName;
        /// Optional element 'eml22:Severity' of XML schema type 'eml22:String64'
        std::string *Severity;
        /// Optional element 'eml22:FailingRuleExtensions' of XML schema type 'eml22:ExtensionNameValue'
        std::vector<eml22__ExtensionNameValue *> FailingRuleExtensions;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FailingRule, default initialized and not managed by a soap context
        virtual eml22__FailingRule *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FailingRule); }
      public:
        /// Constructor with default initializations
        eml22__FailingRule() : RuleId(), RuleName(), Severity(), FailingRuleExtensions(), soap() { }
        virtual ~eml22__FailingRule() { }
        /// Friend allocator used by soap_new_eml22__FailingRule(struct soap*, int)
        friend SOAP_FMAC1 eml22__FailingRule * SOAP_FMAC2 soap_instantiate_eml22__FailingRule(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1646 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange
#define SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange (-698)
/* complex XML schema type 'eml22:IndexRange': */
class SOAP_CMAC eml22__IndexRange {
      public:
        /// Required element 'eml22:IndexMinimum' of XML schema type 'eml22:String64'
        std::string IndexMinimum;
        /// Required element 'eml22:IndexMaximum' of XML schema type 'eml22:String64'
        std::string IndexMaximum;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IndexRange, default initialized and not managed by a soap context
        virtual eml22__IndexRange *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IndexRange); }
      public:
        /// Constructor with default initializations
        eml22__IndexRange() : IndexMinimum(), IndexMaximum(), soap() { }
        virtual ~eml22__IndexRange() { }
        /// Friend allocator used by soap_new_eml22__IndexRange(struct soap*, int)
        friend SOAP_FMAC1 eml22__IndexRange * SOAP_FMAC2 soap_instantiate_eml22__IndexRange(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1648 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation (-699)
/* complex XML schema type 'eml22:AbstractGraphicalInformation': */
class SOAP_CMAC eml22__AbstractGraphicalInformation {
      public:
        /// Required element 'eml22:TargetObject' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *TargetObject;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractGraphicalInformation, default initialized and not managed by a soap context
        virtual eml22__AbstractGraphicalInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractGraphicalInformation); }
      public:
        /// Constructor with default initializations
        eml22__AbstractGraphicalInformation() : TargetObject(), soap() { }
        virtual ~eml22__AbstractGraphicalInformation() { }
        /// Friend allocator used by soap_new_eml22__AbstractGraphicalInformation(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractGraphicalInformation * SOAP_FMAC2 soap_instantiate_eml22__AbstractGraphicalInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1662 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType (-706)
/* complex XML schema type 'gml:AbstractGMLType': */
class SOAP_CMAC gml__AbstractGMLType {
      public:
        /// Optional element 'gml:description' of XML schema type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XML schema type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Optional element 'gml:identifier' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XML schema type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Required attribute 'gml:id' of XML schema type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGMLType, default initialized and not managed by a soap context
        virtual gml__AbstractGMLType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGMLType); }
      public:
        /// Constructor with default initializations
        gml__AbstractGMLType() : description(), descriptionReference(), identifier(), name(), gml__id(), soap() { }
        virtual ~gml__AbstractGMLType() { }
        /// Friend allocator used by soap_new_gml__AbstractGMLType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGMLType * SOAP_FMAC2 soap_instantiate_gml__AbstractGMLType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1666 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType (-708)
/* complex XML schema type 'gml:ReferenceType': */
class SOAP_CMAC gml__ReferenceType {
      public:
        /// Optional attribute 'owns' of XML schema type 'xsd:boolean'
        bool owns;	///< initialized with default value = (bool)0
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__ReferenceType, default initialized and not managed by a soap context
        virtual gml__ReferenceType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__ReferenceType); }
      public:
        /// Constructor with default initializations
        gml__ReferenceType() : owns((bool)0), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__ReferenceType() { }
        /// Friend allocator used by soap_new_gml__ReferenceType(struct soap*, int)
        friend SOAP_FMAC1 gml__ReferenceType * SOAP_FMAC2 soap_instantiate_gml__ReferenceType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20325 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_TimePrimitivePropertyType (-1368)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_TimePrimitivePropertyType
{
};
#endif

/* eml2_2ForGsoap.h:20315 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence (-1367)
/* Wrapper: */
struct SOAP_CMAC __gml__TimePrimitivePropertyType_sequence {
      public:
        /** Union with union _gml__union_TimePrimitivePropertyType variant selector __unionAbstractTimePrimitive set to one of: */
        int __unionAbstractTimePrimitive;
        union _gml__union_TimePrimitivePropertyType union_TimePrimitivePropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__TimePrimitivePropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__TimePrimitivePropertyType_sequence() : __unionAbstractTimePrimitive() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__TimePrimitivePropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__TimePrimitivePropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1678 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType (-714)
/* complex XML schema type 'gml:TimePrimitivePropertyType': */
class SOAP_CMAC gml__TimePrimitivePropertyType {
      public:
        struct __gml__TimePrimitivePropertyType_sequence *__TimePrimitivePropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Optional attribute 'owns' of XML schema type 'xsd:boolean'
        bool owns;	///< initialized with default value = (bool)0
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__TimePrimitivePropertyType, default initialized and not managed by a soap context
        virtual gml__TimePrimitivePropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__TimePrimitivePropertyType); }
      public:
        /// Constructor with default initializations
        gml__TimePrimitivePropertyType() : __TimePrimitivePropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), owns((bool)0), soap() { }
        virtual ~gml__TimePrimitivePropertyType() { }
        /// Friend allocator used by soap_new_gml__TimePrimitivePropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__TimePrimitivePropertyType * SOAP_FMAC2 soap_instantiate_gml__TimePrimitivePropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20391 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence (-1370)
/* Wrapper: */
struct SOAP_CMAC __gml__EllipsoidalCSPropertyType_sequence {
      public:
        /** Required element 'gml:EllipsoidalCS' of XML schema type 'gml:EllipsoidalCSType' */
        gml__EllipsoidalCSType *EllipsoidalCS;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidalCSPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__EllipsoidalCSPropertyType_sequence() : EllipsoidalCS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__EllipsoidalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__EllipsoidalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1680 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType (-715)
/* complex XML schema type 'gml:EllipsoidalCSPropertyType': */
class SOAP_CMAC gml__EllipsoidalCSPropertyType {
      public:
        struct __gml__EllipsoidalCSPropertyType_sequence *__EllipsoidalCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__EllipsoidalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidalCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidalCSPropertyType() : __EllipsoidalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__EllipsoidalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20457 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence (-1373)
/* Wrapper: */
struct SOAP_CMAC __gml__CoordinateSystemAxisPropertyType_sequence {
      public:
        /** Required element 'gml:CoordinateSystemAxis' of XML schema type 'gml:CoordinateSystemAxisType' */
        gml__CoordinateSystemAxisType *CoordinateSystemAxis;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__CoordinateSystemAxisPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__CoordinateSystemAxisPropertyType_sequence() : CoordinateSystemAxis() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__CoordinateSystemAxisPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CoordinateSystemAxisPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1686 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType (-718)
/* complex XML schema type 'gml:CoordinateSystemAxisPropertyType': */
class SOAP_CMAC gml__CoordinateSystemAxisPropertyType {
      public:
        struct __gml__CoordinateSystemAxisPropertyType_sequence *__CoordinateSystemAxisPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CoordinateSystemAxisPropertyType, default initialized and not managed by a soap context
        virtual gml__CoordinateSystemAxisPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CoordinateSystemAxisPropertyType); }
      public:
        /// Constructor with default initializations
        gml__CoordinateSystemAxisPropertyType() : __CoordinateSystemAxisPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CoordinateSystemAxisPropertyType() { }
        /// Friend allocator used by soap_new_gml__CoordinateSystemAxisPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CoordinateSystemAxisPropertyType * SOAP_FMAC2 soap_instantiate_gml__CoordinateSystemAxisPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20523 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence (-1376)
/* Wrapper: */
struct SOAP_CMAC __gml__CartesianCSPropertyType_sequence {
      public:
        /** Required element 'gml:CartesianCS' of XML schema type 'gml:CartesianCSType' */
        gml__CartesianCSType *CartesianCS;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__CartesianCSPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__CartesianCSPropertyType_sequence() : CartesianCS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__CartesianCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CartesianCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1690 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType (-720)
/* complex XML schema type 'gml:CartesianCSPropertyType': */
class SOAP_CMAC gml__CartesianCSPropertyType {
      public:
        struct __gml__CartesianCSPropertyType_sequence *__CartesianCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CartesianCSPropertyType, default initialized and not managed by a soap context
        virtual gml__CartesianCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CartesianCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__CartesianCSPropertyType() : __CartesianCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CartesianCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__CartesianCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CartesianCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__CartesianCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20589 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence (-1379)
/* Wrapper: */
struct SOAP_CMAC __gml__SphericalCSPropertyType_sequence {
      public:
        /** Required element 'gml:SphericalCS' of XML schema type 'gml:SphericalCSType' */
        gml__SphericalCSType *SphericalCS;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__SphericalCSPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__SphericalCSPropertyType_sequence() : SphericalCS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__SphericalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__SphericalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1694 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType (-722)
/* complex XML schema type 'gml:SphericalCSPropertyType': */
class SOAP_CMAC gml__SphericalCSPropertyType {
      public:
        struct __gml__SphericalCSPropertyType_sequence *__SphericalCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__SphericalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__SphericalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__SphericalCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__SphericalCSPropertyType() : __SphericalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__SphericalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__SphericalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__SphericalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__SphericalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20655 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence (-1382)
/* Wrapper: */
struct SOAP_CMAC __gml__GeodeticDatumPropertyType_sequence {
      public:
        /** Required element 'gml:GeodeticDatum' of XML schema type 'gml:GeodeticDatumType' */
        gml__GeodeticDatumType *GeodeticDatum;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__GeodeticDatumPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__GeodeticDatumPropertyType_sequence() : GeodeticDatum() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__GeodeticDatumPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeodeticDatumPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType (-724)
/* complex XML schema type 'gml:GeodeticDatumPropertyType': */
class SOAP_CMAC gml__GeodeticDatumPropertyType {
      public:
        struct __gml__GeodeticDatumPropertyType_sequence *__GeodeticDatumPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticDatumPropertyType, default initialized and not managed by a soap context
        virtual gml__GeodeticDatumPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticDatumPropertyType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticDatumPropertyType() : __GeodeticDatumPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeodeticDatumPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeodeticDatumPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticDatumPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeodeticDatumPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20721 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence (-1385)
/* Wrapper: */
struct SOAP_CMAC __gml__PrimeMeridianPropertyType_sequence {
      public:
        /** Required element 'gml:PrimeMeridian' of XML schema type 'gml:PrimeMeridianType' */
        gml__PrimeMeridianType *PrimeMeridian;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__PrimeMeridianPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__PrimeMeridianPropertyType_sequence() : PrimeMeridian() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__PrimeMeridianPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__PrimeMeridianPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1704 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType (-727)
/* complex XML schema type 'gml:PrimeMeridianPropertyType': */
class SOAP_CMAC gml__PrimeMeridianPropertyType {
      public:
        struct __gml__PrimeMeridianPropertyType_sequence *__PrimeMeridianPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__PrimeMeridianPropertyType, default initialized and not managed by a soap context
        virtual gml__PrimeMeridianPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__PrimeMeridianPropertyType); }
      public:
        /// Constructor with default initializations
        gml__PrimeMeridianPropertyType() : __PrimeMeridianPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__PrimeMeridianPropertyType() { }
        /// Friend allocator used by soap_new_gml__PrimeMeridianPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__PrimeMeridianPropertyType * SOAP_FMAC2 soap_instantiate_gml__PrimeMeridianPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20787 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence (-1388)
/* Wrapper: */
struct SOAP_CMAC __gml__EllipsoidPropertyType_sequence {
      public:
        /** Required element 'gml:Ellipsoid' of XML schema type 'gml:EllipsoidType' */
        gml__EllipsoidType *Ellipsoid;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__EllipsoidPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__EllipsoidPropertyType_sequence() : Ellipsoid() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__EllipsoidPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__EllipsoidPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1712 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType (-731)
/* complex XML schema type 'gml:EllipsoidPropertyType': */
class SOAP_CMAC gml__EllipsoidPropertyType {
      public:
        struct __gml__EllipsoidPropertyType_sequence *__EllipsoidPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidPropertyType, default initialized and not managed by a soap context
        virtual gml__EllipsoidPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidPropertyType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidPropertyType() : __EllipsoidPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__EllipsoidPropertyType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidPropertyType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20864 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_GeneralConversionPropertyType (-1392)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_GeneralConversionPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:20853 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence (-1391)
/* Wrapper: */
struct SOAP_CMAC __gml__GeneralConversionPropertyType_sequence {
      public:
        /** Union with union _gml__union_GeneralConversionPropertyType variant selector __unionAbstractGeneralConversion set to one of: */
        int __unionAbstractGeneralConversion;
        union _gml__union_GeneralConversionPropertyType union_GeneralConversionPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__GeneralConversionPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__GeneralConversionPropertyType_sequence() : __unionAbstractGeneralConversion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__GeneralConversionPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeneralConversionPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1722 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType (-736)
/* complex XML schema type 'gml:GeneralConversionPropertyType': */
class SOAP_CMAC gml__GeneralConversionPropertyType {
      public:
        struct __gml__GeneralConversionPropertyType_sequence *__GeneralConversionPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeneralConversionPropertyType, default initialized and not managed by a soap context
        virtual gml__GeneralConversionPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeneralConversionPropertyType); }
      public:
        /// Constructor with default initializations
        gml__GeneralConversionPropertyType() : __GeneralConversionPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeneralConversionPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeneralConversionPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeneralConversionPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeneralConversionPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20936 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_CRSPropertyType (-1395)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_CRSPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:20926 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence (-1394)
/* Wrapper: */
struct SOAP_CMAC __gml__CRSPropertyType_sequence {
      public:
        /** Union with union _gml__union_CRSPropertyType variant selector __unionAbstractCRS set to one of: */
        int __unionAbstractCRS;
        union _gml__union_CRSPropertyType union_CRSPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__CRSPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__CRSPropertyType_sequence() : __unionAbstractCRS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__CRSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__CRSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1728 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType (-739)
/* complex XML schema type 'gml:CRSPropertyType': */
class SOAP_CMAC gml__CRSPropertyType {
      public:
        struct __gml__CRSPropertyType_sequence *__CRSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CRSPropertyType, default initialized and not managed by a soap context
        virtual gml__CRSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CRSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__CRSPropertyType() : __CRSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__CRSPropertyType() { }
        /// Friend allocator used by soap_new_gml__CRSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__CRSPropertyType * SOAP_FMAC2 soap_instantiate_gml__CRSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:20998 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence (-1397)
/* Wrapper: */
struct SOAP_CMAC __gml__GeodeticCRSPropertyType_sequence {
      public:
        /** Required element 'gml:GeodeticCRS' of XML schema type 'gml:GeodeticCRSType' */
        gml__GeodeticCRSType *GeodeticCRS;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__GeodeticCRSPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__GeodeticCRSPropertyType_sequence() : GeodeticCRS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__GeodeticCRSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__GeodeticCRSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1730 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType (-740)
/* complex XML schema type 'gml:GeodeticCRSPropertyType': */
class SOAP_CMAC gml__GeodeticCRSPropertyType {
      public:
        struct __gml__GeodeticCRSPropertyType_sequence *__GeodeticCRSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticCRSPropertyType, default initialized and not managed by a soap context
        virtual gml__GeodeticCRSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticCRSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticCRSPropertyType() : __GeodeticCRSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__GeodeticCRSPropertyType() { }
        /// Friend allocator used by soap_new_gml__GeodeticCRSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticCRSPropertyType * SOAP_FMAC2 soap_instantiate_gml__GeodeticCRSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21060 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence (-1400)
/* Wrapper: */
struct SOAP_CMAC __gml__VerticalCSPropertyType_sequence {
      public:
        /** Required element 'gml:VerticalCS' of XML schema type 'gml:VerticalCSType' */
        gml__VerticalCSType *VerticalCS;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__VerticalCSPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__VerticalCSPropertyType_sequence() : VerticalCS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__VerticalCSPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__VerticalCSPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1734 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType (-742)
/* complex XML schema type 'gml:VerticalCSPropertyType': */
class SOAP_CMAC gml__VerticalCSPropertyType {
      public:
        struct __gml__VerticalCSPropertyType_sequence *__VerticalCSPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCSPropertyType, default initialized and not managed by a soap context
        virtual gml__VerticalCSPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCSPropertyType); }
      public:
        /// Constructor with default initializations
        gml__VerticalCSPropertyType() : __VerticalCSPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__VerticalCSPropertyType() { }
        /// Friend allocator used by soap_new_gml__VerticalCSPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCSPropertyType * SOAP_FMAC2 soap_instantiate_gml__VerticalCSPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21126 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence (-1403)
/* Wrapper: */
struct SOAP_CMAC __gml__VerticalDatumPropertyType_sequence {
      public:
        /** Required element 'gml:VerticalDatum' of XML schema type 'gml:VerticalDatumType' */
        gml__VerticalDatumType *VerticalDatum;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__VerticalDatumPropertyType_sequence; }
        /** Constructor with member initializations */
        __gml__VerticalDatumPropertyType_sequence() : VerticalDatum() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__VerticalDatumPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gml__VerticalDatumPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1738 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType (-744)
/* complex XML schema type 'gml:VerticalDatumPropertyType': */
class SOAP_CMAC gml__VerticalDatumPropertyType {
      public:
        struct __gml__VerticalDatumPropertyType_sequence *__VerticalDatumPropertyType_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalDatumPropertyType, default initialized and not managed by a soap context
        virtual gml__VerticalDatumPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalDatumPropertyType); }
      public:
        /// Constructor with default initializations
        gml__VerticalDatumPropertyType() : __VerticalDatumPropertyType_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__VerticalDatumPropertyType() { }
        /// Friend allocator used by soap_new_gml__VerticalDatumPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalDatumPropertyType * SOAP_FMAC2 soap_instantiate_gml__VerticalDatumPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21193 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence (-1406)
/* Wrapper: */
struct SOAP_CMAC __gml__domainOfValidity_sequence {
      public:
        /** Required element 'gmd:EX_Extent' of XML schema type 'gmd:EX_Extent_Type' */
        gmd__EX_USCOREExtent_USCOREType *gmd__EX_USCOREExtent;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__domainOfValidity_sequence; }
        /** Constructor with member initializations */
        __gml__domainOfValidity_sequence() : gmd__EX_USCOREExtent() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__domainOfValidity_sequence * SOAP_FMAC2 soap_instantiate___gml__domainOfValidity_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1742 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity (-746)
/* complex XML schema type 'gml:domainOfValidity': */
class SOAP_CMAC _gml__domainOfValidity {
      public:
        struct __gml__domainOfValidity_sequence *__domainOfValidity_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__domainOfValidity, default initialized and not managed by a soap context
        virtual _gml__domainOfValidity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__domainOfValidity); }
      public:
        /// Constructor with default initializations
        _gml__domainOfValidity() : __domainOfValidity_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~_gml__domainOfValidity() { }
        /// Friend allocator used by soap_new__gml__domainOfValidity(struct soap*, int)
        friend SOAP_FMAC1 _gml__domainOfValidity * SOAP_FMAC2 soap_instantiate__gml__domainOfValidity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1744 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter (-747)
/* complex XML schema type 'gml:secondDefiningParameter': */
class SOAP_CMAC _gml__secondDefiningParameter {
      public:
        /// Required element 'gml:SecondDefiningParameter' of XML schema type 'gml:SecondDefiningParameter'
        _gml__SecondDefiningParameter *SecondDefiningParameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__secondDefiningParameter, default initialized and not managed by a soap context
        virtual _gml__secondDefiningParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__secondDefiningParameter); }
      public:
        /// Constructor with default initializations
        _gml__secondDefiningParameter() : SecondDefiningParameter(), soap() { }
        virtual ~_gml__secondDefiningParameter() { }
        /// Friend allocator used by soap_new__gml__secondDefiningParameter(struct soap*, int)
        friend SOAP_FMAC1 _gml__secondDefiningParameter * SOAP_FMAC2 soap_instantiate__gml__secondDefiningParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21282 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__union_SecondDefiningParameter (-1410)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_SecondDefiningParameter
{
        #define SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_inverseFlattening	(1)	/**< union variant selector value for member inverseFlattening */
        gml__MeasureType *inverseFlattening;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_semiMinorAxis	(2)	/**< union variant selector value for member semiMinorAxis */
        gml__LengthType *semiMinorAxis;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_isSphere	(3)	/**< union variant selector value for member isSphere */
        bool isSphere;
};
#endif

/* eml2_2ForGsoap.h:1746 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter (-748)
/* Choice: */
class SOAP_CMAC _gml__SecondDefiningParameter {
      public:
        /// Union with union _gml__union_SecondDefiningParameter variant selector __union_SecondDefiningParameter set to one of: SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_inverseFlattening SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_semiMinorAxis SOAP_UNION_gsoap_eml2_2__gml__union_SecondDefiningParameter_isSphere
        int __union_SecondDefiningParameter;
        union _gml__union_SecondDefiningParameter union_SecondDefiningParameter;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__SecondDefiningParameter, default initialized and not managed by a soap context
        virtual _gml__SecondDefiningParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__SecondDefiningParameter); }
      public:
        /// Constructor with default initializations
        _gml__SecondDefiningParameter() : __union_SecondDefiningParameter(), soap() { }
        virtual ~_gml__SecondDefiningParameter() { }
        /// Friend allocator used by soap_new__gml__SecondDefiningParameter(struct soap*, int)
        friend SOAP_FMAC1 _gml__SecondDefiningParameter * SOAP_FMAC2 soap_instantiate__gml__SecondDefiningParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21323 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2__gml__union_coordinateOperationAccuracy (-1414)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_coordinateOperationAccuracy
{
};
#endif

/* eml2_2ForGsoap.h:21317 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence
#define SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence (-1413)
/* Wrapper: */
struct SOAP_CMAC __gml__coordinateOperationAccuracy_sequence {
      public:
        /** Union with union _gml__union_coordinateOperationAccuracy variant selector __unionAbstractDQ_USCOREPositionalAccuracy set to one of: */
        int __unionAbstractDQ_USCOREPositionalAccuracy;
        union _gml__union_coordinateOperationAccuracy union_coordinateOperationAccuracy;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gml__coordinateOperationAccuracy_sequence; }
        /** Constructor with member initializations */
        __gml__coordinateOperationAccuracy_sequence() : __unionAbstractDQ_USCOREPositionalAccuracy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gml__coordinateOperationAccuracy_sequence * SOAP_FMAC2 soap_instantiate___gml__coordinateOperationAccuracy_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1748 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy (-749)
/* complex XML schema type 'gml:coordinateOperationAccuracy': */
class SOAP_CMAC _gml__coordinateOperationAccuracy {
      public:
        struct __gml__coordinateOperationAccuracy_sequence *__coordinateOperationAccuracy_sequence;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _gml__coordinateOperationAccuracy, default initialized and not managed by a soap context
        virtual _gml__coordinateOperationAccuracy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_gml__coordinateOperationAccuracy); }
      public:
        /// Constructor with default initializations
        _gml__coordinateOperationAccuracy() : __coordinateOperationAccuracy_sequence(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~_gml__coordinateOperationAccuracy() { }
        /// Friend allocator used by soap_new__gml__coordinateOperationAccuracy(struct soap*, int)
        friend SOAP_FMAC1 _gml__coordinateOperationAccuracy * SOAP_FMAC2 soap_instantiate__gml__coordinateOperationAccuracy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21403 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType (-1417)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:21397 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence (-1416)
/* Wrapper: */
struct SOAP_CMAC __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence {
      public:
        /** Union with union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType variant selector __unionAbstractEX_USCOREGeographicExtent set to one of: */
        int __unionAbstractEX_USCOREGeographicExtent;
        union _gmd__union_EX_USCOREGeographicExtent_USCOREPropertyType union_EX_USCOREGeographicExtent_USCOREPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence() : __unionAbstractEX_USCOREGeographicExtent() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1752 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType (-751)
/* complex XML schema type 'gmd:EX_GeographicExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCOREGeographicExtent_USCOREPropertyType {
      public:
        struct __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence *__EX_USCOREGeographicExtent_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREGeographicExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREGeographicExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREGeographicExtent_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREGeographicExtent_USCOREPropertyType() : __EX_USCOREGeographicExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCOREGeographicExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREGeographicExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREGeographicExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREGeographicExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21463 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence (-1419)
/* Wrapper: */
struct SOAP_CMAC __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:EX_TemporalExtent' of XML schema type 'gmd:EX_TemporalExtent_Type' */
        gmd__EX_USCORETemporalExtent_USCOREType *EX_USCORETemporalExtent;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence() : EX_USCORETemporalExtent() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1756 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType (-753)
/* complex XML schema type 'gmd:EX_TemporalExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCORETemporalExtent_USCOREPropertyType {
      public:
        struct __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence *__EX_USCORETemporalExtent_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCORETemporalExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCORETemporalExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCORETemporalExtent_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCORETemporalExtent_USCOREPropertyType() : __EX_USCORETemporalExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCORETemporalExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCORETemporalExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCORETemporalExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCORETemporalExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21523 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence (-1422)
/* Wrapper: */
struct SOAP_CMAC __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:EX_VerticalExtent' of XML schema type 'gmd:EX_VerticalExtent_Type' */
        gmd__EX_USCOREVerticalExtent_USCOREType *EX_USCOREVerticalExtent;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence() : EX_USCOREVerticalExtent() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1760 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType (-755)
/* complex XML schema type 'gmd:EX_VerticalExtent_PropertyType': */
class SOAP_CMAC gmd__EX_USCOREVerticalExtent_USCOREPropertyType {
      public:
        struct __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence *__EX_USCOREVerticalExtent_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREVerticalExtent_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREVerticalExtent_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREVerticalExtent_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREVerticalExtent_USCOREPropertyType() : __EX_USCOREVerticalExtent_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__EX_USCOREVerticalExtent_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREVerticalExtent_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREVerticalExtent_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREVerticalExtent_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21583 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence (-1425)
/* Wrapper: */
struct SOAP_CMAC __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:MD_Identifier' of XML schema type 'gmd:MD_Identifier_Type' */
        gmd__MD_USCOREIdentifier_USCOREType *MD_USCOREIdentifier;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence() : MD_USCOREIdentifier() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1768 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType (-759)
/* Type gmd__MD_USCOREIdentifier_USCOREPropertyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'gmd:MD_Identifier_PropertyType': */
class SOAP_CMAC gmd__MD_USCOREIdentifier_USCOREPropertyType {
      public:
        struct __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence *__MD_USCOREIdentifier_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__MD_USCOREIdentifier_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__MD_USCOREIdentifier_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__MD_USCOREIdentifier_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__MD_USCOREIdentifier_USCOREPropertyType() : __MD_USCOREIdentifier_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__MD_USCOREIdentifier_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__MD_USCOREIdentifier_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__MD_USCOREIdentifier_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__MD_USCOREIdentifier_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21643 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence (-1428)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCORECitation_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_Citation' of XML schema type 'gmd:CI_Citation_Type' */
        gmd__CI_USCORECitation_USCOREType *CI_USCORECitation;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORECitation_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCORECitation_USCOREPropertyType_sequence() : CI_USCORECitation() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCORECitation_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORECitation_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1772 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType (-761)
/* complex XML schema type 'gmd:CI_Citation_PropertyType': */
class SOAP_CMAC gmd__CI_USCORECitation_USCOREPropertyType {
      public:
        struct __gmd__CI_USCORECitation_USCOREPropertyType_sequence *__CI_USCORECitation_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORECitation_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORECitation_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORECitation_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORECitation_USCOREPropertyType() : __CI_USCORECitation_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORECitation_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORECitation_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORECitation_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORECitation_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21703 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence (-1431)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREDate_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_Date' of XML schema type 'gmd:CI_Date_Type' */
        gmd__CI_USCOREDate_USCOREType *CI_USCOREDate;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDate_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREDate_USCOREPropertyType_sequence() : CI_USCOREDate() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREDate_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREDate_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1776 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType (-763)
/* complex XML schema type 'gmd:CI_Date_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREDate_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREDate_USCOREPropertyType_sequence *__CI_USCOREDate_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDate_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDate_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDate_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREDate_USCOREPropertyType() : __CI_USCOREDate_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREDate_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDate_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDate_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDate_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21763 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence (-1434)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_DateTypeCode' of XML schema type 'gco:CodeListValue_Type' */
        gco__CodeListValue_USCOREType *CI_USCOREDateTypeCode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence() : CI_USCOREDateTypeCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1780 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType (-765)
/* complex XML schema type 'gmd:CI_DateTypeCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREDateTypeCode_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence *__CI_USCOREDateTypeCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDateTypeCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDateTypeCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDateTypeCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREDateTypeCode_USCOREPropertyType() : __CI_USCOREDateTypeCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREDateTypeCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDateTypeCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDateTypeCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDateTypeCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21791 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence (-1437)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_ResponsibleParty' of XML schema type 'gmd:CI_ResponsibleParty_Type' */
        gmd__CI_USCOREResponsibleParty_USCOREType *CI_USCOREResponsibleParty;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence() : CI_USCOREResponsibleParty() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1782 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType (-766)
/* complex XML schema type 'gmd:CI_ResponsibleParty_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREResponsibleParty_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence *__CI_USCOREResponsibleParty_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREResponsibleParty_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREResponsibleParty_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREResponsibleParty_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREResponsibleParty_USCOREPropertyType() : __CI_USCOREResponsibleParty_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREResponsibleParty_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREResponsibleParty_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREResponsibleParty_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREResponsibleParty_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21851 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence (-1440)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREContact_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_Contact' of XML schema type 'gmd:CI_Contact_Type' */
        gmd__CI_USCOREContact_USCOREType *CI_USCOREContact;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREContact_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREContact_USCOREPropertyType_sequence() : CI_USCOREContact() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREContact_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREContact_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1786 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType (-768)
/* complex XML schema type 'gmd:CI_Contact_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREContact_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREContact_USCOREPropertyType_sequence *__CI_USCOREContact_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREContact_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREContact_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREContact_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREContact_USCOREPropertyType() : __CI_USCOREContact_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREContact_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREContact_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREContact_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREContact_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21911 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence (-1443)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCORETelephone_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_Telephone' of XML schema type 'gmd:CI_Telephone_Type' */
        gmd__CI_USCORETelephone_USCOREType *CI_USCORETelephone;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORETelephone_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCORETelephone_USCOREPropertyType_sequence() : CI_USCORETelephone() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCORETelephone_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORETelephone_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1790 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType (-770)
/* complex XML schema type 'gmd:CI_Telephone_PropertyType': */
class SOAP_CMAC gmd__CI_USCORETelephone_USCOREPropertyType {
      public:
        struct __gmd__CI_USCORETelephone_USCOREPropertyType_sequence *__CI_USCORETelephone_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORETelephone_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORETelephone_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORETelephone_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORETelephone_USCOREPropertyType() : __CI_USCORETelephone_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORETelephone_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORETelephone_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORETelephone_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORETelephone_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:21971 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence (-1446)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREAddress_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_Address' of XML schema type 'gmd:CI_Address_Type' */
        gmd__CI_USCOREAddress_USCOREType *CI_USCOREAddress;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREAddress_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREAddress_USCOREPropertyType_sequence() : CI_USCOREAddress() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREAddress_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREAddress_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1794 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType (-772)
/* complex XML schema type 'gmd:CI_Address_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREAddress_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREAddress_USCOREPropertyType_sequence *__CI_USCOREAddress_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREAddress_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREAddress_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREAddress_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREAddress_USCOREPropertyType() : __CI_USCOREAddress_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREAddress_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREAddress_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREAddress_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREAddress_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22031 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence (-1449)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_OnlineResource' of XML schema type 'gmd:CI_OnlineResource_Type' */
        gmd__CI_USCOREOnlineResource_USCOREType *CI_USCOREOnlineResource;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence() : CI_USCOREOnlineResource() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1798 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType (-774)
/* complex XML schema type 'gmd:CI_OnlineResource_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREOnlineResource_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence *__CI_USCOREOnlineResource_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnlineResource_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnlineResource_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnlineResource_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREOnlineResource_USCOREPropertyType() : __CI_USCOREOnlineResource_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCOREOnlineResource_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnlineResource_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnlineResource_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnlineResource_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22091 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence (-1452)
/* Wrapper: */
struct SOAP_CMAC __gmd__URL_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:URL' of XML schema type 'xsd:anyURI' */
        std::string URL;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__URL_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__URL_USCOREPropertyType_sequence() : URL() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__URL_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__URL_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1802 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType (-776)
/* complex XML schema type 'gmd:URL_PropertyType': */
class SOAP_CMAC gmd__URL_USCOREPropertyType {
      public:
        struct __gmd__URL_USCOREPropertyType_sequence *__URL_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__URL_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__URL_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__URL_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__URL_USCOREPropertyType() : __URL_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__URL_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__URL_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__URL_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__URL_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22119 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence (-1454)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_OnLineFunctionCode' of XML schema type 'gco:CodeListValue_Type' */
        gco__CodeListValue_USCOREType *CI_USCOREOnLineFunctionCode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence() : CI_USCOREOnLineFunctionCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1804 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-777)
/* complex XML schema type 'gmd:CI_OnLineFunctionCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence *__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType() : __CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22147 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence (-1456)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_RoleCode' of XML schema type 'gco:CodeListValue_Type' */
        gco__CodeListValue_USCOREType *CI_USCORERoleCode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence() : CI_USCORERoleCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORERoleCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1806 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType (-778)
/* complex XML schema type 'gmd:CI_RoleCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCORERoleCode_USCOREPropertyType {
      public:
        struct __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence *__CI_USCORERoleCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORERoleCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORERoleCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORERoleCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORERoleCode_USCOREPropertyType() : __CI_USCORERoleCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCORERoleCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORERoleCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORERoleCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORERoleCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22175 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence (-1458)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_PresentationFormCode' of XML schema type 'gco:CodeListValue_Type' */
        gco__CodeListValue_USCOREType *CI_USCOREPresentationFormCode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence() : CI_USCOREPresentationFormCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1808 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-779)
/* complex XML schema type 'gmd:CI_PresentationFormCode_PropertyType': */
class SOAP_CMAC gmd__CI_USCOREPresentationFormCode_USCOREPropertyType {
      public:
        struct __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence *__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREPresentationFormCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREPresentationFormCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREPresentationFormCode_USCOREPropertyType() : __CI_USCOREPresentationFormCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__CI_USCOREPresentationFormCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREPresentationFormCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22203 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence (-1460)
/* Wrapper: */
struct SOAP_CMAC __gmd__CI_USCORESeries_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:CI_Series' of XML schema type 'gmd:CI_Series_Type' */
        gmd__CI_USCORESeries_USCOREType *CI_USCORESeries;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__CI_USCORESeries_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__CI_USCORESeries_USCOREPropertyType_sequence() : CI_USCORESeries() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__CI_USCORESeries_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__CI_USCORESeries_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1810 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType (-780)
/* complex XML schema type 'gmd:CI_Series_PropertyType': */
class SOAP_CMAC gmd__CI_USCORESeries_USCOREPropertyType {
      public:
        struct __gmd__CI_USCORESeries_USCOREPropertyType_sequence *__CI_USCORESeries_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORESeries_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORESeries_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORESeries_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORESeries_USCOREPropertyType() : __CI_USCORESeries_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__CI_USCORESeries_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORESeries_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORESeries_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORESeries_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22263 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence (-1463)
/* Wrapper: */
struct SOAP_CMAC __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence {
      public:
        /** Required element 'gmd:DQ_EvaluationMethodTypeCode' of XML schema type 'gco:CodeListValue_Type' */
        gco__CodeListValue_USCOREType *DQ_USCOREEvaluationMethodTypeCode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence() : DQ_USCOREEvaluationMethodTypeCode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1814 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-782)
/* complex XML schema type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType': */
class SOAP_CMAC gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType {
      public:
        struct __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence *__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType() : __DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22297 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__union_DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gmd__union_DQ_USCOREResult_USCOREPropertyType (-1466)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gmd__union_DQ_USCOREResult_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:22291 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence (-1465)
/* Wrapper: */
struct SOAP_CMAC __gmd__DQ_USCOREResult_USCOREPropertyType_sequence {
      public:
        /** Union with union _gmd__union_DQ_USCOREResult_USCOREPropertyType variant selector __unionAbstractDQ_USCOREResult set to one of: */
        int __unionAbstractDQ_USCOREResult;
        union _gmd__union_DQ_USCOREResult_USCOREPropertyType union_DQ_USCOREResult_USCOREPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gmd__DQ_USCOREResult_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gmd__DQ_USCOREResult_USCOREPropertyType_sequence() : __unionAbstractDQ_USCOREResult() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gmd__DQ_USCOREResult_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gmd__DQ_USCOREResult_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1816 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType (-783)
/* complex XML schema type 'gmd:DQ_Result_PropertyType': */
class SOAP_CMAC gmd__DQ_USCOREResult_USCOREPropertyType {
      public:
        struct __gmd__DQ_USCOREResult_USCOREPropertyType_sequence *__DQ_USCOREResult_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__DQ_USCOREResult_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gmd__DQ_USCOREResult_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__DQ_USCOREResult_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gmd__DQ_USCOREResult_USCOREPropertyType() : __DQ_USCOREResult_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gmd__DQ_USCOREResult_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gmd__DQ_USCOREResult_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gmd__DQ_USCOREResult_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gmd__DQ_USCOREResult_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22375 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gts__union_TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gts__union_TM_USCOREPrimitive_USCOREPropertyType (-1469)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gts__union_TM_USCOREPrimitive_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:22365 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence (-1468)
/* Wrapper: */
struct SOAP_CMAC __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence {
      public:
        /** Union with union _gts__union_TM_USCOREPrimitive_USCOREPropertyType variant selector __unionAbstractTimePrimitive set to one of: */
        int __unionAbstractTimePrimitive;
        union _gts__union_TM_USCOREPrimitive_USCOREPropertyType union_TM_USCOREPrimitive_USCOREPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence() : __unionAbstractTimePrimitive() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gts__TM_USCOREPrimitive_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1820 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType (-785)
/* complex XML schema type 'gts:TM_Primitive_PropertyType': */
class SOAP_CMAC gts__TM_USCOREPrimitive_USCOREPropertyType {
      public:
        struct __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence *__TM_USCOREPrimitive_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gts__TM_USCOREPrimitive_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gts__TM_USCOREPrimitive_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gts__TM_USCOREPrimitive_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gts__TM_USCOREPrimitive_USCOREPropertyType() : __TM_USCOREPrimitive_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gts__TM_USCOREPrimitive_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gts__TM_USCOREPrimitive_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gts__TM_USCOREPrimitive_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gts__TM_USCOREPrimitive_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1822 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType (-786)
/* complex XML schema type 'gco:AbstractObject_Type': */
class SOAP_CMAC gco__AbstractObject_USCOREType {
      public:
        /// Optional attribute 'id' of XML schema type 'xsd:ID'
        std::string *id;
        /// Optional attribute 'uuid' of XML schema type 'xsd:string'
        std::string *uuid;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__AbstractObject_USCOREType, default initialized and not managed by a soap context
        virtual gco__AbstractObject_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__AbstractObject_USCOREType); }
      public:
        /// Constructor with default initializations
        gco__AbstractObject_USCOREType() : id(), uuid(), soap() { }
        virtual ~gco__AbstractObject_USCOREType() { }
        /// Friend allocator used by soap_new_gco__AbstractObject_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gco__AbstractObject_USCOREType * SOAP_FMAC2 soap_instantiate_gco__AbstractObject_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22490 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType (-1473)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gco__union_CharacterString_USCOREPropertyType
{
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_CharacterString	(1)	/**< union variant selector value for member CharacterString */
        std::string *CharacterString;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode	(2)	/**< union variant selector value for member gmd__CI_USCOREDateTypeCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREDateTypeCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode_	(3)	/**< union variant selector value for member gmd__CI_USCOREDateTypeCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREDateTypeCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode	(4)	/**< union variant selector value for member gmd__CI_USCOREOnLineFunctionCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREOnLineFunctionCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode_	(5)	/**< union variant selector value for member gmd__CI_USCOREOnLineFunctionCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREOnLineFunctionCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode	(6)	/**< union variant selector value for member gmd__CI_USCORERoleCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCORERoleCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode_	(7)	/**< union variant selector value for member gmd__CI_USCORERoleCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCORERoleCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode	(8)	/**< union variant selector value for member gmd__CI_USCOREPresentationFormCode */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREPresentationFormCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode_	(9)	/**< union variant selector value for member gmd__CI_USCOREPresentationFormCode_ */
        gco__CodeListValue_USCOREType *gmd__CI_USCOREPresentationFormCode_;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode	(10)	/**< union variant selector value for member gmd__DQ_USCOREEvaluationMethodTypeCode */
        gco__CodeListValue_USCOREType *gmd__DQ_USCOREEvaluationMethodTypeCode;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode_	(11)	/**< union variant selector value for member gmd__DQ_USCOREEvaluationMethodTypeCode_ */
        gco__CodeListValue_USCOREType *gmd__DQ_USCOREEvaluationMethodTypeCode_;
};
#endif

/* eml2_2ForGsoap.h:22485 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence (-1472)
/* Wrapper: */
struct SOAP_CMAC __gco__CharacterString_USCOREPropertyType_sequence {
      public:
        /** Union with union _gco__union_CharacterString_USCOREPropertyType variant selector __unionCharacterString set to one of: SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_CharacterString SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREDateTypeCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREOnLineFunctionCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCORERoleCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__CI_USCOREPresentationFormCode_ SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode SOAP_UNION_gsoap_eml2_2__gco__union_CharacterString_USCOREPropertyType_gmd__DQ_USCOREEvaluationMethodTypeCode_ */
        int __unionCharacterString;
        union _gco__union_CharacterString_USCOREPropertyType union_CharacterString_USCOREPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gco__CharacterString_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gco__CharacterString_USCOREPropertyType_sequence() : __unionCharacterString() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gco__CharacterString_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__CharacterString_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1824 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType (-787)
/* complex XML schema type 'gco:CharacterString_PropertyType': */
class SOAP_CMAC gco__CharacterString_USCOREPropertyType {
      public:
        struct __gco__CharacterString_USCOREPropertyType_sequence *__CharacterString_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__CharacterString_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__CharacterString_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__CharacterString_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__CharacterString_USCOREPropertyType() : __CharacterString_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__CharacterString_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__CharacterString_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__CharacterString_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__CharacterString_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22540 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence (-1475)
/* Wrapper: */
struct SOAP_CMAC __gco__Boolean_USCOREPropertyType_sequence {
      public:
        /** Required element 'gco:Boolean' of XML schema type 'xsd:boolean' */
        bool Boolean;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gco__Boolean_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gco__Boolean_USCOREPropertyType_sequence() : Boolean() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gco__Boolean_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__Boolean_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1826 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType (-788)
/* complex XML schema type 'gco:Boolean_PropertyType': */
class SOAP_CMAC gco__Boolean_USCOREPropertyType {
      public:
        struct __gco__Boolean_USCOREPropertyType_sequence *__Boolean_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Boolean_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Boolean_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Boolean_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__Boolean_USCOREPropertyType() : __Boolean_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__Boolean_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Boolean_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Boolean_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Boolean_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22568 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence (-1477)
/* Wrapper: */
struct SOAP_CMAC __gco__Real_USCOREPropertyType_sequence {
      public:
        /** Required element 'gco:Real' of XML schema type 'xsd:double' */
        double Real;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gco__Real_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gco__Real_USCOREPropertyType_sequence() : Real() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gco__Real_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__Real_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1828 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType (-789)
/* complex XML schema type 'gco:Real_PropertyType': */
class SOAP_CMAC gco__Real_USCOREPropertyType {
      public:
        struct __gco__Real_USCOREPropertyType_sequence *__Real_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Real_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Real_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Real_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__Real_USCOREPropertyType() : __Real_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__Real_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Real_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Real_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Real_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22598 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__union_Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gco__union_Date_USCOREPropertyType (-1479)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gco__union_Date_USCOREPropertyType
{
        #define SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_Date	(1)	/**< union variant selector value for member Date */
        std::string *Date;
        #define SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_DateTime	(2)	/**< union variant selector value for member DateTime */
        struct tm *DateTime;
};
#endif

/* eml2_2ForGsoap.h:1830 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType (-790)
/* complex XML schema type 'gco:Date_PropertyType': */
class SOAP_CMAC gco__Date_USCOREPropertyType {
      public:
        /// Union with union _gco__union_Date_USCOREPropertyType variant selector __union_Date_USCOREPropertyType set to one of: SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_Date SOAP_UNION_gsoap_eml2_2__gco__union_Date_USCOREPropertyType_DateTime
        int __union_Date_USCOREPropertyType;
        union _gco__union_Date_USCOREPropertyType union_Date_USCOREPropertyType;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__Date_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__Date_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__Date_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__Date_USCOREPropertyType() : __union_Date_USCOREPropertyType(), gco__nilReason(), soap() { }
        virtual ~gco__Date_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__Date_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__Date_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__Date_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22628 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence (-1481)
/* Wrapper: */
struct SOAP_CMAC __gco__DateTime_USCOREPropertyType_sequence {
      public:
        /** Typedef xsd__dateTime with custom serializer for struct tm */
        struct tm DateTime;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gco__DateTime_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gco__DateTime_USCOREPropertyType_sequence() : DateTime() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gco__DateTime_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gco__DateTime_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1834 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType (-792)
/* complex XML schema type 'gco:DateTime_PropertyType': */
class SOAP_CMAC gco__DateTime_USCOREPropertyType {
      public:
        struct __gco__DateTime_USCOREPropertyType_sequence *__DateTime_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__DateTime_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gco__DateTime_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__DateTime_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gco__DateTime_USCOREPropertyType() : __DateTime_USCOREPropertyType_sequence(), gco__nilReason(), soap() { }
        virtual ~gco__DateTime_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gco__DateTime_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gco__DateTime_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gco__DateTime_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:22674 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gsr__union_SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2__gsr__union_SC_USCORECRS_USCOREPropertyType (-1484)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gsr__union_SC_USCORECRS_USCOREPropertyType
{
};
#endif

/* eml2_2ForGsoap.h:22664 */
#ifndef SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence (-1483)
/* Wrapper: */
struct SOAP_CMAC __gsr__SC_USCORECRS_USCOREPropertyType_sequence {
      public:
        /** Union with union _gsr__union_SC_USCORECRS_USCOREPropertyType variant selector __unionAbstractCRS set to one of: */
        int __unionAbstractCRS;
        union _gsr__union_SC_USCORECRS_USCOREPropertyType union_SC_USCORECRS_USCOREPropertyType;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___gsr__SC_USCORECRS_USCOREPropertyType_sequence; }
        /** Constructor with member initializations */
        __gsr__SC_USCORECRS_USCOREPropertyType_sequence() : __unionAbstractCRS() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __gsr__SC_USCORECRS_USCOREPropertyType_sequence * SOAP_FMAC2 soap_instantiate___gsr__SC_USCORECRS_USCOREPropertyType_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1836 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType (-793)
/* complex XML schema type 'gsr:SC_CRS_PropertyType': */
class SOAP_CMAC gsr__SC_USCORECRS_USCOREPropertyType {
      public:
        struct __gsr__SC_USCORECRS_USCOREPropertyType_sequence *__SC_USCORECRS_USCOREPropertyType_sequence;
        /// Optional attribute 'gco:nilReason' of XML schema type 'gml:NilReasonType'
        std::string *gco__nilReason;
        /// Optional attribute 'uuidref' of XML schema type 'xsd:string'
        std::string *uuidref;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gsr__SC_USCORECRS_USCOREPropertyType, default initialized and not managed by a soap context
        virtual gsr__SC_USCORECRS_USCOREPropertyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gsr__SC_USCORECRS_USCOREPropertyType); }
      public:
        /// Constructor with default initializations
        gsr__SC_USCORECRS_USCOREPropertyType() : __SC_USCORECRS_USCOREPropertyType_sequence(), gco__nilReason(), uuidref(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gsr__SC_USCORECRS_USCOREPropertyType() { }
        /// Friend allocator used by soap_new_gsr__SC_USCORECRS_USCOREPropertyType(struct soap*, int)
        friend SOAP_FMAC1 gsr__SC_USCORECRS_USCOREPropertyType * SOAP_FMAC2 soap_instantiate_gsr__SC_USCORECRS_USCOREPropertyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:286 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AlphaInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AlphaInformation (-18)
/* complex XML schema type 'resqml2:AlphaInformation': */
class SOAP_CMAC resqml2__AlphaInformation : public eml22__AbstractGraphicalInformation {
      public:
        /// Required element 'resqml2:Alpha' of XML schema type 'xsd:double'
        std::vector<double> Alpha;
        /// Required element 'resqml2:Index' of XML schema type 'xsd:string'
        std::vector<std::string> Index;
        /// Optional element 'resqml2:MinMax' of XML schema type 'resqml2:MinMax'
        resqml2__MinMax *MinMax;
        /// Required element 'resqml2:OverwriteColorAlpha' of XML schema type 'xsd:boolean'
        bool OverwriteColorAlpha;
        /// Required element 'resqml2:UseLogarithmicMapping' of XML schema type 'xsd:boolean'
        bool UseLogarithmicMapping;
        /// Required element 'resqml2:UseReverseMapping' of XML schema type 'xsd:boolean'
        bool UseReverseMapping;
        /// Required element 'resqml2:ValueVectorIndex' of XML schema type 'xsd:integer'
        LONG64 ValueVectorIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AlphaInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AlphaInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AlphaInformation, default initialized and not managed by a soap context
        virtual resqml2__AlphaInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AlphaInformation); }
      public:
        /// Constructor with default initializations
        resqml2__AlphaInformation() : Alpha(), Index(), MinMax(), OverwriteColorAlpha(), UseLogarithmicMapping(), UseReverseMapping(), ValueVectorIndex() { }
        virtual ~resqml2__AlphaInformation() { }
        /// Friend allocator used by soap_new_resqml2__AlphaInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AlphaInformation * SOAP_FMAC2 soap_instantiate_resqml2__AlphaInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:288 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AnnotationInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AnnotationInformation (-19)
/* complex XML schema type 'resqml2:AnnotationInformation': */
class SOAP_CMAC resqml2__AnnotationInformation : public eml22__AbstractGraphicalInformation {
      public:
        /// Required element 'resqml2:ShowAnnotationEvery' of XML schema type 'xsd:integer'
        LONG64 ShowAnnotationEvery;
        /// Required element 'resqml2:ValueVectorIndices' of XML schema type 'xsd:string'
        std::vector<std::string> ValueVectorIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AnnotationInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AnnotationInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AnnotationInformation, default initialized and not managed by a soap context
        virtual resqml2__AnnotationInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AnnotationInformation); }
      public:
        /// Constructor with default initializations
        resqml2__AnnotationInformation() : ShowAnnotationEvery(), ValueVectorIndices() { }
        virtual ~resqml2__AnnotationInformation() { }
        /// Friend allocator used by soap_new_resqml2__AnnotationInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AnnotationInformation * SOAP_FMAC2 soap_instantiate_resqml2__AnnotationInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:290 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColorInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColorInformation (-20)
/* complex XML schema type 'resqml2:ColorInformation': */
class SOAP_CMAC resqml2__ColorInformation : public eml22__AbstractGraphicalInformation {
      public:
        /// Optional element 'resqml2:MinMax' of XML schema type 'resqml2:MinMax'
        resqml2__MinMax *MinMax;
        /// Required element 'resqml2:UseLogarithmicMapping' of XML schema type 'xsd:boolean'
        bool UseLogarithmicMapping;
        /// Required element 'resqml2:UseReverseMapping' of XML schema type 'xsd:boolean'
        bool UseReverseMapping;
        /// Required element 'resqml2:ValueVectorIndex' of XML schema type 'xsd:integer'
        LONG64 ValueVectorIndex;
        /// Optional element 'resqml2:DiscreteColorMap' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *DiscreteColorMap;
        /// Optional element 'resqml2:ContinuousColorMap' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ContinuousColorMap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColorInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColorInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColorInformation, default initialized and not managed by a soap context
        virtual resqml2__ColorInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColorInformation); }
      public:
        /// Constructor with default initializations
        resqml2__ColorInformation() : MinMax(), UseLogarithmicMapping(), UseReverseMapping(), ValueVectorIndex(), DiscreteColorMap(), ContinuousColorMap() { }
        virtual ~resqml2__ColorInformation() { }
        /// Friend allocator used by soap_new_resqml2__ColorInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColorInformation * SOAP_FMAC2 soap_instantiate_resqml2__ColorInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:292 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColorMapDictionary
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColorMapDictionary (-21)
/* complex XML schema type 'resqml2:ColorMapDictionary': */
class SOAP_CMAC resqml2__ColorMapDictionary : public eml22__AbstractObject {
      public:
        /// Optional element 'resqml2:DiscreteColorMap' of XML schema type 'resqml2:DiscreteColorMap'
        std::vector<resqml2__DiscreteColorMap *> DiscreteColorMap;
        /// Optional element 'resqml2:ContinuousColorMap' of XML schema type 'resqml2:ContinuousColorMap'
        std::vector<resqml2__ContinuousColorMap *> ContinuousColorMap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColorMapDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColorMapDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColorMapDictionary, default initialized and not managed by a soap context
        virtual resqml2__ColorMapDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColorMapDictionary); }
      public:
        /// Constructor with default initializations
        resqml2__ColorMapDictionary() : DiscreteColorMap(), ContinuousColorMap() { }
        virtual ~resqml2__ColorMapDictionary() { }
        /// Friend allocator used by soap_new_resqml2__ColorMapDictionary(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColorMapDictionary * SOAP_FMAC2 soap_instantiate_resqml2__ColorMapDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:294 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMap
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMap (-22)
/* complex XML schema type 'resqml2:ContinuousColorMap': */
class SOAP_CMAC resqml2__ContinuousColorMap : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:InterpolationDomain' of XML schema type 'resqml2:InterpolationDomain'
        enum resqml2__InterpolationDomain InterpolationDomain;
        /// Required element 'resqml2:InterpolationMethod' of XML schema type 'resqml2:InterpolationMethod'
        enum resqml2__InterpolationMethod InterpolationMethod;
        /// Optional element 'resqml2:NaNColor' of XML schema type 'resqml2:HsvColor'
        resqml2__HsvColor *NaNColor;
        /// Required element 'resqml2:Entry' of XML schema type 'resqml2:ContinuousColorMapEntry'
        std::vector<resqml2__ContinuousColorMapEntry *> Entry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMap
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMap; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContinuousColorMap, default initialized and not managed by a soap context
        virtual resqml2__ContinuousColorMap *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContinuousColorMap); }
      public:
        /// Constructor with default initializations
        resqml2__ContinuousColorMap() : InterpolationDomain(), InterpolationMethod(), NaNColor(), Entry() { }
        virtual ~resqml2__ContinuousColorMap() { }
        /// Friend allocator used by soap_new_resqml2__ContinuousColorMap(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContinuousColorMap * SOAP_FMAC2 soap_instantiate_resqml2__ContinuousColorMap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:298 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContourLineSetInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContourLineSetInformation (-24)
/* complex XML schema type 'resqml2:ContourLineSetInformation': */
class SOAP_CMAC resqml2__ContourLineSetInformation : public eml22__AbstractGraphicalInformation {
      public:
        /// Optional element 'resqml2:DisplayLabelOnMajorLine' of XML schema type 'xsd:boolean'
        bool *DisplayLabelOnMajorLine;
        /// Optional element 'resqml2:DisplayLabelOnMinorLine' of XML schema type 'xsd:boolean'
        bool *DisplayLabelOnMinorLine;
        /// Optional element 'resqml2:Increment' of XML schema type 'xsd:double'
        double *Increment;
        /// Optional element 'resqml2:MajorLineGraphicalInformation' of XML schema type 'resqml2:GraphicalInformationForEdges'
        resqml2__GraphicalInformationForEdges *MajorLineGraphicalInformation;
        /// Optional element 'resqml2:MinorLineGraphicalInformation' of XML schema type 'resqml2:GraphicalInformationForEdges'
        resqml2__GraphicalInformationForEdges *MinorLineGraphicalInformation;
        /// Optional element 'resqml2:ShowMajorLineEvery' of XML schema type 'xsd:integer'
        LONG64 *ShowMajorLineEvery;
        /// Required element 'resqml2:ValueVectorIndex' of XML schema type 'xsd:integer'
        LONG64 ValueVectorIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContourLineSetInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContourLineSetInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContourLineSetInformation, default initialized and not managed by a soap context
        virtual resqml2__ContourLineSetInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContourLineSetInformation); }
      public:
        /// Constructor with default initializations
        resqml2__ContourLineSetInformation() : DisplayLabelOnMajorLine(), DisplayLabelOnMinorLine(), Increment(), MajorLineGraphicalInformation(), MinorLineGraphicalInformation(), ShowMajorLineEvery(), ValueVectorIndex() { }
        virtual ~resqml2__ContourLineSetInformation() { }
        /// Friend allocator used by soap_new_resqml2__ContourLineSetInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContourLineSetInformation * SOAP_FMAC2 soap_instantiate_resqml2__ContourLineSetInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:300 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DefaultGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DefaultGraphicalInformation (-25)
/* complex XML schema type 'resqml2:DefaultGraphicalInformation': */
class SOAP_CMAC resqml2__DefaultGraphicalInformation : public eml22__AbstractGraphicalInformation {
      public:
        /// Optional element 'resqml2:ViewerId' of XML schema type 'xsd:string'
        std::string *ViewerId;
        /// Required element 'resqml2:ViewerKind' of XML schema type 'resqml2:ViewerKindExt'
        std::string ViewerKind;
        /// Required element 'resqml2:IndexableElementInfo' of XML schema type 'resqml2:AbstractGraphicalInformationForIndexableElement'
        std::vector<resqml2__AbstractGraphicalInformationForIndexableElement *> IndexableElementInfo;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DefaultGraphicalInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DefaultGraphicalInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DefaultGraphicalInformation, default initialized and not managed by a soap context
        virtual resqml2__DefaultGraphicalInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DefaultGraphicalInformation); }
      public:
        /// Constructor with default initializations
        resqml2__DefaultGraphicalInformation() : ViewerId(), ViewerKind(), IndexableElementInfo() { }
        virtual ~resqml2__DefaultGraphicalInformation() { }
        /// Friend allocator used by soap_new_resqml2__DefaultGraphicalInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DefaultGraphicalInformation * SOAP_FMAC2 soap_instantiate_resqml2__DefaultGraphicalInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:302 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMap
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMap (-26)
/* complex XML schema type 'resqml2:DiscreteColorMap': */
class SOAP_CMAC resqml2__DiscreteColorMap : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:Entry' of XML schema type 'resqml2:DiscreteColorMapEntry'
        std::vector<resqml2__DiscreteColorMapEntry *> Entry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMap
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMap; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DiscreteColorMap, default initialized and not managed by a soap context
        virtual resqml2__DiscreteColorMap *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DiscreteColorMap); }
      public:
        /// Constructor with default initializations
        resqml2__DiscreteColorMap() : Entry() { }
        virtual ~resqml2__DiscreteColorMap() { }
        /// Friend allocator used by soap_new_resqml2__DiscreteColorMap(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DiscreteColorMap * SOAP_FMAC2 soap_instantiate_resqml2__DiscreteColorMap(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:306 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForEdges (-28)
/* complex XML schema type 'resqml2:GraphicalInformationForEdges': */
class SOAP_CMAC resqml2__GraphicalInformationForEdges : public resqml2__AbstractGraphicalInformationForIndexableElement {
      public:
        /// Optional element 'resqml2:DisplaySpace' of XML schema type 'resqml2:DisplaySpace'
        enum resqml2__DisplaySpace *DisplaySpace;
        /// Optional element 'resqml2:Pattern' of XML schema type 'resqml2:EdgePatternExt'
        std::string *Pattern;
        /// Optional element 'resqml2:Thickness' of XML schema type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *Thickness;
        /// Optional element 'resqml2:UseInterpolationBetweenNodes' of XML schema type 'xsd:boolean'
        bool *UseInterpolationBetweenNodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForEdges
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForEdges; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GraphicalInformationForEdges, default initialized and not managed by a soap context
        virtual resqml2__GraphicalInformationForEdges *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GraphicalInformationForEdges); }
      public:
        /// Constructor with default initializations
        resqml2__GraphicalInformationForEdges() : DisplaySpace(), Pattern(), Thickness(), UseInterpolationBetweenNodes() { }
        virtual ~resqml2__GraphicalInformationForEdges() { }
        /// Friend allocator used by soap_new_resqml2__GraphicalInformationForEdges(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GraphicalInformationForEdges * SOAP_FMAC2 soap_instantiate_resqml2__GraphicalInformationForEdges(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:308 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForFaces
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForFaces (-29)
/* complex XML schema type 'resqml2:GraphicalInformationForFaces': */
class SOAP_CMAC resqml2__GraphicalInformationForFaces : public resqml2__AbstractGraphicalInformationForIndexableElement {
      public:
        /// Optional element 'resqml2:AppliesOnRightHandedFace' of XML schema type 'xsd:boolean'
        bool *AppliesOnRightHandedFace;
        /// Optional element 'resqml2:UseInterpolationBetweenNodes' of XML schema type 'xsd:boolean'
        bool *UseInterpolationBetweenNodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForFaces
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForFaces; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GraphicalInformationForFaces, default initialized and not managed by a soap context
        virtual resqml2__GraphicalInformationForFaces *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GraphicalInformationForFaces); }
      public:
        /// Constructor with default initializations
        resqml2__GraphicalInformationForFaces() : AppliesOnRightHandedFace(), UseInterpolationBetweenNodes() { }
        virtual ~resqml2__GraphicalInformationForFaces() { }
        /// Friend allocator used by soap_new_resqml2__GraphicalInformationForFaces(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GraphicalInformationForFaces * SOAP_FMAC2 soap_instantiate_resqml2__GraphicalInformationForFaces(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:310 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForNodes
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForNodes (-30)
/* complex XML schema type 'resqml2:GraphicalInformationForNodes': */
class SOAP_CMAC resqml2__GraphicalInformationForNodes : public resqml2__AbstractGraphicalInformationForIndexableElement {
      public:
        /// Optional element 'resqml2:ConstantSize' of XML schema type 'eml22:LengthMeasureExt'
        eml22__LengthMeasureExt *ConstantSize;
        /// Optional element 'resqml2:DisplaySpace' of XML schema type 'resqml2:DisplaySpace'
        enum resqml2__DisplaySpace *DisplaySpace;
        /// Optional element 'resqml2:ShowSymbolEvery' of XML schema type 'xsd:integer'
        LONG64 *ShowSymbolEvery;
        /// Optional element 'resqml2:Symbol' of XML schema type 'resqml2:NodeSymbolExt'
        std::string *Symbol;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForNodes
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForNodes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GraphicalInformationForNodes, default initialized and not managed by a soap context
        virtual resqml2__GraphicalInformationForNodes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GraphicalInformationForNodes); }
      public:
        /// Constructor with default initializations
        resqml2__GraphicalInformationForNodes() : ConstantSize(), DisplaySpace(), ShowSymbolEvery(), Symbol() { }
        virtual ~resqml2__GraphicalInformationForNodes() { }
        /// Friend allocator used by soap_new_resqml2__GraphicalInformationForNodes(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GraphicalInformationForNodes * SOAP_FMAC2 soap_instantiate_resqml2__GraphicalInformationForNodes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:312 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForVolumes
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForVolumes (-31)
/* complex XML schema type 'resqml2:GraphicalInformationForVolumes': */
class SOAP_CMAC resqml2__GraphicalInformationForVolumes : public resqml2__AbstractGraphicalInformationForIndexableElement {
      public:
        /// Optional element 'resqml2:UseInterpolationBetweenNodes' of XML schema type 'xsd:boolean'
        bool *UseInterpolationBetweenNodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForVolumes
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForVolumes; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GraphicalInformationForVolumes, default initialized and not managed by a soap context
        virtual resqml2__GraphicalInformationForVolumes *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GraphicalInformationForVolumes); }
      public:
        /// Constructor with default initializations
        resqml2__GraphicalInformationForVolumes() : UseInterpolationBetweenNodes() { }
        virtual ~resqml2__GraphicalInformationForVolumes() { }
        /// Friend allocator used by soap_new_resqml2__GraphicalInformationForVolumes(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GraphicalInformationForVolumes * SOAP_FMAC2 soap_instantiate_resqml2__GraphicalInformationForVolumes(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:314 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForWholeObject
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForWholeObject (-32)
/* complex XML schema type 'resqml2:GraphicalInformationForWholeObject': */
class SOAP_CMAC resqml2__GraphicalInformationForWholeObject : public resqml2__AbstractGraphicalInformationForIndexableElement {
      public:
        /// Optional element 'resqml2:ActiveContourLineSetInformationIndex' of XML schema type 'xsd:integer'
        LONG64 *ActiveContourLineSetInformationIndex;
        /// Optional element 'resqml2:DisplayTitle' of XML schema type 'xsd:boolean'
        bool *DisplayTitle;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForWholeObject
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForWholeObject; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GraphicalInformationForWholeObject, default initialized and not managed by a soap context
        virtual resqml2__GraphicalInformationForWholeObject *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GraphicalInformationForWholeObject); }
      public:
        /// Constructor with default initializations
        resqml2__GraphicalInformationForWholeObject() : ActiveContourLineSetInformationIndex(), DisplayTitle() { }
        virtual ~resqml2__GraphicalInformationForWholeObject() { }
        /// Friend allocator used by soap_new_resqml2__GraphicalInformationForWholeObject(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GraphicalInformationForWholeObject * SOAP_FMAC2 soap_instantiate_resqml2__GraphicalInformationForWholeObject(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:320 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SizeInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SizeInformation (-35)
/* complex XML schema type 'resqml2:SizeInformation': */
class SOAP_CMAC resqml2__SizeInformation : public eml22__AbstractGraphicalInformation {
      public:
        /// Optional element 'resqml2:MinMax' of XML schema type 'resqml2:MinMax'
        resqml2__MinMax *MinMax;
        /// Required element 'resqml2:UseLogarithmicMapping' of XML schema type 'xsd:boolean'
        bool UseLogarithmicMapping;
        /// Required element 'resqml2:UseReverseMapping' of XML schema type 'xsd:boolean'
        bool UseReverseMapping;
        /// Required element 'resqml2:ValueVectorIndex' of XML schema type 'xsd:integer'
        LONG64 ValueVectorIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SizeInformation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SizeInformation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SizeInformation, default initialized and not managed by a soap context
        virtual resqml2__SizeInformation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SizeInformation); }
      public:
        /// Constructor with default initializations
        resqml2__SizeInformation() : MinMax(), UseLogarithmicMapping(), UseReverseMapping(), ValueVectorIndex() { }
        virtual ~resqml2__SizeInformation() { }
        /// Friend allocator used by soap_new_resqml2__SizeInformation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SizeInformation * SOAP_FMAC2 soap_instantiate_resqml2__SizeInformation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:322 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractLocal3dCrs
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractLocal3dCrs (-36)
/* complex XML schema type 'resqml2:AbstractLocal3dCrs': */
class SOAP_CMAC resqml2__AbstractLocal3dCrs : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:YOffset' of XML schema type 'xsd:double'
        double YOffset;
        /// Required element 'resqml2:ZOffset' of XML schema type 'xsd:double'
        double ZOffset;
        /// Required element 'resqml2:ArealRotation' of XML schema type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *ArealRotation;
        /// Required element 'resqml2:ProjectedAxisOrder' of XML schema type 'eml22:AxisOrder2d'
        enum eml22__AxisOrder2d ProjectedAxisOrder;
        /// Optional element 'resqml2:ProjectedUomCustomDict' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ProjectedUomCustomDict;
        /// Required element 'resqml2:ProjectedUom' of XML schema type 'eml22:LengthUomExt'
        std::string ProjectedUom;
        /// Required element 'resqml2:VerticalUom' of XML schema type 'eml22:LengthUomExt'
        std::string VerticalUom;
        /// Optional element 'resqml2:VerticalUomCustomDict' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *VerticalUomCustomDict;
        /// Required element 'resqml2:ZIncreasingDownward' of XML schema type 'xsd:boolean'
        bool ZIncreasingDownward;
        /// Required element 'resqml2:XOffset' of XML schema type 'xsd:double'
        double XOffset;
        /// Required element 'resqml2:ProjectedCrs' of XML schema type 'eml22:AbstractProjectedCrs'
        eml22__AbstractProjectedCrs *ProjectedCrs;
        /// Required element 'resqml2:VerticalCrs' of XML schema type 'eml22:AbstractVerticalCrs'
        eml22__AbstractVerticalCrs *VerticalCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractLocal3dCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractLocal3dCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractLocal3dCrs, default initialized and not managed by a soap context
        virtual resqml2__AbstractLocal3dCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractLocal3dCrs); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractLocal3dCrs() : YOffset(), ZOffset(), ArealRotation(), ProjectedAxisOrder(), ProjectedUomCustomDict(), ProjectedUom(), VerticalUom(), VerticalUomCustomDict(), ZIncreasingDownward(), XOffset(), ProjectedCrs(), VerticalCrs() { }
        virtual ~resqml2__AbstractLocal3dCrs() { }
        /// Friend allocator used by soap_new_resqml2__AbstractLocal3dCrs(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractLocal3dCrs * SOAP_FMAC2 soap_instantiate_resqml2__AbstractLocal3dCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:328 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeature (-39)
/* complex XML schema type 'resqml2:AbstractFeature': */
class SOAP_CMAC resqml2__AbstractFeature : public eml22__AbstractObject {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractFeature, default initialized and not managed by a soap context
        virtual resqml2__AbstractFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractFeature); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractFeature() { }
        virtual ~resqml2__AbstractFeature() { }
        /// Friend allocator used by soap_new_resqml2__AbstractFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractFeature * SOAP_FMAC2 soap_instantiate_resqml2__AbstractFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:340 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeatureDictionary
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeatureDictionary (-45)
/* complex XML schema type 'resqml2:RockVolumeFeatureDictionary': */
class SOAP_CMAC resqml2__RockVolumeFeatureDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:RockVolumeFeature' of XML schema type 'resqml2:RockVolumeFeature'
        std::vector<resqml2__RockVolumeFeature *> RockVolumeFeature;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeatureDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeatureDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RockVolumeFeatureDictionary, default initialized and not managed by a soap context
        virtual resqml2__RockVolumeFeatureDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RockVolumeFeatureDictionary); }
      public:
        /// Constructor with default initializations
        resqml2__RockVolumeFeatureDictionary() : RockVolumeFeature() { }
        virtual ~resqml2__RockVolumeFeatureDictionary() { }
        /// Friend allocator used by soap_new_resqml2__RockVolumeFeatureDictionary(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RockVolumeFeatureDictionary * SOAP_FMAC2 soap_instantiate_resqml2__RockVolumeFeatureDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:344 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeatureInterpretation (-47)
/* complex XML schema type 'resqml2:AbstractFeatureInterpretation': */
class SOAP_CMAC resqml2__AbstractFeatureInterpretation : public eml22__AbstractObject {
      public:
        /// Optional element 'resqml2:Domain' of XML schema type 'resqml2:Domain'
        enum resqml2__Domain *Domain;
        /// Optional element 'resqml2:HasOccurredDuring' of XML schema type 'resqml2:AbstractTimeInterval'
        resqml2__AbstractTimeInterval *HasOccurredDuring;
        /// Required element 'resqml2:InterpretedFeature' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *InterpretedFeature;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeatureInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeatureInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractFeatureInterpretation, default initialized and not managed by a soap context
        virtual resqml2__AbstractFeatureInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractFeatureInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractFeatureInterpretation() : Domain(), HasOccurredDuring(), InterpretedFeature() { }
        virtual ~resqml2__AbstractFeatureInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractFeatureInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractFeatureInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractFeatureInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:352 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BinaryContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BinaryContactInterpretationPart (-51)
/* complex XML schema type 'resqml2:BinaryContactInterpretationPart': */
class SOAP_CMAC resqml2__BinaryContactInterpretationPart : public resqml2__AbstractContactInterpretationPart {
      public:
        /// Required element 'resqml2:DirectObject' of XML schema type 'resqml2:ContactElementReference'
        resqml2__ContactElementReference *DirectObject;
        /// Required element 'resqml2:Subject' of XML schema type 'resqml2:ContactElementReference'
        resqml2__ContactElementReference *Subject;
        /// Required element 'resqml2:Verb' of XML schema type 'resqml2:ContactVerb'
        enum resqml2__ContactVerb Verb;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BinaryContactInterpretationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BinaryContactInterpretationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BinaryContactInterpretationPart, default initialized and not managed by a soap context
        virtual resqml2__BinaryContactInterpretationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BinaryContactInterpretationPart); }
      public:
        /// Constructor with default initializations
        resqml2__BinaryContactInterpretationPart() : DirectObject(), Subject(), Verb() { }
        virtual ~resqml2__BinaryContactInterpretationPart() { }
        /// Friend allocator used by soap_new_resqml2__BinaryContactInterpretationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BinaryContactInterpretationPart * SOAP_FMAC2 soap_instantiate_resqml2__BinaryContactInterpretationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:358 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactElementReference
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactElementReference (-54)
/* complex XML schema type 'resqml2:ContactElementReference': */
class SOAP_CMAC resqml2__ContactElementReference : public eml22__DataObjectReference {
      public:
        /// Optional element 'resqml2:Qualifier' of XML schema type 'resqml2:ContactSide'
        enum resqml2__ContactSide *Qualifier;
        /// Optional element 'resqml2:SecondaryQualifier' of XML schema type 'resqml2:ContactMode'
        enum resqml2__ContactMode *SecondaryQualifier;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContactElementReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContactElementReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContactElementReference, default initialized and not managed by a soap context
        virtual resqml2__ContactElementReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContactElementReference); }
      public:
        /// Constructor with default initializations
        resqml2__ContactElementReference() : Qualifier(), SecondaryQualifier() { }
        virtual ~resqml2__ContactElementReference() { }
        /// Friend allocator used by soap_new_resqml2__ContactElementReference(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContactElementReference * SOAP_FMAC2 soap_instantiate_resqml2__ContactElementReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:366 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FeatureInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FeatureInterpretationSet (-58)
/* complex XML schema type 'resqml2:FeatureInterpretationSet': */
class SOAP_CMAC resqml2__FeatureInterpretationSet : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:IsHomogeneous' of XML schema type 'xsd:boolean'
        bool IsHomogeneous;
        /// Required element 'resqml2:FeatureInterpretation' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> FeatureInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__FeatureInterpretationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__FeatureInterpretationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__FeatureInterpretationSet, default initialized and not managed by a soap context
        virtual resqml2__FeatureInterpretationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__FeatureInterpretationSet); }
      public:
        /// Constructor with default initializations
        resqml2__FeatureInterpretationSet() : IsHomogeneous(), FeatureInterpretation() { }
        virtual ~resqml2__FeatureInterpretationSet() { }
        /// Friend allocator used by soap_new_resqml2__FeatureInterpretationSet(struct soap*, int)
        friend SOAP_FMAC1 resqml2__FeatureInterpretationSet * SOAP_FMAC2 soap_instantiate_resqml2__FeatureInterpretationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:372 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeneticBoundaryBasedTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeneticBoundaryBasedTimeInterval (-61)
/* complex XML schema type 'resqml2:GeneticBoundaryBasedTimeInterval': */
class SOAP_CMAC resqml2__GeneticBoundaryBasedTimeInterval : public resqml2__AbstractTimeInterval {
      public:
        /// Required element 'resqml2:ChronoBottom' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ChronoBottom;
        /// Required element 'resqml2:ChronoTop' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ChronoTop;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GeneticBoundaryBasedTimeInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GeneticBoundaryBasedTimeInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GeneticBoundaryBasedTimeInterval, default initialized and not managed by a soap context
        virtual resqml2__GeneticBoundaryBasedTimeInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GeneticBoundaryBasedTimeInterval); }
      public:
        /// Constructor with default initializations
        resqml2__GeneticBoundaryBasedTimeInterval() : ChronoBottom(), ChronoTop() { }
        virtual ~resqml2__GeneticBoundaryBasedTimeInterval() { }
        /// Friend allocator used by soap_new_resqml2__GeneticBoundaryBasedTimeInterval(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GeneticBoundaryBasedTimeInterval * SOAP_FMAC2 soap_instantiate_resqml2__GeneticBoundaryBasedTimeInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:378 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicTimeBasedTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicTimeBasedTimeInterval (-64)
/* complex XML schema type 'resqml2:GeologicTimeBasedTimeInterval': */
class SOAP_CMAC resqml2__GeologicTimeBasedTimeInterval : public resqml2__AbstractTimeInterval {
      public:
        /// Required element 'resqml2:Start' of XML schema type 'eml22:GeologicTime'
        eml22__GeologicTime *Start;
        /// Required element 'resqml2:End' of XML schema type 'eml22:GeologicTime'
        eml22__GeologicTime *End;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicTimeBasedTimeInterval
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicTimeBasedTimeInterval; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GeologicTimeBasedTimeInterval, default initialized and not managed by a soap context
        virtual resqml2__GeologicTimeBasedTimeInterval *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GeologicTimeBasedTimeInterval); }
      public:
        /// Constructor with default initializations
        resqml2__GeologicTimeBasedTimeInterval() : Start(), End() { }
        virtual ~resqml2__GeologicTimeBasedTimeInterval() { }
        /// Friend allocator used by soap_new_resqml2__GeologicTimeBasedTimeInterval(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GeologicTimeBasedTimeInterval * SOAP_FMAC2 soap_instantiate_resqml2__GeologicTimeBasedTimeInterval(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:384 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MultipleContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MultipleContactInterpretationPart (-67)
/* complex XML schema type 'resqml2:MultipleContactInterpretationPart': */
class SOAP_CMAC resqml2__MultipleContactInterpretationPart : public resqml2__AbstractContactInterpretationPart {
      public:
        /// Required element 'resqml2:With' of XML schema type 'eml22:NonNegativeLong'
        std::vector<LONG64> With;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__MultipleContactInterpretationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__MultipleContactInterpretationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__MultipleContactInterpretationPart, default initialized and not managed by a soap context
        virtual resqml2__MultipleContactInterpretationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__MultipleContactInterpretationPart); }
      public:
        /// Constructor with default initializations
        resqml2__MultipleContactInterpretationPart() : With() { }
        virtual ~resqml2__MultipleContactInterpretationPart() { }
        /// Friend allocator used by soap_new_resqml2__MultipleContactInterpretationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml2__MultipleContactInterpretationPart * SOAP_FMAC2 soap_instantiate_resqml2__MultipleContactInterpretationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:390 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumn
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumn (-70)
/* complex XML schema type 'resqml2:StratigraphicColumn': */
class SOAP_CMAC resqml2__StratigraphicColumn : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:Ranks' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Ranks;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumn
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumn; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StratigraphicColumn, default initialized and not managed by a soap context
        virtual resqml2__StratigraphicColumn *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StratigraphicColumn); }
      public:
        /// Constructor with default initializations
        resqml2__StratigraphicColumn() : Ranks() { }
        virtual ~resqml2__StratigraphicColumn() { }
        /// Friend allocator used by soap_new_resqml2__StratigraphicColumn(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StratigraphicColumn * SOAP_FMAC2 soap_instantiate_resqml2__StratigraphicColumn(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:396 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitDictionary
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitDictionary (-73)
/* complex XML schema type 'resqml2:StratigraphicUnitDictionary': */
class SOAP_CMAC resqml2__StratigraphicUnitDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:StratigraphicUnitInterpretation' of XML schema type 'resqml2:StratigraphicUnitInterpretation'
        std::vector<resqml2__StratigraphicUnitInterpretation *> StratigraphicUnitInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StratigraphicUnitDictionary, default initialized and not managed by a soap context
        virtual resqml2__StratigraphicUnitDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StratigraphicUnitDictionary); }
      public:
        /// Constructor with default initializations
        resqml2__StratigraphicUnitDictionary() : StratigraphicUnitInterpretation() { }
        virtual ~resqml2__StratigraphicUnitDictionary() { }
        /// Friend allocator used by soap_new_resqml2__StratigraphicUnitDictionary(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StratigraphicUnitDictionary * SOAP_FMAC2 soap_instantiate_resqml2__StratigraphicUnitDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:408 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MdDatum
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MdDatum (-79)
/* complex XML schema type 'resqml2:MdDatum': */
class SOAP_CMAC resqml2__MdDatum : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:Location' of XML schema type 'resqml2:SinglePointGeometry'
        resqml2__SinglePointGeometry *Location;
        /// Required element 'resqml2:MdReference' of XML schema type 'eml22:WellboreDatumReference'
        enum eml22__WellboreDatumReference MdReference;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__MdDatum
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__MdDatum; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__MdDatum, default initialized and not managed by a soap context
        virtual resqml2__MdDatum *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__MdDatum); }
      public:
        /// Constructor with default initializations
        resqml2__MdDatum() : Location(), MdReference() { }
        virtual ~resqml2__MdDatum() { }
        /// Friend allocator used by soap_new_resqml2__MdDatum(struct soap*, int)
        friend SOAP_FMAC1 resqml2__MdDatum * SOAP_FMAC2 soap_instantiate_resqml2__MdDatum(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:422 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarker (-86)
/* complex XML schema type 'resqml2:WellboreMarker': */
class SOAP_CMAC resqml2__WellboreMarker : public eml22__AbstractObject {
      public:
        /// Optional element 'resqml2:FluidContact' of XML schema type 'resqml2:FluidContact'
        enum resqml2__FluidContact *FluidContact;
        /// Optional element 'resqml2:FluidMarker' of XML schema type 'resqml2:FluidMarker'
        enum resqml2__FluidMarker *FluidMarker;
        /// Optional element 'resqml2:GeologicBoundaryKind' of XML schema type 'resqml2:GeologicBoundaryKind'
        enum resqml2__GeologicBoundaryKind *GeologicBoundaryKind;
        /// Optional element 'resqml2:WitsmlFormationMarker' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WitsmlFormationMarker;
        /// Optional element 'resqml2:Interpretation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Interpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarker
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarker; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreMarker, default initialized and not managed by a soap context
        virtual resqml2__WellboreMarker *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreMarker); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreMarker() : FluidContact(), FluidMarker(), GeologicBoundaryKind(), WitsmlFormationMarker(), Interpretation() { }
        virtual ~resqml2__WellboreMarker() { }
        /// Friend allocator used by soap_new_resqml2__WellboreMarker(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreMarker * SOAP_FMAC2 soap_instantiate_resqml2__WellboreMarker(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:442 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactRepresentationReference
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactRepresentationReference (-96)
/* complex XML schema type 'resqml2:ContactRepresentationReference': */
class SOAP_CMAC resqml2__ContactRepresentationReference : public resqml2__AbstractContactRepresentationPart {
      public:
        /// Required element 'resqml2:Representation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Representation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContactRepresentationReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContactRepresentationReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContactRepresentationReference, default initialized and not managed by a soap context
        virtual resqml2__ContactRepresentationReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContactRepresentationReference); }
      public:
        /// Constructor with default initializations
        resqml2__ContactRepresentationReference() : Representation() { }
        virtual ~resqml2__ContactRepresentationReference() { }
        /// Friend allocator used by soap_new_resqml2__ContactRepresentationReference(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContactRepresentationReference * SOAP_FMAC2 soap_instantiate_resqml2__ContactRepresentationReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:446 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dPatch (-98)
/* complex XML schema type 'resqml2:Grid2dPatch': */
class SOAP_CMAC resqml2__Grid2dPatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:FastestAxisCount' of XML schema type 'eml22:PositiveLong'
        LONG64 FastestAxisCount;
        /// Required element 'resqml2:SlowestAxisCount' of XML schema type 'eml22:PositiveLong'
        LONG64 SlowestAxisCount;
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:PointGeometry'
        resqml2__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Grid2dPatch, default initialized and not managed by a soap context
        virtual resqml2__Grid2dPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Grid2dPatch); }
      public:
        /// Constructor with default initializations
        resqml2__Grid2dPatch() : FastestAxisCount(), SlowestAxisCount(), Geometry() { }
        virtual ~resqml2__Grid2dPatch() { }
        /// Friend allocator used by soap_new_resqml2__Grid2dPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Grid2dPatch * SOAP_FMAC2 soap_instantiate_resqml2__Grid2dPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:454 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedContactRepresentationPart (-102)
/* complex XML schema type 'resqml2:NonSealedContactRepresentationPart': */
class SOAP_CMAC resqml2__NonSealedContactRepresentationPart : public resqml2__AbstractContactRepresentationPart {
      public:
        /// Optional element 'resqml2:Contact' of XML schema type 'resqml2:ContactPatch'
        std::vector<resqml2__ContactPatch *> Contact;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:AbstractGeometry'
        resqml2__AbstractGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedContactRepresentationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedContactRepresentationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__NonSealedContactRepresentationPart, default initialized and not managed by a soap context
        virtual resqml2__NonSealedContactRepresentationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__NonSealedContactRepresentationPart); }
      public:
        /// Constructor with default initializations
        resqml2__NonSealedContactRepresentationPart() : Contact(), Geometry() { }
        virtual ~resqml2__NonSealedContactRepresentationPart() { }
        /// Friend allocator used by soap_new_resqml2__NonSealedContactRepresentationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml2__NonSealedContactRepresentationPart * SOAP_FMAC2 soap_instantiate_resqml2__NonSealedContactRepresentationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:468 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SealedContactRepresentationPart (-109)
/* complex XML schema type 'resqml2:SealedContactRepresentationPart': */
class SOAP_CMAC resqml2__SealedContactRepresentationPart : public resqml2__AbstractContactRepresentationPart {
      public:
        /// Optional element 'resqml2:IdenticalNodeIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *IdenticalNodeIndices;
        /// Required element 'resqml2:IdentityKind' of XML schema type 'resqml2:IdentityKind'
        enum resqml2__IdentityKind IdentityKind;
        /// Required element 'resqml2:Contact' of XML schema type 'resqml2:ContactPatch'
        std::vector<resqml2__ContactPatch *> Contact;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SealedContactRepresentationPart
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SealedContactRepresentationPart; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SealedContactRepresentationPart, default initialized and not managed by a soap context
        virtual resqml2__SealedContactRepresentationPart *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SealedContactRepresentationPart); }
      public:
        /// Constructor with default initializations
        resqml2__SealedContactRepresentationPart() : IdenticalNodeIndices(), IdentityKind(), Contact() { }
        virtual ~resqml2__SealedContactRepresentationPart() { }
        /// Friend allocator used by soap_new_resqml2__SealedContactRepresentationPart(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SealedContactRepresentationPart * SOAP_FMAC2 soap_instantiate_resqml2__SealedContactRepresentationPart(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:486 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineGeometry (-118)
/* complex XML schema type 'resqml2:AbstractParametricLineGeometry': */
class SOAP_CMAC resqml2__AbstractParametricLineGeometry : public resqml2__AbstractGeometry {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractParametricLineGeometry, default initialized and not managed by a soap context
        virtual resqml2__AbstractParametricLineGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractParametricLineGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractParametricLineGeometry() { }
        virtual ~resqml2__AbstractParametricLineGeometry() { }
        /// Friend allocator used by soap_new_resqml2__AbstractParametricLineGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractParametricLineGeometry * SOAP_FMAC2 soap_instantiate_resqml2__AbstractParametricLineGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:488 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPlaneGeometry (-119)
/* complex XML schema type 'resqml2:AbstractPlaneGeometry': */
class SOAP_CMAC resqml2__AbstractPlaneGeometry : public resqml2__AbstractGeometry {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPlaneGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPlaneGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractPlaneGeometry, default initialized and not managed by a soap context
        virtual resqml2__AbstractPlaneGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractPlaneGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractPlaneGeometry() { }
        virtual ~resqml2__AbstractPlaneGeometry() { }
        /// Friend allocator used by soap_new_resqml2__AbstractPlaneGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractPlaneGeometry * SOAP_FMAC2 soap_instantiate_resqml2__AbstractPlaneGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:494 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineArray (-122)
/* complex XML schema type 'resqml2:ParametricLineArray': */
class SOAP_CMAC resqml2__ParametricLineArray : public resqml2__AbstractParametricLineArray {
      public:
        /// Optional element 'resqml2:ControlPointParameters' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *ControlPointParameters;
        /// Required element 'resqml2:ControlPoints' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *ControlPoints;
        /// Required element 'resqml2:KnotCount' of XML schema type 'eml22:PositiveLong'
        LONG64 KnotCount;
        /// Required element 'resqml2:LineKindIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *LineKindIndices;
        /// Optional element 'resqml2:TangentVectors' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *TangentVectors;
        /// Optional element 'resqml2:ParametricLineIntersections' of XML schema type 'resqml2:ParametricLineIntersections'
        resqml2__ParametricLineIntersections *ParametricLineIntersections;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ParametricLineArray, default initialized and not managed by a soap context
        virtual resqml2__ParametricLineArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ParametricLineArray); }
      public:
        /// Constructor with default initializations
        resqml2__ParametricLineArray() : ControlPointParameters(), ControlPoints(), KnotCount(), LineKindIndices(), TangentVectors(), ParametricLineIntersections() { }
        virtual ~resqml2__ParametricLineArray() { }
        /// Friend allocator used by soap_new_resqml2__ParametricLineArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ParametricLineArray * SOAP_FMAC2 soap_instantiate_resqml2__ParametricLineArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:498 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationLatticeArray (-124)
/* complex XML schema type 'resqml2:ParametricLineFromRepresentationLatticeArray': */
class SOAP_CMAC resqml2__ParametricLineFromRepresentationLatticeArray : public resqml2__AbstractParametricLineArray {
      public:
        /// Required element 'resqml2:LineIndicesOnSupportingRepresentation' of XML schema type 'eml22:IntegerLatticeArray'
        eml22__IntegerLatticeArray *LineIndicesOnSupportingRepresentation;
        /// Required element 'resqml2:SupportingRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ParametricLineFromRepresentationLatticeArray, default initialized and not managed by a soap context
        virtual resqml2__ParametricLineFromRepresentationLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ParametricLineFromRepresentationLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml2__ParametricLineFromRepresentationLatticeArray() : LineIndicesOnSupportingRepresentation(), SupportingRepresentation() { }
        virtual ~resqml2__ParametricLineFromRepresentationLatticeArray() { }
        /// Friend allocator used by soap_new_resqml2__ParametricLineFromRepresentationLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ParametricLineFromRepresentationLatticeArray * SOAP_FMAC2 soap_instantiate_resqml2__ParametricLineFromRepresentationLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:504 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point2dExternalArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point2dExternalArray (-127)
/* Type resqml2__Point2dExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:Point2dExternalArray': */
class SOAP_CMAC resqml2__Point2dExternalArray : public resqml2__AbstractPoint3dArray {
      public:
        /// Required element 'resqml2:Coordinates' of XML schema type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Coordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point2dExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point2dExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point2dExternalArray, default initialized and not managed by a soap context
        virtual resqml2__Point2dExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point2dExternalArray); }
      public:
        /// Constructor with default initializations
        resqml2__Point2dExternalArray() : Coordinates() { }
        virtual ~resqml2__Point2dExternalArray() { }
        /// Friend allocator used by soap_new_resqml2__Point2dExternalArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point2dExternalArray * SOAP_FMAC2 soap_instantiate_resqml2__Point2dExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:508 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dExternalArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dExternalArray (-129)
/* Type resqml2__Point3dExternalArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:Point3dExternalArray': */
class SOAP_CMAC resqml2__Point3dExternalArray : public resqml2__AbstractPoint3dArray {
      public:
        /// Required element 'resqml2:Coordinates' of XML schema type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Coordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3dExternalArray, default initialized and not managed by a soap context
        virtual resqml2__Point3dExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3dExternalArray); }
      public:
        /// Constructor with default initializations
        resqml2__Point3dExternalArray() : Coordinates() { }
        virtual ~resqml2__Point3dExternalArray() { }
        /// Friend allocator used by soap_new_resqml2__Point3dExternalArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3dExternalArray * SOAP_FMAC2 soap_instantiate_resqml2__Point3dExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:510 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dFromRepresentationLatticeArray (-130)
/* Type resqml2__Point3dFromRepresentationLatticeArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:Point3dFromRepresentationLatticeArray': */
class SOAP_CMAC resqml2__Point3dFromRepresentationLatticeArray : public resqml2__AbstractPoint3dArray {
      public:
        /// Required element 'resqml2:NodeIndicesOnSupportingRepresentation' of XML schema type 'eml22:IntegerLatticeArray'
        eml22__IntegerLatticeArray *NodeIndicesOnSupportingRepresentation;
        /// Required element 'resqml2:SupportingRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dFromRepresentationLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dFromRepresentationLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3dFromRepresentationLatticeArray, default initialized and not managed by a soap context
        virtual resqml2__Point3dFromRepresentationLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3dFromRepresentationLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml2__Point3dFromRepresentationLatticeArray() : NodeIndicesOnSupportingRepresentation(), SupportingRepresentation() { }
        virtual ~resqml2__Point3dFromRepresentationLatticeArray() { }
        /// Friend allocator used by soap_new_resqml2__Point3dFromRepresentationLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3dFromRepresentationLatticeArray * SOAP_FMAC2 soap_instantiate_resqml2__Point3dFromRepresentationLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:512 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dLatticeArray (-131)
/* Type resqml2__Point3dLatticeArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:Point3dLatticeArray': */
class SOAP_CMAC resqml2__Point3dLatticeArray : public resqml2__AbstractPoint3dArray {
      public:
        /// Optional element 'resqml2:AllDimensionsAreOrthogonal' of XML schema type 'xsd:boolean'
        bool *AllDimensionsAreOrthogonal;
        /// Required element 'resqml2:Origin' of XML schema type 'resqml2:Point3d'
        resqml2__Point3d *Origin;
        /// Required element 'resqml2:Offset' of XML schema type 'resqml2:Point3dOffset'
        std::vector<resqml2__Point3dOffset *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3dLatticeArray, default initialized and not managed by a soap context
        virtual resqml2__Point3dLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3dLatticeArray); }
      public:
        /// Constructor with default initializations
        resqml2__Point3dLatticeArray() : AllDimensionsAreOrthogonal(), Origin(), Offset() { }
        virtual ~resqml2__Point3dLatticeArray() { }
        /// Friend allocator used by soap_new_resqml2__Point3dLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3dLatticeArray * SOAP_FMAC2 soap_instantiate_resqml2__Point3dLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:516 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dParametricArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dParametricArray (-133)
/* Type resqml2__Point3dParametricArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:Point3dParametricArray': */
class SOAP_CMAC resqml2__Point3dParametricArray : public resqml2__AbstractPoint3dArray {
      public:
        /// Required element 'resqml2:Parameters' of XML schema type 'eml22:AbstractValueArray'
        eml22__AbstractValueArray *Parameters;
        /// Optional element 'resqml2:ParametricLineIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParametricLineIndices;
        /// Optional element 'resqml2:TruncatedLineIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *TruncatedLineIndices;
        /// Required element 'resqml2:ParametricLines' of XML schema type 'resqml2:AbstractParametricLineArray'
        resqml2__AbstractParametricLineArray *ParametricLines;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dParametricArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dParametricArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3dParametricArray, default initialized and not managed by a soap context
        virtual resqml2__Point3dParametricArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3dParametricArray); }
      public:
        /// Constructor with default initializations
        resqml2__Point3dParametricArray() : Parameters(), ParametricLineIndices(), TruncatedLineIndices(), ParametricLines() { }
        virtual ~resqml2__Point3dParametricArray() { }
        /// Friend allocator used by soap_new_resqml2__Point3dParametricArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3dParametricArray * SOAP_FMAC2 soap_instantiate_resqml2__Point3dParametricArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:518 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dZValueArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dZValueArray (-134)
/* Type resqml2__Point3dZValueArray is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XML schema type 'resqml2:Point3dZValueArray': */
class SOAP_CMAC resqml2__Point3dZValueArray : public resqml2__AbstractPoint3dArray {
      public:
        /// Required element 'resqml2:SupportingGeometry' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *SupportingGeometry;
        /// Required element 'resqml2:ZValues' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *ZValues;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dZValueArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dZValueArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Point3dZValueArray, default initialized and not managed by a soap context
        virtual resqml2__Point3dZValueArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Point3dZValueArray); }
      public:
        /// Constructor with default initializations
        resqml2__Point3dZValueArray() : SupportingGeometry(), ZValues() { }
        virtual ~resqml2__Point3dZValueArray() { }
        /// Friend allocator used by soap_new_resqml2__Point3dZValueArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Point3dZValueArray * SOAP_FMAC2 soap_instantiate_resqml2__Point3dZValueArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:520 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PointGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PointGeometry (-135)
/* complex XML schema type 'resqml2:PointGeometry': */
class SOAP_CMAC resqml2__PointGeometry : public resqml2__AbstractGeometry {
      public:
        /// Required element 'resqml2:Points' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *Points;
        /// Optional element 'resqml2:SeismicCoordinates' of XML schema type 'resqml2:AbstractSeismicCoordinates'
        resqml2__AbstractSeismicCoordinates *SeismicCoordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PointGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PointGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PointGeometry, default initialized and not managed by a soap context
        virtual resqml2__PointGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PointGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__PointGeometry() : Points(), SeismicCoordinates() { }
        virtual ~resqml2__PointGeometry() { }
        /// Friend allocator used by soap_new_resqml2__PointGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PointGeometry * SOAP_FMAC2 soap_instantiate_resqml2__PointGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:522 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SinglePointGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SinglePointGeometry (-136)
/* complex XML schema type 'resqml2:SinglePointGeometry': */
class SOAP_CMAC resqml2__SinglePointGeometry : public resqml2__AbstractGeometry {
      public:
        /// Required element 'resqml2:Point3d' of XML schema type 'resqml2:Point3d'
        resqml2__Point3d *Point3d;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SinglePointGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SinglePointGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SinglePointGeometry, default initialized and not managed by a soap context
        virtual resqml2__SinglePointGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SinglePointGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__SinglePointGeometry() : Point3d() { }
        virtual ~resqml2__SinglePointGeometry() { }
        /// Friend allocator used by soap_new_resqml2__SinglePointGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SinglePointGeometry * SOAP_FMAC2 soap_instantiate_resqml2__SinglePointGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:536 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dCoordinates
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dCoordinates (-143)
/* complex XML schema type 'resqml2:Seismic2dCoordinates': */
class SOAP_CMAC resqml2__Seismic2dCoordinates : public resqml2__AbstractSeismicCoordinates {
      public:
        /// Required element 'resqml2:LineAbscissa' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *LineAbscissa;
        /// Optional element 'resqml2:VerticalCoordinates' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *VerticalCoordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dCoordinates
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dCoordinates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Seismic2dCoordinates, default initialized and not managed by a soap context
        virtual resqml2__Seismic2dCoordinates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Seismic2dCoordinates); }
      public:
        /// Constructor with default initializations
        resqml2__Seismic2dCoordinates() : LineAbscissa(), VerticalCoordinates() { }
        virtual ~resqml2__Seismic2dCoordinates() { }
        /// Friend allocator used by soap_new_resqml2__Seismic2dCoordinates(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Seismic2dCoordinates * SOAP_FMAC2 soap_instantiate_resqml2__Seismic2dCoordinates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:540 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dCoordinates
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dCoordinates (-145)
/* complex XML schema type 'resqml2:Seismic3dCoordinates': */
class SOAP_CMAC resqml2__Seismic3dCoordinates : public resqml2__AbstractSeismicCoordinates {
      public:
        /// Required element 'resqml2:CrosslineCoordinates' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *CrosslineCoordinates;
        /// Required element 'resqml2:InlineCoordinates' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *InlineCoordinates;
        /// Optional element 'resqml2:VerticalCoordinates' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *VerticalCoordinates;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dCoordinates
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dCoordinates; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Seismic3dCoordinates, default initialized and not managed by a soap context
        virtual resqml2__Seismic3dCoordinates *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Seismic3dCoordinates); }
      public:
        /// Constructor with default initializations
        resqml2__Seismic3dCoordinates() : CrosslineCoordinates(), InlineCoordinates(), VerticalCoordinates() { }
        virtual ~resqml2__Seismic3dCoordinates() { }
        /// Friend allocator used by soap_new_resqml2__Seismic3dCoordinates(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Seismic3dCoordinates * SOAP_FMAC2 soap_instantiate_resqml2__Seismic3dCoordinates(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:576 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellParentWindow (-163)
/* complex XML schema type 'resqml2:CellParentWindow': */
class SOAP_CMAC resqml2__CellParentWindow : public resqml2__AbstractParentWindow {
      public:
        /// Required element 'resqml2:CellIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CellIndices;
        /// Required element 'resqml2:ParentGridRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ParentGridRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CellParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CellParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CellParentWindow, default initialized and not managed by a soap context
        virtual resqml2__CellParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CellParentWindow); }
      public:
        /// Constructor with default initializations
        resqml2__CellParentWindow() : CellIndices(), ParentGridRepresentation() { }
        virtual ~resqml2__CellParentWindow() { }
        /// Friend allocator used by soap_new_resqml2__CellParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CellParentWindow * SOAP_FMAC2 soap_instantiate_resqml2__CellParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:580 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerParentWindow (-165)
/* complex XML schema type 'resqml2:ColumnLayerParentWindow': */
class SOAP_CMAC resqml2__ColumnLayerParentWindow : public resqml2__AbstractParentWindow {
      public:
        /// Required element 'resqml2:ColumnIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ColumnIndices;
        /// Optional element 'resqml2:OmitParentCells' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *OmitParentCells;
        /// Required element 'resqml2:KRegrid' of XML schema type 'resqml2:Regrid'
        resqml2__Regrid *KRegrid;
        /// Required element 'resqml2:ParentColumnLayerGridRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ParentColumnLayerGridRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColumnLayerParentWindow, default initialized and not managed by a soap context
        virtual resqml2__ColumnLayerParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColumnLayerParentWindow); }
      public:
        /// Constructor with default initializations
        resqml2__ColumnLayerParentWindow() : ColumnIndices(), OmitParentCells(), KRegrid(), ParentColumnLayerGridRepresentation() { }
        virtual ~resqml2__ColumnLayerParentWindow() { }
        /// Friend allocator used by soap_new_resqml2__ColumnLayerParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColumnLayerParentWindow * SOAP_FMAC2 soap_instantiate_resqml2__ColumnLayerParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:584 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSubnodeTopology (-167)
/* complex XML schema type 'resqml2:ColumnLayerSubnodeTopology': */
class SOAP_CMAC resqml2__ColumnLayerSubnodeTopology : public resqml2__SubnodeTopology {
      public:
        /// Optional element 'resqml2:ColumnSubnodePatch' of XML schema type 'resqml2:ColumnSubnodePatch'
        std::vector<resqml2__ColumnSubnodePatch *> ColumnSubnodePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSubnodeTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSubnodeTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColumnLayerSubnodeTopology, default initialized and not managed by a soap context
        virtual resqml2__ColumnLayerSubnodeTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColumnLayerSubnodeTopology); }
      public:
        /// Constructor with default initializations
        resqml2__ColumnLayerSubnodeTopology() : ColumnSubnodePatch() { }
        virtual ~resqml2__ColumnLayerSubnodeTopology() { }
        /// Friend allocator used by soap_new_resqml2__ColumnLayerSubnodeTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColumnLayerSubnodeTopology * SOAP_FMAC2 soap_instantiate_resqml2__ColumnLayerSubnodeTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:598 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGpGridPatch (-174)
/* complex XML schema type 'resqml2:IjkGpGridPatch': */
class SOAP_CMAC resqml2__IjkGpGridPatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:Ni' of XML schema type 'eml22:NonNegativeLong'
        LONG64 Ni;
        /// Required element 'resqml2:Nj' of XML schema type 'eml22:NonNegativeLong'
        LONG64 Nj;
        /// Optional element 'resqml2:RadialGridIsComplete' of XML schema type 'xsd:boolean'
        bool *RadialGridIsComplete;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:IjkGridGeometry'
        resqml2__IjkGridGeometry *Geometry;
        /// Optional element 'resqml2:TruncationCellPatch' of XML schema type 'resqml2:TruncationCellPatch'
        resqml2__TruncationCellPatch *TruncationCellPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGpGridPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGpGridPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IjkGpGridPatch, default initialized and not managed by a soap context
        virtual resqml2__IjkGpGridPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IjkGpGridPatch); }
      public:
        /// Constructor with default initializations
        resqml2__IjkGpGridPatch() : Ni(), Nj(), RadialGridIsComplete(), Geometry(), TruncationCellPatch() { }
        virtual ~resqml2__IjkGpGridPatch() { }
        /// Friend allocator used by soap_new_resqml2__IjkGpGridPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IjkGpGridPatch * SOAP_FMAC2 soap_instantiate_resqml2__IjkGpGridPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:604 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkParentWindow (-177)
/* complex XML schema type 'resqml2:IjkParentWindow': */
class SOAP_CMAC resqml2__IjkParentWindow : public resqml2__AbstractParentWindow {
      public:
        /// Optional element 'resqml2:OmitParentCells' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *OmitParentCells;
        /// Required element 'resqml2:JRegrid' of XML schema type 'resqml2:Regrid'
        resqml2__Regrid *JRegrid;
        /// Required element 'resqml2:KRegrid' of XML schema type 'resqml2:Regrid'
        resqml2__Regrid *KRegrid;
        /// Required element 'resqml2:IRegrid' of XML schema type 'resqml2:Regrid'
        resqml2__Regrid *IRegrid;
        /// Required element 'resqml2:ParentIjkGridRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ParentIjkGridRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IjkParentWindow
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IjkParentWindow; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IjkParentWindow, default initialized and not managed by a soap context
        virtual resqml2__IjkParentWindow *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IjkParentWindow); }
      public:
        /// Constructor with default initializations
        resqml2__IjkParentWindow() : OmitParentCells(), JRegrid(), KRegrid(), IRegrid(), ParentIjkGridRepresentation() { }
        virtual ~resqml2__IjkParentWindow() { }
        /// Friend allocator used by soap_new_resqml2__IjkParentWindow(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IjkParentWindow * SOAP_FMAC2 soap_instantiate_resqml2__IjkParentWindow(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:614 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LocalGridSet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LocalGridSet (-182)
/* complex XML schema type 'resqml2:LocalGridSet': */
class SOAP_CMAC resqml2__LocalGridSet : public eml22__AbstractObject {
      public:
        /// Optional element 'resqml2:Activation' of XML schema type 'resqml2:Activation'
        resqml2__Activation *Activation;
        /// Required element 'resqml2:ChildGrid' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> ChildGrid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__LocalGridSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__LocalGridSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__LocalGridSet, default initialized and not managed by a soap context
        virtual resqml2__LocalGridSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__LocalGridSet); }
      public:
        /// Constructor with default initializations
        resqml2__LocalGridSet() : Activation(), ChildGrid() { }
        virtual ~resqml2__LocalGridSet() { }
        /// Friend allocator used by soap_new_resqml2__LocalGridSet(struct soap*, int)
        friend SOAP_FMAC1 resqml2__LocalGridSet * SOAP_FMAC2 soap_instantiate_resqml2__LocalGridSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:626 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitNodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitNodePatch (-188)
/* complex XML schema type 'resqml2:SplitNodePatch': */
class SOAP_CMAC resqml2__SplitNodePatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:ParentNodeIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParentNodeIndices;
        /// Required element 'resqml2:CellsPerSplitNode' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *CellsPerSplitNode;
        /// Optional element 'resqml2:SplitFaces' of XML schema type 'resqml2:SplitFaces'
        resqml2__SplitFaces *SplitFaces;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SplitNodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SplitNodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SplitNodePatch, default initialized and not managed by a soap context
        virtual resqml2__SplitNodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SplitNodePatch); }
      public:
        /// Constructor with default initializations
        resqml2__SplitNodePatch() : Count(), ParentNodeIndices(), CellsPerSplitNode(), SplitFaces() { }
        virtual ~resqml2__SplitNodePatch() { }
        /// Friend allocator used by soap_new_resqml2__SplitNodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SplitNodePatch * SOAP_FMAC2 soap_instantiate_resqml2__SplitNodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:628 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodePatch (-189)
/* complex XML schema type 'resqml2:SubnodePatch': */
class SOAP_CMAC resqml2__SubnodePatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:SubnodeNodeObject' of XML schema type 'resqml2:SubnodeNodeObject'
        enum resqml2__SubnodeNodeObject SubnodeNodeObject;
        /// Required element 'resqml2:NodeWeightsPerSubnode' of XML schema type 'eml22:AbstractValueArray'
        eml22__AbstractValueArray *NodeWeightsPerSubnode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SubnodePatch, default initialized and not managed by a soap context
        virtual resqml2__SubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml2__SubnodePatch() : SubnodeNodeObject(), NodeWeightsPerSubnode() { }
        virtual ~resqml2__SubnodePatch() { }
        /// Friend allocator used by soap_new_resqml2__SubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SubnodePatch * SOAP_FMAC2 soap_instantiate_resqml2__SubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:636 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TruncationCellPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TruncationCellPatch (-193)
/* complex XML schema type 'resqml2:TruncationCellPatch': */
class SOAP_CMAC resqml2__TruncationCellPatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:LocalFacesPerCell' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *LocalFacesPerCell;
        /// Required element 'resqml2:NodesPerTruncationFace' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *NodesPerTruncationFace;
        /// Required element 'resqml2:ParentCellIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ParentCellIndices;
        /// Required element 'resqml2:TruncationCellCount' of XML schema type 'eml22:PositiveLong'
        LONG64 TruncationCellCount;
        /// Required element 'resqml2:TruncationCellFaceIsRightHanded' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *TruncationCellFaceIsRightHanded;
        /// Required element 'resqml2:TruncationFaceCount' of XML schema type 'eml22:PositiveLong'
        LONG64 TruncationFaceCount;
        /// Required element 'resqml2:TruncationFacesPerCell' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *TruncationFacesPerCell;
        /// Required element 'resqml2:TruncationNodeCount' of XML schema type 'eml22:PositiveLong'
        LONG64 TruncationNodeCount;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TruncationCellPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TruncationCellPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TruncationCellPatch, default initialized and not managed by a soap context
        virtual resqml2__TruncationCellPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TruncationCellPatch); }
      public:
        /// Constructor with default initializations
        resqml2__TruncationCellPatch() : LocalFacesPerCell(), NodesPerTruncationFace(), ParentCellIndices(), TruncationCellCount(), TruncationCellFaceIsRightHanded(), TruncationFaceCount(), TruncationFacesPerCell(), TruncationNodeCount() { }
        virtual ~resqml2__TruncationCellPatch() { }
        /// Friend allocator used by soap_new_resqml2__TruncationCellPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TruncationCellPatch * SOAP_FMAC2 soap_instantiate_resqml2__TruncationCellPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:642 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGpGridPatch (-196)
/* complex XML schema type 'resqml2:UnstructuredColumnLayerGpGridPatch': */
class SOAP_CMAC resqml2__UnstructuredColumnLayerGpGridPatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:UnstructuredColumnCount' of XML schema type 'eml22:NonNegativeLong'
        LONG64 UnstructuredColumnCount;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:UnstructuredColumnLayerGridGeometry'
        resqml2__UnstructuredColumnLayerGridGeometry *Geometry;
        /// Optional element 'resqml2:TruncationCellPatch' of XML schema type 'resqml2:TruncationCellPatch'
        resqml2__TruncationCellPatch *TruncationCellPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGpGridPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGpGridPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredColumnLayerGpGridPatch, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredColumnLayerGpGridPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredColumnLayerGpGridPatch); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredColumnLayerGpGridPatch() : UnstructuredColumnCount(), Geometry(), TruncationCellPatch() { }
        virtual ~resqml2__UnstructuredColumnLayerGpGridPatch() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredColumnLayerGpGridPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredColumnLayerGpGridPatch * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredColumnLayerGpGridPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:648 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGpGridPatch (-199)
/* complex XML schema type 'resqml2:UnstructuredGpGridPatch': */
class SOAP_CMAC resqml2__UnstructuredGpGridPatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:UnstructuredCellCount' of XML schema type 'eml22:NonNegativeLong'
        LONG64 UnstructuredCellCount;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:UnstructuredGridGeometry'
        resqml2__UnstructuredGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGpGridPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGpGridPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredGpGridPatch, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredGpGridPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredGpGridPatch); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredGpGridPatch() : UnstructuredCellCount(), Geometry() { }
        virtual ~resqml2__UnstructuredGpGridPatch() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredGpGridPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredGpGridPatch * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredGpGridPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:656 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredSubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredSubnodeTopology (-203)
/* complex XML schema type 'resqml2:UnstructuredSubnodeTopology': */
class SOAP_CMAC resqml2__UnstructuredSubnodeTopology : public resqml2__SubnodeTopology {
      public:
        /// Optional element 'resqml2:NodesPerCell' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *NodesPerCell;
        /// Optional element 'resqml2:Edges' of XML schema type 'resqml2:Edges'
        resqml2__Edges *Edges;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredSubnodeTopology
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredSubnodeTopology; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredSubnodeTopology, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredSubnodeTopology *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredSubnodeTopology); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredSubnodeTopology() : NodesPerCell(), Edges() { }
        virtual ~resqml2__UnstructuredSubnodeTopology() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredSubnodeTopology(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredSubnodeTopology * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredSubnodeTopology(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:660 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractRepresentation (-205)
/* complex XML schema type 'resqml2:AbstractRepresentation': */
class SOAP_CMAC resqml2__AbstractRepresentation : public eml22__AbstractObject {
      public:
        /// Optional element 'resqml2:RealizationId' of XML schema type 'eml22:String64'
        std::string *RealizationId;
        /// Optional element 'resqml2:RepresentedInterpretation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *RepresentedInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractRepresentation, default initialized and not managed by a soap context
        virtual resqml2__AbstractRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractRepresentation() : RealizationId(), RepresentedInterpretation() { }
        virtual ~resqml2__AbstractRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:668 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Patch1d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Patch1d (-209)
/* complex XML schema type 'resqml2:Patch1d': */
class SOAP_CMAC resqml2__Patch1d : public resqml2__Patch {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Patch1d
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Patch1d; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Patch1d, default initialized and not managed by a soap context
        virtual resqml2__Patch1d *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Patch1d); }
      public:
        /// Constructor with default initializations
        resqml2__Patch1d() : Count() { }
        virtual ~resqml2__Patch1d() { }
        /// Friend allocator used by soap_new_resqml2__Patch1d(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Patch1d * SOAP_FMAC2 soap_instantiate_resqml2__Patch1d(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:672 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetPatch (-211)
/* complex XML schema type 'resqml2:PolylineSetPatch': */
class SOAP_CMAC resqml2__PolylineSetPatch : public resqml2__Patch {
      public:
        /// Required element 'resqml2:NodeCount' of XML schema type 'eml22:PositiveLong'
        LONG64 NodeCount;
        /// Required element 'resqml2:IntervalCount' of XML schema type 'eml22:NonNegativeLong'
        LONG64 IntervalCount;
        /// Required element 'resqml2:NodeCountPerPolyline' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *NodeCountPerPolyline;
        /// Required element 'resqml2:ClosedPolylines' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *ClosedPolylines;
        /// Optional element 'resqml2:IntervalGridCells' of XML schema type 'resqml2:IntervalGridCells'
        resqml2__IntervalGridCells *IntervalGridCells;
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:PointGeometry'
        resqml2__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PolylineSetPatch, default initialized and not managed by a soap context
        virtual resqml2__PolylineSetPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PolylineSetPatch); }
      public:
        /// Constructor with default initializations
        resqml2__PolylineSetPatch() : NodeCount(), IntervalCount(), NodeCountPerPolyline(), ClosedPolylines(), IntervalGridCells(), Geometry() { }
        virtual ~resqml2__PolylineSetPatch() { }
        /// Friend allocator used by soap_new_resqml2__PolylineSetPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PolylineSetPatch * SOAP_FMAC2 soap_instantiate_resqml2__PolylineSetPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:680 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentitySet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentitySet (-215)
/* complex XML schema type 'resqml2:RepresentationIdentitySet': */
class SOAP_CMAC resqml2__RepresentationIdentitySet : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:RepresentationIdentity' of XML schema type 'resqml2:RepresentationIdentity'
        std::vector<resqml2__RepresentationIdentity *> RepresentationIdentity;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentitySet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentitySet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RepresentationIdentitySet, default initialized and not managed by a soap context
        virtual resqml2__RepresentationIdentitySet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RepresentationIdentitySet); }
      public:
        /// Constructor with default initializations
        resqml2__RepresentationIdentitySet() : RepresentationIdentity() { }
        virtual ~resqml2__RepresentationIdentitySet() { }
        /// Friend allocator used by soap_new_resqml2__RepresentationIdentitySet(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RepresentationIdentitySet * SOAP_FMAC2 soap_instantiate_resqml2__RepresentationIdentitySet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:688 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractProperty (-219)
/* complex XML schema type 'resqml2:AbstractProperty': */
class SOAP_CMAC resqml2__AbstractProperty : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:IndexableElement' of XML schema type 'resqml2:IndexableElement'
        enum resqml2__IndexableElement IndexableElement;
        /// Optional element 'resqml2:RealizationIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *RealizationIndices;
        /// Optional element 'resqml2:ValueCountPerIndexableElement' of XML schema type 'eml22:PositiveLong'
        LONG64 *ValueCountPerIndexableElement;
        /// Required element 'resqml2:PropertyKind' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *PropertyKind;
        /// Optional element 'resqml2:TimeIndices' of XML schema type 'eml22:TimeIndices'
        eml22__TimeIndices *TimeIndices;
        /// Optional element 'resqml2:LocalCrs' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *LocalCrs;
        /// Required element 'resqml2:SupportingRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractProperty, default initialized and not managed by a soap context
        virtual resqml2__AbstractProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractProperty); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractProperty() : IndexableElement(), RealizationIndices(), ValueCountPerIndexableElement(), PropertyKind(), TimeIndices(), LocalCrs(), SupportingRepresentation() { }
        virtual ~resqml2__AbstractProperty() { }
        /// Friend allocator used by soap_new_resqml2__AbstractProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractProperty * SOAP_FMAC2 soap_instantiate_resqml2__AbstractProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:690 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPropertyLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPropertyLookup (-220)
/* complex XML schema type 'resqml2:AbstractPropertyLookup': */
class SOAP_CMAC resqml2__AbstractPropertyLookup : public eml22__AbstractObject {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPropertyLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPropertyLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractPropertyLookup, default initialized and not managed by a soap context
        virtual resqml2__AbstractPropertyLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractPropertyLookup); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractPropertyLookup() { }
        virtual ~resqml2__AbstractPropertyLookup() { }
        /// Friend allocator used by soap_new_resqml2__AbstractPropertyLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractPropertyLookup * SOAP_FMAC2 soap_instantiate_resqml2__AbstractPropertyLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:718 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PropertySet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PropertySet (-234)
/* complex XML schema type 'resqml2:PropertySet': */
class SOAP_CMAC resqml2__PropertySet : public eml22__AbstractObject {
      public:
        /// Required element 'resqml2:TimeSetKind' of XML schema type 'resqml2:TimeSetKind'
        enum resqml2__TimeSetKind TimeSetKind;
        /// Required element 'resqml2:HasSinglePropertyKind' of XML schema type 'xsd:boolean'
        bool HasSinglePropertyKind;
        /// Required element 'resqml2:HasMultipleRealizations' of XML schema type 'xsd:boolean'
        bool HasMultipleRealizations;
        /// Optional element 'resqml2:ParentSet' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> ParentSet;
        /// Optional element 'resqml2:Properties' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Properties;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PropertySet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PropertySet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PropertySet, default initialized and not managed by a soap context
        virtual resqml2__PropertySet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PropertySet); }
      public:
        /// Constructor with default initializations
        resqml2__PropertySet() : TimeSetKind(), HasSinglePropertyKind(), HasMultipleRealizations(), ParentSet(), Properties() { }
        virtual ~resqml2__PropertySet() { }
        /// Friend allocator used by soap_new_resqml2__PropertySet(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PropertySet * SOAP_FMAC2 soap_instantiate_resqml2__PropertySet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:740 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray (-245)
/* complex XML schema type 'eml22:AbstractBooleanArray': */
class SOAP_CMAC eml22__AbstractBooleanArray : public eml22__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractBooleanArray, default initialized and not managed by a soap context
        virtual eml22__AbstractBooleanArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractBooleanArray); }
      public:
        /// Constructor with default initializations
        eml22__AbstractBooleanArray() { }
        virtual ~eml22__AbstractBooleanArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractBooleanArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractBooleanArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractBooleanArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:746 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray (-248)
/* complex XML schema type 'eml22:AbstractNumericArray': */
class SOAP_CMAC eml22__AbstractNumericArray : public eml22__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractNumericArray, default initialized and not managed by a soap context
        virtual eml22__AbstractNumericArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractNumericArray); }
      public:
        /// Constructor with default initializations
        eml22__AbstractNumericArray() { }
        virtual ~eml22__AbstractNumericArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractNumericArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractNumericArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractNumericArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:748 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray (-249)
/* complex XML schema type 'eml22:AbstractStringArray': */
class SOAP_CMAC eml22__AbstractStringArray : public eml22__AbstractValueArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractStringArray, default initialized and not managed by a soap context
        virtual eml22__AbstractStringArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractStringArray); }
      public:
        /// Constructor with default initializations
        eml22__AbstractStringArray() { }
        virtual ~eml22__AbstractStringArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractStringArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractStringArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractStringArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1532 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference (-641)
/* complex XML schema type 'eml22:EpcExternalPartReference': */
class SOAP_CMAC eml22__EpcExternalPartReference : public eml22__AbstractObject {
      public:
        /// Optional element 'eml22:Filename' of XML schema type 'eml22:String2000'
        std::string *Filename;
        /// Optional element 'eml22:MimeType' of XML schema type 'eml22:String2000'
        std::string *MimeType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EpcExternalPartReference, default initialized and not managed by a soap context
        virtual eml22__EpcExternalPartReference *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EpcExternalPartReference); }
      public:
        /// Constructor with default initializations
        eml22__EpcExternalPartReference() : Filename(), MimeType() { }
        virtual ~eml22__EpcExternalPartReference() { }
        /// Friend allocator used by soap_new_eml22__EpcExternalPartReference(struct soap*, int)
        friend SOAP_FMAC1 eml22__EpcExternalPartReference * SOAP_FMAC2 soap_instantiate_eml22__EpcExternalPartReference(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1542 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2_eml22__Activity (-646)
/* complex XML schema type 'eml22:Activity': */
class SOAP_CMAC eml22__Activity : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:ActivityDescriptor' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ActivityDescriptor;
        /// Optional element 'eml22:Parent' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Parent;
        /// Required element 'eml22:Parameter' of XML schema type 'eml22:AbstractActivityParameter'
        std::vector<eml22__AbstractActivityParameter *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__Activity
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__Activity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__Activity, default initialized and not managed by a soap context
        virtual eml22__Activity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__Activity); }
      public:
        /// Constructor with default initializations
        eml22__Activity() : ActivityDescriptor(), Parent(), Parameter() { }
        virtual ~eml22__Activity() { }
        /// Friend allocator used by soap_new_eml22__Activity(struct soap*, int)
        friend SOAP_FMAC1 eml22__Activity * SOAP_FMAC2 soap_instantiate_eml22__Activity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1544 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate (-647)
/* complex XML schema type 'eml22:ActivityTemplate': */
class SOAP_CMAC eml22__ActivityTemplate : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:Parameter' of XML schema type 'eml22:ParameterTemplate'
        std::vector<eml22__ParameterTemplate *> Parameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ActivityTemplate, default initialized and not managed by a soap context
        virtual eml22__ActivityTemplate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ActivityTemplate); }
      public:
        /// Constructor with default initializations
        eml22__ActivityTemplate() : Parameter() { }
        virtual ~eml22__ActivityTemplate() { }
        /// Friend allocator used by soap_new_eml22__ActivityTemplate(struct soap*, int)
        friend SOAP_FMAC1 eml22__ActivityTemplate * SOAP_FMAC2 soap_instantiate_eml22__ActivityTemplate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1546 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter (-648)
/* complex XML schema type 'eml22:DataObjectParameter': */
class SOAP_CMAC eml22__DataObjectParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:DataObject' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataObjectParameter, default initialized and not managed by a soap context
        virtual eml22__DataObjectParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataObjectParameter); }
      public:
        /// Constructor with default initializations
        eml22__DataObjectParameter() : DataObject() { }
        virtual ~eml22__DataObjectParameter() { }
        /// Friend allocator used by soap_new_eml22__DataObjectParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataObjectParameter * SOAP_FMAC2 soap_instantiate_eml22__DataObjectParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1548 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter (-649)
/* complex XML schema type 'eml22:DoubleQuantityParameter': */
class SOAP_CMAC eml22__DoubleQuantityParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'eml22:Uom' of XML schema type 'eml22:UnitOfMeasureExt'
        std::string Uom;
        /// Optional element 'eml22:CustomUnitDictionary' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CustomUnitDictionary;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoubleQuantityParameter, default initialized and not managed by a soap context
        virtual eml22__DoubleQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoubleQuantityParameter); }
      public:
        /// Constructor with default initializations
        eml22__DoubleQuantityParameter() : Value(), Uom(), CustomUnitDictionary() { }
        virtual ~eml22__DoubleQuantityParameter() { }
        /// Friend allocator used by soap_new_eml22__DoubleQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoubleQuantityParameter * SOAP_FMAC2 soap_instantiate_eml22__DoubleQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1550 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter (-650)
/* complex XML schema type 'eml22:IntegerQuantityParameter': */
class SOAP_CMAC eml22__IntegerQuantityParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerQuantityParameter, default initialized and not managed by a soap context
        virtual eml22__IntegerQuantityParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerQuantityParameter); }
      public:
        /// Constructor with default initializations
        eml22__IntegerQuantityParameter() : Value() { }
        virtual ~eml22__IntegerQuantityParameter() { }
        /// Friend allocator used by soap_new_eml22__IntegerQuantityParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerQuantityParameter * SOAP_FMAC2 soap_instantiate_eml22__IntegerQuantityParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1552 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey (-651)
/* complex XML schema type 'eml22:ObjectParameterKey': */
class SOAP_CMAC eml22__ObjectParameterKey : public eml22__AbstractParameterKey {
      public:
        /// Required element 'eml22:DataObject' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *DataObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ObjectParameterKey, default initialized and not managed by a soap context
        virtual eml22__ObjectParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ObjectParameterKey); }
      public:
        /// Constructor with default initializations
        eml22__ObjectParameterKey() : DataObject() { }
        virtual ~eml22__ObjectParameterKey() { }
        /// Friend allocator used by soap_new_eml22__ObjectParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml22__ObjectParameterKey * SOAP_FMAC2 soap_instantiate_eml22__ObjectParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1556 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter (-653)
/* complex XML schema type 'eml22:StringParameter': */
class SOAP_CMAC eml22__StringParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:Value' of XML schema type 'eml22:String2000'
        std::string Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringParameter, default initialized and not managed by a soap context
        virtual eml22__StringParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringParameter); }
      public:
        /// Constructor with default initializations
        eml22__StringParameter() : Value() { }
        virtual ~eml22__StringParameter() { }
        /// Friend allocator used by soap_new_eml22__StringParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringParameter * SOAP_FMAC2 soap_instantiate_eml22__StringParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1558 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter (-654)
/* complex XML schema type 'eml22:TimeIndexParameter': */
class SOAP_CMAC eml22__TimeIndexParameter : public eml22__AbstractActivityParameter {
      public:
        /// Required element 'eml22:TimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndexParameter, default initialized and not managed by a soap context
        virtual eml22__TimeIndexParameter *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndexParameter); }
      public:
        /// Constructor with default initializations
        eml22__TimeIndexParameter() : TimeIndex() { }
        virtual ~eml22__TimeIndexParameter() { }
        /// Friend allocator used by soap_new_eml22__TimeIndexParameter(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndexParameter * SOAP_FMAC2 soap_instantiate_eml22__TimeIndexParameter(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1560 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey (-655)
/* complex XML schema type 'eml22:TimeIndexParameterKey': */
class SOAP_CMAC eml22__TimeIndexParameterKey : public eml22__AbstractParameterKey {
      public:
        /// Required element 'eml22:TimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeIndexParameterKey, default initialized and not managed by a soap context
        virtual eml22__TimeIndexParameterKey *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeIndexParameterKey); }
      public:
        /// Constructor with default initializations
        eml22__TimeIndexParameterKey() : TimeIndex() { }
        virtual ~eml22__TimeIndexParameterKey() { }
        /// Friend allocator used by soap_new_eml22__TimeIndexParameterKey(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeIndexParameterKey * SOAP_FMAC2 soap_instantiate_eml22__TimeIndexParameterKey(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1564 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind (-657)
/* complex XML schema type 'eml22:PropertyKind': */
class SOAP_CMAC eml22__PropertyKind : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:IsAbstract' of XML schema type 'xsd:boolean'
        bool IsAbstract;
        /// Optional element 'eml22:DeprecationDate' of XML schema type 'eml22:TimeStamp'
        std::string *DeprecationDate;
        /// Required element 'eml22:QuantityClass' of XML schema type 'eml22:QuantityClassKindExt'
        std::string QuantityClass;
        /// Optional element 'eml22:Parent' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Parent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PropertyKind, default initialized and not managed by a soap context
        virtual eml22__PropertyKind *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PropertyKind); }
      public:
        /// Constructor with default initializations
        eml22__PropertyKind() : IsAbstract(), DeprecationDate(), QuantityClass(), Parent() { }
        virtual ~eml22__PropertyKind() { }
        /// Friend allocator used by soap_new_eml22__PropertyKind(struct soap*, int)
        friend SOAP_FMAC1 eml22__PropertyKind * SOAP_FMAC2 soap_instantiate_eml22__PropertyKind(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1566 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary (-658)
/* complex XML schema type 'eml22:PropertyKindDictionary': */
class SOAP_CMAC eml22__PropertyKindDictionary : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:PropertyKind' of XML schema type 'eml22:PropertyKind'
        std::vector<eml22__PropertyKind *> PropertyKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PropertyKindDictionary, default initialized and not managed by a soap context
        virtual eml22__PropertyKindDictionary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PropertyKindDictionary); }
      public:
        /// Constructor with default initializations
        eml22__PropertyKindDictionary() : PropertyKind() { }
        virtual ~eml22__PropertyKindDictionary() { }
        /// Friend allocator used by soap_new_eml22__PropertyKindDictionary(struct soap*, int)
        friend SOAP_FMAC1 eml22__PropertyKindDictionary * SOAP_FMAC2 soap_instantiate_eml22__PropertyKindDictionary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1572 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries (-661)
/* complex XML schema type 'eml22:TimeSeries': */
class SOAP_CMAC eml22__TimeSeries : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:Time' of XML schema type 'eml22:GeologicTime'
        std::vector<eml22__GeologicTime *> Time;
        /// Optional element 'eml22:TimeSeriesParentage' of XML schema type 'eml22:TimeSeriesParentage'
        eml22__TimeSeriesParentage *TimeSeriesParentage;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeSeries, default initialized and not managed by a soap context
        virtual eml22__TimeSeries *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeSeries); }
      public:
        /// Constructor with default initializations
        eml22__TimeSeries() : Time(), TimeSeriesParentage() { }
        virtual ~eml22__TimeSeries() { }
        /// Friend allocator used by soap_new_eml22__TimeSeries(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeSeries * SOAP_FMAC2 soap_instantiate_eml22__TimeSeries(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1576 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure (-663)
/* complex XML schema type 'eml22:AbsolutePressure': */
class SOAP_CMAC eml22__AbsolutePressure : public eml22__AbstractPressureValue {
      public:
        /// Required element 'eml22:AbsolutePressure' of XML schema type 'eml22:PressureMeasureExt'
        eml22__PressureMeasureExt *AbsolutePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbsolutePressure, default initialized and not managed by a soap context
        virtual eml22__AbsolutePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbsolutePressure); }
      public:
        /// Constructor with default initializations
        eml22__AbsolutePressure() : AbsolutePressure() { }
        virtual ~eml22__AbsolutePressure() { }
        /// Friend allocator used by soap_new_eml22__AbsolutePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbsolutePressure * SOAP_FMAC2 soap_instantiate_eml22__AbsolutePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1586 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure (-668)
/* complex XML schema type 'eml22:GaugePressure': */
class SOAP_CMAC eml22__GaugePressure : public eml22__AbstractPressureValue {
      public:
        /// Required element 'eml22:GaugePressure' of XML schema type 'eml22:PressureMeasureExt'
        eml22__PressureMeasureExt *GaugePressure;
        /// Optional element 'eml22:ReferencePressure' of XML schema type 'eml22:ReferencePressure'
        eml22__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GaugePressure, default initialized and not managed by a soap context
        virtual eml22__GaugePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GaugePressure); }
      public:
        /// Constructor with default initializations
        eml22__GaugePressure() : GaugePressure(), ReferencePressure() { }
        virtual ~eml22__GaugePressure() { }
        /// Friend allocator used by soap_new_eml22__GaugePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__GaugePressure * SOAP_FMAC2 soap_instantiate_eml22__GaugePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:26448 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure_
#define SOAP_TYPE_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure_ (-1553)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _eml22__union_ReferenceTemperaturePressure_
{
        #define SOAP_UNION_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure__ReferenceTempPres	(1)	/**< union variant selector value for member ReferenceTempPres */
        std::string *ReferenceTempPres;
};
#endif

/* eml2_2ForGsoap.h:1592 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure (-671)
/* complex XML schema type 'eml22:ReferenceTemperaturePressure': */
class SOAP_CMAC eml22__ReferenceTemperaturePressure : public eml22__AbstractTemperaturePressure {
      public:
        /// Union with union _eml22__union_ReferenceTemperaturePressure_ variant selector __union_ReferenceTemperaturePressure_ set to one of: SOAP_UNION_gsoap_eml2_2__eml22__union_ReferenceTemperaturePressure__ReferenceTempPres
        int __union_ReferenceTemperaturePressure_;
        union _eml22__union_ReferenceTemperaturePressure_ union_ReferenceTemperaturePressure_;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReferenceTemperaturePressure, default initialized and not managed by a soap context
        virtual eml22__ReferenceTemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReferenceTemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml22__ReferenceTemperaturePressure() : __union_ReferenceTemperaturePressure_() { }
        virtual ~eml22__ReferenceTemperaturePressure() { }
        /// Friend allocator used by soap_new_eml22__ReferenceTemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReferenceTemperaturePressure * SOAP_FMAC2 soap_instantiate_eml22__ReferenceTemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1594 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure (-672)
/* complex XML schema type 'eml22:RelativePressure': */
class SOAP_CMAC eml22__RelativePressure : public eml22__AbstractPressureValue {
      public:
        /// Required element 'eml22:RelativePressure' of XML schema type 'eml22:PressureMeasure'
        eml22__PressureMeasure *RelativePressure;
        /// Required element 'eml22:ReferencePressure' of XML schema type 'eml22:ReferencePressure'
        eml22__ReferencePressure *ReferencePressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RelativePressure, default initialized and not managed by a soap context
        virtual eml22__RelativePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RelativePressure); }
      public:
        /// Constructor with default initializations
        eml22__RelativePressure() : RelativePressure(), ReferencePressure() { }
        virtual ~eml22__RelativePressure() { }
        /// Friend allocator used by soap_new_eml22__RelativePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__RelativePressure * SOAP_FMAC2 soap_instantiate_eml22__RelativePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1596 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure (-673)
/* complex XML schema type 'eml22:TemperaturePressure': */
class SOAP_CMAC eml22__TemperaturePressure : public eml22__AbstractTemperaturePressure {
      public:
        /// Required element 'eml22:Temperature' of XML schema type 'eml22:ThermodynamicTemperatureMeasure'
        eml22__ThermodynamicTemperatureMeasure *Temperature;
        /// Required element 'eml22:Pressure' of XML schema type 'eml22:PressureMeasure'
        eml22__PressureMeasure *Pressure;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperaturePressure, default initialized and not managed by a soap context
        virtual eml22__TemperaturePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperaturePressure); }
      public:
        /// Constructor with default initializations
        eml22__TemperaturePressure() : Temperature(), Pressure() { }
        virtual ~eml22__TemperaturePressure() { }
        /// Friend allocator used by soap_new_eml22__TemperaturePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperaturePressure * SOAP_FMAC2 soap_instantiate_eml22__TemperaturePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1606 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs (-678)
/* complex XML schema type 'eml22:GeodeticCrs': */
class SOAP_CMAC eml22__GeodeticCrs : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:AbstractGeodeticCrs' of XML schema type 'eml22:AbstractGeodeticCrs'
        eml22__AbstractGeodeticCrs *AbstractGeodeticCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticCrs); }
      public:
        /// Constructor with default initializations
        eml22__GeodeticCrs() : AbstractGeodeticCrs() { }
        virtual ~eml22__GeodeticCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1608 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs (-679)
/* complex XML schema type 'eml22:GeodeticEpsgCrs': */
class SOAP_CMAC eml22__GeodeticEpsgCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:EpsgCode' of XML schema type 'eml22:PositiveLong'
        LONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticEpsgCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml22__GeodeticEpsgCrs() : EpsgCode() { }
        virtual ~eml22__GeodeticEpsgCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticEpsgCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1610 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs (-680)
/* complex XML schema type 'eml22:GeodeticGmlCrs': */
class SOAP_CMAC eml22__GeodeticGmlCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:GmlGeodeticCrsDefinition' of XML schema type 'gml:GeodeticCRSType'
        gml__GeodeticCRSType *GmlGeodeticCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticGmlCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticGmlCrs); }
      public:
        /// Constructor with default initializations
        eml22__GeodeticGmlCrs() : GmlGeodeticCrsDefinition() { }
        virtual ~eml22__GeodeticGmlCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticGmlCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1612 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs (-681)
/* complex XML schema type 'eml22:GeodeticLocalAuthorityCrs': */
class SOAP_CMAC eml22__GeodeticLocalAuthorityCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:LocalAuthorityCrsName' of XML schema type 'eml22:AuthorityQualifiedName'
        eml22__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml22__GeodeticLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml22__GeodeticLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1614 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs (-682)
/* complex XML schema type 'eml22:GeodeticUnknownCrs': */
class SOAP_CMAC eml22__GeodeticUnknownCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:Unknown' of XML schema type 'eml22:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticUnknownCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml22__GeodeticUnknownCrs() : Unknown() { }
        virtual ~eml22__GeodeticUnknownCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticUnknownCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1616 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs (-683)
/* complex XML schema type 'eml22:GeodeticWktCrs': */
class SOAP_CMAC eml22__GeodeticWktCrs : public eml22__AbstractGeodeticCrs {
      public:
        /// Required element 'eml22:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GeodeticWktCrs, default initialized and not managed by a soap context
        virtual eml22__GeodeticWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GeodeticWktCrs); }
      public:
        /// Constructor with default initializations
        eml22__GeodeticWktCrs() : WellKnownText() { }
        virtual ~eml22__GeodeticWktCrs() { }
        /// Friend allocator used by soap_new_eml22__GeodeticWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__GeodeticWktCrs * SOAP_FMAC2 soap_instantiate_eml22__GeodeticWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1618 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs (-684)
/* complex XML schema type 'eml22:ProjectedCrs': */
class SOAP_CMAC eml22__ProjectedCrs : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:AxisOrder' of XML schema type 'eml22:AxisOrder2d'
        enum eml22__AxisOrder2d AxisOrder;
        /// Required element 'eml22:AbstractProjectedCrs' of XML schema type 'eml22:AbstractProjectedCrs'
        eml22__AbstractProjectedCrs *AbstractProjectedCrs;
        /// Optional attribute 'uom' of XML schema type 'eml22:LengthUomExt'
        std::string *uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedCrs); }
      public:
        /// Constructor with default initializations
        eml22__ProjectedCrs() : AxisOrder(), AbstractProjectedCrs(), uom() { }
        virtual ~eml22__ProjectedCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1620 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs (-685)
/* complex XML schema type 'eml22:ProjectedEpsgCrs': */
class SOAP_CMAC eml22__ProjectedEpsgCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:EpsgCode' of XML schema type 'eml22:PositiveLong'
        LONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedEpsgCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml22__ProjectedEpsgCrs() : EpsgCode() { }
        virtual ~eml22__ProjectedEpsgCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedEpsgCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1622 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs (-686)
/* complex XML schema type 'eml22:ProjectedGmlCrs': */
class SOAP_CMAC eml22__ProjectedGmlCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:GmlProjectedCrsDefinition' of XML schema type 'gml:ProjectedCRSType'
        gml__ProjectedCRSType *GmlProjectedCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedGmlCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedGmlCrs); }
      public:
        /// Constructor with default initializations
        eml22__ProjectedGmlCrs() : GmlProjectedCrsDefinition() { }
        virtual ~eml22__ProjectedGmlCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedGmlCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1624 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs (-687)
/* complex XML schema type 'eml22:ProjectedLocalAuthorityCrs': */
class SOAP_CMAC eml22__ProjectedLocalAuthorityCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:LocalAuthorityCrsName' of XML schema type 'eml22:AuthorityQualifiedName'
        eml22__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml22__ProjectedLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml22__ProjectedLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1626 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs (-688)
/* complex XML schema type 'eml22:ProjectedUnknownCrs': */
class SOAP_CMAC eml22__ProjectedUnknownCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:Unknown' of XML schema type 'eml22:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedUnknownCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml22__ProjectedUnknownCrs() : Unknown() { }
        virtual ~eml22__ProjectedUnknownCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedUnknownCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1628 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs (-689)
/* complex XML schema type 'eml22:ProjectedWktCrs': */
class SOAP_CMAC eml22__ProjectedWktCrs : public eml22__AbstractProjectedCrs {
      public:
        /// Required element 'eml22:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ProjectedWktCrs, default initialized and not managed by a soap context
        virtual eml22__ProjectedWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ProjectedWktCrs); }
      public:
        /// Constructor with default initializations
        eml22__ProjectedWktCrs() : WellKnownText() { }
        virtual ~eml22__ProjectedWktCrs() { }
        /// Friend allocator used by soap_new_eml22__ProjectedWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__ProjectedWktCrs * SOAP_FMAC2 soap_instantiate_eml22__ProjectedWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1630 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs (-690)
/* complex XML schema type 'eml22:VerticalCrs': */
class SOAP_CMAC eml22__VerticalCrs : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:Direction' of XML schema type 'eml22:VerticalDirection'
        enum eml22__VerticalDirection Direction;
        /// Required element 'eml22:AbstractVerticalCrs' of XML schema type 'eml22:AbstractVerticalCrs'
        eml22__AbstractVerticalCrs *AbstractVerticalCrs;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthUomExt'
        std::string uom;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalCrs); }
      public:
        /// Constructor with default initializations
        eml22__VerticalCrs() : Direction(), AbstractVerticalCrs(), uom() { }
        virtual ~eml22__VerticalCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1632 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs (-691)
/* complex XML schema type 'eml22:VerticalEpsgCrs': */
class SOAP_CMAC eml22__VerticalEpsgCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:EpsgCode' of XML schema type 'eml22:PositiveLong'
        LONG64 EpsgCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalEpsgCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalEpsgCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalEpsgCrs); }
      public:
        /// Constructor with default initializations
        eml22__VerticalEpsgCrs() : EpsgCode() { }
        virtual ~eml22__VerticalEpsgCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalEpsgCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalEpsgCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalEpsgCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1634 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs (-692)
/* complex XML schema type 'eml22:VerticalGmlCrs': */
class SOAP_CMAC eml22__VerticalGmlCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:GmlVerticalCrsDefinition' of XML schema type 'gml:VerticalCRSType'
        gml__VerticalCRSType *GmlVerticalCrsDefinition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalGmlCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalGmlCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalGmlCrs); }
      public:
        /// Constructor with default initializations
        eml22__VerticalGmlCrs() : GmlVerticalCrsDefinition() { }
        virtual ~eml22__VerticalGmlCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalGmlCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalGmlCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalGmlCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1636 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs (-693)
/* complex XML schema type 'eml22:VerticalLocalAuthorityCrs': */
class SOAP_CMAC eml22__VerticalLocalAuthorityCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:LocalAuthorityCrsName' of XML schema type 'eml22:AuthorityQualifiedName'
        eml22__AuthorityQualifiedName *LocalAuthorityCrsName;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalLocalAuthorityCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalLocalAuthorityCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalLocalAuthorityCrs); }
      public:
        /// Constructor with default initializations
        eml22__VerticalLocalAuthorityCrs() : LocalAuthorityCrsName() { }
        virtual ~eml22__VerticalLocalAuthorityCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalLocalAuthorityCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalLocalAuthorityCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalLocalAuthorityCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1638 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs (-694)
/* complex XML schema type 'eml22:VerticalUnknownCrs': */
class SOAP_CMAC eml22__VerticalUnknownCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:Unknown' of XML schema type 'eml22:String2000'
        std::string Unknown;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalUnknownCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalUnknownCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalUnknownCrs); }
      public:
        /// Constructor with default initializations
        eml22__VerticalUnknownCrs() : Unknown() { }
        virtual ~eml22__VerticalUnknownCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalUnknownCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalUnknownCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalUnknownCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1640 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs (-695)
/* complex XML schema type 'eml22:VerticalWktCrs': */
class SOAP_CMAC eml22__VerticalWktCrs : public eml22__AbstractVerticalCrs {
      public:
        /// Required element 'eml22:WellKnownText' of XML schema type 'xsd:string'
        std::string WellKnownText;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalWktCrs, default initialized and not managed by a soap context
        virtual eml22__VerticalWktCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalWktCrs); }
      public:
        /// Constructor with default initializations
        eml22__VerticalWktCrs() : WellKnownText() { }
        virtual ~eml22__VerticalWktCrs() { }
        /// Friend allocator used by soap_new_eml22__VerticalWktCrs(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalWktCrs * SOAP_FMAC2 soap_instantiate_eml22__VerticalWktCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1642 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord (-696)
/* complex XML schema type 'eml22:DataAssuranceRecord': */
class SOAP_CMAC eml22__DataAssuranceRecord : public eml22__AbstractObject {
      public:
        /// Required element 'eml22:PolicyId' of XML schema type 'eml22:String64'
        std::string PolicyId;
        /// Optional element 'eml22:PolicyName' of XML schema type 'eml22:String2000'
        std::string *PolicyName;
        /// Optional element 'eml22:ReferencedElementName' of XML schema type 'eml22:String64'
        std::string *ReferencedElementName;
        /// Optional element 'eml22:ReferencedElementUid' of XML schema type 'eml22:String64'
        std::string *ReferencedElementUid;
        /// Required element 'eml22:Origin' of XML schema type 'xsd:string'
        std::string Origin;
        /// Required element 'eml22:Conformance' of XML schema type 'xsd:boolean'
        bool Conformance;
        /// Required element 'eml22:Date' of XML schema type 'eml22:TimeStamp'
        std::string Date;
        /// Optional element 'eml22:Comment' of XML schema type 'xsd:string'
        std::string *Comment;
        /// Optional element 'eml22:FailingRules' of XML schema type 'eml22:FailingRule'
        std::vector<eml22__FailingRule *> FailingRules;
        /// Optional element 'eml22:IndexRange' of XML schema type 'eml22:IndexRange'
        eml22__IndexRange *IndexRange;
        /// Required element 'eml22:ReferencedData' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ReferencedData;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataAssuranceRecord, default initialized and not managed by a soap context
        virtual eml22__DataAssuranceRecord *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataAssuranceRecord); }
      public:
        /// Constructor with default initializations
        eml22__DataAssuranceRecord() : PolicyId(), PolicyName(), ReferencedElementName(), ReferencedElementUid(), Origin(), Conformance(), Date(), Comment(), FailingRules(), IndexRange(), ReferencedData() { }
        virtual ~eml22__DataAssuranceRecord() { }
        /// Friend allocator used by soap_new_eml22__DataAssuranceRecord(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataAssuranceRecord * SOAP_FMAC2 soap_instantiate_eml22__DataAssuranceRecord(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1650 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet (-700)
/* complex XML schema type 'eml22:GraphicalInformationSet': */
class SOAP_CMAC eml22__GraphicalInformationSet : public eml22__AbstractObject {
      public:
        /// Optional element 'eml22:GraphicalInformation' of XML schema type 'eml22:AbstractGraphicalInformation'
        std::vector<eml22__AbstractGraphicalInformation *> GraphicalInformation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GraphicalInformationSet, default initialized and not managed by a soap context
        virtual eml22__GraphicalInformationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GraphicalInformationSet); }
      public:
        /// Constructor with default initializations
        eml22__GraphicalInformationSet() : GraphicalInformation() { }
        virtual ~eml22__GraphicalInformationSet() { }
        /// Friend allocator used by soap_new_eml22__GraphicalInformationSet(struct soap*, int)
        friend SOAP_FMAC1 eml22__GraphicalInformationSet * SOAP_FMAC2 soap_instantiate_eml22__GraphicalInformationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1660 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType (-705)
/* complex XML schema type 'gml:DefinitionBaseType': */
class SOAP_CMAC gml__DefinitionBaseType {
      public:
        /// Optional element 'gml:description' of XML schema type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XML schema type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Required element 'gml:identifier' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XML schema type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Required attribute 'gml:id' of XML schema type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__DefinitionBaseType, default initialized and not managed by a soap context
        virtual gml__DefinitionBaseType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__DefinitionBaseType); }
      public:
        /// Constructor with default initializations
        gml__DefinitionBaseType() : description(), descriptionReference(), identifier(), name(), gml__id(), soap() { }
        virtual ~gml__DefinitionBaseType() { }
        /// Friend allocator used by soap_new_gml__DefinitionBaseType(struct soap*, int)
        friend SOAP_FMAC1 gml__DefinitionBaseType * SOAP_FMAC2 soap_instantiate_gml__DefinitionBaseType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1664 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType (-707)
/* simple XML schema type 'gml:StringOrRefType': */
class SOAP_CMAC gml__StringOrRefType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Optional attribute 'nilReason' of XML schema type 'gml:NilReasonType'
        std::string *nilReason;
        /// Optional attribute 'xlink:type' of XML schema type 'xsd:string'
        std::string xlink__type;	///< initialized with fixed value = "simple"
        /// Optional attribute 'xlink:href' of XML schema type 'xsd:anyURI'
        std::string *xlink__href;
        /// Optional attribute 'xlink:role' of XML schema type 'xsd:anyURI'
        std::string *xlink__role;
        /// Optional attribute 'xlink:arcrole' of XML schema type 'xsd:anyURI'
        std::string *xlink__arcrole;
        /// Optional attribute 'xlink:title' of XML schema type 'xsd:string'
        std::string *xlink__title;
        /// Optional attribute 'xlink:show' of XML schema type 'xlink:show'
        enum _xlink__show *xlink__show;
        /// Optional attribute 'xlink:actuate' of XML schema type 'xlink:actuate'
        enum _xlink__actuate *xlink__actuate;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__StringOrRefType, default initialized and not managed by a soap context
        virtual gml__StringOrRefType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__StringOrRefType); }
      public:
        /// Constructor with default initializations
        gml__StringOrRefType() : __item(), nilReason(), xlink__type("simple"), xlink__href(), xlink__role(), xlink__arcrole(), xlink__title(), xlink__show(), xlink__actuate(), soap() { }
        virtual ~gml__StringOrRefType() { }
        /// Friend allocator used by soap_new_gml__StringOrRefType(struct soap*, int)
        friend SOAP_FMAC1 gml__StringOrRefType * SOAP_FMAC2 soap_instantiate_gml__StringOrRefType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1670 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeType (-710)
/* simple XML schema type 'gml:CodeType': */
class SOAP_CMAC gml__CodeType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Optional attribute 'codeSpace' of XML schema type 'xsd:anyURI'
        std::string *codeSpace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CodeType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CodeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CodeType, default initialized and not managed by a soap context
        virtual gml__CodeType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CodeType); }
      public:
        /// Constructor with default initializations
        gml__CodeType() : __item(), codeSpace(), soap() { }
        virtual ~gml__CodeType() { }
        /// Friend allocator used by soap_new_gml__CodeType(struct soap*, int)
        friend SOAP_FMAC1 gml__CodeType * SOAP_FMAC2 soap_instantiate_gml__CodeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1674 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType (-712)
/* complex XML schema type 'gml:AbstractTimeObjectType': */
class SOAP_CMAC gml__AbstractTimeObjectType : public gml__AbstractGMLType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractTimeObjectType, default initialized and not managed by a soap context
        virtual gml__AbstractTimeObjectType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractTimeObjectType); }
      public:
        /// Constructor with default initializations
        gml__AbstractTimeObjectType() { }
        virtual ~gml__AbstractTimeObjectType() { }
        /// Friend allocator used by soap_new_gml__AbstractTimeObjectType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractTimeObjectType * SOAP_FMAC2 soap_instantiate_gml__AbstractTimeObjectType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1676 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType (-713)
/* complex XML schema type 'gml:RelatedTimeType': */
class SOAP_CMAC gml__RelatedTimeType : public gml__TimePrimitivePropertyType {
      public:
        /// Optional attribute 'relativePosition' of XML schema type 'gml:RelatedTimeType-relativePosition'
        enum _gml__RelatedTimeType_relativePosition *relativePosition;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__RelatedTimeType, default initialized and not managed by a soap context
        virtual gml__RelatedTimeType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__RelatedTimeType); }
      public:
        /// Constructor with default initializations
        gml__RelatedTimeType() : relativePosition() { }
        virtual ~gml__RelatedTimeType() { }
        /// Friend allocator used by soap_new_gml__RelatedTimeType(struct soap*, int)
        friend SOAP_FMAC1 gml__RelatedTimeType * SOAP_FMAC2 soap_instantiate_gml__RelatedTimeType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1710 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__MeasureType
#define SOAP_TYPE_gsoap_eml2_2_gml__MeasureType (-730)
/* simple XML schema type 'gml:MeasureType': */
class SOAP_CMAC gml__MeasureType {
      public:
        /// Simple content of XML schema type 'xsd:double' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__MeasureType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__MeasureType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__MeasureType, default initialized and not managed by a soap context
        virtual gml__MeasureType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__MeasureType); }
      public:
        /// Constructor with default initializations
        gml__MeasureType() : __item(), soap() { }
        virtual ~gml__MeasureType() { }
        /// Friend allocator used by soap_new_gml__MeasureType(struct soap*, int)
        friend SOAP_FMAC1 gml__MeasureType * SOAP_FMAC2 soap_instantiate_gml__MeasureType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1750 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType (-750)
/* complex XML schema type 'gmd:EX_Extent_Type': */
class SOAP_CMAC gmd__EX_USCOREExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:description' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *description;
        /// Optional element 'gmd:geographicElement' of XML schema type 'gmd:EX_GeographicExtent_PropertyType'
        std::vector<gmd__EX_USCOREGeographicExtent_USCOREPropertyType *> geographicElement;
        /// Optional element 'gmd:temporalElement' of XML schema type 'gmd:EX_TemporalExtent_PropertyType'
        std::vector<gmd__EX_USCORETemporalExtent_USCOREPropertyType *> temporalElement;
        /// Optional element 'gmd:verticalElement' of XML schema type 'gmd:EX_VerticalExtent_PropertyType'
        std::vector<gmd__EX_USCOREVerticalExtent_USCOREPropertyType *> verticalElement;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREExtent_USCOREType() : description(), geographicElement(), temporalElement(), verticalElement() { }
        virtual ~gmd__EX_USCOREExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1754 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType (-752)
/* complex XML schema type 'gmd:AbstractEX_GeographicExtent_Type': */
class SOAP_CMAC gmd__AbstractEX_USCOREGeographicExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:extentTypeCode' of XML schema type 'gco:Boolean_PropertyType'
        gco__Boolean_USCOREPropertyType *extentTypeCode;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractEX_USCOREGeographicExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractEX_USCOREGeographicExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractEX_USCOREGeographicExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractEX_USCOREGeographicExtent_USCOREType() : extentTypeCode() { }
        virtual ~gmd__AbstractEX_USCOREGeographicExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractEX_USCOREGeographicExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractEX_USCOREGeographicExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractEX_USCOREGeographicExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1758 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType (-754)
/* complex XML schema type 'gmd:EX_TemporalExtent_Type': */
class SOAP_CMAC gmd__EX_USCORETemporalExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:extent' of XML schema type 'gts:TM_Primitive_PropertyType'
        gts__TM_USCOREPrimitive_USCOREPropertyType *extent;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCORETemporalExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCORETemporalExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCORETemporalExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCORETemporalExtent_USCOREType() : extent() { }
        virtual ~gmd__EX_USCORETemporalExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCORETemporalExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCORETemporalExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCORETemporalExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1762 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType (-756)
/* complex XML schema type 'gmd:EX_VerticalExtent_Type': */
class SOAP_CMAC gmd__EX_USCOREVerticalExtent_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:minimumValue' of XML schema type 'gco:Real_PropertyType'
        gco__Real_USCOREPropertyType *minimumValue;
        /// Required element 'gmd:maximumValue' of XML schema type 'gco:Real_PropertyType'
        gco__Real_USCOREPropertyType *maximumValue;
        /// Required element 'gmd:verticalCRS' of XML schema type 'gsr:SC_CRS_PropertyType'
        gsr__SC_USCORECRS_USCOREPropertyType *verticalCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__EX_USCOREVerticalExtent_USCOREType, default initialized and not managed by a soap context
        virtual gmd__EX_USCOREVerticalExtent_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__EX_USCOREVerticalExtent_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__EX_USCOREVerticalExtent_USCOREType() : minimumValue(), maximumValue(), verticalCRS() { }
        virtual ~gmd__EX_USCOREVerticalExtent_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__EX_USCOREVerticalExtent_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__EX_USCOREVerticalExtent_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__EX_USCOREVerticalExtent_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1766 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType (-758)
/* complex XML schema type 'gmd:AbstractDQ_Element_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREElement_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:nameOfMeasure' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> nameOfMeasure;
        /// Optional element 'gmd:measureIdentification' of XML schema type 'gmd:MD_Identifier_PropertyType'
        gmd__MD_USCOREIdentifier_USCOREPropertyType *measureIdentification;
        /// Optional element 'gmd:measureDescription' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *measureDescription;
        /// Optional element 'gmd:evaluationMethodType' of XML schema type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType'
        gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType *evaluationMethodType;
        /// Optional element 'gmd:evaluationMethodDescription' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *evaluationMethodDescription;
        /// Optional element 'gmd:evaluationProcedure' of XML schema type 'gmd:CI_Citation_PropertyType'
        gmd__CI_USCORECitation_USCOREPropertyType *evaluationProcedure;
        /// Optional element 'gmd:dateTime' of XML schema type 'gco:DateTime_PropertyType'
        std::vector<gco__DateTime_USCOREPropertyType *> dateTime;
        /// Sequence of 1 to 2 elements 'gmd:result' of XML schema type 'gmd:DQ_Result_PropertyType'
        std::vector<gmd__DQ_USCOREResult_USCOREPropertyType *> result;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREElement_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREElement_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREElement_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractDQ_USCOREElement_USCOREType() : nameOfMeasure(), measureIdentification(), measureDescription(), evaluationMethodType(), evaluationMethodDescription(), evaluationProcedure(), dateTime(), result() { }
        virtual ~gmd__AbstractDQ_USCOREElement_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREElement_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREElement_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREElement_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1770 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType (-760)
/* complex XML schema type 'gmd:MD_Identifier_Type': */
class SOAP_CMAC gmd__MD_USCOREIdentifier_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:authority' of XML schema type 'gmd:CI_Citation_PropertyType'
        gmd__CI_USCORECitation_USCOREPropertyType *authority;
        /// Required element 'gmd:code' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *code;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__MD_USCOREIdentifier_USCOREType, default initialized and not managed by a soap context
        virtual gmd__MD_USCOREIdentifier_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__MD_USCOREIdentifier_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__MD_USCOREIdentifier_USCOREType() : authority(), code() { }
        virtual ~gmd__MD_USCOREIdentifier_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__MD_USCOREIdentifier_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__MD_USCOREIdentifier_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__MD_USCOREIdentifier_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1774 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType (-762)
/* complex XML schema type 'gmd:CI_Citation_Type': */
class SOAP_CMAC gmd__CI_USCORECitation_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:title' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *title;
        /// Optional element 'gmd:alternateTitle' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> alternateTitle;
        /// Required element 'gmd:date' of XML schema type 'gmd:CI_Date_PropertyType'
        std::vector<gmd__CI_USCOREDate_USCOREPropertyType *> date;
        /// Optional element 'gmd:edition' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *edition;
        /// Optional element 'gmd:editionDate' of XML schema type 'gco:Date_PropertyType'
        gco__Date_USCOREPropertyType *editionDate;
        /// Optional element 'gmd:identifier' of XML schema type 'gmd:MD_Identifier_PropertyType'
        std::vector<gmd__MD_USCOREIdentifier_USCOREPropertyType *> identifier;
        /// Optional element 'gmd:citedResponsibleParty' of XML schema type 'gmd:CI_ResponsibleParty_PropertyType'
        std::vector<gmd__CI_USCOREResponsibleParty_USCOREPropertyType *> citedResponsibleParty;
        /// Optional element 'gmd:presentationForm' of XML schema type 'gmd:CI_PresentationFormCode_PropertyType'
        std::vector<gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *> presentationForm;
        /// Optional element 'gmd:series' of XML schema type 'gmd:CI_Series_PropertyType'
        gmd__CI_USCORESeries_USCOREPropertyType *series;
        /// Optional element 'gmd:otherCitationDetails' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *otherCitationDetails;
        /// Optional element 'gmd:collectiveTitle' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *collectiveTitle;
        /// Optional element 'gmd:ISBN' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *ISBN;
        /// Optional element 'gmd:ISSN' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *ISSN;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORECitation_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORECitation_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORECitation_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORECitation_USCOREType() : title(), alternateTitle(), date(), edition(), editionDate(), identifier(), citedResponsibleParty(), presentationForm(), series(), otherCitationDetails(), collectiveTitle(), ISBN(), ISSN() { }
        virtual ~gmd__CI_USCORECitation_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORECitation_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORECitation_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORECitation_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1778 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType (-764)
/* complex XML schema type 'gmd:CI_Date_Type': */
class SOAP_CMAC gmd__CI_USCOREDate_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:date' of XML schema type 'gco:Date_PropertyType'
        gco__Date_USCOREPropertyType *date;
        /// Required element 'gmd:dateType' of XML schema type 'gmd:CI_DateTypeCode_PropertyType'
        gmd__CI_USCOREDateTypeCode_USCOREPropertyType *dateType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREDate_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREDate_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREDate_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREDate_USCOREType() : date(), dateType() { }
        virtual ~gmd__CI_USCOREDate_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREDate_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREDate_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREDate_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1784 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType (-767)
/* complex XML schema type 'gmd:CI_ResponsibleParty_Type': */
class SOAP_CMAC gmd__CI_USCOREResponsibleParty_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:individualName' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *individualName;
        /// Optional element 'gmd:organisationName' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *organisationName;
        /// Optional element 'gmd:positionName' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *positionName;
        /// Optional element 'gmd:contactInfo' of XML schema type 'gmd:CI_Contact_PropertyType'
        gmd__CI_USCOREContact_USCOREPropertyType *contactInfo;
        /// Required element 'gmd:role' of XML schema type 'gmd:CI_RoleCode_PropertyType'
        gmd__CI_USCORERoleCode_USCOREPropertyType *role;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREResponsibleParty_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREResponsibleParty_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREResponsibleParty_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREResponsibleParty_USCOREType() : individualName(), organisationName(), positionName(), contactInfo(), role() { }
        virtual ~gmd__CI_USCOREResponsibleParty_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREResponsibleParty_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREResponsibleParty_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREResponsibleParty_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1788 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType (-769)
/* complex XML schema type 'gmd:CI_Contact_Type': */
class SOAP_CMAC gmd__CI_USCOREContact_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:phone' of XML schema type 'gmd:CI_Telephone_PropertyType'
        gmd__CI_USCORETelephone_USCOREPropertyType *phone;
        /// Optional element 'gmd:address' of XML schema type 'gmd:CI_Address_PropertyType'
        gmd__CI_USCOREAddress_USCOREPropertyType *address;
        /// Optional element 'gmd:onlineResource' of XML schema type 'gmd:CI_OnlineResource_PropertyType'
        gmd__CI_USCOREOnlineResource_USCOREPropertyType *onlineResource;
        /// Optional element 'gmd:hoursOfService' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *hoursOfService;
        /// Optional element 'gmd:contactInstructions' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *contactInstructions;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREContact_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREContact_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREContact_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREContact_USCOREType() : phone(), address(), onlineResource(), hoursOfService(), contactInstructions() { }
        virtual ~gmd__CI_USCOREContact_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREContact_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREContact_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREContact_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1792 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType (-771)
/* complex XML schema type 'gmd:CI_Telephone_Type': */
class SOAP_CMAC gmd__CI_USCORETelephone_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:voice' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> voice;
        /// Optional element 'gmd:facsimile' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> facsimile;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORETelephone_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORETelephone_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORETelephone_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORETelephone_USCOREType() : voice(), facsimile() { }
        virtual ~gmd__CI_USCORETelephone_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORETelephone_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORETelephone_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORETelephone_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1796 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType (-773)
/* complex XML schema type 'gmd:CI_Address_Type': */
class SOAP_CMAC gmd__CI_USCOREAddress_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:deliveryPoint' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> deliveryPoint;
        /// Optional element 'gmd:city' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *city;
        /// Optional element 'gmd:administrativeArea' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *administrativeArea;
        /// Optional element 'gmd:postalCode' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *postalCode;
        /// Optional element 'gmd:country' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *country;
        /// Optional element 'gmd:electronicMailAddress' of XML schema type 'gco:CharacterString_PropertyType'
        std::vector<gco__CharacterString_USCOREPropertyType *> electronicMailAddress;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREAddress_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREAddress_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREAddress_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREAddress_USCOREType() : deliveryPoint(), city(), administrativeArea(), postalCode(), country(), electronicMailAddress() { }
        virtual ~gmd__CI_USCOREAddress_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREAddress_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREAddress_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREAddress_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1800 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType (-775)
/* complex XML schema type 'gmd:CI_OnlineResource_Type': */
class SOAP_CMAC gmd__CI_USCOREOnlineResource_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Required element 'gmd:linkage' of XML schema type 'gmd:URL_PropertyType'
        gmd__URL_USCOREPropertyType *linkage;
        /// Optional element 'gmd:protocol' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *protocol;
        /// Optional element 'gmd:applicationProfile' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *applicationProfile;
        /// Optional element 'gmd:name' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *name;
        /// Optional element 'gmd:description' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *description;
        /// Optional element 'gmd:function' of XML schema type 'gmd:CI_OnLineFunctionCode_PropertyType'
        gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType *function;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCOREOnlineResource_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCOREOnlineResource_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCOREOnlineResource_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCOREOnlineResource_USCOREType() : linkage(), protocol(), applicationProfile(), name(), description(), function() { }
        virtual ~gmd__CI_USCOREOnlineResource_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCOREOnlineResource_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCOREOnlineResource_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCOREOnlineResource_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1812 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType (-781)
/* complex XML schema type 'gmd:CI_Series_Type': */
class SOAP_CMAC gmd__CI_USCORESeries_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Optional element 'gmd:name' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *name;
        /// Optional element 'gmd:issueIdentification' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *issueIdentification;
        /// Optional element 'gmd:page' of XML schema type 'gco:CharacterString_PropertyType'
        gco__CharacterString_USCOREPropertyType *page;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__CI_USCORESeries_USCOREType, default initialized and not managed by a soap context
        virtual gmd__CI_USCORESeries_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__CI_USCORESeries_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__CI_USCORESeries_USCOREType() : name(), issueIdentification(), page() { }
        virtual ~gmd__CI_USCORESeries_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__CI_USCORESeries_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__CI_USCORESeries_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__CI_USCORESeries_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1818 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType (-784)
/* complex XML schema type 'gmd:AbstractDQ_Result_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREResult_USCOREType : public gco__AbstractObject_USCOREType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREResult_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREResult_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREResult_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractDQ_USCOREResult_USCOREType() { }
        virtual ~gmd__AbstractDQ_USCOREResult_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREResult_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREResult_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREResult_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType (-791)
/* simple XML schema type 'gco:CodeListValue_Type': */
class SOAP_CMAC gco__CodeListValue_USCOREType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
        /// Required attribute 'codeList' of XML schema type 'xsd:anyURI'
        std::string codeList;
        /// Required attribute 'codeListValue' of XML schema type 'xsd:anyURI'
        std::string codeListValue;
        /// Optional attribute 'codeSpace' of XML schema type 'xsd:anyURI'
        std::string *codeSpace;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gco__CodeListValue_USCOREType, default initialized and not managed by a soap context
        virtual gco__CodeListValue_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gco__CodeListValue_USCOREType); }
      public:
        /// Constructor with default initializations
        gco__CodeListValue_USCOREType() : __item(), codeList(), codeListValue(), codeSpace(), soap() { }
        virtual ~gco__CodeListValue_USCOREType() { }
        /// Friend allocator used by soap_new_gco__CodeListValue_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gco__CodeListValue_USCOREType * SOAP_FMAC2 soap_instantiate_gco__CodeListValue_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:324 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LocalDepth3dCrs
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LocalDepth3dCrs (-37)
/* complex XML schema type 'resqml2:LocalDepth3dCrs': */
class SOAP_CMAC resqml2__LocalDepth3dCrs : public resqml2__AbstractLocal3dCrs {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__LocalDepth3dCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__LocalDepth3dCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__LocalDepth3dCrs, default initialized and not managed by a soap context
        virtual resqml2__LocalDepth3dCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__LocalDepth3dCrs); }
      public:
        /// Constructor with default initializations
        resqml2__LocalDepth3dCrs() { }
        virtual ~resqml2__LocalDepth3dCrs() { }
        /// Friend allocator used by soap_new_resqml2__LocalDepth3dCrs(struct soap*, int)
        friend SOAP_FMAC1 resqml2__LocalDepth3dCrs * SOAP_FMAC2 soap_instantiate_resqml2__LocalDepth3dCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:326 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LocalTime3dCrs
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LocalTime3dCrs (-38)
/* complex XML schema type 'resqml2:LocalTime3dCrs': */
class SOAP_CMAC resqml2__LocalTime3dCrs : public resqml2__AbstractLocal3dCrs {
      public:
        /// Required element 'resqml2:TimeUom' of XML schema type 'eml22:TimeUomExt'
        std::string TimeUom;
        /// Optional element 'resqml2:CustomUnitDictionary' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CustomUnitDictionary;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__LocalTime3dCrs
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__LocalTime3dCrs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__LocalTime3dCrs, default initialized and not managed by a soap context
        virtual resqml2__LocalTime3dCrs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__LocalTime3dCrs); }
      public:
        /// Constructor with default initializations
        resqml2__LocalTime3dCrs() : TimeUom(), CustomUnitDictionary() { }
        virtual ~resqml2__LocalTime3dCrs() { }
        /// Friend allocator used by soap_new_resqml2__LocalTime3dCrs(struct soap*, int)
        friend SOAP_FMAC1 resqml2__LocalTime3dCrs * SOAP_FMAC2 soap_instantiate_resqml2__LocalTime3dCrs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:330 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTechnicalFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTechnicalFeature (-40)
/* complex XML schema type 'resqml2:AbstractTechnicalFeature': */
class SOAP_CMAC resqml2__AbstractTechnicalFeature : public resqml2__AbstractFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTechnicalFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTechnicalFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractTechnicalFeature, default initialized and not managed by a soap context
        virtual resqml2__AbstractTechnicalFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractTechnicalFeature); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractTechnicalFeature() { }
        virtual ~resqml2__AbstractTechnicalFeature() { }
        /// Friend allocator used by soap_new_resqml2__AbstractTechnicalFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractTechnicalFeature * SOAP_FMAC2 soap_instantiate_resqml2__AbstractTechnicalFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:332 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeature (-41)
/* complex XML schema type 'resqml2:BoundaryFeature': */
class SOAP_CMAC resqml2__BoundaryFeature : public resqml2__AbstractFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BoundaryFeature, default initialized and not managed by a soap context
        virtual resqml2__BoundaryFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BoundaryFeature); }
      public:
        /// Constructor with default initializations
        resqml2__BoundaryFeature() { }
        virtual ~resqml2__BoundaryFeature() { }
        /// Friend allocator used by soap_new_resqml2__BoundaryFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BoundaryFeature * SOAP_FMAC2 soap_instantiate_resqml2__BoundaryFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:336 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Model
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Model (-43)
/* complex XML schema type 'resqml2:Model': */
class SOAP_CMAC resqml2__Model : public resqml2__AbstractFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Model
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Model; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Model, default initialized and not managed by a soap context
        virtual resqml2__Model *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Model); }
      public:
        /// Constructor with default initializations
        resqml2__Model() { }
        virtual ~resqml2__Model() { }
        /// Friend allocator used by soap_new_resqml2__Model(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Model * SOAP_FMAC2 soap_instantiate_resqml2__Model(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:338 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeature (-44)
/* complex XML schema type 'resqml2:RockVolumeFeature': */
class SOAP_CMAC resqml2__RockVolumeFeature : public resqml2__AbstractFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RockVolumeFeature, default initialized and not managed by a soap context
        virtual resqml2__RockVolumeFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RockVolumeFeature); }
      public:
        /// Constructor with default initializations
        resqml2__RockVolumeFeature() { }
        virtual ~resqml2__RockVolumeFeature() { }
        /// Friend allocator used by soap_new_resqml2__RockVolumeFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RockVolumeFeature * SOAP_FMAC2 soap_instantiate_resqml2__RockVolumeFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:346 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractOrganizationInterpretation (-48)
/* complex XML schema type 'resqml2:AbstractOrganizationInterpretation': */
class SOAP_CMAC resqml2__AbstractOrganizationInterpretation : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml2:ContactInterpretation' of XML schema type 'resqml2:AbstractContactInterpretationPart'
        std::vector<resqml2__AbstractContactInterpretationPart *> ContactInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml2__AbstractOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractOrganizationInterpretation() : ContactInterpretation() { }
        virtual ~resqml2__AbstractOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:354 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretation (-52)
/* complex XML schema type 'resqml2:BoundaryFeatureInterpretation': */
class SOAP_CMAC resqml2__BoundaryFeatureInterpretation : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml2:OlderPossibleAge' of XML schema type 'xsd:long'
        LONG64 *OlderPossibleAge;
        /// Optional element 'resqml2:YoungerPossibleAge' of XML schema type 'xsd:long'
        LONG64 *YoungerPossibleAge;
        /// Optional element 'resqml2:AbsoluteAge' of XML schema type 'eml22:GeologicTime'
        eml22__GeologicTime *AbsoluteAge;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BoundaryFeatureInterpretation, default initialized and not managed by a soap context
        virtual resqml2__BoundaryFeatureInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BoundaryFeatureInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__BoundaryFeatureInterpretation() : OlderPossibleAge(), YoungerPossibleAge(), AbsoluteAge() { }
        virtual ~resqml2__BoundaryFeatureInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__BoundaryFeatureInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BoundaryFeatureInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__BoundaryFeatureInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:360 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EarthModelInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EarthModelInterpretation (-55)
/* complex XML schema type 'resqml2:EarthModelInterpretation': */
class SOAP_CMAC resqml2__EarthModelInterpretation : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml2:Fluid' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Fluid;
        /// Optional element 'resqml2:Structure' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Structure;
        /// Optional element 'resqml2:StratigraphicOccurrences' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> StratigraphicOccurrences;
        /// Optional element 'resqml2:StratigraphicColumn' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *StratigraphicColumn;
        /// Optional element 'resqml2:WellboreInterpretationSet' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> WellboreInterpretationSet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__EarthModelInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__EarthModelInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__EarthModelInterpretation, default initialized and not managed by a soap context
        virtual resqml2__EarthModelInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__EarthModelInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__EarthModelInterpretation() : Fluid(), Structure(), StratigraphicOccurrences(), StratigraphicColumn(), WellboreInterpretationSet() { }
        virtual ~resqml2__EarthModelInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__EarthModelInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__EarthModelInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__EarthModelInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:370 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GenericFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GenericFeatureInterpretation (-60)
/* complex XML schema type 'resqml2:GenericFeatureInterpretation': */
class SOAP_CMAC resqml2__GenericFeatureInterpretation : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GenericFeatureInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GenericFeatureInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GenericFeatureInterpretation, default initialized and not managed by a soap context
        virtual resqml2__GenericFeatureInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GenericFeatureInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__GenericFeatureInterpretation() { }
        virtual ~resqml2__GenericFeatureInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__GenericFeatureInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GenericFeatureInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__GenericFeatureInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:380 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitInterpretation (-65)
/* complex XML schema type 'resqml2:GeologicUnitInterpretation': */
class SOAP_CMAC resqml2__GeologicUnitInterpretation : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml2:GeologicUnitComposition' of XML schema type 'eml22:LithologyKindExt'
        std::string *GeologicUnitComposition;
        /// Optional element 'resqml2:GeologicUnitMaterialEmplacement' of XML schema type 'resqml2:GeologicUnitMaterialEmplacement'
        enum resqml2__GeologicUnitMaterialEmplacement *GeologicUnitMaterialEmplacement;
        /// Optional element 'resqml2:GeologicUnit3dShape' of XML schema type 'resqml2:Shape3dExt'
        std::string *GeologicUnit3dShape;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GeologicUnitInterpretation, default initialized and not managed by a soap context
        virtual resqml2__GeologicUnitInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GeologicUnitInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__GeologicUnitInterpretation() : GeologicUnitComposition(), GeologicUnitMaterialEmplacement(), GeologicUnit3dShape() { }
        virtual ~resqml2__GeologicUnitInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__GeologicUnitInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GeologicUnitInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__GeologicUnitInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:406 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DeviationSurveyRepresentation (-78)
/* complex XML schema type 'resqml2:DeviationSurveyRepresentation': */
class SOAP_CMAC resqml2__DeviationSurveyRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:AngleUom' of XML schema type 'eml22:PlaneAngleUomExt'
        std::string AngleUom;
        /// Optional element 'resqml2:AngleUomCustomDict' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *AngleUomCustomDict;
        /// Required element 'resqml2:Azimuths' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *Azimuths;
        /// Required element 'resqml2:FirstStationLocation' of XML schema type 'resqml2:SinglePointGeometry'
        resqml2__SinglePointGeometry *FirstStationLocation;
        /// Required element 'resqml2:Inclinations' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *Inclinations;
        /// Required element 'resqml2:IsFinal' of XML schema type 'xsd:boolean'
        bool IsFinal;
        /// Required element 'resqml2:Mds' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *Mds;
        /// Required element 'resqml2:MdUom' of XML schema type 'eml22:LengthUomExt'
        std::string MdUom;
        /// Optional element 'resqml2:MdUomCustomDict' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *MdUomCustomDict;
        /// Required element 'resqml2:StationCount' of XML schema type 'eml22:PositiveLong'
        LONG64 StationCount;
        /// Optional element 'resqml2:WitsmlDeviationSurvey' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WitsmlDeviationSurvey;
        /// Required element 'resqml2:MdDatum' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *MdDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DeviationSurveyRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DeviationSurveyRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DeviationSurveyRepresentation, default initialized and not managed by a soap context
        virtual resqml2__DeviationSurveyRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DeviationSurveyRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__DeviationSurveyRepresentation() : AngleUom(), AngleUomCustomDict(), Azimuths(), FirstStationLocation(), Inclinations(), IsFinal(), Mds(), MdUom(), MdUomCustomDict(), StationCount(), WitsmlDeviationSurvey(), MdDatum() { }
        virtual ~resqml2__DeviationSurveyRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__DeviationSurveyRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DeviationSurveyRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__DeviationSurveyRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:416 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameRepresentation (-83)
/* complex XML schema type 'resqml2:WellboreFrameRepresentation': */
class SOAP_CMAC resqml2__WellboreFrameRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:NodeCount' of XML schema type 'eml22:PositiveLong'
        LONG64 NodeCount;
        /// Required element 'resqml2:NodeMd' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *NodeMd;
        /// Optional element 'resqml2:WitsmlLog' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WitsmlLog;
        /// Required element 'resqml2:Trajectory' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Trajectory;
        /// Optional element 'resqml2:IntervalStratigraphiUnits' of XML schema type 'resqml2:IntervalStratigraphicUnits'
        std::vector<resqml2__IntervalStratigraphicUnits *> IntervalStratigraphiUnits;
        /// Optional element 'resqml2:CellFluidPhaseUnits' of XML schema type 'resqml2:CellFluidPhaseUnits'
        resqml2__CellFluidPhaseUnits *CellFluidPhaseUnits;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreFrameRepresentation, default initialized and not managed by a soap context
        virtual resqml2__WellboreFrameRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreFrameRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreFrameRepresentation() : NodeCount(), NodeMd(), WitsmlLog(), Trajectory(), IntervalStratigraphiUnits(), CellFluidPhaseUnits() { }
        virtual ~resqml2__WellboreFrameRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__WellboreFrameRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreFrameRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__WellboreFrameRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:418 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretation (-84)
/* complex XML schema type 'resqml2:WellboreInterpretation': */
class SOAP_CMAC resqml2__WellboreInterpretation : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Required element 'resqml2:IsDrilled' of XML schema type 'xsd:boolean'
        bool IsDrilled;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreInterpretation, default initialized and not managed by a soap context
        virtual resqml2__WellboreInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreInterpretation() : IsDrilled() { }
        virtual ~resqml2__WellboreInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__WellboreInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__WellboreInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:420 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretationSet (-85)
/* complex XML schema type 'resqml2:WellboreInterpretationSet': */
class SOAP_CMAC resqml2__WellboreInterpretationSet : public resqml2__AbstractFeatureInterpretation {
      public:
        /// Optional element 'resqml2:WellboreInterpretation' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> WellboreInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretationSet
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretationSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreInterpretationSet, default initialized and not managed by a soap context
        virtual resqml2__WellboreInterpretationSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreInterpretationSet); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreInterpretationSet() : WellboreInterpretation() { }
        virtual ~resqml2__WellboreInterpretationSet() { }
        /// Friend allocator used by soap_new_resqml2__WellboreInterpretationSet(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreInterpretationSet * SOAP_FMAC2 soap_instantiate_resqml2__WellboreInterpretationSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:428 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryRepresentation (-89)
/* complex XML schema type 'resqml2:WellboreTrajectoryRepresentation': */
class SOAP_CMAC resqml2__WellboreTrajectoryRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:StartMd' of XML schema type 'xsd:double'
        double StartMd;
        /// Required element 'resqml2:FinishMd' of XML schema type 'xsd:double'
        double FinishMd;
        /// Required element 'resqml2:MdUom' of XML schema type 'eml22:LengthUomExt'
        std::string MdUom;
        /// Optional element 'resqml2:CustomUnitDictionary' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CustomUnitDictionary;
        /// Optional element 'resqml2:MdDomain' of XML schema type 'resqml2:MdDomain'
        enum resqml2__MdDomain *MdDomain;
        /// Optional element 'resqml2:WitsmlTrajectory' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *WitsmlTrajectory;
        /// Optional element 'resqml2:ParentIntersection' of XML schema type 'resqml2:WellboreTrajectoryParentIntersection'
        resqml2__WellboreTrajectoryParentIntersection *ParentIntersection;
        /// Required element 'resqml2:MdDatum' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *MdDatum;
        /// Optional element 'resqml2:DeviationSurvey' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *DeviationSurvey;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:AbstractParametricLineGeometry'
        resqml2__AbstractParametricLineGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreTrajectoryRepresentation, default initialized and not managed by a soap context
        virtual resqml2__WellboreTrajectoryRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreTrajectoryRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreTrajectoryRepresentation() : StartMd(), FinishMd(), MdUom(), CustomUnitDictionary(), MdDomain(), WitsmlTrajectory(), ParentIntersection(), MdDatum(), DeviationSurvey(), Geometry() { }
        virtual ~resqml2__WellboreTrajectoryRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__WellboreTrajectoryRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreTrajectoryRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__WellboreTrajectoryRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:436 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceRepresentation (-93)
/* complex XML schema type 'resqml2:AbstractSurfaceRepresentation': */
class SOAP_CMAC resqml2__AbstractSurfaceRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:SurfaceRole' of XML schema type 'resqml2:SurfaceRole'
        enum resqml2__SurfaceRole SurfaceRole;
        /// Optional element 'resqml2:Boundaries' of XML schema type 'resqml2:PatchBoundaries'
        std::vector<resqml2__PatchBoundaries *> Boundaries;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractSurfaceRepresentation, default initialized and not managed by a soap context
        virtual resqml2__AbstractSurfaceRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractSurfaceRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractSurfaceRepresentation() : SurfaceRole(), Boundaries() { }
        virtual ~resqml2__AbstractSurfaceRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractSurfaceRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractSurfaceRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractSurfaceRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:440 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactPatch (-95)
/* complex XML schema type 'resqml2:ContactPatch': */
class SOAP_CMAC resqml2__ContactPatch : public resqml2__Patch1d {
      public:
        /// Required element 'resqml2:RepresentationIndex' of XML schema type 'eml22:NonNegativeLong'
        LONG64 RepresentationIndex;
        /// Required element 'resqml2:SupportingRepresentationNodes' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *SupportingRepresentationNodes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContactPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContactPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContactPatch, default initialized and not managed by a soap context
        virtual resqml2__ContactPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContactPatch); }
      public:
        /// Constructor with default initializations
        resqml2__ContactPatch() : RepresentationIndex(), SupportingRepresentationNodes() { }
        virtual ~resqml2__ContactPatch() { }
        /// Friend allocator used by soap_new_resqml2__ContactPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContactPatch * SOAP_FMAC2 soap_instantiate_resqml2__ContactPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:444 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatch (-97)
/* complex XML schema type 'resqml2:EdgePatch': */
class SOAP_CMAC resqml2__EdgePatch : public resqml2__Patch1d {
      public:
        /// Optional element 'resqml2:SplitEdges' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *SplitEdges;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__EdgePatch, default initialized and not managed by a soap context
        virtual resqml2__EdgePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__EdgePatch); }
      public:
        /// Constructor with default initializations
        resqml2__EdgePatch() : SplitEdges() { }
        virtual ~resqml2__EdgePatch() { }
        /// Friend allocator used by soap_new_resqml2__EdgePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__EdgePatch * SOAP_FMAC2 soap_instantiate_resqml2__EdgePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:452 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NodePatch (-101)
/* complex XML schema type 'resqml2:NodePatch': */
class SOAP_CMAC resqml2__NodePatch : public resqml2__Patch1d {
      public:
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:PointGeometry'
        resqml2__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__NodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__NodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__NodePatch, default initialized and not managed by a soap context
        virtual resqml2__NodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__NodePatch); }
      public:
        /// Constructor with default initializations
        resqml2__NodePatch() : Geometry() { }
        virtual ~resqml2__NodePatch() { }
        /// Friend allocator used by soap_new_resqml2__NodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__NodePatch * SOAP_FMAC2 soap_instantiate_resqml2__NodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:464 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PointSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PointSetRepresentation (-107)
/* complex XML schema type 'resqml2:PointSetRepresentation': */
class SOAP_CMAC resqml2__PointSetRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:NodePatch' of XML schema type 'resqml2:NodePatch'
        std::vector<resqml2__NodePatch *> NodePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PointSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PointSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PointSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__PointSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PointSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__PointSetRepresentation() : NodePatch() { }
        virtual ~resqml2__PointSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__PointSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PointSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__PointSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineRepresentation (-108)
/* complex XML schema type 'resqml2:PolylineRepresentation': */
class SOAP_CMAC resqml2__PolylineRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Optional element 'resqml2:LineRole' of XML schema type 'resqml2:LineRole'
        enum resqml2__LineRole *LineRole;
        /// Required element 'resqml2:IsClosed' of XML schema type 'xsd:boolean'
        bool IsClosed;
        /// Required element 'resqml2:NodePatch' of XML schema type 'resqml2:NodePatch'
        resqml2__NodePatch *NodePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PolylineRepresentation, default initialized and not managed by a soap context
        virtual resqml2__PolylineRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PolylineRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__PolylineRepresentation() : LineRole(), IsClosed(), NodePatch() { }
        virtual ~resqml2__PolylineRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__PolylineRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PolylineRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__PolylineRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:474 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TrianglePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TrianglePatch (-112)
/* complex XML schema type 'resqml2:TrianglePatch': */
class SOAP_CMAC resqml2__TrianglePatch : public resqml2__Patch1d {
      public:
        /// Required element 'resqml2:NodeCount' of XML schema type 'eml22:NonNegativeLong'
        LONG64 NodeCount;
        /// Required element 'resqml2:Triangles' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *Triangles;
        /// Optional element 'resqml2:SplitEdgePatch' of XML schema type 'resqml2:EdgePatch'
        std::vector<resqml2__EdgePatch *> SplitEdgePatch;
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:PointGeometry'
        resqml2__PointGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TrianglePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TrianglePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TrianglePatch, default initialized and not managed by a soap context
        virtual resqml2__TrianglePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TrianglePatch); }
      public:
        /// Constructor with default initializations
        resqml2__TrianglePatch() : NodeCount(), Triangles(), SplitEdgePatch(), Geometry() { }
        virtual ~resqml2__TrianglePatch() { }
        /// Friend allocator used by soap_new_resqml2__TrianglePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TrianglePatch * SOAP_FMAC2 soap_instantiate_resqml2__TrianglePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:492 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HorizontalPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HorizontalPlaneGeometry (-121)
/* complex XML schema type 'resqml2:HorizontalPlaneGeometry': */
class SOAP_CMAC resqml2__HorizontalPlaneGeometry : public resqml2__AbstractPlaneGeometry {
      public:
        /// Required element 'resqml2:Coordinate' of XML schema type 'xsd:double'
        double Coordinate;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__HorizontalPlaneGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__HorizontalPlaneGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__HorizontalPlaneGeometry, default initialized and not managed by a soap context
        virtual resqml2__HorizontalPlaneGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__HorizontalPlaneGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__HorizontalPlaneGeometry() : Coordinate() { }
        virtual ~resqml2__HorizontalPlaneGeometry() { }
        /// Friend allocator used by soap_new_resqml2__HorizontalPlaneGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__HorizontalPlaneGeometry * SOAP_FMAC2 soap_instantiate_resqml2__HorizontalPlaneGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:496 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationGeometry (-123)
/* complex XML schema type 'resqml2:ParametricLineFromRepresentationGeometry': */
class SOAP_CMAC resqml2__ParametricLineFromRepresentationGeometry : public resqml2__AbstractParametricLineGeometry {
      public:
        /// Required element 'resqml2:LineIndexOnSupportingRepresentation' of XML schema type 'eml22:NonNegativeLong'
        LONG64 LineIndexOnSupportingRepresentation;
        /// Required element 'resqml2:SupportingRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ParametricLineFromRepresentationGeometry, default initialized and not managed by a soap context
        virtual resqml2__ParametricLineFromRepresentationGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ParametricLineFromRepresentationGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__ParametricLineFromRepresentationGeometry() : LineIndexOnSupportingRepresentation(), SupportingRepresentation() { }
        virtual ~resqml2__ParametricLineFromRepresentationGeometry() { }
        /// Friend allocator used by soap_new_resqml2__ParametricLineFromRepresentationGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ParametricLineFromRepresentationGeometry * SOAP_FMAC2 soap_instantiate_resqml2__ParametricLineFromRepresentationGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:500 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineGeometry (-125)
/* complex XML schema type 'resqml2:ParametricLineGeometry': */
class SOAP_CMAC resqml2__ParametricLineGeometry : public resqml2__AbstractParametricLineGeometry {
      public:
        /// Optional element 'resqml2:ControlPointParameters' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *ControlPointParameters;
        /// Required element 'resqml2:ControlPoints' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *ControlPoints;
        /// Required element 'resqml2:KnotCount' of XML schema type 'eml22:PositiveLong'
        LONG64 KnotCount;
        /// Required element 'resqml2:LineKindIndex' of XML schema type 'xsd:long'
        LONG64 LineKindIndex;
        /// Optional element 'resqml2:TangentVectors' of XML schema type 'resqml2:AbstractPoint3dArray'
        resqml2__AbstractPoint3dArray *TangentVectors;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ParametricLineGeometry, default initialized and not managed by a soap context
        virtual resqml2__ParametricLineGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ParametricLineGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__ParametricLineGeometry() : ControlPointParameters(), ControlPoints(), KnotCount(), LineKindIndex(), TangentVectors() { }
        virtual ~resqml2__ParametricLineGeometry() { }
        /// Friend allocator used by soap_new_resqml2__ParametricLineGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ParametricLineGeometry * SOAP_FMAC2 soap_instantiate_resqml2__ParametricLineGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:526 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TiltedPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TiltedPlaneGeometry (-138)
/* complex XML schema type 'resqml2:TiltedPlaneGeometry': */
class SOAP_CMAC resqml2__TiltedPlaneGeometry : public resqml2__AbstractPlaneGeometry {
      public:
        /// Required element 'resqml2:Plane' of XML schema type 'resqml2:ThreePoint3d'
        std::vector<resqml2__ThreePoint3d *> Plane;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TiltedPlaneGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TiltedPlaneGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TiltedPlaneGeometry, default initialized and not managed by a soap context
        virtual resqml2__TiltedPlaneGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TiltedPlaneGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__TiltedPlaneGeometry() : Plane() { }
        virtual ~resqml2__TiltedPlaneGeometry() { }
        /// Friend allocator used by soap_new_resqml2__TiltedPlaneGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TiltedPlaneGeometry * SOAP_FMAC2 soap_instantiate_resqml2__TiltedPlaneGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:538 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dPostStackRepresentation (-144)
/* complex XML schema type 'resqml2:Seismic2dPostStackRepresentation': */
class SOAP_CMAC resqml2__Seismic2dPostStackRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:SeismicLineSubSampling' of XML schema type 'eml22:IntegerLatticeArray'
        eml22__IntegerLatticeArray *SeismicLineSubSampling;
        /// Required element 'resqml2:TraceSampling' of XML schema type 'eml22:FloatingPointLatticeArray'
        eml22__FloatingPointLatticeArray *TraceSampling;
        /// Required element 'resqml2:SeismicLineRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SeismicLineRepresentation;
        /// Required element 'resqml2:LocalCrs' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *LocalCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dPostStackRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dPostStackRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Seismic2dPostStackRepresentation, default initialized and not managed by a soap context
        virtual resqml2__Seismic2dPostStackRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Seismic2dPostStackRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__Seismic2dPostStackRepresentation() : SeismicLineSubSampling(), TraceSampling(), SeismicLineRepresentation(), LocalCrs() { }
        virtual ~resqml2__Seismic2dPostStackRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__Seismic2dPostStackRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Seismic2dPostStackRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__Seismic2dPostStackRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:556 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridGeometry (-153)
/* complex XML schema type 'resqml2:AbstractGridGeometry': */
class SOAP_CMAC resqml2__AbstractGridGeometry : public resqml2__PointGeometry {
      public:
        /// Optional element 'resqml2:AdditionalGridPoints' of XML schema type 'resqml2:AdditionalGridPoints'
        std::vector<resqml2__AdditionalGridPoints *> AdditionalGridPoints;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractGridGeometry, default initialized and not managed by a soap context
        virtual resqml2__AbstractGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractGridGeometry() : AdditionalGridPoints() { }
        virtual ~resqml2__AbstractGridGeometry() { }
        /// Friend allocator used by soap_new_resqml2__AbstractGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractGridGeometry * SOAP_FMAC2 soap_instantiate_resqml2__AbstractGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:558 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridRepresentation (-154)
/* complex XML schema type 'resqml2:AbstractGridRepresentation': */
class SOAP_CMAC resqml2__AbstractGridRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Optional element 'resqml2:CellFluidPhaseUnits' of XML schema type 'resqml2:CellFluidPhaseUnits'
        resqml2__CellFluidPhaseUnits *CellFluidPhaseUnits;
        /// Optional element 'resqml2:ParentWindow' of XML schema type 'resqml2:AbstractParentWindow'
        resqml2__AbstractParentWindow *ParentWindow;
        /// Optional element 'resqml2:IntervalStratigraphicUnits' of XML schema type 'resqml2:IntervalStratigraphicUnits'
        resqml2__IntervalStratigraphicUnits *IntervalStratigraphicUnits;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__AbstractGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractGridRepresentation() : CellFluidPhaseUnits(), ParentWindow(), IntervalStratigraphicUnits() { }
        virtual ~resqml2__AbstractGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:586 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnSubnodePatch (-168)
/* complex XML schema type 'resqml2:ColumnSubnodePatch': */
class SOAP_CMAC resqml2__ColumnSubnodePatch : public resqml2__SubnodePatch {
      public:
        /// Required element 'resqml2:SubnodeCountPerObject' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *SubnodeCountPerObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnSubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnSubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ColumnSubnodePatch, default initialized and not managed by a soap context
        virtual resqml2__ColumnSubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ColumnSubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml2__ColumnSubnodePatch() : SubnodeCountPerObject() { }
        virtual ~resqml2__ColumnSubnodePatch() { }
        /// Friend allocator used by soap_new_resqml2__ColumnSubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ColumnSubnodePatch * SOAP_FMAC2 soap_instantiate_resqml2__ColumnSubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:594 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GridConnectionSetRepresentation (-172)
/* complex XML schema type 'resqml2:GridConnectionSetRepresentation': */
class SOAP_CMAC resqml2__GridConnectionSetRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'resqml2:CellIndexPairs' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *CellIndexPairs;
        /// Optional element 'resqml2:GridIndexPairs' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *GridIndexPairs;
        /// Optional element 'resqml2:LocalFacePerCellIndexPairs' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *LocalFacePerCellIndexPairs;
        /// Optional element 'resqml2:ConnectionInterpretations' of XML schema type 'resqml2:ConnectionInterpretations'
        resqml2__ConnectionInterpretations *ConnectionInterpretations;
        /// Required element 'resqml2:Grid' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Grid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GridConnectionSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GridConnectionSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GridConnectionSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__GridConnectionSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GridConnectionSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__GridConnectionSetRepresentation() : Count(), CellIndexPairs(), GridIndexPairs(), LocalFacePerCellIndexPairs(), ConnectionInterpretations(), Grid() { }
        virtual ~resqml2__GridConnectionSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__GridConnectionSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GridConnectionSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__GridConnectionSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:638 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UniformSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UniformSubnodePatch (-194)
/* complex XML schema type 'resqml2:UniformSubnodePatch': */
class SOAP_CMAC resqml2__UniformSubnodePatch : public resqml2__SubnodePatch {
      public:
        /// Required element 'resqml2:SubnodeCountPerObject' of XML schema type 'eml22:PositiveLong'
        LONG64 SubnodeCountPerObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UniformSubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UniformSubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UniformSubnodePatch, default initialized and not managed by a soap context
        virtual resqml2__UniformSubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UniformSubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml2__UniformSubnodePatch() : SubnodeCountPerObject() { }
        virtual ~resqml2__UniformSubnodePatch() { }
        /// Friend allocator used by soap_new_resqml2__UniformSubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UniformSubnodePatch * SOAP_FMAC2 soap_instantiate_resqml2__UniformSubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:658 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__VariableSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__VariableSubnodePatch (-204)
/* complex XML schema type 'resqml2:VariableSubnodePatch': */
class SOAP_CMAC resqml2__VariableSubnodePatch : public resqml2__SubnodePatch {
      public:
        /// Required element 'resqml2:ObjectIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *ObjectIndices;
        /// Required element 'resqml2:SubnodeCountPerSelectedObject' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *SubnodeCountPerSelectedObject;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__VariableSubnodePatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__VariableSubnodePatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__VariableSubnodePatch, default initialized and not managed by a soap context
        virtual resqml2__VariableSubnodePatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__VariableSubnodePatch); }
      public:
        /// Constructor with default initializations
        resqml2__VariableSubnodePatch() : ObjectIndices(), SubnodeCountPerSelectedObject() { }
        virtual ~resqml2__VariableSubnodePatch() { }
        /// Friend allocator used by soap_new_resqml2__VariableSubnodePatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__VariableSubnodePatch * SOAP_FMAC2 soap_instantiate_resqml2__VariableSubnodePatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:674 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetRepresentation (-212)
/* complex XML schema type 'resqml2:PolylineSetRepresentation': */
class SOAP_CMAC resqml2__PolylineSetRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Optional element 'resqml2:LineRole' of XML schema type 'resqml2:LineRole'
        enum resqml2__LineRole *LineRole;
        /// Required element 'resqml2:LinePatch' of XML schema type 'resqml2:PolylineSetPatch'
        std::vector<resqml2__PolylineSetPatch *> LinePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PolylineSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__PolylineSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PolylineSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__PolylineSetRepresentation() : LineRole(), LinePatch() { }
        virtual ~resqml2__PolylineSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__PolylineSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PolylineSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__PolylineSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:676 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RedefinedGeometryRepresentation (-213)
/* complex XML schema type 'resqml2:RedefinedGeometryRepresentation': */
class SOAP_CMAC resqml2__RedefinedGeometryRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:PatchOfGeometry' of XML schema type 'resqml2:PatchOfGeometry'
        std::vector<resqml2__PatchOfGeometry *> PatchOfGeometry;
        /// Required element 'resqml2:SupportingRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RedefinedGeometryRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RedefinedGeometryRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RedefinedGeometryRepresentation, default initialized and not managed by a soap context
        virtual resqml2__RedefinedGeometryRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RedefinedGeometryRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__RedefinedGeometryRepresentation() : PatchOfGeometry(), SupportingRepresentation() { }
        virtual ~resqml2__RedefinedGeometryRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__RedefinedGeometryRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RedefinedGeometryRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__RedefinedGeometryRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:682 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationSetRepresentation (-216)
/* complex XML schema type 'resqml2:RepresentationSetRepresentation': */
class SOAP_CMAC resqml2__RepresentationSetRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:IsHomogeneous' of XML schema type 'xsd:boolean'
        bool IsHomogeneous;
        /// Required element 'resqml2:Representation' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Representation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RepresentationSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__RepresentationSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RepresentationSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__RepresentationSetRepresentation() : IsHomogeneous(), Representation() { }
        virtual ~resqml2__RepresentationSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__RepresentationSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RepresentationSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__RepresentationSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:684 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentation (-217)
/* complex XML schema type 'resqml2:SubRepresentation': */
class SOAP_CMAC resqml2__SubRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Optional element 'resqml2:AdditionalGridTopology' of XML schema type 'resqml2:AdditionalGridTopology'
        resqml2__AdditionalGridTopology *AdditionalGridTopology;
        /// Required element 'resqml2:SubRepresentationPatch' of XML schema type 'resqml2:SubRepresentationPatch'
        std::vector<resqml2__SubRepresentationPatch *> SubRepresentationPatch;
        /// Required element 'resqml2:SupportingRepresentation' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> SupportingRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SubRepresentation, default initialized and not managed by a soap context
        virtual resqml2__SubRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SubRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__SubRepresentation() : AdditionalGridTopology(), SubRepresentationPatch(), SupportingRepresentation() { }
        virtual ~resqml2__SubRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__SubRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SubRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__SubRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:686 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentationPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentationPatch (-218)
/* complex XML schema type 'resqml2:SubRepresentationPatch': */
class SOAP_CMAC resqml2__SubRepresentationPatch : public resqml2__Patch1d {
      public:
        /// Sequence of 1 to 2 elements 'resqml2:ElementIndices' of XML schema type 'resqml2:ElementIndices'
        std::vector<resqml2__ElementIndices *> ElementIndices;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentationPatch
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentationPatch; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SubRepresentationPatch, default initialized and not managed by a soap context
        virtual resqml2__SubRepresentationPatch *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SubRepresentationPatch); }
      public:
        /// Constructor with default initializations
        resqml2__SubRepresentationPatch() : ElementIndices() { }
        virtual ~resqml2__SubRepresentationPatch() { }
        /// Friend allocator used by soap_new_resqml2__SubRepresentationPatch(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SubRepresentationPatch * SOAP_FMAC2 soap_instantiate_resqml2__SubRepresentationPatch(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:692 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractValuesProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractValuesProperty (-221)
/* complex XML schema type 'resqml2:AbstractValuesProperty': */
class SOAP_CMAC resqml2__AbstractValuesProperty : public resqml2__AbstractProperty {
      public:
        /// Required element 'resqml2:PatchOfValues' of XML schema type 'resqml2:PatchOfValues'
        std::vector<resqml2__PatchOfValues *> PatchOfValues;
        /// Optional element 'resqml2:Facet' of XML schema type 'resqml2:PropertyKindFacet'
        std::vector<resqml2__PropertyKindFacet *> Facet;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractValuesProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractValuesProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractValuesProperty, default initialized and not managed by a soap context
        virtual resqml2__AbstractValuesProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractValuesProperty); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractValuesProperty() : PatchOfValues(), Facet() { }
        virtual ~resqml2__AbstractValuesProperty() { }
        /// Friend allocator used by soap_new_resqml2__AbstractValuesProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractValuesProperty * SOAP_FMAC2 soap_instantiate_resqml2__AbstractValuesProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:694 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanArrayFromDiscretePropertyArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanArrayFromDiscretePropertyArray (-222)
/* complex XML schema type 'resqml2:BooleanArrayFromDiscretePropertyArray': */
class SOAP_CMAC resqml2__BooleanArrayFromDiscretePropertyArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'resqml2:Value' of XML schema type 'xsd:long'
        LONG64 Value;
        /// Required element 'resqml2:Property' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Property;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanArrayFromDiscretePropertyArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanArrayFromDiscretePropertyArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BooleanArrayFromDiscretePropertyArray, default initialized and not managed by a soap context
        virtual resqml2__BooleanArrayFromDiscretePropertyArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BooleanArrayFromDiscretePropertyArray); }
      public:
        /// Constructor with default initializations
        resqml2__BooleanArrayFromDiscretePropertyArray() : Value(), Property() { }
        virtual ~resqml2__BooleanArrayFromDiscretePropertyArray() { }
        /// Friend allocator used by soap_new_resqml2__BooleanArrayFromDiscretePropertyArray(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BooleanArrayFromDiscretePropertyArray * SOAP_FMAC2 soap_instantiate_resqml2__BooleanArrayFromDiscretePropertyArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:708 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleTableLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleTableLookup (-229)
/* complex XML schema type 'resqml2:DoubleTableLookup': */
class SOAP_CMAC resqml2__DoubleTableLookup : public resqml2__AbstractPropertyLookup {
      public:
        /// Required element 'resqml2:Value' of XML schema type 'resqml2:DoubleLookup'
        std::vector<resqml2__DoubleLookup *> Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleTableLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleTableLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DoubleTableLookup, default initialized and not managed by a soap context
        virtual resqml2__DoubleTableLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DoubleTableLookup); }
      public:
        /// Constructor with default initializations
        resqml2__DoubleTableLookup() : Value() { }
        virtual ~resqml2__DoubleTableLookup() { }
        /// Friend allocator used by soap_new_resqml2__DoubleTableLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DoubleTableLookup * SOAP_FMAC2 soap_instantiate_resqml2__DoubleTableLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:714 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PointsProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PointsProperty (-232)
/* complex XML schema type 'resqml2:PointsProperty': */
class SOAP_CMAC resqml2__PointsProperty : public resqml2__AbstractProperty {
      public:
        /// Required element 'resqml2:PatchOfPoints' of XML schema type 'resqml2:PatchOfPoints'
        std::vector<resqml2__PatchOfPoints *> PatchOfPoints;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PointsProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PointsProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PointsProperty, default initialized and not managed by a soap context
        virtual resqml2__PointsProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PointsProperty); }
      public:
        /// Constructor with default initializations
        resqml2__PointsProperty() : PatchOfPoints() { }
        virtual ~resqml2__PointsProperty() { }
        /// Friend allocator used by soap_new_resqml2__PointsProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PointsProperty * SOAP_FMAC2 soap_instantiate_resqml2__PointsProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:722 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StringTableLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StringTableLookup (-236)
/* complex XML schema type 'resqml2:StringTableLookup': */
class SOAP_CMAC resqml2__StringTableLookup : public resqml2__AbstractPropertyLookup {
      public:
        /// Required element 'resqml2:Value' of XML schema type 'resqml2:StringLookup'
        std::vector<resqml2__StringLookup *> Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StringTableLookup
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StringTableLookup; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StringTableLookup, default initialized and not managed by a soap context
        virtual resqml2__StringTableLookup *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StringTableLookup); }
      public:
        /// Constructor with default initializations
        resqml2__StringTableLookup() : Value() { }
        virtual ~resqml2__StringTableLookup() { }
        /// Friend allocator used by soap_new_resqml2__StringTableLookup(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StringTableLookup * SOAP_FMAC2 soap_instantiate_resqml2__StringTableLookup(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:726 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesRepresentation (-238)
/* complex XML schema type 'resqml2:StreamlinesRepresentation': */
class SOAP_CMAC resqml2__StreamlinesRepresentation : public resqml2__AbstractRepresentation {
      public:
        /// Required element 'resqml2:LineCount' of XML schema type 'eml22:PositiveLong'
        LONG64 LineCount;
        /// Optional element 'resqml2:StreamlineWellbores' of XML schema type 'resqml2:StreamlineWellbores'
        resqml2__StreamlineWellbores *StreamlineWellbores;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:PolylineSetPatch'
        resqml2__PolylineSetPatch *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StreamlinesRepresentation, default initialized and not managed by a soap context
        virtual resqml2__StreamlinesRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StreamlinesRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__StreamlinesRepresentation() : LineCount(), StreamlineWellbores(), Geometry() { }
        virtual ~resqml2__StreamlinesRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__StreamlinesRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StreamlinesRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__StreamlinesRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:742 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray (-246)
/* complex XML schema type 'eml22:AbstractFloatingPointArray': */
class SOAP_CMAC eml22__AbstractFloatingPointArray : public eml22__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractFloatingPointArray, default initialized and not managed by a soap context
        virtual eml22__AbstractFloatingPointArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractFloatingPointArray); }
      public:
        /// Constructor with default initializations
        eml22__AbstractFloatingPointArray() { }
        virtual ~eml22__AbstractFloatingPointArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractFloatingPointArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractFloatingPointArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractFloatingPointArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:744 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray (-247)
/* complex XML schema type 'eml22:AbstractIntegerArray': */
class SOAP_CMAC eml22__AbstractIntegerArray : public eml22__AbstractNumericArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbstractIntegerArray, default initialized and not managed by a soap context
        virtual eml22__AbstractIntegerArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbstractIntegerArray); }
      public:
        /// Constructor with default initializations
        eml22__AbstractIntegerArray() { }
        virtual ~eml22__AbstractIntegerArray() { }
        /// Friend allocator used by soap_new_eml22__AbstractIntegerArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbstractIntegerArray * SOAP_FMAC2 soap_instantiate_eml22__AbstractIntegerArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:754 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray (-252)
/* complex XML schema type 'eml22:BooleanArrayFromIndexArray': */
class SOAP_CMAC eml22__BooleanArrayFromIndexArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'eml22:Indices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *Indices;
        /// Required element 'eml22:IndexIsTrue' of XML schema type 'xsd:boolean'
        bool IndexIsTrue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__BooleanArrayFromIndexArray, default initialized and not managed by a soap context
        virtual eml22__BooleanArrayFromIndexArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__BooleanArrayFromIndexArray); }
      public:
        /// Constructor with default initializations
        eml22__BooleanArrayFromIndexArray() : Count(), Indices(), IndexIsTrue() { }
        virtual ~eml22__BooleanArrayFromIndexArray() { }
        /// Friend allocator used by soap_new_eml22__BooleanArrayFromIndexArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__BooleanArrayFromIndexArray * SOAP_FMAC2 soap_instantiate_eml22__BooleanArrayFromIndexArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:756 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray (-253)
/* complex XML schema type 'eml22:BooleanConstantArray': */
class SOAP_CMAC eml22__BooleanConstantArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'eml22:Value' of XML schema type 'xsd:boolean'
        bool Value;
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__BooleanConstantArray, default initialized and not managed by a soap context
        virtual eml22__BooleanConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__BooleanConstantArray); }
      public:
        /// Constructor with default initializations
        eml22__BooleanConstantArray() : Value(), Count() { }
        virtual ~eml22__BooleanConstantArray() { }
        /// Friend allocator used by soap_new_eml22__BooleanConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__BooleanConstantArray * SOAP_FMAC2 soap_instantiate_eml22__BooleanConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:758 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray (-254)
/* complex XML schema type 'eml22:BooleanExternalArray': */
class SOAP_CMAC eml22__BooleanExternalArray : public eml22__AbstractBooleanArray {
      public:
        /// Required element 'eml22:Values' of XML schema type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__BooleanExternalArray, default initialized and not managed by a soap context
        virtual eml22__BooleanExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__BooleanExternalArray); }
      public:
        /// Constructor with default initializations
        eml22__BooleanExternalArray() : Values() { }
        virtual ~eml22__BooleanExternalArray() { }
        /// Friend allocator used by soap_new_eml22__BooleanExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__BooleanExternalArray * SOAP_FMAC2 soap_instantiate_eml22__BooleanExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:772 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure (-261)
/* simple XML schema type 'eml22:GenericMeasure': */
class SOAP_CMAC eml22__GenericMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:UomEnum'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__GenericMeasure, default initialized and not managed by a soap context
        virtual eml22__GenericMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__GenericMeasure); }
      public:
        /// Constructor with default initializations
        eml22__GenericMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__GenericMeasure() { }
        /// Friend allocator used by soap_new_eml22__GenericMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__GenericMeasure * SOAP_FMAC2 soap_instantiate_eml22__GenericMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:788 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray (-269)
/* complex XML schema type 'eml22:StringConstantArray': */
class SOAP_CMAC eml22__StringConstantArray : public eml22__AbstractStringArray {
      public:
        /// Required element 'eml22:Value' of XML schema type 'eml22:String2000'
        std::string Value;
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringConstantArray, default initialized and not managed by a soap context
        virtual eml22__StringConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringConstantArray); }
      public:
        /// Constructor with default initializations
        eml22__StringConstantArray() : Value(), Count() { }
        virtual ~eml22__StringConstantArray() { }
        /// Friend allocator used by soap_new_eml22__StringConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringConstantArray * SOAP_FMAC2 soap_instantiate_eml22__StringConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:790 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray (-270)
/* complex XML schema type 'eml22:StringExternalArray': */
class SOAP_CMAC eml22__StringExternalArray : public eml22__AbstractStringArray {
      public:
        /// Required element 'eml22:Values' of XML schema type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringExternalArray, default initialized and not managed by a soap context
        virtual eml22__StringExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringExternalArray); }
      public:
        /// Constructor with default initializations
        eml22__StringExternalArray() : Values() { }
        virtual ~eml22__StringExternalArray() { }
        /// Friend allocator used by soap_new_eml22__StringExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringExternalArray * SOAP_FMAC2 soap_instantiate_eml22__StringExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:796 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure (-273)
/* simple XML schema type 'eml22:AbsorbedDoseMeasure': */
class SOAP_CMAC eml22__AbsorbedDoseMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AbsorbedDoseUom'
        enum eml22__AbsorbedDoseUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbsorbedDoseMeasure, default initialized and not managed by a soap context
        virtual eml22__AbsorbedDoseMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbsorbedDoseMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AbsorbedDoseMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AbsorbedDoseMeasure() { }
        /// Friend allocator used by soap_new_eml22__AbsorbedDoseMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbsorbedDoseMeasure * SOAP_FMAC2 soap_instantiate_eml22__AbsorbedDoseMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:798 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt (-274)
/* simple XML schema type 'eml22:AbsorbedDoseMeasureExt': */
class SOAP_CMAC eml22__AbsorbedDoseMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AbsorbedDoseUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AbsorbedDoseMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AbsorbedDoseMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AbsorbedDoseMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AbsorbedDoseMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AbsorbedDoseMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AbsorbedDoseMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AbsorbedDoseMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AbsorbedDoseMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:800 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure (-275)
/* simple XML schema type 'eml22:ActivityOfRadioactivityMeasure': */
class SOAP_CMAC eml22__ActivityOfRadioactivityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ActivityOfRadioactivityUom'
        enum eml22__ActivityOfRadioactivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ActivityOfRadioactivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ActivityOfRadioactivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ActivityOfRadioactivityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ActivityOfRadioactivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ActivityOfRadioactivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ActivityOfRadioactivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ActivityOfRadioactivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ActivityOfRadioactivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:802 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt (-276)
/* simple XML schema type 'eml22:ActivityOfRadioactivityMeasureExt': */
class SOAP_CMAC eml22__ActivityOfRadioactivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ActivityOfRadioactivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ActivityOfRadioactivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ActivityOfRadioactivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ActivityOfRadioactivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ActivityOfRadioactivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ActivityOfRadioactivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ActivityOfRadioactivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ActivityOfRadioactivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ActivityOfRadioactivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:804 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure (-277)
/* simple XML schema type 'eml22:AmountOfSubstanceMeasure': */
class SOAP_CMAC eml22__AmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstanceUom'
        enum eml22__AmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:806 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt (-278)
/* simple XML schema type 'eml22:AmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:808 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure (-279)
/* simple XML schema type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerAmountOfSubstanceUom'
        enum eml22__AmountOfSubstancePerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:810 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-280)
/* simple XML schema type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:812 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure (-281)
/* simple XML schema type 'eml22:AmountOfSubstancePerAreaMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerAreaUom'
        enum eml22__AmountOfSubstancePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:814 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt (-282)
/* simple XML schema type 'eml22:AmountOfSubstancePerAreaMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:816 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure (-283)
/* simple XML schema type 'eml22:AmountOfSubstancePerTimeMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerTimeUom'
        enum eml22__AmountOfSubstancePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:818 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt (-284)
/* simple XML schema type 'eml22:AmountOfSubstancePerTimeMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:820 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure (-285)
/* simple XML schema type 'eml22:AmountOfSubstancePerTimePerAreaMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerTimePerAreaUom'
        enum eml22__AmountOfSubstancePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:822 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt (-286)
/* simple XML schema type 'eml22:AmountOfSubstancePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:824 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure (-287)
/* simple XML schema type 'eml22:AmountOfSubstancePerVolumeMeasure': */
class SOAP_CMAC eml22__AmountOfSubstancePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerVolumeUom'
        enum eml22__AmountOfSubstancePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:826 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt (-288)
/* simple XML schema type 'eml22:AmountOfSubstancePerVolumeMeasureExt': */
class SOAP_CMAC eml22__AmountOfSubstancePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AmountOfSubstancePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AmountOfSubstancePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AmountOfSubstancePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AmountOfSubstancePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AmountOfSubstancePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AmountOfSubstancePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AmountOfSubstancePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AmountOfSubstancePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:828 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure (-289)
/* simple XML schema type 'eml22:AnglePerLengthMeasure': */
class SOAP_CMAC eml22__AnglePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AnglePerLengthUom'
        enum eml22__AnglePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__AnglePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AnglePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__AnglePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__AnglePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:830 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt (-290)
/* simple XML schema type 'eml22:AnglePerLengthMeasureExt': */
class SOAP_CMAC eml22__AnglePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AnglePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AnglePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AnglePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AnglePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AnglePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:832 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure (-291)
/* simple XML schema type 'eml22:AnglePerVolumeMeasure': */
class SOAP_CMAC eml22__AnglePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AnglePerVolumeUom'
        enum eml22__AnglePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__AnglePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AnglePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AnglePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AnglePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:834 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt (-292)
/* simple XML schema type 'eml22:AnglePerVolumeMeasureExt': */
class SOAP_CMAC eml22__AnglePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AnglePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AnglePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AnglePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AnglePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AnglePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AnglePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AnglePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AnglePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AnglePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:836 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure (-293)
/* simple XML schema type 'eml22:AngularAccelerationMeasure': */
class SOAP_CMAC eml22__AngularAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AngularAccelerationUom'
        enum eml22__AngularAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml22__AngularAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AngularAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AngularAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml22__AngularAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml22__AngularAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:838 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt (-294)
/* simple XML schema type 'eml22:AngularAccelerationMeasureExt': */
class SOAP_CMAC eml22__AngularAccelerationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AngularAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AngularAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularAccelerationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AngularAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AngularAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AngularAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AngularAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:840 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure (-295)
/* simple XML schema type 'eml22:AngularVelocityMeasure': */
class SOAP_CMAC eml22__AngularVelocityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AngularVelocityUom'
        enum eml22__AngularVelocityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularVelocityMeasure, default initialized and not managed by a soap context
        virtual eml22__AngularVelocityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularVelocityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AngularVelocityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AngularVelocityMeasure() { }
        /// Friend allocator used by soap_new_eml22__AngularVelocityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularVelocityMeasure * SOAP_FMAC2 soap_instantiate_eml22__AngularVelocityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:842 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt (-296)
/* simple XML schema type 'eml22:AngularVelocityMeasureExt': */
class SOAP_CMAC eml22__AngularVelocityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AngularVelocityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AngularVelocityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AngularVelocityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AngularVelocityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AngularVelocityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AngularVelocityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AngularVelocityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AngularVelocityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AngularVelocityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:844 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure (-297)
/* simple XML schema type 'eml22:APIGammaRayMeasure': */
class SOAP_CMAC eml22__APIGammaRayMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:APIGammaRayUom'
        enum eml22__APIGammaRayUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGammaRayMeasure, default initialized and not managed by a soap context
        virtual eml22__APIGammaRayMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGammaRayMeasure); }
      public:
        /// Constructor with default initializations
        eml22__APIGammaRayMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__APIGammaRayMeasure() { }
        /// Friend allocator used by soap_new_eml22__APIGammaRayMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGammaRayMeasure * SOAP_FMAC2 soap_instantiate_eml22__APIGammaRayMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:846 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt (-298)
/* simple XML schema type 'eml22:APIGammaRayMeasureExt': */
class SOAP_CMAC eml22__APIGammaRayMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:APIGammaRayUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGammaRayMeasureExt, default initialized and not managed by a soap context
        virtual eml22__APIGammaRayMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGammaRayMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__APIGammaRayMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__APIGammaRayMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__APIGammaRayMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGammaRayMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__APIGammaRayMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:848 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure (-299)
/* simple XML schema type 'eml22:APIGravityMeasure': */
class SOAP_CMAC eml22__APIGravityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:APIGravityUom'
        enum eml22__APIGravityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGravityMeasure, default initialized and not managed by a soap context
        virtual eml22__APIGravityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGravityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__APIGravityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__APIGravityMeasure() { }
        /// Friend allocator used by soap_new_eml22__APIGravityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGravityMeasure * SOAP_FMAC2 soap_instantiate_eml22__APIGravityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:850 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt (-300)
/* simple XML schema type 'eml22:APIGravityMeasureExt': */
class SOAP_CMAC eml22__APIGravityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:APIGravityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APIGravityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__APIGravityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APIGravityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__APIGravityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__APIGravityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__APIGravityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__APIGravityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__APIGravityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:852 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure (-301)
/* simple XML schema type 'eml22:APINeutronMeasure': */
class SOAP_CMAC eml22__APINeutronMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:APINeutronUom'
        enum eml22__APINeutronUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APINeutronMeasure, default initialized and not managed by a soap context
        virtual eml22__APINeutronMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APINeutronMeasure); }
      public:
        /// Constructor with default initializations
        eml22__APINeutronMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__APINeutronMeasure() { }
        /// Friend allocator used by soap_new_eml22__APINeutronMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__APINeutronMeasure * SOAP_FMAC2 soap_instantiate_eml22__APINeutronMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:854 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt (-302)
/* simple XML schema type 'eml22:APINeutronMeasureExt': */
class SOAP_CMAC eml22__APINeutronMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:APINeutronUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__APINeutronMeasureExt, default initialized and not managed by a soap context
        virtual eml22__APINeutronMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__APINeutronMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__APINeutronMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__APINeutronMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__APINeutronMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__APINeutronMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__APINeutronMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:856 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure (-303)
/* simple XML schema type 'eml22:AreaMeasure': */
class SOAP_CMAC eml22__AreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaUom'
        enum eml22__AreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:858 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt (-304)
/* simple XML schema type 'eml22:AreaMeasureExt': */
class SOAP_CMAC eml22__AreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:860 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure (-305)
/* simple XML schema type 'eml22:AreaPerAmountOfSubstanceMeasure': */
class SOAP_CMAC eml22__AreaPerAmountOfSubstanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerAmountOfSubstanceUom'
        enum eml22__AreaPerAmountOfSubstanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAmountOfSubstanceMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerAmountOfSubstanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAmountOfSubstanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerAmountOfSubstanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAmountOfSubstanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAmountOfSubstanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAmountOfSubstanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAmountOfSubstanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:862 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt (-306)
/* simple XML schema type 'eml22:AreaPerAmountOfSubstanceMeasureExt': */
class SOAP_CMAC eml22__AreaPerAmountOfSubstanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerAmountOfSubstanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAmountOfSubstanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerAmountOfSubstanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAmountOfSubstanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerAmountOfSubstanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAmountOfSubstanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAmountOfSubstanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAmountOfSubstanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:864 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure (-307)
/* simple XML schema type 'eml22:AreaPerAreaMeasure': */
class SOAP_CMAC eml22__AreaPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerAreaUom'
        enum eml22__AreaPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:866 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt (-308)
/* simple XML schema type 'eml22:AreaPerAreaMeasureExt': */
class SOAP_CMAC eml22__AreaPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:868 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure (-309)
/* simple XML schema type 'eml22:AreaPerCountMeasure': */
class SOAP_CMAC eml22__AreaPerCountMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerCountUom'
        enum eml22__AreaPerCountUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerCountMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerCountMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerCountMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerCountMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerCountMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerCountMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerCountMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerCountMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:870 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt (-310)
/* simple XML schema type 'eml22:AreaPerCountMeasureExt': */
class SOAP_CMAC eml22__AreaPerCountMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerCountUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerCountMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerCountMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerCountMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerCountMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerCountMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerCountMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerCountMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerCountMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:872 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure (-311)
/* simple XML schema type 'eml22:AreaPerMassMeasure': */
class SOAP_CMAC eml22__AreaPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerMassUom'
        enum eml22__AreaPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:874 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt (-312)
/* simple XML schema type 'eml22:AreaPerMassMeasureExt': */
class SOAP_CMAC eml22__AreaPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:876 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure (-313)
/* simple XML schema type 'eml22:AreaPerTimeMeasure': */
class SOAP_CMAC eml22__AreaPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerTimeUom'
        enum eml22__AreaPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:878 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt (-314)
/* simple XML schema type 'eml22:AreaPerTimeMeasureExt': */
class SOAP_CMAC eml22__AreaPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:880 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure (-315)
/* simple XML schema type 'eml22:AreaPerVolumeMeasure': */
class SOAP_CMAC eml22__AreaPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerVolumeUom'
        enum eml22__AreaPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__AreaPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__AreaPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__AreaPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:882 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt (-316)
/* simple XML schema type 'eml22:AreaPerVolumeMeasureExt': */
class SOAP_CMAC eml22__AreaPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AreaPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AreaPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AreaPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AreaPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AreaPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AreaPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AreaPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AreaPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AreaPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:884 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure (-317)
/* simple XML schema type 'eml22:AttenuationPerFrequencyIntervalMeasure': */
class SOAP_CMAC eml22__AttenuationPerFrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AttenuationPerFrequencyIntervalUom'
        enum eml22__AttenuationPerFrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AttenuationPerFrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml22__AttenuationPerFrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AttenuationPerFrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml22__AttenuationPerFrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__AttenuationPerFrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml22__AttenuationPerFrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__AttenuationPerFrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml22__AttenuationPerFrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:886 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt (-318)
/* simple XML schema type 'eml22:AttenuationPerFrequencyIntervalMeasureExt': */
class SOAP_CMAC eml22__AttenuationPerFrequencyIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:AttenuationPerFrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AttenuationPerFrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml22__AttenuationPerFrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AttenuationPerFrequencyIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__AttenuationPerFrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__AttenuationPerFrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__AttenuationPerFrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__AttenuationPerFrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:888 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure (-319)
/* simple XML schema type 'eml22:CapacitanceMeasure': */
class SOAP_CMAC eml22__CapacitanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:CapacitanceUom'
        enum eml22__CapacitanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CapacitanceMeasure, default initialized and not managed by a soap context
        virtual eml22__CapacitanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CapacitanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__CapacitanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__CapacitanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__CapacitanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__CapacitanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__CapacitanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:890 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt (-320)
/* simple XML schema type 'eml22:CapacitanceMeasureExt': */
class SOAP_CMAC eml22__CapacitanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:CapacitanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CapacitanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__CapacitanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CapacitanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__CapacitanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__CapacitanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__CapacitanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__CapacitanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__CapacitanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:892 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure (-321)
/* simple XML schema type 'eml22:CationExchangeCapacityMeasure': */
class SOAP_CMAC eml22__CationExchangeCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:CationExchangeCapacityUom'
        enum eml22__CationExchangeCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CationExchangeCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__CationExchangeCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CationExchangeCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__CationExchangeCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__CationExchangeCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__CationExchangeCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__CationExchangeCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__CationExchangeCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:894 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt (-322)
/* simple XML schema type 'eml22:CationExchangeCapacityMeasureExt': */
class SOAP_CMAC eml22__CationExchangeCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:CationExchangeCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__CationExchangeCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__CationExchangeCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__CationExchangeCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__CationExchangeCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__CationExchangeCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__CationExchangeCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__CationExchangeCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__CationExchangeCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:896 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure (-323)
/* simple XML schema type 'eml22:DataTransferSpeedMeasure': */
class SOAP_CMAC eml22__DataTransferSpeedMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DataTransferSpeedUom'
        enum eml22__DataTransferSpeedUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataTransferSpeedMeasure, default initialized and not managed by a soap context
        virtual eml22__DataTransferSpeedMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataTransferSpeedMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DataTransferSpeedMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DataTransferSpeedMeasure() { }
        /// Friend allocator used by soap_new_eml22__DataTransferSpeedMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataTransferSpeedMeasure * SOAP_FMAC2 soap_instantiate_eml22__DataTransferSpeedMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:898 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt (-324)
/* simple XML schema type 'eml22:DataTransferSpeedMeasureExt': */
class SOAP_CMAC eml22__DataTransferSpeedMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DataTransferSpeedUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DataTransferSpeedMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DataTransferSpeedMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DataTransferSpeedMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DataTransferSpeedMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DataTransferSpeedMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DataTransferSpeedMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DataTransferSpeedMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DataTransferSpeedMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:900 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure (-325)
/* simple XML schema type 'eml22:DiffusionCoefficientMeasure': */
class SOAP_CMAC eml22__DiffusionCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DiffusionCoefficientUom'
        enum eml22__DiffusionCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusionCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml22__DiffusionCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusionCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DiffusionCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusionCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml22__DiffusionCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusionCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml22__DiffusionCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:902 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt (-326)
/* simple XML schema type 'eml22:DiffusionCoefficientMeasureExt': */
class SOAP_CMAC eml22__DiffusionCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DiffusionCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusionCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DiffusionCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusionCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DiffusionCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusionCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DiffusionCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusionCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DiffusionCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:904 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure (-327)
/* simple XML schema type 'eml22:DiffusiveTimeOfFlightMeasure': */
class SOAP_CMAC eml22__DiffusiveTimeOfFlightMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DiffusiveTimeOfFlightUom'
        enum eml22__DiffusiveTimeOfFlightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusiveTimeOfFlightMeasure, default initialized and not managed by a soap context
        virtual eml22__DiffusiveTimeOfFlightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusiveTimeOfFlightMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DiffusiveTimeOfFlightMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusiveTimeOfFlightMeasure() { }
        /// Friend allocator used by soap_new_eml22__DiffusiveTimeOfFlightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusiveTimeOfFlightMeasure * SOAP_FMAC2 soap_instantiate_eml22__DiffusiveTimeOfFlightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:906 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt (-328)
/* simple XML schema type 'eml22:DiffusiveTimeOfFlightMeasureExt': */
class SOAP_CMAC eml22__DiffusiveTimeOfFlightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DiffusiveTimeOfFlightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DiffusiveTimeOfFlightMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DiffusiveTimeOfFlightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DiffusiveTimeOfFlightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DiffusiveTimeOfFlightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DiffusiveTimeOfFlightMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DiffusiveTimeOfFlightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DiffusiveTimeOfFlightMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DiffusiveTimeOfFlightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:908 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure (-329)
/* simple XML schema type 'eml22:DigitalStorageMeasure': */
class SOAP_CMAC eml22__DigitalStorageMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DigitalStorageUom'
        enum eml22__DigitalStorageUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DigitalStorageMeasure, default initialized and not managed by a soap context
        virtual eml22__DigitalStorageMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DigitalStorageMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DigitalStorageMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DigitalStorageMeasure() { }
        /// Friend allocator used by soap_new_eml22__DigitalStorageMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DigitalStorageMeasure * SOAP_FMAC2 soap_instantiate_eml22__DigitalStorageMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:910 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt (-330)
/* simple XML schema type 'eml22:DigitalStorageMeasureExt': */
class SOAP_CMAC eml22__DigitalStorageMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DigitalStorageUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DigitalStorageMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DigitalStorageMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DigitalStorageMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DigitalStorageMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DigitalStorageMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DigitalStorageMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DigitalStorageMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DigitalStorageMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:912 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure (-331)
/* simple XML schema type 'eml22:DimensionlessMeasure': */
class SOAP_CMAC eml22__DimensionlessMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DimensionlessUom'
        enum eml22__DimensionlessUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DimensionlessMeasure, default initialized and not managed by a soap context
        virtual eml22__DimensionlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DimensionlessMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DimensionlessMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DimensionlessMeasure() { }
        /// Friend allocator used by soap_new_eml22__DimensionlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DimensionlessMeasure * SOAP_FMAC2 soap_instantiate_eml22__DimensionlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:914 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt (-332)
/* simple XML schema type 'eml22:DimensionlessMeasureExt': */
class SOAP_CMAC eml22__DimensionlessMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DimensionlessUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DimensionlessMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DimensionlessMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DimensionlessMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DimensionlessMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DimensionlessMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DimensionlessMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DimensionlessMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DimensionlessMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:916 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure (-333)
/* simple XML schema type 'eml22:DipoleMomentMeasure': */
class SOAP_CMAC eml22__DipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DipoleMomentUom'
        enum eml22__DipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml22__DipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml22__DipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml22__DipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:918 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt (-334)
/* simple XML schema type 'eml22:DipoleMomentMeasureExt': */
class SOAP_CMAC eml22__DipoleMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DipoleMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:920 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure (-335)
/* simple XML schema type 'eml22:DoseEquivalentMeasure': */
class SOAP_CMAC eml22__DoseEquivalentMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DoseEquivalentUom'
        enum eml22__DoseEquivalentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoseEquivalentMeasure, default initialized and not managed by a soap context
        virtual eml22__DoseEquivalentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoseEquivalentMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DoseEquivalentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DoseEquivalentMeasure() { }
        /// Friend allocator used by soap_new_eml22__DoseEquivalentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoseEquivalentMeasure * SOAP_FMAC2 soap_instantiate_eml22__DoseEquivalentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:922 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt (-336)
/* simple XML schema type 'eml22:DoseEquivalentMeasureExt': */
class SOAP_CMAC eml22__DoseEquivalentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DoseEquivalentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoseEquivalentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DoseEquivalentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoseEquivalentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DoseEquivalentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DoseEquivalentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DoseEquivalentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoseEquivalentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DoseEquivalentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:924 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure (-337)
/* simple XML schema type 'eml22:DynamicViscosityMeasure': */
class SOAP_CMAC eml22__DynamicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DynamicViscosityUom'
        enum eml22__DynamicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DynamicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml22__DynamicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DynamicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__DynamicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__DynamicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml22__DynamicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__DynamicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml22__DynamicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:926 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt (-338)
/* simple XML schema type 'eml22:DynamicViscosityMeasureExt': */
class SOAP_CMAC eml22__DynamicViscosityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:DynamicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DynamicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__DynamicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DynamicViscosityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__DynamicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__DynamicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__DynamicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__DynamicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__DynamicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:928 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure (-339)
/* simple XML schema type 'eml22:ElectricalResistivityMeasure': */
class SOAP_CMAC eml22__ElectricalResistivityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricalResistivityUom'
        enum eml22__ElectricalResistivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricalResistivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricalResistivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricalResistivityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricalResistivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricalResistivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricalResistivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricalResistivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricalResistivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:930 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt (-340)
/* simple XML schema type 'eml22:ElectricalResistivityMeasureExt': */
class SOAP_CMAC eml22__ElectricalResistivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricalResistivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricalResistivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricalResistivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricalResistivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricalResistivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricalResistivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricalResistivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricalResistivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricalResistivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:932 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure (-341)
/* simple XML schema type 'eml22:ElectricChargeMeasure': */
class SOAP_CMAC eml22__ElectricChargeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargeUom'
        enum eml22__ElectricChargeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargeMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:934 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt (-342)
/* simple XML schema type 'eml22:ElectricChargeMeasureExt': */
class SOAP_CMAC eml22__ElectricChargeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:936 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure (-343)
/* simple XML schema type 'eml22:ElectricChargePerAreaMeasure': */
class SOAP_CMAC eml22__ElectricChargePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargePerAreaUom'
        enum eml22__ElectricChargePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:938 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt (-344)
/* simple XML schema type 'eml22:ElectricChargePerAreaMeasureExt': */
class SOAP_CMAC eml22__ElectricChargePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:940 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure (-345)
/* simple XML schema type 'eml22:ElectricChargePerMassMeasure': */
class SOAP_CMAC eml22__ElectricChargePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargePerMassUom'
        enum eml22__ElectricChargePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:942 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt (-346)
/* simple XML schema type 'eml22:ElectricChargePerMassMeasureExt': */
class SOAP_CMAC eml22__ElectricChargePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:944 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure (-347)
/* simple XML schema type 'eml22:ElectricChargePerVolumeMeasure': */
class SOAP_CMAC eml22__ElectricChargePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargePerVolumeUom'
        enum eml22__ElectricChargePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:946 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt (-348)
/* simple XML schema type 'eml22:ElectricChargePerVolumeMeasureExt': */
class SOAP_CMAC eml22__ElectricChargePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricChargePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricChargePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricChargePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricChargePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricChargePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricChargePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricChargePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricChargePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricChargePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:948 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure (-349)
/* simple XML schema type 'eml22:ElectricConductanceMeasure': */
class SOAP_CMAC eml22__ElectricConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricConductanceUom'
        enum eml22__ElectricConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:950 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt (-350)
/* simple XML schema type 'eml22:ElectricConductanceMeasureExt': */
class SOAP_CMAC eml22__ElectricConductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:952 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure (-351)
/* simple XML schema type 'eml22:ElectricConductivityMeasure': */
class SOAP_CMAC eml22__ElectricConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricConductivityUom'
        enum eml22__ElectricConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:954 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt (-352)
/* simple XML schema type 'eml22:ElectricConductivityMeasureExt': */
class SOAP_CMAC eml22__ElectricConductivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricConductivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:956 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure (-353)
/* simple XML schema type 'eml22:ElectricCurrentDensityMeasure': */
class SOAP_CMAC eml22__ElectricCurrentDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricCurrentDensityUom'
        enum eml22__ElectricCurrentDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentDensityMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricCurrentDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentDensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentDensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:958 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt (-354)
/* simple XML schema type 'eml22:ElectricCurrentDensityMeasureExt': */
class SOAP_CMAC eml22__ElectricCurrentDensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricCurrentDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentDensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricCurrentDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:960 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure (-355)
/* simple XML schema type 'eml22:ElectricCurrentMeasure': */
class SOAP_CMAC eml22__ElectricCurrentMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricCurrentUom'
        enum eml22__ElectricCurrentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricCurrentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:962 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt (-356)
/* simple XML schema type 'eml22:ElectricCurrentMeasureExt': */
class SOAP_CMAC eml22__ElectricCurrentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricCurrentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricCurrentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricCurrentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricCurrentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricCurrentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricCurrentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricCurrentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricCurrentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricCurrentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:964 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure (-357)
/* simple XML schema type 'eml22:ElectricFieldStrengthMeasure': */
class SOAP_CMAC eml22__ElectricFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricFieldStrengthUom'
        enum eml22__ElectricFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:966 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt (-358)
/* simple XML schema type 'eml22:ElectricFieldStrengthMeasureExt': */
class SOAP_CMAC eml22__ElectricFieldStrengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricFieldStrengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:968 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure (-359)
/* simple XML schema type 'eml22:ElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml22__ElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricPotentialDifferenceUom'
        enum eml22__ElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:970 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt (-360)
/* simple XML schema type 'eml22:ElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml22__ElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:972 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure (-361)
/* simple XML schema type 'eml22:ElectricResistanceMeasure': */
class SOAP_CMAC eml22__ElectricResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricResistanceUom'
        enum eml22__ElectricResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:974 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt (-362)
/* simple XML schema type 'eml22:ElectricResistanceMeasureExt': */
class SOAP_CMAC eml22__ElectricResistanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:976 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure (-363)
/* simple XML schema type 'eml22:ElectricResistancePerLengthMeasure': */
class SOAP_CMAC eml22__ElectricResistancePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricResistancePerLengthUom'
        enum eml22__ElectricResistancePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistancePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectricResistancePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistancePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectricResistancePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistancePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistancePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistancePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistancePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:978 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt (-364)
/* simple XML schema type 'eml22:ElectricResistancePerLengthMeasureExt': */
class SOAP_CMAC eml22__ElectricResistancePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectricResistancePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectricResistancePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectricResistancePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectricResistancePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectricResistancePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectricResistancePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectricResistancePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectricResistancePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectricResistancePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:980 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure (-365)
/* simple XML schema type 'eml22:ElectromagneticMomentMeasure': */
class SOAP_CMAC eml22__ElectromagneticMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectromagneticMomentUom'
        enum eml22__ElectromagneticMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectromagneticMomentMeasure, default initialized and not managed by a soap context
        virtual eml22__ElectromagneticMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectromagneticMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ElectromagneticMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ElectromagneticMomentMeasure() { }
        /// Friend allocator used by soap_new_eml22__ElectromagneticMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectromagneticMomentMeasure * SOAP_FMAC2 soap_instantiate_eml22__ElectromagneticMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:982 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt (-366)
/* simple XML schema type 'eml22:ElectromagneticMomentMeasureExt': */
class SOAP_CMAC eml22__ElectromagneticMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ElectromagneticMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ElectromagneticMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ElectromagneticMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ElectromagneticMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ElectromagneticMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ElectromagneticMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ElectromagneticMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ElectromagneticMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ElectromagneticMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:984 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure (-367)
/* simple XML schema type 'eml22:EnergyLengthPerAreaMeasure': */
class SOAP_CMAC eml22__EnergyLengthPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyLengthPerAreaUom'
        enum eml22__EnergyLengthPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyLengthPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:986 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt (-368)
/* simple XML schema type 'eml22:EnergyLengthPerAreaMeasureExt': */
class SOAP_CMAC eml22__EnergyLengthPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyLengthPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyLengthPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:988 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure (-369)
/* simple XML schema type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasure': */
class SOAP_CMAC eml22__EnergyLengthPerTimeAreaTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyLengthPerTimeAreaTemperatureUom'
        enum eml22__EnergyLengthPerTimeAreaTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerTimeAreaTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerTimeAreaTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerTimeAreaTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyLengthPerTimeAreaTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerTimeAreaTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerTimeAreaTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerTimeAreaTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:990 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt (-370)
/* simple XML schema type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasureExt': */
class SOAP_CMAC eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyLengthPerTimeAreaTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:992 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure (-371)
/* simple XML schema type 'eml22:EnergyMeasure': */
class SOAP_CMAC eml22__EnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyUom'
        enum eml22__EnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:994 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt (-372)
/* simple XML schema type 'eml22:EnergyMeasureExt': */
class SOAP_CMAC eml22__EnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:996 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure (-373)
/* simple XML schema type 'eml22:EnergyPerAreaMeasure': */
class SOAP_CMAC eml22__EnergyPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerAreaUom'
        enum eml22__EnergyPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:998 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt (-374)
/* simple XML schema type 'eml22:EnergyPerAreaMeasureExt': */
class SOAP_CMAC eml22__EnergyPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1000 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure (-375)
/* simple XML schema type 'eml22:EnergyPerLengthMeasure': */
class SOAP_CMAC eml22__EnergyPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerLengthUom'
        enum eml22__EnergyPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1002 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt (-376)
/* simple XML schema type 'eml22:EnergyPerLengthMeasureExt': */
class SOAP_CMAC eml22__EnergyPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1004 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure (-377)
/* simple XML schema type 'eml22:EnergyPerMassMeasure': */
class SOAP_CMAC eml22__EnergyPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerMassUom'
        enum eml22__EnergyPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1006 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt (-378)
/* simple XML schema type 'eml22:EnergyPerMassMeasureExt': */
class SOAP_CMAC eml22__EnergyPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1008 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure (-379)
/* simple XML schema type 'eml22:EnergyPerMassPerTimeMeasure': */
class SOAP_CMAC eml22__EnergyPerMassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerMassPerTimeUom'
        enum eml22__EnergyPerMassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerMassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1010 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt (-380)
/* simple XML schema type 'eml22:EnergyPerMassPerTimeMeasureExt': */
class SOAP_CMAC eml22__EnergyPerMassPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerMassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerMassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerMassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerMassPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerMassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerMassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerMassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerMassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerMassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1012 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure (-381)
/* simple XML schema type 'eml22:EnergyPerVolumeMeasure': */
class SOAP_CMAC eml22__EnergyPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerVolumeUom'
        enum eml22__EnergyPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__EnergyPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1014 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt (-382)
/* simple XML schema type 'eml22:EnergyPerVolumeMeasureExt': */
class SOAP_CMAC eml22__EnergyPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:EnergyPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__EnergyPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__EnergyPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__EnergyPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__EnergyPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__EnergyPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__EnergyPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__EnergyPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__EnergyPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1016 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure (-383)
/* simple XML schema type 'eml22:ForceAreaMeasure': */
class SOAP_CMAC eml22__ForceAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForceAreaUom'
        enum eml22__ForceAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__ForceAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ForceAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForceAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForceAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForceAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1018 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt (-384)
/* simple XML schema type 'eml22:ForceAreaMeasureExt': */
class SOAP_CMAC eml22__ForceAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForceAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForceAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ForceAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForceAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForceAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForceAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1020 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure (-385)
/* simple XML schema type 'eml22:ForceLengthPerLengthMeasure': */
class SOAP_CMAC eml22__ForceLengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForceLengthPerLengthUom'
        enum eml22__ForceLengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceLengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ForceLengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceLengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ForceLengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForceLengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForceLengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceLengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForceLengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1022 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt (-386)
/* simple XML schema type 'eml22:ForceLengthPerLengthMeasureExt': */
class SOAP_CMAC eml22__ForceLengthPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForceLengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceLengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForceLengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceLengthPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ForceLengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForceLengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForceLengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceLengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForceLengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1024 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure (-387)
/* simple XML schema type 'eml22:ForceMeasure': */
class SOAP_CMAC eml22__ForceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForceUom'
        enum eml22__ForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceMeasure, default initialized and not managed by a soap context
        virtual eml22__ForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1026 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt (-388)
/* simple XML schema type 'eml22:ForceMeasureExt': */
class SOAP_CMAC eml22__ForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1028 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure (-389)
/* simple XML schema type 'eml22:ForcePerForceMeasure': */
class SOAP_CMAC eml22__ForcePerForceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForcePerForceUom'
        enum eml22__ForcePerForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerForceMeasure, default initialized and not managed by a soap context
        virtual eml22__ForcePerForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerForceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ForcePerForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForcePerForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForcePerForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1030 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt (-390)
/* simple XML schema type 'eml22:ForcePerForceMeasureExt': */
class SOAP_CMAC eml22__ForcePerForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForcePerForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForcePerForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ForcePerForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForcePerForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForcePerForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1032 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure (-391)
/* simple XML schema type 'eml22:ForcePerLengthMeasure': */
class SOAP_CMAC eml22__ForcePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForcePerLengthUom'
        enum eml22__ForcePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ForcePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ForcePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForcePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForcePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1034 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt (-392)
/* simple XML schema type 'eml22:ForcePerLengthMeasureExt': */
class SOAP_CMAC eml22__ForcePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForcePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForcePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ForcePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForcePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForcePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1036 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure (-393)
/* simple XML schema type 'eml22:ForcePerVolumeMeasure': */
class SOAP_CMAC eml22__ForcePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForcePerVolumeUom'
        enum eml22__ForcePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__ForcePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ForcePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ForcePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ForcePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1038 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt (-394)
/* simple XML schema type 'eml22:ForcePerVolumeMeasureExt': */
class SOAP_CMAC eml22__ForcePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ForcePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ForcePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ForcePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ForcePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ForcePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ForcePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ForcePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ForcePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ForcePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1040 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure (-395)
/* simple XML schema type 'eml22:FrequencyIntervalMeasure': */
class SOAP_CMAC eml22__FrequencyIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:FrequencyIntervalUom'
        enum eml22__FrequencyIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyIntervalMeasure, default initialized and not managed by a soap context
        virtual eml22__FrequencyIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml22__FrequencyIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml22__FrequencyIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml22__FrequencyIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1042 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt (-396)
/* simple XML schema type 'eml22:FrequencyIntervalMeasureExt': */
class SOAP_CMAC eml22__FrequencyIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:FrequencyIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml22__FrequencyIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__FrequencyIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__FrequencyIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__FrequencyIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1044 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure (-397)
/* simple XML schema type 'eml22:FrequencyMeasure': */
class SOAP_CMAC eml22__FrequencyMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:FrequencyUom'
        enum eml22__FrequencyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyMeasure, default initialized and not managed by a soap context
        virtual eml22__FrequencyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyMeasure); }
      public:
        /// Constructor with default initializations
        eml22__FrequencyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyMeasure() { }
        /// Friend allocator used by soap_new_eml22__FrequencyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyMeasure * SOAP_FMAC2 soap_instantiate_eml22__FrequencyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1046 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt (-398)
/* simple XML schema type 'eml22:FrequencyMeasureExt': */
class SOAP_CMAC eml22__FrequencyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:FrequencyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FrequencyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__FrequencyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FrequencyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__FrequencyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__FrequencyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__FrequencyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__FrequencyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__FrequencyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1048 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure (-399)
/* simple XML schema type 'eml22:HeatCapacityMeasure': */
class SOAP_CMAC eml22__HeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:HeatCapacityUom'
        enum eml22__HeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__HeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__HeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__HeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__HeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__HeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1050 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt (-400)
/* simple XML schema type 'eml22:HeatCapacityMeasureExt': */
class SOAP_CMAC eml22__HeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:HeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__HeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__HeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__HeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__HeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__HeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1052 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure (-401)
/* simple XML schema type 'eml22:HeatFlowRateMeasure': */
class SOAP_CMAC eml22__HeatFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:HeatFlowRateUom'
        enum eml22__HeatFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml22__HeatFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml22__HeatFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__HeatFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml22__HeatFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml22__HeatFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1054 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt (-402)
/* simple XML schema type 'eml22:HeatFlowRateMeasureExt': */
class SOAP_CMAC eml22__HeatFlowRateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:HeatFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml22__HeatFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatFlowRateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__HeatFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__HeatFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__HeatFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__HeatFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1056 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure (-403)
/* simple XML schema type 'eml22:HeatTransferCoefficientMeasure': */
class SOAP_CMAC eml22__HeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:HeatTransferCoefficientUom'
        enum eml22__HeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml22__HeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml22__HeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__HeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml22__HeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml22__HeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1058 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt (-404)
/* simple XML schema type 'eml22:HeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml22__HeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:HeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__HeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml22__HeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__HeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__HeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__HeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__HeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__HeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__HeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1060 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure (-405)
/* simple XML schema type 'eml22:IlluminanceMeasure': */
class SOAP_CMAC eml22__IlluminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:IlluminanceUom'
        enum eml22__IlluminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IlluminanceMeasure, default initialized and not managed by a soap context
        virtual eml22__IlluminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IlluminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__IlluminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__IlluminanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__IlluminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__IlluminanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__IlluminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1062 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt (-406)
/* simple XML schema type 'eml22:IlluminanceMeasureExt': */
class SOAP_CMAC eml22__IlluminanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:IlluminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IlluminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__IlluminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IlluminanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__IlluminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__IlluminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__IlluminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__IlluminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__IlluminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1064 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure (-407)
/* simple XML schema type 'eml22:InductanceMeasure': */
class SOAP_CMAC eml22__InductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:InductanceUom'
        enum eml22__InductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__InductanceMeasure, default initialized and not managed by a soap context
        virtual eml22__InductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__InductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__InductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__InductanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__InductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__InductanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__InductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1066 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt (-408)
/* simple XML schema type 'eml22:InductanceMeasureExt': */
class SOAP_CMAC eml22__InductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:InductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__InductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__InductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__InductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__InductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__InductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__InductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__InductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__InductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1068 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure (-409)
/* simple XML schema type 'eml22:IsothermalCompressibilityMeasure': */
class SOAP_CMAC eml22__IsothermalCompressibilityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:IsothermalCompressibilityUom'
        enum eml22__IsothermalCompressibilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IsothermalCompressibilityMeasure, default initialized and not managed by a soap context
        virtual eml22__IsothermalCompressibilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IsothermalCompressibilityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__IsothermalCompressibilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__IsothermalCompressibilityMeasure() { }
        /// Friend allocator used by soap_new_eml22__IsothermalCompressibilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__IsothermalCompressibilityMeasure * SOAP_FMAC2 soap_instantiate_eml22__IsothermalCompressibilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1070 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt (-410)
/* simple XML schema type 'eml22:IsothermalCompressibilityMeasureExt': */
class SOAP_CMAC eml22__IsothermalCompressibilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:IsothermalCompressibilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IsothermalCompressibilityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__IsothermalCompressibilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IsothermalCompressibilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__IsothermalCompressibilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__IsothermalCompressibilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__IsothermalCompressibilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__IsothermalCompressibilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__IsothermalCompressibilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1072 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure (-411)
/* simple XML schema type 'eml22:KinematicViscosityMeasure': */
class SOAP_CMAC eml22__KinematicViscosityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:KinematicViscosityUom'
        enum eml22__KinematicViscosityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__KinematicViscosityMeasure, default initialized and not managed by a soap context
        virtual eml22__KinematicViscosityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__KinematicViscosityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__KinematicViscosityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__KinematicViscosityMeasure() { }
        /// Friend allocator used by soap_new_eml22__KinematicViscosityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__KinematicViscosityMeasure * SOAP_FMAC2 soap_instantiate_eml22__KinematicViscosityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1074 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt (-412)
/* simple XML schema type 'eml22:KinematicViscosityMeasureExt': */
class SOAP_CMAC eml22__KinematicViscosityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:KinematicViscosityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__KinematicViscosityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__KinematicViscosityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__KinematicViscosityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__KinematicViscosityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__KinematicViscosityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__KinematicViscosityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__KinematicViscosityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__KinematicViscosityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1076 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure (-413)
/* simple XML schema type 'eml22:LengthMeasure': */
class SOAP_CMAC eml22__LengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthUom'
        enum eml22__LengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1078 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt (-414)
/* simple XML schema type 'eml22:LengthMeasureExt': */
class SOAP_CMAC eml22__LengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1080 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure (-415)
/* simple XML schema type 'eml22:LengthPerLengthMeasure': */
class SOAP_CMAC eml22__LengthPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerLengthUom'
        enum eml22__LengthPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1082 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt (-416)
/* simple XML schema type 'eml22:LengthPerLengthMeasureExt': */
class SOAP_CMAC eml22__LengthPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1084 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure (-417)
/* simple XML schema type 'eml22:LengthPerMassMeasure': */
class SOAP_CMAC eml22__LengthPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerMassUom'
        enum eml22__LengthPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1086 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt (-418)
/* simple XML schema type 'eml22:LengthPerMassMeasureExt': */
class SOAP_CMAC eml22__LengthPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1088 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure (-419)
/* simple XML schema type 'eml22:LengthPerPressureMeasure': */
class SOAP_CMAC eml22__LengthPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerPressureUom'
        enum eml22__LengthPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1090 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt (-420)
/* simple XML schema type 'eml22:LengthPerPressureMeasureExt': */
class SOAP_CMAC eml22__LengthPerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1092 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure (-421)
/* simple XML schema type 'eml22:LengthPerTemperatureMeasure': */
class SOAP_CMAC eml22__LengthPerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerTemperatureUom'
        enum eml22__LengthPerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1094 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt (-422)
/* simple XML schema type 'eml22:LengthPerTemperatureMeasureExt': */
class SOAP_CMAC eml22__LengthPerTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1096 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure (-423)
/* simple XML schema type 'eml22:LengthPerTimeMeasure': */
class SOAP_CMAC eml22__LengthPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerTimeUom'
        enum eml22__LengthPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1098 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt (-424)
/* simple XML schema type 'eml22:LengthPerTimeMeasureExt': */
class SOAP_CMAC eml22__LengthPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1100 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure (-425)
/* simple XML schema type 'eml22:LengthPerVolumeMeasure': */
class SOAP_CMAC eml22__LengthPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerVolumeUom'
        enum eml22__LengthPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__LengthPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__LengthPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__LengthPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1102 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt (-426)
/* simple XML schema type 'eml22:LengthPerVolumeMeasureExt': */
class SOAP_CMAC eml22__LengthPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LengthPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LengthPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LengthPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LengthPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LengthPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LengthPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LengthPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LengthPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LengthPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1104 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure (-427)
/* simple XML schema type 'eml22:LightExposureMeasure': */
class SOAP_CMAC eml22__LightExposureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LightExposureUom'
        enum eml22__LightExposureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LightExposureMeasure, default initialized and not managed by a soap context
        virtual eml22__LightExposureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LightExposureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LightExposureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LightExposureMeasure() { }
        /// Friend allocator used by soap_new_eml22__LightExposureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LightExposureMeasure * SOAP_FMAC2 soap_instantiate_eml22__LightExposureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1106 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt (-428)
/* simple XML schema type 'eml22:LightExposureMeasureExt': */
class SOAP_CMAC eml22__LightExposureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LightExposureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LightExposureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LightExposureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LightExposureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LightExposureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LightExposureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LightExposureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LightExposureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LightExposureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1108 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure (-429)
/* simple XML schema type 'eml22:LinearAccelerationMeasure': */
class SOAP_CMAC eml22__LinearAccelerationMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LinearAccelerationUom'
        enum eml22__LinearAccelerationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearAccelerationMeasure, default initialized and not managed by a soap context
        virtual eml22__LinearAccelerationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearAccelerationMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LinearAccelerationMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LinearAccelerationMeasure() { }
        /// Friend allocator used by soap_new_eml22__LinearAccelerationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearAccelerationMeasure * SOAP_FMAC2 soap_instantiate_eml22__LinearAccelerationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1110 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt (-430)
/* simple XML schema type 'eml22:LinearAccelerationMeasureExt': */
class SOAP_CMAC eml22__LinearAccelerationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LinearAccelerationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearAccelerationMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LinearAccelerationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearAccelerationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LinearAccelerationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LinearAccelerationMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LinearAccelerationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearAccelerationMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LinearAccelerationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1112 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure (-431)
/* simple XML schema type 'eml22:LinearThermalExpansionMeasure': */
class SOAP_CMAC eml22__LinearThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LinearThermalExpansionUom'
        enum eml22__LinearThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml22__LinearThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LinearThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LinearThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml22__LinearThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml22__LinearThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1114 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt (-432)
/* simple XML schema type 'eml22:LinearThermalExpansionMeasureExt': */
class SOAP_CMAC eml22__LinearThermalExpansionMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LinearThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LinearThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LinearThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LinearThermalExpansionMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LinearThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LinearThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LinearThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LinearThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LinearThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1116 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure (-433)
/* simple XML schema type 'eml22:LogarithmicPowerRatioMeasure': */
class SOAP_CMAC eml22__LogarithmicPowerRatioMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LogarithmicPowerRatioUom'
        enum eml22__LogarithmicPowerRatioUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioMeasure, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LogarithmicPowerRatioMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioMeasure() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioMeasure * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1118 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt (-434)
/* simple XML schema type 'eml22:LogarithmicPowerRatioMeasureExt': */
class SOAP_CMAC eml22__LogarithmicPowerRatioMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LogarithmicPowerRatioUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LogarithmicPowerRatioMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1120 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure (-435)
/* simple XML schema type 'eml22:LogarithmicPowerRatioPerLengthMeasure': */
class SOAP_CMAC eml22__LogarithmicPowerRatioPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LogarithmicPowerRatioPerLengthUom'
        enum eml22__LogarithmicPowerRatioPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LogarithmicPowerRatioPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1122 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt (-436)
/* simple XML schema type 'eml22:LogarithmicPowerRatioPerLengthMeasureExt': */
class SOAP_CMAC eml22__LogarithmicPowerRatioPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LogarithmicPowerRatioPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LogarithmicPowerRatioPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LogarithmicPowerRatioPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LogarithmicPowerRatioPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LogarithmicPowerRatioPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LogarithmicPowerRatioPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LogarithmicPowerRatioPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LogarithmicPowerRatioPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1124 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure (-437)
/* simple XML schema type 'eml22:LuminanceMeasure': */
class SOAP_CMAC eml22__LuminanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminanceUom'
        enum eml22__LuminanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminanceMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LuminanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1126 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt (-438)
/* simple XML schema type 'eml22:LuminanceMeasureExt': */
class SOAP_CMAC eml22__LuminanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LuminanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1128 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure (-439)
/* simple XML schema type 'eml22:LuminousEfficacyMeasure': */
class SOAP_CMAC eml22__LuminousEfficacyMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminousEfficacyUom'
        enum eml22__LuminousEfficacyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousEfficacyMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminousEfficacyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousEfficacyMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LuminousEfficacyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousEfficacyMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminousEfficacyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousEfficacyMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminousEfficacyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1130 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt (-440)
/* simple XML schema type 'eml22:LuminousEfficacyMeasureExt': */
class SOAP_CMAC eml22__LuminousEfficacyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminousEfficacyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousEfficacyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminousEfficacyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousEfficacyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LuminousEfficacyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousEfficacyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminousEfficacyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousEfficacyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminousEfficacyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1132 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure (-441)
/* simple XML schema type 'eml22:LuminousFluxMeasure': */
class SOAP_CMAC eml22__LuminousFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminousFluxUom'
        enum eml22__LuminousFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousFluxMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminousFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LuminousFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousFluxMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminousFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousFluxMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminousFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1134 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt (-442)
/* simple XML schema type 'eml22:LuminousFluxMeasureExt': */
class SOAP_CMAC eml22__LuminousFluxMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminousFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminousFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousFluxMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LuminousFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminousFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminousFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1136 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure (-443)
/* simple XML schema type 'eml22:LuminousIntensityMeasure': */
class SOAP_CMAC eml22__LuminousIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminousIntensityUom'
        enum eml22__LuminousIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousIntensityMeasure, default initialized and not managed by a soap context
        virtual eml22__LuminousIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__LuminousIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__LuminousIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__LuminousIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1138 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt (-444)
/* simple XML schema type 'eml22:LuminousIntensityMeasureExt': */
class SOAP_CMAC eml22__LuminousIntensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:LuminousIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__LuminousIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__LuminousIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__LuminousIntensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__LuminousIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__LuminousIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__LuminousIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__LuminousIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__LuminousIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1140 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure (-445)
/* simple XML schema type 'eml22:MagneticDipoleMomentMeasure': */
class SOAP_CMAC eml22__MagneticDipoleMomentMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticDipoleMomentUom'
        enum eml22__MagneticDipoleMomentUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticDipoleMomentMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticDipoleMomentMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticDipoleMomentMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticDipoleMomentMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticDipoleMomentMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticDipoleMomentMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticDipoleMomentMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticDipoleMomentMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1142 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt (-446)
/* simple XML schema type 'eml22:MagneticDipoleMomentMeasureExt': */
class SOAP_CMAC eml22__MagneticDipoleMomentMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticDipoleMomentUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticDipoleMomentMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticDipoleMomentMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticDipoleMomentMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticDipoleMomentMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticDipoleMomentMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticDipoleMomentMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticDipoleMomentMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticDipoleMomentMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1144 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure (-447)
/* simple XML schema type 'eml22:MagneticFieldStrengthMeasure': */
class SOAP_CMAC eml22__MagneticFieldStrengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFieldStrengthUom'
        enum eml22__MagneticFieldStrengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFieldStrengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFieldStrengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFieldStrengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFieldStrengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFieldStrengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFieldStrengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFieldStrengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFieldStrengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1146 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt (-448)
/* simple XML schema type 'eml22:MagneticFieldStrengthMeasureExt': */
class SOAP_CMAC eml22__MagneticFieldStrengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFieldStrengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFieldStrengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFieldStrengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFieldStrengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFieldStrengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFieldStrengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFieldStrengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFieldStrengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFieldStrengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1148 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure (-449)
/* simple XML schema type 'eml22:MagneticFluxDensityMeasure': */
class SOAP_CMAC eml22__MagneticFluxDensityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFluxDensityUom'
        enum eml22__MagneticFluxDensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFluxDensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1150 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt (-450)
/* simple XML schema type 'eml22:MagneticFluxDensityMeasureExt': */
class SOAP_CMAC eml22__MagneticFluxDensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFluxDensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFluxDensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1152 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure (-451)
/* simple XML schema type 'eml22:MagneticFluxDensityPerLengthMeasure': */
class SOAP_CMAC eml22__MagneticFluxDensityPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFluxDensityPerLengthUom'
        enum eml22__MagneticFluxDensityPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFluxDensityPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1154 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt (-452)
/* simple XML schema type 'eml22:MagneticFluxDensityPerLengthMeasureExt': */
class SOAP_CMAC eml22__MagneticFluxDensityPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFluxDensityPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxDensityPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxDensityPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxDensityPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFluxDensityPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxDensityPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxDensityPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxDensityPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1156 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure (-453)
/* simple XML schema type 'eml22:MagneticFluxMeasure': */
class SOAP_CMAC eml22__MagneticFluxMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFluxUom'
        enum eml22__MagneticFluxUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFluxMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1158 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt (-454)
/* simple XML schema type 'eml22:MagneticFluxMeasureExt': */
class SOAP_CMAC eml22__MagneticFluxMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticFluxUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticFluxMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticFluxMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticFluxMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticFluxMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticFluxMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticFluxMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticFluxMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticFluxMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1160 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure (-455)
/* simple XML schema type 'eml22:MagneticPermeabilityMeasure': */
class SOAP_CMAC eml22__MagneticPermeabilityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticPermeabilityUom'
        enum eml22__MagneticPermeabilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticPermeabilityMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticPermeabilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticPermeabilityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticPermeabilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticPermeabilityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticPermeabilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticPermeabilityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticPermeabilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1162 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt (-456)
/* simple XML schema type 'eml22:MagneticPermeabilityMeasureExt': */
class SOAP_CMAC eml22__MagneticPermeabilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticPermeabilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticPermeabilityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticPermeabilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticPermeabilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticPermeabilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticPermeabilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticPermeabilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticPermeabilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticPermeabilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1164 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure (-457)
/* simple XML schema type 'eml22:MagneticVectorPotentialMeasure': */
class SOAP_CMAC eml22__MagneticVectorPotentialMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticVectorPotentialUom'
        enum eml22__MagneticVectorPotentialUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticVectorPotentialMeasure, default initialized and not managed by a soap context
        virtual eml22__MagneticVectorPotentialMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticVectorPotentialMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MagneticVectorPotentialMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticVectorPotentialMeasure() { }
        /// Friend allocator used by soap_new_eml22__MagneticVectorPotentialMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticVectorPotentialMeasure * SOAP_FMAC2 soap_instantiate_eml22__MagneticVectorPotentialMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1166 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt (-458)
/* simple XML schema type 'eml22:MagneticVectorPotentialMeasureExt': */
class SOAP_CMAC eml22__MagneticVectorPotentialMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MagneticVectorPotentialUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MagneticVectorPotentialMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MagneticVectorPotentialMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MagneticVectorPotentialMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MagneticVectorPotentialMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MagneticVectorPotentialMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MagneticVectorPotentialMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MagneticVectorPotentialMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MagneticVectorPotentialMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1168 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure (-459)
/* simple XML schema type 'eml22:MassLengthMeasure': */
class SOAP_CMAC eml22__MassLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassLengthUom'
        enum eml22__MassLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1170 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt (-460)
/* simple XML schema type 'eml22:MassLengthMeasureExt': */
class SOAP_CMAC eml22__MassLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1172 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure (-461)
/* simple XML schema type 'eml22:MassMeasure': */
class SOAP_CMAC eml22__MassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassUom'
        enum eml22__MassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassMeasure, default initialized and not managed by a soap context
        virtual eml22__MassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1174 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt (-462)
/* simple XML schema type 'eml22:MassMeasureExt': */
class SOAP_CMAC eml22__MassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1176 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure (-463)
/* simple XML schema type 'eml22:MassPerAreaMeasure': */
class SOAP_CMAC eml22__MassPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerAreaUom'
        enum eml22__MassPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1178 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt (-464)
/* simple XML schema type 'eml22:MassPerAreaMeasureExt': */
class SOAP_CMAC eml22__MassPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1180 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure (-465)
/* simple XML schema type 'eml22:MassPerEnergyMeasure': */
class SOAP_CMAC eml22__MassPerEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerEnergyUom'
        enum eml22__MassPerEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerEnergyMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1182 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt (-466)
/* simple XML schema type 'eml22:MassPerEnergyMeasureExt': */
class SOAP_CMAC eml22__MassPerEnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerEnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1184 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure (-467)
/* simple XML schema type 'eml22:MassPerLengthMeasure': */
class SOAP_CMAC eml22__MassPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerLengthUom'
        enum eml22__MassPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1186 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt (-468)
/* simple XML schema type 'eml22:MassPerLengthMeasureExt': */
class SOAP_CMAC eml22__MassPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1188 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure (-469)
/* simple XML schema type 'eml22:MassPerMassMeasure': */
class SOAP_CMAC eml22__MassPerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerMassUom'
        enum eml22__MassPerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1190 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt (-470)
/* simple XML schema type 'eml22:MassPerMassMeasureExt': */
class SOAP_CMAC eml22__MassPerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1192 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure (-471)
/* simple XML schema type 'eml22:MassPerTimeMeasure': */
class SOAP_CMAC eml22__MassPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerTimeUom'
        enum eml22__MassPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1194 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt (-472)
/* simple XML schema type 'eml22:MassPerTimeMeasureExt': */
class SOAP_CMAC eml22__MassPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1196 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure (-473)
/* simple XML schema type 'eml22:MassPerTimePerAreaMeasure': */
class SOAP_CMAC eml22__MassPerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerTimePerAreaUom'
        enum eml22__MassPerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1198 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt (-474)
/* simple XML schema type 'eml22:MassPerTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__MassPerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1200 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure (-475)
/* simple XML schema type 'eml22:MassPerTimePerLengthMeasure': */
class SOAP_CMAC eml22__MassPerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerTimePerLengthUom'
        enum eml22__MassPerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1202 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt (-476)
/* simple XML schema type 'eml22:MassPerTimePerLengthMeasureExt': */
class SOAP_CMAC eml22__MassPerTimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerTimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1204 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure (-477)
/* simple XML schema type 'eml22:MassPerVolumeMeasure': */
class SOAP_CMAC eml22__MassPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1206 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt (-478)
/* simple XML schema type 'eml22:MassPerVolumeMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1208 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure (-479)
/* simple XML schema type 'eml22:MassPerVolumePerLengthMeasure': */
class SOAP_CMAC eml22__MassPerVolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumePerLengthUom'
        enum eml22__MassPerVolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1210 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt (-480)
/* simple XML schema type 'eml22:MassPerVolumePerLengthMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1212 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure (-481)
/* simple XML schema type 'eml22:MassPerVolumePerPressureMeasure': */
class SOAP_CMAC eml22__MassPerVolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumePerPressureUom'
        enum eml22__MassPerVolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1214 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt (-482)
/* simple XML schema type 'eml22:MassPerVolumePerPressureMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1216 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure (-483)
/* simple XML schema type 'eml22:MassPerVolumePerTemperatureMeasure': */
class SOAP_CMAC eml22__MassPerVolumePerTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumePerTemperatureUom'
        enum eml22__MassPerVolumePerTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumePerTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1218 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt (-484)
/* simple XML schema type 'eml22:MassPerVolumePerTemperatureMeasureExt': */
class SOAP_CMAC eml22__MassPerVolumePerTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MassPerVolumePerTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MassPerVolumePerTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MassPerVolumePerTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MassPerVolumePerTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MassPerVolumePerTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MassPerVolumePerTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MassPerVolumePerTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MassPerVolumePerTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MassPerVolumePerTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1220 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure (-485)
/* simple XML schema type 'eml22:MobilityMeasure': */
class SOAP_CMAC eml22__MobilityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MobilityUom'
        enum eml22__MobilityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MobilityMeasure, default initialized and not managed by a soap context
        virtual eml22__MobilityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MobilityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MobilityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MobilityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MobilityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MobilityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MobilityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1222 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt (-486)
/* simple XML schema type 'eml22:MobilityMeasureExt': */
class SOAP_CMAC eml22__MobilityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MobilityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MobilityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MobilityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MobilityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MobilityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MobilityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MobilityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MobilityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MobilityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1224 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure (-487)
/* simple XML schema type 'eml22:MolarEnergyMeasure': */
class SOAP_CMAC eml22__MolarEnergyMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolarEnergyUom'
        enum eml22__MolarEnergyUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarEnergyMeasure, default initialized and not managed by a soap context
        virtual eml22__MolarEnergyMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarEnergyMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MolarEnergyMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolarEnergyMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolarEnergyMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarEnergyMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolarEnergyMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1226 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt (-488)
/* simple XML schema type 'eml22:MolarEnergyMeasureExt': */
class SOAP_CMAC eml22__MolarEnergyMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolarEnergyUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarEnergyMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolarEnergyMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarEnergyMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MolarEnergyMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolarEnergyMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolarEnergyMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarEnergyMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolarEnergyMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1228 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure (-489)
/* simple XML schema type 'eml22:MolarHeatCapacityMeasure': */
class SOAP_CMAC eml22__MolarHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolarHeatCapacityUom'
        enum eml22__MolarHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__MolarHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MolarHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolarHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolarHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolarHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1230 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt (-490)
/* simple XML schema type 'eml22:MolarHeatCapacityMeasureExt': */
class SOAP_CMAC eml22__MolarHeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolarHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolarHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarHeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MolarHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolarHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolarHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolarHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1232 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure (-491)
/* simple XML schema type 'eml22:MolarVolumeMeasure': */
class SOAP_CMAC eml22__MolarVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolarVolumeUom'
        enum eml22__MolarVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__MolarVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MolarVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolarVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolarVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolarVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1234 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt (-492)
/* simple XML schema type 'eml22:MolarVolumeMeasureExt': */
class SOAP_CMAC eml22__MolarVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolarVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolarVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolarVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolarVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MolarVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolarVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolarVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolarVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolarVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1236 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure (-493)
/* simple XML schema type 'eml22:MolecularWeightMeasure': */
class SOAP_CMAC eml22__MolecularWeightMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolecularWeightUom'
        enum eml22__MolecularWeightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolecularWeightMeasure, default initialized and not managed by a soap context
        virtual eml22__MolecularWeightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolecularWeightMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MolecularWeightMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MolecularWeightMeasure() { }
        /// Friend allocator used by soap_new_eml22__MolecularWeightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolecularWeightMeasure * SOAP_FMAC2 soap_instantiate_eml22__MolecularWeightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1238 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt (-494)
/* simple XML schema type 'eml22:MolecularWeightMeasureExt': */
class SOAP_CMAC eml22__MolecularWeightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MolecularWeightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MolecularWeightMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MolecularWeightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MolecularWeightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MolecularWeightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MolecularWeightMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MolecularWeightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MolecularWeightMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MolecularWeightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1240 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure (-495)
/* simple XML schema type 'eml22:MomentOfForceMeasure': */
class SOAP_CMAC eml22__MomentOfForceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MomentOfForceUom'
        enum eml22__MomentOfForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfForceMeasure, default initialized and not managed by a soap context
        virtual eml22__MomentOfForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfForceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MomentOfForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__MomentOfForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__MomentOfForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1242 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt (-496)
/* simple XML schema type 'eml22:MomentOfForceMeasureExt': */
class SOAP_CMAC eml22__MomentOfForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MomentOfForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MomentOfForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MomentOfForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MomentOfForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MomentOfForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1244 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure (-497)
/* simple XML schema type 'eml22:MomentOfInertiaMeasure': */
class SOAP_CMAC eml22__MomentOfInertiaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MomentOfInertiaUom'
        enum eml22__MomentOfInertiaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfInertiaMeasure, default initialized and not managed by a soap context
        virtual eml22__MomentOfInertiaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfInertiaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MomentOfInertiaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfInertiaMeasure() { }
        /// Friend allocator used by soap_new_eml22__MomentOfInertiaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfInertiaMeasure * SOAP_FMAC2 soap_instantiate_eml22__MomentOfInertiaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1246 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt (-498)
/* simple XML schema type 'eml22:MomentOfInertiaMeasureExt': */
class SOAP_CMAC eml22__MomentOfInertiaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MomentOfInertiaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentOfInertiaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MomentOfInertiaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentOfInertiaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MomentOfInertiaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MomentOfInertiaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MomentOfInertiaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentOfInertiaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MomentOfInertiaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1248 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure (-499)
/* simple XML schema type 'eml22:MomentumMeasure': */
class SOAP_CMAC eml22__MomentumMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MomentumUom'
        enum eml22__MomentumUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentumMeasure, default initialized and not managed by a soap context
        virtual eml22__MomentumMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentumMeasure); }
      public:
        /// Constructor with default initializations
        eml22__MomentumMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__MomentumMeasure() { }
        /// Friend allocator used by soap_new_eml22__MomentumMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentumMeasure * SOAP_FMAC2 soap_instantiate_eml22__MomentumMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1250 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt (-500)
/* simple XML schema type 'eml22:MomentumMeasureExt': */
class SOAP_CMAC eml22__MomentumMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:MomentumUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__MomentumMeasureExt, default initialized and not managed by a soap context
        virtual eml22__MomentumMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__MomentumMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__MomentumMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__MomentumMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__MomentumMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__MomentumMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__MomentumMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1252 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure (-501)
/* simple XML schema type 'eml22:NormalizedPowerMeasure': */
class SOAP_CMAC eml22__NormalizedPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:NormalizedPowerUom'
        enum eml22__NormalizedPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__NormalizedPowerMeasure, default initialized and not managed by a soap context
        virtual eml22__NormalizedPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__NormalizedPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml22__NormalizedPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__NormalizedPowerMeasure() { }
        /// Friend allocator used by soap_new_eml22__NormalizedPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__NormalizedPowerMeasure * SOAP_FMAC2 soap_instantiate_eml22__NormalizedPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1254 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt (-502)
/* simple XML schema type 'eml22:NormalizedPowerMeasureExt': */
class SOAP_CMAC eml22__NormalizedPowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:NormalizedPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__NormalizedPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml22__NormalizedPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__NormalizedPowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__NormalizedPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__NormalizedPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__NormalizedPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__NormalizedPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__NormalizedPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1256 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure (-503)
/* simple XML schema type 'eml22:PermeabilityLengthMeasure': */
class SOAP_CMAC eml22__PermeabilityLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PermeabilityLengthUom'
        enum eml22__PermeabilityLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__PermeabilityLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PermeabilityLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1258 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt (-504)
/* simple XML schema type 'eml22:PermeabilityLengthMeasureExt': */
class SOAP_CMAC eml22__PermeabilityLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PermeabilityLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PermeabilityLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PermeabilityLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1260 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure (-505)
/* simple XML schema type 'eml22:PermeabilityRockMeasure': */
class SOAP_CMAC eml22__PermeabilityRockMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PermeabilityRockUom'
        enum eml22__PermeabilityRockUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityRockMeasure, default initialized and not managed by a soap context
        virtual eml22__PermeabilityRockMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityRockMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PermeabilityRockMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityRockMeasure() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityRockMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityRockMeasure * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityRockMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1262 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt (-506)
/* simple XML schema type 'eml22:PermeabilityRockMeasureExt': */
class SOAP_CMAC eml22__PermeabilityRockMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PermeabilityRockUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermeabilityRockMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PermeabilityRockMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermeabilityRockMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PermeabilityRockMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PermeabilityRockMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PermeabilityRockMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermeabilityRockMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PermeabilityRockMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1264 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure (-507)
/* simple XML schema type 'eml22:PermittivityMeasure': */
class SOAP_CMAC eml22__PermittivityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PermittivityUom'
        enum eml22__PermittivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermittivityMeasure, default initialized and not managed by a soap context
        virtual eml22__PermittivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermittivityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PermittivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PermittivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__PermittivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermittivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__PermittivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1266 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt (-508)
/* simple XML schema type 'eml22:PermittivityMeasureExt': */
class SOAP_CMAC eml22__PermittivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PermittivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PermittivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PermittivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PermittivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PermittivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PermittivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PermittivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PermittivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PermittivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1268 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure (-509)
/* simple XML schema type 'eml22:PlaneAngleMeasure': */
class SOAP_CMAC eml22__PlaneAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PlaneAngleUom'
        enum eml22__PlaneAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PlaneAngleMeasure, default initialized and not managed by a soap context
        virtual eml22__PlaneAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PlaneAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PlaneAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PlaneAngleMeasure() { }
        /// Friend allocator used by soap_new_eml22__PlaneAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PlaneAngleMeasure * SOAP_FMAC2 soap_instantiate_eml22__PlaneAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1270 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt (-510)
/* simple XML schema type 'eml22:PlaneAngleMeasureExt': */
class SOAP_CMAC eml22__PlaneAngleMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PlaneAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PlaneAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PlaneAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PlaneAngleMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PlaneAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PlaneAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PlaneAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PlaneAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PlaneAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1272 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure (-511)
/* simple XML schema type 'eml22:PotentialDifferencePerPowerDropMeasure': */
class SOAP_CMAC eml22__PotentialDifferencePerPowerDropMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PotentialDifferencePerPowerDropUom'
        enum eml22__PotentialDifferencePerPowerDropUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PotentialDifferencePerPowerDropMeasure, default initialized and not managed by a soap context
        virtual eml22__PotentialDifferencePerPowerDropMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PotentialDifferencePerPowerDropMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PotentialDifferencePerPowerDropMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PotentialDifferencePerPowerDropMeasure() { }
        /// Friend allocator used by soap_new_eml22__PotentialDifferencePerPowerDropMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PotentialDifferencePerPowerDropMeasure * SOAP_FMAC2 soap_instantiate_eml22__PotentialDifferencePerPowerDropMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1274 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt (-512)
/* simple XML schema type 'eml22:PotentialDifferencePerPowerDropMeasureExt': */
class SOAP_CMAC eml22__PotentialDifferencePerPowerDropMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PotentialDifferencePerPowerDropUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PotentialDifferencePerPowerDropMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PotentialDifferencePerPowerDropMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PotentialDifferencePerPowerDropMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PotentialDifferencePerPowerDropMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PotentialDifferencePerPowerDropMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PotentialDifferencePerPowerDropMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PotentialDifferencePerPowerDropMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1276 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure (-513)
/* simple XML schema type 'eml22:PowerMeasure': */
class SOAP_CMAC eml22__PowerMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerUom'
        enum eml22__PowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1278 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt (-514)
/* simple XML schema type 'eml22:PowerMeasureExt': */
class SOAP_CMAC eml22__PowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1280 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure (-515)
/* simple XML schema type 'eml22:PowerPerAreaMeasure': */
class SOAP_CMAC eml22__PowerPerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerPerAreaUom'
        enum eml22__PowerPerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerPerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PowerPerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerPerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerPerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1282 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt (-516)
/* simple XML schema type 'eml22:PowerPerAreaMeasureExt': */
class SOAP_CMAC eml22__PowerPerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerPerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerPerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PowerPerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerPerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerPerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1284 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure (-517)
/* simple XML schema type 'eml22:PowerPerPowerMeasure': */
class SOAP_CMAC eml22__PowerPerPowerMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerPerPowerUom'
        enum eml22__PowerPerPowerUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerPowerMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerPerPowerMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerPowerMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PowerPerPowerMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerPowerMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerPerPowerMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerPowerMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerPerPowerMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1286 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt (-518)
/* simple XML schema type 'eml22:PowerPerPowerMeasureExt': */
class SOAP_CMAC eml22__PowerPerPowerMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerPerPowerUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerPowerMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerPerPowerMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerPowerMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PowerPerPowerMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerPowerMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerPerPowerMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerPowerMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerPerPowerMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1288 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure (-519)
/* simple XML schema type 'eml22:PowerPerVolumeMeasure': */
class SOAP_CMAC eml22__PowerPerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerPerVolumeUom'
        enum eml22__PowerPerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__PowerPerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PowerPerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PowerPerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PowerPerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1290 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt (-520)
/* simple XML schema type 'eml22:PowerPerVolumeMeasureExt': */
class SOAP_CMAC eml22__PowerPerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PowerPerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PowerPerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PowerPerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PowerPerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PowerPerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PowerPerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PowerPerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PowerPerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PowerPerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1292 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure (-521)
/* simple XML schema type 'eml22:PressureMeasure': */
class SOAP_CMAC eml22__PressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1294 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt (-522)
/* simple XML schema type 'eml22:PressureMeasureExt': */
class SOAP_CMAC eml22__PressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1296 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure (-523)
/* simple XML schema type 'eml22:PressurePerPressureMeasure': */
class SOAP_CMAC eml22__PressurePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressurePerPressureUom'
        enum eml22__PressurePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__PressurePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressurePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressurePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressurePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1298 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt (-524)
/* simple XML schema type 'eml22:PressurePerPressureMeasureExt': */
class SOAP_CMAC eml22__PressurePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressurePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressurePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressurePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressurePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressurePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1300 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure (-525)
/* simple XML schema type 'eml22:PressurePerTimeMeasure': */
class SOAP_CMAC eml22__PressurePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressurePerTimeUom'
        enum eml22__PressurePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__PressurePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressurePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressurePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressurePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1302 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt (-526)
/* simple XML schema type 'eml22:PressurePerTimeMeasureExt': */
class SOAP_CMAC eml22__PressurePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressurePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressurePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressurePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressurePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressurePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1304 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure (-527)
/* simple XML schema type 'eml22:PressurePerVolumeMeasure': */
class SOAP_CMAC eml22__PressurePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressurePerVolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__PressurePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressurePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressurePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressurePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1306 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt (-528)
/* simple XML schema type 'eml22:PressurePerVolumeMeasureExt': */
class SOAP_CMAC eml22__PressurePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressurePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressurePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressurePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressurePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressurePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressurePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressurePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressurePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressurePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1308 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure (-529)
/* simple XML schema type 'eml22:PressureSquaredMeasure': */
class SOAP_CMAC eml22__PressureSquaredMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureSquaredUom'
        enum eml22__PressureSquaredUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressureSquaredMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1310 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt (-530)
/* simple XML schema type 'eml22:PressureSquaredMeasureExt': */
class SOAP_CMAC eml22__PressureSquaredMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureSquaredUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressureSquaredMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1312 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure (-531)
/* simple XML schema type 'eml22:PressureSquaredPerForceTimePerAreaMeasure': */
class SOAP_CMAC eml22__PressureSquaredPerForceTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureSquaredPerForceTimePerAreaUom'
        enum eml22__PressureSquaredPerForceTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredPerForceTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredPerForceTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredPerForceTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressureSquaredPerForceTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredPerForceTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredPerForceTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredPerForceTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1314 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt (-532)
/* simple XML schema type 'eml22:PressureSquaredPerForceTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__PressureSquaredPerForceTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureSquaredPerForceTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureSquaredPerForceTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureSquaredPerForceTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureSquaredPerForceTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressureSquaredPerForceTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureSquaredPerForceTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureSquaredPerForceTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureSquaredPerForceTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1316 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure (-533)
/* simple XML schema type 'eml22:PressureTimePerVolumeMeasure': */
class SOAP_CMAC eml22__PressureTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureTimePerVolumeUom'
        enum eml22__PressureTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__PressureTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__PressureTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__PressureTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__PressureTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__PressureTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1318 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt (-534)
/* simple XML schema type 'eml22:PressureTimePerVolumeMeasureExt': */
class SOAP_CMAC eml22__PressureTimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__PressureTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__PressureTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__PressureTimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__PressureTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__PressureTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__PressureTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__PressureTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__PressureTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1320 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure (-535)
/* simple XML schema type 'eml22:QuantityOfLightMeasure': */
class SOAP_CMAC eml22__QuantityOfLightMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:QuantityOfLightUom'
        enum eml22__QuantityOfLightUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__QuantityOfLightMeasure, default initialized and not managed by a soap context
        virtual eml22__QuantityOfLightMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__QuantityOfLightMeasure); }
      public:
        /// Constructor with default initializations
        eml22__QuantityOfLightMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__QuantityOfLightMeasure() { }
        /// Friend allocator used by soap_new_eml22__QuantityOfLightMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__QuantityOfLightMeasure * SOAP_FMAC2 soap_instantiate_eml22__QuantityOfLightMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1322 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt (-536)
/* simple XML schema type 'eml22:QuantityOfLightMeasureExt': */
class SOAP_CMAC eml22__QuantityOfLightMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:QuantityOfLightUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__QuantityOfLightMeasureExt, default initialized and not managed by a soap context
        virtual eml22__QuantityOfLightMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__QuantityOfLightMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__QuantityOfLightMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__QuantityOfLightMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__QuantityOfLightMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__QuantityOfLightMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__QuantityOfLightMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1324 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure (-537)
/* simple XML schema type 'eml22:RadianceMeasure': */
class SOAP_CMAC eml22__RadianceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:RadianceUom'
        enum eml22__RadianceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadianceMeasure, default initialized and not managed by a soap context
        virtual eml22__RadianceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadianceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__RadianceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__RadianceMeasure() { }
        /// Friend allocator used by soap_new_eml22__RadianceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadianceMeasure * SOAP_FMAC2 soap_instantiate_eml22__RadianceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1326 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt (-538)
/* simple XML schema type 'eml22:RadianceMeasureExt': */
class SOAP_CMAC eml22__RadianceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:RadianceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadianceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__RadianceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadianceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__RadianceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__RadianceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__RadianceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadianceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__RadianceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1328 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure (-539)
/* simple XML schema type 'eml22:RadiantIntensityMeasure': */
class SOAP_CMAC eml22__RadiantIntensityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:RadiantIntensityUom'
        enum eml22__RadiantIntensityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadiantIntensityMeasure, default initialized and not managed by a soap context
        virtual eml22__RadiantIntensityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadiantIntensityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__RadiantIntensityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__RadiantIntensityMeasure() { }
        /// Friend allocator used by soap_new_eml22__RadiantIntensityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadiantIntensityMeasure * SOAP_FMAC2 soap_instantiate_eml22__RadiantIntensityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1330 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt (-540)
/* simple XML schema type 'eml22:RadiantIntensityMeasureExt': */
class SOAP_CMAC eml22__RadiantIntensityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:RadiantIntensityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__RadiantIntensityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__RadiantIntensityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__RadiantIntensityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__RadiantIntensityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__RadiantIntensityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__RadiantIntensityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__RadiantIntensityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__RadiantIntensityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1332 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure (-541)
/* simple XML schema type 'eml22:ReciprocalAreaMeasure': */
class SOAP_CMAC eml22__ReciprocalAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalAreaUom'
        enum eml22__ReciprocalAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1334 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt (-542)
/* simple XML schema type 'eml22:ReciprocalAreaMeasureExt': */
class SOAP_CMAC eml22__ReciprocalAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1336 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure (-543)
/* simple XML schema type 'eml22:ReciprocalElectricPotentialDifferenceMeasure': */
class SOAP_CMAC eml22__ReciprocalElectricPotentialDifferenceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalElectricPotentialDifferenceUom'
        enum eml22__ReciprocalElectricPotentialDifferenceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalElectricPotentialDifferenceMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalElectricPotentialDifferenceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalElectricPotentialDifferenceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalElectricPotentialDifferenceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalElectricPotentialDifferenceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalElectricPotentialDifferenceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalElectricPotentialDifferenceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1338 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt (-544)
/* simple XML schema type 'eml22:ReciprocalElectricPotentialDifferenceMeasureExt': */
class SOAP_CMAC eml22__ReciprocalElectricPotentialDifferenceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalElectricPotentialDifferenceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalElectricPotentialDifferenceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalElectricPotentialDifferenceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalElectricPotentialDifferenceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalElectricPotentialDifferenceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalElectricPotentialDifferenceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalElectricPotentialDifferenceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalElectricPotentialDifferenceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1340 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure (-545)
/* simple XML schema type 'eml22:ReciprocalForceMeasure': */
class SOAP_CMAC eml22__ReciprocalForceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalForceUom'
        enum eml22__ReciprocalForceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalForceMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalForceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalForceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalForceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalForceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalForceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalForceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalForceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1342 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt (-546)
/* simple XML schema type 'eml22:ReciprocalForceMeasureExt': */
class SOAP_CMAC eml22__ReciprocalForceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalForceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalForceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalForceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalForceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalForceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalForceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalForceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalForceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalForceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1344 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure (-547)
/* simple XML schema type 'eml22:ReciprocalLengthMeasure': */
class SOAP_CMAC eml22__ReciprocalLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalLengthUom'
        enum eml22__ReciprocalLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1346 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt (-548)
/* simple XML schema type 'eml22:ReciprocalLengthMeasureExt': */
class SOAP_CMAC eml22__ReciprocalLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1348 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure (-549)
/* simple XML schema type 'eml22:ReciprocalMassMeasure': */
class SOAP_CMAC eml22__ReciprocalMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalMassUom'
        enum eml22__ReciprocalMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1350 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt (-550)
/* simple XML schema type 'eml22:ReciprocalMassMeasureExt': */
class SOAP_CMAC eml22__ReciprocalMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1352 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure (-551)
/* simple XML schema type 'eml22:ReciprocalMassTimeMeasure': */
class SOAP_CMAC eml22__ReciprocalMassTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalMassTimeUom'
        enum eml22__ReciprocalMassTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalMassTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1354 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt (-552)
/* simple XML schema type 'eml22:ReciprocalMassTimeMeasureExt': */
class SOAP_CMAC eml22__ReciprocalMassTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalMassTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalMassTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalMassTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalMassTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalMassTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalMassTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalMassTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalMassTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalMassTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1356 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure (-553)
/* simple XML schema type 'eml22:ReciprocalPressureMeasure': */
class SOAP_CMAC eml22__ReciprocalPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalPressureUom'
        enum eml22__ReciprocalPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1358 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt (-554)
/* simple XML schema type 'eml22:ReciprocalPressureMeasureExt': */
class SOAP_CMAC eml22__ReciprocalPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1360 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure (-555)
/* simple XML schema type 'eml22:ReciprocalTimeMeasure': */
class SOAP_CMAC eml22__ReciprocalTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalTimeUom'
        enum eml22__ReciprocalTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1362 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt (-556)
/* simple XML schema type 'eml22:ReciprocalTimeMeasureExt': */
class SOAP_CMAC eml22__ReciprocalTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1364 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure (-557)
/* simple XML schema type 'eml22:ReciprocalVolumeMeasure': */
class SOAP_CMAC eml22__ReciprocalVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalVolumeUom'
        enum eml22__ReciprocalVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__ReciprocalVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1366 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt (-558)
/* simple XML schema type 'eml22:ReciprocalVolumeMeasureExt': */
class SOAP_CMAC eml22__ReciprocalVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReciprocalVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReciprocalVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReciprocalVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReciprocalVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReciprocalVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReciprocalVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReciprocalVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReciprocalVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReciprocalVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1368 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure (-559)
/* simple XML schema type 'eml22:ReluctanceMeasure': */
class SOAP_CMAC eml22__ReluctanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReluctanceUom'
        enum eml22__ReluctanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReluctanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ReluctanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReluctanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ReluctanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ReluctanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ReluctanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReluctanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ReluctanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1370 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt (-560)
/* simple XML schema type 'eml22:ReluctanceMeasureExt': */
class SOAP_CMAC eml22__ReluctanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ReluctanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReluctanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ReluctanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReluctanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ReluctanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ReluctanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ReluctanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReluctanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ReluctanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1372 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure (-561)
/* simple XML schema type 'eml22:SecondMomentOfAreaMeasure': */
class SOAP_CMAC eml22__SecondMomentOfAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SecondMomentOfAreaUom'
        enum eml22__SecondMomentOfAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SecondMomentOfAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__SecondMomentOfAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SecondMomentOfAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__SecondMomentOfAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SecondMomentOfAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__SecondMomentOfAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SecondMomentOfAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__SecondMomentOfAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1374 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt (-562)
/* simple XML schema type 'eml22:SecondMomentOfAreaMeasureExt': */
class SOAP_CMAC eml22__SecondMomentOfAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SecondMomentOfAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SecondMomentOfAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SecondMomentOfAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SecondMomentOfAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__SecondMomentOfAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SecondMomentOfAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SecondMomentOfAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SecondMomentOfAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SecondMomentOfAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1376 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure (-563)
/* simple XML schema type 'eml22:SignalingEventPerTimeMeasure': */
class SOAP_CMAC eml22__SignalingEventPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SignalingEventPerTimeUom'
        enum eml22__SignalingEventPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SignalingEventPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__SignalingEventPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SignalingEventPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__SignalingEventPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SignalingEventPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__SignalingEventPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SignalingEventPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__SignalingEventPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1378 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt (-564)
/* simple XML schema type 'eml22:SignalingEventPerTimeMeasureExt': */
class SOAP_CMAC eml22__SignalingEventPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SignalingEventPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SignalingEventPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SignalingEventPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SignalingEventPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__SignalingEventPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SignalingEventPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SignalingEventPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SignalingEventPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SignalingEventPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1380 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure (-565)
/* simple XML schema type 'eml22:SolidAngleMeasure': */
class SOAP_CMAC eml22__SolidAngleMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SolidAngleUom'
        enum eml22__SolidAngleUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SolidAngleMeasure, default initialized and not managed by a soap context
        virtual eml22__SolidAngleMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SolidAngleMeasure); }
      public:
        /// Constructor with default initializations
        eml22__SolidAngleMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SolidAngleMeasure() { }
        /// Friend allocator used by soap_new_eml22__SolidAngleMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SolidAngleMeasure * SOAP_FMAC2 soap_instantiate_eml22__SolidAngleMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1382 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt (-566)
/* simple XML schema type 'eml22:SolidAngleMeasureExt': */
class SOAP_CMAC eml22__SolidAngleMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SolidAngleUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SolidAngleMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SolidAngleMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SolidAngleMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__SolidAngleMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SolidAngleMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SolidAngleMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SolidAngleMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SolidAngleMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1384 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure (-567)
/* simple XML schema type 'eml22:SpecificHeatCapacityMeasure': */
class SOAP_CMAC eml22__SpecificHeatCapacityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SpecificHeatCapacityUom'
        enum eml22__SpecificHeatCapacityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SpecificHeatCapacityMeasure, default initialized and not managed by a soap context
        virtual eml22__SpecificHeatCapacityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SpecificHeatCapacityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__SpecificHeatCapacityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__SpecificHeatCapacityMeasure() { }
        /// Friend allocator used by soap_new_eml22__SpecificHeatCapacityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__SpecificHeatCapacityMeasure * SOAP_FMAC2 soap_instantiate_eml22__SpecificHeatCapacityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1386 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt (-568)
/* simple XML schema type 'eml22:SpecificHeatCapacityMeasureExt': */
class SOAP_CMAC eml22__SpecificHeatCapacityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:SpecificHeatCapacityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__SpecificHeatCapacityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__SpecificHeatCapacityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__SpecificHeatCapacityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__SpecificHeatCapacityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__SpecificHeatCapacityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__SpecificHeatCapacityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__SpecificHeatCapacityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__SpecificHeatCapacityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1388 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure (-569)
/* simple XML schema type 'eml22:TemperatureIntervalMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalUom'
        enum eml22__TemperatureIntervalUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1390 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt (-570)
/* simple XML schema type 'eml22:TemperatureIntervalMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1392 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure (-571)
/* simple XML schema type 'eml22:TemperatureIntervalPerLengthMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalPerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalPerLengthUom'
        enum eml22__TemperatureIntervalPerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalPerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1394 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt (-572)
/* simple XML schema type 'eml22:TemperatureIntervalPerLengthMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalPerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalPerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalPerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1396 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure (-573)
/* simple XML schema type 'eml22:TemperatureIntervalPerPressureMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalPerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalPerPressureUom'
        enum eml22__TemperatureIntervalPerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalPerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1398 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt (-574)
/* simple XML schema type 'eml22:TemperatureIntervalPerPressureMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalPerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalPerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalPerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1400 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure (-575)
/* simple XML schema type 'eml22:TemperatureIntervalPerTimeMeasure': */
class SOAP_CMAC eml22__TemperatureIntervalPerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalPerTimeUom'
        enum eml22__TemperatureIntervalPerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalPerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1402 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt (-576)
/* simple XML schema type 'eml22:TemperatureIntervalPerTimeMeasureExt': */
class SOAP_CMAC eml22__TemperatureIntervalPerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TemperatureIntervalPerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TemperatureIntervalPerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TemperatureIntervalPerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TemperatureIntervalPerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TemperatureIntervalPerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TemperatureIntervalPerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TemperatureIntervalPerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TemperatureIntervalPerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TemperatureIntervalPerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1404 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure (-577)
/* simple XML schema type 'eml22:ThermalConductanceMeasure': */
class SOAP_CMAC eml22__ThermalConductanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalConductanceUom'
        enum eml22__ThermalConductanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalConductanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermalConductanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1406 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt (-578)
/* simple XML schema type 'eml22:ThermalConductanceMeasureExt': */
class SOAP_CMAC eml22__ThermalConductanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalConductanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalConductanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermalConductanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1408 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure (-579)
/* simple XML schema type 'eml22:ThermalConductivityMeasure': */
class SOAP_CMAC eml22__ThermalConductivityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalConductivityUom'
        enum eml22__ThermalConductivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalConductivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductivityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermalConductivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1410 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt (-580)
/* simple XML schema type 'eml22:ThermalConductivityMeasureExt': */
class SOAP_CMAC eml22__ThermalConductivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalConductivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalConductivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalConductivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalConductivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermalConductivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalConductivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalConductivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalConductivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalConductivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1412 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure (-581)
/* simple XML schema type 'eml22:ThermalDiffusivityMeasure': */
class SOAP_CMAC eml22__ThermalDiffusivityMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalDiffusivityUom'
        enum eml22__ThermalDiffusivityUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalDiffusivityMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalDiffusivityMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalDiffusivityMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermalDiffusivityMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalDiffusivityMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalDiffusivityMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalDiffusivityMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalDiffusivityMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1414 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt (-582)
/* simple XML schema type 'eml22:ThermalDiffusivityMeasureExt': */
class SOAP_CMAC eml22__ThermalDiffusivityMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalDiffusivityUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalDiffusivityMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalDiffusivityMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalDiffusivityMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermalDiffusivityMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalDiffusivityMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalDiffusivityMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalDiffusivityMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalDiffusivityMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1416 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure (-583)
/* simple XML schema type 'eml22:ThermalInsulanceMeasure': */
class SOAP_CMAC eml22__ThermalInsulanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalInsulanceUom'
        enum eml22__ThermalInsulanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalInsulanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalInsulanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalInsulanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermalInsulanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalInsulanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalInsulanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalInsulanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalInsulanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1418 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt (-584)
/* simple XML schema type 'eml22:ThermalInsulanceMeasureExt': */
class SOAP_CMAC eml22__ThermalInsulanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalInsulanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalInsulanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalInsulanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalInsulanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermalInsulanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalInsulanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalInsulanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalInsulanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalInsulanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1420 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure (-585)
/* simple XML schema type 'eml22:ThermalResistanceMeasure': */
class SOAP_CMAC eml22__ThermalResistanceMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalResistanceUom'
        enum eml22__ThermalResistanceUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalResistanceMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermalResistanceMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalResistanceMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermalResistanceMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalResistanceMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermalResistanceMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalResistanceMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermalResistanceMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1422 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt (-586)
/* simple XML schema type 'eml22:ThermalResistanceMeasureExt': */
class SOAP_CMAC eml22__ThermalResistanceMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermalResistanceUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermalResistanceMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermalResistanceMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermalResistanceMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermalResistanceMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermalResistanceMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermalResistanceMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermalResistanceMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermalResistanceMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1424 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure (-587)
/* simple XML schema type 'eml22:ThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml22__ThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermodynamicTemperatureUom'
        enum eml22__ThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1426 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt (-588)
/* simple XML schema type 'eml22:ThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml22__ThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1428 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-589)
/* simple XML schema type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure': */
class SOAP_CMAC eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUom'
        enum eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1430 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-590)
/* simple XML schema type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt': */
class SOAP_CMAC eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1432 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure (-591)
/* simple XML schema type 'eml22:TimeMeasure': */
class SOAP_CMAC eml22__TimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimeUom'
        enum eml22__TimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeMeasure, default initialized and not managed by a soap context
        virtual eml22__TimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1434 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt (-592)
/* simple XML schema type 'eml22:TimeMeasureExt': */
class SOAP_CMAC eml22__TimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1436 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure (-593)
/* simple XML schema type 'eml22:TimePerLengthMeasure': */
class SOAP_CMAC eml22__TimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerLengthUom'
        enum eml22__TimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1438 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt (-594)
/* simple XML schema type 'eml22:TimePerLengthMeasureExt': */
class SOAP_CMAC eml22__TimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1440 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure (-595)
/* simple XML schema type 'eml22:TimePerMassMeasure': */
class SOAP_CMAC eml22__TimePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerMassUom'
        enum eml22__TimePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TimePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1442 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt (-596)
/* simple XML schema type 'eml22:TimePerMassMeasureExt': */
class SOAP_CMAC eml22__TimePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TimePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1444 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure (-597)
/* simple XML schema type 'eml22:TimePerTimeMeasure': */
class SOAP_CMAC eml22__TimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerTimeUom'
        enum eml22__TimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1446 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt (-598)
/* simple XML schema type 'eml22:TimePerTimeMeasureExt': */
class SOAP_CMAC eml22__TimePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1448 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure (-599)
/* simple XML schema type 'eml22:TimePerVolumeMeasure': */
class SOAP_CMAC eml22__TimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerVolumeUom'
        enum eml22__TimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__TimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__TimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__TimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__TimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1450 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt (-600)
/* simple XML schema type 'eml22:TimePerVolumeMeasureExt': */
class SOAP_CMAC eml22__TimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:TimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__TimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__TimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__TimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__TimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__TimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__TimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__TimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__TimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1452 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure (-601)
/* simple XML schema type 'eml22:UnitlessMeasure': */
class SOAP_CMAC eml22__UnitlessMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__UnitlessMeasure, default initialized and not managed by a soap context
        virtual eml22__UnitlessMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__UnitlessMeasure); }
      public:
        /// Constructor with default initializations
        eml22__UnitlessMeasure() : __item(), soap() { }
        virtual ~eml22__UnitlessMeasure() { }
        /// Friend allocator used by soap_new_eml22__UnitlessMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__UnitlessMeasure * SOAP_FMAC2 soap_instantiate_eml22__UnitlessMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1454 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure (-602)
/* simple XML schema type 'eml22:VerticalCoordinateMeasure': */
class SOAP_CMAC eml22__VerticalCoordinateMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VerticalCoordinateUom'
        enum eml22__VerticalCoordinateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalCoordinateMeasure, default initialized and not managed by a soap context
        virtual eml22__VerticalCoordinateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalCoordinateMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VerticalCoordinateMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VerticalCoordinateMeasure() { }
        /// Friend allocator used by soap_new_eml22__VerticalCoordinateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalCoordinateMeasure * SOAP_FMAC2 soap_instantiate_eml22__VerticalCoordinateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1456 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt (-603)
/* simple XML schema type 'eml22:VerticalCoordinateMeasureExt': */
class SOAP_CMAC eml22__VerticalCoordinateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VerticalCoordinateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VerticalCoordinateMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VerticalCoordinateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VerticalCoordinateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VerticalCoordinateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VerticalCoordinateMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VerticalCoordinateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VerticalCoordinateMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VerticalCoordinateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1458 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure (-604)
/* simple XML schema type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasure': */
class SOAP_CMAC eml22__VolumeFlowRatePerVolumeFlowRateMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumeFlowRatePerVolumeFlowRateUom'
        enum eml22__VolumeFlowRatePerVolumeFlowRateUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeFlowRatePerVolumeFlowRateMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumeFlowRatePerVolumeFlowRateMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeFlowRatePerVolumeFlowRateMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumeFlowRatePerVolumeFlowRateMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeFlowRatePerVolumeFlowRateMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeFlowRatePerVolumeFlowRateMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumeFlowRatePerVolumeFlowRateMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1460 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt (-605)
/* simple XML schema type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasureExt': */
class SOAP_CMAC eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumeFlowRatePerVolumeFlowRateUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1462 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure (-606)
/* simple XML schema type 'eml22:VolumeMeasure': */
class SOAP_CMAC eml22__VolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1464 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt (-607)
/* simple XML schema type 'eml22:VolumeMeasureExt': */
class SOAP_CMAC eml22__VolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure (-608)
/* simple XML schema type 'eml22:VolumePerAreaMeasure': */
class SOAP_CMAC eml22__VolumePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerAreaUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1468 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt (-609)
/* simple XML schema type 'eml22:VolumePerAreaMeasureExt': */
class SOAP_CMAC eml22__VolumePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1470 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure (-610)
/* simple XML schema type 'eml22:VolumePerLengthMeasure': */
class SOAP_CMAC eml22__VolumePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerLengthUom'
        enum eml22__VolumePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1472 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt (-611)
/* simple XML schema type 'eml22:VolumePerLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1474 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure (-612)
/* simple XML schema type 'eml22:VolumePerMassMeasure': */
class SOAP_CMAC eml22__VolumePerMassMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerMassUom'
        enum eml22__VolumePerMassUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerMassMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerMassMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerMassMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerMassMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerMassMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerMassMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerMassMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerMassMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1476 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt (-613)
/* simple XML schema type 'eml22:VolumePerMassMeasureExt': */
class SOAP_CMAC eml22__VolumePerMassMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerMassUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerMassMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerMassMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerMassMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerMassMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerMassMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerMassMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerMassMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerMassMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1478 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure (-614)
/* simple XML schema type 'eml22:VolumePerPressureMeasure': */
class SOAP_CMAC eml22__VolumePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerPressureUom'
        enum eml22__VolumePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1480 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt (-615)
/* simple XML schema type 'eml22:VolumePerPressureMeasureExt': */
class SOAP_CMAC eml22__VolumePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1482 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure (-616)
/* simple XML schema type 'eml22:VolumePerRotationMeasure': */
class SOAP_CMAC eml22__VolumePerRotationMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerRotationUom'
        enum eml22__VolumePerRotationUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerRotationMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerRotationMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerRotationMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerRotationMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerRotationMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerRotationMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerRotationMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerRotationMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1484 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt (-617)
/* simple XML schema type 'eml22:VolumePerRotationMeasureExt': */
class SOAP_CMAC eml22__VolumePerRotationMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerRotationUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerRotationMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerRotationMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerRotationMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerRotationMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerRotationMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerRotationMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerRotationMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerRotationMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1486 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure (-618)
/* simple XML schema type 'eml22:VolumePerTimeLengthMeasure': */
class SOAP_CMAC eml22__VolumePerTimeLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimeLengthUom'
        enum eml22__VolumePerTimeLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimeLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1488 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt (-619)
/* simple XML schema type 'eml22:VolumePerTimeLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimeLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimeLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimeLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1490 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure (-620)
/* simple XML schema type 'eml22:VolumePerTimeMeasure': */
class SOAP_CMAC eml22__VolumePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1492 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt (-621)
/* simple XML schema type 'eml22:VolumePerTimeMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1494 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure (-622)
/* simple XML schema type 'eml22:VolumePerTimePerAreaMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerAreaMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerAreaUom'
        enum eml22__VolumePerTimePerAreaUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerAreaMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerAreaMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerAreaMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerAreaMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerAreaMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerAreaMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerAreaMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerAreaMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1496 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt (-623)
/* simple XML schema type 'eml22:VolumePerTimePerAreaMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerAreaMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerAreaUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerAreaMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerAreaMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerAreaMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerAreaMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerAreaMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerAreaMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerAreaMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerAreaMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1498 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure (-624)
/* simple XML schema type 'eml22:VolumePerTimePerLengthMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerLengthUom'
        enum eml22__VolumePerTimePerLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1500 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt (-625)
/* simple XML schema type 'eml22:VolumePerTimePerLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1502 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure (-626)
/* simple XML schema type 'eml22:VolumePerTimePerPressureLengthMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerPressureLengthMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerPressureLengthUom'
        enum eml22__VolumePerTimePerPressureLengthUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureLengthMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureLengthMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureLengthMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerPressureLengthMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureLengthMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureLengthMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureLengthMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureLengthMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1504 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt (-627)
/* simple XML schema type 'eml22:VolumePerTimePerPressureLengthMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerPressureLengthMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerPressureLengthUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureLengthMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureLengthMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureLengthMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerPressureLengthMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureLengthMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureLengthMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureLengthMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1506 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure (-628)
/* simple XML schema type 'eml22:VolumePerTimePerPressureMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerPressureMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerPressureUom'
        enum eml22__VolumePerTimePerPressureUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerPressureMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1508 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt (-629)
/* simple XML schema type 'eml22:VolumePerTimePerPressureMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerPressureMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerPressureUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerPressureMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerPressureMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerPressureMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerPressureMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerPressureMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerPressureMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerPressureMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerPressureMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1510 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure (-630)
/* simple XML schema type 'eml22:VolumePerTimePerTimeMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerTimeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerTimeUom'
        enum eml22__VolumePerTimePerTimeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerTimeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerTimeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerTimeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerTimeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerTimeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerTimeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerTimeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerTimeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1512 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt (-631)
/* simple XML schema type 'eml22:VolumePerTimePerTimeMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerTimeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerTimeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerTimeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerTimeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerTimeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerTimeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerTimeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerTimeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerTimeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerTimeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1514 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure (-632)
/* simple XML schema type 'eml22:VolumePerTimePerVolumeMeasure': */
class SOAP_CMAC eml22__VolumePerTimePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerVolumeUom'
        enum eml22__VolumePerTimePerVolumeUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1516 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt (-633)
/* simple XML schema type 'eml22:VolumePerTimePerVolumeMeasureExt': */
class SOAP_CMAC eml22__VolumePerTimePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerTimePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerTimePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerTimePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerTimePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerTimePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerTimePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerTimePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerTimePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerTimePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1518 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure (-634)
/* simple XML schema type 'eml22:VolumePerVolumeMeasure': */
class SOAP_CMAC eml22__VolumePerVolumeMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerVolumeUomWithLegacy'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerVolumeMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumePerVolumeMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerVolumeMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerVolumeMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerVolumeMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumePerVolumeMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerVolumeMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumePerVolumeMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1520 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt (-635)
/* simple XML schema type 'eml22:VolumePerVolumeMeasureExt': */
class SOAP_CMAC eml22__VolumePerVolumeMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumePerVolumeUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumePerVolumeMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumePerVolumeMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumePerVolumeMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumePerVolumeMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumePerVolumeMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumePerVolumeMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumePerVolumeMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumePerVolumeMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1522 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure (-636)
/* simple XML schema type 'eml22:VolumetricHeatTransferCoefficientMeasure': */
class SOAP_CMAC eml22__VolumetricHeatTransferCoefficientMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumetricHeatTransferCoefficientUom'
        enum eml22__VolumetricHeatTransferCoefficientUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricHeatTransferCoefficientMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumetricHeatTransferCoefficientMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricHeatTransferCoefficientMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumetricHeatTransferCoefficientMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricHeatTransferCoefficientMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumetricHeatTransferCoefficientMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricHeatTransferCoefficientMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumetricHeatTransferCoefficientMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1524 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt (-637)
/* simple XML schema type 'eml22:VolumetricHeatTransferCoefficientMeasureExt': */
class SOAP_CMAC eml22__VolumetricHeatTransferCoefficientMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumetricHeatTransferCoefficientUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricHeatTransferCoefficientMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumetricHeatTransferCoefficientMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricHeatTransferCoefficientMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumetricHeatTransferCoefficientMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricHeatTransferCoefficientMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricHeatTransferCoefficientMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumetricHeatTransferCoefficientMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1526 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure (-638)
/* simple XML schema type 'eml22:VolumetricThermalExpansionMeasure': */
class SOAP_CMAC eml22__VolumetricThermalExpansionMeasure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumetricThermalExpansionUom'
        enum eml22__VolumetricThermalExpansionUom uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricThermalExpansionMeasure, default initialized and not managed by a soap context
        virtual eml22__VolumetricThermalExpansionMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricThermalExpansionMeasure); }
      public:
        /// Constructor with default initializations
        eml22__VolumetricThermalExpansionMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricThermalExpansionMeasure() { }
        /// Friend allocator used by soap_new_eml22__VolumetricThermalExpansionMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricThermalExpansionMeasure * SOAP_FMAC2 soap_instantiate_eml22__VolumetricThermalExpansionMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1528 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt (-639)
/* simple XML schema type 'eml22:VolumetricThermalExpansionMeasureExt': */
class SOAP_CMAC eml22__VolumetricThermalExpansionMeasureExt {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:VolumetricThermalExpansionUomExt'
        std::string uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__VolumetricThermalExpansionMeasureExt, default initialized and not managed by a soap context
        virtual eml22__VolumetricThermalExpansionMeasureExt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__VolumetricThermalExpansionMeasureExt); }
      public:
        /// Constructor with default initializations
        eml22__VolumetricThermalExpansionMeasureExt() : __item(), uom(), soap() { }
        virtual ~eml22__VolumetricThermalExpansionMeasureExt() { }
        /// Friend allocator used by soap_new_eml22__VolumetricThermalExpansionMeasureExt(struct soap*, int)
        friend SOAP_FMAC1 eml22__VolumetricThermalExpansionMeasureExt * SOAP_FMAC2 soap_instantiate_eml22__VolumetricThermalExpansionMeasureExt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1590 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure (-670)
/* simple XML schema type 'eml22:ReferencePressure': */
class SOAP_CMAC eml22__ReferencePressure {
      public:
        /// Simple content of XML schema type 'eml22:AbstractMeasure' wrapped by this struct
        double __item;
        /// Required attribute 'uom' of XML schema type 'eml22:PressureUom'
        enum eml22__PressureUom uom;
        /// Optional attribute 'referencePressureKind' of XML schema type 'eml22:ReferencePressureKind'
        enum eml22__ReferencePressureKind *referencePressureKind;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__ReferencePressure, default initialized and not managed by a soap context
        virtual eml22__ReferencePressure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__ReferencePressure); }
      public:
        /// Constructor with default initializations
        eml22__ReferencePressure() : __item(), uom(), referencePressureKind(), soap() { }
        virtual ~eml22__ReferencePressure() { }
        /// Friend allocator used by soap_new_eml22__ReferencePressure(struct soap*, int)
        friend SOAP_FMAC1 eml22__ReferencePressure * SOAP_FMAC2 soap_instantiate_eml22__ReferencePressure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1658 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType (-704)
/* complex XML schema type 'gml:DefinitionType': */
class SOAP_CMAC gml__DefinitionType : public gml__DefinitionBaseType {
      public:
        /// Optional element 'gml:remarks' of XML schema type 'xsd:string'
        std::string *remarks;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__DefinitionType, default initialized and not managed by a soap context
        virtual gml__DefinitionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__DefinitionType); }
      public:
        /// Constructor with default initializations
        gml__DefinitionType() : remarks() { }
        virtual ~gml__DefinitionType() { }
        /// Friend allocator used by soap_new_gml__DefinitionType(struct soap*, int)
        friend SOAP_FMAC1 gml__DefinitionType * SOAP_FMAC2 soap_instantiate_gml__DefinitionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1668 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType (-709)
/* simple XML schema type 'gml:CodeWithAuthorityType': */
class SOAP_CMAC gml__CodeWithAuthorityType : public gml__CodeType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CodeWithAuthorityType, default initialized and not managed by a soap context
        virtual gml__CodeWithAuthorityType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CodeWithAuthorityType); }
      public:
        /// Constructor with default initializations
        gml__CodeWithAuthorityType() { }
        virtual ~gml__CodeWithAuthorityType() { }
        /// Friend allocator used by soap_new_gml__CodeWithAuthorityType(struct soap*, int)
        friend SOAP_FMAC1 gml__CodeWithAuthorityType * SOAP_FMAC2 soap_instantiate_gml__CodeWithAuthorityType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1672 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType (-711)
/* complex XML schema type 'gml:AbstractTimePrimitiveType': */
class SOAP_CMAC gml__AbstractTimePrimitiveType : public gml__AbstractTimeObjectType {
      public:
        /// Optional element 'gml:relatedTime' of XML schema type 'gml:RelatedTimeType'
        std::vector<gml__RelatedTimeType *> relatedTime;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractTimePrimitiveType, default initialized and not managed by a soap context
        virtual gml__AbstractTimePrimitiveType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractTimePrimitiveType); }
      public:
        /// Constructor with default initializations
        gml__AbstractTimePrimitiveType() : relatedTime() { }
        virtual ~gml__AbstractTimePrimitiveType() { }
        /// Friend allocator used by soap_new_gml__AbstractTimePrimitiveType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractTimePrimitiveType * SOAP_FMAC2 soap_instantiate_gml__AbstractTimePrimitiveType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1708 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AngleType
#define SOAP_TYPE_gsoap_eml2_2_gml__AngleType (-729)
/* simple XML schema type 'gml:AngleType': */
class SOAP_CMAC gml__AngleType : public gml__MeasureType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AngleType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AngleType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AngleType, default initialized and not managed by a soap context
        virtual gml__AngleType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AngleType); }
      public:
        /// Constructor with default initializations
        gml__AngleType() { }
        virtual ~gml__AngleType() { }
        /// Friend allocator used by soap_new_gml__AngleType(struct soap*, int)
        friend SOAP_FMAC1 gml__AngleType * SOAP_FMAC2 soap_instantiate_gml__AngleType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1716 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__LengthType
#define SOAP_TYPE_gsoap_eml2_2_gml__LengthType (-733)
/* simple XML schema type 'gml:LengthType': */
class SOAP_CMAC gml__LengthType : public gml__MeasureType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__LengthType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__LengthType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__LengthType, default initialized and not managed by a soap context
        virtual gml__LengthType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__LengthType); }
      public:
        /// Constructor with default initializations
        gml__LengthType() { }
        virtual ~gml__LengthType() { }
        /// Friend allocator used by soap_new_gml__LengthType(struct soap*, int)
        friend SOAP_FMAC1 gml__LengthType * SOAP_FMAC2 soap_instantiate_gml__LengthType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1764 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType (-757)
/* complex XML schema type 'gmd:AbstractDQ_PositionalAccuracy_Type': */
class SOAP_CMAC gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType : public gmd__AbstractDQ_USCOREElement_USCOREType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType, default initialized and not managed by a soap context
        virtual gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType); }
      public:
        /// Constructor with default initializations
        gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType() { }
        virtual ~gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType() { }
        /// Friend allocator used by soap_new_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType(struct soap*, int)
        friend SOAP_FMAC1 gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType * SOAP_FMAC2 soap_instantiate_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:334 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FrontierFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FrontierFeature (-42)
/* complex XML schema type 'resqml2:FrontierFeature': */
class SOAP_CMAC resqml2__FrontierFeature : public resqml2__AbstractTechnicalFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__FrontierFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__FrontierFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__FrontierFeature, default initialized and not managed by a soap context
        virtual resqml2__FrontierFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__FrontierFeature); }
      public:
        /// Constructor with default initializations
        resqml2__FrontierFeature() { }
        virtual ~resqml2__FrontierFeature() { }
        /// Friend allocator used by soap_new_resqml2__FrontierFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__FrontierFeature * SOAP_FMAC2 soap_instantiate_resqml2__FrontierFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:348 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractStratigraphicOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractStratigraphicOrganizationInterpretation (-49)
/* complex XML schema type 'resqml2:AbstractStratigraphicOrganizationInterpretation': */
class SOAP_CMAC resqml2__AbstractStratigraphicOrganizationInterpretation : public resqml2__AbstractOrganizationInterpretation {
      public:
        /// Required element 'resqml2:OrderingCriteria' of XML schema type 'resqml2:OrderingCriteria'
        enum resqml2__OrderingCriteria OrderingCriteria;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractStratigraphicOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractStratigraphicOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractStratigraphicOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml2__AbstractStratigraphicOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractStratigraphicOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractStratigraphicOrganizationInterpretation() : OrderingCriteria() { }
        virtual ~resqml2__AbstractStratigraphicOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractStratigraphicOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractStratigraphicOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractStratigraphicOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:362 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FaultInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FaultInterpretation (-56)
/* complex XML schema type 'resqml2:FaultInterpretation': */
class SOAP_CMAC resqml2__FaultInterpretation : public resqml2__BoundaryFeatureInterpretation {
      public:
        /// Optional element 'resqml2:IsListric' of XML schema type 'xsd:boolean'
        bool *IsListric;
        /// Optional element 'resqml2:MaximumThrow' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MaximumThrow;
        /// Optional element 'resqml2:MeanAzimuth' of XML schema type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *MeanAzimuth;
        /// Optional element 'resqml2:MeanDip' of XML schema type 'eml22:PlaneAngleMeasure'
        eml22__PlaneAngleMeasure *MeanDip;
        /// Optional element 'resqml2:ThrowInterpretation' of XML schema type 'resqml2:FaultThrow'
        std::vector<resqml2__FaultThrow *> ThrowInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__FaultInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__FaultInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__FaultInterpretation, default initialized and not managed by a soap context
        virtual resqml2__FaultInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__FaultInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__FaultInterpretation() : IsListric(), MaximumThrow(), MeanAzimuth(), MeanDip(), ThrowInterpretation() { }
        virtual ~resqml2__FaultInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__FaultInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__FaultInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__FaultInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:368 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FluidBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FluidBoundaryInterpretation (-59)
/* complex XML schema type 'resqml2:FluidBoundaryInterpretation': */
class SOAP_CMAC resqml2__FluidBoundaryInterpretation : public resqml2__BoundaryFeatureInterpretation {
      public:
        /// Required element 'resqml2:FluidContact' of XML schema type 'resqml2:FluidContact'
        enum resqml2__FluidContact FluidContact;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__FluidBoundaryInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__FluidBoundaryInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__FluidBoundaryInterpretation, default initialized and not managed by a soap context
        virtual resqml2__FluidBoundaryInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__FluidBoundaryInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__FluidBoundaryInterpretation() : FluidContact() { }
        virtual ~resqml2__FluidBoundaryInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__FluidBoundaryInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__FluidBoundaryInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__FluidBoundaryInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:374 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyBoundaryInterpretation (-62)
/* complex XML schema type 'resqml2:GeobodyBoundaryInterpretation': */
class SOAP_CMAC resqml2__GeobodyBoundaryInterpretation : public resqml2__BoundaryFeatureInterpretation {
      public:
        /// Optional element 'resqml2:BoundaryRelation' of XML schema type 'resqml2:BoundaryRelation'
        std::vector<enum resqml2__BoundaryRelation> BoundaryRelation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyBoundaryInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyBoundaryInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GeobodyBoundaryInterpretation, default initialized and not managed by a soap context
        virtual resqml2__GeobodyBoundaryInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GeobodyBoundaryInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__GeobodyBoundaryInterpretation() : BoundaryRelation() { }
        virtual ~resqml2__GeobodyBoundaryInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__GeobodyBoundaryInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GeobodyBoundaryInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__GeobodyBoundaryInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:376 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyInterpretation (-63)
/* complex XML schema type 'resqml2:GeobodyInterpretation': */
class SOAP_CMAC resqml2__GeobodyInterpretation : public resqml2__GeologicUnitInterpretation {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GeobodyInterpretation, default initialized and not managed by a soap context
        virtual resqml2__GeobodyInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GeobodyInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__GeobodyInterpretation() { }
        virtual ~resqml2__GeobodyInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__GeobodyInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GeobodyInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__GeobodyInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:40171 */
#ifndef SOAP_TYPE_gsoap_eml2_2___resqml2__HorizonInterpretation_sequence
#define SOAP_TYPE_gsoap_eml2_2___resqml2__HorizonInterpretation_sequence (-1655)
/* Wrapper: */
struct SOAP_CMAC __resqml2__HorizonInterpretation_sequence {
      public:
        /** Optional element 'resqml2:BoundaryRelation' of XML schema type 'resqml2:BoundaryRelation' */
        std::vector<enum resqml2__BoundaryRelation> BoundaryRelation;
        /** Optional element 'resqml2:HorizonStratigraphicRole' of XML schema type 'resqml2:HorizonStratigraphicRole' */
        std::vector<enum resqml2__HorizonStratigraphicRole> HorizonStratigraphicRole;
        /** Optional element 'resqml2:SequenceStratigraphySurface' of XML schema type 'resqml2:SequenceStratigraphySurface' */
        enum resqml2__SequenceStratigraphySurface *SequenceStratigraphySurface;
        /** Optional element 'resqml2:ChronoBottom' of XML schema type 'xsd:boolean' */
        bool *ChronoBottom;
        /** Optional element 'resqml2:ChronoTop' of XML schema type 'xsd:boolean' */
        bool *ChronoTop;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2___resqml2__HorizonInterpretation_sequence */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2___resqml2__HorizonInterpretation_sequence; }
        /** Constructor with member initializations */
        __resqml2__HorizonInterpretation_sequence() : BoundaryRelation(), HorizonStratigraphicRole(), SequenceStratigraphySurface(), ChronoBottom(), ChronoTop() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __resqml2__HorizonInterpretation_sequence * SOAP_FMAC2 soap_instantiate___resqml2__HorizonInterpretation_sequence(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:382 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonInterpretation (-66)
/* complex XML schema type 'resqml2:HorizonInterpretation': */
class SOAP_CMAC resqml2__HorizonInterpretation : public resqml2__BoundaryFeatureInterpretation {
      public:
        struct __resqml2__HorizonInterpretation_sequence *__HorizonInterpretation_sequence;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__HorizonInterpretation, default initialized and not managed by a soap context
        virtual resqml2__HorizonInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__HorizonInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__HorizonInterpretation() : __HorizonInterpretation_sequence() { }
        virtual ~resqml2__HorizonInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__HorizonInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__HorizonInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__HorizonInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:386 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidOrganizationInterpretation (-68)
/* complex XML schema type 'resqml2:RockFluidOrganizationInterpretation': */
class SOAP_CMAC resqml2__RockFluidOrganizationInterpretation : public resqml2__AbstractOrganizationInterpretation {
      public:
        /// Optional element 'resqml2:RockFluidUnitIndex' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> RockFluidUnitIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RockFluidOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml2__RockFluidOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RockFluidOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__RockFluidOrganizationInterpretation() : RockFluidUnitIndex() { }
        virtual ~resqml2__RockFluidOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__RockFluidOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RockFluidOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__RockFluidOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:388 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidUnitInterpretation (-69)
/* complex XML schema type 'resqml2:RockFluidUnitInterpretation': */
class SOAP_CMAC resqml2__RockFluidUnitInterpretation : public resqml2__GeologicUnitInterpretation {
      public:
        /// Optional element 'resqml2:Phase' of XML schema type 'resqml2:Phase'
        enum resqml2__Phase *Phase;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidUnitInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidUnitInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__RockFluidUnitInterpretation, default initialized and not managed by a soap context
        virtual resqml2__RockFluidUnitInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__RockFluidUnitInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__RockFluidUnitInterpretation() : Phase() { }
        virtual ~resqml2__RockFluidUnitInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__RockFluidUnitInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__RockFluidUnitInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__RockFluidUnitInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:398 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitInterpretation (-74)
/* complex XML schema type 'resqml2:StratigraphicUnitInterpretation': */
class SOAP_CMAC resqml2__StratigraphicUnitInterpretation : public resqml2__GeologicUnitInterpretation {
      public:
        /// Optional element 'resqml2:DepositionMode' of XML schema type 'resqml2:DepositionMode'
        enum resqml2__DepositionMode *DepositionMode;
        /// Optional element 'resqml2:MaxThickness' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MaxThickness;
        /// Optional element 'resqml2:MinThickness' of XML schema type 'eml22:LengthMeasure'
        eml22__LengthMeasure *MinThickness;
        /// Optional element 'resqml2:StratigraphicUnitKind' of XML schema type 'resqml2:StratigraphicUnitKind'
        enum resqml2__StratigraphicUnitKind *StratigraphicUnitKind;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StratigraphicUnitInterpretation, default initialized and not managed by a soap context
        virtual resqml2__StratigraphicUnitInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StratigraphicUnitInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__StratigraphicUnitInterpretation() : DepositionMode(), MaxThickness(), MinThickness(), StratigraphicUnitKind() { }
        virtual ~resqml2__StratigraphicUnitInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__StratigraphicUnitInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StratigraphicUnitInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__StratigraphicUnitInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:400 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StructuralOrganizationInterpretation (-75)
/* complex XML schema type 'resqml2:StructuralOrganizationInterpretation': */
class SOAP_CMAC resqml2__StructuralOrganizationInterpretation : public resqml2__AbstractOrganizationInterpretation {
      public:
        /// Required element 'resqml2:OrderingCriteria' of XML schema type 'resqml2:OrderingCriteria'
        enum resqml2__OrderingCriteria OrderingCriteria;
        /// Optional element 'resqml2:Sides' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> Sides;
        /// Optional element 'resqml2:TopFrontier' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> TopFrontier;
        /// Optional element 'resqml2:BottomFrontier' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> BottomFrontier;
        /// Optional element 'resqml2:UnorderedFaultCollection' of XML schema type 'resqml2:FeatureInterpretationSet'
        resqml2__FeatureInterpretationSet *UnorderedFaultCollection;
        /// Optional element 'resqml2:OrderedBoundaryFeatureInterpretation' of XML schema type 'resqml2:BoundaryFeatureInterpretationPlusItsRank'
        std::vector<resqml2__BoundaryFeatureInterpretationPlusItsRank *> OrderedBoundaryFeatureInterpretation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StructuralOrganizationInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StructuralOrganizationInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StructuralOrganizationInterpretation, default initialized and not managed by a soap context
        virtual resqml2__StructuralOrganizationInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StructuralOrganizationInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__StructuralOrganizationInterpretation() : OrderingCriteria(), Sides(), TopFrontier(), BottomFrontier(), UnorderedFaultCollection(), OrderedBoundaryFeatureInterpretation() { }
        virtual ~resqml2__StructuralOrganizationInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__StructuralOrganizationInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StructuralOrganizationInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__StructuralOrganizationInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:402 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BlockedWellboreRepresentation (-76)
/* complex XML schema type 'resqml2:BlockedWellboreRepresentation': */
class SOAP_CMAC resqml2__BlockedWellboreRepresentation : public resqml2__WellboreFrameRepresentation {
      public:
        /// Required element 'resqml2:IntervalGridCells' of XML schema type 'resqml2:IntervalGridCells'
        resqml2__IntervalGridCells *IntervalGridCells;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BlockedWellboreRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BlockedWellboreRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BlockedWellboreRepresentation, default initialized and not managed by a soap context
        virtual resqml2__BlockedWellboreRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BlockedWellboreRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__BlockedWellboreRepresentation() : IntervalGridCells() { }
        virtual ~resqml2__BlockedWellboreRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__BlockedWellboreRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BlockedWellboreRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__BlockedWellboreRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:410 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicWellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicWellboreFrameRepresentation (-80)
/* complex XML schema type 'resqml2:SeismicWellboreFrameRepresentation': */
class SOAP_CMAC resqml2__SeismicWellboreFrameRepresentation : public resqml2__WellboreFrameRepresentation {
      public:
        /// Required element 'resqml2:NodeTimeValues' of XML schema type 'eml22:AbstractFloatingPointArray'
        eml22__AbstractFloatingPointArray *NodeTimeValues;
        /// Required element 'resqml2:SeismicReferenceDatum' of XML schema type 'xsd:double'
        double SeismicReferenceDatum;
        /// Required element 'resqml2:WeatheringVelocity' of XML schema type 'xsd:double'
        double WeatheringVelocity;
        /// Optional element 'resqml2:TvdInformation' of XML schema type 'resqml2:TvdInformation'
        resqml2__TvdInformation *TvdInformation;
        /// Optional element 'resqml2:CorrectionInformation' of XML schema type 'resqml2:CorrectionInformation'
        resqml2__CorrectionInformation *CorrectionInformation;
        /// Required element 'resqml2:LocalTime3dCrs' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *LocalTime3dCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicWellboreFrameRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicWellboreFrameRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SeismicWellboreFrameRepresentation, default initialized and not managed by a soap context
        virtual resqml2__SeismicWellboreFrameRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SeismicWellboreFrameRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__SeismicWellboreFrameRepresentation() : NodeTimeValues(), SeismicReferenceDatum(), WeatheringVelocity(), TvdInformation(), CorrectionInformation(), LocalTime3dCrs() { }
        virtual ~resqml2__SeismicWellboreFrameRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__SeismicWellboreFrameRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SeismicWellboreFrameRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__SeismicWellboreFrameRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:414 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFeature (-82)
/* complex XML schema type 'resqml2:WellboreFeature': */
class SOAP_CMAC resqml2__WellboreFeature : public resqml2__AbstractTechnicalFeature {
      public:
        /// Optional element 'resqml2:WitsmlWellbore' of XML schema type 'resqml2:WitsmlWellboreReference'
        resqml2__WitsmlWellboreReference *WitsmlWellbore;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreFeature, default initialized and not managed by a soap context
        virtual resqml2__WellboreFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreFeature); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreFeature() : WitsmlWellbore() { }
        virtual ~resqml2__WellboreFeature() { }
        /// Friend allocator used by soap_new_resqml2__WellboreFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreFeature * SOAP_FMAC2 soap_instantiate_resqml2__WellboreFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:424 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarkerFrameRepresentation (-87)
/* complex XML schema type 'resqml2:WellboreMarkerFrameRepresentation': */
class SOAP_CMAC resqml2__WellboreMarkerFrameRepresentation : public resqml2__WellboreFrameRepresentation {
      public:
        /// Required element 'resqml2:WellboreMarker' of XML schema type 'resqml2:WellboreMarker'
        std::vector<resqml2__WellboreMarker *> WellboreMarker;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarkerFrameRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarkerFrameRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__WellboreMarkerFrameRepresentation, default initialized and not managed by a soap context
        virtual resqml2__WellboreMarkerFrameRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__WellboreMarkerFrameRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__WellboreMarkerFrameRepresentation() : WellboreMarker() { }
        virtual ~resqml2__WellboreMarkerFrameRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__WellboreMarkerFrameRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__WellboreMarkerFrameRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__WellboreMarkerFrameRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:434 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceFrameworkRepresentation (-92)
/* complex XML schema type 'resqml2:AbstractSurfaceFrameworkRepresentation': */
class SOAP_CMAC resqml2__AbstractSurfaceFrameworkRepresentation : public resqml2__RepresentationSetRepresentation {
      public:
        /// Optional element 'resqml2:ContactIdentity' of XML schema type 'resqml2:ContactIdentity'
        std::vector<resqml2__ContactIdentity *> ContactIdentity;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractSurfaceFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml2__AbstractSurfaceFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractSurfaceFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractSurfaceFrameworkRepresentation() : ContactIdentity() { }
        virtual ~resqml2__AbstractSurfaceFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractSurfaceFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractSurfaceFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractSurfaceFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:448 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dRepresentation (-99)
/* complex XML schema type 'resqml2:Grid2dRepresentation': */
class SOAP_CMAC resqml2__Grid2dRepresentation : public resqml2__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml2:Grid2dPatch' of XML schema type 'resqml2:Grid2dPatch'
        resqml2__Grid2dPatch *Grid2dPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Grid2dRepresentation, default initialized and not managed by a soap context
        virtual resqml2__Grid2dRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Grid2dRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__Grid2dRepresentation() : Grid2dPatch() { }
        virtual ~resqml2__Grid2dRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__Grid2dRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Grid2dRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__Grid2dRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:450 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dSetRepresentation (-100)
/* complex XML schema type 'resqml2:Grid2dSetRepresentation': */
class SOAP_CMAC resqml2__Grid2dSetRepresentation : public resqml2__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml2:Grid2dPatch' of XML schema type 'resqml2:Grid2dPatch'
        std::vector<resqml2__Grid2dPatch *> Grid2dPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Grid2dSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__Grid2dSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Grid2dSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__Grid2dSetRepresentation() : Grid2dPatch() { }
        virtual ~resqml2__Grid2dSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__Grid2dSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Grid2dSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__Grid2dSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:462 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PlaneSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PlaneSetRepresentation (-106)
/* complex XML schema type 'resqml2:PlaneSetRepresentation': */
class SOAP_CMAC resqml2__PlaneSetRepresentation : public resqml2__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml2:Planes' of XML schema type 'resqml2:AbstractPlaneGeometry'
        std::vector<resqml2__AbstractPlaneGeometry *> Planes;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__PlaneSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__PlaneSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__PlaneSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__PlaneSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__PlaneSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__PlaneSetRepresentation() : Planes() { }
        virtual ~resqml2__PlaneSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__PlaneSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__PlaneSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__PlaneSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:472 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SealedVolumeFrameworkRepresentation (-111)
/* complex XML schema type 'resqml2:SealedVolumeFrameworkRepresentation': */
class SOAP_CMAC resqml2__SealedVolumeFrameworkRepresentation : public resqml2__RepresentationSetRepresentation {
      public:
        /// Required element 'resqml2:Regions' of XML schema type 'resqml2:VolumeRegion'
        std::vector<resqml2__VolumeRegion *> Regions;
        /// Required element 'resqml2:BasedOn' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *BasedOn;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SealedVolumeFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SealedVolumeFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SealedVolumeFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml2__SealedVolumeFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SealedVolumeFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__SealedVolumeFrameworkRepresentation() : Regions(), BasedOn() { }
        virtual ~resqml2__SealedVolumeFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__SealedVolumeFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SealedVolumeFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__SealedVolumeFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:476 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TriangulatedSetRepresentation (-113)
/* complex XML schema type 'resqml2:TriangulatedSetRepresentation': */
class SOAP_CMAC resqml2__TriangulatedSetRepresentation : public resqml2__AbstractSurfaceRepresentation {
      public:
        /// Required element 'resqml2:TrianglePatch' of XML schema type 'resqml2:TrianglePatch'
        std::vector<resqml2__TrianglePatch *> TrianglePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TriangulatedSetRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TriangulatedSetRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TriangulatedSetRepresentation, default initialized and not managed by a soap context
        virtual resqml2__TriangulatedSetRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TriangulatedSetRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__TriangulatedSetRepresentation() : TrianglePatch() { }
        virtual ~resqml2__TriangulatedSetRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__TriangulatedSetRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TriangulatedSetRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__TriangulatedSetRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:532 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicSurveyFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicSurveyFeature (-141)
/* complex XML schema type 'resqml2:AbstractSeismicSurveyFeature': */
class SOAP_CMAC resqml2__AbstractSeismicSurveyFeature : public resqml2__AbstractTechnicalFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicSurveyFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicSurveyFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractSeismicSurveyFeature, default initialized and not managed by a soap context
        virtual resqml2__AbstractSeismicSurveyFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractSeismicSurveyFeature); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractSeismicSurveyFeature() { }
        virtual ~resqml2__AbstractSeismicSurveyFeature() { }
        /// Friend allocator used by soap_new_resqml2__AbstractSeismicSurveyFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractSeismicSurveyFeature * SOAP_FMAC2 soap_instantiate_resqml2__AbstractSeismicSurveyFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:542 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dPostStackRepresentation (-146)
/* complex XML schema type 'resqml2:Seismic3dPostStackRepresentation': */
class SOAP_CMAC resqml2__Seismic3dPostStackRepresentation : public resqml2__AbstractGridRepresentation {
      public:
        /// Required element 'resqml2:SeismicLatticeSubSampling' of XML schema type 'eml22:IntegerLatticeArray'
        eml22__IntegerLatticeArray *SeismicLatticeSubSampling;
        /// Required element 'resqml2:TraceSampling' of XML schema type 'eml22:FloatingPointLatticeArray'
        eml22__FloatingPointLatticeArray *TraceSampling;
        /// Required element 'resqml2:SeismicLatticeRepresentation' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *SeismicLatticeRepresentation;
        /// Required element 'resqml2:LocalCrs' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *LocalCrs;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dPostStackRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dPostStackRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__Seismic3dPostStackRepresentation, default initialized and not managed by a soap context
        virtual resqml2__Seismic3dPostStackRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__Seismic3dPostStackRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__Seismic3dPostStackRepresentation() : SeismicLatticeSubSampling(), TraceSampling(), SeismicLatticeRepresentation(), LocalCrs() { }
        virtual ~resqml2__Seismic3dPostStackRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__Seismic3dPostStackRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__Seismic3dPostStackRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__Seismic3dPostStackRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:552 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridGeometry (-151)
/* complex XML schema type 'resqml2:AbstractColumnLayerGridGeometry': */
class SOAP_CMAC resqml2__AbstractColumnLayerGridGeometry : public resqml2__AbstractGridGeometry {
      public:
        /// Optional element 'resqml2:CellGeometryIsDefined' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *CellGeometryIsDefined;
        /// Required element 'resqml2:KDirection' of XML schema type 'resqml2:KDirection'
        enum resqml2__KDirection KDirection;
        /// Optional element 'resqml2:NodeIsColocatedInKDirection' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *NodeIsColocatedInKDirection;
        /// Optional element 'resqml2:NodeIsColocatedOnKEdge' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *NodeIsColocatedOnKEdge;
        /// Required element 'resqml2:PillarGeometryIsDefined' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *PillarGeometryIsDefined;
        /// Required element 'resqml2:PillarShape' of XML schema type 'resqml2:PillarShape'
        enum resqml2__PillarShape PillarShape;
        /// Optional element 'resqml2:ColumnLayerSubnodeTopology' of XML schema type 'resqml2:ColumnLayerSubnodeTopology'
        resqml2__ColumnLayerSubnodeTopology *ColumnLayerSubnodeTopology;
        /// Optional element 'resqml2:ColumnLayerSplitCoordinateLines' of XML schema type 'resqml2:ColumnLayerSplitCoordinateLines'
        resqml2__ColumnLayerSplitCoordinateLines *ColumnLayerSplitCoordinateLines;
        /// Optional element 'resqml2:SplitColumnEdges' of XML schema type 'resqml2:SplitColumnEdges'
        resqml2__SplitColumnEdges *SplitColumnEdges;
        /// Optional element 'resqml2:SplitNodePatch' of XML schema type 'resqml2:SplitNodePatch'
        resqml2__SplitNodePatch *SplitNodePatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractColumnLayerGridGeometry, default initialized and not managed by a soap context
        virtual resqml2__AbstractColumnLayerGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractColumnLayerGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractColumnLayerGridGeometry() : CellGeometryIsDefined(), KDirection(), NodeIsColocatedInKDirection(), NodeIsColocatedOnKEdge(), PillarGeometryIsDefined(), PillarShape(), ColumnLayerSubnodeTopology(), ColumnLayerSplitCoordinateLines(), SplitColumnEdges(), SplitNodePatch() { }
        virtual ~resqml2__AbstractColumnLayerGridGeometry() { }
        /// Friend allocator used by soap_new_resqml2__AbstractColumnLayerGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractColumnLayerGridGeometry * SOAP_FMAC2 soap_instantiate_resqml2__AbstractColumnLayerGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:554 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridRepresentation (-152)
/* complex XML schema type 'resqml2:AbstractColumnLayerGridRepresentation': */
class SOAP_CMAC resqml2__AbstractColumnLayerGridRepresentation : public resqml2__AbstractGridRepresentation {
      public:
        /// Required element 'resqml2:Nk' of XML schema type 'eml22:PositiveLong'
        LONG64 Nk;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__AbstractColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractColumnLayerGridRepresentation() : Nk() { }
        virtual ~resqml2__AbstractColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:562 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTruncatedColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTruncatedColumnLayerGridRepresentation (-156)
/* complex XML schema type 'resqml2:AbstractTruncatedColumnLayerGridRepresentation': */
class SOAP_CMAC resqml2__AbstractTruncatedColumnLayerGridRepresentation : public resqml2__AbstractGridRepresentation {
      public:
        /// Required element 'resqml2:Nk' of XML schema type 'eml22:PositiveLong'
        LONG64 Nk;
        /// Required element 'resqml2:TruncationCellPatch' of XML schema type 'resqml2:TruncationCellPatch'
        resqml2__TruncationCellPatch *TruncationCellPatch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTruncatedColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTruncatedColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractTruncatedColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__AbstractTruncatedColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractTruncatedColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractTruncatedColumnLayerGridRepresentation() : Nk(), TruncationCellPatch() { }
        virtual ~resqml2__AbstractTruncatedColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__AbstractTruncatedColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractTruncatedColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__AbstractTruncatedColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:592 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GpGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GpGridRepresentation (-171)
/* complex XML schema type 'resqml2:GpGridRepresentation': */
class SOAP_CMAC resqml2__GpGridRepresentation : public resqml2__AbstractGridRepresentation {
      public:
        /// Optional element 'resqml2:UnstructuredGpGridPatch' of XML schema type 'resqml2:UnstructuredGpGridPatch'
        std::vector<resqml2__UnstructuredGpGridPatch *> UnstructuredGpGridPatch;
        /// Optional element 'resqml2:ColumnLayerGpGrid' of XML schema type 'resqml2:ColumnLayerGpGrid'
        std::vector<resqml2__ColumnLayerGpGrid *> ColumnLayerGpGrid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__GpGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__GpGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__GpGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__GpGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__GpGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__GpGridRepresentation() : UnstructuredGpGridPatch(), ColumnLayerGpGrid() { }
        virtual ~resqml2__GpGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__GpGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__GpGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__GpGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:650 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridGeometry (-200)
/* complex XML schema type 'resqml2:UnstructuredGridGeometry': */
class SOAP_CMAC resqml2__UnstructuredGridGeometry : public resqml2__AbstractGridGeometry {
      public:
        /// Required element 'resqml2:CellFaceIsRightHanded' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *CellFaceIsRightHanded;
        /// Required element 'resqml2:CellShape' of XML schema type 'resqml2:CellShape'
        enum resqml2__CellShape CellShape;
        /// Required element 'resqml2:FaceCount' of XML schema type 'eml22:PositiveLong'
        LONG64 FaceCount;
        /// Required element 'resqml2:FacesPerCell' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *FacesPerCell;
        /// Required element 'resqml2:NodeCount' of XML schema type 'eml22:PositiveLong'
        LONG64 NodeCount;
        /// Required element 'resqml2:NodesPerFace' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *NodesPerFace;
        /// Optional element 'resqml2:UnstructuredGridHingeNodeFaces' of XML schema type 'resqml2:UnstructuredGridHingeNodeFaces'
        resqml2__UnstructuredGridHingeNodeFaces *UnstructuredGridHingeNodeFaces;
        /// Optional element 'resqml2:UnstructuredSubnodeTopology' of XML schema type 'resqml2:UnstructuredSubnodeTopology'
        resqml2__UnstructuredSubnodeTopology *UnstructuredSubnodeTopology;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredGridGeometry, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredGridGeometry() : CellFaceIsRightHanded(), CellShape(), FaceCount(), FacesPerCell(), NodeCount(), NodesPerFace(), UnstructuredGridHingeNodeFaces(), UnstructuredSubnodeTopology() { }
        virtual ~resqml2__UnstructuredGridGeometry() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredGridGeometry * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:654 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridRepresentation (-202)
/* complex XML schema type 'resqml2:UnstructuredGridRepresentation': */
class SOAP_CMAC resqml2__UnstructuredGridRepresentation : public resqml2__AbstractGridRepresentation {
      public:
        /// Required element 'resqml2:CellCount' of XML schema type 'eml22:PositiveLong'
        LONG64 CellCount;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:UnstructuredGridGeometry'
        resqml2__UnstructuredGridGeometry *Geometry;
        /// Optional element 'resqml2:OriginalCellIndex' of XML schema type 'resqml2:AlternateCellIndex'
        resqml2__AlternateCellIndex *OriginalCellIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredGridRepresentation() : CellCount(), Geometry(), OriginalCellIndex() { }
        virtual ~resqml2__UnstructuredGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:696 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanProperty (-223)
/* complex XML schema type 'resqml2:BooleanProperty': */
class SOAP_CMAC resqml2__BooleanProperty : public resqml2__AbstractValuesProperty {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__BooleanProperty, default initialized and not managed by a soap context
        virtual resqml2__BooleanProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__BooleanProperty); }
      public:
        /// Constructor with default initializations
        resqml2__BooleanProperty() { }
        virtual ~resqml2__BooleanProperty() { }
        /// Friend allocator used by soap_new_resqml2__BooleanProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__BooleanProperty * SOAP_FMAC2 soap_instantiate_resqml2__BooleanProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:698 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CategoricalProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CategoricalProperty (-224)
/* complex XML schema type 'resqml2:CategoricalProperty': */
class SOAP_CMAC resqml2__CategoricalProperty : public resqml2__AbstractValuesProperty {
      public:
        /// Required element 'resqml2:Lookup' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *Lookup;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CategoricalProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CategoricalProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CategoricalProperty, default initialized and not managed by a soap context
        virtual resqml2__CategoricalProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CategoricalProperty); }
      public:
        /// Constructor with default initializations
        resqml2__CategoricalProperty() : Lookup() { }
        virtual ~resqml2__CategoricalProperty() { }
        /// Friend allocator used by soap_new_resqml2__CategoricalProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CategoricalProperty * SOAP_FMAC2 soap_instantiate_resqml2__CategoricalProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:700 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CommentProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CommentProperty (-225)
/* complex XML schema type 'resqml2:CommentProperty': */
class SOAP_CMAC resqml2__CommentProperty : public resqml2__AbstractValuesProperty {
      public:
        /// Optional element 'resqml2:Language' of XML schema type 'eml22:String64'
        std::string *Language;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CommentProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CommentProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CommentProperty, default initialized and not managed by a soap context
        virtual resqml2__CommentProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CommentProperty); }
      public:
        /// Constructor with default initializations
        resqml2__CommentProperty() : Language() { }
        virtual ~resqml2__CommentProperty() { }
        /// Friend allocator used by soap_new_resqml2__CommentProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CommentProperty * SOAP_FMAC2 soap_instantiate_resqml2__CommentProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:702 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousProperty (-226)
/* complex XML schema type 'resqml2:ContinuousProperty': */
class SOAP_CMAC resqml2__ContinuousProperty : public resqml2__AbstractValuesProperty {
      public:
        /// Optional element 'resqml2:MinimumValue' of XML schema type 'xsd:double'
        std::vector<double> MinimumValue;
        /// Optional element 'resqml2:MaximumValue' of XML schema type 'xsd:double'
        std::vector<double> MaximumValue;
        /// Required element 'resqml2:Uom' of XML schema type 'eml22:UnitOfMeasureExt'
        std::string Uom;
        /// Optional element 'resqml2:CustomUnitDictionary' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *CustomUnitDictionary;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ContinuousProperty, default initialized and not managed by a soap context
        virtual resqml2__ContinuousProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ContinuousProperty); }
      public:
        /// Constructor with default initializations
        resqml2__ContinuousProperty() : MinimumValue(), MaximumValue(), Uom(), CustomUnitDictionary() { }
        virtual ~resqml2__ContinuousProperty() { }
        /// Friend allocator used by soap_new_resqml2__ContinuousProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ContinuousProperty * SOAP_FMAC2 soap_instantiate_resqml2__ContinuousProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:704 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteProperty (-227)
/* complex XML schema type 'resqml2:DiscreteProperty': */
class SOAP_CMAC resqml2__DiscreteProperty : public resqml2__AbstractValuesProperty {
      public:
        /// Optional element 'resqml2:MinimumValue' of XML schema type 'xsd:long'
        std::vector<LONG64> MinimumValue;
        /// Optional element 'resqml2:MaximumValue' of XML schema type 'xsd:long'
        std::vector<LONG64> MaximumValue;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteProperty
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteProperty; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__DiscreteProperty, default initialized and not managed by a soap context
        virtual resqml2__DiscreteProperty *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__DiscreteProperty); }
      public:
        /// Constructor with default initializations
        resqml2__DiscreteProperty() : MinimumValue(), MaximumValue() { }
        virtual ~resqml2__DiscreteProperty() { }
        /// Friend allocator used by soap_new_resqml2__DiscreteProperty(struct soap*, int)
        friend SOAP_FMAC1 resqml2__DiscreteProperty * SOAP_FMAC2 soap_instantiate_resqml2__DiscreteProperty(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:724 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesFeature (-237)
/* complex XML schema type 'resqml2:StreamlinesFeature': */
class SOAP_CMAC resqml2__StreamlinesFeature : public resqml2__AbstractTechnicalFeature {
      public:
        /// Required element 'resqml2:Flux' of XML schema type 'resqml2:StreamlineFlux'
        enum resqml2__StreamlineFlux Flux;
        /// Optional element 'resqml2:OtherFlux' of XML schema type 'eml22:String64'
        std::string *OtherFlux;
        /// Required element 'resqml2:TimeIndex' of XML schema type 'eml22:TimeIndex'
        eml22__TimeIndex *TimeIndex;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StreamlinesFeature, default initialized and not managed by a soap context
        virtual resqml2__StreamlinesFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StreamlinesFeature); }
      public:
        /// Constructor with default initializations
        resqml2__StreamlinesFeature() : Flux(), OtherFlux(), TimeIndex() { }
        virtual ~resqml2__StreamlinesFeature() { }
        /// Friend allocator used by soap_new_resqml2__StreamlinesFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StreamlinesFeature * SOAP_FMAC2 soap_instantiate_resqml2__StreamlinesFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:752 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName (-251)
/* simple XML schema type 'eml22:AuthorityQualifiedName': */
class SOAP_CMAC eml22__AuthorityQualifiedName {
      public:
        /// Simple content of XML schema type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// Required attribute 'authority' of XML schema type 'eml22:String64'
        std::string authority;
        /// Optional attribute 'code' of XML schema type 'eml22:String64'
        std::string *code;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__AuthorityQualifiedName, default initialized and not managed by a soap context
        virtual eml22__AuthorityQualifiedName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__AuthorityQualifiedName); }
      public:
        /// Constructor with default initializations
        eml22__AuthorityQualifiedName() : __item(), authority(), code(), soap() { }
        virtual ~eml22__AuthorityQualifiedName() { }
        /// Friend allocator used by soap_new_eml22__AuthorityQualifiedName(struct soap*, int)
        friend SOAP_FMAC1 eml22__AuthorityQualifiedName * SOAP_FMAC2 soap_instantiate_eml22__AuthorityQualifiedName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:766 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray (-258)
/* complex XML schema type 'eml22:FloatingPointConstantArray': */
class SOAP_CMAC eml22__FloatingPointConstantArray : public eml22__AbstractFloatingPointArray {
      public:
        /// Required element 'eml22:Value' of XML schema type 'xsd:double'
        double Value;
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatingPointConstantArray, default initialized and not managed by a soap context
        virtual eml22__FloatingPointConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatingPointConstantArray); }
      public:
        /// Constructor with default initializations
        eml22__FloatingPointConstantArray() : Value(), Count() { }
        virtual ~eml22__FloatingPointConstantArray() { }
        /// Friend allocator used by soap_new_eml22__FloatingPointConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatingPointConstantArray * SOAP_FMAC2 soap_instantiate_eml22__FloatingPointConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:768 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray (-259)
/* complex XML schema type 'eml22:FloatingPointExternalArray': */
class SOAP_CMAC eml22__FloatingPointExternalArray : public eml22__AbstractFloatingPointArray {
      public:
        /// Required element 'eml22:Values' of XML schema type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatingPointExternalArray, default initialized and not managed by a soap context
        virtual eml22__FloatingPointExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatingPointExternalArray); }
      public:
        /// Constructor with default initializations
        eml22__FloatingPointExternalArray() : Values() { }
        virtual ~eml22__FloatingPointExternalArray() { }
        /// Friend allocator used by soap_new_eml22__FloatingPointExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatingPointExternalArray * SOAP_FMAC2 soap_instantiate_eml22__FloatingPointExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:770 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray (-260)
/* complex XML schema type 'eml22:FloatingPointLatticeArray': */
class SOAP_CMAC eml22__FloatingPointLatticeArray : public eml22__AbstractFloatingPointArray {
      public:
        /// Required element 'eml22:StartValue' of XML schema type 'xsd:double'
        double StartValue;
        /// Required element 'eml22:Offset' of XML schema type 'eml22:FloatingPointConstantArray'
        std::vector<eml22__FloatingPointConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatingPointLatticeArray, default initialized and not managed by a soap context
        virtual eml22__FloatingPointLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatingPointLatticeArray); }
      public:
        /// Constructor with default initializations
        eml22__FloatingPointLatticeArray() : StartValue(), Offset() { }
        virtual ~eml22__FloatingPointLatticeArray() { }
        /// Friend allocator used by soap_new_eml22__FloatingPointLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatingPointLatticeArray * SOAP_FMAC2 soap_instantiate_eml22__FloatingPointLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:774 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray (-262)
/* complex XML schema type 'eml22:IntegerArrayFromBooleanMaskArray': */
class SOAP_CMAC eml22__IntegerArrayFromBooleanMaskArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:TotalIndexCount' of XML schema type 'eml22:PositiveLong'
        LONG64 TotalIndexCount;
        /// Required element 'eml22:Mask' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *Mask;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerArrayFromBooleanMaskArray, default initialized and not managed by a soap context
        virtual eml22__IntegerArrayFromBooleanMaskArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerArrayFromBooleanMaskArray); }
      public:
        /// Constructor with default initializations
        eml22__IntegerArrayFromBooleanMaskArray() : TotalIndexCount(), Mask() { }
        virtual ~eml22__IntegerArrayFromBooleanMaskArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerArrayFromBooleanMaskArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerArrayFromBooleanMaskArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerArrayFromBooleanMaskArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:776 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray (-263)
/* complex XML schema type 'eml22:IntegerConstantArray': */
class SOAP_CMAC eml22__IntegerConstantArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:Value' of XML schema type 'xsd:long'
        LONG64 Value;
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerConstantArray, default initialized and not managed by a soap context
        virtual eml22__IntegerConstantArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerConstantArray); }
      public:
        /// Constructor with default initializations
        eml22__IntegerConstantArray() : Value(), Count() { }
        virtual ~eml22__IntegerConstantArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerConstantArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerConstantArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerConstantArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:778 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray (-264)
/* complex XML schema type 'eml22:IntegerExternalArray': */
class SOAP_CMAC eml22__IntegerExternalArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:NullValue' of XML schema type 'xsd:long'
        LONG64 NullValue;
        /// Required element 'eml22:Values' of XML schema type 'eml22:ExternalDataset'
        eml22__ExternalDataset *Values;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerExternalArray, default initialized and not managed by a soap context
        virtual eml22__IntegerExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerExternalArray); }
      public:
        /// Constructor with default initializations
        eml22__IntegerExternalArray() : NullValue(), Values() { }
        virtual ~eml22__IntegerExternalArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerExternalArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:780 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray (-265)
/* complex XML schema type 'eml22:IntegerLatticeArray': */
class SOAP_CMAC eml22__IntegerLatticeArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:StartValue' of XML schema type 'xsd:long'
        LONG64 StartValue;
        /// Required element 'eml22:Offset' of XML schema type 'eml22:IntegerConstantArray'
        std::vector<eml22__IntegerConstantArray *> Offset;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerLatticeArray, default initialized and not managed by a soap context
        virtual eml22__IntegerLatticeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerLatticeArray); }
      public:
        /// Constructor with default initializations
        eml22__IntegerLatticeArray() : StartValue(), Offset() { }
        virtual ~eml22__IntegerLatticeArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerLatticeArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerLatticeArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerLatticeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:782 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray (-266)
/* complex XML schema type 'eml22:IntegerRangeArray': */
class SOAP_CMAC eml22__IntegerRangeArray : public eml22__AbstractIntegerArray {
      public:
        /// Required element 'eml22:Count' of XML schema type 'eml22:PositiveLong'
        LONG64 Count;
        /// Required element 'eml22:Value' of XML schema type 'xsd:long'
        LONG64 Value;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__IntegerRangeArray, default initialized and not managed by a soap context
        virtual eml22__IntegerRangeArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__IntegerRangeArray); }
      public:
        /// Constructor with default initializations
        eml22__IntegerRangeArray() : Count(), Value() { }
        virtual ~eml22__IntegerRangeArray() { }
        /// Friend allocator used by soap_new_eml22__IntegerRangeArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__IntegerRangeArray * SOAP_FMAC2 soap_instantiate_eml22__IntegerRangeArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:792 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure (-271)
/* simple XML schema type 'eml22:StringMeasure': */
class SOAP_CMAC eml22__StringMeasure {
      public:
        /// Simple content of XML schema type 'eml22:String64' wrapped by this struct
        std::string __item;
        /// Optional attribute 'uom' of XML schema type 'eml22:UnitOfMeasureExt'
        std::string *uom;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__StringMeasure, default initialized and not managed by a soap context
        virtual eml22__StringMeasure *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__StringMeasure); }
      public:
        /// Constructor with default initializations
        eml22__StringMeasure() : __item(), uom(), soap() { }
        virtual ~eml22__StringMeasure() { }
        /// Friend allocator used by soap_new_eml22__StringMeasure(struct soap*, int)
        friend SOAP_FMAC1 eml22__StringMeasure * SOAP_FMAC2 soap_instantiate_eml22__StringMeasure(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1656 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType (-703)
/* complex XML schema type 'gml:IdentifiedObjectType': */
class SOAP_CMAC gml__IdentifiedObjectType : public gml__DefinitionType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__IdentifiedObjectType, default initialized and not managed by a soap context
        virtual gml__IdentifiedObjectType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__IdentifiedObjectType); }
      public:
        /// Constructor with default initializations
        gml__IdentifiedObjectType() { }
        virtual ~gml__IdentifiedObjectType() { }
        /// Friend allocator used by soap_new_gml__IdentifiedObjectType(struct soap*, int)
        friend SOAP_FMAC1 gml__IdentifiedObjectType * SOAP_FMAC2 soap_instantiate_gml__IdentifiedObjectType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:392 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumnRankInterpretation (-71)
/* complex XML schema type 'resqml2:StratigraphicColumnRankInterpretation': */
class SOAP_CMAC resqml2__StratigraphicColumnRankInterpretation : public resqml2__AbstractStratigraphicOrganizationInterpretation {
      public:
        /// Required element 'resqml2:RankInStratigraphicColumn' of XML schema type 'eml22:NonNegativeLong'
        LONG64 RankInStratigraphicColumn;
        /// Required element 'resqml2:StratigraphicUnits' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> StratigraphicUnits;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumnRankInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumnRankInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StratigraphicColumnRankInterpretation, default initialized and not managed by a soap context
        virtual resqml2__StratigraphicColumnRankInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StratigraphicColumnRankInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__StratigraphicColumnRankInterpretation() : RankInStratigraphicColumn(), StratigraphicUnits() { }
        virtual ~resqml2__StratigraphicColumnRankInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__StratigraphicColumnRankInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StratigraphicColumnRankInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__StratigraphicColumnRankInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:394 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicOccurrenceInterpretation (-72)
/* complex XML schema type 'resqml2:StratigraphicOccurrenceInterpretation': */
class SOAP_CMAC resqml2__StratigraphicOccurrenceInterpretation : public resqml2__AbstractStratigraphicOrganizationInterpretation {
      public:
        /// Optional element 'resqml2:GeologicUnitIndex' of XML schema type 'eml22:DataObjectReference'
        std::vector<eml22__DataObjectReference *> GeologicUnitIndex;
        /// Optional element 'resqml2:IsOccurrenceOf' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *IsOccurrenceOf;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicOccurrenceInterpretation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicOccurrenceInterpretation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__StratigraphicOccurrenceInterpretation, default initialized and not managed by a soap context
        virtual resqml2__StratigraphicOccurrenceInterpretation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__StratigraphicOccurrenceInterpretation); }
      public:
        /// Constructor with default initializations
        resqml2__StratigraphicOccurrenceInterpretation() : GeologicUnitIndex(), IsOccurrenceOf() { }
        virtual ~resqml2__StratigraphicOccurrenceInterpretation() { }
        /// Friend allocator used by soap_new_resqml2__StratigraphicOccurrenceInterpretation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__StratigraphicOccurrenceInterpretation * SOAP_FMAC2 soap_instantiate_resqml2__StratigraphicOccurrenceInterpretation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:456 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedSurfaceFrameworkRepresentation (-103)
/* complex XML schema type 'resqml2:NonSealedSurfaceFrameworkRepresentation': */
class SOAP_CMAC resqml2__NonSealedSurfaceFrameworkRepresentation : public resqml2__AbstractSurfaceFrameworkRepresentation {
      public:
        /// Optional element 'resqml2:NonSealedContactRepresentation' of XML schema type 'resqml2:AbstractContactRepresentationPart'
        std::vector<resqml2__AbstractContactRepresentationPart *> NonSealedContactRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedSurfaceFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedSurfaceFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__NonSealedSurfaceFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml2__NonSealedSurfaceFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__NonSealedSurfaceFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__NonSealedSurfaceFrameworkRepresentation() : NonSealedContactRepresentation() { }
        virtual ~resqml2__NonSealedSurfaceFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__NonSealedSurfaceFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__NonSealedSurfaceFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__NonSealedSurfaceFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:470 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SealedSurfaceFrameworkRepresentation (-110)
/* complex XML schema type 'resqml2:SealedSurfaceFrameworkRepresentation': */
class SOAP_CMAC resqml2__SealedSurfaceFrameworkRepresentation : public resqml2__AbstractSurfaceFrameworkRepresentation {
      public:
        /// Optional element 'resqml2:SealedContactRepresentation' of XML schema type 'resqml2:SealedContactRepresentationPart'
        std::vector<resqml2__SealedContactRepresentationPart *> SealedContactRepresentation;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SealedSurfaceFrameworkRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SealedSurfaceFrameworkRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SealedSurfaceFrameworkRepresentation, default initialized and not managed by a soap context
        virtual resqml2__SealedSurfaceFrameworkRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SealedSurfaceFrameworkRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__SealedSurfaceFrameworkRepresentation() : SealedContactRepresentation() { }
        virtual ~resqml2__SealedSurfaceFrameworkRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__SealedSurfaceFrameworkRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SealedSurfaceFrameworkRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__SealedSurfaceFrameworkRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:530 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicLineFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicLineFeature (-140)
/* complex XML schema type 'resqml2:AbstractSeismicLineFeature': */
class SOAP_CMAC resqml2__AbstractSeismicLineFeature : public resqml2__AbstractSeismicSurveyFeature {
      public:
        /// Optional element 'resqml2:TraceLabels' of XML schema type 'eml22:StringExternalArray'
        eml22__StringExternalArray *TraceLabels;
        /// Optional element 'resqml2:IsPartOf' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *IsPartOf;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicLineFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicLineFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__AbstractSeismicLineFeature, default initialized and not managed by a soap context
        virtual resqml2__AbstractSeismicLineFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__AbstractSeismicLineFeature); }
      public:
        /// Constructor with default initializations
        resqml2__AbstractSeismicLineFeature() : TraceLabels(), IsPartOf() { }
        virtual ~resqml2__AbstractSeismicLineFeature() { }
        /// Friend allocator used by soap_new_resqml2__AbstractSeismicLineFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__AbstractSeismicLineFeature * SOAP_FMAC2 soap_instantiate_resqml2__AbstractSeismicLineFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:544 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeFeature (-147)
/* complex XML schema type 'resqml2:SeismicLatticeFeature': */
class SOAP_CMAC resqml2__SeismicLatticeFeature : public resqml2__AbstractSeismicSurveyFeature {
      public:
        /// Optional element 'resqml2:CrosslineLabels' of XML schema type 'eml22:IntegerLatticeArray'
        eml22__IntegerLatticeArray *CrosslineLabels;
        /// Optional element 'resqml2:IsPartOf' of XML schema type 'resqml2:SeismicLatticeSetFeature'
        resqml2__SeismicLatticeSetFeature *IsPartOf;
        /// Optional element 'resqml2:InlineLabels' of XML schema type 'eml22:IntegerLatticeArray'
        eml22__IntegerLatticeArray *InlineLabels;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SeismicLatticeFeature, default initialized and not managed by a soap context
        virtual resqml2__SeismicLatticeFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SeismicLatticeFeature); }
      public:
        /// Constructor with default initializations
        resqml2__SeismicLatticeFeature() : CrosslineLabels(), IsPartOf(), InlineLabels() { }
        virtual ~resqml2__SeismicLatticeFeature() { }
        /// Friend allocator used by soap_new_resqml2__SeismicLatticeFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SeismicLatticeFeature * SOAP_FMAC2 soap_instantiate_resqml2__SeismicLatticeFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:546 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeSetFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeSetFeature (-148)
/* complex XML schema type 'resqml2:SeismicLatticeSetFeature': */
class SOAP_CMAC resqml2__SeismicLatticeSetFeature : public resqml2__AbstractSeismicSurveyFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeSetFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeSetFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SeismicLatticeSetFeature, default initialized and not managed by a soap context
        virtual resqml2__SeismicLatticeSetFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SeismicLatticeSetFeature); }
      public:
        /// Constructor with default initializations
        resqml2__SeismicLatticeSetFeature() { }
        virtual ~resqml2__SeismicLatticeSetFeature() { }
        /// Friend allocator used by soap_new_resqml2__SeismicLatticeSetFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SeismicLatticeSetFeature * SOAP_FMAC2 soap_instantiate_resqml2__SeismicLatticeSetFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:548 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLineSetFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLineSetFeature (-149)
/* complex XML schema type 'resqml2:SeismicLineSetFeature': */
class SOAP_CMAC resqml2__SeismicLineSetFeature : public resqml2__AbstractSeismicSurveyFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLineSetFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLineSetFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__SeismicLineSetFeature, default initialized and not managed by a soap context
        virtual resqml2__SeismicLineSetFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__SeismicLineSetFeature); }
      public:
        /// Constructor with default initializations
        resqml2__SeismicLineSetFeature() { }
        virtual ~resqml2__SeismicLineSetFeature() { }
        /// Friend allocator used by soap_new_resqml2__SeismicLineSetFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__SeismicLineSetFeature * SOAP_FMAC2 soap_instantiate_resqml2__SeismicLineSetFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:600 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridGeometry (-175)
/* complex XML schema type 'resqml2:IjkGridGeometry': */
class SOAP_CMAC resqml2__IjkGridGeometry : public resqml2__AbstractColumnLayerGridGeometry {
      public:
        /// Required element 'resqml2:GridIsRighthanded' of XML schema type 'xsd:boolean'
        bool GridIsRighthanded;
        /// Optional element 'resqml2:IjGaps' of XML schema type 'resqml2:IjGaps'
        resqml2__IjGaps *IjGaps;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IjkGridGeometry, default initialized and not managed by a soap context
        virtual resqml2__IjkGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IjkGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__IjkGridGeometry() : GridIsRighthanded(), IjGaps() { }
        virtual ~resqml2__IjkGridGeometry() { }
        /// Friend allocator used by soap_new_resqml2__IjkGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IjkGridGeometry * SOAP_FMAC2 soap_instantiate_resqml2__IjkGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:602 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridRepresentation (-176)
/* complex XML schema type 'resqml2:IjkGridRepresentation': */
class SOAP_CMAC resqml2__IjkGridRepresentation : public resqml2__AbstractColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml2:Ni' of XML schema type 'eml22:PositiveLong'
        LONG64 Ni;
        /// Required element 'resqml2:Nj' of XML schema type 'eml22:PositiveLong'
        LONG64 Nj;
        /// Optional element 'resqml2:RadialGridIsComplete' of XML schema type 'xsd:boolean'
        bool *RadialGridIsComplete;
        /// Optional element 'resqml2:KGaps' of XML schema type 'resqml2:KGaps'
        resqml2__KGaps *KGaps;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:IjkGridGeometry'
        resqml2__IjkGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__IjkGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__IjkGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__IjkGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__IjkGridRepresentation() : Ni(), Nj(), RadialGridIsComplete(), KGaps(), Geometry() { }
        virtual ~resqml2__IjkGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__IjkGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__IjkGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__IjkGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:632 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedIjkGridRepresentation (-191)
/* complex XML schema type 'resqml2:TruncatedIjkGridRepresentation': */
class SOAP_CMAC resqml2__TruncatedIjkGridRepresentation : public resqml2__AbstractTruncatedColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml2:Ni' of XML schema type 'eml22:PositiveLong'
        LONG64 Ni;
        /// Required element 'resqml2:Nj' of XML schema type 'eml22:PositiveLong'
        LONG64 Nj;
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:IjkGridGeometry'
        resqml2__IjkGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedIjkGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedIjkGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TruncatedIjkGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__TruncatedIjkGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TruncatedIjkGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__TruncatedIjkGridRepresentation() : Ni(), Nj(), Geometry() { }
        virtual ~resqml2__TruncatedIjkGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__TruncatedIjkGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TruncatedIjkGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__TruncatedIjkGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:634 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation (-192)
/* complex XML schema type 'resqml2:TruncatedUnstructuredColumnLayerGridRepresentation': */
class SOAP_CMAC resqml2__TruncatedUnstructuredColumnLayerGridRepresentation : public resqml2__AbstractTruncatedColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml2:ColumnCount' of XML schema type 'eml22:PositiveLong'
        LONG64 ColumnCount;
        /// Required element 'resqml2:Geometry' of XML schema type 'resqml2:UnstructuredColumnLayerGridGeometry'
        resqml2__UnstructuredColumnLayerGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__TruncatedUnstructuredColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__TruncatedUnstructuredColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__TruncatedUnstructuredColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__TruncatedUnstructuredColumnLayerGridRepresentation() : ColumnCount(), Geometry() { }
        virtual ~resqml2__TruncatedUnstructuredColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__TruncatedUnstructuredColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:644 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridGeometry (-197)
/* complex XML schema type 'resqml2:UnstructuredColumnLayerGridGeometry': */
class SOAP_CMAC resqml2__UnstructuredColumnLayerGridGeometry : public resqml2__AbstractColumnLayerGridGeometry {
      public:
        /// Required element 'resqml2:ColumnIsRightHanded' of XML schema type 'eml22:AbstractBooleanArray'
        eml22__AbstractBooleanArray *ColumnIsRightHanded;
        /// Required element 'resqml2:ColumnShape' of XML schema type 'resqml2:ColumnShape'
        enum resqml2__ColumnShape ColumnShape;
        /// Required element 'resqml2:PillarCount' of XML schema type 'eml22:PositiveLong'
        LONG64 PillarCount;
        /// Required element 'resqml2:PillarsPerColumn' of XML schema type 'eml22:JaggedArray'
        eml22__JaggedArray *PillarsPerColumn;
        /// Optional element 'resqml2:UnstructuredColumnEdges' of XML schema type 'resqml2:UnstructuredColumnEdges'
        resqml2__UnstructuredColumnEdges *UnstructuredColumnEdges;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridGeometry
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridGeometry; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredColumnLayerGridGeometry, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredColumnLayerGridGeometry *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredColumnLayerGridGeometry); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredColumnLayerGridGeometry() : ColumnIsRightHanded(), ColumnShape(), PillarCount(), PillarsPerColumn(), UnstructuredColumnEdges() { }
        virtual ~resqml2__UnstructuredColumnLayerGridGeometry() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredColumnLayerGridGeometry(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredColumnLayerGridGeometry * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredColumnLayerGridGeometry(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:646 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridRepresentation (-198)
/* complex XML schema type 'resqml2:UnstructuredColumnLayerGridRepresentation': */
class SOAP_CMAC resqml2__UnstructuredColumnLayerGridRepresentation : public resqml2__AbstractColumnLayerGridRepresentation {
      public:
        /// Required element 'resqml2:ColumnCount' of XML schema type 'eml22:PositiveLong'
        LONG64 ColumnCount;
        /// Optional element 'resqml2:Geometry' of XML schema type 'resqml2:UnstructuredColumnLayerGridGeometry'
        resqml2__UnstructuredColumnLayerGridGeometry *Geometry;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridRepresentation
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridRepresentation; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__UnstructuredColumnLayerGridRepresentation, default initialized and not managed by a soap context
        virtual resqml2__UnstructuredColumnLayerGridRepresentation *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__UnstructuredColumnLayerGridRepresentation); }
      public:
        /// Constructor with default initializations
        resqml2__UnstructuredColumnLayerGridRepresentation() : ColumnCount(), Geometry() { }
        virtual ~resqml2__UnstructuredColumnLayerGridRepresentation() { }
        /// Friend allocator used by soap_new_resqml2__UnstructuredColumnLayerGridRepresentation(struct soap*, int)
        friend SOAP_FMAC1 resqml2__UnstructuredColumnLayerGridRepresentation * SOAP_FMAC2 soap_instantiate_resqml2__UnstructuredColumnLayerGridRepresentation(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:760 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray (-255)
/* complex XML schema type 'eml22:DoubleExternalArray': */
class SOAP_CMAC eml22__DoubleExternalArray : public eml22__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__DoubleExternalArray, default initialized and not managed by a soap context
        virtual eml22__DoubleExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__DoubleExternalArray); }
      public:
        /// Constructor with default initializations
        eml22__DoubleExternalArray() { }
        virtual ~eml22__DoubleExternalArray() { }
        /// Friend allocator used by soap_new_eml22__DoubleExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__DoubleExternalArray * SOAP_FMAC2 soap_instantiate_eml22__DoubleExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:764 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray (-257)
/* complex XML schema type 'eml22:FloatExternalArray': */
class SOAP_CMAC eml22__FloatExternalArray : public eml22__FloatingPointExternalArray {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type eml22__FloatExternalArray, default initialized and not managed by a soap context
        virtual eml22__FloatExternalArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(eml22__FloatExternalArray); }
      public:
        /// Constructor with default initializations
        eml22__FloatExternalArray() { }
        virtual ~eml22__FloatExternalArray() { }
        /// Friend allocator used by soap_new_eml22__FloatExternalArray(struct soap*, int)
        friend SOAP_FMAC1 eml22__FloatExternalArray * SOAP_FMAC2 soap_instantiate_eml22__FloatExternalArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1654 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType (-702)
/* complex XML schema type 'gml:AbstractCRSType': */
class SOAP_CMAC gml__AbstractCRSType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        std::vector<_gml__domainOfValidity *> domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCRSType, default initialized and not managed by a soap context
        virtual gml__AbstractCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCRSType); }
      public:
        /// Constructor with default initializations
        gml__AbstractCRSType() : domainOfValidity(), scope() { }
        virtual ~gml__AbstractCRSType() { }
        /// Friend allocator used by soap_new_gml__AbstractCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCRSType * SOAP_FMAC2 soap_instantiate_gml__AbstractCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1684 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType (-717)
/* complex XML schema type 'gml:AbstractCoordinateSystemType': */
class SOAP_CMAC gml__AbstractCoordinateSystemType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:axis' of XML schema type 'gml:CoordinateSystemAxisPropertyType'
        std::vector<gml__CoordinateSystemAxisPropertyType *> axis;
        /// Optional attribute 'aggregationType' of XML schema type 'gml:AggregationType'
        enum gml__AggregationType *aggregationType;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCoordinateSystemType, default initialized and not managed by a soap context
        virtual gml__AbstractCoordinateSystemType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCoordinateSystemType); }
      public:
        /// Constructor with default initializations
        gml__AbstractCoordinateSystemType() : axis(), aggregationType() { }
        virtual ~gml__AbstractCoordinateSystemType() { }
        /// Friend allocator used by soap_new_gml__AbstractCoordinateSystemType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCoordinateSystemType * SOAP_FMAC2 soap_instantiate_gml__AbstractCoordinateSystemType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1688 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType (-719)
/* complex XML schema type 'gml:CoordinateSystemAxisType': */
class SOAP_CMAC gml__CoordinateSystemAxisType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:axisAbbrev' of XML schema type 'gml:CodeType'
        gml__CodeType *axisAbbrev;
        /// Required element 'gml:axisDirection' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *axisDirection;
        /// Optional element 'gml:minimumValue' of XML schema type 'xsd:double'
        double *minimumValue;
        /// Optional element 'gml:maximumValue' of XML schema type 'xsd:double'
        double *maximumValue;
        /// Optional element 'gml:rangeMeaning' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *rangeMeaning;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CoordinateSystemAxisType, default initialized and not managed by a soap context
        virtual gml__CoordinateSystemAxisType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CoordinateSystemAxisType); }
      public:
        /// Constructor with default initializations
        gml__CoordinateSystemAxisType() : axisAbbrev(), axisDirection(), minimumValue(), maximumValue(), rangeMeaning() { }
        virtual ~gml__CoordinateSystemAxisType() { }
        /// Friend allocator used by soap_new_gml__CoordinateSystemAxisType(struct soap*, int)
        friend SOAP_FMAC1 gml__CoordinateSystemAxisType * SOAP_FMAC2 soap_instantiate_gml__CoordinateSystemAxisType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1702 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType (-726)
/* complex XML schema type 'gml:AbstractDatumType': */
class SOAP_CMAC gml__AbstractDatumType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:anchorDefinition' of XML schema type 'gml:CodeType'
        gml__CodeType *anchorDefinition;
        /// Optional element 'gml:realizationEpoch' of XML schema type 'xsd:date'
        std::string *realizationEpoch;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractDatumType, default initialized and not managed by a soap context
        virtual gml__AbstractDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractDatumType); }
      public:
        /// Constructor with default initializations
        gml__AbstractDatumType() : domainOfValidity(), scope(), anchorDefinition(), realizationEpoch() { }
        virtual ~gml__AbstractDatumType() { }
        /// Friend allocator used by soap_new_gml__AbstractDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractDatumType * SOAP_FMAC2 soap_instantiate_gml__AbstractDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1706 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType (-728)
/* complex XML schema type 'gml:PrimeMeridianType': */
class SOAP_CMAC gml__PrimeMeridianType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:greenwichLongitude' of XML schema type 'gml:AngleType'
        gml__AngleType *greenwichLongitude;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__PrimeMeridianType, default initialized and not managed by a soap context
        virtual gml__PrimeMeridianType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__PrimeMeridianType); }
      public:
        /// Constructor with default initializations
        gml__PrimeMeridianType() : greenwichLongitude() { }
        virtual ~gml__PrimeMeridianType() { }
        /// Friend allocator used by soap_new_gml__PrimeMeridianType(struct soap*, int)
        friend SOAP_FMAC1 gml__PrimeMeridianType * SOAP_FMAC2 soap_instantiate_gml__PrimeMeridianType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1714 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType (-732)
/* complex XML schema type 'gml:EllipsoidType': */
class SOAP_CMAC gml__EllipsoidType : public gml__IdentifiedObjectType {
      public:
        /// Required element 'gml:semiMajorAxis' of XML schema type 'gml:MeasureType'
        gml__MeasureType *semiMajorAxis;
        /// Required element 'gml:secondDefiningParameter' of XML schema type 'gml:secondDefiningParameter'
        _gml__secondDefiningParameter *secondDefiningParameter;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidType, default initialized and not managed by a soap context
        virtual gml__EllipsoidType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidType() : semiMajorAxis(), secondDefiningParameter() { }
        virtual ~gml__EllipsoidType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1726 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType (-738)
/* complex XML schema type 'gml:AbstractCoordinateOperationType': */
class SOAP_CMAC gml__AbstractCoordinateOperationType : public gml__IdentifiedObjectType {
      public:
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:operationVersion' of XML schema type 'xsd:string'
        std::string *operationVersion;
        /// Optional element 'gml:coordinateOperationAccuracy' of XML schema type 'gml:coordinateOperationAccuracy'
        std::vector<_gml__coordinateOperationAccuracy *> coordinateOperationAccuracy;
        /// Optional element 'gml:sourceCRS' of XML schema type 'gml:CRSPropertyType'
        gml__CRSPropertyType *sourceCRS;
        /// Optional element 'gml:targetCRS' of XML schema type 'gml:CRSPropertyType'
        gml__CRSPropertyType *targetCRS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractCoordinateOperationType, default initialized and not managed by a soap context
        virtual gml__AbstractCoordinateOperationType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractCoordinateOperationType); }
      public:
        /// Constructor with default initializations
        gml__AbstractCoordinateOperationType() : domainOfValidity(), scope(), operationVersion(), coordinateOperationAccuracy(), sourceCRS(), targetCRS() { }
        virtual ~gml__AbstractCoordinateOperationType() { }
        /// Friend allocator used by soap_new_gml__AbstractCoordinateOperationType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractCoordinateOperationType * SOAP_FMAC2 soap_instantiate_gml__AbstractCoordinateOperationType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:534 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CmpLineFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CmpLineFeature (-142)
/* complex XML schema type 'resqml2:CmpLineFeature': */
class SOAP_CMAC resqml2__CmpLineFeature : public resqml2__AbstractSeismicLineFeature {
      public:
        /// Required element 'resqml2:NearestShotPointIndices' of XML schema type 'eml22:AbstractIntegerArray'
        eml22__AbstractIntegerArray *NearestShotPointIndices;
        /// Optional element 'resqml2:ShotPointLineFeature' of XML schema type 'eml22:DataObjectReference'
        eml22__DataObjectReference *ShotPointLineFeature;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__CmpLineFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__CmpLineFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__CmpLineFeature, default initialized and not managed by a soap context
        virtual resqml2__CmpLineFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__CmpLineFeature); }
      public:
        /// Constructor with default initializations
        resqml2__CmpLineFeature() : NearestShotPointIndices(), ShotPointLineFeature() { }
        virtual ~resqml2__CmpLineFeature() { }
        /// Friend allocator used by soap_new_resqml2__CmpLineFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__CmpLineFeature * SOAP_FMAC2 soap_instantiate_resqml2__CmpLineFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:550 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ShotPointLineFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ShotPointLineFeature (-150)
/* complex XML schema type 'resqml2:ShotPointLineFeature': */
class SOAP_CMAC resqml2__ShotPointLineFeature : public resqml2__AbstractSeismicLineFeature {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_resqml2__ShotPointLineFeature
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_resqml2__ShotPointLineFeature; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type resqml2__ShotPointLineFeature, default initialized and not managed by a soap context
        virtual resqml2__ShotPointLineFeature *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(resqml2__ShotPointLineFeature); }
      public:
        /// Constructor with default initializations
        resqml2__ShotPointLineFeature() { }
        virtual ~resqml2__ShotPointLineFeature() { }
        /// Friend allocator used by soap_new_resqml2__ShotPointLineFeature(struct soap*, int)
        friend SOAP_FMAC1 resqml2__ShotPointLineFeature * SOAP_FMAC2 soap_instantiate_resqml2__ShotPointLineFeature(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:44202 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_GeodeticCRSType (-1710)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_GeodeticCRSType
{
        #define SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_ellipsoidalCS	(1)	/**< union variant selector value for member ellipsoidalCS */
        gml__EllipsoidalCSPropertyType *ellipsoidalCS;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_cartesianCS	(2)	/**< union variant selector value for member cartesianCS */
        gml__CartesianCSPropertyType *cartesianCS;
        #define SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_sphericalCS	(3)	/**< union variant selector value for member sphericalCS */
        gml__SphericalCSPropertyType *sphericalCS;
};
#endif

/* eml2_2ForGsoap.h:1652 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType (-701)
/* complex XML schema type 'gml:GeodeticCRSType': */
class SOAP_CMAC gml__GeodeticCRSType : public gml__AbstractCRSType {
      public:
        /// Union with union _gml__union_GeodeticCRSType variant selector __union_GeodeticCRSType set to one of: SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_ellipsoidalCS SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_cartesianCS SOAP_UNION_gsoap_eml2_2__gml__union_GeodeticCRSType_sphericalCS
        int __union_GeodeticCRSType;
        union _gml__union_GeodeticCRSType union_GeodeticCRSType;
        /// Required element 'gml:geodeticDatum' of XML schema type 'gml:GeodeticDatumPropertyType'
        gml__GeodeticDatumPropertyType *geodeticDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticCRSType, default initialized and not managed by a soap context
        virtual gml__GeodeticCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticCRSType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticCRSType() : __union_GeodeticCRSType(), geodeticDatum() { }
        virtual ~gml__GeodeticCRSType() { }
        /// Friend allocator used by soap_new_gml__GeodeticCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticCRSType * SOAP_FMAC2 soap_instantiate_gml__GeodeticCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1682 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType (-716)
/* complex XML schema type 'gml:EllipsoidalCSType': */
class SOAP_CMAC gml__EllipsoidalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__EllipsoidalCSType, default initialized and not managed by a soap context
        virtual gml__EllipsoidalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__EllipsoidalCSType); }
      public:
        /// Constructor with default initializations
        gml__EllipsoidalCSType() { }
        virtual ~gml__EllipsoidalCSType() { }
        /// Friend allocator used by soap_new_gml__EllipsoidalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__EllipsoidalCSType * SOAP_FMAC2 soap_instantiate_gml__EllipsoidalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1692 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType (-721)
/* complex XML schema type 'gml:CartesianCSType': */
class SOAP_CMAC gml__CartesianCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__CartesianCSType, default initialized and not managed by a soap context
        virtual gml__CartesianCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__CartesianCSType); }
      public:
        /// Constructor with default initializations
        gml__CartesianCSType() { }
        virtual ~gml__CartesianCSType() { }
        /// Friend allocator used by soap_new_gml__CartesianCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__CartesianCSType * SOAP_FMAC2 soap_instantiate_gml__CartesianCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1696 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType (-723)
/* complex XML schema type 'gml:SphericalCSType': */
class SOAP_CMAC gml__SphericalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__SphericalCSType, default initialized and not managed by a soap context
        virtual gml__SphericalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__SphericalCSType); }
      public:
        /// Constructor with default initializations
        gml__SphericalCSType() { }
        virtual ~gml__SphericalCSType() { }
        /// Friend allocator used by soap_new_gml__SphericalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__SphericalCSType * SOAP_FMAC2 soap_instantiate_gml__SphericalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1700 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType (-725)
/* complex XML schema type 'gml:GeodeticDatumType': */
class SOAP_CMAC gml__GeodeticDatumType : public gml__AbstractDatumType {
      public:
        /// Required element 'gml:primeMeridian' of XML schema type 'gml:PrimeMeridianPropertyType'
        gml__PrimeMeridianPropertyType *primeMeridian;
        /// Required element 'gml:ellipsoid' of XML schema type 'gml:EllipsoidPropertyType'
        gml__EllipsoidPropertyType *ellipsoid;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__GeodeticDatumType, default initialized and not managed by a soap context
        virtual gml__GeodeticDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__GeodeticDatumType); }
      public:
        /// Constructor with default initializations
        gml__GeodeticDatumType() : primeMeridian(), ellipsoid() { }
        virtual ~gml__GeodeticDatumType() { }
        /// Friend allocator used by soap_new_gml__GeodeticDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__GeodeticDatumType * SOAP_FMAC2 soap_instantiate_gml__GeodeticDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1720 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType (-735)
/* complex XML schema type 'gml:AbstractGeneralDerivedCRSType': */
class SOAP_CMAC gml__AbstractGeneralDerivedCRSType : public gml__AbstractCRSType {
      public:
        /// Required element 'gml:conversion' of XML schema type 'gml:GeneralConversionPropertyType'
        gml__GeneralConversionPropertyType *conversion;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGeneralDerivedCRSType, default initialized and not managed by a soap context
        virtual gml__AbstractGeneralDerivedCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGeneralDerivedCRSType); }
      public:
        /// Constructor with default initializations
        gml__AbstractGeneralDerivedCRSType() : conversion() { }
        virtual ~gml__AbstractGeneralDerivedCRSType() { }
        /// Friend allocator used by soap_new_gml__AbstractGeneralDerivedCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGeneralDerivedCRSType * SOAP_FMAC2 soap_instantiate_gml__AbstractGeneralDerivedCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1724 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType (-737)
/* complex XML schema type 'gml:AbstractGeneralConversionType': */
class SOAP_CMAC gml__AbstractGeneralConversionType {
      public:
        /// Optional element 'gml:description' of XML schema type 'gml:StringOrRefType'
        gml__StringOrRefType *description;
        /// Optional element 'gml:descriptionReference' of XML schema type 'gml:ReferenceType'
        gml__ReferenceType *descriptionReference;
        /// Required element 'gml:identifier' of XML schema type 'gml:CodeWithAuthorityType'
        gml__CodeWithAuthorityType *identifier;
        /// Optional element 'gml:name' of XML schema type 'gml:CodeType'
        std::vector<gml__CodeType *> name;
        /// Optional element 'gml:remarks' of XML schema type 'xsd:string'
        std::string *remarks;
        /// Optional element 'gml:domainOfValidity' of XML schema type 'gml:domainOfValidity'
        _gml__domainOfValidity *domainOfValidity;
        /// Required element 'gml:scope' of XML schema type 'xsd:string'
        std::vector<std::string> scope;
        /// Optional element 'gml:coordinateOperationAccuracy' of XML schema type 'gml:coordinateOperationAccuracy'
        std::vector<_gml__coordinateOperationAccuracy *> coordinateOperationAccuracy;
        /// Required attribute 'gml:id' of XML schema type 'xsd:ID'
        std::string gml__id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__AbstractGeneralConversionType, default initialized and not managed by a soap context
        virtual gml__AbstractGeneralConversionType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__AbstractGeneralConversionType); }
      public:
        /// Constructor with default initializations
        gml__AbstractGeneralConversionType() : description(), descriptionReference(), identifier(), name(), remarks(), domainOfValidity(), scope(), coordinateOperationAccuracy(), gml__id(), soap() { }
        virtual ~gml__AbstractGeneralConversionType() { }
        /// Friend allocator used by soap_new_gml__AbstractGeneralConversionType(struct soap*, int)
        friend SOAP_FMAC1 gml__AbstractGeneralConversionType * SOAP_FMAC2 soap_instantiate_gml__AbstractGeneralConversionType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1732 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType (-741)
/* complex XML schema type 'gml:VerticalCRSType': */
class SOAP_CMAC gml__VerticalCRSType : public gml__AbstractCRSType {
      public:
        /// Required element 'gml:verticalCS' of XML schema type 'gml:VerticalCSPropertyType'
        gml__VerticalCSPropertyType *verticalCS;
        /// Required element 'gml:verticalDatum' of XML schema type 'gml:VerticalDatumPropertyType'
        gml__VerticalDatumPropertyType *verticalDatum;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCRSType, default initialized and not managed by a soap context
        virtual gml__VerticalCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCRSType); }
      public:
        /// Constructor with default initializations
        gml__VerticalCRSType() : verticalCS(), verticalDatum() { }
        virtual ~gml__VerticalCRSType() { }
        /// Friend allocator used by soap_new_gml__VerticalCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCRSType * SOAP_FMAC2 soap_instantiate_gml__VerticalCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1736 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType (-743)
/* complex XML schema type 'gml:VerticalCSType': */
class SOAP_CMAC gml__VerticalCSType : public gml__AbstractCoordinateSystemType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalCSType, default initialized and not managed by a soap context
        virtual gml__VerticalCSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalCSType); }
      public:
        /// Constructor with default initializations
        gml__VerticalCSType() { }
        virtual ~gml__VerticalCSType() { }
        /// Friend allocator used by soap_new_gml__VerticalCSType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalCSType * SOAP_FMAC2 soap_instantiate_gml__VerticalCSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:1740 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType (-745)
/* complex XML schema type 'gml:VerticalDatumType': */
class SOAP_CMAC gml__VerticalDatumType : public gml__AbstractDatumType {
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__VerticalDatumType, default initialized and not managed by a soap context
        virtual gml__VerticalDatumType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__VerticalDatumType); }
      public:
        /// Constructor with default initializations
        gml__VerticalDatumType() { }
        virtual ~gml__VerticalDatumType() { }
        /// Friend allocator used by soap_new_gml__VerticalDatumType(struct soap*, int)
        friend SOAP_FMAC1 gml__VerticalDatumType * SOAP_FMAC2 soap_instantiate_gml__VerticalDatumType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:44736 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__union_ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2__gml__union_ProjectedCRSType (-1720)
/* union serializable only when used as a member of a struct or class with a union variant selector */
union _gml__union_ProjectedCRSType
{
        #define SOAP_UNION_gsoap_eml2_2__gml__union_ProjectedCRSType_baseGeodeticCRS	(1)	/**< union variant selector value for member baseGeodeticCRS */
        gml__GeodeticCRSPropertyType *baseGeodeticCRS;
};
#endif

/* eml2_2ForGsoap.h:1718 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType (-734)
/* complex XML schema type 'gml:ProjectedCRSType': */
class SOAP_CMAC gml__ProjectedCRSType : public gml__AbstractGeneralDerivedCRSType {
      public:
        /// Union with union _gml__union_ProjectedCRSType variant selector __union_ProjectedCRSType set to one of: SOAP_UNION_gsoap_eml2_2__gml__union_ProjectedCRSType_baseGeodeticCRS
        int __union_ProjectedCRSType;
        union _gml__union_ProjectedCRSType union_ProjectedCRSType;
        /// Required element 'gml:cartesianCS' of XML schema type 'gml:CartesianCSPropertyType'
        gml__CartesianCSPropertyType *cartesianCS;
      public:
        /// Return unique type id SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType
        virtual long soap_type(void) const { return SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type gml__ProjectedCRSType, default initialized and not managed by a soap context
        virtual gml__ProjectedCRSType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(gml__ProjectedCRSType); }
      public:
        /// Constructor with default initializations
        gml__ProjectedCRSType() : __union_ProjectedCRSType(), cartesianCS() { }
        virtual ~gml__ProjectedCRSType() { }
        /// Friend allocator used by soap_new_gml__ProjectedCRSType(struct soap*, int)
        friend SOAP_FMAC1 gml__ProjectedCRSType * SOAP_FMAC2 soap_instantiate_gml__ProjectedCRSType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* eml2_2ForGsoap.h:47954 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header (-845619200)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:47954 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code (-845619201)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:47954 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail (-845619203)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:47954 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason (-845619206)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* eml2_2ForGsoap.h:47954 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault (-845619207)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_2__XML
#define SOAP_TYPE_gsoap_eml2_2__XML (-5)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_gsoap_eml2_2__QName
#define SOAP_TYPE_gsoap_eml2_2__QName (-6)

typedef char *_QName;
#endif

/* eml2_2ForGsoap.h:265 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__integer
#define SOAP_TYPE_gsoap_eml2_2_xsd__integer (-12)

typedef LONG64 xsd__integer;
#endif

/* eml2_2ForGsoap.h:268 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__ID
#define SOAP_TYPE_gsoap_eml2_2_xsd__ID (-14)

typedef std::string xsd__ID;
#endif

/* eml2_2ForGsoap.h:271 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_2_xsd__anyURI (-15)

typedef std::string xsd__anyURI;
#endif

/* eml2_2ForGsoap.h:274 */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__date
#define SOAP_TYPE_gsoap_eml2_2_xsd__date (-16)

typedef std::string xsd__date;
#endif

/* eml2_2ForGsoap.h:1847 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatternExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatternExt (-794)

typedef std::string resqml2__EdgePatternExt;
#endif

/* eml2_2ForGsoap.h:1850 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbolExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbolExt (-795)

typedef std::string resqml2__NodeSymbolExt;
#endif

/* eml2_2ForGsoap.h:1853 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKindExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKindExt (-796)

typedef std::string resqml2__ViewerKindExt;
#endif

/* eml2_2ForGsoap.h:1856 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3dExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3dExt (-797)

typedef std::string resqml2__Shape3dExt;
#endif

/* eml2_2ForGsoap.h:1859 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKindExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKindExt (-798)

typedef std::string resqml2__ThrowKindExt;
#endif

/* eml2_2ForGsoap.h:1862 */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FacetExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FacetExt (-799)

typedef std::string resqml2__FacetExt;
#endif

/* eml2_2ForGsoap.h:1873 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt (-800)

typedef std::string eml22__LithologyKindExt;
#endif

/* eml2_2ForGsoap.h:1876 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt (-801)

typedef std::string eml22__LithologyQualifierKindExt;
#endif

/* eml2_2ForGsoap.h:1879 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt (-802)

typedef std::string eml22__QuantityClassKindExt;
#endif

/* eml2_2ForGsoap.h:1882 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt (-803)

typedef std::string eml22__ReferenceConditionExt;
#endif

/* eml2_2ForGsoap.h:1885 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt (-804)

typedef std::string eml22__UnitOfMeasureExt;
#endif

/* eml2_2ForGsoap.h:1888 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy (-805)

typedef std::string eml22__MassPerVolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1891 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy (-806)

typedef std::string eml22__PressurePerVolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1894 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy (-807)

typedef std::string eml22__PressureUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1897 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy (-808)

typedef std::string eml22__VolumePerAreaUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1900 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy (-809)

typedef std::string eml22__VolumePerTimeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1903 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy (-810)

typedef std::string eml22__VolumePerVolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1906 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy (-811)

typedef std::string eml22__VolumeUomWithLegacy;
#endif

/* eml2_2ForGsoap.h:1909 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt (-812)

typedef std::string eml22__AbsorbedDoseUomExt;
#endif

/* eml2_2ForGsoap.h:1912 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt (-813)

typedef std::string eml22__ActivityOfRadioactivityUomExt;
#endif

/* eml2_2ForGsoap.h:1915 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt (-814)

typedef std::string eml22__AmountOfSubstancePerAmountOfSubstanceUomExt;
#endif

/* eml2_2ForGsoap.h:1918 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt (-815)

typedef std::string eml22__AmountOfSubstancePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:1921 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt (-816)

typedef std::string eml22__AmountOfSubstancePerTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:1924 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt (-817)

typedef std::string eml22__AmountOfSubstancePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:1927 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt (-818)

typedef std::string eml22__AmountOfSubstancePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:1930 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt (-819)

typedef std::string eml22__AmountOfSubstanceUomExt;
#endif

/* eml2_2ForGsoap.h:1933 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt (-820)

typedef std::string eml22__AnglePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:1936 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt (-821)

typedef std::string eml22__AnglePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:1939 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt (-822)

typedef std::string eml22__AngularAccelerationUomExt;
#endif

/* eml2_2ForGsoap.h:1942 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt (-823)

typedef std::string eml22__AngularVelocityUomExt;
#endif

/* eml2_2ForGsoap.h:1945 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt (-824)

typedef std::string eml22__APIGammaRayUomExt;
#endif

/* eml2_2ForGsoap.h:1948 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt (-825)

typedef std::string eml22__APIGravityUomExt;
#endif

/* eml2_2ForGsoap.h:1951 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt (-826)

typedef std::string eml22__APINeutronUomExt;
#endif

/* eml2_2ForGsoap.h:1954 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt (-827)

typedef std::string eml22__AreaPerAmountOfSubstanceUomExt;
#endif

/* eml2_2ForGsoap.h:1957 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt (-828)

typedef std::string eml22__AreaPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:1960 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt (-829)

typedef std::string eml22__AreaPerCountUomExt;
#endif

/* eml2_2ForGsoap.h:1963 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt (-830)

typedef std::string eml22__AreaPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:1966 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt (-831)

typedef std::string eml22__AreaPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:1969 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt (-832)

typedef std::string eml22__AreaPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:1972 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt (-833)

typedef std::string eml22__AreaUomExt;
#endif

/* eml2_2ForGsoap.h:1975 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt (-834)

typedef std::string eml22__AttenuationPerFrequencyIntervalUomExt;
#endif

/* eml2_2ForGsoap.h:1978 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt (-835)

typedef std::string eml22__CapacitanceUomExt;
#endif

/* eml2_2ForGsoap.h:1981 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt (-836)

typedef std::string eml22__CationExchangeCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:1984 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt (-837)

typedef std::string eml22__DataTransferSpeedUomExt;
#endif

/* eml2_2ForGsoap.h:1987 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt (-838)

typedef std::string eml22__DiffusionCoefficientUomExt;
#endif

/* eml2_2ForGsoap.h:1990 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt (-839)

typedef std::string eml22__DiffusiveTimeOfFlightUomExt;
#endif

/* eml2_2ForGsoap.h:1993 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt (-840)

typedef std::string eml22__DigitalStorageUomExt;
#endif

/* eml2_2ForGsoap.h:1996 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt (-841)

typedef std::string eml22__DimensionlessUomExt;
#endif

/* eml2_2ForGsoap.h:1999 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt (-842)

typedef std::string eml22__DipoleMomentUomExt;
#endif

/* eml2_2ForGsoap.h:2002 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt (-843)

typedef std::string eml22__DoseEquivalentUomExt;
#endif

/* eml2_2ForGsoap.h:2005 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt (-844)

typedef std::string eml22__DynamicViscosityUomExt;
#endif

/* eml2_2ForGsoap.h:2008 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt (-845)

typedef std::string eml22__ElectricalResistivityUomExt;
#endif

/* eml2_2ForGsoap.h:2011 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt (-846)

typedef std::string eml22__ElectricChargePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2014 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt (-847)

typedef std::string eml22__ElectricChargePerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2017 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt (-848)

typedef std::string eml22__ElectricChargePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2020 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt (-849)

typedef std::string eml22__ElectricChargeUomExt;
#endif

/* eml2_2ForGsoap.h:2023 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt (-850)

typedef std::string eml22__ElectricConductanceUomExt;
#endif

/* eml2_2ForGsoap.h:2026 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt (-851)

typedef std::string eml22__ElectricConductivityUomExt;
#endif

/* eml2_2ForGsoap.h:2029 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt (-852)

typedef std::string eml22__ElectricCurrentDensityUomExt;
#endif

/* eml2_2ForGsoap.h:2032 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt (-853)

typedef std::string eml22__ElectricCurrentUomExt;
#endif

/* eml2_2ForGsoap.h:2035 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt (-854)

typedef std::string eml22__ElectricFieldStrengthUomExt;
#endif

/* eml2_2ForGsoap.h:2038 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt (-855)

typedef std::string eml22__ElectricPotentialDifferenceUomExt;
#endif

/* eml2_2ForGsoap.h:2041 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt (-856)

typedef std::string eml22__ElectricResistancePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2044 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt (-857)

typedef std::string eml22__ElectricResistanceUomExt;
#endif

/* eml2_2ForGsoap.h:2047 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt (-858)

typedef std::string eml22__ElectromagneticMomentUomExt;
#endif

/* eml2_2ForGsoap.h:2050 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt (-859)

typedef std::string eml22__EnergyLengthPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2053 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt (-860)

typedef std::string eml22__EnergyLengthPerTimeAreaTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:2056 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt (-861)

typedef std::string eml22__EnergyPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2059 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt (-862)

typedef std::string eml22__EnergyPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2062 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt (-863)

typedef std::string eml22__EnergyPerMassPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2065 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt (-864)

typedef std::string eml22__EnergyPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2068 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt (-865)

typedef std::string eml22__EnergyPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2071 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt (-866)

typedef std::string eml22__EnergyUomExt;
#endif

/* eml2_2ForGsoap.h:2074 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt (-867)

typedef std::string eml22__ForceAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2077 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt (-868)

typedef std::string eml22__ForceLengthPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2080 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt (-869)

typedef std::string eml22__ForcePerForceUomExt;
#endif

/* eml2_2ForGsoap.h:2083 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt (-870)

typedef std::string eml22__ForcePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2086 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt (-871)

typedef std::string eml22__ForcePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2089 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt (-872)

typedef std::string eml22__ForceUomExt;
#endif

/* eml2_2ForGsoap.h:2092 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt (-873)

typedef std::string eml22__FrequencyIntervalUomExt;
#endif

/* eml2_2ForGsoap.h:2095 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt (-874)

typedef std::string eml22__FrequencyUomExt;
#endif

/* eml2_2ForGsoap.h:2098 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt (-875)

typedef std::string eml22__HeatCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:2101 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt (-876)

typedef std::string eml22__HeatFlowRateUomExt;
#endif

/* eml2_2ForGsoap.h:2104 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt (-877)

typedef std::string eml22__HeatTransferCoefficientUomExt;
#endif

/* eml2_2ForGsoap.h:2107 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt (-878)

typedef std::string eml22__IlluminanceUomExt;
#endif

/* eml2_2ForGsoap.h:2110 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt (-879)

typedef std::string eml22__InductanceUomExt;
#endif

/* eml2_2ForGsoap.h:2113 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt (-880)

typedef std::string eml22__IsothermalCompressibilityUomExt;
#endif

/* eml2_2ForGsoap.h:2116 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt (-881)

typedef std::string eml22__KinematicViscosityUomExt;
#endif

/* eml2_2ForGsoap.h:2119 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt (-882)

typedef std::string eml22__LengthPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2122 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt (-883)

typedef std::string eml22__LengthPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2125 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt (-884)

typedef std::string eml22__LengthPerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2128 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt (-885)

typedef std::string eml22__LengthPerTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:2131 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt (-886)

typedef std::string eml22__LengthPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2134 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt (-887)

typedef std::string eml22__LengthPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2137 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt (-888)

typedef std::string eml22__LengthUomExt;
#endif

/* eml2_2ForGsoap.h:2140 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt (-889)

typedef std::string eml22__LightExposureUomExt;
#endif

/* eml2_2ForGsoap.h:2143 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt (-890)

typedef std::string eml22__LinearAccelerationUomExt;
#endif

/* eml2_2ForGsoap.h:2146 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt (-891)

typedef std::string eml22__LinearThermalExpansionUomExt;
#endif

/* eml2_2ForGsoap.h:2149 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt (-892)

typedef std::string eml22__LogarithmicPowerRatioPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2152 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt (-893)

typedef std::string eml22__LogarithmicPowerRatioUomExt;
#endif

/* eml2_2ForGsoap.h:2155 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt (-894)

typedef std::string eml22__LuminanceUomExt;
#endif

/* eml2_2ForGsoap.h:2158 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt (-895)

typedef std::string eml22__LuminousEfficacyUomExt;
#endif

/* eml2_2ForGsoap.h:2161 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt (-896)

typedef std::string eml22__LuminousFluxUomExt;
#endif

/* eml2_2ForGsoap.h:2164 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt (-897)

typedef std::string eml22__LuminousIntensityUomExt;
#endif

/* eml2_2ForGsoap.h:2167 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt (-898)

typedef std::string eml22__MagneticDipoleMomentUomExt;
#endif

/* eml2_2ForGsoap.h:2170 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt (-899)

typedef std::string eml22__MagneticFieldStrengthUomExt;
#endif

/* eml2_2ForGsoap.h:2173 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt (-900)

typedef std::string eml22__MagneticFluxDensityPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2176 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt (-901)

typedef std::string eml22__MagneticFluxDensityUomExt;
#endif

/* eml2_2ForGsoap.h:2179 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt (-902)

typedef std::string eml22__MagneticFluxUomExt;
#endif

/* eml2_2ForGsoap.h:2182 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt (-903)

typedef std::string eml22__MagneticPermeabilityUomExt;
#endif

/* eml2_2ForGsoap.h:2185 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt (-904)

typedef std::string eml22__MagneticVectorPotentialUomExt;
#endif

/* eml2_2ForGsoap.h:2188 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt (-905)

typedef std::string eml22__MassLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2191 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt (-906)

typedef std::string eml22__MassPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2194 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt (-907)

typedef std::string eml22__MassPerEnergyUomExt;
#endif

/* eml2_2ForGsoap.h:2197 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt (-908)

typedef std::string eml22__MassPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2200 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt (-909)

typedef std::string eml22__MassPerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2203 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt (-910)

typedef std::string eml22__MassPerTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2206 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt (-911)

typedef std::string eml22__MassPerTimePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2209 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt (-912)

typedef std::string eml22__MassPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2212 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt (-913)

typedef std::string eml22__MassPerVolumePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2215 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt (-914)

typedef std::string eml22__MassPerVolumePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2218 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt (-915)

typedef std::string eml22__MassPerVolumePerTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:2221 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt (-916)

typedef std::string eml22__MassPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2224 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt (-917)

typedef std::string eml22__MassUomExt;
#endif

/* eml2_2ForGsoap.h:2227 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt (-918)

typedef std::string eml22__MobilityUomExt;
#endif

/* eml2_2ForGsoap.h:2230 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt (-919)

typedef std::string eml22__MolarEnergyUomExt;
#endif

/* eml2_2ForGsoap.h:2233 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt (-920)

typedef std::string eml22__MolarHeatCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:2236 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt (-921)

typedef std::string eml22__MolarVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2239 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt (-922)

typedef std::string eml22__MolecularWeightUomExt;
#endif

/* eml2_2ForGsoap.h:2242 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt (-923)

typedef std::string eml22__MomentOfForceUomExt;
#endif

/* eml2_2ForGsoap.h:2245 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt (-924)

typedef std::string eml22__MomentOfInertiaUomExt;
#endif

/* eml2_2ForGsoap.h:2248 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt (-925)

typedef std::string eml22__MomentumUomExt;
#endif

/* eml2_2ForGsoap.h:2251 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt (-926)

typedef std::string eml22__NormalizedPowerUomExt;
#endif

/* eml2_2ForGsoap.h:2254 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt (-927)

typedef std::string eml22__PermeabilityLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2257 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt (-928)

typedef std::string eml22__PermeabilityRockUomExt;
#endif

/* eml2_2ForGsoap.h:2260 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt (-929)

typedef std::string eml22__PermittivityUomExt;
#endif

/* eml2_2ForGsoap.h:2263 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt (-930)

typedef std::string eml22__PlaneAngleUomExt;
#endif

/* eml2_2ForGsoap.h:2266 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt (-931)

typedef std::string eml22__PotentialDifferencePerPowerDropUomExt;
#endif

/* eml2_2ForGsoap.h:2269 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt (-932)

typedef std::string eml22__PowerPerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2272 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt (-933)

typedef std::string eml22__PowerPerPowerUomExt;
#endif

/* eml2_2ForGsoap.h:2275 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt (-934)

typedef std::string eml22__PowerPerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2278 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt (-935)

typedef std::string eml22__PowerUomExt;
#endif

/* eml2_2ForGsoap.h:2281 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt (-936)

typedef std::string eml22__PressurePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2284 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt (-937)

typedef std::string eml22__PressurePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2287 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt (-938)

typedef std::string eml22__PressurePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2290 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt (-939)

typedef std::string eml22__PressureSquaredPerForceTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2293 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt (-940)

typedef std::string eml22__PressureSquaredUomExt;
#endif

/* eml2_2ForGsoap.h:2296 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt (-941)

typedef std::string eml22__PressureTimePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2299 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt (-942)

typedef std::string eml22__PressureUomExt;
#endif

/* eml2_2ForGsoap.h:2302 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt (-943)

typedef std::string eml22__QuantityOfLightUomExt;
#endif

/* eml2_2ForGsoap.h:2305 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt (-944)

typedef std::string eml22__RadianceUomExt;
#endif

/* eml2_2ForGsoap.h:2308 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt (-945)

typedef std::string eml22__RadiantIntensityUomExt;
#endif

/* eml2_2ForGsoap.h:2311 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt (-946)

typedef std::string eml22__ReciprocalAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2314 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt (-947)

typedef std::string eml22__ReciprocalElectricPotentialDifferenceUomExt;
#endif

/* eml2_2ForGsoap.h:2317 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt (-948)

typedef std::string eml22__ReciprocalForceUomExt;
#endif

/* eml2_2ForGsoap.h:2320 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt (-949)

typedef std::string eml22__ReciprocalLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2323 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt (-950)

typedef std::string eml22__ReciprocalMassTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2326 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt (-951)

typedef std::string eml22__ReciprocalMassUomExt;
#endif

/* eml2_2ForGsoap.h:2329 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt (-952)

typedef std::string eml22__ReciprocalPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2332 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt (-953)

typedef std::string eml22__ReciprocalTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2335 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt (-954)

typedef std::string eml22__ReciprocalVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2338 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt (-955)

typedef std::string eml22__ReluctanceUomExt;
#endif

/* eml2_2ForGsoap.h:2341 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt (-956)

typedef std::string eml22__SecondMomentOfAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2344 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt (-957)

typedef std::string eml22__SignalingEventPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2347 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt (-958)

typedef std::string eml22__SolidAngleUomExt;
#endif

/* eml2_2ForGsoap.h:2350 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt (-959)

typedef std::string eml22__SpecificHeatCapacityUomExt;
#endif

/* eml2_2ForGsoap.h:2353 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt (-960)

typedef std::string eml22__TemperatureIntervalPerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2356 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt (-961)

typedef std::string eml22__TemperatureIntervalPerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2359 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt (-962)

typedef std::string eml22__TemperatureIntervalPerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2362 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt (-963)

typedef std::string eml22__TemperatureIntervalUomExt;
#endif

/* eml2_2ForGsoap.h:2365 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt (-964)

typedef std::string eml22__ThermalConductanceUomExt;
#endif

/* eml2_2ForGsoap.h:2368 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt (-965)

typedef std::string eml22__ThermalConductivityUomExt;
#endif

/* eml2_2ForGsoap.h:2371 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt (-966)

typedef std::string eml22__ThermalDiffusivityUomExt;
#endif

/* eml2_2ForGsoap.h:2374 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt (-967)

typedef std::string eml22__ThermalInsulanceUomExt;
#endif

/* eml2_2ForGsoap.h:2377 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt (-968)

typedef std::string eml22__ThermalResistanceUomExt;
#endif

/* eml2_2ForGsoap.h:2380 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-969)

typedef std::string eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:2383 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt (-970)

typedef std::string eml22__ThermodynamicTemperatureUomExt;
#endif

/* eml2_2ForGsoap.h:2386 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt (-971)

typedef std::string eml22__TimePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2389 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt (-972)

typedef std::string eml22__TimePerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2392 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt (-973)

typedef std::string eml22__TimePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2395 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt (-974)

typedef std::string eml22__TimePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2398 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt (-975)

typedef std::string eml22__TimeUomExt;
#endif

/* eml2_2ForGsoap.h:2401 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt (-976)

typedef std::string eml22__VerticalCoordinateUomExt;
#endif

/* eml2_2ForGsoap.h:2404 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt (-977)

typedef std::string eml22__VolumeFlowRatePerVolumeFlowRateUomExt;
#endif

/* eml2_2ForGsoap.h:2407 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt (-978)

typedef std::string eml22__VolumePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2410 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt (-979)

typedef std::string eml22__VolumePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2413 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt (-980)

typedef std::string eml22__VolumePerMassUomExt;
#endif

/* eml2_2ForGsoap.h:2416 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt (-981)

typedef std::string eml22__VolumePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2419 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt (-982)

typedef std::string eml22__VolumePerRotationUomExt;
#endif

/* eml2_2ForGsoap.h:2422 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt (-983)

typedef std::string eml22__VolumePerTimeLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2425 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt (-984)

typedef std::string eml22__VolumePerTimePerAreaUomExt;
#endif

/* eml2_2ForGsoap.h:2428 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt (-985)

typedef std::string eml22__VolumePerTimePerLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2431 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt (-986)

typedef std::string eml22__VolumePerTimePerPressureLengthUomExt;
#endif

/* eml2_2ForGsoap.h:2434 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt (-987)

typedef std::string eml22__VolumePerTimePerPressureUomExt;
#endif

/* eml2_2ForGsoap.h:2437 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt (-988)

typedef std::string eml22__VolumePerTimePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2440 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt (-989)

typedef std::string eml22__VolumePerTimePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2443 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt (-990)

typedef std::string eml22__VolumePerTimeUomExt;
#endif

/* eml2_2ForGsoap.h:2446 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt (-991)

typedef std::string eml22__VolumePerVolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2449 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt (-992)

typedef std::string eml22__VolumetricHeatTransferCoefficientUomExt;
#endif

/* eml2_2ForGsoap.h:2452 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt (-993)

typedef std::string eml22__VolumetricThermalExpansionUomExt;
#endif

/* eml2_2ForGsoap.h:2455 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt (-994)

typedef std::string eml22__VolumeUomExt;
#endif

/* eml2_2ForGsoap.h:2466 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType (-995)

typedef std::string gml__NilReasonType;
#endif

/* eml2_2ForGsoap.h:2470 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration (-996)

typedef std::string gml__NilReasonEnumeration;
#endif

/* eml2_2ForGsoap.h:2473 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier
#define SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier (-997)

typedef std::string gml__UomIdentifier;
#endif

/* eml2_2ForGsoap.h:2508 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType (-998)

typedef std::string gco__Date_USCOREType;
#endif

/* eml2_2ForGsoap.h:2532 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure (-1000)

typedef double eml22__AbstractMeasure;
#endif

/* eml2_2ForGsoap.h:2540 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString (-1001)

typedef std::string eml22__AbstractString;
#endif

/* eml2_2ForGsoap.h:2545 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeLong
#define SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeLong (-1002)

typedef LONG64 eml22__NonNegativeLong;
#endif

/* eml2_2ForGsoap.h:2550 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PositiveLong
#define SOAP_TYPE_gsoap_eml2_2_eml22__PositiveLong (-1003)

typedef LONG64 eml22__PositiveLong;
#endif

/* eml2_2ForGsoap.h:2638 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol
#define SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol (-1007)

typedef std::string gml__UomSymbol;
#endif

/* eml2_2ForGsoap.h:2649 */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomURI
#define SOAP_TYPE_gsoap_eml2_2_gml__UomURI (-1008)

typedef std::string gml__UomURI;
#endif

/* eml2_2ForGsoap.h:2750 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern (-1012)

typedef std::string eml22__EnumExtensionPattern;
#endif

/* eml2_2ForGsoap.h:2755 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_eml22__String2000 (-1013)

typedef std::string eml22__String2000;
#endif

/* eml2_2ForGsoap.h:2760 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String64
#define SOAP_TYPE_gsoap_eml2_2_eml22__String64 (-1014)

typedef std::string eml22__String64;
#endif

/* eml2_2ForGsoap.h:2765 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeStamp
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeStamp (-1015)

typedef std::string eml22__TimeStamp;
#endif

/* eml2_2ForGsoap.h:2775 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum (-1016)

typedef std::string eml22__UomEnum;
#endif

/* eml2_2ForGsoap.h:2780 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UuidString
#define SOAP_TYPE_gsoap_eml2_2_eml22__UuidString (-1017)

typedef std::string eml22__UuidString;
#endif

/* eml2_2ForGsoap.h:4369 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone (-1020)

typedef std::string eml22__TimeZone;
#endif

/* eml2_2ForGsoap.h:4377 */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum (-1021)

typedef eml22__String64 eml22__TypeEnum;
#endif

/* eml2_2ForGsoap.h:44762 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ColorMapDictionary
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ColorMapDictionary (-1722)

typedef resqml2__ColorMapDictionary _resqml2__ColorMapDictionary;
#endif

/* eml2_2ForGsoap.h:44765 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousColorMap
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousColorMap (-1723)

typedef resqml2__ContinuousColorMap _resqml2__ContinuousColorMap;
#endif

/* eml2_2ForGsoap.h:44768 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteColorMap
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteColorMap (-1724)

typedef resqml2__DiscreteColorMap _resqml2__DiscreteColorMap;
#endif

/* eml2_2ForGsoap.h:44771 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__LocalDepth3dCrs
#define SOAP_TYPE_gsoap_eml2_2__resqml2__LocalDepth3dCrs (-1725)

typedef resqml2__LocalDepth3dCrs _resqml2__LocalDepth3dCrs;
#endif

/* eml2_2ForGsoap.h:44774 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__LocalTime3dCrs
#define SOAP_TYPE_gsoap_eml2_2__resqml2__LocalTime3dCrs (-1726)

typedef resqml2__LocalTime3dCrs _resqml2__LocalTime3dCrs;
#endif

/* eml2_2ForGsoap.h:44777 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeature (-1727)

typedef resqml2__BoundaryFeature _resqml2__BoundaryFeature;
#endif

/* eml2_2ForGsoap.h:44780 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__FrontierFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__FrontierFeature (-1728)

typedef resqml2__FrontierFeature _resqml2__FrontierFeature;
#endif

/* eml2_2ForGsoap.h:44783 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Model
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Model (-1729)

typedef resqml2__Model _resqml2__Model;
#endif

/* eml2_2ForGsoap.h:44786 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeature (-1730)

typedef resqml2__RockVolumeFeature _resqml2__RockVolumeFeature;
#endif

/* eml2_2ForGsoap.h:44789 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeatureDictionary
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeatureDictionary (-1731)

typedef resqml2__RockVolumeFeatureDictionary _resqml2__RockVolumeFeatureDictionary;
#endif

/* eml2_2ForGsoap.h:44792 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeatureInterpretation (-1732)

typedef resqml2__BoundaryFeatureInterpretation _resqml2__BoundaryFeatureInterpretation;
#endif

/* eml2_2ForGsoap.h:44795 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__EarthModelInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__EarthModelInterpretation (-1733)

typedef resqml2__EarthModelInterpretation _resqml2__EarthModelInterpretation;
#endif

/* eml2_2ForGsoap.h:44798 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__FaultInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__FaultInterpretation (-1734)

typedef resqml2__FaultInterpretation _resqml2__FaultInterpretation;
#endif

/* eml2_2ForGsoap.h:44801 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__FluidBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__FluidBoundaryInterpretation (-1735)

typedef resqml2__FluidBoundaryInterpretation _resqml2__FluidBoundaryInterpretation;
#endif

/* eml2_2ForGsoap.h:44804 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GenericFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GenericFeatureInterpretation (-1736)

typedef resqml2__GenericFeatureInterpretation _resqml2__GenericFeatureInterpretation;
#endif

/* eml2_2ForGsoap.h:44807 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyBoundaryInterpretation (-1737)

typedef resqml2__GeobodyBoundaryInterpretation _resqml2__GeobodyBoundaryInterpretation;
#endif

/* eml2_2ForGsoap.h:44810 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyInterpretation (-1738)

typedef resqml2__GeobodyInterpretation _resqml2__GeobodyInterpretation;
#endif

/* eml2_2ForGsoap.h:44813 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GeologicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GeologicUnitInterpretation (-1739)

typedef resqml2__GeologicUnitInterpretation _resqml2__GeologicUnitInterpretation;
#endif

/* eml2_2ForGsoap.h:44816 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__HorizonInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__HorizonInterpretation (-1740)

typedef resqml2__HorizonInterpretation _resqml2__HorizonInterpretation;
#endif

/* eml2_2ForGsoap.h:44819 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidOrganizationInterpretation (-1741)

typedef resqml2__RockFluidOrganizationInterpretation _resqml2__RockFluidOrganizationInterpretation;
#endif

/* eml2_2ForGsoap.h:44822 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidUnitInterpretation (-1742)

typedef resqml2__RockFluidUnitInterpretation _resqml2__RockFluidUnitInterpretation;
#endif

/* eml2_2ForGsoap.h:44825 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumn
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumn (-1743)

typedef resqml2__StratigraphicColumn _resqml2__StratigraphicColumn;
#endif

/* eml2_2ForGsoap.h:44828 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumnRankInterpretation (-1744)

typedef resqml2__StratigraphicColumnRankInterpretation _resqml2__StratigraphicColumnRankInterpretation;
#endif

/* eml2_2ForGsoap.h:44831 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicOccurrenceInterpretation (-1745)

typedef resqml2__StratigraphicOccurrenceInterpretation _resqml2__StratigraphicOccurrenceInterpretation;
#endif

/* eml2_2ForGsoap.h:44834 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitDictionary
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitDictionary (-1746)

typedef resqml2__StratigraphicUnitDictionary _resqml2__StratigraphicUnitDictionary;
#endif

/* eml2_2ForGsoap.h:44837 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitInterpretation (-1747)

typedef resqml2__StratigraphicUnitInterpretation _resqml2__StratigraphicUnitInterpretation;
#endif

/* eml2_2ForGsoap.h:44840 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StructuralOrganizationInterpretation (-1748)

typedef resqml2__StructuralOrganizationInterpretation _resqml2__StructuralOrganizationInterpretation;
#endif

/* eml2_2ForGsoap.h:44843 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BlockedWellboreRepresentation (-1749)

typedef resqml2__BlockedWellboreRepresentation _resqml2__BlockedWellboreRepresentation;
#endif

/* eml2_2ForGsoap.h:44846 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DeviationSurveyRepresentation (-1750)

typedef resqml2__DeviationSurveyRepresentation _resqml2__DeviationSurveyRepresentation;
#endif

/* eml2_2ForGsoap.h:44849 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__MdDatum
#define SOAP_TYPE_gsoap_eml2_2__resqml2__MdDatum (-1751)

typedef resqml2__MdDatum _resqml2__MdDatum;
#endif

/* eml2_2ForGsoap.h:44852 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicWellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicWellboreFrameRepresentation (-1752)

typedef resqml2__SeismicWellboreFrameRepresentation _resqml2__SeismicWellboreFrameRepresentation;
#endif

/* eml2_2ForGsoap.h:44855 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFeature (-1753)

typedef resqml2__WellboreFeature _resqml2__WellboreFeature;
#endif

/* eml2_2ForGsoap.h:44858 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFrameRepresentation (-1754)

typedef resqml2__WellboreFrameRepresentation _resqml2__WellboreFrameRepresentation;
#endif

/* eml2_2ForGsoap.h:44861 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretation (-1755)

typedef resqml2__WellboreInterpretation _resqml2__WellboreInterpretation;
#endif

/* eml2_2ForGsoap.h:44864 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretationSet (-1756)

typedef resqml2__WellboreInterpretationSet _resqml2__WellboreInterpretationSet;
#endif

/* eml2_2ForGsoap.h:44867 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreMarkerFrameRepresentation (-1757)

typedef resqml2__WellboreMarkerFrameRepresentation _resqml2__WellboreMarkerFrameRepresentation;
#endif

/* eml2_2ForGsoap.h:44870 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreTrajectoryRepresentation (-1758)

typedef resqml2__WellboreTrajectoryRepresentation _resqml2__WellboreTrajectoryRepresentation;
#endif

/* eml2_2ForGsoap.h:44873 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dRepresentation (-1759)

typedef resqml2__Grid2dRepresentation _resqml2__Grid2dRepresentation;
#endif

/* eml2_2ForGsoap.h:44876 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dSetRepresentation (-1760)

typedef resqml2__Grid2dSetRepresentation _resqml2__Grid2dSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44879 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__NonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__NonSealedSurfaceFrameworkRepresentation (-1761)

typedef resqml2__NonSealedSurfaceFrameworkRepresentation _resqml2__NonSealedSurfaceFrameworkRepresentation;
#endif

/* eml2_2ForGsoap.h:44882 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PlaneSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PlaneSetRepresentation (-1762)

typedef resqml2__PlaneSetRepresentation _resqml2__PlaneSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44885 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PointSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PointSetRepresentation (-1763)

typedef resqml2__PointSetRepresentation _resqml2__PointSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44888 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineRepresentation (-1764)

typedef resqml2__PolylineRepresentation _resqml2__PolylineRepresentation;
#endif

/* eml2_2ForGsoap.h:44891 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SealedSurfaceFrameworkRepresentation (-1765)

typedef resqml2__SealedSurfaceFrameworkRepresentation _resqml2__SealedSurfaceFrameworkRepresentation;
#endif

/* eml2_2ForGsoap.h:44894 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SealedVolumeFrameworkRepresentation (-1766)

typedef resqml2__SealedVolumeFrameworkRepresentation _resqml2__SealedVolumeFrameworkRepresentation;
#endif

/* eml2_2ForGsoap.h:44897 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__TriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__TriangulatedSetRepresentation (-1767)

typedef resqml2__TriangulatedSetRepresentation _resqml2__TriangulatedSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44900 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__CmpLineFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__CmpLineFeature (-1768)

typedef resqml2__CmpLineFeature _resqml2__CmpLineFeature;
#endif

/* eml2_2ForGsoap.h:44903 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic2dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic2dPostStackRepresentation (-1769)

typedef resqml2__Seismic2dPostStackRepresentation _resqml2__Seismic2dPostStackRepresentation;
#endif

/* eml2_2ForGsoap.h:44906 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic3dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic3dPostStackRepresentation (-1770)

typedef resqml2__Seismic3dPostStackRepresentation _resqml2__Seismic3dPostStackRepresentation;
#endif

/* eml2_2ForGsoap.h:44909 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLatticeFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLatticeFeature (-1771)

typedef resqml2__SeismicLatticeFeature _resqml2__SeismicLatticeFeature;
#endif

/* eml2_2ForGsoap.h:44912 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLineSetFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLineSetFeature (-1772)

typedef resqml2__SeismicLineSetFeature _resqml2__SeismicLineSetFeature;
#endif

/* eml2_2ForGsoap.h:44915 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ShotPointLineFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ShotPointLineFeature (-1773)

typedef resqml2__ShotPointLineFeature _resqml2__ShotPointLineFeature;
#endif

/* eml2_2ForGsoap.h:44918 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GpGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GpGridRepresentation (-1774)

typedef resqml2__GpGridRepresentation _resqml2__GpGridRepresentation;
#endif

/* eml2_2ForGsoap.h:44921 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GridConnectionSetRepresentation (-1775)

typedef resqml2__GridConnectionSetRepresentation _resqml2__GridConnectionSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44924 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__IjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__IjkGridRepresentation (-1776)

typedef resqml2__IjkGridRepresentation _resqml2__IjkGridRepresentation;
#endif

/* eml2_2ForGsoap.h:44927 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__LocalGridSet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__LocalGridSet (-1777)

typedef resqml2__LocalGridSet _resqml2__LocalGridSet;
#endif

/* eml2_2ForGsoap.h:44930 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedIjkGridRepresentation (-1778)

typedef resqml2__TruncatedIjkGridRepresentation _resqml2__TruncatedIjkGridRepresentation;
#endif

/* eml2_2ForGsoap.h:44933 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedUnstructuredColumnLayerGridRepresentation (-1779)

typedef resqml2__TruncatedUnstructuredColumnLayerGridRepresentation _resqml2__TruncatedUnstructuredColumnLayerGridRepresentation;
#endif

/* eml2_2ForGsoap.h:44936 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredColumnLayerGridRepresentation (-1780)

typedef resqml2__UnstructuredColumnLayerGridRepresentation _resqml2__UnstructuredColumnLayerGridRepresentation;
#endif

/* eml2_2ForGsoap.h:44939 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredGridRepresentation (-1781)

typedef resqml2__UnstructuredGridRepresentation _resqml2__UnstructuredGridRepresentation;
#endif

/* eml2_2ForGsoap.h:44942 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineSetRepresentation (-1782)

typedef resqml2__PolylineSetRepresentation _resqml2__PolylineSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44945 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RedefinedGeometryRepresentation (-1783)

typedef resqml2__RedefinedGeometryRepresentation _resqml2__RedefinedGeometryRepresentation;
#endif

/* eml2_2ForGsoap.h:44948 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationIdentitySet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationIdentitySet (-1784)

typedef resqml2__RepresentationIdentitySet _resqml2__RepresentationIdentitySet;
#endif

/* eml2_2ForGsoap.h:44951 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationSetRepresentation (-1785)

typedef resqml2__RepresentationSetRepresentation _resqml2__RepresentationSetRepresentation;
#endif

/* eml2_2ForGsoap.h:44954 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SubRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SubRepresentation (-1786)

typedef resqml2__SubRepresentation _resqml2__SubRepresentation;
#endif

/* eml2_2ForGsoap.h:44957 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BooleanProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BooleanProperty (-1787)

typedef resqml2__BooleanProperty _resqml2__BooleanProperty;
#endif

/* eml2_2ForGsoap.h:44960 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__CategoricalProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__CategoricalProperty (-1788)

typedef resqml2__CategoricalProperty _resqml2__CategoricalProperty;
#endif

/* eml2_2ForGsoap.h:44963 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__CommentProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__CommentProperty (-1789)

typedef resqml2__CommentProperty _resqml2__CommentProperty;
#endif

/* eml2_2ForGsoap.h:44966 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousProperty (-1790)

typedef resqml2__ContinuousProperty _resqml2__ContinuousProperty;
#endif

/* eml2_2ForGsoap.h:44969 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteProperty (-1791)

typedef resqml2__DiscreteProperty _resqml2__DiscreteProperty;
#endif

/* eml2_2ForGsoap.h:44972 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DoubleTableLookup
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DoubleTableLookup (-1792)

typedef resqml2__DoubleTableLookup _resqml2__DoubleTableLookup;
#endif

/* eml2_2ForGsoap.h:44975 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PointsProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PointsProperty (-1793)

typedef resqml2__PointsProperty _resqml2__PointsProperty;
#endif

/* eml2_2ForGsoap.h:44978 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PropertySet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PropertySet (-1794)

typedef resqml2__PropertySet _resqml2__PropertySet;
#endif

/* eml2_2ForGsoap.h:44981 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StringTableLookup
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StringTableLookup (-1795)

typedef resqml2__StringTableLookup _resqml2__StringTableLookup;
#endif

/* eml2_2ForGsoap.h:44984 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesFeature (-1796)

typedef resqml2__StreamlinesFeature _resqml2__StreamlinesFeature;
#endif

/* eml2_2ForGsoap.h:44987 */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesRepresentation (-1797)

typedef resqml2__StreamlinesRepresentation _resqml2__StreamlinesRepresentation;
#endif

/* eml2_2ForGsoap.h:45010 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject (-1798)

typedef eml22__AbstractObject _eml22__AbstractContextualObject;
#endif

/* eml2_2ForGsoap.h:45017 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject (-1799)

typedef eml22__AbstractObject _eml22__AbstractDataObject;
#endif

/* eml2_2ForGsoap.h:45020 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference (-1800)

typedef eml22__EpcExternalPartReference _eml22__EpcExternalPartReference;
#endif

/* eml2_2ForGsoap.h:45023 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2__eml22__Activity (-1801)

typedef eml22__Activity _eml22__Activity;
#endif

/* eml2_2ForGsoap.h:45026 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate (-1802)

typedef eml22__ActivityTemplate _eml22__ActivityTemplate;
#endif

/* eml2_2ForGsoap.h:45029 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind (-1803)

typedef eml22__PropertyKind _eml22__PropertyKind;
#endif

/* eml2_2ForGsoap.h:45032 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary (-1804)

typedef eml22__PropertyKindDictionary _eml22__PropertyKindDictionary;
#endif

/* eml2_2ForGsoap.h:45035 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries (-1805)

typedef eml22__TimeSeries _eml22__TimeSeries;
#endif

/* eml2_2ForGsoap.h:45038 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord (-1806)

typedef eml22__DataAssuranceRecord _eml22__DataAssuranceRecord;
#endif

/* eml2_2ForGsoap.h:45041 */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet (-1807)

typedef eml22__GraphicalInformationSet _eml22__GraphicalInformationSet;
#endif

/* eml2_2ForGsoap.h:45060 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS (-1808)

typedef gml__GeodeticCRSType _gml__GeodeticCRS;
#endif

/* eml2_2ForGsoap.h:45067 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__description
#define SOAP_TYPE_gsoap_eml2_2__gml__description (-1809)

typedef gml__StringOrRefType _gml__description;
#endif

/* eml2_2ForGsoap.h:45074 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference
#define SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference (-1810)

typedef gml__ReferenceType _gml__descriptionReference;
#endif

/* eml2_2ForGsoap.h:45081 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__identifier
#define SOAP_TYPE_gsoap_eml2_2__gml__identifier (-1811)

typedef gml__CodeWithAuthorityType _gml__identifier;
#endif

/* eml2_2ForGsoap.h:45088 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__name
#define SOAP_TYPE_gsoap_eml2_2__gml__name (-1812)

typedef gml__CodeType _gml__name;
#endif

/* eml2_2ForGsoap.h:45091 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__remarks
#define SOAP_TYPE_gsoap_eml2_2__gml__remarks (-1813)

typedef std::string _gml__remarks;
#endif

/* eml2_2ForGsoap.h:45100 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Definition
#define SOAP_TYPE_gsoap_eml2_2__gml__Definition (-1814)

typedef gml__DefinitionType _gml__Definition;
#endif

/* eml2_2ForGsoap.h:45107 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__scope
#define SOAP_TYPE_gsoap_eml2_2__gml__scope (-1815)

typedef std::string _gml__scope;
#endif

/* eml2_2ForGsoap.h:45114 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS (-1816)

typedef gml__EllipsoidalCSPropertyType _gml__ellipsoidalCS;
#endif

/* eml2_2ForGsoap.h:45121 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS (-1817)

typedef gml__EllipsoidalCSType _gml__EllipsoidalCS;
#endif

/* eml2_2ForGsoap.h:45128 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axis
#define SOAP_TYPE_gsoap_eml2_2__gml__axis (-1818)

typedef gml__CoordinateSystemAxisPropertyType _gml__axis;
#endif

/* eml2_2ForGsoap.h:45135 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis (-1819)

typedef gml__CoordinateSystemAxisType _gml__CoordinateSystemAxis;
#endif

/* eml2_2ForGsoap.h:45142 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev
#define SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev (-1820)

typedef gml__CodeType _gml__axisAbbrev;
#endif

/* eml2_2ForGsoap.h:45151 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisDirection
#define SOAP_TYPE_gsoap_eml2_2__gml__axisDirection (-1821)

typedef gml__CodeWithAuthorityType _gml__axisDirection;
#endif

/* eml2_2ForGsoap.h:45158 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__minimumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__minimumValue (-1822)

typedef double _gml__minimumValue;
#endif

/* eml2_2ForGsoap.h:45165 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__maximumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__maximumValue (-1823)

typedef double _gml__maximumValue;
#endif

/* eml2_2ForGsoap.h:45172 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning
#define SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning (-1824)

typedef gml__CodeWithAuthorityType _gml__rangeMeaning;
#endif

/* eml2_2ForGsoap.h:45179 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS (-1825)

typedef gml__CartesianCSPropertyType _gml__cartesianCS;
#endif

/* eml2_2ForGsoap.h:45186 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS (-1826)

typedef gml__CartesianCSType _gml__CartesianCS;
#endif

/* eml2_2ForGsoap.h:45193 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS (-1827)

typedef gml__SphericalCSPropertyType _gml__sphericalCS;
#endif

/* eml2_2ForGsoap.h:45200 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS (-1828)

typedef gml__SphericalCSType _gml__SphericalCS;
#endif

/* eml2_2ForGsoap.h:45207 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum (-1829)

typedef gml__GeodeticDatumPropertyType _gml__geodeticDatum;
#endif

/* eml2_2ForGsoap.h:45214 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum (-1830)

typedef gml__GeodeticDatumType _gml__GeodeticDatum;
#endif

/* eml2_2ForGsoap.h:45225 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition
#define SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition (-1831)

typedef gml__CodeType _gml__anchorDefinition;
#endif

/* eml2_2ForGsoap.h:45232 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch
#define SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch (-1832)

typedef xsd__date _gml__realizationEpoch;
#endif

/* eml2_2ForGsoap.h:45239 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian (-1833)

typedef gml__PrimeMeridianPropertyType _gml__primeMeridian;
#endif

/* eml2_2ForGsoap.h:45246 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian (-1834)

typedef gml__PrimeMeridianType _gml__PrimeMeridian;
#endif

/* eml2_2ForGsoap.h:45253 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude
#define SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude (-1835)

typedef gml__AngleType _gml__greenwichLongitude;
#endif

/* eml2_2ForGsoap.h:45260 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid (-1836)

typedef gml__EllipsoidPropertyType _gml__ellipsoid;
#endif

/* eml2_2ForGsoap.h:45267 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid (-1837)

typedef gml__EllipsoidType _gml__Ellipsoid;
#endif

/* eml2_2ForGsoap.h:45274 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis (-1838)

typedef gml__MeasureType _gml__semiMajorAxis;
#endif

/* eml2_2ForGsoap.h:45281 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS (-1839)

typedef gml__ProjectedCRSType _gml__ProjectedCRS;
#endif

/* eml2_2ForGsoap.h:45288 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__conversion
#define SOAP_TYPE_gsoap_eml2_2__gml__conversion (-1840)

typedef gml__GeneralConversionPropertyType _gml__conversion;
#endif

/* eml2_2ForGsoap.h:45295 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__operationVersion
#define SOAP_TYPE_gsoap_eml2_2__gml__operationVersion (-1841)

typedef std::string _gml__operationVersion;
#endif

/* eml2_2ForGsoap.h:45302 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS (-1842)

typedef gml__CRSPropertyType _gml__sourceCRS;
#endif

/* eml2_2ForGsoap.h:45309 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__targetCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__targetCRS (-1843)

typedef gml__CRSPropertyType _gml__targetCRS;
#endif

/* eml2_2ForGsoap.h:45316 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS (-1844)

typedef gml__GeodeticCRSPropertyType _gml__baseGeodeticCRS;
#endif

/* eml2_2ForGsoap.h:45323 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS (-1845)

typedef gml__VerticalCRSType _gml__VerticalCRS;
#endif

/* eml2_2ForGsoap.h:45330 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalCS (-1846)

typedef gml__VerticalCSPropertyType _gml__verticalCS;
#endif

/* eml2_2ForGsoap.h:45337 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS (-1847)

typedef gml__VerticalCSType _gml__VerticalCS;
#endif

/* eml2_2ForGsoap.h:45344 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum (-1848)

typedef gml__VerticalDatumPropertyType _gml__verticalDatum;
#endif

/* eml2_2ForGsoap.h:45351 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum (-1849)

typedef gml__VerticalDatumType _gml__VerticalDatum;
#endif

/* eml2_2ForGsoap.h:45366 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__id
#define SOAP_TYPE_gsoap_eml2_2__gml__id (-1850)

typedef xsd__ID _gml__id;
#endif

/* eml2_2ForGsoap.h:45385 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__href
#define SOAP_TYPE_gsoap_eml2_2__xlink__href (-1851)

typedef xsd__anyURI _xlink__href;
#endif

/* eml2_2ForGsoap.h:45388 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__role
#define SOAP_TYPE_gsoap_eml2_2__xlink__role (-1852)

typedef xsd__anyURI _xlink__role;
#endif

/* eml2_2ForGsoap.h:45391 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__arcrole
#define SOAP_TYPE_gsoap_eml2_2__xlink__arcrole (-1853)

typedef xsd__anyURI _xlink__arcrole;
#endif

/* eml2_2ForGsoap.h:45394 */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__title
#define SOAP_TYPE_gsoap_eml2_2__xlink__title (-1854)

typedef std::string _xlink__title;
#endif

/* eml2_2ForGsoap.h:45405 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent (-1855)

typedef gmd__EX_USCOREExtent_USCOREType _gmd__EX_USCOREExtent;
#endif

/* eml2_2ForGsoap.h:45408 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent (-1856)

typedef gmd__EX_USCORETemporalExtent_USCOREType _gmd__EX_USCORETemporalExtent;
#endif

/* eml2_2ForGsoap.h:45411 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent (-1857)

typedef gmd__EX_USCOREVerticalExtent_USCOREType _gmd__EX_USCOREVerticalExtent;
#endif

/* eml2_2ForGsoap.h:45414 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier
#define SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier (-1858)

typedef gmd__MD_USCOREIdentifier_USCOREType _gmd__MD_USCOREIdentifier;
#endif

/* eml2_2ForGsoap.h:45417 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation (-1859)

typedef gmd__CI_USCORECitation_USCOREType _gmd__CI_USCORECitation;
#endif

/* eml2_2ForGsoap.h:45420 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate (-1860)

typedef gmd__CI_USCOREDate_USCOREType _gmd__CI_USCOREDate;
#endif

/* eml2_2ForGsoap.h:45423 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode (-1861)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREDateTypeCode;
#endif

/* eml2_2ForGsoap.h:45426 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty (-1862)

typedef gmd__CI_USCOREResponsibleParty_USCOREType _gmd__CI_USCOREResponsibleParty;
#endif

/* eml2_2ForGsoap.h:45429 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact (-1863)

typedef gmd__CI_USCOREContact_USCOREType _gmd__CI_USCOREContact;
#endif

/* eml2_2ForGsoap.h:45432 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone (-1864)

typedef gmd__CI_USCORETelephone_USCOREType _gmd__CI_USCORETelephone;
#endif

/* eml2_2ForGsoap.h:45435 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress (-1865)

typedef gmd__CI_USCOREAddress_USCOREType _gmd__CI_USCOREAddress;
#endif

/* eml2_2ForGsoap.h:45438 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource (-1866)

typedef gmd__CI_USCOREOnlineResource_USCOREType _gmd__CI_USCOREOnlineResource;
#endif

/* eml2_2ForGsoap.h:45441 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__URL
#define SOAP_TYPE_gsoap_eml2_2__gmd__URL (-1867)

typedef xsd__anyURI _gmd__URL;
#endif

/* eml2_2ForGsoap.h:45444 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode (-1868)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREOnLineFunctionCode;
#endif

/* eml2_2ForGsoap.h:45447 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode (-1869)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCORERoleCode;
#endif

/* eml2_2ForGsoap.h:45450 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode (-1870)

typedef gco__CodeListValue_USCOREType _gmd__CI_USCOREPresentationFormCode;
#endif

/* eml2_2ForGsoap.h:45453 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries (-1871)

typedef gmd__CI_USCORESeries_USCOREType _gmd__CI_USCORESeries;
#endif

/* eml2_2ForGsoap.h:45456 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode (-1872)

typedef gco__CodeListValue_USCOREType _gmd__DQ_USCOREEvaluationMethodTypeCode;
#endif

/* eml2_2ForGsoap.h:45491 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__CharacterString
#define SOAP_TYPE_gsoap_eml2_2__gco__CharacterString (-1873)

typedef std::string _gco__CharacterString;
#endif

/* eml2_2ForGsoap.h:45494 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Boolean
#define SOAP_TYPE_gsoap_eml2_2__gco__Boolean (-1874)

typedef bool _gco__Boolean;
#endif

/* eml2_2ForGsoap.h:45497 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Real
#define SOAP_TYPE_gsoap_eml2_2__gco__Real (-1875)

typedef double _gco__Real;
#endif

/* eml2_2ForGsoap.h:45500 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Date
#define SOAP_TYPE_gsoap_eml2_2__gco__Date (-1876)

typedef gco__Date_USCOREType _gco__Date;
#endif

/* eml2_2ForGsoap.h:45503 */
#ifndef SOAP_TYPE__gco__DateTime
#define SOAP_TYPE__gco__DateTime (-1877)

typedef xsd__dateTime _gco__DateTime;
#endif

/* eml2_2ForGsoap.h:45514 */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__nilReason
#define SOAP_TYPE_gsoap_eml2_2__gco__nilReason (-1878)

typedef gml__NilReasonType _gco__nilReason;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_gsoap_eml2_2_byte
#define SOAP_TYPE_gsoap_eml2_2_byte (-3)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_2_int
#define SOAP_TYPE_gsoap_eml2_2_int (-1)

#endif

/* long has binding name 'long' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_2_long
#define SOAP_TYPE_gsoap_eml2_2_long (-10)

#endif

/* eml22__PositiveLong has binding name 'eml22__PositiveLong' for type 'eml22:PositiveLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PositiveLong
#define SOAP_TYPE_gsoap_eml2_2_eml22__PositiveLong (-1003)

#endif

/* eml22__NonNegativeLong has binding name 'eml22__NonNegativeLong' for type 'eml22:NonNegativeLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeLong
#define SOAP_TYPE_gsoap_eml2_2_eml22__NonNegativeLong (-1002)

#endif

/* xsd__integer has binding name 'xsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__integer
#define SOAP_TYPE_gsoap_eml2_2_xsd__integer (-12)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_2_LONG64
#define SOAP_TYPE_gsoap_eml2_2_LONG64 (-11)

#endif

/* _gco__Real has binding name '_gco__Real' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Real
#define SOAP_TYPE_gsoap_eml2_2__gco__Real (-1875)

#endif

/* _gml__maximumValue has binding name '_gml__maximumValue' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__maximumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__maximumValue (-1823)

#endif

/* _gml__minimumValue has binding name '_gml__minimumValue' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__minimumValue
#define SOAP_TYPE_gsoap_eml2_2__gml__minimumValue (-1822)

#endif

/* eml22__AbstractMeasure has binding name 'eml22__AbstractMeasure' for type 'eml22:AbstractMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractMeasure (-1000)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_2_double
#define SOAP_TYPE_gsoap_eml2_2_double (-999)

#endif

/* _gco__Boolean has binding name '_gco__Boolean' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Boolean
#define SOAP_TYPE_gsoap_eml2_2__gco__Boolean (-1874)

#endif

/* enum _gml__RelatedTimeType_relativePosition has binding name '_gml__RelatedTimeType_relativePosition' for type 'gml:RelatedTimeType-relativePosition' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_2__gml__RelatedTimeType_relativePosition (-1567)

#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_2_bool
#define SOAP_TYPE_gsoap_eml2_2_bool (-1269)

#endif

/* enum eml22__ReferencePressureKind has binding name 'eml22__ReferencePressureKind' for type 'eml22:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressureKind (-1266)

#endif

/* enum eml22__WellStatus has binding name 'eml22__WellStatus' for type 'eml22:WellStatus' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellStatus (-1265)

#endif

/* enum eml22__WellboreDatumReference has binding name 'eml22__WellboreDatumReference' for type 'eml22:WellboreDatumReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__WellboreDatumReference (-1264)

#endif

/* enum eml22__ReferenceCondition has binding name 'eml22__ReferenceCondition' for type 'eml22:ReferenceCondition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceCondition (-1263)

#endif

/* enum eml22__QuantityClassKind has binding name 'eml22__QuantityClassKind' for type 'eml22:QuantityClassKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKind (-1262)

#endif

/* enum eml22__MeasureClass has binding name 'eml22__MeasureClass' for type 'eml22:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass
#define SOAP_TYPE_gsoap_eml2_2_eml22__MeasureClass (-1261)

#endif

/* enum eml22__MatrixCementKind has binding name 'eml22__MatrixCementKind' for type 'eml22:MatrixCementKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__MatrixCementKind (-1260)

#endif

/* enum eml22__LithostratigraphicRank has binding name 'eml22__LithostratigraphicRank' for type 'eml22:LithostratigraphicRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithostratigraphicRank (-1259)

#endif

/* enum eml22__LithologyQualifierKind has binding name 'eml22__LithologyQualifierKind' for type 'eml22:LithologyQualifierKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKind (-1258)

#endif

/* enum eml22__LithologyKind has binding name 'eml22__LithologyKind' for type 'eml22:LithologyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKind (-1257)

#endif

/* enum eml22__GeochronologicalRank has binding name 'eml22__GeochronologicalRank' for type 'eml22:GeochronologicalRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeochronologicalRank (-1256)

#endif

/* enum eml22__ExistenceKind has binding name 'eml22__ExistenceKind' for type 'eml22:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExistenceKind (-1255)

#endif

/* enum resqml2__StreamlineFlux has binding name 'resqml2__StreamlineFlux' for type 'resqml2:StreamlineFlux' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineFlux
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineFlux (-1254)

#endif

/* enum resqml2__TimeSetKind has binding name 'resqml2__TimeSetKind' for type 'resqml2:TimeSetKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TimeSetKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TimeSetKind (-1253)

#endif

/* enum resqml2__ResqmlPropertyKind has binding name 'resqml2__ResqmlPropertyKind' for type 'resqml2:ResqmlPropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ResqmlPropertyKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ResqmlPropertyKind (-1252)

#endif

/* enum resqml2__FacetKind has binding name 'resqml2__FacetKind' for type 'resqml2:FacetKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FacetKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FacetKind (-1251)

#endif

/* enum resqml2__Facet has binding name 'resqml2__Facet' for type 'resqml2:Facet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Facet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Facet (-1250)

#endif

/* enum resqml2__IndexableElement has binding name 'resqml2__IndexableElement' for type 'resqml2:IndexableElement' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IndexableElement
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IndexableElement (-1249)

#endif

/* enum resqml2__IdentityKind has binding name 'resqml2__IdentityKind' for type 'resqml2:IdentityKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IdentityKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IdentityKind (-1248)

#endif

/* enum resqml2__UnstructuredColumnLayerIndexableElements has binding name 'resqml2__UnstructuredColumnLayerIndexableElements' for type 'resqml2:UnstructuredColumnLayerIndexableElements' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerIndexableElements (-1247)

#endif

/* enum resqml2__UnstructuredCellIndexableElements has binding name 'resqml2__UnstructuredCellIndexableElements' for type 'resqml2:UnstructuredCellIndexableElements' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredCellIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredCellIndexableElements (-1246)

#endif

/* enum resqml2__SubnodeNodeObject has binding name 'resqml2__SubnodeNodeObject' for type 'resqml2:SubnodeNodeObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeNodeObject
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeNodeObject (-1245)

#endif

/* enum resqml2__PillarShape has binding name 'resqml2__PillarShape' for type 'resqml2:PillarShape' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PillarShape
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PillarShape (-1244)

#endif

/* enum resqml2__KDirection has binding name 'resqml2__KDirection' for type 'resqml2:KDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__KDirection
#define SOAP_TYPE_gsoap_eml2_2_resqml2__KDirection (-1243)

#endif

/* enum resqml2__IjkIndexableElements has binding name 'resqml2__IjkIndexableElements' for type 'resqml2:IjkIndexableElements' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkIndexableElements (-1242)

#endif

/* enum resqml2__GridGeometryAttachment has binding name 'resqml2__GridGeometryAttachment' for type 'resqml2:GridGeometryAttachment' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GridGeometryAttachment
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GridGeometryAttachment (-1241)

#endif

/* enum resqml2__ColumnShape has binding name 'resqml2__ColumnShape' for type 'resqml2:ColumnShape' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnShape
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnShape (-1240)

#endif

/* enum resqml2__CellShape has binding name 'resqml2__CellShape' for type 'resqml2:CellShape' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellShape
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellShape (-1239)

#endif

/* enum resqml2__SurfaceRole has binding name 'resqml2__SurfaceRole' for type 'resqml2:SurfaceRole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SurfaceRole
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SurfaceRole (-1238)

#endif

/* enum resqml2__LineRole has binding name 'resqml2__LineRole' for type 'resqml2:LineRole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LineRole
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LineRole (-1237)

#endif

/* enum resqml2__GeologicBoundaryKind has binding name 'resqml2__GeologicBoundaryKind' for type 'resqml2:GeologicBoundaryKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicBoundaryKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicBoundaryKind (-1236)

#endif

/* enum resqml2__WellboreFrameIndexableElements has binding name 'resqml2__WellboreFrameIndexableElements' for type 'resqml2:WellboreFrameIndexableElements' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameIndexableElements
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameIndexableElements (-1235)

#endif

/* enum resqml2__MdDomain has binding name 'resqml2__MdDomain' for type 'resqml2:MdDomain' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MdDomain
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MdDomain (-1234)

#endif

/* enum resqml2__ThrowKind has binding name 'resqml2__ThrowKind' for type 'resqml2:ThrowKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKind (-1233)

#endif

/* enum resqml2__StratigraphicUnitKind has binding name 'resqml2__StratigraphicUnitKind' for type 'resqml2:StratigraphicUnitKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitKind (-1232)

#endif

/* enum resqml2__Shape3d has binding name 'resqml2__Shape3d' for type 'resqml2:Shape3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3d (-1231)

#endif

/* enum resqml2__SequenceStratigraphySurface has binding name 'resqml2__SequenceStratigraphySurface' for type 'resqml2:SequenceStratigraphySurface' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SequenceStratigraphySurface
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SequenceStratigraphySurface (-1230)

#endif

/* enum resqml2__OrderingCriteria has binding name 'resqml2__OrderingCriteria' for type 'resqml2:OrderingCriteria' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__OrderingCriteria
#define SOAP_TYPE_gsoap_eml2_2_resqml2__OrderingCriteria (-1229)

#endif

/* enum resqml2__HorizonStratigraphicRole has binding name 'resqml2__HorizonStratigraphicRole' for type 'resqml2:HorizonStratigraphicRole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonStratigraphicRole
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonStratigraphicRole (-1228)

#endif

/* enum resqml2__GeologicUnitMaterialEmplacement has binding name 'resqml2__GeologicUnitMaterialEmplacement' for type 'resqml2:GeologicUnitMaterialEmplacement' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitMaterialEmplacement
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitMaterialEmplacement (-1227)

#endif

/* enum resqml2__Domain has binding name 'resqml2__Domain' for type 'resqml2:Domain' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Domain
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Domain (-1226)

#endif

/* enum resqml2__DepositionMode has binding name 'resqml2__DepositionMode' for type 'resqml2:DepositionMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DepositionMode
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DepositionMode (-1225)

#endif

/* enum resqml2__ContactVerb has binding name 'resqml2__ContactVerb' for type 'resqml2:ContactVerb' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactVerb
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactVerb (-1224)

#endif

/* enum resqml2__ContactSide has binding name 'resqml2__ContactSide' for type 'resqml2:ContactSide' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactSide
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactSide (-1223)

#endif

/* enum resqml2__ContactMode has binding name 'resqml2__ContactMode' for type 'resqml2:ContactMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactMode
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactMode (-1222)

#endif

/* enum resqml2__BoundaryRelation has binding name 'resqml2__BoundaryRelation' for type 'resqml2:BoundaryRelation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryRelation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryRelation (-1221)

#endif

/* enum resqml2__Phase has binding name 'resqml2__Phase' for type 'resqml2:Phase' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Phase
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Phase (-1220)

#endif

/* enum resqml2__FluidMarker has binding name 'resqml2__FluidMarker' for type 'resqml2:FluidMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FluidMarker
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FluidMarker (-1219)

#endif

/* enum resqml2__FluidContact has binding name 'resqml2__FluidContact' for type 'resqml2:FluidContact' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FluidContact
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FluidContact (-1218)

#endif

/* enum resqml2__ViewerKind has binding name 'resqml2__ViewerKind' for type 'resqml2:ViewerKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKind
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKind (-1217)

#endif

/* enum resqml2__NodeSymbol has binding name 'resqml2__NodeSymbol' for type 'resqml2:NodeSymbol' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbol
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbol (-1216)

#endif

/* enum resqml2__InterpolationMethod has binding name 'resqml2__InterpolationMethod' for type 'resqml2:InterpolationMethod' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationMethod
#define SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationMethod (-1215)

#endif

/* enum resqml2__InterpolationDomain has binding name 'resqml2__InterpolationDomain' for type 'resqml2:InterpolationDomain' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationDomain
#define SOAP_TYPE_gsoap_eml2_2_resqml2__InterpolationDomain (-1214)

#endif

/* enum resqml2__EdgePattern has binding name 'resqml2__EdgePattern' for type 'resqml2:EdgePattern' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePattern
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePattern (-1213)

#endif

/* enum resqml2__DisplaySpace has binding name 'resqml2__DisplaySpace' for type 'resqml2:DisplaySpace' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DisplaySpace
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DisplaySpace (-1212)

#endif

/* enum eml22__VolumeUom has binding name 'eml22__VolumeUom' for type 'eml22:VolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUom (-1211)

#endif

/* enum eml22__VolumetricThermalExpansionUom has binding name 'eml22__VolumetricThermalExpansionUom' for type 'eml22:VolumetricThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUom (-1210)

#endif

/* enum eml22__VolumetricHeatTransferCoefficientUom has binding name 'eml22__VolumetricHeatTransferCoefficientUom' for type 'eml22:VolumetricHeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUom (-1209)

#endif

/* enum eml22__VolumePerVolumeUom has binding name 'eml22__VolumePerVolumeUom' for type 'eml22:VolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUom (-1208)

#endif

/* enum eml22__VolumePerTimeUom has binding name 'eml22__VolumePerTimeUom' for type 'eml22:VolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUom (-1207)

#endif

/* enum eml22__VolumePerTimePerVolumeUom has binding name 'eml22__VolumePerTimePerVolumeUom' for type 'eml22:VolumePerTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUom (-1206)

#endif

/* enum eml22__VolumePerTimePerTimeUom has binding name 'eml22__VolumePerTimePerTimeUom' for type 'eml22:VolumePerTimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUom (-1205)

#endif

/* enum eml22__VolumePerTimePerPressureUom has binding name 'eml22__VolumePerTimePerPressureUom' for type 'eml22:VolumePerTimePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUom (-1204)

#endif

/* enum eml22__VolumePerTimePerPressureLengthUom has binding name 'eml22__VolumePerTimePerPressureLengthUom' for type 'eml22:VolumePerTimePerPressureLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUom (-1203)

#endif

/* enum eml22__VolumePerTimePerLengthUom has binding name 'eml22__VolumePerTimePerLengthUom' for type 'eml22:VolumePerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUom (-1202)

#endif

/* enum eml22__VolumePerTimePerAreaUom has binding name 'eml22__VolumePerTimePerAreaUom' for type 'eml22:VolumePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUom (-1201)

#endif

/* enum eml22__VolumePerTimeLengthUom has binding name 'eml22__VolumePerTimeLengthUom' for type 'eml22:VolumePerTimeLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUom (-1200)

#endif

/* enum eml22__VolumePerRotationUom has binding name 'eml22__VolumePerRotationUom' for type 'eml22:VolumePerRotationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUom (-1199)

#endif

/* enum eml22__VolumePerPressureUom has binding name 'eml22__VolumePerPressureUom' for type 'eml22:VolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUom (-1198)

#endif

/* enum eml22__VolumePerMassUom has binding name 'eml22__VolumePerMassUom' for type 'eml22:VolumePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUom (-1197)

#endif

/* enum eml22__VolumePerLengthUom has binding name 'eml22__VolumePerLengthUom' for type 'eml22:VolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUom (-1196)

#endif

/* enum eml22__VolumePerAreaUom has binding name 'eml22__VolumePerAreaUom' for type 'eml22:VolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUom (-1195)

#endif

/* enum eml22__VolumeFlowRatePerVolumeFlowRateUom has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateUom' for type 'eml22:VolumeFlowRatePerVolumeFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUom (-1194)

#endif

/* enum eml22__VerticalCoordinateUom has binding name 'eml22__VerticalCoordinateUom' for type 'eml22:VerticalCoordinateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUom (-1193)

#endif

/* enum eml22__TimeUom has binding name 'eml22__TimeUom' for type 'eml22:TimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUom (-1192)

#endif

/* enum eml22__TimePerVolumeUom has binding name 'eml22__TimePerVolumeUom' for type 'eml22:TimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUom (-1191)

#endif

/* enum eml22__TimePerTimeUom has binding name 'eml22__TimePerTimeUom' for type 'eml22:TimePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUom (-1190)

#endif

/* enum eml22__TimePerMassUom has binding name 'eml22__TimePerMassUom' for type 'eml22:TimePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUom (-1189)

#endif

/* enum eml22__TimePerLengthUom has binding name 'eml22__TimePerLengthUom' for type 'eml22:TimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUom (-1188)

#endif

/* enum eml22__ThermodynamicTemperatureUom has binding name 'eml22__ThermodynamicTemperatureUom' for type 'eml22:ThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUom (-1187)

#endif

/* enum eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUom (-1186)

#endif

/* enum eml22__ThermalResistanceUom has binding name 'eml22__ThermalResistanceUom' for type 'eml22:ThermalResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUom (-1185)

#endif

/* enum eml22__ThermalInsulanceUom has binding name 'eml22__ThermalInsulanceUom' for type 'eml22:ThermalInsulanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUom (-1184)

#endif

/* enum eml22__ThermalDiffusivityUom has binding name 'eml22__ThermalDiffusivityUom' for type 'eml22:ThermalDiffusivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUom (-1183)

#endif

/* enum eml22__ThermalConductivityUom has binding name 'eml22__ThermalConductivityUom' for type 'eml22:ThermalConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUom (-1182)

#endif

/* enum eml22__ThermalConductanceUom has binding name 'eml22__ThermalConductanceUom' for type 'eml22:ThermalConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUom (-1181)

#endif

/* enum eml22__TemperatureIntervalUom has binding name 'eml22__TemperatureIntervalUom' for type 'eml22:TemperatureIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUom (-1180)

#endif

/* enum eml22__TemperatureIntervalPerTimeUom has binding name 'eml22__TemperatureIntervalPerTimeUom' for type 'eml22:TemperatureIntervalPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUom (-1179)

#endif

/* enum eml22__TemperatureIntervalPerPressureUom has binding name 'eml22__TemperatureIntervalPerPressureUom' for type 'eml22:TemperatureIntervalPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUom (-1178)

#endif

/* enum eml22__TemperatureIntervalPerLengthUom has binding name 'eml22__TemperatureIntervalPerLengthUom' for type 'eml22:TemperatureIntervalPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUom (-1177)

#endif

/* enum eml22__SpecificHeatCapacityUom has binding name 'eml22__SpecificHeatCapacityUom' for type 'eml22:SpecificHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUom (-1176)

#endif

/* enum eml22__SolidAngleUom has binding name 'eml22__SolidAngleUom' for type 'eml22:SolidAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUom (-1175)

#endif

/* enum eml22__SignalingEventPerTimeUom has binding name 'eml22__SignalingEventPerTimeUom' for type 'eml22:SignalingEventPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUom (-1174)

#endif

/* enum eml22__SecondMomentOfAreaUom has binding name 'eml22__SecondMomentOfAreaUom' for type 'eml22:SecondMomentOfAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUom (-1173)

#endif

/* enum eml22__ReluctanceUom has binding name 'eml22__ReluctanceUom' for type 'eml22:ReluctanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUom (-1172)

#endif

/* enum eml22__ReciprocalVolumeUom has binding name 'eml22__ReciprocalVolumeUom' for type 'eml22:ReciprocalVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUom (-1171)

#endif

/* enum eml22__ReciprocalTimeUom has binding name 'eml22__ReciprocalTimeUom' for type 'eml22:ReciprocalTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUom (-1170)

#endif

/* enum eml22__ReciprocalPressureUom has binding name 'eml22__ReciprocalPressureUom' for type 'eml22:ReciprocalPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUom (-1169)

#endif

/* enum eml22__ReciprocalMassUom has binding name 'eml22__ReciprocalMassUom' for type 'eml22:ReciprocalMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUom (-1168)

#endif

/* enum eml22__ReciprocalMassTimeUom has binding name 'eml22__ReciprocalMassTimeUom' for type 'eml22:ReciprocalMassTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUom (-1167)

#endif

/* enum eml22__ReciprocalLengthUom has binding name 'eml22__ReciprocalLengthUom' for type 'eml22:ReciprocalLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUom (-1166)

#endif

/* enum eml22__ReciprocalForceUom has binding name 'eml22__ReciprocalForceUom' for type 'eml22:ReciprocalForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUom (-1165)

#endif

/* enum eml22__ReciprocalElectricPotentialDifferenceUom has binding name 'eml22__ReciprocalElectricPotentialDifferenceUom' for type 'eml22:ReciprocalElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUom (-1164)

#endif

/* enum eml22__ReciprocalAreaUom has binding name 'eml22__ReciprocalAreaUom' for type 'eml22:ReciprocalAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUom (-1163)

#endif

/* enum eml22__RadiantIntensityUom has binding name 'eml22__RadiantIntensityUom' for type 'eml22:RadiantIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUom (-1162)

#endif

/* enum eml22__RadianceUom has binding name 'eml22__RadianceUom' for type 'eml22:RadianceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUom (-1161)

#endif

/* enum eml22__QuantityOfLightUom has binding name 'eml22__QuantityOfLightUom' for type 'eml22:QuantityOfLightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUom (-1160)

#endif

/* enum eml22__PressureUom has binding name 'eml22__PressureUom' for type 'eml22:PressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUom (-1159)

#endif

/* enum eml22__PressureTimePerVolumeUom has binding name 'eml22__PressureTimePerVolumeUom' for type 'eml22:PressureTimePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUom (-1158)

#endif

/* enum eml22__PressureSquaredUom has binding name 'eml22__PressureSquaredUom' for type 'eml22:PressureSquaredUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUom (-1157)

#endif

/* enum eml22__PressureSquaredPerForceTimePerAreaUom has binding name 'eml22__PressureSquaredPerForceTimePerAreaUom' for type 'eml22:PressureSquaredPerForceTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUom (-1156)

#endif

/* enum eml22__PressurePerVolumeUom has binding name 'eml22__PressurePerVolumeUom' for type 'eml22:PressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUom (-1155)

#endif

/* enum eml22__PressurePerTimeUom has binding name 'eml22__PressurePerTimeUom' for type 'eml22:PressurePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUom (-1154)

#endif

/* enum eml22__PressurePerPressureUom has binding name 'eml22__PressurePerPressureUom' for type 'eml22:PressurePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUom (-1153)

#endif

/* enum eml22__PowerUom has binding name 'eml22__PowerUom' for type 'eml22:PowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUom (-1152)

#endif

/* enum eml22__PowerPerVolumeUom has binding name 'eml22__PowerPerVolumeUom' for type 'eml22:PowerPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUom (-1151)

#endif

/* enum eml22__PowerPerPowerUom has binding name 'eml22__PowerPerPowerUom' for type 'eml22:PowerPerPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUom (-1150)

#endif

/* enum eml22__PowerPerAreaUom has binding name 'eml22__PowerPerAreaUom' for type 'eml22:PowerPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUom (-1149)

#endif

/* enum eml22__PotentialDifferencePerPowerDropUom has binding name 'eml22__PotentialDifferencePerPowerDropUom' for type 'eml22:PotentialDifferencePerPowerDropUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUom (-1148)

#endif

/* enum eml22__PlaneAngleUom has binding name 'eml22__PlaneAngleUom' for type 'eml22:PlaneAngleUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUom (-1147)

#endif

/* enum eml22__PermittivityUom has binding name 'eml22__PermittivityUom' for type 'eml22:PermittivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUom (-1146)

#endif

/* enum eml22__PermeabilityRockUom has binding name 'eml22__PermeabilityRockUom' for type 'eml22:PermeabilityRockUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUom (-1145)

#endif

/* enum eml22__PermeabilityLengthUom has binding name 'eml22__PermeabilityLengthUom' for type 'eml22:PermeabilityLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUom (-1144)

#endif

/* enum eml22__NormalizedPowerUom has binding name 'eml22__NormalizedPowerUom' for type 'eml22:NormalizedPowerUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUom (-1143)

#endif

/* enum eml22__MomentumUom has binding name 'eml22__MomentumUom' for type 'eml22:MomentumUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUom (-1142)

#endif

/* enum eml22__MomentOfInertiaUom has binding name 'eml22__MomentOfInertiaUom' for type 'eml22:MomentOfInertiaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUom (-1141)

#endif

/* enum eml22__MomentOfForceUom has binding name 'eml22__MomentOfForceUom' for type 'eml22:MomentOfForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUom (-1140)

#endif

/* enum eml22__MolecularWeightUom has binding name 'eml22__MolecularWeightUom' for type 'eml22:MolecularWeightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUom (-1139)

#endif

/* enum eml22__MolarVolumeUom has binding name 'eml22__MolarVolumeUom' for type 'eml22:MolarVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUom (-1138)

#endif

/* enum eml22__MolarHeatCapacityUom has binding name 'eml22__MolarHeatCapacityUom' for type 'eml22:MolarHeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUom (-1137)

#endif

/* enum eml22__MolarEnergyUom has binding name 'eml22__MolarEnergyUom' for type 'eml22:MolarEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUom (-1136)

#endif

/* enum eml22__MobilityUom has binding name 'eml22__MobilityUom' for type 'eml22:MobilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUom (-1135)

#endif

/* enum eml22__MassUom has binding name 'eml22__MassUom' for type 'eml22:MassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUom (-1134)

#endif

/* enum eml22__MassPerVolumeUom has binding name 'eml22__MassPerVolumeUom' for type 'eml22:MassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUom (-1133)

#endif

/* enum eml22__MassPerVolumePerTemperatureUom has binding name 'eml22__MassPerVolumePerTemperatureUom' for type 'eml22:MassPerVolumePerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUom (-1132)

#endif

/* enum eml22__MassPerVolumePerPressureUom has binding name 'eml22__MassPerVolumePerPressureUom' for type 'eml22:MassPerVolumePerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUom (-1131)

#endif

/* enum eml22__MassPerVolumePerLengthUom has binding name 'eml22__MassPerVolumePerLengthUom' for type 'eml22:MassPerVolumePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUom (-1130)

#endif

/* enum eml22__MassPerTimeUom has binding name 'eml22__MassPerTimeUom' for type 'eml22:MassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUom (-1129)

#endif

/* enum eml22__MassPerTimePerLengthUom has binding name 'eml22__MassPerTimePerLengthUom' for type 'eml22:MassPerTimePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUom (-1128)

#endif

/* enum eml22__MassPerTimePerAreaUom has binding name 'eml22__MassPerTimePerAreaUom' for type 'eml22:MassPerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUom (-1127)

#endif

/* enum eml22__MassPerMassUom has binding name 'eml22__MassPerMassUom' for type 'eml22:MassPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUom (-1126)

#endif

/* enum eml22__MassPerLengthUom has binding name 'eml22__MassPerLengthUom' for type 'eml22:MassPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUom (-1125)

#endif

/* enum eml22__MassPerEnergyUom has binding name 'eml22__MassPerEnergyUom' for type 'eml22:MassPerEnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUom (-1124)

#endif

/* enum eml22__MassPerAreaUom has binding name 'eml22__MassPerAreaUom' for type 'eml22:MassPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUom (-1123)

#endif

/* enum eml22__MassLengthUom has binding name 'eml22__MassLengthUom' for type 'eml22:MassLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUom (-1122)

#endif

/* enum eml22__MagneticVectorPotentialUom has binding name 'eml22__MagneticVectorPotentialUom' for type 'eml22:MagneticVectorPotentialUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUom (-1121)

#endif

/* enum eml22__MagneticPermeabilityUom has binding name 'eml22__MagneticPermeabilityUom' for type 'eml22:MagneticPermeabilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUom (-1120)

#endif

/* enum eml22__MagneticFluxUom has binding name 'eml22__MagneticFluxUom' for type 'eml22:MagneticFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUom (-1119)

#endif

/* enum eml22__MagneticFluxDensityUom has binding name 'eml22__MagneticFluxDensityUom' for type 'eml22:MagneticFluxDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUom (-1118)

#endif

/* enum eml22__MagneticFluxDensityPerLengthUom has binding name 'eml22__MagneticFluxDensityPerLengthUom' for type 'eml22:MagneticFluxDensityPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUom (-1117)

#endif

/* enum eml22__MagneticFieldStrengthUom has binding name 'eml22__MagneticFieldStrengthUom' for type 'eml22:MagneticFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUom (-1116)

#endif

/* enum eml22__MagneticDipoleMomentUom has binding name 'eml22__MagneticDipoleMomentUom' for type 'eml22:MagneticDipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUom (-1115)

#endif

/* enum eml22__LuminousIntensityUom has binding name 'eml22__LuminousIntensityUom' for type 'eml22:LuminousIntensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUom (-1114)

#endif

/* enum eml22__LuminousFluxUom has binding name 'eml22__LuminousFluxUom' for type 'eml22:LuminousFluxUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUom (-1113)

#endif

/* enum eml22__LuminousEfficacyUom has binding name 'eml22__LuminousEfficacyUom' for type 'eml22:LuminousEfficacyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUom (-1112)

#endif

/* enum eml22__LuminanceUom has binding name 'eml22__LuminanceUom' for type 'eml22:LuminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUom (-1111)

#endif

/* enum eml22__LogarithmicPowerRatioUom has binding name 'eml22__LogarithmicPowerRatioUom' for type 'eml22:LogarithmicPowerRatioUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUom (-1110)

#endif

/* enum eml22__LogarithmicPowerRatioPerLengthUom has binding name 'eml22__LogarithmicPowerRatioPerLengthUom' for type 'eml22:LogarithmicPowerRatioPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUom (-1109)

#endif

/* enum eml22__LinearThermalExpansionUom has binding name 'eml22__LinearThermalExpansionUom' for type 'eml22:LinearThermalExpansionUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUom (-1108)

#endif

/* enum eml22__LinearAccelerationUom has binding name 'eml22__LinearAccelerationUom' for type 'eml22:LinearAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUom (-1107)

#endif

/* enum eml22__LightExposureUom has binding name 'eml22__LightExposureUom' for type 'eml22:LightExposureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUom (-1106)

#endif

/* enum eml22__LengthUom has binding name 'eml22__LengthUom' for type 'eml22:LengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUom (-1105)

#endif

/* enum eml22__LengthPerVolumeUom has binding name 'eml22__LengthPerVolumeUom' for type 'eml22:LengthPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUom (-1104)

#endif

/* enum eml22__LengthPerTimeUom has binding name 'eml22__LengthPerTimeUom' for type 'eml22:LengthPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUom (-1103)

#endif

/* enum eml22__LengthPerTemperatureUom has binding name 'eml22__LengthPerTemperatureUom' for type 'eml22:LengthPerTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUom (-1102)

#endif

/* enum eml22__LengthPerPressureUom has binding name 'eml22__LengthPerPressureUom' for type 'eml22:LengthPerPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUom (-1101)

#endif

/* enum eml22__LengthPerMassUom has binding name 'eml22__LengthPerMassUom' for type 'eml22:LengthPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUom (-1100)

#endif

/* enum eml22__LengthPerLengthUom has binding name 'eml22__LengthPerLengthUom' for type 'eml22:LengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUom (-1099)

#endif

/* enum eml22__KinematicViscosityUom has binding name 'eml22__KinematicViscosityUom' for type 'eml22:KinematicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUom (-1098)

#endif

/* enum eml22__IsothermalCompressibilityUom has binding name 'eml22__IsothermalCompressibilityUom' for type 'eml22:IsothermalCompressibilityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUom (-1097)

#endif

/* enum eml22__InductanceUom has binding name 'eml22__InductanceUom' for type 'eml22:InductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUom (-1096)

#endif

/* enum eml22__IlluminanceUom has binding name 'eml22__IlluminanceUom' for type 'eml22:IlluminanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUom (-1095)

#endif

/* enum eml22__HeatTransferCoefficientUom has binding name 'eml22__HeatTransferCoefficientUom' for type 'eml22:HeatTransferCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUom (-1094)

#endif

/* enum eml22__HeatFlowRateUom has binding name 'eml22__HeatFlowRateUom' for type 'eml22:HeatFlowRateUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUom (-1093)

#endif

/* enum eml22__HeatCapacityUom has binding name 'eml22__HeatCapacityUom' for type 'eml22:HeatCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUom (-1092)

#endif

/* enum eml22__FrequencyUom has binding name 'eml22__FrequencyUom' for type 'eml22:FrequencyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUom (-1091)

#endif

/* enum eml22__FrequencyIntervalUom has binding name 'eml22__FrequencyIntervalUom' for type 'eml22:FrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUom (-1090)

#endif

/* enum eml22__ForceUom has binding name 'eml22__ForceUom' for type 'eml22:ForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUom (-1089)

#endif

/* enum eml22__ForcePerVolumeUom has binding name 'eml22__ForcePerVolumeUom' for type 'eml22:ForcePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUom (-1088)

#endif

/* enum eml22__ForcePerLengthUom has binding name 'eml22__ForcePerLengthUom' for type 'eml22:ForcePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUom (-1087)

#endif

/* enum eml22__ForcePerForceUom has binding name 'eml22__ForcePerForceUom' for type 'eml22:ForcePerForceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUom (-1086)

#endif

/* enum eml22__ForceLengthPerLengthUom has binding name 'eml22__ForceLengthPerLengthUom' for type 'eml22:ForceLengthPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUom (-1085)

#endif

/* enum eml22__ForceAreaUom has binding name 'eml22__ForceAreaUom' for type 'eml22:ForceAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUom (-1084)

#endif

/* enum eml22__EnergyUom has binding name 'eml22__EnergyUom' for type 'eml22:EnergyUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUom (-1083)

#endif

/* enum eml22__EnergyPerVolumeUom has binding name 'eml22__EnergyPerVolumeUom' for type 'eml22:EnergyPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUom (-1082)

#endif

/* enum eml22__EnergyPerMassUom has binding name 'eml22__EnergyPerMassUom' for type 'eml22:EnergyPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUom (-1081)

#endif

/* enum eml22__EnergyPerMassPerTimeUom has binding name 'eml22__EnergyPerMassPerTimeUom' for type 'eml22:EnergyPerMassPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUom (-1080)

#endif

/* enum eml22__EnergyPerLengthUom has binding name 'eml22__EnergyPerLengthUom' for type 'eml22:EnergyPerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUom (-1079)

#endif

/* enum eml22__EnergyPerAreaUom has binding name 'eml22__EnergyPerAreaUom' for type 'eml22:EnergyPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUom (-1078)

#endif

/* enum eml22__EnergyLengthPerTimeAreaTemperatureUom has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureUom' for type 'eml22:EnergyLengthPerTimeAreaTemperatureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUom (-1077)

#endif

/* enum eml22__EnergyLengthPerAreaUom has binding name 'eml22__EnergyLengthPerAreaUom' for type 'eml22:EnergyLengthPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUom (-1076)

#endif

/* enum eml22__ElectromagneticMomentUom has binding name 'eml22__ElectromagneticMomentUom' for type 'eml22:ElectromagneticMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUom (-1075)

#endif

/* enum eml22__ElectricResistanceUom has binding name 'eml22__ElectricResistanceUom' for type 'eml22:ElectricResistanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUom (-1074)

#endif

/* enum eml22__ElectricResistancePerLengthUom has binding name 'eml22__ElectricResistancePerLengthUom' for type 'eml22:ElectricResistancePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUom (-1073)

#endif

/* enum eml22__ElectricPotentialDifferenceUom has binding name 'eml22__ElectricPotentialDifferenceUom' for type 'eml22:ElectricPotentialDifferenceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUom (-1072)

#endif

/* enum eml22__ElectricFieldStrengthUom has binding name 'eml22__ElectricFieldStrengthUom' for type 'eml22:ElectricFieldStrengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUom (-1071)

#endif

/* enum eml22__ElectricCurrentUom has binding name 'eml22__ElectricCurrentUom' for type 'eml22:ElectricCurrentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUom (-1070)

#endif

/* enum eml22__ElectricCurrentDensityUom has binding name 'eml22__ElectricCurrentDensityUom' for type 'eml22:ElectricCurrentDensityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUom (-1069)

#endif

/* enum eml22__ElectricConductivityUom has binding name 'eml22__ElectricConductivityUom' for type 'eml22:ElectricConductivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUom (-1068)

#endif

/* enum eml22__ElectricConductanceUom has binding name 'eml22__ElectricConductanceUom' for type 'eml22:ElectricConductanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUom (-1067)

#endif

/* enum eml22__ElectricChargeUom has binding name 'eml22__ElectricChargeUom' for type 'eml22:ElectricChargeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUom (-1066)

#endif

/* enum eml22__ElectricChargePerVolumeUom has binding name 'eml22__ElectricChargePerVolumeUom' for type 'eml22:ElectricChargePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUom (-1065)

#endif

/* enum eml22__ElectricChargePerMassUom has binding name 'eml22__ElectricChargePerMassUom' for type 'eml22:ElectricChargePerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUom (-1064)

#endif

/* enum eml22__ElectricChargePerAreaUom has binding name 'eml22__ElectricChargePerAreaUom' for type 'eml22:ElectricChargePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUom (-1063)

#endif

/* enum eml22__ElectricalResistivityUom has binding name 'eml22__ElectricalResistivityUom' for type 'eml22:ElectricalResistivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUom (-1062)

#endif

/* enum eml22__DynamicViscosityUom has binding name 'eml22__DynamicViscosityUom' for type 'eml22:DynamicViscosityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUom (-1061)

#endif

/* enum eml22__DoseEquivalentUom has binding name 'eml22__DoseEquivalentUom' for type 'eml22:DoseEquivalentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUom (-1060)

#endif

/* enum eml22__DipoleMomentUom has binding name 'eml22__DipoleMomentUom' for type 'eml22:DipoleMomentUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUom (-1059)

#endif

/* enum eml22__DimensionlessUom has binding name 'eml22__DimensionlessUom' for type 'eml22:DimensionlessUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUom (-1058)

#endif

/* enum eml22__DigitalStorageUom has binding name 'eml22__DigitalStorageUom' for type 'eml22:DigitalStorageUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUom (-1057)

#endif

/* enum eml22__DiffusiveTimeOfFlightUom has binding name 'eml22__DiffusiveTimeOfFlightUom' for type 'eml22:DiffusiveTimeOfFlightUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUom (-1056)

#endif

/* enum eml22__DiffusionCoefficientUom has binding name 'eml22__DiffusionCoefficientUom' for type 'eml22:DiffusionCoefficientUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUom (-1055)

#endif

/* enum eml22__DataTransferSpeedUom has binding name 'eml22__DataTransferSpeedUom' for type 'eml22:DataTransferSpeedUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUom (-1054)

#endif

/* enum eml22__CationExchangeCapacityUom has binding name 'eml22__CationExchangeCapacityUom' for type 'eml22:CationExchangeCapacityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUom (-1053)

#endif

/* enum eml22__CapacitanceUom has binding name 'eml22__CapacitanceUom' for type 'eml22:CapacitanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUom (-1052)

#endif

/* enum eml22__AttenuationPerFrequencyIntervalUom has binding name 'eml22__AttenuationPerFrequencyIntervalUom' for type 'eml22:AttenuationPerFrequencyIntervalUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUom (-1051)

#endif

/* enum eml22__AreaUom has binding name 'eml22__AreaUom' for type 'eml22:AreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUom (-1050)

#endif

/* enum eml22__AreaPerVolumeUom has binding name 'eml22__AreaPerVolumeUom' for type 'eml22:AreaPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUom (-1049)

#endif

/* enum eml22__AreaPerTimeUom has binding name 'eml22__AreaPerTimeUom' for type 'eml22:AreaPerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUom (-1048)

#endif

/* enum eml22__AreaPerMassUom has binding name 'eml22__AreaPerMassUom' for type 'eml22:AreaPerMassUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUom (-1047)

#endif

/* enum eml22__AreaPerCountUom has binding name 'eml22__AreaPerCountUom' for type 'eml22:AreaPerCountUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUom (-1046)

#endif

/* enum eml22__AreaPerAreaUom has binding name 'eml22__AreaPerAreaUom' for type 'eml22:AreaPerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUom (-1045)

#endif

/* enum eml22__AreaPerAmountOfSubstanceUom has binding name 'eml22__AreaPerAmountOfSubstanceUom' for type 'eml22:AreaPerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUom (-1044)

#endif

/* enum eml22__APINeutronUom has binding name 'eml22__APINeutronUom' for type 'eml22:APINeutronUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUom (-1043)

#endif

/* enum eml22__APIGravityUom has binding name 'eml22__APIGravityUom' for type 'eml22:APIGravityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUom (-1042)

#endif

/* enum eml22__APIGammaRayUom has binding name 'eml22__APIGammaRayUom' for type 'eml22:APIGammaRayUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUom (-1041)

#endif

/* enum eml22__AngularVelocityUom has binding name 'eml22__AngularVelocityUom' for type 'eml22:AngularVelocityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUom (-1040)

#endif

/* enum eml22__AngularAccelerationUom has binding name 'eml22__AngularAccelerationUom' for type 'eml22:AngularAccelerationUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUom (-1039)

#endif

/* enum eml22__AnglePerVolumeUom has binding name 'eml22__AnglePerVolumeUom' for type 'eml22:AnglePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUom (-1038)

#endif

/* enum eml22__AnglePerLengthUom has binding name 'eml22__AnglePerLengthUom' for type 'eml22:AnglePerLengthUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUom (-1037)

#endif

/* enum eml22__AmountOfSubstanceUom has binding name 'eml22__AmountOfSubstanceUom' for type 'eml22:AmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUom (-1036)

#endif

/* enum eml22__AmountOfSubstancePerVolumeUom has binding name 'eml22__AmountOfSubstancePerVolumeUom' for type 'eml22:AmountOfSubstancePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUom (-1035)

#endif

/* enum eml22__AmountOfSubstancePerTimeUom has binding name 'eml22__AmountOfSubstancePerTimeUom' for type 'eml22:AmountOfSubstancePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUom (-1034)

#endif

/* enum eml22__AmountOfSubstancePerTimePerAreaUom has binding name 'eml22__AmountOfSubstancePerTimePerAreaUom' for type 'eml22:AmountOfSubstancePerTimePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUom (-1033)

#endif

/* enum eml22__AmountOfSubstancePerAreaUom has binding name 'eml22__AmountOfSubstancePerAreaUom' for type 'eml22:AmountOfSubstancePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUom (-1032)

#endif

/* enum eml22__AmountOfSubstancePerAmountOfSubstanceUom has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceUom' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUom (-1031)

#endif

/* enum eml22__ActivityOfRadioactivityUom has binding name 'eml22__ActivityOfRadioactivityUom' for type 'eml22:ActivityOfRadioactivityUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUom (-1030)

#endif

/* enum eml22__AbsorbedDoseUom has binding name 'eml22__AbsorbedDoseUom' for type 'eml22:AbsorbedDoseUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUom (-1029)

#endif

/* enum eml22__LegacyVolumeUom has binding name 'eml22__LegacyVolumeUom' for type 'eml22:LegacyVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumeUom (-1028)

#endif

/* enum eml22__LegacyVolumePerVolumeUom has binding name 'eml22__LegacyVolumePerVolumeUom' for type 'eml22:LegacyVolumePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerVolumeUom (-1027)

#endif

/* enum eml22__LegacyVolumePerTimeUom has binding name 'eml22__LegacyVolumePerTimeUom' for type 'eml22:LegacyVolumePerTimeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerTimeUom (-1026)

#endif

/* enum eml22__LegacyVolumePerAreaUom has binding name 'eml22__LegacyVolumePerAreaUom' for type 'eml22:LegacyVolumePerAreaUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyVolumePerAreaUom (-1025)

#endif

/* enum eml22__LegacyPressureUom has binding name 'eml22__LegacyPressureUom' for type 'eml22:LegacyPressureUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressureUom (-1024)

#endif

/* enum eml22__LegacyPressurePerVolumeUom has binding name 'eml22__LegacyPressurePerVolumeUom' for type 'eml22:LegacyPressurePerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyPressurePerVolumeUom (-1023)

#endif

/* enum eml22__LegacyMassPerVolumeUom has binding name 'eml22__LegacyMassPerVolumeUom' for type 'eml22:LegacyMassPerVolumeUom' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyMassPerVolumeUom (-1022)

#endif

/* enum eml22__UnitOfMeasure has binding name 'eml22__UnitOfMeasure' for type 'eml22:UnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasure (-1019)

#endif

/* enum eml22__LegacyUnitOfMeasure has binding name 'eml22__LegacyUnitOfMeasure' for type 'eml22:LegacyUnitOfMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LegacyUnitOfMeasure (-1018)

#endif

/* enum _xlink__actuate has binding name '_xlink__actuate' for type 'xlink:actuate' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__actuate
#define SOAP_TYPE_gsoap_eml2_2__xlink__actuate (-1011)

#endif

/* enum _xlink__show has binding name '_xlink__show' for type 'xlink:show' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__show
#define SOAP_TYPE_gsoap_eml2_2__xlink__show (-1010)

#endif

/* enum gml__AggregationType has binding name 'gml__AggregationType' for type 'gml:AggregationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AggregationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AggregationType (-1009)

#endif

/* enum eml22__VerticalDirection has binding name 'eml22__VerticalDirection' for type 'eml22:VerticalDirection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalDirection (-1006)

#endif

/* enum eml22__AxisOrder2d has binding name 'eml22__AxisOrder2d' for type 'eml22:AxisOrder2d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d
#define SOAP_TYPE_gsoap_eml2_2_eml22__AxisOrder2d (-1005)

#endif

/* enum eml22__ParameterKind has binding name 'eml22__ParameterKind' for type 'eml22:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ParameterKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__ParameterKind (-1004)

#endif

/* _gco__nilReason has binding name '_gco__nilReason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__nilReason
#define SOAP_TYPE_gsoap_eml2_2__gco__nilReason (-1878)

#endif

/* _gco__Date has binding name '_gco__Date' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__Date
#define SOAP_TYPE_gsoap_eml2_2__gco__Date (-1876)

#endif

/* _gco__CharacterString has binding name '_gco__CharacterString' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gco__CharacterString
#define SOAP_TYPE_gsoap_eml2_2__gco__CharacterString (-1873)

#endif

/* _gmd__DQ_USCOREEvaluationMethodTypeCode has binding name '_gmd__DQ_USCOREEvaluationMethodTypeCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__DQ_USCOREEvaluationMethodTypeCode (-1872)

#endif

/* _gmd__CI_USCORESeries has binding name '_gmd__CI_USCORESeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORESeries (-1871)

#endif

/* _gmd__CI_USCOREPresentationFormCode has binding name '_gmd__CI_USCOREPresentationFormCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREPresentationFormCode (-1870)

#endif

/* _gmd__CI_USCORERoleCode has binding name '_gmd__CI_USCORERoleCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORERoleCode (-1869)

#endif

/* _gmd__CI_USCOREOnLineFunctionCode has binding name '_gmd__CI_USCOREOnLineFunctionCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnLineFunctionCode (-1868)

#endif

/* _gmd__URL has binding name '_gmd__URL' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__URL
#define SOAP_TYPE_gsoap_eml2_2__gmd__URL (-1867)

#endif

/* _gmd__CI_USCOREOnlineResource has binding name '_gmd__CI_USCOREOnlineResource' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREOnlineResource (-1866)

#endif

/* _gmd__CI_USCOREAddress has binding name '_gmd__CI_USCOREAddress' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREAddress (-1865)

#endif

/* _gmd__CI_USCORETelephone has binding name '_gmd__CI_USCORETelephone' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORETelephone (-1864)

#endif

/* _gmd__CI_USCOREContact has binding name '_gmd__CI_USCOREContact' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREContact (-1863)

#endif

/* _gmd__CI_USCOREResponsibleParty has binding name '_gmd__CI_USCOREResponsibleParty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREResponsibleParty (-1862)

#endif

/* _gmd__CI_USCOREDateTypeCode has binding name '_gmd__CI_USCOREDateTypeCode' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDateTypeCode (-1861)

#endif

/* _gmd__CI_USCOREDate has binding name '_gmd__CI_USCOREDate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCOREDate (-1860)

#endif

/* _gmd__CI_USCORECitation has binding name '_gmd__CI_USCORECitation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation
#define SOAP_TYPE_gsoap_eml2_2__gmd__CI_USCORECitation (-1859)

#endif

/* _gmd__MD_USCOREIdentifier has binding name '_gmd__MD_USCOREIdentifier' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier
#define SOAP_TYPE_gsoap_eml2_2__gmd__MD_USCOREIdentifier (-1858)

#endif

/* _gmd__EX_USCOREVerticalExtent has binding name '_gmd__EX_USCOREVerticalExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREVerticalExtent (-1857)

#endif

/* _gmd__EX_USCORETemporalExtent has binding name '_gmd__EX_USCORETemporalExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCORETemporalExtent (-1856)

#endif

/* _gmd__EX_USCOREExtent has binding name '_gmd__EX_USCOREExtent' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent
#define SOAP_TYPE_gsoap_eml2_2__gmd__EX_USCOREExtent (-1855)

#endif

/* _xlink__title has binding name '_xlink__title' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__title
#define SOAP_TYPE_gsoap_eml2_2__xlink__title (-1854)

#endif

/* _xlink__arcrole has binding name '_xlink__arcrole' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__arcrole
#define SOAP_TYPE_gsoap_eml2_2__xlink__arcrole (-1853)

#endif

/* _xlink__role has binding name '_xlink__role' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__role
#define SOAP_TYPE_gsoap_eml2_2__xlink__role (-1852)

#endif

/* _xlink__href has binding name '_xlink__href' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__xlink__href
#define SOAP_TYPE_gsoap_eml2_2__xlink__href (-1851)

#endif

/* _gml__id has binding name '_gml__id' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__id
#define SOAP_TYPE_gsoap_eml2_2__gml__id (-1850)

#endif

/* _gml__VerticalDatum has binding name '_gml__VerticalDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalDatum (-1849)

#endif

/* _gml__verticalDatum has binding name '_gml__verticalDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalDatum (-1848)

#endif

/* _gml__VerticalCS has binding name '_gml__VerticalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCS (-1847)

#endif

/* _gml__verticalCS has binding name '_gml__verticalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__verticalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__verticalCS (-1846)

#endif

/* _gml__VerticalCRS has binding name '_gml__VerticalCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__VerticalCRS (-1845)

#endif

/* _gml__baseGeodeticCRS has binding name '_gml__baseGeodeticCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__baseGeodeticCRS (-1844)

#endif

/* _gml__targetCRS has binding name '_gml__targetCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__targetCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__targetCRS (-1843)

#endif

/* _gml__sourceCRS has binding name '_gml__sourceCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__sourceCRS (-1842)

#endif

/* _gml__operationVersion has binding name '_gml__operationVersion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__operationVersion
#define SOAP_TYPE_gsoap_eml2_2__gml__operationVersion (-1841)

#endif

/* _gml__conversion has binding name '_gml__conversion' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__conversion
#define SOAP_TYPE_gsoap_eml2_2__gml__conversion (-1840)

#endif

/* _gml__ProjectedCRS has binding name '_gml__ProjectedCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__ProjectedCRS (-1839)

#endif

/* _gml__semiMajorAxis has binding name '_gml__semiMajorAxis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__semiMajorAxis (-1838)

#endif

/* _gml__Ellipsoid has binding name '_gml__Ellipsoid' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__Ellipsoid (-1837)

#endif

/* _gml__ellipsoid has binding name '_gml__ellipsoid' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoid (-1836)

#endif

/* _gml__greenwichLongitude has binding name '_gml__greenwichLongitude' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude
#define SOAP_TYPE_gsoap_eml2_2__gml__greenwichLongitude (-1835)

#endif

/* _gml__PrimeMeridian has binding name '_gml__PrimeMeridian' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__PrimeMeridian (-1834)

#endif

/* _gml__primeMeridian has binding name '_gml__primeMeridian' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian
#define SOAP_TYPE_gsoap_eml2_2__gml__primeMeridian (-1833)

#endif

/* _gml__realizationEpoch has binding name '_gml__realizationEpoch' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch
#define SOAP_TYPE_gsoap_eml2_2__gml__realizationEpoch (-1832)

#endif

/* _gml__anchorDefinition has binding name '_gml__anchorDefinition' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition
#define SOAP_TYPE_gsoap_eml2_2__gml__anchorDefinition (-1831)

#endif

/* _gml__GeodeticDatum has binding name '_gml__GeodeticDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticDatum (-1830)

#endif

/* _gml__geodeticDatum has binding name '_gml__geodeticDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum
#define SOAP_TYPE_gsoap_eml2_2__gml__geodeticDatum (-1829)

#endif

/* _gml__SphericalCS has binding name '_gml__SphericalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__SphericalCS (-1828)

#endif

/* _gml__sphericalCS has binding name '_gml__sphericalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__sphericalCS (-1827)

#endif

/* _gml__CartesianCS has binding name '_gml__CartesianCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__CartesianCS (-1826)

#endif

/* _gml__cartesianCS has binding name '_gml__cartesianCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS
#define SOAP_TYPE_gsoap_eml2_2__gml__cartesianCS (-1825)

#endif

/* _gml__rangeMeaning has binding name '_gml__rangeMeaning' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning
#define SOAP_TYPE_gsoap_eml2_2__gml__rangeMeaning (-1824)

#endif

/* _gml__axisDirection has binding name '_gml__axisDirection' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisDirection
#define SOAP_TYPE_gsoap_eml2_2__gml__axisDirection (-1821)

#endif

/* _gml__axisAbbrev has binding name '_gml__axisAbbrev' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev
#define SOAP_TYPE_gsoap_eml2_2__gml__axisAbbrev (-1820)

#endif

/* _gml__CoordinateSystemAxis has binding name '_gml__CoordinateSystemAxis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis
#define SOAP_TYPE_gsoap_eml2_2__gml__CoordinateSystemAxis (-1819)

#endif

/* _gml__axis has binding name '_gml__axis' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__axis
#define SOAP_TYPE_gsoap_eml2_2__gml__axis (-1818)

#endif

/* _gml__EllipsoidalCS has binding name '_gml__EllipsoidalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__EllipsoidalCS (-1817)

#endif

/* _gml__ellipsoidalCS has binding name '_gml__ellipsoidalCS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS
#define SOAP_TYPE_gsoap_eml2_2__gml__ellipsoidalCS (-1816)

#endif

/* _gml__scope has binding name '_gml__scope' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__scope
#define SOAP_TYPE_gsoap_eml2_2__gml__scope (-1815)

#endif

/* _gml__Definition has binding name '_gml__Definition' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__Definition
#define SOAP_TYPE_gsoap_eml2_2__gml__Definition (-1814)

#endif

/* _gml__remarks has binding name '_gml__remarks' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__remarks
#define SOAP_TYPE_gsoap_eml2_2__gml__remarks (-1813)

#endif

/* _gml__name has binding name '_gml__name' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__name
#define SOAP_TYPE_gsoap_eml2_2__gml__name (-1812)

#endif

/* _gml__identifier has binding name '_gml__identifier' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__identifier
#define SOAP_TYPE_gsoap_eml2_2__gml__identifier (-1811)

#endif

/* _gml__descriptionReference has binding name '_gml__descriptionReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference
#define SOAP_TYPE_gsoap_eml2_2__gml__descriptionReference (-1810)

#endif

/* _gml__description has binding name '_gml__description' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__description
#define SOAP_TYPE_gsoap_eml2_2__gml__description (-1809)

#endif

/* _gml__GeodeticCRS has binding name '_gml__GeodeticCRS' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS
#define SOAP_TYPE_gsoap_eml2_2__gml__GeodeticCRS (-1808)

#endif

/* _eml22__GraphicalInformationSet has binding name '_eml22__GraphicalInformationSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2__eml22__GraphicalInformationSet (-1807)

#endif

/* _eml22__DataAssuranceRecord has binding name '_eml22__DataAssuranceRecord' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2__eml22__DataAssuranceRecord (-1806)

#endif

/* _eml22__TimeSeries has binding name '_eml22__TimeSeries' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2__eml22__TimeSeries (-1805)

#endif

/* _eml22__PropertyKindDictionary has binding name '_eml22__PropertyKindDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKindDictionary (-1804)

#endif

/* _eml22__PropertyKind has binding name '_eml22__PropertyKind' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2__eml22__PropertyKind (-1803)

#endif

/* _eml22__ActivityTemplate has binding name '_eml22__ActivityTemplate' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2__eml22__ActivityTemplate (-1802)

#endif

/* _eml22__Activity has binding name '_eml22__Activity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2__eml22__Activity (-1801)

#endif

/* _eml22__EpcExternalPartReference has binding name '_eml22__EpcExternalPartReference' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2__eml22__EpcExternalPartReference (-1800)

#endif

/* _eml22__AbstractDataObject has binding name '_eml22__AbstractDataObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractDataObject (-1799)

#endif

/* _eml22__AbstractContextualObject has binding name '_eml22__AbstractContextualObject' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject
#define SOAP_TYPE_gsoap_eml2_2__eml22__AbstractContextualObject (-1798)

#endif

/* _resqml2__StreamlinesRepresentation has binding name '_resqml2__StreamlinesRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesRepresentation (-1797)

#endif

/* _resqml2__StreamlinesFeature has binding name '_resqml2__StreamlinesFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StreamlinesFeature (-1796)

#endif

/* _resqml2__StringTableLookup has binding name '_resqml2__StringTableLookup' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StringTableLookup
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StringTableLookup (-1795)

#endif

/* _resqml2__PropertySet has binding name '_resqml2__PropertySet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PropertySet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PropertySet (-1794)

#endif

/* _resqml2__PointsProperty has binding name '_resqml2__PointsProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PointsProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PointsProperty (-1793)

#endif

/* _resqml2__DoubleTableLookup has binding name '_resqml2__DoubleTableLookup' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DoubleTableLookup
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DoubleTableLookup (-1792)

#endif

/* _resqml2__DiscreteProperty has binding name '_resqml2__DiscreteProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteProperty (-1791)

#endif

/* _resqml2__ContinuousProperty has binding name '_resqml2__ContinuousProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousProperty (-1790)

#endif

/* _resqml2__CommentProperty has binding name '_resqml2__CommentProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__CommentProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__CommentProperty (-1789)

#endif

/* _resqml2__CategoricalProperty has binding name '_resqml2__CategoricalProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__CategoricalProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__CategoricalProperty (-1788)

#endif

/* _resqml2__BooleanProperty has binding name '_resqml2__BooleanProperty' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BooleanProperty
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BooleanProperty (-1787)

#endif

/* _resqml2__SubRepresentation has binding name '_resqml2__SubRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SubRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SubRepresentation (-1786)

#endif

/* _resqml2__RepresentationSetRepresentation has binding name '_resqml2__RepresentationSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationSetRepresentation (-1785)

#endif

/* _resqml2__RepresentationIdentitySet has binding name '_resqml2__RepresentationIdentitySet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationIdentitySet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RepresentationIdentitySet (-1784)

#endif

/* _resqml2__RedefinedGeometryRepresentation has binding name '_resqml2__RedefinedGeometryRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RedefinedGeometryRepresentation (-1783)

#endif

/* _resqml2__PolylineSetRepresentation has binding name '_resqml2__PolylineSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineSetRepresentation (-1782)

#endif

/* _resqml2__UnstructuredGridRepresentation has binding name '_resqml2__UnstructuredGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredGridRepresentation (-1781)

#endif

/* _resqml2__UnstructuredColumnLayerGridRepresentation has binding name '_resqml2__UnstructuredColumnLayerGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__UnstructuredColumnLayerGridRepresentation (-1780)

#endif

/* _resqml2__TruncatedUnstructuredColumnLayerGridRepresentation has binding name '_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedUnstructuredColumnLayerGridRepresentation (-1779)

#endif

/* _resqml2__TruncatedIjkGridRepresentation has binding name '_resqml2__TruncatedIjkGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__TruncatedIjkGridRepresentation (-1778)

#endif

/* _resqml2__LocalGridSet has binding name '_resqml2__LocalGridSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__LocalGridSet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__LocalGridSet (-1777)

#endif

/* _resqml2__IjkGridRepresentation has binding name '_resqml2__IjkGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__IjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__IjkGridRepresentation (-1776)

#endif

/* _resqml2__GridConnectionSetRepresentation has binding name '_resqml2__GridConnectionSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GridConnectionSetRepresentation (-1775)

#endif

/* _resqml2__GpGridRepresentation has binding name '_resqml2__GpGridRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GpGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GpGridRepresentation (-1774)

#endif

/* _resqml2__ShotPointLineFeature has binding name '_resqml2__ShotPointLineFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ShotPointLineFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ShotPointLineFeature (-1773)

#endif

/* _resqml2__SeismicLineSetFeature has binding name '_resqml2__SeismicLineSetFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLineSetFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLineSetFeature (-1772)

#endif

/* _resqml2__SeismicLatticeFeature has binding name '_resqml2__SeismicLatticeFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLatticeFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicLatticeFeature (-1771)

#endif

/* _resqml2__Seismic3dPostStackRepresentation has binding name '_resqml2__Seismic3dPostStackRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic3dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic3dPostStackRepresentation (-1770)

#endif

/* _resqml2__Seismic2dPostStackRepresentation has binding name '_resqml2__Seismic2dPostStackRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic2dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Seismic2dPostStackRepresentation (-1769)

#endif

/* _resqml2__CmpLineFeature has binding name '_resqml2__CmpLineFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__CmpLineFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__CmpLineFeature (-1768)

#endif

/* _resqml2__TriangulatedSetRepresentation has binding name '_resqml2__TriangulatedSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__TriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__TriangulatedSetRepresentation (-1767)

#endif

/* _resqml2__SealedVolumeFrameworkRepresentation has binding name '_resqml2__SealedVolumeFrameworkRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SealedVolumeFrameworkRepresentation (-1766)

#endif

/* _resqml2__SealedSurfaceFrameworkRepresentation has binding name '_resqml2__SealedSurfaceFrameworkRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SealedSurfaceFrameworkRepresentation (-1765)

#endif

/* _resqml2__PolylineRepresentation has binding name '_resqml2__PolylineRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PolylineRepresentation (-1764)

#endif

/* _resqml2__PointSetRepresentation has binding name '_resqml2__PointSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PointSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PointSetRepresentation (-1763)

#endif

/* _resqml2__PlaneSetRepresentation has binding name '_resqml2__PlaneSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__PlaneSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__PlaneSetRepresentation (-1762)

#endif

/* _resqml2__NonSealedSurfaceFrameworkRepresentation has binding name '_resqml2__NonSealedSurfaceFrameworkRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__NonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__NonSealedSurfaceFrameworkRepresentation (-1761)

#endif

/* _resqml2__Grid2dSetRepresentation has binding name '_resqml2__Grid2dSetRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dSetRepresentation (-1760)

#endif

/* _resqml2__Grid2dRepresentation has binding name '_resqml2__Grid2dRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Grid2dRepresentation (-1759)

#endif

/* _resqml2__WellboreTrajectoryRepresentation has binding name '_resqml2__WellboreTrajectoryRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreTrajectoryRepresentation (-1758)

#endif

/* _resqml2__WellboreMarkerFrameRepresentation has binding name '_resqml2__WellboreMarkerFrameRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreMarkerFrameRepresentation (-1757)

#endif

/* _resqml2__WellboreInterpretationSet has binding name '_resqml2__WellboreInterpretationSet' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretationSet (-1756)

#endif

/* _resqml2__WellboreInterpretation has binding name '_resqml2__WellboreInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreInterpretation (-1755)

#endif

/* _resqml2__WellboreFrameRepresentation has binding name '_resqml2__WellboreFrameRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFrameRepresentation (-1754)

#endif

/* _resqml2__WellboreFeature has binding name '_resqml2__WellboreFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__WellboreFeature (-1753)

#endif

/* _resqml2__SeismicWellboreFrameRepresentation has binding name '_resqml2__SeismicWellboreFrameRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicWellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__SeismicWellboreFrameRepresentation (-1752)

#endif

/* _resqml2__MdDatum has binding name '_resqml2__MdDatum' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__MdDatum
#define SOAP_TYPE_gsoap_eml2_2__resqml2__MdDatum (-1751)

#endif

/* _resqml2__DeviationSurveyRepresentation has binding name '_resqml2__DeviationSurveyRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DeviationSurveyRepresentation (-1750)

#endif

/* _resqml2__BlockedWellboreRepresentation has binding name '_resqml2__BlockedWellboreRepresentation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BlockedWellboreRepresentation (-1749)

#endif

/* _resqml2__StructuralOrganizationInterpretation has binding name '_resqml2__StructuralOrganizationInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StructuralOrganizationInterpretation (-1748)

#endif

/* _resqml2__StratigraphicUnitInterpretation has binding name '_resqml2__StratigraphicUnitInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitInterpretation (-1747)

#endif

/* _resqml2__StratigraphicUnitDictionary has binding name '_resqml2__StratigraphicUnitDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitDictionary
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicUnitDictionary (-1746)

#endif

/* _resqml2__StratigraphicOccurrenceInterpretation has binding name '_resqml2__StratigraphicOccurrenceInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicOccurrenceInterpretation (-1745)

#endif

/* _resqml2__StratigraphicColumnRankInterpretation has binding name '_resqml2__StratigraphicColumnRankInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumnRankInterpretation (-1744)

#endif

/* _resqml2__StratigraphicColumn has binding name '_resqml2__StratigraphicColumn' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumn
#define SOAP_TYPE_gsoap_eml2_2__resqml2__StratigraphicColumn (-1743)

#endif

/* _resqml2__RockFluidUnitInterpretation has binding name '_resqml2__RockFluidUnitInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidUnitInterpretation (-1742)

#endif

/* _resqml2__RockFluidOrganizationInterpretation has binding name '_resqml2__RockFluidOrganizationInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockFluidOrganizationInterpretation (-1741)

#endif

/* _resqml2__HorizonInterpretation has binding name '_resqml2__HorizonInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__HorizonInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__HorizonInterpretation (-1740)

#endif

/* _resqml2__GeologicUnitInterpretation has binding name '_resqml2__GeologicUnitInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GeologicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GeologicUnitInterpretation (-1739)

#endif

/* _resqml2__GeobodyInterpretation has binding name '_resqml2__GeobodyInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyInterpretation (-1738)

#endif

/* _resqml2__GeobodyBoundaryInterpretation has binding name '_resqml2__GeobodyBoundaryInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GeobodyBoundaryInterpretation (-1737)

#endif

/* _resqml2__GenericFeatureInterpretation has binding name '_resqml2__GenericFeatureInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__GenericFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__GenericFeatureInterpretation (-1736)

#endif

/* _resqml2__FluidBoundaryInterpretation has binding name '_resqml2__FluidBoundaryInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__FluidBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__FluidBoundaryInterpretation (-1735)

#endif

/* _resqml2__FaultInterpretation has binding name '_resqml2__FaultInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__FaultInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__FaultInterpretation (-1734)

#endif

/* _resqml2__EarthModelInterpretation has binding name '_resqml2__EarthModelInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__EarthModelInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__EarthModelInterpretation (-1733)

#endif

/* _resqml2__BoundaryFeatureInterpretation has binding name '_resqml2__BoundaryFeatureInterpretation' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeatureInterpretation (-1732)

#endif

/* _resqml2__RockVolumeFeatureDictionary has binding name '_resqml2__RockVolumeFeatureDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeatureDictionary
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeatureDictionary (-1731)

#endif

/* _resqml2__RockVolumeFeature has binding name '_resqml2__RockVolumeFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__RockVolumeFeature (-1730)

#endif

/* _resqml2__Model has binding name '_resqml2__Model' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__Model
#define SOAP_TYPE_gsoap_eml2_2__resqml2__Model (-1729)

#endif

/* _resqml2__FrontierFeature has binding name '_resqml2__FrontierFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__FrontierFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__FrontierFeature (-1728)

#endif

/* _resqml2__BoundaryFeature has binding name '_resqml2__BoundaryFeature' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeature
#define SOAP_TYPE_gsoap_eml2_2__resqml2__BoundaryFeature (-1727)

#endif

/* _resqml2__LocalTime3dCrs has binding name '_resqml2__LocalTime3dCrs' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__LocalTime3dCrs
#define SOAP_TYPE_gsoap_eml2_2__resqml2__LocalTime3dCrs (-1726)

#endif

/* _resqml2__LocalDepth3dCrs has binding name '_resqml2__LocalDepth3dCrs' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__LocalDepth3dCrs
#define SOAP_TYPE_gsoap_eml2_2__resqml2__LocalDepth3dCrs (-1725)

#endif

/* _resqml2__DiscreteColorMap has binding name '_resqml2__DiscreteColorMap' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteColorMap
#define SOAP_TYPE_gsoap_eml2_2__resqml2__DiscreteColorMap (-1724)

#endif

/* _resqml2__ContinuousColorMap has binding name '_resqml2__ContinuousColorMap' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousColorMap
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ContinuousColorMap (-1723)

#endif

/* _resqml2__ColorMapDictionary has binding name '_resqml2__ColorMapDictionary' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__resqml2__ColorMapDictionary
#define SOAP_TYPE_gsoap_eml2_2__resqml2__ColorMapDictionary (-1722)

#endif

/* eml22__TypeEnum has binding name 'eml22__TypeEnum' for type 'eml22:TypeEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__TypeEnum (-1021)

#endif

/* eml22__TimeZone has binding name 'eml22__TimeZone' for type 'eml22:TimeZone' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeZone (-1020)

#endif

/* eml22__UuidString has binding name 'eml22__UuidString' for type 'eml22:UuidString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UuidString
#define SOAP_TYPE_gsoap_eml2_2_eml22__UuidString (-1017)

#endif

/* eml22__UomEnum has binding name 'eml22__UomEnum' for type 'eml22:UomEnum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum
#define SOAP_TYPE_gsoap_eml2_2_eml22__UomEnum (-1016)

#endif

/* eml22__TimeStamp has binding name 'eml22__TimeStamp' for type 'eml22:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeStamp
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeStamp (-1015)

#endif

/* eml22__String64 has binding name 'eml22__String64' for type 'eml22:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String64
#define SOAP_TYPE_gsoap_eml2_2_eml22__String64 (-1014)

#endif

/* eml22__String2000 has binding name 'eml22__String2000' for type 'eml22:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_eml22__String2000 (-1013)

#endif

/* eml22__EnumExtensionPattern has binding name 'eml22__EnumExtensionPattern' for type 'eml22:EnumExtensionPattern' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnumExtensionPattern (-1012)

#endif

/* gml__UomURI has binding name 'gml__UomURI' for type 'gml:UomURI' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomURI
#define SOAP_TYPE_gsoap_eml2_2_gml__UomURI (-1008)

#endif

/* gml__UomSymbol has binding name 'gml__UomSymbol' for type 'gml:UomSymbol' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol
#define SOAP_TYPE_gsoap_eml2_2_gml__UomSymbol (-1007)

#endif

/* eml22__AbstractString has binding name 'eml22__AbstractString' for type 'eml22:AbstractString' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractString (-1001)

#endif

/* gco__Date_USCOREType has binding name 'gco__Date_USCOREType' for type 'gco:Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREType (-998)

#endif

/* gml__UomIdentifier has binding name 'gml__UomIdentifier' for type 'gml:UomIdentifier' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier
#define SOAP_TYPE_gsoap_eml2_2_gml__UomIdentifier (-997)

#endif

/* gml__NilReasonEnumeration has binding name 'gml__NilReasonEnumeration' for type 'gml:NilReasonEnumeration' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonEnumeration (-996)

#endif

/* gml__NilReasonType has binding name 'gml__NilReasonType' for type 'gml:NilReasonType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_2_gml__NilReasonType (-995)

#endif

/* eml22__VolumeUomExt has binding name 'eml22__VolumeUomExt' for type 'eml22:VolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomExt (-994)

#endif

/* eml22__VolumetricThermalExpansionUomExt has binding name 'eml22__VolumetricThermalExpansionUomExt' for type 'eml22:VolumetricThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionUomExt (-993)

#endif

/* eml22__VolumetricHeatTransferCoefficientUomExt has binding name 'eml22__VolumetricHeatTransferCoefficientUomExt' for type 'eml22:VolumetricHeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientUomExt (-992)

#endif

/* eml22__VolumePerVolumeUomExt has binding name 'eml22__VolumePerVolumeUomExt' for type 'eml22:VolumePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomExt (-991)

#endif

/* eml22__VolumePerTimeUomExt has binding name 'eml22__VolumePerTimeUomExt' for type 'eml22:VolumePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomExt (-990)

#endif

/* eml22__VolumePerTimePerVolumeUomExt has binding name 'eml22__VolumePerTimePerVolumeUomExt' for type 'eml22:VolumePerTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeUomExt (-989)

#endif

/* eml22__VolumePerTimePerTimeUomExt has binding name 'eml22__VolumePerTimePerTimeUomExt' for type 'eml22:VolumePerTimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeUomExt (-988)

#endif

/* eml22__VolumePerTimePerPressureUomExt has binding name 'eml22__VolumePerTimePerPressureUomExt' for type 'eml22:VolumePerTimePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureUomExt (-987)

#endif

/* eml22__VolumePerTimePerPressureLengthUomExt has binding name 'eml22__VolumePerTimePerPressureLengthUomExt' for type 'eml22:VolumePerTimePerPressureLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthUomExt (-986)

#endif

/* eml22__VolumePerTimePerLengthUomExt has binding name 'eml22__VolumePerTimePerLengthUomExt' for type 'eml22:VolumePerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthUomExt (-985)

#endif

/* eml22__VolumePerTimePerAreaUomExt has binding name 'eml22__VolumePerTimePerAreaUomExt' for type 'eml22:VolumePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaUomExt (-984)

#endif

/* eml22__VolumePerTimeLengthUomExt has binding name 'eml22__VolumePerTimeLengthUomExt' for type 'eml22:VolumePerTimeLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthUomExt (-983)

#endif

/* eml22__VolumePerRotationUomExt has binding name 'eml22__VolumePerRotationUomExt' for type 'eml22:VolumePerRotationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationUomExt (-982)

#endif

/* eml22__VolumePerPressureUomExt has binding name 'eml22__VolumePerPressureUomExt' for type 'eml22:VolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureUomExt (-981)

#endif

/* eml22__VolumePerMassUomExt has binding name 'eml22__VolumePerMassUomExt' for type 'eml22:VolumePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassUomExt (-980)

#endif

/* eml22__VolumePerLengthUomExt has binding name 'eml22__VolumePerLengthUomExt' for type 'eml22:VolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthUomExt (-979)

#endif

/* eml22__VolumePerAreaUomExt has binding name 'eml22__VolumePerAreaUomExt' for type 'eml22:VolumePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomExt (-978)

#endif

/* eml22__VolumeFlowRatePerVolumeFlowRateUomExt has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateUomExt' for type 'eml22:VolumeFlowRatePerVolumeFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateUomExt (-977)

#endif

/* eml22__VerticalCoordinateUomExt has binding name 'eml22__VerticalCoordinateUomExt' for type 'eml22:VerticalCoordinateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateUomExt (-976)

#endif

/* eml22__TimeUomExt has binding name 'eml22__TimeUomExt' for type 'eml22:TimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeUomExt (-975)

#endif

/* eml22__TimePerVolumeUomExt has binding name 'eml22__TimePerVolumeUomExt' for type 'eml22:TimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeUomExt (-974)

#endif

/* eml22__TimePerTimeUomExt has binding name 'eml22__TimePerTimeUomExt' for type 'eml22:TimePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeUomExt (-973)

#endif

/* eml22__TimePerMassUomExt has binding name 'eml22__TimePerMassUomExt' for type 'eml22:TimePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassUomExt (-972)

#endif

/* eml22__TimePerLengthUomExt has binding name 'eml22__TimePerLengthUomExt' for type 'eml22:TimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthUomExt (-971)

#endif

/* eml22__ThermodynamicTemperatureUomExt has binding name 'eml22__ThermodynamicTemperatureUomExt' for type 'eml22:ThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureUomExt (-970)

#endif

/* eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureUomExt (-969)

#endif

/* eml22__ThermalResistanceUomExt has binding name 'eml22__ThermalResistanceUomExt' for type 'eml22:ThermalResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceUomExt (-968)

#endif

/* eml22__ThermalInsulanceUomExt has binding name 'eml22__ThermalInsulanceUomExt' for type 'eml22:ThermalInsulanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceUomExt (-967)

#endif

/* eml22__ThermalDiffusivityUomExt has binding name 'eml22__ThermalDiffusivityUomExt' for type 'eml22:ThermalDiffusivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityUomExt (-966)

#endif

/* eml22__ThermalConductivityUomExt has binding name 'eml22__ThermalConductivityUomExt' for type 'eml22:ThermalConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityUomExt (-965)

#endif

/* eml22__ThermalConductanceUomExt has binding name 'eml22__ThermalConductanceUomExt' for type 'eml22:ThermalConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceUomExt (-964)

#endif

/* eml22__TemperatureIntervalUomExt has binding name 'eml22__TemperatureIntervalUomExt' for type 'eml22:TemperatureIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalUomExt (-963)

#endif

/* eml22__TemperatureIntervalPerTimeUomExt has binding name 'eml22__TemperatureIntervalPerTimeUomExt' for type 'eml22:TemperatureIntervalPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeUomExt (-962)

#endif

/* eml22__TemperatureIntervalPerPressureUomExt has binding name 'eml22__TemperatureIntervalPerPressureUomExt' for type 'eml22:TemperatureIntervalPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureUomExt (-961)

#endif

/* eml22__TemperatureIntervalPerLengthUomExt has binding name 'eml22__TemperatureIntervalPerLengthUomExt' for type 'eml22:TemperatureIntervalPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthUomExt (-960)

#endif

/* eml22__SpecificHeatCapacityUomExt has binding name 'eml22__SpecificHeatCapacityUomExt' for type 'eml22:SpecificHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityUomExt (-959)

#endif

/* eml22__SolidAngleUomExt has binding name 'eml22__SolidAngleUomExt' for type 'eml22:SolidAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleUomExt (-958)

#endif

/* eml22__SignalingEventPerTimeUomExt has binding name 'eml22__SignalingEventPerTimeUomExt' for type 'eml22:SignalingEventPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeUomExt (-957)

#endif

/* eml22__SecondMomentOfAreaUomExt has binding name 'eml22__SecondMomentOfAreaUomExt' for type 'eml22:SecondMomentOfAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaUomExt (-956)

#endif

/* eml22__ReluctanceUomExt has binding name 'eml22__ReluctanceUomExt' for type 'eml22:ReluctanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceUomExt (-955)

#endif

/* eml22__ReciprocalVolumeUomExt has binding name 'eml22__ReciprocalVolumeUomExt' for type 'eml22:ReciprocalVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeUomExt (-954)

#endif

/* eml22__ReciprocalTimeUomExt has binding name 'eml22__ReciprocalTimeUomExt' for type 'eml22:ReciprocalTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeUomExt (-953)

#endif

/* eml22__ReciprocalPressureUomExt has binding name 'eml22__ReciprocalPressureUomExt' for type 'eml22:ReciprocalPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureUomExt (-952)

#endif

/* eml22__ReciprocalMassUomExt has binding name 'eml22__ReciprocalMassUomExt' for type 'eml22:ReciprocalMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassUomExt (-951)

#endif

/* eml22__ReciprocalMassTimeUomExt has binding name 'eml22__ReciprocalMassTimeUomExt' for type 'eml22:ReciprocalMassTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeUomExt (-950)

#endif

/* eml22__ReciprocalLengthUomExt has binding name 'eml22__ReciprocalLengthUomExt' for type 'eml22:ReciprocalLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthUomExt (-949)

#endif

/* eml22__ReciprocalForceUomExt has binding name 'eml22__ReciprocalForceUomExt' for type 'eml22:ReciprocalForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceUomExt (-948)

#endif

/* eml22__ReciprocalElectricPotentialDifferenceUomExt has binding name 'eml22__ReciprocalElectricPotentialDifferenceUomExt' for type 'eml22:ReciprocalElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceUomExt (-947)

#endif

/* eml22__ReciprocalAreaUomExt has binding name 'eml22__ReciprocalAreaUomExt' for type 'eml22:ReciprocalAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaUomExt (-946)

#endif

/* eml22__RadiantIntensityUomExt has binding name 'eml22__RadiantIntensityUomExt' for type 'eml22:RadiantIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityUomExt (-945)

#endif

/* eml22__RadianceUomExt has binding name 'eml22__RadianceUomExt' for type 'eml22:RadianceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceUomExt (-944)

#endif

/* eml22__QuantityOfLightUomExt has binding name 'eml22__QuantityOfLightUomExt' for type 'eml22:QuantityOfLightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightUomExt (-943)

#endif

/* eml22__PressureUomExt has binding name 'eml22__PressureUomExt' for type 'eml22:PressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomExt (-942)

#endif

/* eml22__PressureTimePerVolumeUomExt has binding name 'eml22__PressureTimePerVolumeUomExt' for type 'eml22:PressureTimePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeUomExt (-941)

#endif

/* eml22__PressureSquaredUomExt has binding name 'eml22__PressureSquaredUomExt' for type 'eml22:PressureSquaredUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredUomExt (-940)

#endif

/* eml22__PressureSquaredPerForceTimePerAreaUomExt has binding name 'eml22__PressureSquaredPerForceTimePerAreaUomExt' for type 'eml22:PressureSquaredPerForceTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaUomExt (-939)

#endif

/* eml22__PressurePerVolumeUomExt has binding name 'eml22__PressurePerVolumeUomExt' for type 'eml22:PressurePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomExt (-938)

#endif

/* eml22__PressurePerTimeUomExt has binding name 'eml22__PressurePerTimeUomExt' for type 'eml22:PressurePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeUomExt (-937)

#endif

/* eml22__PressurePerPressureUomExt has binding name 'eml22__PressurePerPressureUomExt' for type 'eml22:PressurePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureUomExt (-936)

#endif

/* eml22__PowerUomExt has binding name 'eml22__PowerUomExt' for type 'eml22:PowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerUomExt (-935)

#endif

/* eml22__PowerPerVolumeUomExt has binding name 'eml22__PowerPerVolumeUomExt' for type 'eml22:PowerPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeUomExt (-934)

#endif

/* eml22__PowerPerPowerUomExt has binding name 'eml22__PowerPerPowerUomExt' for type 'eml22:PowerPerPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerUomExt (-933)

#endif

/* eml22__PowerPerAreaUomExt has binding name 'eml22__PowerPerAreaUomExt' for type 'eml22:PowerPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaUomExt (-932)

#endif

/* eml22__PotentialDifferencePerPowerDropUomExt has binding name 'eml22__PotentialDifferencePerPowerDropUomExt' for type 'eml22:PotentialDifferencePerPowerDropUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropUomExt (-931)

#endif

/* eml22__PlaneAngleUomExt has binding name 'eml22__PlaneAngleUomExt' for type 'eml22:PlaneAngleUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleUomExt (-930)

#endif

/* eml22__PermittivityUomExt has binding name 'eml22__PermittivityUomExt' for type 'eml22:PermittivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityUomExt (-929)

#endif

/* eml22__PermeabilityRockUomExt has binding name 'eml22__PermeabilityRockUomExt' for type 'eml22:PermeabilityRockUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockUomExt (-928)

#endif

/* eml22__PermeabilityLengthUomExt has binding name 'eml22__PermeabilityLengthUomExt' for type 'eml22:PermeabilityLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthUomExt (-927)

#endif

/* eml22__NormalizedPowerUomExt has binding name 'eml22__NormalizedPowerUomExt' for type 'eml22:NormalizedPowerUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerUomExt (-926)

#endif

/* eml22__MomentumUomExt has binding name 'eml22__MomentumUomExt' for type 'eml22:MomentumUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumUomExt (-925)

#endif

/* eml22__MomentOfInertiaUomExt has binding name 'eml22__MomentOfInertiaUomExt' for type 'eml22:MomentOfInertiaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaUomExt (-924)

#endif

/* eml22__MomentOfForceUomExt has binding name 'eml22__MomentOfForceUomExt' for type 'eml22:MomentOfForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceUomExt (-923)

#endif

/* eml22__MolecularWeightUomExt has binding name 'eml22__MolecularWeightUomExt' for type 'eml22:MolecularWeightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightUomExt (-922)

#endif

/* eml22__MolarVolumeUomExt has binding name 'eml22__MolarVolumeUomExt' for type 'eml22:MolarVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeUomExt (-921)

#endif

/* eml22__MolarHeatCapacityUomExt has binding name 'eml22__MolarHeatCapacityUomExt' for type 'eml22:MolarHeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityUomExt (-920)

#endif

/* eml22__MolarEnergyUomExt has binding name 'eml22__MolarEnergyUomExt' for type 'eml22:MolarEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyUomExt (-919)

#endif

/* eml22__MobilityUomExt has binding name 'eml22__MobilityUomExt' for type 'eml22:MobilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityUomExt (-918)

#endif

/* eml22__MassUomExt has binding name 'eml22__MassUomExt' for type 'eml22:MassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassUomExt (-917)

#endif

/* eml22__MassPerVolumeUomExt has binding name 'eml22__MassPerVolumeUomExt' for type 'eml22:MassPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomExt (-916)

#endif

/* eml22__MassPerVolumePerTemperatureUomExt has binding name 'eml22__MassPerVolumePerTemperatureUomExt' for type 'eml22:MassPerVolumePerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureUomExt (-915)

#endif

/* eml22__MassPerVolumePerPressureUomExt has binding name 'eml22__MassPerVolumePerPressureUomExt' for type 'eml22:MassPerVolumePerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureUomExt (-914)

#endif

/* eml22__MassPerVolumePerLengthUomExt has binding name 'eml22__MassPerVolumePerLengthUomExt' for type 'eml22:MassPerVolumePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthUomExt (-913)

#endif

/* eml22__MassPerTimeUomExt has binding name 'eml22__MassPerTimeUomExt' for type 'eml22:MassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeUomExt (-912)

#endif

/* eml22__MassPerTimePerLengthUomExt has binding name 'eml22__MassPerTimePerLengthUomExt' for type 'eml22:MassPerTimePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthUomExt (-911)

#endif

/* eml22__MassPerTimePerAreaUomExt has binding name 'eml22__MassPerTimePerAreaUomExt' for type 'eml22:MassPerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaUomExt (-910)

#endif

/* eml22__MassPerMassUomExt has binding name 'eml22__MassPerMassUomExt' for type 'eml22:MassPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassUomExt (-909)

#endif

/* eml22__MassPerLengthUomExt has binding name 'eml22__MassPerLengthUomExt' for type 'eml22:MassPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthUomExt (-908)

#endif

/* eml22__MassPerEnergyUomExt has binding name 'eml22__MassPerEnergyUomExt' for type 'eml22:MassPerEnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyUomExt (-907)

#endif

/* eml22__MassPerAreaUomExt has binding name 'eml22__MassPerAreaUomExt' for type 'eml22:MassPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaUomExt (-906)

#endif

/* eml22__MassLengthUomExt has binding name 'eml22__MassLengthUomExt' for type 'eml22:MassLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthUomExt (-905)

#endif

/* eml22__MagneticVectorPotentialUomExt has binding name 'eml22__MagneticVectorPotentialUomExt' for type 'eml22:MagneticVectorPotentialUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialUomExt (-904)

#endif

/* eml22__MagneticPermeabilityUomExt has binding name 'eml22__MagneticPermeabilityUomExt' for type 'eml22:MagneticPermeabilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityUomExt (-903)

#endif

/* eml22__MagneticFluxUomExt has binding name 'eml22__MagneticFluxUomExt' for type 'eml22:MagneticFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxUomExt (-902)

#endif

/* eml22__MagneticFluxDensityUomExt has binding name 'eml22__MagneticFluxDensityUomExt' for type 'eml22:MagneticFluxDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityUomExt (-901)

#endif

/* eml22__MagneticFluxDensityPerLengthUomExt has binding name 'eml22__MagneticFluxDensityPerLengthUomExt' for type 'eml22:MagneticFluxDensityPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthUomExt (-900)

#endif

/* eml22__MagneticFieldStrengthUomExt has binding name 'eml22__MagneticFieldStrengthUomExt' for type 'eml22:MagneticFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthUomExt (-899)

#endif

/* eml22__MagneticDipoleMomentUomExt has binding name 'eml22__MagneticDipoleMomentUomExt' for type 'eml22:MagneticDipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentUomExt (-898)

#endif

/* eml22__LuminousIntensityUomExt has binding name 'eml22__LuminousIntensityUomExt' for type 'eml22:LuminousIntensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityUomExt (-897)

#endif

/* eml22__LuminousFluxUomExt has binding name 'eml22__LuminousFluxUomExt' for type 'eml22:LuminousFluxUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxUomExt (-896)

#endif

/* eml22__LuminousEfficacyUomExt has binding name 'eml22__LuminousEfficacyUomExt' for type 'eml22:LuminousEfficacyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyUomExt (-895)

#endif

/* eml22__LuminanceUomExt has binding name 'eml22__LuminanceUomExt' for type 'eml22:LuminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceUomExt (-894)

#endif

/* eml22__LogarithmicPowerRatioUomExt has binding name 'eml22__LogarithmicPowerRatioUomExt' for type 'eml22:LogarithmicPowerRatioUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioUomExt (-893)

#endif

/* eml22__LogarithmicPowerRatioPerLengthUomExt has binding name 'eml22__LogarithmicPowerRatioPerLengthUomExt' for type 'eml22:LogarithmicPowerRatioPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthUomExt (-892)

#endif

/* eml22__LinearThermalExpansionUomExt has binding name 'eml22__LinearThermalExpansionUomExt' for type 'eml22:LinearThermalExpansionUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionUomExt (-891)

#endif

/* eml22__LinearAccelerationUomExt has binding name 'eml22__LinearAccelerationUomExt' for type 'eml22:LinearAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationUomExt (-890)

#endif

/* eml22__LightExposureUomExt has binding name 'eml22__LightExposureUomExt' for type 'eml22:LightExposureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureUomExt (-889)

#endif

/* eml22__LengthUomExt has binding name 'eml22__LengthUomExt' for type 'eml22:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthUomExt (-888)

#endif

/* eml22__LengthPerVolumeUomExt has binding name 'eml22__LengthPerVolumeUomExt' for type 'eml22:LengthPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeUomExt (-887)

#endif

/* eml22__LengthPerTimeUomExt has binding name 'eml22__LengthPerTimeUomExt' for type 'eml22:LengthPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeUomExt (-886)

#endif

/* eml22__LengthPerTemperatureUomExt has binding name 'eml22__LengthPerTemperatureUomExt' for type 'eml22:LengthPerTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureUomExt (-885)

#endif

/* eml22__LengthPerPressureUomExt has binding name 'eml22__LengthPerPressureUomExt' for type 'eml22:LengthPerPressureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureUomExt (-884)

#endif

/* eml22__LengthPerMassUomExt has binding name 'eml22__LengthPerMassUomExt' for type 'eml22:LengthPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassUomExt (-883)

#endif

/* eml22__LengthPerLengthUomExt has binding name 'eml22__LengthPerLengthUomExt' for type 'eml22:LengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthUomExt (-882)

#endif

/* eml22__KinematicViscosityUomExt has binding name 'eml22__KinematicViscosityUomExt' for type 'eml22:KinematicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityUomExt (-881)

#endif

/* eml22__IsothermalCompressibilityUomExt has binding name 'eml22__IsothermalCompressibilityUomExt' for type 'eml22:IsothermalCompressibilityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityUomExt (-880)

#endif

/* eml22__InductanceUomExt has binding name 'eml22__InductanceUomExt' for type 'eml22:InductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceUomExt (-879)

#endif

/* eml22__IlluminanceUomExt has binding name 'eml22__IlluminanceUomExt' for type 'eml22:IlluminanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceUomExt (-878)

#endif

/* eml22__HeatTransferCoefficientUomExt has binding name 'eml22__HeatTransferCoefficientUomExt' for type 'eml22:HeatTransferCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientUomExt (-877)

#endif

/* eml22__HeatFlowRateUomExt has binding name 'eml22__HeatFlowRateUomExt' for type 'eml22:HeatFlowRateUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateUomExt (-876)

#endif

/* eml22__HeatCapacityUomExt has binding name 'eml22__HeatCapacityUomExt' for type 'eml22:HeatCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityUomExt (-875)

#endif

/* eml22__FrequencyUomExt has binding name 'eml22__FrequencyUomExt' for type 'eml22:FrequencyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyUomExt (-874)

#endif

/* eml22__FrequencyIntervalUomExt has binding name 'eml22__FrequencyIntervalUomExt' for type 'eml22:FrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalUomExt (-873)

#endif

/* eml22__ForceUomExt has binding name 'eml22__ForceUomExt' for type 'eml22:ForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceUomExt (-872)

#endif

/* eml22__ForcePerVolumeUomExt has binding name 'eml22__ForcePerVolumeUomExt' for type 'eml22:ForcePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeUomExt (-871)

#endif

/* eml22__ForcePerLengthUomExt has binding name 'eml22__ForcePerLengthUomExt' for type 'eml22:ForcePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthUomExt (-870)

#endif

/* eml22__ForcePerForceUomExt has binding name 'eml22__ForcePerForceUomExt' for type 'eml22:ForcePerForceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceUomExt (-869)

#endif

/* eml22__ForceLengthPerLengthUomExt has binding name 'eml22__ForceLengthPerLengthUomExt' for type 'eml22:ForceLengthPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthUomExt (-868)

#endif

/* eml22__ForceAreaUomExt has binding name 'eml22__ForceAreaUomExt' for type 'eml22:ForceAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaUomExt (-867)

#endif

/* eml22__EnergyUomExt has binding name 'eml22__EnergyUomExt' for type 'eml22:EnergyUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyUomExt (-866)

#endif

/* eml22__EnergyPerVolumeUomExt has binding name 'eml22__EnergyPerVolumeUomExt' for type 'eml22:EnergyPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeUomExt (-865)

#endif

/* eml22__EnergyPerMassUomExt has binding name 'eml22__EnergyPerMassUomExt' for type 'eml22:EnergyPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassUomExt (-864)

#endif

/* eml22__EnergyPerMassPerTimeUomExt has binding name 'eml22__EnergyPerMassPerTimeUomExt' for type 'eml22:EnergyPerMassPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeUomExt (-863)

#endif

/* eml22__EnergyPerLengthUomExt has binding name 'eml22__EnergyPerLengthUomExt' for type 'eml22:EnergyPerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthUomExt (-862)

#endif

/* eml22__EnergyPerAreaUomExt has binding name 'eml22__EnergyPerAreaUomExt' for type 'eml22:EnergyPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaUomExt (-861)

#endif

/* eml22__EnergyLengthPerTimeAreaTemperatureUomExt has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureUomExt' for type 'eml22:EnergyLengthPerTimeAreaTemperatureUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureUomExt (-860)

#endif

/* eml22__EnergyLengthPerAreaUomExt has binding name 'eml22__EnergyLengthPerAreaUomExt' for type 'eml22:EnergyLengthPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaUomExt (-859)

#endif

/* eml22__ElectromagneticMomentUomExt has binding name 'eml22__ElectromagneticMomentUomExt' for type 'eml22:ElectromagneticMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentUomExt (-858)

#endif

/* eml22__ElectricResistanceUomExt has binding name 'eml22__ElectricResistanceUomExt' for type 'eml22:ElectricResistanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceUomExt (-857)

#endif

/* eml22__ElectricResistancePerLengthUomExt has binding name 'eml22__ElectricResistancePerLengthUomExt' for type 'eml22:ElectricResistancePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthUomExt (-856)

#endif

/* eml22__ElectricPotentialDifferenceUomExt has binding name 'eml22__ElectricPotentialDifferenceUomExt' for type 'eml22:ElectricPotentialDifferenceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceUomExt (-855)

#endif

/* eml22__ElectricFieldStrengthUomExt has binding name 'eml22__ElectricFieldStrengthUomExt' for type 'eml22:ElectricFieldStrengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthUomExt (-854)

#endif

/* eml22__ElectricCurrentUomExt has binding name 'eml22__ElectricCurrentUomExt' for type 'eml22:ElectricCurrentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentUomExt (-853)

#endif

/* eml22__ElectricCurrentDensityUomExt has binding name 'eml22__ElectricCurrentDensityUomExt' for type 'eml22:ElectricCurrentDensityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityUomExt (-852)

#endif

/* eml22__ElectricConductivityUomExt has binding name 'eml22__ElectricConductivityUomExt' for type 'eml22:ElectricConductivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityUomExt (-851)

#endif

/* eml22__ElectricConductanceUomExt has binding name 'eml22__ElectricConductanceUomExt' for type 'eml22:ElectricConductanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceUomExt (-850)

#endif

/* eml22__ElectricChargeUomExt has binding name 'eml22__ElectricChargeUomExt' for type 'eml22:ElectricChargeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeUomExt (-849)

#endif

/* eml22__ElectricChargePerVolumeUomExt has binding name 'eml22__ElectricChargePerVolumeUomExt' for type 'eml22:ElectricChargePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeUomExt (-848)

#endif

/* eml22__ElectricChargePerMassUomExt has binding name 'eml22__ElectricChargePerMassUomExt' for type 'eml22:ElectricChargePerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassUomExt (-847)

#endif

/* eml22__ElectricChargePerAreaUomExt has binding name 'eml22__ElectricChargePerAreaUomExt' for type 'eml22:ElectricChargePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaUomExt (-846)

#endif

/* eml22__ElectricalResistivityUomExt has binding name 'eml22__ElectricalResistivityUomExt' for type 'eml22:ElectricalResistivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityUomExt (-845)

#endif

/* eml22__DynamicViscosityUomExt has binding name 'eml22__DynamicViscosityUomExt' for type 'eml22:DynamicViscosityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityUomExt (-844)

#endif

/* eml22__DoseEquivalentUomExt has binding name 'eml22__DoseEquivalentUomExt' for type 'eml22:DoseEquivalentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentUomExt (-843)

#endif

/* eml22__DipoleMomentUomExt has binding name 'eml22__DipoleMomentUomExt' for type 'eml22:DipoleMomentUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentUomExt (-842)

#endif

/* eml22__DimensionlessUomExt has binding name 'eml22__DimensionlessUomExt' for type 'eml22:DimensionlessUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessUomExt (-841)

#endif

/* eml22__DigitalStorageUomExt has binding name 'eml22__DigitalStorageUomExt' for type 'eml22:DigitalStorageUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageUomExt (-840)

#endif

/* eml22__DiffusiveTimeOfFlightUomExt has binding name 'eml22__DiffusiveTimeOfFlightUomExt' for type 'eml22:DiffusiveTimeOfFlightUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightUomExt (-839)

#endif

/* eml22__DiffusionCoefficientUomExt has binding name 'eml22__DiffusionCoefficientUomExt' for type 'eml22:DiffusionCoefficientUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientUomExt (-838)

#endif

/* eml22__DataTransferSpeedUomExt has binding name 'eml22__DataTransferSpeedUomExt' for type 'eml22:DataTransferSpeedUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedUomExt (-837)

#endif

/* eml22__CationExchangeCapacityUomExt has binding name 'eml22__CationExchangeCapacityUomExt' for type 'eml22:CationExchangeCapacityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityUomExt (-836)

#endif

/* eml22__CapacitanceUomExt has binding name 'eml22__CapacitanceUomExt' for type 'eml22:CapacitanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceUomExt (-835)

#endif

/* eml22__AttenuationPerFrequencyIntervalUomExt has binding name 'eml22__AttenuationPerFrequencyIntervalUomExt' for type 'eml22:AttenuationPerFrequencyIntervalUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalUomExt (-834)

#endif

/* eml22__AreaUomExt has binding name 'eml22__AreaUomExt' for type 'eml22:AreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaUomExt (-833)

#endif

/* eml22__AreaPerVolumeUomExt has binding name 'eml22__AreaPerVolumeUomExt' for type 'eml22:AreaPerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeUomExt (-832)

#endif

/* eml22__AreaPerTimeUomExt has binding name 'eml22__AreaPerTimeUomExt' for type 'eml22:AreaPerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeUomExt (-831)

#endif

/* eml22__AreaPerMassUomExt has binding name 'eml22__AreaPerMassUomExt' for type 'eml22:AreaPerMassUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassUomExt (-830)

#endif

/* eml22__AreaPerCountUomExt has binding name 'eml22__AreaPerCountUomExt' for type 'eml22:AreaPerCountUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountUomExt (-829)

#endif

/* eml22__AreaPerAreaUomExt has binding name 'eml22__AreaPerAreaUomExt' for type 'eml22:AreaPerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaUomExt (-828)

#endif

/* eml22__AreaPerAmountOfSubstanceUomExt has binding name 'eml22__AreaPerAmountOfSubstanceUomExt' for type 'eml22:AreaPerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceUomExt (-827)

#endif

/* eml22__APINeutronUomExt has binding name 'eml22__APINeutronUomExt' for type 'eml22:APINeutronUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronUomExt (-826)

#endif

/* eml22__APIGravityUomExt has binding name 'eml22__APIGravityUomExt' for type 'eml22:APIGravityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityUomExt (-825)

#endif

/* eml22__APIGammaRayUomExt has binding name 'eml22__APIGammaRayUomExt' for type 'eml22:APIGammaRayUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayUomExt (-824)

#endif

/* eml22__AngularVelocityUomExt has binding name 'eml22__AngularVelocityUomExt' for type 'eml22:AngularVelocityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityUomExt (-823)

#endif

/* eml22__AngularAccelerationUomExt has binding name 'eml22__AngularAccelerationUomExt' for type 'eml22:AngularAccelerationUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationUomExt (-822)

#endif

/* eml22__AnglePerVolumeUomExt has binding name 'eml22__AnglePerVolumeUomExt' for type 'eml22:AnglePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeUomExt (-821)

#endif

/* eml22__AnglePerLengthUomExt has binding name 'eml22__AnglePerLengthUomExt' for type 'eml22:AnglePerLengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthUomExt (-820)

#endif

/* eml22__AmountOfSubstanceUomExt has binding name 'eml22__AmountOfSubstanceUomExt' for type 'eml22:AmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceUomExt (-819)

#endif

/* eml22__AmountOfSubstancePerVolumeUomExt has binding name 'eml22__AmountOfSubstancePerVolumeUomExt' for type 'eml22:AmountOfSubstancePerVolumeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeUomExt (-818)

#endif

/* eml22__AmountOfSubstancePerTimeUomExt has binding name 'eml22__AmountOfSubstancePerTimeUomExt' for type 'eml22:AmountOfSubstancePerTimeUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeUomExt (-817)

#endif

/* eml22__AmountOfSubstancePerTimePerAreaUomExt has binding name 'eml22__AmountOfSubstancePerTimePerAreaUomExt' for type 'eml22:AmountOfSubstancePerTimePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaUomExt (-816)

#endif

/* eml22__AmountOfSubstancePerAreaUomExt has binding name 'eml22__AmountOfSubstancePerAreaUomExt' for type 'eml22:AmountOfSubstancePerAreaUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaUomExt (-815)

#endif

/* eml22__AmountOfSubstancePerAmountOfSubstanceUomExt has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceUomExt' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceUomExt (-814)

#endif

/* eml22__ActivityOfRadioactivityUomExt has binding name 'eml22__ActivityOfRadioactivityUomExt' for type 'eml22:ActivityOfRadioactivityUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityUomExt (-813)

#endif

/* eml22__AbsorbedDoseUomExt has binding name 'eml22__AbsorbedDoseUomExt' for type 'eml22:AbsorbedDoseUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseUomExt (-812)

#endif

/* eml22__VolumeUomWithLegacy has binding name 'eml22__VolumeUomWithLegacy' for type 'eml22:VolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeUomWithLegacy (-811)

#endif

/* eml22__VolumePerVolumeUomWithLegacy has binding name 'eml22__VolumePerVolumeUomWithLegacy' for type 'eml22:VolumePerVolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeUomWithLegacy (-810)

#endif

/* eml22__VolumePerTimeUomWithLegacy has binding name 'eml22__VolumePerTimeUomWithLegacy' for type 'eml22:VolumePerTimeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeUomWithLegacy (-809)

#endif

/* eml22__VolumePerAreaUomWithLegacy has binding name 'eml22__VolumePerAreaUomWithLegacy' for type 'eml22:VolumePerAreaUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaUomWithLegacy (-808)

#endif

/* eml22__PressureUomWithLegacy has binding name 'eml22__PressureUomWithLegacy' for type 'eml22:PressureUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureUomWithLegacy (-807)

#endif

/* eml22__PressurePerVolumeUomWithLegacy has binding name 'eml22__PressurePerVolumeUomWithLegacy' for type 'eml22:PressurePerVolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeUomWithLegacy (-806)

#endif

/* eml22__MassPerVolumeUomWithLegacy has binding name 'eml22__MassPerVolumeUomWithLegacy' for type 'eml22:MassPerVolumeUomWithLegacy' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeUomWithLegacy (-805)

#endif

/* eml22__UnitOfMeasureExt has binding name 'eml22__UnitOfMeasureExt' for type 'eml22:UnitOfMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitOfMeasureExt (-804)

#endif

/* eml22__ReferenceConditionExt has binding name 'eml22__ReferenceConditionExt' for type 'eml22:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceConditionExt (-803)

#endif

/* eml22__QuantityClassKindExt has binding name 'eml22__QuantityClassKindExt' for type 'eml22:QuantityClassKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityClassKindExt (-802)

#endif

/* eml22__LithologyQualifierKindExt has binding name 'eml22__LithologyQualifierKindExt' for type 'eml22:LithologyQualifierKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyQualifierKindExt (-801)

#endif

/* eml22__LithologyKindExt has binding name 'eml22__LithologyKindExt' for type 'eml22:LithologyKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LithologyKindExt (-800)

#endif

/* resqml2__FacetExt has binding name 'resqml2__FacetExt' for type 'resqml2:FacetExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FacetExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FacetExt (-799)

#endif

/* resqml2__ThrowKindExt has binding name 'resqml2__ThrowKindExt' for type 'resqml2:ThrowKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKindExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ThrowKindExt (-798)

#endif

/* resqml2__Shape3dExt has binding name 'resqml2__Shape3dExt' for type 'resqml2:Shape3dExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3dExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Shape3dExt (-797)

#endif

/* resqml2__ViewerKindExt has binding name 'resqml2__ViewerKindExt' for type 'resqml2:ViewerKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKindExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ViewerKindExt (-796)

#endif

/* resqml2__NodeSymbolExt has binding name 'resqml2__NodeSymbolExt' for type 'resqml2:NodeSymbolExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbolExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NodeSymbolExt (-795)

#endif

/* resqml2__EdgePatternExt has binding name 'resqml2__EdgePatternExt' for type 'resqml2:EdgePatternExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatternExt
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatternExt (-794)

#endif

/* gsr__SC_USCORECRS_USCOREPropertyType has binding name 'gsr__SC_USCORECRS_USCOREPropertyType' for type 'gsr:SC_CRS_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gsr__SC_USCORECRS_USCOREPropertyType (-793)

#endif

/* gco__DateTime_USCOREPropertyType has binding name 'gco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__DateTime_USCOREPropertyType (-792)

#endif

/* gco__CodeListValue_USCOREType has binding name 'gco__CodeListValue_USCOREType' for type 'gco:CodeListValue_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__CodeListValue_USCOREType (-791)

#endif

/* gco__Date_USCOREPropertyType has binding name 'gco__Date_USCOREPropertyType' for type 'gco:Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Date_USCOREPropertyType (-790)

#endif

/* gco__Real_USCOREPropertyType has binding name 'gco__Real_USCOREPropertyType' for type 'gco:Real_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Real_USCOREPropertyType (-789)

#endif

/* gco__Boolean_USCOREPropertyType has binding name 'gco__Boolean_USCOREPropertyType' for type 'gco:Boolean_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__Boolean_USCOREPropertyType (-788)

#endif

/* gco__CharacterString_USCOREPropertyType has binding name 'gco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gco__CharacterString_USCOREPropertyType (-787)

#endif

/* gco__AbstractObject_USCOREType has binding name 'gco__AbstractObject_USCOREType' for type 'gco:AbstractObject_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gco__AbstractObject_USCOREType (-786)

#endif

/* gts__TM_USCOREPrimitive_USCOREPropertyType has binding name 'gts__TM_USCOREPrimitive_USCOREPropertyType' for type 'gts:TM_Primitive_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gts__TM_USCOREPrimitive_USCOREPropertyType (-785)

#endif

/* gmd__AbstractDQ_USCOREResult_USCOREType has binding name 'gmd__AbstractDQ_USCOREResult_USCOREType' for type 'gmd:AbstractDQ_Result_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREResult_USCOREType (-784)

#endif

/* gmd__DQ_USCOREResult_USCOREPropertyType has binding name 'gmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREResult_USCOREPropertyType (-783)

#endif

/* gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType has binding name 'gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType' for type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-782)

#endif

/* gmd__CI_USCORESeries_USCOREType has binding name 'gmd__CI_USCORESeries_USCOREType' for type 'gmd:CI_Series_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREType (-781)

#endif

/* gmd__CI_USCORESeries_USCOREPropertyType has binding name 'gmd__CI_USCORESeries_USCOREPropertyType' for type 'gmd:CI_Series_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORESeries_USCOREPropertyType (-780)

#endif

/* gmd__CI_USCOREPresentationFormCode_USCOREPropertyType has binding name 'gmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-779)

#endif

/* gmd__CI_USCORERoleCode_USCOREPropertyType has binding name 'gmd__CI_USCORERoleCode_USCOREPropertyType' for type 'gmd:CI_RoleCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORERoleCode_USCOREPropertyType (-778)

#endif

/* gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType has binding name 'gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType' for type 'gmd:CI_OnLineFunctionCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-777)

#endif

/* gmd__URL_USCOREPropertyType has binding name 'gmd__URL_USCOREPropertyType' for type 'gmd:URL_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__URL_USCOREPropertyType (-776)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREType has binding name 'gmd__CI_USCOREOnlineResource_USCOREType' for type 'gmd:CI_OnlineResource_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREType (-775)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREPropertyType has binding name 'gmd__CI_USCOREOnlineResource_USCOREPropertyType' for type 'gmd:CI_OnlineResource_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREOnlineResource_USCOREPropertyType (-774)

#endif

/* gmd__CI_USCOREAddress_USCOREType has binding name 'gmd__CI_USCOREAddress_USCOREType' for type 'gmd:CI_Address_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREType (-773)

#endif

/* gmd__CI_USCOREAddress_USCOREPropertyType has binding name 'gmd__CI_USCOREAddress_USCOREPropertyType' for type 'gmd:CI_Address_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREAddress_USCOREPropertyType (-772)

#endif

/* gmd__CI_USCORETelephone_USCOREType has binding name 'gmd__CI_USCORETelephone_USCOREType' for type 'gmd:CI_Telephone_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREType (-771)

#endif

/* gmd__CI_USCORETelephone_USCOREPropertyType has binding name 'gmd__CI_USCORETelephone_USCOREPropertyType' for type 'gmd:CI_Telephone_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORETelephone_USCOREPropertyType (-770)

#endif

/* gmd__CI_USCOREContact_USCOREType has binding name 'gmd__CI_USCOREContact_USCOREType' for type 'gmd:CI_Contact_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREType (-769)

#endif

/* gmd__CI_USCOREContact_USCOREPropertyType has binding name 'gmd__CI_USCOREContact_USCOREPropertyType' for type 'gmd:CI_Contact_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREContact_USCOREPropertyType (-768)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREType has binding name 'gmd__CI_USCOREResponsibleParty_USCOREType' for type 'gmd:CI_ResponsibleParty_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREType (-767)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREPropertyType has binding name 'gmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREResponsibleParty_USCOREPropertyType (-766)

#endif

/* gmd__CI_USCOREDateTypeCode_USCOREPropertyType has binding name 'gmd__CI_USCOREDateTypeCode_USCOREPropertyType' for type 'gmd:CI_DateTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDateTypeCode_USCOREPropertyType (-765)

#endif

/* gmd__CI_USCOREDate_USCOREType has binding name 'gmd__CI_USCOREDate_USCOREType' for type 'gmd:CI_Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREType (-764)

#endif

/* gmd__CI_USCOREDate_USCOREPropertyType has binding name 'gmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCOREDate_USCOREPropertyType (-763)

#endif

/* gmd__CI_USCORECitation_USCOREType has binding name 'gmd__CI_USCORECitation_USCOREType' for type 'gmd:CI_Citation_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREType (-762)

#endif

/* gmd__CI_USCORECitation_USCOREPropertyType has binding name 'gmd__CI_USCORECitation_USCOREPropertyType' for type 'gmd:CI_Citation_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__CI_USCORECitation_USCOREPropertyType (-761)

#endif

/* gmd__MD_USCOREIdentifier_USCOREType has binding name 'gmd__MD_USCOREIdentifier_USCOREType' for type 'gmd:MD_Identifier_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREType (-760)

#endif

/* gmd__MD_USCOREIdentifier_USCOREPropertyType has binding name 'gmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__MD_USCOREIdentifier_USCOREPropertyType (-759)

#endif

/* gmd__AbstractDQ_USCOREElement_USCOREType has binding name 'gmd__AbstractDQ_USCOREElement_USCOREType' for type 'gmd:AbstractDQ_Element_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREElement_USCOREType (-758)

#endif

/* gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType has binding name 'gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType' for type 'gmd:AbstractDQ_PositionalAccuracy_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractDQ_USCOREPositionalAccuracy_USCOREType (-757)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREType has binding name 'gmd__EX_USCOREVerticalExtent_USCOREType' for type 'gmd:EX_VerticalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREType (-756)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREPropertyType has binding name 'gmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREVerticalExtent_USCOREPropertyType (-755)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREType has binding name 'gmd__EX_USCORETemporalExtent_USCOREType' for type 'gmd:EX_TemporalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREType (-754)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREPropertyType has binding name 'gmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCORETemporalExtent_USCOREPropertyType (-753)

#endif

/* gmd__AbstractEX_USCOREGeographicExtent_USCOREType has binding name 'gmd__AbstractEX_USCOREGeographicExtent_USCOREType' for type 'gmd:AbstractEX_GeographicExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__AbstractEX_USCOREGeographicExtent_USCOREType (-752)

#endif

/* gmd__EX_USCOREGeographicExtent_USCOREPropertyType has binding name 'gmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREGeographicExtent_USCOREPropertyType (-751)

#endif

/* gmd__EX_USCOREExtent_USCOREType has binding name 'gmd__EX_USCOREExtent_USCOREType' for type 'gmd:EX_Extent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_gmd__EX_USCOREExtent_USCOREType (-750)

#endif

/* _gml__coordinateOperationAccuracy has binding name '_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2__gml__coordinateOperationAccuracy (-749)

#endif

/* _gml__SecondDefiningParameter has binding name '_gml__SecondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__SecondDefiningParameter (-748)

#endif

/* _gml__secondDefiningParameter has binding name '_gml__secondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2__gml__secondDefiningParameter (-747)

#endif

/* _gml__domainOfValidity has binding name '_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2__gml__domainOfValidity (-746)

#endif

/* gml__VerticalDatumType has binding name 'gml__VerticalDatumType' for type 'gml:VerticalDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumType (-745)

#endif

/* gml__VerticalDatumPropertyType has binding name 'gml__VerticalDatumPropertyType' for type 'gml:VerticalDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalDatumPropertyType (-744)

#endif

/* gml__VerticalCSType has binding name 'gml__VerticalCSType' for type 'gml:VerticalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSType (-743)

#endif

/* gml__VerticalCSPropertyType has binding name 'gml__VerticalCSPropertyType' for type 'gml:VerticalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCSPropertyType (-742)

#endif

/* gml__VerticalCRSType has binding name 'gml__VerticalCRSType' for type 'gml:VerticalCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__VerticalCRSType (-741)

#endif

/* gml__GeodeticCRSPropertyType has binding name 'gml__GeodeticCRSPropertyType' for type 'gml:GeodeticCRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSPropertyType (-740)

#endif

/* gml__CRSPropertyType has binding name 'gml__CRSPropertyType' for type 'gml:CRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CRSPropertyType (-739)

#endif

/* gml__AbstractCoordinateOperationType has binding name 'gml__AbstractCoordinateOperationType' for type 'gml:AbstractCoordinateOperationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateOperationType (-738)

#endif

/* gml__AbstractGeneralConversionType has binding name 'gml__AbstractGeneralConversionType' for type 'gml:AbstractGeneralConversionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralConversionType (-737)

#endif

/* gml__GeneralConversionPropertyType has binding name 'gml__GeneralConversionPropertyType' for type 'gml:GeneralConversionPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeneralConversionPropertyType (-736)

#endif

/* gml__AbstractGeneralDerivedCRSType has binding name 'gml__AbstractGeneralDerivedCRSType' for type 'gml:AbstractGeneralDerivedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGeneralDerivedCRSType (-735)

#endif

/* gml__ProjectedCRSType has binding name 'gml__ProjectedCRSType' for type 'gml:ProjectedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__ProjectedCRSType (-734)

#endif

/* gml__LengthType has binding name 'gml__LengthType' for type 'gml:LengthType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__LengthType
#define SOAP_TYPE_gsoap_eml2_2_gml__LengthType (-733)

#endif

/* gml__EllipsoidType has binding name 'gml__EllipsoidType' for type 'gml:EllipsoidType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidType (-732)

#endif

/* gml__EllipsoidPropertyType has binding name 'gml__EllipsoidPropertyType' for type 'gml:EllipsoidPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidPropertyType (-731)

#endif

/* gml__MeasureType has binding name 'gml__MeasureType' for type 'gml:MeasureType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__MeasureType
#define SOAP_TYPE_gsoap_eml2_2_gml__MeasureType (-730)

#endif

/* gml__AngleType has binding name 'gml__AngleType' for type 'gml:AngleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AngleType
#define SOAP_TYPE_gsoap_eml2_2_gml__AngleType (-729)

#endif

/* gml__PrimeMeridianType has binding name 'gml__PrimeMeridianType' for type 'gml:PrimeMeridianType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianType (-728)

#endif

/* gml__PrimeMeridianPropertyType has binding name 'gml__PrimeMeridianPropertyType' for type 'gml:PrimeMeridianPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__PrimeMeridianPropertyType (-727)

#endif

/* gml__AbstractDatumType has binding name 'gml__AbstractDatumType' for type 'gml:AbstractDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractDatumType (-726)

#endif

/* gml__GeodeticDatumType has binding name 'gml__GeodeticDatumType' for type 'gml:GeodeticDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumType (-725)

#endif

/* gml__GeodeticDatumPropertyType has binding name 'gml__GeodeticDatumPropertyType' for type 'gml:GeodeticDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticDatumPropertyType (-724)

#endif

/* gml__SphericalCSType has binding name 'gml__SphericalCSType' for type 'gml:SphericalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSType (-723)

#endif

/* gml__SphericalCSPropertyType has binding name 'gml__SphericalCSPropertyType' for type 'gml:SphericalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__SphericalCSPropertyType (-722)

#endif

/* gml__CartesianCSType has binding name 'gml__CartesianCSType' for type 'gml:CartesianCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSType (-721)

#endif

/* gml__CartesianCSPropertyType has binding name 'gml__CartesianCSPropertyType' for type 'gml:CartesianCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CartesianCSPropertyType (-720)

#endif

/* gml__CoordinateSystemAxisType has binding name 'gml__CoordinateSystemAxisType' for type 'gml:CoordinateSystemAxisType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisType (-719)

#endif

/* gml__CoordinateSystemAxisPropertyType has binding name 'gml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__CoordinateSystemAxisPropertyType (-718)

#endif

/* gml__AbstractCoordinateSystemType has binding name 'gml__AbstractCoordinateSystemType' for type 'gml:AbstractCoordinateSystemType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCoordinateSystemType (-717)

#endif

/* gml__EllipsoidalCSType has binding name 'gml__EllipsoidalCSType' for type 'gml:EllipsoidalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSType (-716)

#endif

/* gml__EllipsoidalCSPropertyType has binding name 'gml__EllipsoidalCSPropertyType' for type 'gml:EllipsoidalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__EllipsoidalCSPropertyType (-715)

#endif

/* gml__TimePrimitivePropertyType has binding name 'gml__TimePrimitivePropertyType' for type 'gml:TimePrimitivePropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType
#define SOAP_TYPE_gsoap_eml2_2_gml__TimePrimitivePropertyType (-714)

#endif

/* gml__RelatedTimeType has binding name 'gml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_gml__RelatedTimeType (-713)

#endif

/* gml__AbstractTimeObjectType has binding name 'gml__AbstractTimeObjectType' for type 'gml:AbstractTimeObjectType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimeObjectType (-712)

#endif

/* gml__AbstractTimePrimitiveType has binding name 'gml__AbstractTimePrimitiveType' for type 'gml:AbstractTimePrimitiveType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractTimePrimitiveType (-711)

#endif

/* gml__CodeType has binding name 'gml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeType (-710)

#endif

/* gml__CodeWithAuthorityType has binding name 'gml__CodeWithAuthorityType' for type 'gml:CodeWithAuthorityType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_2_gml__CodeWithAuthorityType (-709)

#endif

/* gml__ReferenceType has binding name 'gml__ReferenceType' for type 'gml:ReferenceType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_2_gml__ReferenceType (-708)

#endif

/* gml__StringOrRefType has binding name 'gml__StringOrRefType' for type 'gml:StringOrRefType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_2_gml__StringOrRefType (-707)

#endif

/* gml__AbstractGMLType has binding name 'gml__AbstractGMLType' for type 'gml:AbstractGMLType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractGMLType (-706)

#endif

/* gml__DefinitionBaseType has binding name 'gml__DefinitionBaseType' for type 'gml:DefinitionBaseType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionBaseType (-705)

#endif

/* gml__DefinitionType has binding name 'gml__DefinitionType' for type 'gml:DefinitionType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType
#define SOAP_TYPE_gsoap_eml2_2_gml__DefinitionType (-704)

#endif

/* gml__IdentifiedObjectType has binding name 'gml__IdentifiedObjectType' for type 'gml:IdentifiedObjectType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType
#define SOAP_TYPE_gsoap_eml2_2_gml__IdentifiedObjectType (-703)

#endif

/* gml__AbstractCRSType has binding name 'gml__AbstractCRSType' for type 'gml:AbstractCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__AbstractCRSType (-702)

#endif

/* gml__GeodeticCRSType has binding name 'gml__GeodeticCRSType' for type 'gml:GeodeticCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2_gml__GeodeticCRSType (-701)

#endif

/* eml22__GraphicalInformationSet has binding name 'eml22__GraphicalInformationSet' for type 'eml22:GraphicalInformationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet
#define SOAP_TYPE_gsoap_eml2_2_eml22__GraphicalInformationSet (-700)

#endif

/* eml22__AbstractGraphicalInformation has binding name 'eml22__AbstractGraphicalInformation' for type 'eml22:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGraphicalInformation (-699)

#endif

/* eml22__IndexRange has binding name 'eml22__IndexRange' for type 'eml22:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange
#define SOAP_TYPE_gsoap_eml2_2_eml22__IndexRange (-698)

#endif

/* eml22__FailingRule has binding name 'eml22__FailingRule' for type 'eml22:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_eml22__FailingRule (-697)

#endif

/* eml22__DataAssuranceRecord has binding name 'eml22__DataAssuranceRecord' for type 'eml22:DataAssuranceRecord' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataAssuranceRecord (-696)

#endif

/* eml22__VerticalWktCrs has binding name 'eml22__VerticalWktCrs' for type 'eml22:VerticalWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalWktCrs (-695)

#endif

/* eml22__VerticalUnknownCrs has binding name 'eml22__VerticalUnknownCrs' for type 'eml22:VerticalUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalUnknownCrs (-694)

#endif

/* eml22__VerticalLocalAuthorityCrs has binding name 'eml22__VerticalLocalAuthorityCrs' for type 'eml22:VerticalLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalLocalAuthorityCrs (-693)

#endif

/* eml22__VerticalGmlCrs has binding name 'eml22__VerticalGmlCrs' for type 'eml22:VerticalGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalGmlCrs (-692)

#endif

/* eml22__VerticalEpsgCrs has binding name 'eml22__VerticalEpsgCrs' for type 'eml22:VerticalEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalEpsgCrs (-691)

#endif

/* eml22__VerticalCrs has binding name 'eml22__VerticalCrs' for type 'eml22:VerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCrs (-690)

#endif

/* eml22__ProjectedWktCrs has binding name 'eml22__ProjectedWktCrs' for type 'eml22:ProjectedWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedWktCrs (-689)

#endif

/* eml22__ProjectedUnknownCrs has binding name 'eml22__ProjectedUnknownCrs' for type 'eml22:ProjectedUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedUnknownCrs (-688)

#endif

/* eml22__ProjectedLocalAuthorityCrs has binding name 'eml22__ProjectedLocalAuthorityCrs' for type 'eml22:ProjectedLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedLocalAuthorityCrs (-687)

#endif

/* eml22__ProjectedGmlCrs has binding name 'eml22__ProjectedGmlCrs' for type 'eml22:ProjectedGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedGmlCrs (-686)

#endif

/* eml22__ProjectedEpsgCrs has binding name 'eml22__ProjectedEpsgCrs' for type 'eml22:ProjectedEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedEpsgCrs (-685)

#endif

/* eml22__ProjectedCrs has binding name 'eml22__ProjectedCrs' for type 'eml22:ProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__ProjectedCrs (-684)

#endif

/* eml22__GeodeticWktCrs has binding name 'eml22__GeodeticWktCrs' for type 'eml22:GeodeticWktCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticWktCrs (-683)

#endif

/* eml22__GeodeticUnknownCrs has binding name 'eml22__GeodeticUnknownCrs' for type 'eml22:GeodeticUnknownCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticUnknownCrs (-682)

#endif

/* eml22__GeodeticLocalAuthorityCrs has binding name 'eml22__GeodeticLocalAuthorityCrs' for type 'eml22:GeodeticLocalAuthorityCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticLocalAuthorityCrs (-681)

#endif

/* eml22__GeodeticGmlCrs has binding name 'eml22__GeodeticGmlCrs' for type 'eml22:GeodeticGmlCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticGmlCrs (-680)

#endif

/* eml22__GeodeticEpsgCrs has binding name 'eml22__GeodeticEpsgCrs' for type 'eml22:GeodeticEpsgCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticEpsgCrs (-679)

#endif

/* eml22__GeodeticCrs has binding name 'eml22__GeodeticCrs' for type 'eml22:GeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeodeticCrs (-678)

#endif

/* eml22__AbstractVerticalCrs has binding name 'eml22__AbstractVerticalCrs' for type 'eml22:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractVerticalCrs (-677)

#endif

/* eml22__AbstractProjectedCrs has binding name 'eml22__AbstractProjectedCrs' for type 'eml22:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractProjectedCrs (-676)

#endif

/* eml22__AbstractGeodeticCrs has binding name 'eml22__AbstractGeodeticCrs' for type 'eml22:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractGeodeticCrs (-675)

#endif

/* eml22__VolumeValue has binding name 'eml22__VolumeValue' for type 'eml22:VolumeValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeValue (-674)

#endif

/* eml22__TemperaturePressure has binding name 'eml22__TemperaturePressure' for type 'eml22:TemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperaturePressure (-673)

#endif

/* eml22__RelativePressure has binding name 'eml22__RelativePressure' for type 'eml22:RelativePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RelativePressure (-672)

#endif

/* eml22__ReferenceTemperaturePressure has binding name 'eml22__ReferenceTemperaturePressure' for type 'eml22:ReferenceTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferenceTemperaturePressure (-671)

#endif

/* eml22__ReferencePressure has binding name 'eml22__ReferencePressure' for type 'eml22:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReferencePressure (-670)

#endif

/* eml22__PressureValue has binding name 'eml22__PressureValue' for type 'eml22:PressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureValue (-669)

#endif

/* eml22__GaugePressure has binding name 'eml22__GaugePressure' for type 'eml22:GaugePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GaugePressure (-668)

#endif

/* eml22__FlowRateValue has binding name 'eml22__FlowRateValue' for type 'eml22:FlowRateValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__FlowRateValue (-667)

#endif

/* eml22__DensityValue has binding name 'eml22__DensityValue' for type 'eml22:DensityValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__DensityValue (-666)

#endif

/* eml22__AbstractTemperaturePressure has binding name 'eml22__AbstractTemperaturePressure' for type 'eml22:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractTemperaturePressure (-665)

#endif

/* eml22__AbstractPressureValue has binding name 'eml22__AbstractPressureValue' for type 'eml22:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractPressureValue (-664)

#endif

/* eml22__AbsolutePressure has binding name 'eml22__AbsolutePressure' for type 'eml22:AbsolutePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsolutePressure (-663)

#endif

/* eml22__TimeSeriesParentage has binding name 'eml22__TimeSeriesParentage' for type 'eml22:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeriesParentage (-662)

#endif

/* eml22__TimeSeries has binding name 'eml22__TimeSeries' for type 'eml22:TimeSeries' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeSeries (-661)

#endif

/* eml22__TimeIndices has binding name 'eml22__TimeIndices' for type 'eml22:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndices (-660)

#endif

/* eml22__TimeIndex has binding name 'eml22__TimeIndex' for type 'eml22:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndex (-659)

#endif

/* eml22__PropertyKindDictionary has binding name 'eml22__PropertyKindDictionary' for type 'eml22:PropertyKindDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKindDictionary (-658)

#endif

/* eml22__PropertyKind has binding name 'eml22__PropertyKind' for type 'eml22:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_eml22__PropertyKind (-657)

#endif

/* eml22__GeologicTime has binding name 'eml22__GeologicTime' for type 'eml22:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_eml22__GeologicTime (-656)

#endif

/* eml22__TimeIndexParameterKey has binding name 'eml22__TimeIndexParameterKey' for type 'eml22:TimeIndexParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameterKey (-655)

#endif

/* eml22__TimeIndexParameter has binding name 'eml22__TimeIndexParameter' for type 'eml22:TimeIndexParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeIndexParameter (-654)

#endif

/* eml22__StringParameter has binding name 'eml22__StringParameter' for type 'eml22:StringParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringParameter (-653)

#endif

/* eml22__ParameterTemplate has binding name 'eml22__ParameterTemplate' for type 'eml22:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ParameterTemplate (-652)

#endif

/* eml22__ObjectParameterKey has binding name 'eml22__ObjectParameterKey' for type 'eml22:ObjectParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectParameterKey (-651)

#endif

/* eml22__IntegerQuantityParameter has binding name 'eml22__IntegerQuantityParameter' for type 'eml22:IntegerQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerQuantityParameter (-650)

#endif

/* eml22__DoubleQuantityParameter has binding name 'eml22__DoubleQuantityParameter' for type 'eml22:DoubleQuantityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleQuantityParameter (-649)

#endif

/* eml22__DataObjectParameter has binding name 'eml22__DataObjectParameter' for type 'eml22:DataObjectParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectParameter (-648)

#endif

/* eml22__ActivityTemplate has binding name 'eml22__ActivityTemplate' for type 'eml22:ActivityTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityTemplate (-647)

#endif

/* eml22__Activity has binding name 'eml22__Activity' for type 'eml22:Activity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Activity
#define SOAP_TYPE_gsoap_eml2_2_eml22__Activity (-646)

#endif

/* eml22__AbstractParameterKey has binding name 'eml22__AbstractParameterKey' for type 'eml22:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractParameterKey (-645)

#endif

/* eml22__AbstractActivityParameter has binding name 'eml22__AbstractActivityParameter' for type 'eml22:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractActivityParameter (-644)

#endif

/* eml22__ExternalDatasetPart has binding name 'eml22__ExternalDatasetPart' for type 'eml22:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDatasetPart (-643)

#endif

/* eml22__ExternalDataset has binding name 'eml22__ExternalDataset' for type 'eml22:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExternalDataset (-642)

#endif

/* eml22__EpcExternalPartReference has binding name 'eml22__EpcExternalPartReference' for type 'eml22:EpcExternalPartReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__EpcExternalPartReference (-641)

#endif

/* eml22__DataObjectReference has binding name 'eml22__DataObjectReference' for type 'eml22:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataObjectReference (-640)

#endif

/* eml22__VolumetricThermalExpansionMeasureExt has binding name 'eml22__VolumetricThermalExpansionMeasureExt' for type 'eml22:VolumetricThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasureExt (-639)

#endif

/* eml22__VolumetricThermalExpansionMeasure has binding name 'eml22__VolumetricThermalExpansionMeasure' for type 'eml22:VolumetricThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricThermalExpansionMeasure (-638)

#endif

/* eml22__VolumetricHeatTransferCoefficientMeasureExt has binding name 'eml22__VolumetricHeatTransferCoefficientMeasureExt' for type 'eml22:VolumetricHeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasureExt (-637)

#endif

/* eml22__VolumetricHeatTransferCoefficientMeasure has binding name 'eml22__VolumetricHeatTransferCoefficientMeasure' for type 'eml22:VolumetricHeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumetricHeatTransferCoefficientMeasure (-636)

#endif

/* eml22__VolumePerVolumeMeasureExt has binding name 'eml22__VolumePerVolumeMeasureExt' for type 'eml22:VolumePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasureExt (-635)

#endif

/* eml22__VolumePerVolumeMeasure has binding name 'eml22__VolumePerVolumeMeasure' for type 'eml22:VolumePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerVolumeMeasure (-634)

#endif

/* eml22__VolumePerTimePerVolumeMeasureExt has binding name 'eml22__VolumePerTimePerVolumeMeasureExt' for type 'eml22:VolumePerTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasureExt (-633)

#endif

/* eml22__VolumePerTimePerVolumeMeasure has binding name 'eml22__VolumePerTimePerVolumeMeasure' for type 'eml22:VolumePerTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerVolumeMeasure (-632)

#endif

/* eml22__VolumePerTimePerTimeMeasureExt has binding name 'eml22__VolumePerTimePerTimeMeasureExt' for type 'eml22:VolumePerTimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasureExt (-631)

#endif

/* eml22__VolumePerTimePerTimeMeasure has binding name 'eml22__VolumePerTimePerTimeMeasure' for type 'eml22:VolumePerTimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerTimeMeasure (-630)

#endif

/* eml22__VolumePerTimePerPressureMeasureExt has binding name 'eml22__VolumePerTimePerPressureMeasureExt' for type 'eml22:VolumePerTimePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasureExt (-629)

#endif

/* eml22__VolumePerTimePerPressureMeasure has binding name 'eml22__VolumePerTimePerPressureMeasure' for type 'eml22:VolumePerTimePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureMeasure (-628)

#endif

/* eml22__VolumePerTimePerPressureLengthMeasureExt has binding name 'eml22__VolumePerTimePerPressureLengthMeasureExt' for type 'eml22:VolumePerTimePerPressureLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasureExt (-627)

#endif

/* eml22__VolumePerTimePerPressureLengthMeasure has binding name 'eml22__VolumePerTimePerPressureLengthMeasure' for type 'eml22:VolumePerTimePerPressureLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerPressureLengthMeasure (-626)

#endif

/* eml22__VolumePerTimePerLengthMeasureExt has binding name 'eml22__VolumePerTimePerLengthMeasureExt' for type 'eml22:VolumePerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasureExt (-625)

#endif

/* eml22__VolumePerTimePerLengthMeasure has binding name 'eml22__VolumePerTimePerLengthMeasure' for type 'eml22:VolumePerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerLengthMeasure (-624)

#endif

/* eml22__VolumePerTimePerAreaMeasureExt has binding name 'eml22__VolumePerTimePerAreaMeasureExt' for type 'eml22:VolumePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasureExt (-623)

#endif

/* eml22__VolumePerTimePerAreaMeasure has binding name 'eml22__VolumePerTimePerAreaMeasure' for type 'eml22:VolumePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimePerAreaMeasure (-622)

#endif

/* eml22__VolumePerTimeMeasureExt has binding name 'eml22__VolumePerTimeMeasureExt' for type 'eml22:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasureExt (-621)

#endif

/* eml22__VolumePerTimeMeasure has binding name 'eml22__VolumePerTimeMeasure' for type 'eml22:VolumePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeMeasure (-620)

#endif

/* eml22__VolumePerTimeLengthMeasureExt has binding name 'eml22__VolumePerTimeLengthMeasureExt' for type 'eml22:VolumePerTimeLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasureExt (-619)

#endif

/* eml22__VolumePerTimeLengthMeasure has binding name 'eml22__VolumePerTimeLengthMeasure' for type 'eml22:VolumePerTimeLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerTimeLengthMeasure (-618)

#endif

/* eml22__VolumePerRotationMeasureExt has binding name 'eml22__VolumePerRotationMeasureExt' for type 'eml22:VolumePerRotationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasureExt (-617)

#endif

/* eml22__VolumePerRotationMeasure has binding name 'eml22__VolumePerRotationMeasure' for type 'eml22:VolumePerRotationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerRotationMeasure (-616)

#endif

/* eml22__VolumePerPressureMeasureExt has binding name 'eml22__VolumePerPressureMeasureExt' for type 'eml22:VolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasureExt (-615)

#endif

/* eml22__VolumePerPressureMeasure has binding name 'eml22__VolumePerPressureMeasure' for type 'eml22:VolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerPressureMeasure (-614)

#endif

/* eml22__VolumePerMassMeasureExt has binding name 'eml22__VolumePerMassMeasureExt' for type 'eml22:VolumePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasureExt (-613)

#endif

/* eml22__VolumePerMassMeasure has binding name 'eml22__VolumePerMassMeasure' for type 'eml22:VolumePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerMassMeasure (-612)

#endif

/* eml22__VolumePerLengthMeasureExt has binding name 'eml22__VolumePerLengthMeasureExt' for type 'eml22:VolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasureExt (-611)

#endif

/* eml22__VolumePerLengthMeasure has binding name 'eml22__VolumePerLengthMeasure' for type 'eml22:VolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerLengthMeasure (-610)

#endif

/* eml22__VolumePerAreaMeasureExt has binding name 'eml22__VolumePerAreaMeasureExt' for type 'eml22:VolumePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasureExt (-609)

#endif

/* eml22__VolumePerAreaMeasure has binding name 'eml22__VolumePerAreaMeasure' for type 'eml22:VolumePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumePerAreaMeasure (-608)

#endif

/* eml22__VolumeMeasureExt has binding name 'eml22__VolumeMeasureExt' for type 'eml22:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasureExt (-607)

#endif

/* eml22__VolumeMeasure has binding name 'eml22__VolumeMeasure' for type 'eml22:VolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeMeasure (-606)

#endif

/* eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt' for type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasureExt (-605)

#endif

/* eml22__VolumeFlowRatePerVolumeFlowRateMeasure has binding name 'eml22__VolumeFlowRatePerVolumeFlowRateMeasure' for type 'eml22:VolumeFlowRatePerVolumeFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VolumeFlowRatePerVolumeFlowRateMeasure (-604)

#endif

/* eml22__VerticalCoordinateMeasureExt has binding name 'eml22__VerticalCoordinateMeasureExt' for type 'eml22:VerticalCoordinateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasureExt (-603)

#endif

/* eml22__VerticalCoordinateMeasure has binding name 'eml22__VerticalCoordinateMeasure' for type 'eml22:VerticalCoordinateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__VerticalCoordinateMeasure (-602)

#endif

/* eml22__UnitlessMeasure has binding name 'eml22__UnitlessMeasure' for type 'eml22:UnitlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__UnitlessMeasure (-601)

#endif

/* eml22__TimePerVolumeMeasureExt has binding name 'eml22__TimePerVolumeMeasureExt' for type 'eml22:TimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasureExt (-600)

#endif

/* eml22__TimePerVolumeMeasure has binding name 'eml22__TimePerVolumeMeasure' for type 'eml22:TimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerVolumeMeasure (-599)

#endif

/* eml22__TimePerTimeMeasureExt has binding name 'eml22__TimePerTimeMeasureExt' for type 'eml22:TimePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasureExt (-598)

#endif

/* eml22__TimePerTimeMeasure has binding name 'eml22__TimePerTimeMeasure' for type 'eml22:TimePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerTimeMeasure (-597)

#endif

/* eml22__TimePerMassMeasureExt has binding name 'eml22__TimePerMassMeasureExt' for type 'eml22:TimePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasureExt (-596)

#endif

/* eml22__TimePerMassMeasure has binding name 'eml22__TimePerMassMeasure' for type 'eml22:TimePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerMassMeasure (-595)

#endif

/* eml22__TimePerLengthMeasureExt has binding name 'eml22__TimePerLengthMeasureExt' for type 'eml22:TimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasureExt (-594)

#endif

/* eml22__TimePerLengthMeasure has binding name 'eml22__TimePerLengthMeasure' for type 'eml22:TimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimePerLengthMeasure (-593)

#endif

/* eml22__TimeMeasureExt has binding name 'eml22__TimeMeasureExt' for type 'eml22:TimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasureExt (-592)

#endif

/* eml22__TimeMeasure has binding name 'eml22__TimeMeasure' for type 'eml22:TimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TimeMeasure (-591)

#endif

/* eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasureExt (-590)

#endif

/* eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure has binding name 'eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' for type 'eml22:ThermodynamicTemperaturePerThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperaturePerThermodynamicTemperatureMeasure (-589)

#endif

/* eml22__ThermodynamicTemperatureMeasureExt has binding name 'eml22__ThermodynamicTemperatureMeasureExt' for type 'eml22:ThermodynamicTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasureExt (-588)

#endif

/* eml22__ThermodynamicTemperatureMeasure has binding name 'eml22__ThermodynamicTemperatureMeasure' for type 'eml22:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermodynamicTemperatureMeasure (-587)

#endif

/* eml22__ThermalResistanceMeasureExt has binding name 'eml22__ThermalResistanceMeasureExt' for type 'eml22:ThermalResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasureExt (-586)

#endif

/* eml22__ThermalResistanceMeasure has binding name 'eml22__ThermalResistanceMeasure' for type 'eml22:ThermalResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalResistanceMeasure (-585)

#endif

/* eml22__ThermalInsulanceMeasureExt has binding name 'eml22__ThermalInsulanceMeasureExt' for type 'eml22:ThermalInsulanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasureExt (-584)

#endif

/* eml22__ThermalInsulanceMeasure has binding name 'eml22__ThermalInsulanceMeasure' for type 'eml22:ThermalInsulanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalInsulanceMeasure (-583)

#endif

/* eml22__ThermalDiffusivityMeasureExt has binding name 'eml22__ThermalDiffusivityMeasureExt' for type 'eml22:ThermalDiffusivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasureExt (-582)

#endif

/* eml22__ThermalDiffusivityMeasure has binding name 'eml22__ThermalDiffusivityMeasure' for type 'eml22:ThermalDiffusivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalDiffusivityMeasure (-581)

#endif

/* eml22__ThermalConductivityMeasureExt has binding name 'eml22__ThermalConductivityMeasureExt' for type 'eml22:ThermalConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasureExt (-580)

#endif

/* eml22__ThermalConductivityMeasure has binding name 'eml22__ThermalConductivityMeasure' for type 'eml22:ThermalConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductivityMeasure (-579)

#endif

/* eml22__ThermalConductanceMeasureExt has binding name 'eml22__ThermalConductanceMeasureExt' for type 'eml22:ThermalConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasureExt (-578)

#endif

/* eml22__ThermalConductanceMeasure has binding name 'eml22__ThermalConductanceMeasure' for type 'eml22:ThermalConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ThermalConductanceMeasure (-577)

#endif

/* eml22__TemperatureIntervalPerTimeMeasureExt has binding name 'eml22__TemperatureIntervalPerTimeMeasureExt' for type 'eml22:TemperatureIntervalPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasureExt (-576)

#endif

/* eml22__TemperatureIntervalPerTimeMeasure has binding name 'eml22__TemperatureIntervalPerTimeMeasure' for type 'eml22:TemperatureIntervalPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerTimeMeasure (-575)

#endif

/* eml22__TemperatureIntervalPerPressureMeasureExt has binding name 'eml22__TemperatureIntervalPerPressureMeasureExt' for type 'eml22:TemperatureIntervalPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasureExt (-574)

#endif

/* eml22__TemperatureIntervalPerPressureMeasure has binding name 'eml22__TemperatureIntervalPerPressureMeasure' for type 'eml22:TemperatureIntervalPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerPressureMeasure (-573)

#endif

/* eml22__TemperatureIntervalPerLengthMeasureExt has binding name 'eml22__TemperatureIntervalPerLengthMeasureExt' for type 'eml22:TemperatureIntervalPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasureExt (-572)

#endif

/* eml22__TemperatureIntervalPerLengthMeasure has binding name 'eml22__TemperatureIntervalPerLengthMeasure' for type 'eml22:TemperatureIntervalPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalPerLengthMeasure (-571)

#endif

/* eml22__TemperatureIntervalMeasureExt has binding name 'eml22__TemperatureIntervalMeasureExt' for type 'eml22:TemperatureIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasureExt (-570)

#endif

/* eml22__TemperatureIntervalMeasure has binding name 'eml22__TemperatureIntervalMeasure' for type 'eml22:TemperatureIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__TemperatureIntervalMeasure (-569)

#endif

/* eml22__SpecificHeatCapacityMeasureExt has binding name 'eml22__SpecificHeatCapacityMeasureExt' for type 'eml22:SpecificHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasureExt (-568)

#endif

/* eml22__SpecificHeatCapacityMeasure has binding name 'eml22__SpecificHeatCapacityMeasure' for type 'eml22:SpecificHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SpecificHeatCapacityMeasure (-567)

#endif

/* eml22__SolidAngleMeasureExt has binding name 'eml22__SolidAngleMeasureExt' for type 'eml22:SolidAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasureExt (-566)

#endif

/* eml22__SolidAngleMeasure has binding name 'eml22__SolidAngleMeasure' for type 'eml22:SolidAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SolidAngleMeasure (-565)

#endif

/* eml22__SignalingEventPerTimeMeasureExt has binding name 'eml22__SignalingEventPerTimeMeasureExt' for type 'eml22:SignalingEventPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasureExt (-564)

#endif

/* eml22__SignalingEventPerTimeMeasure has binding name 'eml22__SignalingEventPerTimeMeasure' for type 'eml22:SignalingEventPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SignalingEventPerTimeMeasure (-563)

#endif

/* eml22__SecondMomentOfAreaMeasureExt has binding name 'eml22__SecondMomentOfAreaMeasureExt' for type 'eml22:SecondMomentOfAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasureExt (-562)

#endif

/* eml22__SecondMomentOfAreaMeasure has binding name 'eml22__SecondMomentOfAreaMeasure' for type 'eml22:SecondMomentOfAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__SecondMomentOfAreaMeasure (-561)

#endif

/* eml22__ReluctanceMeasureExt has binding name 'eml22__ReluctanceMeasureExt' for type 'eml22:ReluctanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasureExt (-560)

#endif

/* eml22__ReluctanceMeasure has binding name 'eml22__ReluctanceMeasure' for type 'eml22:ReluctanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReluctanceMeasure (-559)

#endif

/* eml22__ReciprocalVolumeMeasureExt has binding name 'eml22__ReciprocalVolumeMeasureExt' for type 'eml22:ReciprocalVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasureExt (-558)

#endif

/* eml22__ReciprocalVolumeMeasure has binding name 'eml22__ReciprocalVolumeMeasure' for type 'eml22:ReciprocalVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalVolumeMeasure (-557)

#endif

/* eml22__ReciprocalTimeMeasureExt has binding name 'eml22__ReciprocalTimeMeasureExt' for type 'eml22:ReciprocalTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasureExt (-556)

#endif

/* eml22__ReciprocalTimeMeasure has binding name 'eml22__ReciprocalTimeMeasure' for type 'eml22:ReciprocalTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalTimeMeasure (-555)

#endif

/* eml22__ReciprocalPressureMeasureExt has binding name 'eml22__ReciprocalPressureMeasureExt' for type 'eml22:ReciprocalPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasureExt (-554)

#endif

/* eml22__ReciprocalPressureMeasure has binding name 'eml22__ReciprocalPressureMeasure' for type 'eml22:ReciprocalPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalPressureMeasure (-553)

#endif

/* eml22__ReciprocalMassTimeMeasureExt has binding name 'eml22__ReciprocalMassTimeMeasureExt' for type 'eml22:ReciprocalMassTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasureExt (-552)

#endif

/* eml22__ReciprocalMassTimeMeasure has binding name 'eml22__ReciprocalMassTimeMeasure' for type 'eml22:ReciprocalMassTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassTimeMeasure (-551)

#endif

/* eml22__ReciprocalMassMeasureExt has binding name 'eml22__ReciprocalMassMeasureExt' for type 'eml22:ReciprocalMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasureExt (-550)

#endif

/* eml22__ReciprocalMassMeasure has binding name 'eml22__ReciprocalMassMeasure' for type 'eml22:ReciprocalMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalMassMeasure (-549)

#endif

/* eml22__ReciprocalLengthMeasureExt has binding name 'eml22__ReciprocalLengthMeasureExt' for type 'eml22:ReciprocalLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasureExt (-548)

#endif

/* eml22__ReciprocalLengthMeasure has binding name 'eml22__ReciprocalLengthMeasure' for type 'eml22:ReciprocalLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalLengthMeasure (-547)

#endif

/* eml22__ReciprocalForceMeasureExt has binding name 'eml22__ReciprocalForceMeasureExt' for type 'eml22:ReciprocalForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasureExt (-546)

#endif

/* eml22__ReciprocalForceMeasure has binding name 'eml22__ReciprocalForceMeasure' for type 'eml22:ReciprocalForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalForceMeasure (-545)

#endif

/* eml22__ReciprocalElectricPotentialDifferenceMeasureExt has binding name 'eml22__ReciprocalElectricPotentialDifferenceMeasureExt' for type 'eml22:ReciprocalElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasureExt (-544)

#endif

/* eml22__ReciprocalElectricPotentialDifferenceMeasure has binding name 'eml22__ReciprocalElectricPotentialDifferenceMeasure' for type 'eml22:ReciprocalElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalElectricPotentialDifferenceMeasure (-543)

#endif

/* eml22__ReciprocalAreaMeasureExt has binding name 'eml22__ReciprocalAreaMeasureExt' for type 'eml22:ReciprocalAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasureExt (-542)

#endif

/* eml22__ReciprocalAreaMeasure has binding name 'eml22__ReciprocalAreaMeasure' for type 'eml22:ReciprocalAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ReciprocalAreaMeasure (-541)

#endif

/* eml22__RadiantIntensityMeasureExt has binding name 'eml22__RadiantIntensityMeasureExt' for type 'eml22:RadiantIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasureExt (-540)

#endif

/* eml22__RadiantIntensityMeasure has binding name 'eml22__RadiantIntensityMeasure' for type 'eml22:RadiantIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadiantIntensityMeasure (-539)

#endif

/* eml22__RadianceMeasureExt has binding name 'eml22__RadianceMeasureExt' for type 'eml22:RadianceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasureExt (-538)

#endif

/* eml22__RadianceMeasure has binding name 'eml22__RadianceMeasure' for type 'eml22:RadianceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__RadianceMeasure (-537)

#endif

/* eml22__QuantityOfLightMeasureExt has binding name 'eml22__QuantityOfLightMeasureExt' for type 'eml22:QuantityOfLightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasureExt (-536)

#endif

/* eml22__QuantityOfLightMeasure has binding name 'eml22__QuantityOfLightMeasure' for type 'eml22:QuantityOfLightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__QuantityOfLightMeasure (-535)

#endif

/* eml22__PressureTimePerVolumeMeasureExt has binding name 'eml22__PressureTimePerVolumeMeasureExt' for type 'eml22:PressureTimePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasureExt (-534)

#endif

/* eml22__PressureTimePerVolumeMeasure has binding name 'eml22__PressureTimePerVolumeMeasure' for type 'eml22:PressureTimePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureTimePerVolumeMeasure (-533)

#endif

/* eml22__PressureSquaredPerForceTimePerAreaMeasureExt has binding name 'eml22__PressureSquaredPerForceTimePerAreaMeasureExt' for type 'eml22:PressureSquaredPerForceTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasureExt (-532)

#endif

/* eml22__PressureSquaredPerForceTimePerAreaMeasure has binding name 'eml22__PressureSquaredPerForceTimePerAreaMeasure' for type 'eml22:PressureSquaredPerForceTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredPerForceTimePerAreaMeasure (-531)

#endif

/* eml22__PressureSquaredMeasureExt has binding name 'eml22__PressureSquaredMeasureExt' for type 'eml22:PressureSquaredMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasureExt (-530)

#endif

/* eml22__PressureSquaredMeasure has binding name 'eml22__PressureSquaredMeasure' for type 'eml22:PressureSquaredMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureSquaredMeasure (-529)

#endif

/* eml22__PressurePerVolumeMeasureExt has binding name 'eml22__PressurePerVolumeMeasureExt' for type 'eml22:PressurePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasureExt (-528)

#endif

/* eml22__PressurePerVolumeMeasure has binding name 'eml22__PressurePerVolumeMeasure' for type 'eml22:PressurePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerVolumeMeasure (-527)

#endif

/* eml22__PressurePerTimeMeasureExt has binding name 'eml22__PressurePerTimeMeasureExt' for type 'eml22:PressurePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasureExt (-526)

#endif

/* eml22__PressurePerTimeMeasure has binding name 'eml22__PressurePerTimeMeasure' for type 'eml22:PressurePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerTimeMeasure (-525)

#endif

/* eml22__PressurePerPressureMeasureExt has binding name 'eml22__PressurePerPressureMeasureExt' for type 'eml22:PressurePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasureExt (-524)

#endif

/* eml22__PressurePerPressureMeasure has binding name 'eml22__PressurePerPressureMeasure' for type 'eml22:PressurePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressurePerPressureMeasure (-523)

#endif

/* eml22__PressureMeasureExt has binding name 'eml22__PressureMeasureExt' for type 'eml22:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasureExt (-522)

#endif

/* eml22__PressureMeasure has binding name 'eml22__PressureMeasure' for type 'eml22:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PressureMeasure (-521)

#endif

/* eml22__PowerPerVolumeMeasureExt has binding name 'eml22__PowerPerVolumeMeasureExt' for type 'eml22:PowerPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasureExt (-520)

#endif

/* eml22__PowerPerVolumeMeasure has binding name 'eml22__PowerPerVolumeMeasure' for type 'eml22:PowerPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerVolumeMeasure (-519)

#endif

/* eml22__PowerPerPowerMeasureExt has binding name 'eml22__PowerPerPowerMeasureExt' for type 'eml22:PowerPerPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasureExt (-518)

#endif

/* eml22__PowerPerPowerMeasure has binding name 'eml22__PowerPerPowerMeasure' for type 'eml22:PowerPerPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerPowerMeasure (-517)

#endif

/* eml22__PowerPerAreaMeasureExt has binding name 'eml22__PowerPerAreaMeasureExt' for type 'eml22:PowerPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasureExt (-516)

#endif

/* eml22__PowerPerAreaMeasure has binding name 'eml22__PowerPerAreaMeasure' for type 'eml22:PowerPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerPerAreaMeasure (-515)

#endif

/* eml22__PowerMeasureExt has binding name 'eml22__PowerMeasureExt' for type 'eml22:PowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasureExt (-514)

#endif

/* eml22__PowerMeasure has binding name 'eml22__PowerMeasure' for type 'eml22:PowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PowerMeasure (-513)

#endif

/* eml22__PotentialDifferencePerPowerDropMeasureExt has binding name 'eml22__PotentialDifferencePerPowerDropMeasureExt' for type 'eml22:PotentialDifferencePerPowerDropMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasureExt (-512)

#endif

/* eml22__PotentialDifferencePerPowerDropMeasure has binding name 'eml22__PotentialDifferencePerPowerDropMeasure' for type 'eml22:PotentialDifferencePerPowerDropMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PotentialDifferencePerPowerDropMeasure (-511)

#endif

/* eml22__PlaneAngleMeasureExt has binding name 'eml22__PlaneAngleMeasureExt' for type 'eml22:PlaneAngleMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasureExt (-510)

#endif

/* eml22__PlaneAngleMeasure has binding name 'eml22__PlaneAngleMeasure' for type 'eml22:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PlaneAngleMeasure (-509)

#endif

/* eml22__PermittivityMeasureExt has binding name 'eml22__PermittivityMeasureExt' for type 'eml22:PermittivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasureExt (-508)

#endif

/* eml22__PermittivityMeasure has binding name 'eml22__PermittivityMeasure' for type 'eml22:PermittivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermittivityMeasure (-507)

#endif

/* eml22__PermeabilityRockMeasureExt has binding name 'eml22__PermeabilityRockMeasureExt' for type 'eml22:PermeabilityRockMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasureExt (-506)

#endif

/* eml22__PermeabilityRockMeasure has binding name 'eml22__PermeabilityRockMeasure' for type 'eml22:PermeabilityRockMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityRockMeasure (-505)

#endif

/* eml22__PermeabilityLengthMeasureExt has binding name 'eml22__PermeabilityLengthMeasureExt' for type 'eml22:PermeabilityLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasureExt (-504)

#endif

/* eml22__PermeabilityLengthMeasure has binding name 'eml22__PermeabilityLengthMeasure' for type 'eml22:PermeabilityLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__PermeabilityLengthMeasure (-503)

#endif

/* eml22__NormalizedPowerMeasureExt has binding name 'eml22__NormalizedPowerMeasureExt' for type 'eml22:NormalizedPowerMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasureExt (-502)

#endif

/* eml22__NormalizedPowerMeasure has binding name 'eml22__NormalizedPowerMeasure' for type 'eml22:NormalizedPowerMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__NormalizedPowerMeasure (-501)

#endif

/* eml22__MomentumMeasureExt has binding name 'eml22__MomentumMeasureExt' for type 'eml22:MomentumMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasureExt (-500)

#endif

/* eml22__MomentumMeasure has binding name 'eml22__MomentumMeasure' for type 'eml22:MomentumMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentumMeasure (-499)

#endif

/* eml22__MomentOfInertiaMeasureExt has binding name 'eml22__MomentOfInertiaMeasureExt' for type 'eml22:MomentOfInertiaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasureExt (-498)

#endif

/* eml22__MomentOfInertiaMeasure has binding name 'eml22__MomentOfInertiaMeasure' for type 'eml22:MomentOfInertiaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfInertiaMeasure (-497)

#endif

/* eml22__MomentOfForceMeasureExt has binding name 'eml22__MomentOfForceMeasureExt' for type 'eml22:MomentOfForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasureExt (-496)

#endif

/* eml22__MomentOfForceMeasure has binding name 'eml22__MomentOfForceMeasure' for type 'eml22:MomentOfForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MomentOfForceMeasure (-495)

#endif

/* eml22__MolecularWeightMeasureExt has binding name 'eml22__MolecularWeightMeasureExt' for type 'eml22:MolecularWeightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasureExt (-494)

#endif

/* eml22__MolecularWeightMeasure has binding name 'eml22__MolecularWeightMeasure' for type 'eml22:MolecularWeightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolecularWeightMeasure (-493)

#endif

/* eml22__MolarVolumeMeasureExt has binding name 'eml22__MolarVolumeMeasureExt' for type 'eml22:MolarVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasureExt (-492)

#endif

/* eml22__MolarVolumeMeasure has binding name 'eml22__MolarVolumeMeasure' for type 'eml22:MolarVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarVolumeMeasure (-491)

#endif

/* eml22__MolarHeatCapacityMeasureExt has binding name 'eml22__MolarHeatCapacityMeasureExt' for type 'eml22:MolarHeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasureExt (-490)

#endif

/* eml22__MolarHeatCapacityMeasure has binding name 'eml22__MolarHeatCapacityMeasure' for type 'eml22:MolarHeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarHeatCapacityMeasure (-489)

#endif

/* eml22__MolarEnergyMeasureExt has binding name 'eml22__MolarEnergyMeasureExt' for type 'eml22:MolarEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasureExt (-488)

#endif

/* eml22__MolarEnergyMeasure has binding name 'eml22__MolarEnergyMeasure' for type 'eml22:MolarEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MolarEnergyMeasure (-487)

#endif

/* eml22__MobilityMeasureExt has binding name 'eml22__MobilityMeasureExt' for type 'eml22:MobilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasureExt (-486)

#endif

/* eml22__MobilityMeasure has binding name 'eml22__MobilityMeasure' for type 'eml22:MobilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MobilityMeasure (-485)

#endif

/* eml22__MassPerVolumePerTemperatureMeasureExt has binding name 'eml22__MassPerVolumePerTemperatureMeasureExt' for type 'eml22:MassPerVolumePerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasureExt (-484)

#endif

/* eml22__MassPerVolumePerTemperatureMeasure has binding name 'eml22__MassPerVolumePerTemperatureMeasure' for type 'eml22:MassPerVolumePerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerTemperatureMeasure (-483)

#endif

/* eml22__MassPerVolumePerPressureMeasureExt has binding name 'eml22__MassPerVolumePerPressureMeasureExt' for type 'eml22:MassPerVolumePerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasureExt (-482)

#endif

/* eml22__MassPerVolumePerPressureMeasure has binding name 'eml22__MassPerVolumePerPressureMeasure' for type 'eml22:MassPerVolumePerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerPressureMeasure (-481)

#endif

/* eml22__MassPerVolumePerLengthMeasureExt has binding name 'eml22__MassPerVolumePerLengthMeasureExt' for type 'eml22:MassPerVolumePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasureExt (-480)

#endif

/* eml22__MassPerVolumePerLengthMeasure has binding name 'eml22__MassPerVolumePerLengthMeasure' for type 'eml22:MassPerVolumePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumePerLengthMeasure (-479)

#endif

/* eml22__MassPerVolumeMeasureExt has binding name 'eml22__MassPerVolumeMeasureExt' for type 'eml22:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasureExt (-478)

#endif

/* eml22__MassPerVolumeMeasure has binding name 'eml22__MassPerVolumeMeasure' for type 'eml22:MassPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerVolumeMeasure (-477)

#endif

/* eml22__MassPerTimePerLengthMeasureExt has binding name 'eml22__MassPerTimePerLengthMeasureExt' for type 'eml22:MassPerTimePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasureExt (-476)

#endif

/* eml22__MassPerTimePerLengthMeasure has binding name 'eml22__MassPerTimePerLengthMeasure' for type 'eml22:MassPerTimePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerLengthMeasure (-475)

#endif

/* eml22__MassPerTimePerAreaMeasureExt has binding name 'eml22__MassPerTimePerAreaMeasureExt' for type 'eml22:MassPerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasureExt (-474)

#endif

/* eml22__MassPerTimePerAreaMeasure has binding name 'eml22__MassPerTimePerAreaMeasure' for type 'eml22:MassPerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimePerAreaMeasure (-473)

#endif

/* eml22__MassPerTimeMeasureExt has binding name 'eml22__MassPerTimeMeasureExt' for type 'eml22:MassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasureExt (-472)

#endif

/* eml22__MassPerTimeMeasure has binding name 'eml22__MassPerTimeMeasure' for type 'eml22:MassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerTimeMeasure (-471)

#endif

/* eml22__MassPerMassMeasureExt has binding name 'eml22__MassPerMassMeasureExt' for type 'eml22:MassPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasureExt (-470)

#endif

/* eml22__MassPerMassMeasure has binding name 'eml22__MassPerMassMeasure' for type 'eml22:MassPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerMassMeasure (-469)

#endif

/* eml22__MassPerLengthMeasureExt has binding name 'eml22__MassPerLengthMeasureExt' for type 'eml22:MassPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasureExt (-468)

#endif

/* eml22__MassPerLengthMeasure has binding name 'eml22__MassPerLengthMeasure' for type 'eml22:MassPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerLengthMeasure (-467)

#endif

/* eml22__MassPerEnergyMeasureExt has binding name 'eml22__MassPerEnergyMeasureExt' for type 'eml22:MassPerEnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasureExt (-466)

#endif

/* eml22__MassPerEnergyMeasure has binding name 'eml22__MassPerEnergyMeasure' for type 'eml22:MassPerEnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerEnergyMeasure (-465)

#endif

/* eml22__MassPerAreaMeasureExt has binding name 'eml22__MassPerAreaMeasureExt' for type 'eml22:MassPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasureExt (-464)

#endif

/* eml22__MassPerAreaMeasure has binding name 'eml22__MassPerAreaMeasure' for type 'eml22:MassPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassPerAreaMeasure (-463)

#endif

/* eml22__MassMeasureExt has binding name 'eml22__MassMeasureExt' for type 'eml22:MassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasureExt (-462)

#endif

/* eml22__MassMeasure has binding name 'eml22__MassMeasure' for type 'eml22:MassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassMeasure (-461)

#endif

/* eml22__MassLengthMeasureExt has binding name 'eml22__MassLengthMeasureExt' for type 'eml22:MassLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasureExt (-460)

#endif

/* eml22__MassLengthMeasure has binding name 'eml22__MassLengthMeasure' for type 'eml22:MassLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MassLengthMeasure (-459)

#endif

/* eml22__MagneticVectorPotentialMeasureExt has binding name 'eml22__MagneticVectorPotentialMeasureExt' for type 'eml22:MagneticVectorPotentialMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasureExt (-458)

#endif

/* eml22__MagneticVectorPotentialMeasure has binding name 'eml22__MagneticVectorPotentialMeasure' for type 'eml22:MagneticVectorPotentialMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticVectorPotentialMeasure (-457)

#endif

/* eml22__MagneticPermeabilityMeasureExt has binding name 'eml22__MagneticPermeabilityMeasureExt' for type 'eml22:MagneticPermeabilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasureExt (-456)

#endif

/* eml22__MagneticPermeabilityMeasure has binding name 'eml22__MagneticPermeabilityMeasure' for type 'eml22:MagneticPermeabilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticPermeabilityMeasure (-455)

#endif

/* eml22__MagneticFluxMeasureExt has binding name 'eml22__MagneticFluxMeasureExt' for type 'eml22:MagneticFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasureExt (-454)

#endif

/* eml22__MagneticFluxMeasure has binding name 'eml22__MagneticFluxMeasure' for type 'eml22:MagneticFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxMeasure (-453)

#endif

/* eml22__MagneticFluxDensityPerLengthMeasureExt has binding name 'eml22__MagneticFluxDensityPerLengthMeasureExt' for type 'eml22:MagneticFluxDensityPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasureExt (-452)

#endif

/* eml22__MagneticFluxDensityPerLengthMeasure has binding name 'eml22__MagneticFluxDensityPerLengthMeasure' for type 'eml22:MagneticFluxDensityPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityPerLengthMeasure (-451)

#endif

/* eml22__MagneticFluxDensityMeasureExt has binding name 'eml22__MagneticFluxDensityMeasureExt' for type 'eml22:MagneticFluxDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasureExt (-450)

#endif

/* eml22__MagneticFluxDensityMeasure has binding name 'eml22__MagneticFluxDensityMeasure' for type 'eml22:MagneticFluxDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFluxDensityMeasure (-449)

#endif

/* eml22__MagneticFieldStrengthMeasureExt has binding name 'eml22__MagneticFieldStrengthMeasureExt' for type 'eml22:MagneticFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasureExt (-448)

#endif

/* eml22__MagneticFieldStrengthMeasure has binding name 'eml22__MagneticFieldStrengthMeasure' for type 'eml22:MagneticFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticFieldStrengthMeasure (-447)

#endif

/* eml22__MagneticDipoleMomentMeasureExt has binding name 'eml22__MagneticDipoleMomentMeasureExt' for type 'eml22:MagneticDipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasureExt (-446)

#endif

/* eml22__MagneticDipoleMomentMeasure has binding name 'eml22__MagneticDipoleMomentMeasure' for type 'eml22:MagneticDipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__MagneticDipoleMomentMeasure (-445)

#endif

/* eml22__LuminousIntensityMeasureExt has binding name 'eml22__LuminousIntensityMeasureExt' for type 'eml22:LuminousIntensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasureExt (-444)

#endif

/* eml22__LuminousIntensityMeasure has binding name 'eml22__LuminousIntensityMeasure' for type 'eml22:LuminousIntensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousIntensityMeasure (-443)

#endif

/* eml22__LuminousFluxMeasureExt has binding name 'eml22__LuminousFluxMeasureExt' for type 'eml22:LuminousFluxMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasureExt (-442)

#endif

/* eml22__LuminousFluxMeasure has binding name 'eml22__LuminousFluxMeasure' for type 'eml22:LuminousFluxMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousFluxMeasure (-441)

#endif

/* eml22__LuminousEfficacyMeasureExt has binding name 'eml22__LuminousEfficacyMeasureExt' for type 'eml22:LuminousEfficacyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasureExt (-440)

#endif

/* eml22__LuminousEfficacyMeasure has binding name 'eml22__LuminousEfficacyMeasure' for type 'eml22:LuminousEfficacyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminousEfficacyMeasure (-439)

#endif

/* eml22__LuminanceMeasureExt has binding name 'eml22__LuminanceMeasureExt' for type 'eml22:LuminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasureExt (-438)

#endif

/* eml22__LuminanceMeasure has binding name 'eml22__LuminanceMeasure' for type 'eml22:LuminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LuminanceMeasure (-437)

#endif

/* eml22__LogarithmicPowerRatioPerLengthMeasureExt has binding name 'eml22__LogarithmicPowerRatioPerLengthMeasureExt' for type 'eml22:LogarithmicPowerRatioPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasureExt (-436)

#endif

/* eml22__LogarithmicPowerRatioPerLengthMeasure has binding name 'eml22__LogarithmicPowerRatioPerLengthMeasure' for type 'eml22:LogarithmicPowerRatioPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioPerLengthMeasure (-435)

#endif

/* eml22__LogarithmicPowerRatioMeasureExt has binding name 'eml22__LogarithmicPowerRatioMeasureExt' for type 'eml22:LogarithmicPowerRatioMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasureExt (-434)

#endif

/* eml22__LogarithmicPowerRatioMeasure has binding name 'eml22__LogarithmicPowerRatioMeasure' for type 'eml22:LogarithmicPowerRatioMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LogarithmicPowerRatioMeasure (-433)

#endif

/* eml22__LinearThermalExpansionMeasureExt has binding name 'eml22__LinearThermalExpansionMeasureExt' for type 'eml22:LinearThermalExpansionMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasureExt (-432)

#endif

/* eml22__LinearThermalExpansionMeasure has binding name 'eml22__LinearThermalExpansionMeasure' for type 'eml22:LinearThermalExpansionMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearThermalExpansionMeasure (-431)

#endif

/* eml22__LinearAccelerationMeasureExt has binding name 'eml22__LinearAccelerationMeasureExt' for type 'eml22:LinearAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasureExt (-430)

#endif

/* eml22__LinearAccelerationMeasure has binding name 'eml22__LinearAccelerationMeasure' for type 'eml22:LinearAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LinearAccelerationMeasure (-429)

#endif

/* eml22__LightExposureMeasureExt has binding name 'eml22__LightExposureMeasureExt' for type 'eml22:LightExposureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasureExt (-428)

#endif

/* eml22__LightExposureMeasure has binding name 'eml22__LightExposureMeasure' for type 'eml22:LightExposureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LightExposureMeasure (-427)

#endif

/* eml22__LengthPerVolumeMeasureExt has binding name 'eml22__LengthPerVolumeMeasureExt' for type 'eml22:LengthPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasureExt (-426)

#endif

/* eml22__LengthPerVolumeMeasure has binding name 'eml22__LengthPerVolumeMeasure' for type 'eml22:LengthPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerVolumeMeasure (-425)

#endif

/* eml22__LengthPerTimeMeasureExt has binding name 'eml22__LengthPerTimeMeasureExt' for type 'eml22:LengthPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasureExt (-424)

#endif

/* eml22__LengthPerTimeMeasure has binding name 'eml22__LengthPerTimeMeasure' for type 'eml22:LengthPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTimeMeasure (-423)

#endif

/* eml22__LengthPerTemperatureMeasureExt has binding name 'eml22__LengthPerTemperatureMeasureExt' for type 'eml22:LengthPerTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasureExt (-422)

#endif

/* eml22__LengthPerTemperatureMeasure has binding name 'eml22__LengthPerTemperatureMeasure' for type 'eml22:LengthPerTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerTemperatureMeasure (-421)

#endif

/* eml22__LengthPerPressureMeasureExt has binding name 'eml22__LengthPerPressureMeasureExt' for type 'eml22:LengthPerPressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasureExt (-420)

#endif

/* eml22__LengthPerPressureMeasure has binding name 'eml22__LengthPerPressureMeasure' for type 'eml22:LengthPerPressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerPressureMeasure (-419)

#endif

/* eml22__LengthPerMassMeasureExt has binding name 'eml22__LengthPerMassMeasureExt' for type 'eml22:LengthPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasureExt (-418)

#endif

/* eml22__LengthPerMassMeasure has binding name 'eml22__LengthPerMassMeasure' for type 'eml22:LengthPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerMassMeasure (-417)

#endif

/* eml22__LengthPerLengthMeasureExt has binding name 'eml22__LengthPerLengthMeasureExt' for type 'eml22:LengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasureExt (-416)

#endif

/* eml22__LengthPerLengthMeasure has binding name 'eml22__LengthPerLengthMeasure' for type 'eml22:LengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthPerLengthMeasure (-415)

#endif

/* eml22__LengthMeasureExt has binding name 'eml22__LengthMeasureExt' for type 'eml22:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasureExt (-414)

#endif

/* eml22__LengthMeasure has binding name 'eml22__LengthMeasure' for type 'eml22:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__LengthMeasure (-413)

#endif

/* eml22__KinematicViscosityMeasureExt has binding name 'eml22__KinematicViscosityMeasureExt' for type 'eml22:KinematicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasureExt (-412)

#endif

/* eml22__KinematicViscosityMeasure has binding name 'eml22__KinematicViscosityMeasure' for type 'eml22:KinematicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__KinematicViscosityMeasure (-411)

#endif

/* eml22__IsothermalCompressibilityMeasureExt has binding name 'eml22__IsothermalCompressibilityMeasureExt' for type 'eml22:IsothermalCompressibilityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasureExt (-410)

#endif

/* eml22__IsothermalCompressibilityMeasure has binding name 'eml22__IsothermalCompressibilityMeasure' for type 'eml22:IsothermalCompressibilityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IsothermalCompressibilityMeasure (-409)

#endif

/* eml22__InductanceMeasureExt has binding name 'eml22__InductanceMeasureExt' for type 'eml22:InductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasureExt (-408)

#endif

/* eml22__InductanceMeasure has binding name 'eml22__InductanceMeasure' for type 'eml22:InductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__InductanceMeasure (-407)

#endif

/* eml22__IlluminanceMeasureExt has binding name 'eml22__IlluminanceMeasureExt' for type 'eml22:IlluminanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasureExt (-406)

#endif

/* eml22__IlluminanceMeasure has binding name 'eml22__IlluminanceMeasure' for type 'eml22:IlluminanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__IlluminanceMeasure (-405)

#endif

/* eml22__HeatTransferCoefficientMeasureExt has binding name 'eml22__HeatTransferCoefficientMeasureExt' for type 'eml22:HeatTransferCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasureExt (-404)

#endif

/* eml22__HeatTransferCoefficientMeasure has binding name 'eml22__HeatTransferCoefficientMeasure' for type 'eml22:HeatTransferCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatTransferCoefficientMeasure (-403)

#endif

/* eml22__HeatFlowRateMeasureExt has binding name 'eml22__HeatFlowRateMeasureExt' for type 'eml22:HeatFlowRateMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasureExt (-402)

#endif

/* eml22__HeatFlowRateMeasure has binding name 'eml22__HeatFlowRateMeasure' for type 'eml22:HeatFlowRateMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatFlowRateMeasure (-401)

#endif

/* eml22__HeatCapacityMeasureExt has binding name 'eml22__HeatCapacityMeasureExt' for type 'eml22:HeatCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasureExt (-400)

#endif

/* eml22__HeatCapacityMeasure has binding name 'eml22__HeatCapacityMeasure' for type 'eml22:HeatCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__HeatCapacityMeasure (-399)

#endif

/* eml22__FrequencyMeasureExt has binding name 'eml22__FrequencyMeasureExt' for type 'eml22:FrequencyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasureExt (-398)

#endif

/* eml22__FrequencyMeasure has binding name 'eml22__FrequencyMeasure' for type 'eml22:FrequencyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyMeasure (-397)

#endif

/* eml22__FrequencyIntervalMeasureExt has binding name 'eml22__FrequencyIntervalMeasureExt' for type 'eml22:FrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasureExt (-396)

#endif

/* eml22__FrequencyIntervalMeasure has binding name 'eml22__FrequencyIntervalMeasure' for type 'eml22:FrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__FrequencyIntervalMeasure (-395)

#endif

/* eml22__ForcePerVolumeMeasureExt has binding name 'eml22__ForcePerVolumeMeasureExt' for type 'eml22:ForcePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasureExt (-394)

#endif

/* eml22__ForcePerVolumeMeasure has binding name 'eml22__ForcePerVolumeMeasure' for type 'eml22:ForcePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerVolumeMeasure (-393)

#endif

/* eml22__ForcePerLengthMeasureExt has binding name 'eml22__ForcePerLengthMeasureExt' for type 'eml22:ForcePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasureExt (-392)

#endif

/* eml22__ForcePerLengthMeasure has binding name 'eml22__ForcePerLengthMeasure' for type 'eml22:ForcePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerLengthMeasure (-391)

#endif

/* eml22__ForcePerForceMeasureExt has binding name 'eml22__ForcePerForceMeasureExt' for type 'eml22:ForcePerForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasureExt (-390)

#endif

/* eml22__ForcePerForceMeasure has binding name 'eml22__ForcePerForceMeasure' for type 'eml22:ForcePerForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForcePerForceMeasure (-389)

#endif

/* eml22__ForceMeasureExt has binding name 'eml22__ForceMeasureExt' for type 'eml22:ForceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasureExt (-388)

#endif

/* eml22__ForceMeasure has binding name 'eml22__ForceMeasure' for type 'eml22:ForceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceMeasure (-387)

#endif

/* eml22__ForceLengthPerLengthMeasureExt has binding name 'eml22__ForceLengthPerLengthMeasureExt' for type 'eml22:ForceLengthPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasureExt (-386)

#endif

/* eml22__ForceLengthPerLengthMeasure has binding name 'eml22__ForceLengthPerLengthMeasure' for type 'eml22:ForceLengthPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceLengthPerLengthMeasure (-385)

#endif

/* eml22__ForceAreaMeasureExt has binding name 'eml22__ForceAreaMeasureExt' for type 'eml22:ForceAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasureExt (-384)

#endif

/* eml22__ForceAreaMeasure has binding name 'eml22__ForceAreaMeasure' for type 'eml22:ForceAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ForceAreaMeasure (-383)

#endif

/* eml22__EnergyPerVolumeMeasureExt has binding name 'eml22__EnergyPerVolumeMeasureExt' for type 'eml22:EnergyPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasureExt (-382)

#endif

/* eml22__EnergyPerVolumeMeasure has binding name 'eml22__EnergyPerVolumeMeasure' for type 'eml22:EnergyPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerVolumeMeasure (-381)

#endif

/* eml22__EnergyPerMassPerTimeMeasureExt has binding name 'eml22__EnergyPerMassPerTimeMeasureExt' for type 'eml22:EnergyPerMassPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasureExt (-380)

#endif

/* eml22__EnergyPerMassPerTimeMeasure has binding name 'eml22__EnergyPerMassPerTimeMeasure' for type 'eml22:EnergyPerMassPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassPerTimeMeasure (-379)

#endif

/* eml22__EnergyPerMassMeasureExt has binding name 'eml22__EnergyPerMassMeasureExt' for type 'eml22:EnergyPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasureExt (-378)

#endif

/* eml22__EnergyPerMassMeasure has binding name 'eml22__EnergyPerMassMeasure' for type 'eml22:EnergyPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerMassMeasure (-377)

#endif

/* eml22__EnergyPerLengthMeasureExt has binding name 'eml22__EnergyPerLengthMeasureExt' for type 'eml22:EnergyPerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasureExt (-376)

#endif

/* eml22__EnergyPerLengthMeasure has binding name 'eml22__EnergyPerLengthMeasure' for type 'eml22:EnergyPerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerLengthMeasure (-375)

#endif

/* eml22__EnergyPerAreaMeasureExt has binding name 'eml22__EnergyPerAreaMeasureExt' for type 'eml22:EnergyPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasureExt (-374)

#endif

/* eml22__EnergyPerAreaMeasure has binding name 'eml22__EnergyPerAreaMeasure' for type 'eml22:EnergyPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyPerAreaMeasure (-373)

#endif

/* eml22__EnergyMeasureExt has binding name 'eml22__EnergyMeasureExt' for type 'eml22:EnergyMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasureExt (-372)

#endif

/* eml22__EnergyMeasure has binding name 'eml22__EnergyMeasure' for type 'eml22:EnergyMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyMeasure (-371)

#endif

/* eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt' for type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasureExt (-370)

#endif

/* eml22__EnergyLengthPerTimeAreaTemperatureMeasure has binding name 'eml22__EnergyLengthPerTimeAreaTemperatureMeasure' for type 'eml22:EnergyLengthPerTimeAreaTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerTimeAreaTemperatureMeasure (-369)

#endif

/* eml22__EnergyLengthPerAreaMeasureExt has binding name 'eml22__EnergyLengthPerAreaMeasureExt' for type 'eml22:EnergyLengthPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasureExt (-368)

#endif

/* eml22__EnergyLengthPerAreaMeasure has binding name 'eml22__EnergyLengthPerAreaMeasure' for type 'eml22:EnergyLengthPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__EnergyLengthPerAreaMeasure (-367)

#endif

/* eml22__ElectromagneticMomentMeasureExt has binding name 'eml22__ElectromagneticMomentMeasureExt' for type 'eml22:ElectromagneticMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasureExt (-366)

#endif

/* eml22__ElectromagneticMomentMeasure has binding name 'eml22__ElectromagneticMomentMeasure' for type 'eml22:ElectromagneticMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectromagneticMomentMeasure (-365)

#endif

/* eml22__ElectricResistancePerLengthMeasureExt has binding name 'eml22__ElectricResistancePerLengthMeasureExt' for type 'eml22:ElectricResistancePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasureExt (-364)

#endif

/* eml22__ElectricResistancePerLengthMeasure has binding name 'eml22__ElectricResistancePerLengthMeasure' for type 'eml22:ElectricResistancePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistancePerLengthMeasure (-363)

#endif

/* eml22__ElectricResistanceMeasureExt has binding name 'eml22__ElectricResistanceMeasureExt' for type 'eml22:ElectricResistanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasureExt (-362)

#endif

/* eml22__ElectricResistanceMeasure has binding name 'eml22__ElectricResistanceMeasure' for type 'eml22:ElectricResistanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricResistanceMeasure (-361)

#endif

/* eml22__ElectricPotentialDifferenceMeasureExt has binding name 'eml22__ElectricPotentialDifferenceMeasureExt' for type 'eml22:ElectricPotentialDifferenceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasureExt (-360)

#endif

/* eml22__ElectricPotentialDifferenceMeasure has binding name 'eml22__ElectricPotentialDifferenceMeasure' for type 'eml22:ElectricPotentialDifferenceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricPotentialDifferenceMeasure (-359)

#endif

/* eml22__ElectricFieldStrengthMeasureExt has binding name 'eml22__ElectricFieldStrengthMeasureExt' for type 'eml22:ElectricFieldStrengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasureExt (-358)

#endif

/* eml22__ElectricFieldStrengthMeasure has binding name 'eml22__ElectricFieldStrengthMeasure' for type 'eml22:ElectricFieldStrengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricFieldStrengthMeasure (-357)

#endif

/* eml22__ElectricCurrentMeasureExt has binding name 'eml22__ElectricCurrentMeasureExt' for type 'eml22:ElectricCurrentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasureExt (-356)

#endif

/* eml22__ElectricCurrentMeasure has binding name 'eml22__ElectricCurrentMeasure' for type 'eml22:ElectricCurrentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentMeasure (-355)

#endif

/* eml22__ElectricCurrentDensityMeasureExt has binding name 'eml22__ElectricCurrentDensityMeasureExt' for type 'eml22:ElectricCurrentDensityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasureExt (-354)

#endif

/* eml22__ElectricCurrentDensityMeasure has binding name 'eml22__ElectricCurrentDensityMeasure' for type 'eml22:ElectricCurrentDensityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricCurrentDensityMeasure (-353)

#endif

/* eml22__ElectricConductivityMeasureExt has binding name 'eml22__ElectricConductivityMeasureExt' for type 'eml22:ElectricConductivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasureExt (-352)

#endif

/* eml22__ElectricConductivityMeasure has binding name 'eml22__ElectricConductivityMeasure' for type 'eml22:ElectricConductivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductivityMeasure (-351)

#endif

/* eml22__ElectricConductanceMeasureExt has binding name 'eml22__ElectricConductanceMeasureExt' for type 'eml22:ElectricConductanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasureExt (-350)

#endif

/* eml22__ElectricConductanceMeasure has binding name 'eml22__ElectricConductanceMeasure' for type 'eml22:ElectricConductanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricConductanceMeasure (-349)

#endif

/* eml22__ElectricChargePerVolumeMeasureExt has binding name 'eml22__ElectricChargePerVolumeMeasureExt' for type 'eml22:ElectricChargePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasureExt (-348)

#endif

/* eml22__ElectricChargePerVolumeMeasure has binding name 'eml22__ElectricChargePerVolumeMeasure' for type 'eml22:ElectricChargePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerVolumeMeasure (-347)

#endif

/* eml22__ElectricChargePerMassMeasureExt has binding name 'eml22__ElectricChargePerMassMeasureExt' for type 'eml22:ElectricChargePerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasureExt (-346)

#endif

/* eml22__ElectricChargePerMassMeasure has binding name 'eml22__ElectricChargePerMassMeasure' for type 'eml22:ElectricChargePerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerMassMeasure (-345)

#endif

/* eml22__ElectricChargePerAreaMeasureExt has binding name 'eml22__ElectricChargePerAreaMeasureExt' for type 'eml22:ElectricChargePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasureExt (-344)

#endif

/* eml22__ElectricChargePerAreaMeasure has binding name 'eml22__ElectricChargePerAreaMeasure' for type 'eml22:ElectricChargePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargePerAreaMeasure (-343)

#endif

/* eml22__ElectricChargeMeasureExt has binding name 'eml22__ElectricChargeMeasureExt' for type 'eml22:ElectricChargeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasureExt (-342)

#endif

/* eml22__ElectricChargeMeasure has binding name 'eml22__ElectricChargeMeasure' for type 'eml22:ElectricChargeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricChargeMeasure (-341)

#endif

/* eml22__ElectricalResistivityMeasureExt has binding name 'eml22__ElectricalResistivityMeasureExt' for type 'eml22:ElectricalResistivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasureExt (-340)

#endif

/* eml22__ElectricalResistivityMeasure has binding name 'eml22__ElectricalResistivityMeasure' for type 'eml22:ElectricalResistivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ElectricalResistivityMeasure (-339)

#endif

/* eml22__DynamicViscosityMeasureExt has binding name 'eml22__DynamicViscosityMeasureExt' for type 'eml22:DynamicViscosityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasureExt (-338)

#endif

/* eml22__DynamicViscosityMeasure has binding name 'eml22__DynamicViscosityMeasure' for type 'eml22:DynamicViscosityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DynamicViscosityMeasure (-337)

#endif

/* eml22__DoseEquivalentMeasureExt has binding name 'eml22__DoseEquivalentMeasureExt' for type 'eml22:DoseEquivalentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasureExt (-336)

#endif

/* eml22__DoseEquivalentMeasure has binding name 'eml22__DoseEquivalentMeasure' for type 'eml22:DoseEquivalentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoseEquivalentMeasure (-335)

#endif

/* eml22__DipoleMomentMeasureExt has binding name 'eml22__DipoleMomentMeasureExt' for type 'eml22:DipoleMomentMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasureExt (-334)

#endif

/* eml22__DipoleMomentMeasure has binding name 'eml22__DipoleMomentMeasure' for type 'eml22:DipoleMomentMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DipoleMomentMeasure (-333)

#endif

/* eml22__DimensionlessMeasureExt has binding name 'eml22__DimensionlessMeasureExt' for type 'eml22:DimensionlessMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasureExt (-332)

#endif

/* eml22__DimensionlessMeasure has binding name 'eml22__DimensionlessMeasure' for type 'eml22:DimensionlessMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DimensionlessMeasure (-331)

#endif

/* eml22__DigitalStorageMeasureExt has binding name 'eml22__DigitalStorageMeasureExt' for type 'eml22:DigitalStorageMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasureExt (-330)

#endif

/* eml22__DigitalStorageMeasure has binding name 'eml22__DigitalStorageMeasure' for type 'eml22:DigitalStorageMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DigitalStorageMeasure (-329)

#endif

/* eml22__DiffusiveTimeOfFlightMeasureExt has binding name 'eml22__DiffusiveTimeOfFlightMeasureExt' for type 'eml22:DiffusiveTimeOfFlightMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasureExt (-328)

#endif

/* eml22__DiffusiveTimeOfFlightMeasure has binding name 'eml22__DiffusiveTimeOfFlightMeasure' for type 'eml22:DiffusiveTimeOfFlightMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusiveTimeOfFlightMeasure (-327)

#endif

/* eml22__DiffusionCoefficientMeasureExt has binding name 'eml22__DiffusionCoefficientMeasureExt' for type 'eml22:DiffusionCoefficientMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasureExt (-326)

#endif

/* eml22__DiffusionCoefficientMeasure has binding name 'eml22__DiffusionCoefficientMeasure' for type 'eml22:DiffusionCoefficientMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DiffusionCoefficientMeasure (-325)

#endif

/* eml22__DataTransferSpeedMeasureExt has binding name 'eml22__DataTransferSpeedMeasureExt' for type 'eml22:DataTransferSpeedMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasureExt (-324)

#endif

/* eml22__DataTransferSpeedMeasure has binding name 'eml22__DataTransferSpeedMeasure' for type 'eml22:DataTransferSpeedMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__DataTransferSpeedMeasure (-323)

#endif

/* eml22__CationExchangeCapacityMeasureExt has binding name 'eml22__CationExchangeCapacityMeasureExt' for type 'eml22:CationExchangeCapacityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasureExt (-322)

#endif

/* eml22__CationExchangeCapacityMeasure has binding name 'eml22__CationExchangeCapacityMeasure' for type 'eml22:CationExchangeCapacityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CationExchangeCapacityMeasure (-321)

#endif

/* eml22__CapacitanceMeasureExt has binding name 'eml22__CapacitanceMeasureExt' for type 'eml22:CapacitanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasureExt (-320)

#endif

/* eml22__CapacitanceMeasure has binding name 'eml22__CapacitanceMeasure' for type 'eml22:CapacitanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__CapacitanceMeasure (-319)

#endif

/* eml22__AttenuationPerFrequencyIntervalMeasureExt has binding name 'eml22__AttenuationPerFrequencyIntervalMeasureExt' for type 'eml22:AttenuationPerFrequencyIntervalMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasureExt (-318)

#endif

/* eml22__AttenuationPerFrequencyIntervalMeasure has binding name 'eml22__AttenuationPerFrequencyIntervalMeasure' for type 'eml22:AttenuationPerFrequencyIntervalMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AttenuationPerFrequencyIntervalMeasure (-317)

#endif

/* eml22__AreaPerVolumeMeasureExt has binding name 'eml22__AreaPerVolumeMeasureExt' for type 'eml22:AreaPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasureExt (-316)

#endif

/* eml22__AreaPerVolumeMeasure has binding name 'eml22__AreaPerVolumeMeasure' for type 'eml22:AreaPerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerVolumeMeasure (-315)

#endif

/* eml22__AreaPerTimeMeasureExt has binding name 'eml22__AreaPerTimeMeasureExt' for type 'eml22:AreaPerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasureExt (-314)

#endif

/* eml22__AreaPerTimeMeasure has binding name 'eml22__AreaPerTimeMeasure' for type 'eml22:AreaPerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerTimeMeasure (-313)

#endif

/* eml22__AreaPerMassMeasureExt has binding name 'eml22__AreaPerMassMeasureExt' for type 'eml22:AreaPerMassMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasureExt (-312)

#endif

/* eml22__AreaPerMassMeasure has binding name 'eml22__AreaPerMassMeasure' for type 'eml22:AreaPerMassMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerMassMeasure (-311)

#endif

/* eml22__AreaPerCountMeasureExt has binding name 'eml22__AreaPerCountMeasureExt' for type 'eml22:AreaPerCountMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasureExt (-310)

#endif

/* eml22__AreaPerCountMeasure has binding name 'eml22__AreaPerCountMeasure' for type 'eml22:AreaPerCountMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerCountMeasure (-309)

#endif

/* eml22__AreaPerAreaMeasureExt has binding name 'eml22__AreaPerAreaMeasureExt' for type 'eml22:AreaPerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasureExt (-308)

#endif

/* eml22__AreaPerAreaMeasure has binding name 'eml22__AreaPerAreaMeasure' for type 'eml22:AreaPerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAreaMeasure (-307)

#endif

/* eml22__AreaPerAmountOfSubstanceMeasureExt has binding name 'eml22__AreaPerAmountOfSubstanceMeasureExt' for type 'eml22:AreaPerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasureExt (-306)

#endif

/* eml22__AreaPerAmountOfSubstanceMeasure has binding name 'eml22__AreaPerAmountOfSubstanceMeasure' for type 'eml22:AreaPerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaPerAmountOfSubstanceMeasure (-305)

#endif

/* eml22__AreaMeasureExt has binding name 'eml22__AreaMeasureExt' for type 'eml22:AreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasureExt (-304)

#endif

/* eml22__AreaMeasure has binding name 'eml22__AreaMeasure' for type 'eml22:AreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AreaMeasure (-303)

#endif

/* eml22__APINeutronMeasureExt has binding name 'eml22__APINeutronMeasureExt' for type 'eml22:APINeutronMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasureExt (-302)

#endif

/* eml22__APINeutronMeasure has binding name 'eml22__APINeutronMeasure' for type 'eml22:APINeutronMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APINeutronMeasure (-301)

#endif

/* eml22__APIGravityMeasureExt has binding name 'eml22__APIGravityMeasureExt' for type 'eml22:APIGravityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasureExt (-300)

#endif

/* eml22__APIGravityMeasure has binding name 'eml22__APIGravityMeasure' for type 'eml22:APIGravityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGravityMeasure (-299)

#endif

/* eml22__APIGammaRayMeasureExt has binding name 'eml22__APIGammaRayMeasureExt' for type 'eml22:APIGammaRayMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasureExt (-298)

#endif

/* eml22__APIGammaRayMeasure has binding name 'eml22__APIGammaRayMeasure' for type 'eml22:APIGammaRayMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__APIGammaRayMeasure (-297)

#endif

/* eml22__AngularVelocityMeasureExt has binding name 'eml22__AngularVelocityMeasureExt' for type 'eml22:AngularVelocityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasureExt (-296)

#endif

/* eml22__AngularVelocityMeasure has binding name 'eml22__AngularVelocityMeasure' for type 'eml22:AngularVelocityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularVelocityMeasure (-295)

#endif

/* eml22__AngularAccelerationMeasureExt has binding name 'eml22__AngularAccelerationMeasureExt' for type 'eml22:AngularAccelerationMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasureExt (-294)

#endif

/* eml22__AngularAccelerationMeasure has binding name 'eml22__AngularAccelerationMeasure' for type 'eml22:AngularAccelerationMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AngularAccelerationMeasure (-293)

#endif

/* eml22__AnglePerVolumeMeasureExt has binding name 'eml22__AnglePerVolumeMeasureExt' for type 'eml22:AnglePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasureExt (-292)

#endif

/* eml22__AnglePerVolumeMeasure has binding name 'eml22__AnglePerVolumeMeasure' for type 'eml22:AnglePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerVolumeMeasure (-291)

#endif

/* eml22__AnglePerLengthMeasureExt has binding name 'eml22__AnglePerLengthMeasureExt' for type 'eml22:AnglePerLengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasureExt (-290)

#endif

/* eml22__AnglePerLengthMeasure has binding name 'eml22__AnglePerLengthMeasure' for type 'eml22:AnglePerLengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AnglePerLengthMeasure (-289)

#endif

/* eml22__AmountOfSubstancePerVolumeMeasureExt has binding name 'eml22__AmountOfSubstancePerVolumeMeasureExt' for type 'eml22:AmountOfSubstancePerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasureExt (-288)

#endif

/* eml22__AmountOfSubstancePerVolumeMeasure has binding name 'eml22__AmountOfSubstancePerVolumeMeasure' for type 'eml22:AmountOfSubstancePerVolumeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerVolumeMeasure (-287)

#endif

/* eml22__AmountOfSubstancePerTimePerAreaMeasureExt has binding name 'eml22__AmountOfSubstancePerTimePerAreaMeasureExt' for type 'eml22:AmountOfSubstancePerTimePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasureExt (-286)

#endif

/* eml22__AmountOfSubstancePerTimePerAreaMeasure has binding name 'eml22__AmountOfSubstancePerTimePerAreaMeasure' for type 'eml22:AmountOfSubstancePerTimePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimePerAreaMeasure (-285)

#endif

/* eml22__AmountOfSubstancePerTimeMeasureExt has binding name 'eml22__AmountOfSubstancePerTimeMeasureExt' for type 'eml22:AmountOfSubstancePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasureExt (-284)

#endif

/* eml22__AmountOfSubstancePerTimeMeasure has binding name 'eml22__AmountOfSubstancePerTimeMeasure' for type 'eml22:AmountOfSubstancePerTimeMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerTimeMeasure (-283)

#endif

/* eml22__AmountOfSubstancePerAreaMeasureExt has binding name 'eml22__AmountOfSubstancePerAreaMeasureExt' for type 'eml22:AmountOfSubstancePerAreaMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasureExt (-282)

#endif

/* eml22__AmountOfSubstancePerAreaMeasure has binding name 'eml22__AmountOfSubstancePerAreaMeasure' for type 'eml22:AmountOfSubstancePerAreaMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAreaMeasure (-281)

#endif

/* eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasureExt (-280)

#endif

/* eml22__AmountOfSubstancePerAmountOfSubstanceMeasure has binding name 'eml22__AmountOfSubstancePerAmountOfSubstanceMeasure' for type 'eml22:AmountOfSubstancePerAmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstancePerAmountOfSubstanceMeasure (-279)

#endif

/* eml22__AmountOfSubstanceMeasureExt has binding name 'eml22__AmountOfSubstanceMeasureExt' for type 'eml22:AmountOfSubstanceMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasureExt (-278)

#endif

/* eml22__AmountOfSubstanceMeasure has binding name 'eml22__AmountOfSubstanceMeasure' for type 'eml22:AmountOfSubstanceMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AmountOfSubstanceMeasure (-277)

#endif

/* eml22__ActivityOfRadioactivityMeasureExt has binding name 'eml22__ActivityOfRadioactivityMeasureExt' for type 'eml22:ActivityOfRadioactivityMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasureExt (-276)

#endif

/* eml22__ActivityOfRadioactivityMeasure has binding name 'eml22__ActivityOfRadioactivityMeasure' for type 'eml22:ActivityOfRadioactivityMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__ActivityOfRadioactivityMeasure (-275)

#endif

/* eml22__AbsorbedDoseMeasureExt has binding name 'eml22__AbsorbedDoseMeasureExt' for type 'eml22:AbsorbedDoseMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasureExt (-274)

#endif

/* eml22__AbsorbedDoseMeasure has binding name 'eml22__AbsorbedDoseMeasure' for type 'eml22:AbsorbedDoseMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbsorbedDoseMeasure (-273)

#endif

/* eml22__TvdInterval has binding name 'eml22__TvdInterval' for type 'eml22:TvdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__TvdInterval (-272)

#endif

/* eml22__StringMeasure has binding name 'eml22__StringMeasure' for type 'eml22:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringMeasure (-271)

#endif

/* eml22__StringExternalArray has binding name 'eml22__StringExternalArray' for type 'eml22:StringExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringExternalArray (-270)

#endif

/* eml22__StringConstantArray has binding name 'eml22__StringConstantArray' for type 'eml22:StringConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__StringConstantArray (-269)

#endif

/* eml22__MdInterval has binding name 'eml22__MdInterval' for type 'eml22:MdInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval
#define SOAP_TYPE_gsoap_eml2_2_eml22__MdInterval (-268)

#endif

/* eml22__JaggedArray has binding name 'eml22__JaggedArray' for type 'eml22:JaggedArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__JaggedArray (-267)

#endif

/* eml22__IntegerRangeArray has binding name 'eml22__IntegerRangeArray' for type 'eml22:IntegerRangeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerRangeArray (-266)

#endif

/* eml22__IntegerLatticeArray has binding name 'eml22__IntegerLatticeArray' for type 'eml22:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerLatticeArray (-265)

#endif

/* eml22__IntegerExternalArray has binding name 'eml22__IntegerExternalArray' for type 'eml22:IntegerExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerExternalArray (-264)

#endif

/* eml22__IntegerConstantArray has binding name 'eml22__IntegerConstantArray' for type 'eml22:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerConstantArray (-263)

#endif

/* eml22__IntegerArrayFromBooleanMaskArray has binding name 'eml22__IntegerArrayFromBooleanMaskArray' for type 'eml22:IntegerArrayFromBooleanMaskArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__IntegerArrayFromBooleanMaskArray (-262)

#endif

/* eml22__GenericMeasure has binding name 'eml22__GenericMeasure' for type 'eml22:GenericMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure
#define SOAP_TYPE_gsoap_eml2_2_eml22__GenericMeasure (-261)

#endif

/* eml22__FloatingPointLatticeArray has binding name 'eml22__FloatingPointLatticeArray' for type 'eml22:FloatingPointLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointLatticeArray (-260)

#endif

/* eml22__FloatingPointExternalArray has binding name 'eml22__FloatingPointExternalArray' for type 'eml22:FloatingPointExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointExternalArray (-259)

#endif

/* eml22__FloatingPointConstantArray has binding name 'eml22__FloatingPointConstantArray' for type 'eml22:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatingPointConstantArray (-258)

#endif

/* eml22__FloatExternalArray has binding name 'eml22__FloatExternalArray' for type 'eml22:FloatExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__FloatExternalArray (-257)

#endif

/* eml22__DummyType has binding name 'eml22__DummyType' for type 'eml22:DummyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DummyType
#define SOAP_TYPE_gsoap_eml2_2_eml22__DummyType (-256)

#endif

/* eml22__DoubleExternalArray has binding name 'eml22__DoubleExternalArray' for type 'eml22:DoubleExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__DoubleExternalArray (-255)

#endif

/* eml22__BooleanExternalArray has binding name 'eml22__BooleanExternalArray' for type 'eml22:BooleanExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanExternalArray (-254)

#endif

/* eml22__BooleanConstantArray has binding name 'eml22__BooleanConstantArray' for type 'eml22:BooleanConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanConstantArray (-253)

#endif

/* eml22__BooleanArrayFromIndexArray has binding name 'eml22__BooleanArrayFromIndexArray' for type 'eml22:BooleanArrayFromIndexArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__BooleanArrayFromIndexArray (-252)

#endif

/* eml22__AuthorityQualifiedName has binding name 'eml22__AuthorityQualifiedName' for type 'eml22:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_2_eml22__AuthorityQualifiedName (-251)

#endif

/* eml22__AbstractValueArray has binding name 'eml22__AbstractValueArray' for type 'eml22:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractValueArray (-250)

#endif

/* eml22__AbstractStringArray has binding name 'eml22__AbstractStringArray' for type 'eml22:AbstractStringArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractStringArray (-249)

#endif

/* eml22__AbstractNumericArray has binding name 'eml22__AbstractNumericArray' for type 'eml22:AbstractNumericArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractNumericArray (-248)

#endif

/* eml22__AbstractIntegerArray has binding name 'eml22__AbstractIntegerArray' for type 'eml22:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractIntegerArray (-247)

#endif

/* eml22__AbstractFloatingPointArray has binding name 'eml22__AbstractFloatingPointArray' for type 'eml22:AbstractFloatingPointArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractFloatingPointArray (-246)

#endif

/* eml22__AbstractBooleanArray has binding name 'eml22__AbstractBooleanArray' for type 'eml22:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractBooleanArray (-245)

#endif

/* eml22__ObjectAlias has binding name 'eml22__ObjectAlias' for type 'eml22:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_eml22__ObjectAlias (-244)

#endif

/* eml22__ExtensionNameValue has binding name 'eml22__ExtensionNameValue' for type 'eml22:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_eml22__ExtensionNameValue (-243)

#endif

/* eml22__CustomData has binding name 'eml22__CustomData' for type 'eml22:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__CustomData
#define SOAP_TYPE_gsoap_eml2_2_eml22__CustomData (-242)

#endif

/* eml22__Citation has binding name 'eml22__Citation' for type 'eml22:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__Citation
#define SOAP_TYPE_gsoap_eml2_2_eml22__Citation (-241)

#endif

/* eml22__AbstractObject has binding name 'eml22__AbstractObject' for type 'eml22:AbstractObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject
#define SOAP_TYPE_gsoap_eml2_2_eml22__AbstractObject (-240)

#endif

/* resqml2__StreamlineWellbores has binding name 'resqml2__StreamlineWellbores' for type 'resqml2:StreamlineWellbores' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineWellbores
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlineWellbores (-239)

#endif

/* resqml2__StreamlinesRepresentation has binding name 'resqml2__StreamlinesRepresentation' for type 'resqml2:StreamlinesRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesRepresentation (-238)

#endif

/* resqml2__StreamlinesFeature has binding name 'resqml2__StreamlinesFeature' for type 'resqml2:StreamlinesFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StreamlinesFeature (-237)

#endif

/* resqml2__StringTableLookup has binding name 'resqml2__StringTableLookup' for type 'resqml2:StringTableLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StringTableLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StringTableLookup (-236)

#endif

/* resqml2__StringLookup has binding name 'resqml2__StringLookup' for type 'resqml2:StringLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StringLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StringLookup (-235)

#endif

/* resqml2__PropertySet has binding name 'resqml2__PropertySet' for type 'resqml2:PropertySet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PropertySet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PropertySet (-234)

#endif

/* resqml2__PropertyKindFacet has binding name 'resqml2__PropertyKindFacet' for type 'resqml2:PropertyKindFacet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PropertyKindFacet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PropertyKindFacet (-233)

#endif

/* resqml2__PointsProperty has binding name 'resqml2__PointsProperty' for type 'resqml2:PointsProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PointsProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PointsProperty (-232)

#endif

/* resqml2__PatchOfValues has binding name 'resqml2__PatchOfValues' for type 'resqml2:PatchOfValues' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfValues
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfValues (-231)

#endif

/* resqml2__PatchOfPoints has binding name 'resqml2__PatchOfPoints' for type 'resqml2:PatchOfPoints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfPoints
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfPoints (-230)

#endif

/* resqml2__DoubleTableLookup has binding name 'resqml2__DoubleTableLookup' for type 'resqml2:DoubleTableLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleTableLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleTableLookup (-229)

#endif

/* resqml2__DoubleLookup has binding name 'resqml2__DoubleLookup' for type 'resqml2:DoubleLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DoubleLookup (-228)

#endif

/* resqml2__DiscreteProperty has binding name 'resqml2__DiscreteProperty' for type 'resqml2:DiscreteProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteProperty (-227)

#endif

/* resqml2__ContinuousProperty has binding name 'resqml2__ContinuousProperty' for type 'resqml2:ContinuousProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousProperty (-226)

#endif

/* resqml2__CommentProperty has binding name 'resqml2__CommentProperty' for type 'resqml2:CommentProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CommentProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CommentProperty (-225)

#endif

/* resqml2__CategoricalProperty has binding name 'resqml2__CategoricalProperty' for type 'resqml2:CategoricalProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CategoricalProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CategoricalProperty (-224)

#endif

/* resqml2__BooleanProperty has binding name 'resqml2__BooleanProperty' for type 'resqml2:BooleanProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanProperty (-223)

#endif

/* resqml2__BooleanArrayFromDiscretePropertyArray has binding name 'resqml2__BooleanArrayFromDiscretePropertyArray' for type 'resqml2:BooleanArrayFromDiscretePropertyArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanArrayFromDiscretePropertyArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BooleanArrayFromDiscretePropertyArray (-222)

#endif

/* resqml2__AbstractValuesProperty has binding name 'resqml2__AbstractValuesProperty' for type 'resqml2:AbstractValuesProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractValuesProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractValuesProperty (-221)

#endif

/* resqml2__AbstractPropertyLookup has binding name 'resqml2__AbstractPropertyLookup' for type 'resqml2:AbstractPropertyLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPropertyLookup
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPropertyLookup (-220)

#endif

/* resqml2__AbstractProperty has binding name 'resqml2__AbstractProperty' for type 'resqml2:AbstractProperty' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractProperty
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractProperty (-219)

#endif

/* resqml2__SubRepresentationPatch has binding name 'resqml2__SubRepresentationPatch' for type 'resqml2:SubRepresentationPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentationPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentationPatch (-218)

#endif

/* resqml2__SubRepresentation has binding name 'resqml2__SubRepresentation' for type 'resqml2:SubRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubRepresentation (-217)

#endif

/* resqml2__RepresentationSetRepresentation has binding name 'resqml2__RepresentationSetRepresentation' for type 'resqml2:RepresentationSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationSetRepresentation (-216)

#endif

/* resqml2__RepresentationIdentitySet has binding name 'resqml2__RepresentationIdentitySet' for type 'resqml2:RepresentationIdentitySet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentitySet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentitySet (-215)

#endif

/* resqml2__RepresentationIdentity has binding name 'resqml2__RepresentationIdentity' for type 'resqml2:RepresentationIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentity
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RepresentationIdentity (-214)

#endif

/* resqml2__RedefinedGeometryRepresentation has binding name 'resqml2__RedefinedGeometryRepresentation' for type 'resqml2:RedefinedGeometryRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RedefinedGeometryRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RedefinedGeometryRepresentation (-213)

#endif

/* resqml2__PolylineSetRepresentation has binding name 'resqml2__PolylineSetRepresentation' for type 'resqml2:PolylineSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetRepresentation (-212)

#endif

/* resqml2__PolylineSetPatch has binding name 'resqml2__PolylineSetPatch' for type 'resqml2:PolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineSetPatch (-211)

#endif

/* resqml2__PatchOfGeometry has binding name 'resqml2__PatchOfGeometry' for type 'resqml2:PatchOfGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchOfGeometry (-210)

#endif

/* resqml2__Patch1d has binding name 'resqml2__Patch1d' for type 'resqml2:Patch1d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Patch1d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Patch1d (-209)

#endif

/* resqml2__Patch has binding name 'resqml2__Patch' for type 'resqml2:Patch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Patch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Patch (-208)

#endif

/* resqml2__ElementIndices has binding name 'resqml2__ElementIndices' for type 'resqml2:ElementIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIndices
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIndices (-207)

#endif

/* resqml2__ElementIdentity has binding name 'resqml2__ElementIdentity' for type 'resqml2:ElementIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIdentity
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ElementIdentity (-206)

#endif

/* resqml2__AbstractRepresentation has binding name 'resqml2__AbstractRepresentation' for type 'resqml2:AbstractRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractRepresentation (-205)

#endif

/* resqml2__VariableSubnodePatch has binding name 'resqml2__VariableSubnodePatch' for type 'resqml2:VariableSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__VariableSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__VariableSubnodePatch (-204)

#endif

/* resqml2__UnstructuredSubnodeTopology has binding name 'resqml2__UnstructuredSubnodeTopology' for type 'resqml2:UnstructuredSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredSubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredSubnodeTopology (-203)

#endif

/* resqml2__UnstructuredGridRepresentation has binding name 'resqml2__UnstructuredGridRepresentation' for type 'resqml2:UnstructuredGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridRepresentation (-202)

#endif

/* resqml2__UnstructuredGridHingeNodeFaces has binding name 'resqml2__UnstructuredGridHingeNodeFaces' for type 'resqml2:UnstructuredGridHingeNodeFaces' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridHingeNodeFaces
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridHingeNodeFaces (-201)

#endif

/* resqml2__UnstructuredGridGeometry has binding name 'resqml2__UnstructuredGridGeometry' for type 'resqml2:UnstructuredGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGridGeometry (-200)

#endif

/* resqml2__UnstructuredGpGridPatch has binding name 'resqml2__UnstructuredGpGridPatch' for type 'resqml2:UnstructuredGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredGpGridPatch (-199)

#endif

/* resqml2__UnstructuredColumnLayerGridRepresentation has binding name 'resqml2__UnstructuredColumnLayerGridRepresentation' for type 'resqml2:UnstructuredColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridRepresentation (-198)

#endif

/* resqml2__UnstructuredColumnLayerGridGeometry has binding name 'resqml2__UnstructuredColumnLayerGridGeometry' for type 'resqml2:UnstructuredColumnLayerGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGridGeometry (-197)

#endif

/* resqml2__UnstructuredColumnLayerGpGridPatch has binding name 'resqml2__UnstructuredColumnLayerGpGridPatch' for type 'resqml2:UnstructuredColumnLayerGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnLayerGpGridPatch (-196)

#endif

/* resqml2__UnstructuredColumnEdges has binding name 'resqml2__UnstructuredColumnEdges' for type 'resqml2:UnstructuredColumnEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UnstructuredColumnEdges (-195)

#endif

/* resqml2__UniformSubnodePatch has binding name 'resqml2__UniformSubnodePatch' for type 'resqml2:UniformSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__UniformSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__UniformSubnodePatch (-194)

#endif

/* resqml2__TruncationCellPatch has binding name 'resqml2__TruncationCellPatch' for type 'resqml2:TruncationCellPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TruncationCellPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TruncationCellPatch (-193)

#endif

/* resqml2__TruncatedUnstructuredColumnLayerGridRepresentation has binding name 'resqml2__TruncatedUnstructuredColumnLayerGridRepresentation' for type 'resqml2:TruncatedUnstructuredColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedUnstructuredColumnLayerGridRepresentation (-192)

#endif

/* resqml2__TruncatedIjkGridRepresentation has binding name 'resqml2__TruncatedIjkGridRepresentation' for type 'resqml2:TruncatedIjkGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedIjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TruncatedIjkGridRepresentation (-191)

#endif

/* resqml2__SubnodeTopology has binding name 'resqml2__SubnodeTopology' for type 'resqml2:SubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodeTopology (-190)

#endif

/* resqml2__SubnodePatch has binding name 'resqml2__SubnodePatch' for type 'resqml2:SubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SubnodePatch (-189)

#endif

/* resqml2__SplitNodePatch has binding name 'resqml2__SplitNodePatch' for type 'resqml2:SplitNodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitNodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitNodePatch (-188)

#endif

/* resqml2__SplitFaces has binding name 'resqml2__SplitFaces' for type 'resqml2:SplitFaces' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitFaces
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitFaces (-187)

#endif

/* resqml2__SplitEdges has binding name 'resqml2__SplitEdges' for type 'resqml2:SplitEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitEdges (-186)

#endif

/* resqml2__SplitColumnEdges has binding name 'resqml2__SplitColumnEdges' for type 'resqml2:SplitColumnEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SplitColumnEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SplitColumnEdges (-185)

#endif

/* resqml2__Regrid has binding name 'resqml2__Regrid' for type 'resqml2:Regrid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Regrid
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Regrid (-184)

#endif

/* resqml2__OverlapVolume has binding name 'resqml2__OverlapVolume' for type 'resqml2:OverlapVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__OverlapVolume
#define SOAP_TYPE_gsoap_eml2_2_resqml2__OverlapVolume (-183)

#endif

/* resqml2__LocalGridSet has binding name 'resqml2__LocalGridSet' for type 'resqml2:LocalGridSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LocalGridSet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LocalGridSet (-182)

#endif

/* resqml2__KGaps has binding name 'resqml2__KGaps' for type 'resqml2:KGaps' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__KGaps
#define SOAP_TYPE_gsoap_eml2_2_resqml2__KGaps (-181)

#endif

/* resqml2__IntervalStratigraphicUnits has binding name 'resqml2__IntervalStratigraphicUnits' for type 'resqml2:IntervalStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalStratigraphicUnits (-180)

#endif

/* resqml2__Intervals has binding name 'resqml2__Intervals' for type 'resqml2:Intervals' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Intervals
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Intervals (-179)

#endif

/* resqml2__IntervalGridCells has binding name 'resqml2__IntervalGridCells' for type 'resqml2:IntervalGridCells' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalGridCells
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IntervalGridCells (-178)

#endif

/* resqml2__IjkParentWindow has binding name 'resqml2__IjkParentWindow' for type 'resqml2:IjkParentWindow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkParentWindow (-177)

#endif

/* resqml2__IjkGridRepresentation has binding name 'resqml2__IjkGridRepresentation' for type 'resqml2:IjkGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridRepresentation (-176)

#endif

/* resqml2__IjkGridGeometry has binding name 'resqml2__IjkGridGeometry' for type 'resqml2:IjkGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGridGeometry (-175)

#endif

/* resqml2__IjkGpGridPatch has binding name 'resqml2__IjkGpGridPatch' for type 'resqml2:IjkGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjkGpGridPatch (-174)

#endif

/* resqml2__IjGaps has binding name 'resqml2__IjGaps' for type 'resqml2:IjGaps' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__IjGaps
#define SOAP_TYPE_gsoap_eml2_2_resqml2__IjGaps (-173)

#endif

/* resqml2__GridConnectionSetRepresentation has binding name 'resqml2__GridConnectionSetRepresentation' for type 'resqml2:GridConnectionSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GridConnectionSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GridConnectionSetRepresentation (-172)

#endif

/* resqml2__GpGridRepresentation has binding name 'resqml2__GpGridRepresentation' for type 'resqml2:GpGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GpGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GpGridRepresentation (-171)

#endif

/* resqml2__Edges has binding name 'resqml2__Edges' for type 'resqml2:Edges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Edges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Edges (-170)

#endif

/* resqml2__ConnectionInterpretations has binding name 'resqml2__ConnectionInterpretations' for type 'resqml2:ConnectionInterpretations' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ConnectionInterpretations
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ConnectionInterpretations (-169)

#endif

/* resqml2__ColumnSubnodePatch has binding name 'resqml2__ColumnSubnodePatch' for type 'resqml2:ColumnSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnSubnodePatch (-168)

#endif

/* resqml2__ColumnLayerSubnodeTopology has binding name 'resqml2__ColumnLayerSubnodeTopology' for type 'resqml2:ColumnLayerSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSubnodeTopology (-167)

#endif

/* resqml2__ColumnLayerSplitCoordinateLines has binding name 'resqml2__ColumnLayerSplitCoordinateLines' for type 'resqml2:ColumnLayerSplitCoordinateLines' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSplitCoordinateLines
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerSplitCoordinateLines (-166)

#endif

/* resqml2__ColumnLayerParentWindow has binding name 'resqml2__ColumnLayerParentWindow' for type 'resqml2:ColumnLayerParentWindow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerParentWindow (-165)

#endif

/* resqml2__ColumnLayerGpGrid has binding name 'resqml2__ColumnLayerGpGrid' for type 'resqml2:ColumnLayerGpGrid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerGpGrid
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColumnLayerGpGrid (-164)

#endif

/* resqml2__CellParentWindow has binding name 'resqml2__CellParentWindow' for type 'resqml2:CellParentWindow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellParentWindow (-163)

#endif

/* resqml2__CellOverlap has binding name 'resqml2__CellOverlap' for type 'resqml2:CellOverlap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellOverlap
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellOverlap (-162)

#endif

/* resqml2__CellFluidPhaseUnits has binding name 'resqml2__CellFluidPhaseUnits' for type 'resqml2:CellFluidPhaseUnits' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CellFluidPhaseUnits
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CellFluidPhaseUnits (-161)

#endif

/* resqml2__AlternateCellIndex has binding name 'resqml2__AlternateCellIndex' for type 'resqml2:AlternateCellIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AlternateCellIndex
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AlternateCellIndex (-160)

#endif

/* resqml2__AdditionalGridTopology has binding name 'resqml2__AdditionalGridTopology' for type 'resqml2:AdditionalGridTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridTopology
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridTopology (-159)

#endif

/* resqml2__AdditionalGridPoints has binding name 'resqml2__AdditionalGridPoints' for type 'resqml2:AdditionalGridPoints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridPoints
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AdditionalGridPoints (-158)

#endif

/* resqml2__Activation has binding name 'resqml2__Activation' for type 'resqml2:Activation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Activation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Activation (-157)

#endif

/* resqml2__AbstractTruncatedColumnLayerGridRepresentation has binding name 'resqml2__AbstractTruncatedColumnLayerGridRepresentation' for type 'resqml2:AbstractTruncatedColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTruncatedColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTruncatedColumnLayerGridRepresentation (-156)

#endif

/* resqml2__AbstractParentWindow has binding name 'resqml2__AbstractParentWindow' for type 'resqml2:AbstractParentWindow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParentWindow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParentWindow (-155)

#endif

/* resqml2__AbstractGridRepresentation has binding name 'resqml2__AbstractGridRepresentation' for type 'resqml2:AbstractGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridRepresentation (-154)

#endif

/* resqml2__AbstractGridGeometry has binding name 'resqml2__AbstractGridGeometry' for type 'resqml2:AbstractGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGridGeometry (-153)

#endif

/* resqml2__AbstractColumnLayerGridRepresentation has binding name 'resqml2__AbstractColumnLayerGridRepresentation' for type 'resqml2:AbstractColumnLayerGridRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridRepresentation (-152)

#endif

/* resqml2__AbstractColumnLayerGridGeometry has binding name 'resqml2__AbstractColumnLayerGridGeometry' for type 'resqml2:AbstractColumnLayerGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractColumnLayerGridGeometry (-151)

#endif

/* resqml2__ShotPointLineFeature has binding name 'resqml2__ShotPointLineFeature' for type 'resqml2:ShotPointLineFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ShotPointLineFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ShotPointLineFeature (-150)

#endif

/* resqml2__SeismicLineSetFeature has binding name 'resqml2__SeismicLineSetFeature' for type 'resqml2:SeismicLineSetFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLineSetFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLineSetFeature (-149)

#endif

/* resqml2__SeismicLatticeSetFeature has binding name 'resqml2__SeismicLatticeSetFeature' for type 'resqml2:SeismicLatticeSetFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeSetFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeSetFeature (-148)

#endif

/* resqml2__SeismicLatticeFeature has binding name 'resqml2__SeismicLatticeFeature' for type 'resqml2:SeismicLatticeFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicLatticeFeature (-147)

#endif

/* resqml2__Seismic3dPostStackRepresentation has binding name 'resqml2__Seismic3dPostStackRepresentation' for type 'resqml2:Seismic3dPostStackRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dPostStackRepresentation (-146)

#endif

/* resqml2__Seismic3dCoordinates has binding name 'resqml2__Seismic3dCoordinates' for type 'resqml2:Seismic3dCoordinates' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dCoordinates
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic3dCoordinates (-145)

#endif

/* resqml2__Seismic2dPostStackRepresentation has binding name 'resqml2__Seismic2dPostStackRepresentation' for type 'resqml2:Seismic2dPostStackRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dPostStackRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dPostStackRepresentation (-144)

#endif

/* resqml2__Seismic2dCoordinates has binding name 'resqml2__Seismic2dCoordinates' for type 'resqml2:Seismic2dCoordinates' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dCoordinates
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Seismic2dCoordinates (-143)

#endif

/* resqml2__CmpLineFeature has binding name 'resqml2__CmpLineFeature' for type 'resqml2:CmpLineFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CmpLineFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CmpLineFeature (-142)

#endif

/* resqml2__AbstractSeismicSurveyFeature has binding name 'resqml2__AbstractSeismicSurveyFeature' for type 'resqml2:AbstractSeismicSurveyFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicSurveyFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicSurveyFeature (-141)

#endif

/* resqml2__AbstractSeismicLineFeature has binding name 'resqml2__AbstractSeismicLineFeature' for type 'resqml2:AbstractSeismicLineFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicLineFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicLineFeature (-140)

#endif

/* resqml2__AbstractSeismicCoordinates has binding name 'resqml2__AbstractSeismicCoordinates' for type 'resqml2:AbstractSeismicCoordinates' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicCoordinates
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSeismicCoordinates (-139)

#endif

/* resqml2__TiltedPlaneGeometry has binding name 'resqml2__TiltedPlaneGeometry' for type 'resqml2:TiltedPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TiltedPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TiltedPlaneGeometry (-138)

#endif

/* resqml2__ThreePoint3d has binding name 'resqml2__ThreePoint3d' for type 'resqml2:ThreePoint3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ThreePoint3d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ThreePoint3d (-137)

#endif

/* resqml2__SinglePointGeometry has binding name 'resqml2__SinglePointGeometry' for type 'resqml2:SinglePointGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SinglePointGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SinglePointGeometry (-136)

#endif

/* resqml2__PointGeometry has binding name 'resqml2__PointGeometry' for type 'resqml2:PointGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PointGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PointGeometry (-135)

#endif

/* resqml2__Point3dZValueArray has binding name 'resqml2__Point3dZValueArray' for type 'resqml2:Point3dZValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dZValueArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dZValueArray (-134)

#endif

/* resqml2__Point3dParametricArray has binding name 'resqml2__Point3dParametricArray' for type 'resqml2:Point3dParametricArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dParametricArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dParametricArray (-133)

#endif

/* resqml2__Point3dOffset has binding name 'resqml2__Point3dOffset' for type 'resqml2:Point3dOffset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dOffset
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dOffset (-132)

#endif

/* resqml2__Point3dLatticeArray has binding name 'resqml2__Point3dLatticeArray' for type 'resqml2:Point3dLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dLatticeArray (-131)

#endif

/* resqml2__Point3dFromRepresentationLatticeArray has binding name 'resqml2__Point3dFromRepresentationLatticeArray' for type 'resqml2:Point3dFromRepresentationLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dFromRepresentationLatticeArray (-130)

#endif

/* resqml2__Point3dExternalArray has binding name 'resqml2__Point3dExternalArray' for type 'resqml2:Point3dExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dExternalArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3dExternalArray (-129)

#endif

/* resqml2__Point3d has binding name 'resqml2__Point3d' for type 'resqml2:Point3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point3d
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point3d (-128)

#endif

/* resqml2__Point2dExternalArray has binding name 'resqml2__Point2dExternalArray' for type 'resqml2:Point2dExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Point2dExternalArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Point2dExternalArray (-127)

#endif

/* resqml2__ParametricLineIntersections has binding name 'resqml2__ParametricLineIntersections' for type 'resqml2:ParametricLineIntersections' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineIntersections
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineIntersections (-126)

#endif

/* resqml2__ParametricLineGeometry has binding name 'resqml2__ParametricLineGeometry' for type 'resqml2:ParametricLineGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineGeometry (-125)

#endif

/* resqml2__ParametricLineFromRepresentationLatticeArray has binding name 'resqml2__ParametricLineFromRepresentationLatticeArray' for type 'resqml2:ParametricLineFromRepresentationLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationLatticeArray (-124)

#endif

/* resqml2__ParametricLineFromRepresentationGeometry has binding name 'resqml2__ParametricLineFromRepresentationGeometry' for type 'resqml2:ParametricLineFromRepresentationGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineFromRepresentationGeometry (-123)

#endif

/* resqml2__ParametricLineArray has binding name 'resqml2__ParametricLineArray' for type 'resqml2:ParametricLineArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ParametricLineArray (-122)

#endif

/* resqml2__HorizontalPlaneGeometry has binding name 'resqml2__HorizontalPlaneGeometry' for type 'resqml2:HorizontalPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HorizontalPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HorizontalPlaneGeometry (-121)

#endif

/* resqml2__AbstractPoint3dArray has binding name 'resqml2__AbstractPoint3dArray' for type 'resqml2:AbstractPoint3dArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPoint3dArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPoint3dArray (-120)

#endif

/* resqml2__AbstractPlaneGeometry has binding name 'resqml2__AbstractPlaneGeometry' for type 'resqml2:AbstractPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractPlaneGeometry (-119)

#endif

/* resqml2__AbstractParametricLineGeometry has binding name 'resqml2__AbstractParametricLineGeometry' for type 'resqml2:AbstractParametricLineGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineGeometry (-118)

#endif

/* resqml2__AbstractParametricLineArray has binding name 'resqml2__AbstractParametricLineArray' for type 'resqml2:AbstractParametricLineArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineArray
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractParametricLineArray (-117)

#endif

/* resqml2__AbstractGeometry has binding name 'resqml2__AbstractGeometry' for type 'resqml2:AbstractGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGeometry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGeometry (-116)

#endif

/* resqml2__VolumeShell has binding name 'resqml2__VolumeShell' for type 'resqml2:VolumeShell' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeShell
#define SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeShell (-115)

#endif

/* resqml2__VolumeRegion has binding name 'resqml2__VolumeRegion' for type 'resqml2:VolumeRegion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeRegion
#define SOAP_TYPE_gsoap_eml2_2_resqml2__VolumeRegion (-114)

#endif

/* resqml2__TriangulatedSetRepresentation has binding name 'resqml2__TriangulatedSetRepresentation' for type 'resqml2:TriangulatedSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TriangulatedSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TriangulatedSetRepresentation (-113)

#endif

/* resqml2__TrianglePatch has binding name 'resqml2__TrianglePatch' for type 'resqml2:TrianglePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TrianglePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TrianglePatch (-112)

#endif

/* resqml2__SealedVolumeFrameworkRepresentation has binding name 'resqml2__SealedVolumeFrameworkRepresentation' for type 'resqml2:SealedVolumeFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SealedVolumeFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SealedVolumeFrameworkRepresentation (-111)

#endif

/* resqml2__SealedSurfaceFrameworkRepresentation has binding name 'resqml2__SealedSurfaceFrameworkRepresentation' for type 'resqml2:SealedSurfaceFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SealedSurfaceFrameworkRepresentation (-110)

#endif

/* resqml2__SealedContactRepresentationPart has binding name 'resqml2__SealedContactRepresentationPart' for type 'resqml2:SealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SealedContactRepresentationPart (-109)

#endif

/* resqml2__PolylineRepresentation has binding name 'resqml2__PolylineRepresentation' for type 'resqml2:PolylineRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PolylineRepresentation (-108)

#endif

/* resqml2__PointSetRepresentation has binding name 'resqml2__PointSetRepresentation' for type 'resqml2:PointSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PointSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PointSetRepresentation (-107)

#endif

/* resqml2__PlaneSetRepresentation has binding name 'resqml2__PlaneSetRepresentation' for type 'resqml2:PlaneSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PlaneSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PlaneSetRepresentation (-106)

#endif

/* resqml2__PatchBoundaries has binding name 'resqml2__PatchBoundaries' for type 'resqml2:PatchBoundaries' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__PatchBoundaries
#define SOAP_TYPE_gsoap_eml2_2_resqml2__PatchBoundaries (-105)

#endif

/* resqml2__OrientedMacroFace has binding name 'resqml2__OrientedMacroFace' for type 'resqml2:OrientedMacroFace' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__OrientedMacroFace
#define SOAP_TYPE_gsoap_eml2_2_resqml2__OrientedMacroFace (-104)

#endif

/* resqml2__NonSealedSurfaceFrameworkRepresentation has binding name 'resqml2__NonSealedSurfaceFrameworkRepresentation' for type 'resqml2:NonSealedSurfaceFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedSurfaceFrameworkRepresentation (-103)

#endif

/* resqml2__NonSealedContactRepresentationPart has binding name 'resqml2__NonSealedContactRepresentationPart' for type 'resqml2:NonSealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NonSealedContactRepresentationPart (-102)

#endif

/* resqml2__NodePatch has binding name 'resqml2__NodePatch' for type 'resqml2:NodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__NodePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__NodePatch (-101)

#endif

/* resqml2__Grid2dSetRepresentation has binding name 'resqml2__Grid2dSetRepresentation' for type 'resqml2:Grid2dSetRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dSetRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dSetRepresentation (-100)

#endif

/* resqml2__Grid2dRepresentation has binding name 'resqml2__Grid2dRepresentation' for type 'resqml2:Grid2dRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dRepresentation (-99)

#endif

/* resqml2__Grid2dPatch has binding name 'resqml2__Grid2dPatch' for type 'resqml2:Grid2dPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Grid2dPatch (-98)

#endif

/* resqml2__EdgePatch has binding name 'resqml2__EdgePatch' for type 'resqml2:EdgePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EdgePatch (-97)

#endif

/* resqml2__ContactRepresentationReference has binding name 'resqml2__ContactRepresentationReference' for type 'resqml2:ContactRepresentationReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactRepresentationReference
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactRepresentationReference (-96)

#endif

/* resqml2__ContactPatch has binding name 'resqml2__ContactPatch' for type 'resqml2:ContactPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactPatch
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactPatch (-95)

#endif

/* resqml2__ContactIdentity has binding name 'resqml2__ContactIdentity' for type 'resqml2:ContactIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactIdentity
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactIdentity (-94)

#endif

/* resqml2__AbstractSurfaceRepresentation has binding name 'resqml2__AbstractSurfaceRepresentation' for type 'resqml2:AbstractSurfaceRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceRepresentation (-93)

#endif

/* resqml2__AbstractSurfaceFrameworkRepresentation has binding name 'resqml2__AbstractSurfaceFrameworkRepresentation' for type 'resqml2:AbstractSurfaceFrameworkRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceFrameworkRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractSurfaceFrameworkRepresentation (-92)

#endif

/* resqml2__AbstractContactRepresentationPart has binding name 'resqml2__AbstractContactRepresentationPart' for type 'resqml2:AbstractContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactRepresentationPart (-91)

#endif

/* resqml2__WitsmlWellboreReference has binding name 'resqml2__WitsmlWellboreReference' for type 'resqml2:WitsmlWellboreReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WitsmlWellboreReference
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WitsmlWellboreReference (-90)

#endif

/* resqml2__WellboreTrajectoryRepresentation has binding name 'resqml2__WellboreTrajectoryRepresentation' for type 'resqml2:WellboreTrajectoryRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryRepresentation (-89)

#endif

/* resqml2__WellboreTrajectoryParentIntersection has binding name 'resqml2__WellboreTrajectoryParentIntersection' for type 'resqml2:WellboreTrajectoryParentIntersection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryParentIntersection
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreTrajectoryParentIntersection (-88)

#endif

/* resqml2__WellboreMarkerFrameRepresentation has binding name 'resqml2__WellboreMarkerFrameRepresentation' for type 'resqml2:WellboreMarkerFrameRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarkerFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarkerFrameRepresentation (-87)

#endif

/* resqml2__WellboreMarker has binding name 'resqml2__WellboreMarker' for type 'resqml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreMarker (-86)

#endif

/* resqml2__WellboreInterpretationSet has binding name 'resqml2__WellboreInterpretationSet' for type 'resqml2:WellboreInterpretationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretationSet (-85)

#endif

/* resqml2__WellboreInterpretation has binding name 'resqml2__WellboreInterpretation' for type 'resqml2:WellboreInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreInterpretation (-84)

#endif

/* resqml2__WellboreFrameRepresentation has binding name 'resqml2__WellboreFrameRepresentation' for type 'resqml2:WellboreFrameRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFrameRepresentation (-83)

#endif

/* resqml2__WellboreFeature has binding name 'resqml2__WellboreFeature' for type 'resqml2:WellboreFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__WellboreFeature (-82)

#endif

/* resqml2__TvdInformation has binding name 'resqml2__TvdInformation' for type 'resqml2:TvdInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__TvdInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__TvdInformation (-81)

#endif

/* resqml2__SeismicWellboreFrameRepresentation has binding name 'resqml2__SeismicWellboreFrameRepresentation' for type 'resqml2:SeismicWellboreFrameRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicWellboreFrameRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SeismicWellboreFrameRepresentation (-80)

#endif

/* resqml2__MdDatum has binding name 'resqml2__MdDatum' for type 'resqml2:MdDatum' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MdDatum
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MdDatum (-79)

#endif

/* resqml2__DeviationSurveyRepresentation has binding name 'resqml2__DeviationSurveyRepresentation' for type 'resqml2:DeviationSurveyRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DeviationSurveyRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DeviationSurveyRepresentation (-78)

#endif

/* resqml2__CorrectionInformation has binding name 'resqml2__CorrectionInformation' for type 'resqml2:CorrectionInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__CorrectionInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__CorrectionInformation (-77)

#endif

/* resqml2__BlockedWellboreRepresentation has binding name 'resqml2__BlockedWellboreRepresentation' for type 'resqml2:BlockedWellboreRepresentation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BlockedWellboreRepresentation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BlockedWellboreRepresentation (-76)

#endif

/* resqml2__StructuralOrganizationInterpretation has binding name 'resqml2__StructuralOrganizationInterpretation' for type 'resqml2:StructuralOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StructuralOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StructuralOrganizationInterpretation (-75)

#endif

/* resqml2__StratigraphicUnitInterpretation has binding name 'resqml2__StratigraphicUnitInterpretation' for type 'resqml2:StratigraphicUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitInterpretation (-74)

#endif

/* resqml2__StratigraphicUnitDictionary has binding name 'resqml2__StratigraphicUnitDictionary' for type 'resqml2:StratigraphicUnitDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitDictionary
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicUnitDictionary (-73)

#endif

/* resqml2__StratigraphicOccurrenceInterpretation has binding name 'resqml2__StratigraphicOccurrenceInterpretation' for type 'resqml2:StratigraphicOccurrenceInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicOccurrenceInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicOccurrenceInterpretation (-72)

#endif

/* resqml2__StratigraphicColumnRankInterpretation has binding name 'resqml2__StratigraphicColumnRankInterpretation' for type 'resqml2:StratigraphicColumnRankInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumnRankInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumnRankInterpretation (-71)

#endif

/* resqml2__StratigraphicColumn has binding name 'resqml2__StratigraphicColumn' for type 'resqml2:StratigraphicColumn' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumn
#define SOAP_TYPE_gsoap_eml2_2_resqml2__StratigraphicColumn (-70)

#endif

/* resqml2__RockFluidUnitInterpretation has binding name 'resqml2__RockFluidUnitInterpretation' for type 'resqml2:RockFluidUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidUnitInterpretation (-69)

#endif

/* resqml2__RockFluidOrganizationInterpretation has binding name 'resqml2__RockFluidOrganizationInterpretation' for type 'resqml2:RockFluidOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockFluidOrganizationInterpretation (-68)

#endif

/* resqml2__MultipleContactInterpretationPart has binding name 'resqml2__MultipleContactInterpretationPart' for type 'resqml2:MultipleContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MultipleContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MultipleContactInterpretationPart (-67)

#endif

/* resqml2__HorizonInterpretation has binding name 'resqml2__HorizonInterpretation' for type 'resqml2:HorizonInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HorizonInterpretation (-66)

#endif

/* resqml2__GeologicUnitInterpretation has binding name 'resqml2__GeologicUnitInterpretation' for type 'resqml2:GeologicUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicUnitInterpretation (-65)

#endif

/* resqml2__GeologicTimeBasedTimeInterval has binding name 'resqml2__GeologicTimeBasedTimeInterval' for type 'resqml2:GeologicTimeBasedTimeInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicTimeBasedTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeologicTimeBasedTimeInterval (-64)

#endif

/* resqml2__GeobodyInterpretation has binding name 'resqml2__GeobodyInterpretation' for type 'resqml2:GeobodyInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyInterpretation (-63)

#endif

/* resqml2__GeobodyBoundaryInterpretation has binding name 'resqml2__GeobodyBoundaryInterpretation' for type 'resqml2:GeobodyBoundaryInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeobodyBoundaryInterpretation (-62)

#endif

/* resqml2__GeneticBoundaryBasedTimeInterval has binding name 'resqml2__GeneticBoundaryBasedTimeInterval' for type 'resqml2:GeneticBoundaryBasedTimeInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GeneticBoundaryBasedTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GeneticBoundaryBasedTimeInterval (-61)

#endif

/* resqml2__GenericFeatureInterpretation has binding name 'resqml2__GenericFeatureInterpretation' for type 'resqml2:GenericFeatureInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GenericFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GenericFeatureInterpretation (-60)

#endif

/* resqml2__FluidBoundaryInterpretation has binding name 'resqml2__FluidBoundaryInterpretation' for type 'resqml2:FluidBoundaryInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FluidBoundaryInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FluidBoundaryInterpretation (-59)

#endif

/* resqml2__FeatureInterpretationSet has binding name 'resqml2__FeatureInterpretationSet' for type 'resqml2:FeatureInterpretationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FeatureInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FeatureInterpretationSet (-58)

#endif

/* resqml2__FaultThrow has binding name 'resqml2__FaultThrow' for type 'resqml2:FaultThrow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FaultThrow
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FaultThrow (-57)

#endif

/* resqml2__FaultInterpretation has binding name 'resqml2__FaultInterpretation' for type 'resqml2:FaultInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FaultInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FaultInterpretation (-56)

#endif

/* resqml2__EarthModelInterpretation has binding name 'resqml2__EarthModelInterpretation' for type 'resqml2:EarthModelInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__EarthModelInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__EarthModelInterpretation (-55)

#endif

/* resqml2__ContactElementReference has binding name 'resqml2__ContactElementReference' for type 'resqml2:ContactElementReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContactElementReference
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContactElementReference (-54)

#endif

/* resqml2__BoundaryFeatureInterpretationPlusItsRank has binding name 'resqml2__BoundaryFeatureInterpretationPlusItsRank' for type 'resqml2:BoundaryFeatureInterpretationPlusItsRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretationPlusItsRank
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretationPlusItsRank (-53)

#endif

/* resqml2__BoundaryFeatureInterpretation has binding name 'resqml2__BoundaryFeatureInterpretation' for type 'resqml2:BoundaryFeatureInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeatureInterpretation (-52)

#endif

/* resqml2__BinaryContactInterpretationPart has binding name 'resqml2__BinaryContactInterpretationPart' for type 'resqml2:BinaryContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BinaryContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BinaryContactInterpretationPart (-51)

#endif

/* resqml2__AbstractTimeInterval has binding name 'resqml2__AbstractTimeInterval' for type 'resqml2:AbstractTimeInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTimeInterval (-50)

#endif

/* resqml2__AbstractStratigraphicOrganizationInterpretation has binding name 'resqml2__AbstractStratigraphicOrganizationInterpretation' for type 'resqml2:AbstractStratigraphicOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractStratigraphicOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractStratigraphicOrganizationInterpretation (-49)

#endif

/* resqml2__AbstractOrganizationInterpretation has binding name 'resqml2__AbstractOrganizationInterpretation' for type 'resqml2:AbstractOrganizationInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractOrganizationInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractOrganizationInterpretation (-48)

#endif

/* resqml2__AbstractFeatureInterpretation has binding name 'resqml2__AbstractFeatureInterpretation' for type 'resqml2:AbstractFeatureInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeatureInterpretation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeatureInterpretation (-47)

#endif

/* resqml2__AbstractContactInterpretationPart has binding name 'resqml2__AbstractContactInterpretationPart' for type 'resqml2:AbstractContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractContactInterpretationPart (-46)

#endif

/* resqml2__RockVolumeFeatureDictionary has binding name 'resqml2__RockVolumeFeatureDictionary' for type 'resqml2:RockVolumeFeatureDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeatureDictionary
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeatureDictionary (-45)

#endif

/* resqml2__RockVolumeFeature has binding name 'resqml2__RockVolumeFeature' for type 'resqml2:RockVolumeFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__RockVolumeFeature (-44)

#endif

/* resqml2__Model has binding name 'resqml2__Model' for type 'resqml2:Model' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__Model
#define SOAP_TYPE_gsoap_eml2_2_resqml2__Model (-43)

#endif

/* resqml2__FrontierFeature has binding name 'resqml2__FrontierFeature' for type 'resqml2:FrontierFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__FrontierFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__FrontierFeature (-42)

#endif

/* resqml2__BoundaryFeature has binding name 'resqml2__BoundaryFeature' for type 'resqml2:BoundaryFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__BoundaryFeature (-41)

#endif

/* resqml2__AbstractTechnicalFeature has binding name 'resqml2__AbstractTechnicalFeature' for type 'resqml2:AbstractTechnicalFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTechnicalFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractTechnicalFeature (-40)

#endif

/* resqml2__AbstractFeature has binding name 'resqml2__AbstractFeature' for type 'resqml2:AbstractFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeature
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractFeature (-39)

#endif

/* resqml2__LocalTime3dCrs has binding name 'resqml2__LocalTime3dCrs' for type 'resqml2:LocalTime3dCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LocalTime3dCrs
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LocalTime3dCrs (-38)

#endif

/* resqml2__LocalDepth3dCrs has binding name 'resqml2__LocalDepth3dCrs' for type 'resqml2:LocalDepth3dCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__LocalDepth3dCrs
#define SOAP_TYPE_gsoap_eml2_2_resqml2__LocalDepth3dCrs (-37)

#endif

/* resqml2__AbstractLocal3dCrs has binding name 'resqml2__AbstractLocal3dCrs' for type 'resqml2:AbstractLocal3dCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractLocal3dCrs
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractLocal3dCrs (-36)

#endif

/* resqml2__SizeInformation has binding name 'resqml2__SizeInformation' for type 'resqml2:SizeInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__SizeInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__SizeInformation (-35)

#endif

/* resqml2__MinMax has binding name 'resqml2__MinMax' for type 'resqml2:MinMax' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__MinMax
#define SOAP_TYPE_gsoap_eml2_2_resqml2__MinMax (-34)

#endif

/* resqml2__HsvColor has binding name 'resqml2__HsvColor' for type 'resqml2:HsvColor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__HsvColor
#define SOAP_TYPE_gsoap_eml2_2_resqml2__HsvColor (-33)

#endif

/* resqml2__GraphicalInformationForWholeObject has binding name 'resqml2__GraphicalInformationForWholeObject' for type 'resqml2:GraphicalInformationForWholeObject' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForWholeObject
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForWholeObject (-32)

#endif

/* resqml2__GraphicalInformationForVolumes has binding name 'resqml2__GraphicalInformationForVolumes' for type 'resqml2:GraphicalInformationForVolumes' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForVolumes
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForVolumes (-31)

#endif

/* resqml2__GraphicalInformationForNodes has binding name 'resqml2__GraphicalInformationForNodes' for type 'resqml2:GraphicalInformationForNodes' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForNodes
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForNodes (-30)

#endif

/* resqml2__GraphicalInformationForFaces has binding name 'resqml2__GraphicalInformationForFaces' for type 'resqml2:GraphicalInformationForFaces' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForFaces
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForFaces (-29)

#endif

/* resqml2__GraphicalInformationForEdges has binding name 'resqml2__GraphicalInformationForEdges' for type 'resqml2:GraphicalInformationForEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForEdges
#define SOAP_TYPE_gsoap_eml2_2_resqml2__GraphicalInformationForEdges (-28)

#endif

/* resqml2__DiscreteColorMapEntry has binding name 'resqml2__DiscreteColorMapEntry' for type 'resqml2:DiscreteColorMapEntry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMapEntry (-27)

#endif

/* resqml2__DiscreteColorMap has binding name 'resqml2__DiscreteColorMap' for type 'resqml2:DiscreteColorMap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMap
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DiscreteColorMap (-26)

#endif

/* resqml2__DefaultGraphicalInformation has binding name 'resqml2__DefaultGraphicalInformation' for type 'resqml2:DefaultGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__DefaultGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__DefaultGraphicalInformation (-25)

#endif

/* resqml2__ContourLineSetInformation has binding name 'resqml2__ContourLineSetInformation' for type 'resqml2:ContourLineSetInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContourLineSetInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContourLineSetInformation (-24)

#endif

/* resqml2__ContinuousColorMapEntry has binding name 'resqml2__ContinuousColorMapEntry' for type 'resqml2:ContinuousColorMapEntry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMapEntry (-23)

#endif

/* resqml2__ContinuousColorMap has binding name 'resqml2__ContinuousColorMap' for type 'resqml2:ContinuousColorMap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMap
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ContinuousColorMap (-22)

#endif

/* resqml2__ColorMapDictionary has binding name 'resqml2__ColorMapDictionary' for type 'resqml2:ColorMapDictionary' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColorMapDictionary
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColorMapDictionary (-21)

#endif

/* resqml2__ColorInformation has binding name 'resqml2__ColorInformation' for type 'resqml2:ColorInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__ColorInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__ColorInformation (-20)

#endif

/* resqml2__AnnotationInformation has binding name 'resqml2__AnnotationInformation' for type 'resqml2:AnnotationInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AnnotationInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AnnotationInformation (-19)

#endif

/* resqml2__AlphaInformation has binding name 'resqml2__AlphaInformation' for type 'resqml2:AlphaInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AlphaInformation
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AlphaInformation (-18)

#endif

/* resqml2__AbstractGraphicalInformationForIndexableElement has binding name 'resqml2__AbstractGraphicalInformationForIndexableElement' for type 'resqml2:AbstractGraphicalInformationForIndexableElement' */
#ifndef SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGraphicalInformationForIndexableElement
#define SOAP_TYPE_gsoap_eml2_2_resqml2__AbstractGraphicalInformationForIndexableElement (-17)

#endif

/* xsd__date has binding name 'xsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__date
#define SOAP_TYPE_gsoap_eml2_2_xsd__date (-16)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__anyURI
#define SOAP_TYPE_gsoap_eml2_2_xsd__anyURI (-15)

#endif

/* xsd__ID has binding name 'xsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_gsoap_eml2_2_xsd__ID
#define SOAP_TYPE_gsoap_eml2_2_xsd__ID (-14)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__string
#define SOAP_TYPE_gsoap_eml2_2_std__string (-13)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Fault (-845619207)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Reason (-845619206)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Detail (-845619203)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Code (-845619201)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header
#define SOAP_TYPE_gsoap_eml2_2_SOAP_ENV__Header (-845619200)

#endif

/* _gco__DateTime has binding name '_gco__DateTime' for type '' */
#ifndef SOAP_TYPE__gco__DateTime
#define SOAP_TYPE__gco__DateTime (-1877)

#endif

/* xsd__dateTime has binding name 'xsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (-9)

#endif

/* struct tm has binding name 'tm' for type 'tm' */
#ifndef SOAP_TYPE_gsoap_eml2_2_tm
#define SOAP_TYPE_gsoap_eml2_2_tm (-8)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Reason (-845619209)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Detail (-845619208)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Code
#define SOAP_TYPE_gsoap_eml2_2_PointerToSOAP_ENV__Code (-845619202)

#endif

/* gml__GeodeticCRSPropertyType * has binding name 'PointerTogml__GeodeticCRSPropertyType' for type 'gml:GeodeticCRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSPropertyType (-1721)

#endif

/* gml__VerticalDatumPropertyType * has binding name 'PointerTogml__VerticalDatumPropertyType' for type 'gml:VerticalDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumPropertyType (-1719)

#endif

/* gml__VerticalCSPropertyType * has binding name 'PointerTogml__VerticalCSPropertyType' for type 'gml:VerticalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSPropertyType (-1718)

#endif

/* gml__GeneralConversionPropertyType * has binding name 'PointerTogml__GeneralConversionPropertyType' for type 'gml:GeneralConversionPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeneralConversionPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeneralConversionPropertyType (-1717)

#endif

/* gml__EllipsoidPropertyType * has binding name 'PointerTogml__EllipsoidPropertyType' for type 'gml:EllipsoidPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidPropertyType (-1716)

#endif

/* gml__PrimeMeridianPropertyType * has binding name 'PointerTogml__PrimeMeridianPropertyType' for type 'gml:PrimeMeridianPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianPropertyType (-1715)

#endif

/* gml__GeodeticDatumPropertyType * has binding name 'PointerTogml__GeodeticDatumPropertyType' for type 'gml:GeodeticDatumPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumPropertyType (-1714)

#endif

/* gml__SphericalCSPropertyType * has binding name 'PointerTogml__SphericalCSPropertyType' for type 'gml:SphericalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSPropertyType (-1713)

#endif

/* gml__CartesianCSPropertyType * has binding name 'PointerTogml__CartesianCSPropertyType' for type 'gml:CartesianCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSPropertyType (-1712)

#endif

/* gml__EllipsoidalCSPropertyType * has binding name 'PointerTogml__EllipsoidalCSPropertyType' for type 'gml:EllipsoidalCSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSPropertyType (-1711)

#endif

/* gml__CRSPropertyType * has binding name 'PointerTogml__CRSPropertyType' for type 'gml:CRSPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CRSPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CRSPropertyType (-1709)

#endif

/* _gml__coordinateOperationAccuracy * has binding name 'PointerTo_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__coordinateOperationAccuracy (-1707)

#endif

/* _gml__secondDefiningParameter * has binding name 'PointerTo_gml__secondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__secondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__secondDefiningParameter (-1706)

#endif

/* gml__AngleType * has binding name 'PointerTogml__AngleType' for type 'gml:AngleType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__AngleType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__AngleType (-1705)

#endif

/* std::string * has binding name 'PointerToxsd__date' for type 'xsd:date' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__date
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__date (-1704)

#endif

/* enum gml__AggregationType * has binding name 'PointerTogml__AggregationType' for type 'gml:AggregationType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__AggregationType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__AggregationType (-1703)

#endif

/* gml__CoordinateSystemAxisPropertyType * has binding name 'PointerTogml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisPropertyType (-1701)

#endif

/* _gml__domainOfValidity * has binding name 'PointerTo_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__domainOfValidity (-1699)

#endif

/* resqml2__IjGaps * has binding name 'PointerToresqml2__IjGaps' for type 'resqml2:IjGaps' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IjGaps
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IjGaps (-1698)

#endif

/* resqml2__SeismicLatticeSetFeature * has binding name 'PointerToresqml2__SeismicLatticeSetFeature' for type 'resqml2:SeismicLatticeSetFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SeismicLatticeSetFeature
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SeismicLatticeSetFeature (-1697)

#endif

/* eml22__StringExternalArray * has binding name 'PointerToeml22__StringExternalArray' for type 'eml22:StringExternalArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__StringExternalArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__StringExternalArray (-1696)

#endif

/* resqml2__SealedContactRepresentationPart * has binding name 'PointerToresqml2__SealedContactRepresentationPart' for type 'resqml2:SealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SealedContactRepresentationPart (-1694)

#endif

/* resqml2__AbstractContactRepresentationPart * has binding name 'PointerToresqml2__AbstractContactRepresentationPart' for type 'resqml2:AbstractContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractContactRepresentationPart (-1692)

#endif

/* std::string * has binding name 'PointerToeml22__UnitOfMeasureExt' for type 'eml22:UnitOfMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UnitOfMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__UnitOfMeasureExt (-1691)

#endif

/* eml22__IntegerConstantArray * has binding name 'PointerToeml22__IntegerConstantArray' for type 'eml22:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IntegerConstantArray (-1689)

#endif

/* eml22__FloatingPointConstantArray * has binding name 'PointerToeml22__FloatingPointConstantArray' for type 'eml22:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FloatingPointConstantArray (-1687)

#endif

/* resqml2__AlternateCellIndex * has binding name 'PointerToresqml2__AlternateCellIndex' for type 'resqml2:AlternateCellIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AlternateCellIndex
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AlternateCellIndex (-1685)

#endif

/* resqml2__UnstructuredGridHingeNodeFaces * has binding name 'PointerToresqml2__UnstructuredGridHingeNodeFaces' for type 'resqml2:UnstructuredGridHingeNodeFaces' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredGridHingeNodeFaces
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredGridHingeNodeFaces (-1684)

#endif

/* resqml2__ColumnLayerGpGrid * has binding name 'PointerToresqml2__ColumnLayerGpGrid' for type 'resqml2:ColumnLayerGpGrid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnLayerGpGrid
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnLayerGpGrid (-1682)

#endif

/* resqml2__UnstructuredGpGridPatch * has binding name 'PointerToresqml2__UnstructuredGpGridPatch' for type 'resqml2:UnstructuredGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredGpGridPatch (-1680)

#endif

/* resqml2__ColumnLayerSplitCoordinateLines * has binding name 'PointerToresqml2__ColumnLayerSplitCoordinateLines' for type 'resqml2:ColumnLayerSplitCoordinateLines' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnLayerSplitCoordinateLines
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnLayerSplitCoordinateLines (-1679)

#endif

/* resqml2__TrianglePatch * has binding name 'PointerToresqml2__TrianglePatch' for type 'resqml2:TrianglePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__TrianglePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__TrianglePatch (-1677)

#endif

/* resqml2__VolumeRegion * has binding name 'PointerToresqml2__VolumeRegion' for type 'resqml2:VolumeRegion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__VolumeRegion
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__VolumeRegion (-1675)

#endif

/* resqml2__AbstractPlaneGeometry * has binding name 'PointerToresqml2__AbstractPlaneGeometry' for type 'resqml2:AbstractPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractPlaneGeometry (-1673)

#endif

/* resqml2__Grid2dPatch * has binding name 'PointerToresqml2__Grid2dPatch' for type 'resqml2:Grid2dPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Grid2dPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Grid2dPatch (-1671)

#endif

/* resqml2__ContactIdentity * has binding name 'PointerToresqml2__ContactIdentity' for type 'resqml2:ContactIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactIdentity
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactIdentity (-1669)

#endif

/* resqml2__WellboreMarker * has binding name 'PointerToresqml2__WellboreMarker' for type 'resqml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__WellboreMarker (-1667)

#endif

/* resqml2__WitsmlWellboreReference * has binding name 'PointerToresqml2__WitsmlWellboreReference' for type 'resqml2:WitsmlWellboreReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__WitsmlWellboreReference
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__WitsmlWellboreReference (-1666)

#endif

/* resqml2__CorrectionInformation * has binding name 'PointerToresqml2__CorrectionInformation' for type 'resqml2:CorrectionInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__CorrectionInformation
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__CorrectionInformation (-1665)

#endif

/* resqml2__TvdInformation * has binding name 'PointerToresqml2__TvdInformation' for type 'resqml2:TvdInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__TvdInformation
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__TvdInformation (-1664)

#endif

/* resqml2__BoundaryFeatureInterpretationPlusItsRank * has binding name 'PointerToresqml2__BoundaryFeatureInterpretationPlusItsRank' for type 'resqml2:BoundaryFeatureInterpretationPlusItsRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__BoundaryFeatureInterpretationPlusItsRank
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__BoundaryFeatureInterpretationPlusItsRank (-1662)

#endif

/* enum resqml2__StratigraphicUnitKind * has binding name 'PointerToresqml2__StratigraphicUnitKind' for type 'resqml2:StratigraphicUnitKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StratigraphicUnitKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StratigraphicUnitKind (-1661)

#endif

/* enum resqml2__DepositionMode * has binding name 'PointerToresqml2__DepositionMode' for type 'resqml2:DepositionMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DepositionMode
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DepositionMode (-1660)

#endif

/* enum resqml2__Phase * has binding name 'PointerToresqml2__Phase' for type 'resqml2:Phase' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Phase
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Phase (-1659)

#endif

/* struct __resqml2__HorizonInterpretation_sequence * has binding name 'PointerTo__resqml2__HorizonInterpretation_sequence' for type '-resqml2:HorizonInterpretation-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__HorizonInterpretation_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__HorizonInterpretation_sequence (-1658)

#endif

/* enum resqml2__SequenceStratigraphySurface * has binding name 'PointerToresqml2__SequenceStratigraphySurface' for type 'resqml2:SequenceStratigraphySurface' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SequenceStratigraphySurface
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SequenceStratigraphySurface (-1657)

#endif

/* resqml2__FaultThrow * has binding name 'PointerToresqml2__FaultThrow' for type 'resqml2:FaultThrow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FaultThrow
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FaultThrow (-1652)

#endif

/* gml__RelatedTimeType * has binding name 'PointerTogml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__RelatedTimeType (-1650)

#endif

/* enum eml22__ReferencePressureKind * has binding name 'PointerToeml22__ReferencePressureKind' for type 'eml22:ReferencePressureKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressureKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressureKind (-1649)

#endif

/* resqml2__StreamlineWellbores * has binding name 'PointerToresqml2__StreamlineWellbores' for type 'resqml2:StreamlineWellbores' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StreamlineWellbores
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StreamlineWellbores (-1648)

#endif

/* resqml2__StringLookup * has binding name 'PointerToresqml2__StringLookup' for type 'resqml2:StringLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StringLookup
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StringLookup (-1646)

#endif

/* resqml2__PatchOfPoints * has binding name 'PointerToresqml2__PatchOfPoints' for type 'resqml2:PatchOfPoints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchOfPoints
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchOfPoints (-1644)

#endif

/* resqml2__DoubleLookup * has binding name 'PointerToresqml2__DoubleLookup' for type 'resqml2:DoubleLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DoubleLookup
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DoubleLookup (-1642)

#endif

/* resqml2__PropertyKindFacet * has binding name 'PointerToresqml2__PropertyKindFacet' for type 'resqml2:PropertyKindFacet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PropertyKindFacet
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PropertyKindFacet (-1640)

#endif

/* resqml2__PatchOfValues * has binding name 'PointerToresqml2__PatchOfValues' for type 'resqml2:PatchOfValues' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchOfValues
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchOfValues (-1638)

#endif

/* resqml2__ElementIndices * has binding name 'PointerToresqml2__ElementIndices' for type 'resqml2:ElementIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ElementIndices
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ElementIndices (-1636)

#endif

/* resqml2__SubRepresentationPatch * has binding name 'PointerToresqml2__SubRepresentationPatch' for type 'resqml2:SubRepresentationPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SubRepresentationPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SubRepresentationPatch (-1634)

#endif

/* resqml2__PatchOfGeometry * has binding name 'PointerToresqml2__PatchOfGeometry' for type 'resqml2:PatchOfGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchOfGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchOfGeometry (-1632)

#endif

/* resqml2__PolylineSetPatch * has binding name 'PointerToresqml2__PolylineSetPatch' for type 'resqml2:PolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PolylineSetPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PolylineSetPatch (-1630)

#endif

/* resqml2__ConnectionInterpretations * has binding name 'PointerToresqml2__ConnectionInterpretations' for type 'resqml2:ConnectionInterpretations' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ConnectionInterpretations
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ConnectionInterpretations (-1629)

#endif

/* resqml2__AbstractParentWindow * has binding name 'PointerToresqml2__AbstractParentWindow' for type 'resqml2:AbstractParentWindow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractParentWindow
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractParentWindow (-1628)

#endif

/* resqml2__AdditionalGridPoints * has binding name 'PointerToresqml2__AdditionalGridPoints' for type 'resqml2:AdditionalGridPoints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AdditionalGridPoints
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AdditionalGridPoints (-1626)

#endif

/* eml22__FloatingPointLatticeArray * has binding name 'PointerToeml22__FloatingPointLatticeArray' for type 'eml22:FloatingPointLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FloatingPointLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FloatingPointLatticeArray (-1625)

#endif

/* resqml2__ThreePoint3d * has binding name 'PointerToresqml2__ThreePoint3d' for type 'resqml2:ThreePoint3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ThreePoint3d
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ThreePoint3d (-1623)

#endif

/* resqml2__EdgePatch * has binding name 'PointerToresqml2__EdgePatch' for type 'resqml2:EdgePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__EdgePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__EdgePatch (-1621)

#endif

/* enum resqml2__LineRole * has binding name 'PointerToresqml2__LineRole' for type 'resqml2:LineRole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__LineRole
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__LineRole (-1620)

#endif

/* resqml2__NodePatch * has binding name 'PointerToresqml2__NodePatch' for type 'resqml2:NodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__NodePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__NodePatch (-1618)

#endif

/* resqml2__PatchBoundaries * has binding name 'PointerToresqml2__PatchBoundaries' for type 'resqml2:PatchBoundaries' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchBoundaries
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PatchBoundaries (-1616)

#endif

/* resqml2__AbstractParametricLineGeometry * has binding name 'PointerToresqml2__AbstractParametricLineGeometry' for type 'resqml2:AbstractParametricLineGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractParametricLineGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractParametricLineGeometry (-1615)

#endif

/* resqml2__WellboreTrajectoryParentIntersection * has binding name 'PointerToresqml2__WellboreTrajectoryParentIntersection' for type 'resqml2:WellboreTrajectoryParentIntersection' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__WellboreTrajectoryParentIntersection
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__WellboreTrajectoryParentIntersection (-1614)

#endif

/* enum resqml2__MdDomain * has binding name 'PointerToresqml2__MdDomain' for type 'resqml2:MdDomain' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__MdDomain
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__MdDomain (-1613)

#endif

/* resqml2__CellFluidPhaseUnits * has binding name 'PointerToresqml2__CellFluidPhaseUnits' for type 'resqml2:CellFluidPhaseUnits' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__CellFluidPhaseUnits
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__CellFluidPhaseUnits (-1612)

#endif

/* resqml2__IntervalStratigraphicUnits * has binding name 'PointerToresqml2__IntervalStratigraphicUnits' for type 'resqml2:IntervalStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IntervalStratigraphicUnits (-1610)

#endif

/* std::string * has binding name 'PointerToresqml2__Shape3dExt' for type 'resqml2:Shape3dExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Shape3dExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Shape3dExt (-1609)

#endif

/* enum resqml2__GeologicUnitMaterialEmplacement * has binding name 'PointerToresqml2__GeologicUnitMaterialEmplacement' for type 'resqml2:GeologicUnitMaterialEmplacement' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__GeologicUnitMaterialEmplacement
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__GeologicUnitMaterialEmplacement (-1608)

#endif

/* std::string * has binding name 'PointerToeml22__LithologyKindExt' for type 'eml22:LithologyKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LithologyKindExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LithologyKindExt (-1607)

#endif

/* resqml2__AbstractContactInterpretationPart * has binding name 'PointerToresqml2__AbstractContactInterpretationPart' for type 'resqml2:AbstractContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractContactInterpretationPart (-1605)

#endif

/* gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType' for type 'gmd:CI_OnLineFunctionCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType (-1604)

#endif

/* gmd__URL_USCOREPropertyType * has binding name 'PointerTogmd__URL_USCOREPropertyType' for type 'gmd:URL_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__URL_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__URL_USCOREPropertyType (-1603)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType' for type 'gmd:CI_OnlineResource_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREPropertyType (-1602)

#endif

/* gmd__CI_USCOREAddress_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREAddress_USCOREPropertyType' for type 'gmd:CI_Address_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREPropertyType (-1601)

#endif

/* gmd__CI_USCORETelephone_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORETelephone_USCOREPropertyType' for type 'gmd:CI_Telephone_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREPropertyType (-1600)

#endif

/* gmd__CI_USCORERoleCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORERoleCode_USCOREPropertyType' for type 'gmd:CI_RoleCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORERoleCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORERoleCode_USCOREPropertyType (-1599)

#endif

/* gmd__CI_USCOREContact_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREContact_USCOREPropertyType' for type 'gmd:CI_Contact_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREPropertyType (-1598)

#endif

/* gmd__CI_USCOREDateTypeCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType' for type 'gmd:CI_DateTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDateTypeCode_USCOREPropertyType (-1597)

#endif

/* gmd__CI_USCORESeries_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORESeries_USCOREPropertyType' for type 'gmd:CI_Series_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREPropertyType (-1596)

#endif

/* gmd__CI_USCOREPresentationFormCode_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-1594)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType (-1592)

#endif

/* gco__Date_USCOREPropertyType * has binding name 'PointerTogco__Date_USCOREPropertyType' for type 'gco:Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREPropertyType (-1590)

#endif

/* gmd__CI_USCOREDate_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREPropertyType (-1588)

#endif

/* gmd__DQ_USCOREResult_USCOREPropertyType * has binding name 'PointerTogmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREResult_USCOREPropertyType (-1586)

#endif

/* gco__DateTime_USCOREPropertyType * has binding name 'PointerTogco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__DateTime_USCOREPropertyType (-1584)

#endif

/* gmd__CI_USCORECitation_USCOREPropertyType * has binding name 'PointerTogmd__CI_USCORECitation_USCOREPropertyType' for type 'gmd:CI_Citation_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREPropertyType (-1583)

#endif

/* gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType * has binding name 'PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType' for type 'gmd:DQ_EvaluationMethodTypeCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType (-1582)

#endif

/* gmd__MD_USCOREIdentifier_USCOREPropertyType * has binding name 'PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREPropertyType (-1581)

#endif

/* gsr__SC_USCORECRS_USCOREPropertyType * has binding name 'PointerTogsr__SC_USCORECRS_USCOREPropertyType' for type 'gsr:SC_CRS_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogsr__SC_USCORECRS_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogsr__SC_USCORECRS_USCOREPropertyType (-1579)

#endif

/* gco__Real_USCOREPropertyType * has binding name 'PointerTogco__Real_USCOREPropertyType' for type 'gco:Real_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Real_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Real_USCOREPropertyType (-1578)

#endif

/* gts__TM_USCOREPrimitive_USCOREPropertyType * has binding name 'PointerTogts__TM_USCOREPrimitive_USCOREPropertyType' for type 'gts:TM_Primitive_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogts__TM_USCOREPrimitive_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogts__TM_USCOREPrimitive_USCOREPropertyType (-1577)

#endif

/* gco__Boolean_USCOREPropertyType * has binding name 'PointerTogco__Boolean_USCOREPropertyType' for type 'gco:Boolean_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Boolean_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Boolean_USCOREPropertyType (-1576)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType (-1574)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType (-1572)

#endif

/* gmd__EX_USCOREGeographicExtent_USCOREPropertyType * has binding name 'PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType (-1570)

#endif

/* gco__CharacterString_USCOREPropertyType * has binding name 'PointerTogco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__CharacterString_USCOREPropertyType (-1569)

#endif

/* enum _gml__RelatedTimeType_relativePosition * has binding name 'PointerTo_gml__RelatedTimeType_relativePosition' for type 'gml:RelatedTimeType-relativePosition' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__RelatedTimeType_relativePosition
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__RelatedTimeType_relativePosition (-1568)

#endif

/* eml22__AbstractGraphicalInformation * has binding name 'PointerToeml22__AbstractGraphicalInformation' for type 'eml22:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGraphicalInformation (-1565)

#endif

/* eml22__IndexRange * has binding name 'PointerToeml22__IndexRange' for type 'eml22:IndexRange' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IndexRange
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IndexRange (-1564)

#endif

/* eml22__FailingRule * has binding name 'PointerToeml22__FailingRule' for type 'eml22:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__FailingRule (-1562)

#endif

/* gml__VerticalCRSType * has binding name 'PointerTogml__VerticalCRSType' for type 'gml:VerticalCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCRSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCRSType (-1561)

#endif

/* gml__ProjectedCRSType * has binding name 'PointerTogml__ProjectedCRSType' for type 'gml:ProjectedCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__ProjectedCRSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__ProjectedCRSType (-1560)

#endif

/* std::string * has binding name 'PointerToeml22__LengthUomExt' for type 'eml22:LengthUomExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthUomExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthUomExt (-1559)

#endif

/* eml22__AuthorityQualifiedName * has binding name 'PointerToeml22__AuthorityQualifiedName' for type 'eml22:AuthorityQualifiedName' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AuthorityQualifiedName
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AuthorityQualifiedName (-1558)

#endif

/* eml22__AbstractGeodeticCrs * has binding name 'PointerToeml22__AbstractGeodeticCrs' for type 'eml22:AbstractGeodeticCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGeodeticCrs
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractGeodeticCrs (-1557)

#endif

/* eml22__ThermodynamicTemperatureMeasure * has binding name 'PointerToeml22__ThermodynamicTemperatureMeasure' for type 'eml22:ThermodynamicTemperatureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermodynamicTemperatureMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ThermodynamicTemperatureMeasure (-1556)

#endif

/* eml22__PressureMeasure * has binding name 'PointerToeml22__PressureMeasure' for type 'eml22:PressureMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasure (-1555)

#endif

/* std::string * has binding name 'PointerToeml22__ReferenceConditionExt' for type 'eml22:ReferenceConditionExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferenceConditionExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferenceConditionExt (-1554)

#endif

/* eml22__ReferencePressure * has binding name 'PointerToeml22__ReferencePressure' for type 'eml22:ReferencePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ReferencePressure (-1552)

#endif

/* eml22__PressureMeasureExt * has binding name 'PointerToeml22__PressureMeasureExt' for type 'eml22:PressureMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PressureMeasureExt (-1551)

#endif

/* eml22__TimeSeriesParentage * has binding name 'PointerToeml22__TimeSeriesParentage' for type 'eml22:TimeSeriesParentage' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeSeriesParentage
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeSeriesParentage (-1550)

#endif

/* eml22__PropertyKind * has binding name 'PointerToeml22__PropertyKind' for type 'eml22:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PropertyKind (-1547)

#endif

/* eml22__ParameterTemplate * has binding name 'PointerToeml22__ParameterTemplate' for type 'eml22:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ParameterTemplate (-1545)

#endif

/* eml22__TimeIndices * has binding name 'PointerToeml22__TimeIndices' for type 'eml22:TimeIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeIndices
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeIndices (-1544)

#endif

/* LONG64 * has binding name 'PointerToeml22__PositiveLong' for type 'eml22:PositiveLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PositiveLong
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PositiveLong (-1543)

#endif

/* resqml2__RepresentationIdentity * has binding name 'PointerToresqml2__RepresentationIdentity' for type 'resqml2:RepresentationIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__RepresentationIdentity
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__RepresentationIdentity (-1541)

#endif

/* resqml2__IntervalGridCells * has binding name 'PointerToresqml2__IntervalGridCells' for type 'resqml2:IntervalGridCells' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IntervalGridCells
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IntervalGridCells (-1540)

#endif

/* resqml2__Edges * has binding name 'PointerToresqml2__Edges' for type 'resqml2:Edges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Edges
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Edges (-1539)

#endif

/* resqml2__UnstructuredGridGeometry * has binding name 'PointerToresqml2__UnstructuredGridGeometry' for type 'resqml2:UnstructuredGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredGridGeometry (-1538)

#endif

/* resqml2__UnstructuredColumnLayerGridGeometry * has binding name 'PointerToresqml2__UnstructuredColumnLayerGridGeometry' for type 'resqml2:UnstructuredColumnLayerGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredColumnLayerGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredColumnLayerGridGeometry (-1537)

#endif

/* resqml2__Activation * has binding name 'PointerToresqml2__Activation' for type 'resqml2:Activation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Activation
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Activation (-1536)

#endif

/* resqml2__TruncationCellPatch * has binding name 'PointerToresqml2__TruncationCellPatch' for type 'resqml2:TruncationCellPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__TruncationCellPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__TruncationCellPatch (-1535)

#endif

/* resqml2__IjkGridGeometry * has binding name 'PointerToresqml2__IjkGridGeometry' for type 'resqml2:IjkGridGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IjkGridGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IjkGridGeometry (-1534)

#endif

/* resqml2__ColumnSubnodePatch * has binding name 'PointerToresqml2__ColumnSubnodePatch' for type 'resqml2:ColumnSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnSubnodePatch (-1532)

#endif

/* resqml2__Regrid * has binding name 'PointerToresqml2__Regrid' for type 'resqml2:Regrid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Regrid
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Regrid (-1531)

#endif

/* resqml2__AbstractSeismicCoordinates * has binding name 'PointerToresqml2__AbstractSeismicCoordinates' for type 'resqml2:AbstractSeismicCoordinates' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractSeismicCoordinates
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractSeismicCoordinates (-1530)

#endif

/* resqml2__AbstractParametricLineArray * has binding name 'PointerToresqml2__AbstractParametricLineArray' for type 'resqml2:AbstractParametricLineArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractParametricLineArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractParametricLineArray (-1529)

#endif

/* resqml2__Point3dOffset * has binding name 'PointerToresqml2__Point3dOffset' for type 'resqml2:Point3dOffset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Point3dOffset
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Point3dOffset (-1527)

#endif

/* eml22__ExternalDataset * has binding name 'PointerToeml22__ExternalDataset' for type 'eml22:ExternalDataset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDataset
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDataset (-1526)

#endif

/* eml22__IntegerLatticeArray * has binding name 'PointerToeml22__IntegerLatticeArray' for type 'eml22:IntegerLatticeArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IntegerLatticeArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__IntegerLatticeArray (-1525)

#endif

/* resqml2__ParametricLineIntersections * has binding name 'PointerToresqml2__ParametricLineIntersections' for type 'resqml2:ParametricLineIntersections' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ParametricLineIntersections
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ParametricLineIntersections (-1524)

#endif

/* resqml2__ContactPatch * has binding name 'PointerToresqml2__ContactPatch' for type 'resqml2:ContactPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactPatch (-1522)

#endif

/* resqml2__PointGeometry * has binding name 'PointerToresqml2__PointGeometry' for type 'resqml2:PointGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PointGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__PointGeometry (-1521)

#endif

/* enum resqml2__GeologicBoundaryKind * has binding name 'PointerToresqml2__GeologicBoundaryKind' for type 'resqml2:GeologicBoundaryKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__GeologicBoundaryKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__GeologicBoundaryKind (-1520)

#endif

/* enum resqml2__FluidMarker * has binding name 'PointerToresqml2__FluidMarker' for type 'resqml2:FluidMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FluidMarker
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FluidMarker (-1519)

#endif

/* enum resqml2__FluidContact * has binding name 'PointerToresqml2__FluidContact' for type 'resqml2:FluidContact' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FluidContact
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FluidContact (-1518)

#endif

/* resqml2__SinglePointGeometry * has binding name 'PointerToresqml2__SinglePointGeometry' for type 'resqml2:SinglePointGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SinglePointGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SinglePointGeometry (-1517)

#endif

/* resqml2__StratigraphicUnitInterpretation * has binding name 'PointerToresqml2__StratigraphicUnitInterpretation' for type 'resqml2:StratigraphicUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__StratigraphicUnitInterpretation (-1515)

#endif

/* eml22__GeologicTime * has binding name 'PointerToeml22__GeologicTime' for type 'eml22:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__GeologicTime (-1513)

#endif

/* enum resqml2__ContactMode * has binding name 'PointerToresqml2__ContactMode' for type 'resqml2:ContactMode' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactMode
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactMode (-1512)

#endif

/* enum resqml2__ContactSide * has binding name 'PointerToresqml2__ContactSide' for type 'resqml2:ContactSide' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactSide
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactSide (-1511)

#endif

/* resqml2__ContactElementReference * has binding name 'PointerToresqml2__ContactElementReference' for type 'resqml2:ContactElementReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactElementReference
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContactElementReference (-1510)

#endif

/* enum resqml2__Domain * has binding name 'PointerToresqml2__Domain' for type 'resqml2:Domain' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Domain
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Domain (-1509)

#endif

/* resqml2__RockVolumeFeature * has binding name 'PointerToresqml2__RockVolumeFeature' for type 'resqml2:RockVolumeFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__RockVolumeFeature
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__RockVolumeFeature (-1507)

#endif

/* eml22__AbstractVerticalCrs * has binding name 'PointerToeml22__AbstractVerticalCrs' for type 'eml22:AbstractVerticalCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractVerticalCrs
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractVerticalCrs (-1506)

#endif

/* eml22__AbstractProjectedCrs * has binding name 'PointerToeml22__AbstractProjectedCrs' for type 'eml22:AbstractProjectedCrs' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractProjectedCrs
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractProjectedCrs (-1505)

#endif

/* eml22__PlaneAngleMeasure * has binding name 'PointerToeml22__PlaneAngleMeasure' for type 'eml22:PlaneAngleMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PlaneAngleMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__PlaneAngleMeasure (-1504)

#endif

/* std::string * has binding name 'PointerToresqml2__NodeSymbolExt' for type 'resqml2:NodeSymbolExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__NodeSymbolExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__NodeSymbolExt (-1503)

#endif

/* eml22__LengthMeasureExt * has binding name 'PointerToeml22__LengthMeasureExt' for type 'eml22:LengthMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasureExt (-1502)

#endif

/* std::string * has binding name 'PointerToresqml2__EdgePatternExt' for type 'resqml2:EdgePatternExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__EdgePatternExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__EdgePatternExt (-1501)

#endif

/* enum resqml2__DisplaySpace * has binding name 'PointerToresqml2__DisplaySpace' for type 'resqml2:DisplaySpace' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DisplaySpace
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DisplaySpace (-1500)

#endif

/* resqml2__DiscreteColorMapEntry * has binding name 'PointerToresqml2__DiscreteColorMapEntry' for type 'resqml2:DiscreteColorMapEntry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DiscreteColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DiscreteColorMapEntry (-1498)

#endif

/* resqml2__AbstractGraphicalInformationForIndexableElement * has binding name 'PointerToresqml2__AbstractGraphicalInformationForIndexableElement' for type 'resqml2:AbstractGraphicalInformationForIndexableElement' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractGraphicalInformationForIndexableElement
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractGraphicalInformationForIndexableElement (-1496)

#endif

/* resqml2__GraphicalInformationForEdges * has binding name 'PointerToresqml2__GraphicalInformationForEdges' for type 'resqml2:GraphicalInformationForEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__GraphicalInformationForEdges
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__GraphicalInformationForEdges (-1495)

#endif

/* resqml2__ContinuousColorMapEntry * has binding name 'PointerToresqml2__ContinuousColorMapEntry' for type 'resqml2:ContinuousColorMapEntry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContinuousColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContinuousColorMapEntry (-1493)

#endif

/* resqml2__ContinuousColorMap * has binding name 'PointerToresqml2__ContinuousColorMap' for type 'resqml2:ContinuousColorMap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContinuousColorMap
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ContinuousColorMap (-1491)

#endif

/* resqml2__DiscreteColorMap * has binding name 'PointerToresqml2__DiscreteColorMap' for type 'resqml2:DiscreteColorMap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DiscreteColorMap
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__DiscreteColorMap (-1489)

#endif

/* resqml2__MinMax * has binding name 'PointerToresqml2__MinMax' for type 'resqml2:MinMax' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__MinMax
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__MinMax (-1488)

#endif

/* struct __gsr__SC_USCORECRS_USCOREPropertyType_sequence * has binding name 'PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence' for type '-gsr:SC_CRS_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gsr__SC_USCORECRS_USCOREPropertyType_sequence (-1485)

#endif

/* struct __gco__DateTime_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__DateTime_USCOREPropertyType_sequence' for type '-gco:DateTime_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__DateTime_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__DateTime_USCOREPropertyType_sequence (-1482)

#endif

/* std::string * has binding name 'PointerTogco__Date_USCOREType' for type 'gco:Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__Date_USCOREType (-1480)

#endif

/* struct __gco__Real_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__Real_USCOREPropertyType_sequence' for type '-gco:Real_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Real_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Real_USCOREPropertyType_sequence (-1478)

#endif

/* struct __gco__Boolean_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__Boolean_USCOREPropertyType_sequence' for type '-gco:Boolean_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Boolean_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__Boolean_USCOREPropertyType_sequence (-1476)

#endif

/* struct __gco__CharacterString_USCOREPropertyType_sequence * has binding name 'PointerTo__gco__CharacterString_USCOREPropertyType_sequence' for type '-gco:CharacterString_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__CharacterString_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gco__CharacterString_USCOREPropertyType_sequence (-1474)

#endif

/* std::string * has binding name 'PointerToxsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__ID
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__ID (-1471)

#endif

/* struct __gts__TM_USCOREPrimitive_USCOREPropertyType_sequence * has binding name 'PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence' for type '-gts:TM_Primitive_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gts__TM_USCOREPrimitive_USCOREPropertyType_sequence (-1470)

#endif

/* struct __gmd__DQ_USCOREResult_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence' for type '-gmd:DQ_Result_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREResult_USCOREPropertyType_sequence (-1467)

#endif

/* struct __gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence' for type '-gmd:DQ_EvaluationMethodTypeCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__DQ_USCOREEvaluationMethodTypeCode_USCOREPropertyType_sequence (-1464)

#endif

/* struct __gmd__CI_USCORESeries_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence' for type '-gmd:CI_Series_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORESeries_USCOREPropertyType_sequence (-1462)

#endif

/* gmd__CI_USCORESeries_USCOREType * has binding name 'PointerTogmd__CI_USCORESeries_USCOREType' for type 'gmd:CI_Series_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORESeries_USCOREType (-1461)

#endif

/* struct __gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence' for type '-gmd:CI_PresentationFormCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREPresentationFormCode_USCOREPropertyType_sequence (-1459)

#endif

/* struct __gmd__CI_USCORERoleCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence' for type '-gmd:CI_RoleCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORERoleCode_USCOREPropertyType_sequence (-1457)

#endif

/* struct __gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence' for type '-gmd:CI_OnLineFunctionCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnLineFunctionCode_USCOREPropertyType_sequence (-1455)

#endif

/* struct __gmd__URL_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__URL_USCOREPropertyType_sequence' for type '-gmd:URL_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__URL_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__URL_USCOREPropertyType_sequence (-1453)

#endif

/* struct __gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence' for type '-gmd:CI_OnlineResource_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREOnlineResource_USCOREPropertyType_sequence (-1451)

#endif

/* gmd__CI_USCOREOnlineResource_USCOREType * has binding name 'PointerTogmd__CI_USCOREOnlineResource_USCOREType' for type 'gmd:CI_OnlineResource_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREOnlineResource_USCOREType (-1450)

#endif

/* struct __gmd__CI_USCOREAddress_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence' for type '-gmd:CI_Address_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREAddress_USCOREPropertyType_sequence (-1448)

#endif

/* gmd__CI_USCOREAddress_USCOREType * has binding name 'PointerTogmd__CI_USCOREAddress_USCOREType' for type 'gmd:CI_Address_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREAddress_USCOREType (-1447)

#endif

/* struct __gmd__CI_USCORETelephone_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence' for type '-gmd:CI_Telephone_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORETelephone_USCOREPropertyType_sequence (-1445)

#endif

/* gmd__CI_USCORETelephone_USCOREType * has binding name 'PointerTogmd__CI_USCORETelephone_USCOREType' for type 'gmd:CI_Telephone_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORETelephone_USCOREType (-1444)

#endif

/* struct __gmd__CI_USCOREContact_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence' for type '-gmd:CI_Contact_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREContact_USCOREPropertyType_sequence (-1442)

#endif

/* gmd__CI_USCOREContact_USCOREType * has binding name 'PointerTogmd__CI_USCOREContact_USCOREType' for type 'gmd:CI_Contact_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREContact_USCOREType (-1441)

#endif

/* struct __gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence' for type '-gmd:CI_ResponsibleParty_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREResponsibleParty_USCOREPropertyType_sequence (-1439)

#endif

/* gmd__CI_USCOREResponsibleParty_USCOREType * has binding name 'PointerTogmd__CI_USCOREResponsibleParty_USCOREType' for type 'gmd:CI_ResponsibleParty_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREResponsibleParty_USCOREType (-1438)

#endif

/* struct __gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence' for type '-gmd:CI_DateTypeCode_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDateTypeCode_USCOREPropertyType_sequence (-1436)

#endif

/* gco__CodeListValue_USCOREType * has binding name 'PointerTogco__CodeListValue_USCOREType' for type 'gco:CodeListValue_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogco__CodeListValue_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogco__CodeListValue_USCOREType (-1435)

#endif

/* struct __gmd__CI_USCOREDate_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence' for type '-gmd:CI_Date_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCOREDate_USCOREPropertyType_sequence (-1433)

#endif

/* gmd__CI_USCOREDate_USCOREType * has binding name 'PointerTogmd__CI_USCOREDate_USCOREType' for type 'gmd:CI_Date_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCOREDate_USCOREType (-1432)

#endif

/* struct __gmd__CI_USCORECitation_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence' for type '-gmd:CI_Citation_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__CI_USCORECitation_USCOREPropertyType_sequence (-1430)

#endif

/* gmd__CI_USCORECitation_USCOREType * has binding name 'PointerTogmd__CI_USCORECitation_USCOREType' for type 'gmd:CI_Citation_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__CI_USCORECitation_USCOREType (-1429)

#endif

/* struct __gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence' for type '-gmd:MD_Identifier_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__MD_USCOREIdentifier_USCOREPropertyType_sequence (-1427)

#endif

/* gmd__MD_USCOREIdentifier_USCOREType * has binding name 'PointerTogmd__MD_USCOREIdentifier_USCOREType' for type 'gmd:MD_Identifier_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__MD_USCOREIdentifier_USCOREType (-1426)

#endif

/* struct __gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence' for type '-gmd:EX_VerticalExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREVerticalExtent_USCOREPropertyType_sequence (-1424)

#endif

/* gmd__EX_USCOREVerticalExtent_USCOREType * has binding name 'PointerTogmd__EX_USCOREVerticalExtent_USCOREType' for type 'gmd:EX_VerticalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREVerticalExtent_USCOREType (-1423)

#endif

/* struct __gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence' for type '-gmd:EX_TemporalExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCORETemporalExtent_USCOREPropertyType_sequence (-1421)

#endif

/* gmd__EX_USCORETemporalExtent_USCOREType * has binding name 'PointerTogmd__EX_USCORETemporalExtent_USCOREType' for type 'gmd:EX_TemporalExtent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCORETemporalExtent_USCOREType (-1420)

#endif

/* struct __gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence * has binding name 'PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence' for type '-gmd:EX_GeographicExtent_PropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gmd__EX_USCOREGeographicExtent_USCOREPropertyType_sequence (-1418)

#endif

/* struct __gml__coordinateOperationAccuracy_sequence * has binding name 'PointerTo__gml__coordinateOperationAccuracy_sequence' for type '-gml:coordinateOperationAccuracy-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__coordinateOperationAccuracy_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__coordinateOperationAccuracy_sequence (-1415)

#endif

/* gml__LengthType * has binding name 'PointerTogml__LengthType' for type 'gml:LengthType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__LengthType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__LengthType (-1412)

#endif

/* gml__MeasureType * has binding name 'PointerTogml__MeasureType' for type 'gml:MeasureType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__MeasureType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__MeasureType (-1411)

#endif

/* _gml__SecondDefiningParameter * has binding name 'PointerTo_gml__SecondDefiningParameter' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__SecondDefiningParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_gml__SecondDefiningParameter (-1409)

#endif

/* struct __gml__domainOfValidity_sequence * has binding name 'PointerTo__gml__domainOfValidity_sequence' for type '-gml:domainOfValidity-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__domainOfValidity_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__domainOfValidity_sequence (-1408)

#endif

/* gmd__EX_USCOREExtent_USCOREType * has binding name 'PointerTogmd__EX_USCOREExtent_USCOREType' for type 'gmd:EX_Extent_Type' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREExtent_USCOREType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogmd__EX_USCOREExtent_USCOREType (-1407)

#endif

/* struct __gml__VerticalDatumPropertyType_sequence * has binding name 'PointerTo__gml__VerticalDatumPropertyType_sequence' for type '-gml:VerticalDatumPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalDatumPropertyType_sequence (-1405)

#endif

/* gml__VerticalDatumType * has binding name 'PointerTogml__VerticalDatumType' for type 'gml:VerticalDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalDatumType (-1404)

#endif

/* struct __gml__VerticalCSPropertyType_sequence * has binding name 'PointerTo__gml__VerticalCSPropertyType_sequence' for type '-gml:VerticalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__VerticalCSPropertyType_sequence (-1402)

#endif

/* gml__VerticalCSType * has binding name 'PointerTogml__VerticalCSType' for type 'gml:VerticalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__VerticalCSType (-1401)

#endif

/* struct __gml__GeodeticCRSPropertyType_sequence * has binding name 'PointerTo__gml__GeodeticCRSPropertyType_sequence' for type '-gml:GeodeticCRSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticCRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticCRSPropertyType_sequence (-1399)

#endif

/* gml__GeodeticCRSType * has binding name 'PointerTogml__GeodeticCRSType' for type 'gml:GeodeticCRSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticCRSType (-1398)

#endif

/* struct __gml__CRSPropertyType_sequence * has binding name 'PointerTo__gml__CRSPropertyType_sequence' for type '-gml:CRSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CRSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CRSPropertyType_sequence (-1396)

#endif

/* struct __gml__GeneralConversionPropertyType_sequence * has binding name 'PointerTo__gml__GeneralConversionPropertyType_sequence' for type '-gml:GeneralConversionPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeneralConversionPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeneralConversionPropertyType_sequence (-1393)

#endif

/* struct __gml__EllipsoidPropertyType_sequence * has binding name 'PointerTo__gml__EllipsoidPropertyType_sequence' for type '-gml:EllipsoidPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidPropertyType_sequence (-1390)

#endif

/* gml__EllipsoidType * has binding name 'PointerTogml__EllipsoidType' for type 'gml:EllipsoidType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidType (-1389)

#endif

/* struct __gml__PrimeMeridianPropertyType_sequence * has binding name 'PointerTo__gml__PrimeMeridianPropertyType_sequence' for type '-gml:PrimeMeridianPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__PrimeMeridianPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__PrimeMeridianPropertyType_sequence (-1387)

#endif

/* gml__PrimeMeridianType * has binding name 'PointerTogml__PrimeMeridianType' for type 'gml:PrimeMeridianType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__PrimeMeridianType (-1386)

#endif

/* struct __gml__GeodeticDatumPropertyType_sequence * has binding name 'PointerTo__gml__GeodeticDatumPropertyType_sequence' for type '-gml:GeodeticDatumPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticDatumPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__GeodeticDatumPropertyType_sequence (-1384)

#endif

/* gml__GeodeticDatumType * has binding name 'PointerTogml__GeodeticDatumType' for type 'gml:GeodeticDatumType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__GeodeticDatumType (-1383)

#endif

/* struct __gml__SphericalCSPropertyType_sequence * has binding name 'PointerTo__gml__SphericalCSPropertyType_sequence' for type '-gml:SphericalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__SphericalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__SphericalCSPropertyType_sequence (-1381)

#endif

/* gml__SphericalCSType * has binding name 'PointerTogml__SphericalCSType' for type 'gml:SphericalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__SphericalCSType (-1380)

#endif

/* struct __gml__CartesianCSPropertyType_sequence * has binding name 'PointerTo__gml__CartesianCSPropertyType_sequence' for type '-gml:CartesianCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CartesianCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CartesianCSPropertyType_sequence (-1378)

#endif

/* gml__CartesianCSType * has binding name 'PointerTogml__CartesianCSType' for type 'gml:CartesianCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CartesianCSType (-1377)

#endif

/* struct __gml__CoordinateSystemAxisPropertyType_sequence * has binding name 'PointerTo__gml__CoordinateSystemAxisPropertyType_sequence' for type '-gml:CoordinateSystemAxisPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CoordinateSystemAxisPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__CoordinateSystemAxisPropertyType_sequence (-1375)

#endif

/* gml__CoordinateSystemAxisType * has binding name 'PointerTogml__CoordinateSystemAxisType' for type 'gml:CoordinateSystemAxisType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CoordinateSystemAxisType (-1374)

#endif

/* struct __gml__EllipsoidalCSPropertyType_sequence * has binding name 'PointerTo__gml__EllipsoidalCSPropertyType_sequence' for type '-gml:EllipsoidalCSPropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidalCSPropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__EllipsoidalCSPropertyType_sequence (-1372)

#endif

/* gml__EllipsoidalCSType * has binding name 'PointerTogml__EllipsoidalCSType' for type 'gml:EllipsoidalCSType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__EllipsoidalCSType (-1371)

#endif

/* struct __gml__TimePrimitivePropertyType_sequence * has binding name 'PointerTo__gml__TimePrimitivePropertyType_sequence' for type '-gml:TimePrimitivePropertyType-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__TimePrimitivePropertyType_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__gml__TimePrimitivePropertyType_sequence (-1369)

#endif

/* enum _xlink__actuate * has binding name 'PointerTo_xlink__actuate' for type 'xlink:actuate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__actuate
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__actuate (-1366)

#endif

/* enum _xlink__show * has binding name 'PointerTo_xlink__show' for type 'xlink:show' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__show
#define SOAP_TYPE_gsoap_eml2_2_PointerTo_xlink__show (-1365)

#endif

/* std::string * has binding name 'PointerTogml__NilReasonType' for type 'gml:NilReasonType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__NilReasonType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__NilReasonType (-1364)

#endif

/* gml__CodeType * has binding name 'PointerTogml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeType (-1362)

#endif

/* gml__CodeWithAuthorityType * has binding name 'PointerTogml__CodeWithAuthorityType' for type 'gml:CodeWithAuthorityType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeWithAuthorityType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__CodeWithAuthorityType (-1361)

#endif

/* gml__ReferenceType * has binding name 'PointerTogml__ReferenceType' for type 'gml:ReferenceType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__ReferenceType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__ReferenceType (-1360)

#endif

/* gml__StringOrRefType * has binding name 'PointerTogml__StringOrRefType' for type 'gml:StringOrRefType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTogml__StringOrRefType
#define SOAP_TYPE_gsoap_eml2_2_PointerTogml__StringOrRefType (-1359)

#endif

/* eml22__VolumeMeasureExt * has binding name 'PointerToeml22__VolumeMeasureExt' for type 'eml22:VolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumeMeasureExt (-1358)

#endif

/* eml22__AbstractPressureValue * has binding name 'PointerToeml22__AbstractPressureValue' for type 'eml22:AbstractPressureValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractPressureValue
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractPressureValue (-1357)

#endif

/* eml22__VolumePerTimeMeasureExt * has binding name 'PointerToeml22__VolumePerTimeMeasureExt' for type 'eml22:VolumePerTimeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerTimeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__VolumePerTimeMeasureExt (-1356)

#endif

/* eml22__AbstractTemperaturePressure * has binding name 'PointerToeml22__AbstractTemperaturePressure' for type 'eml22:AbstractTemperaturePressure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractTemperaturePressure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractTemperaturePressure (-1355)

#endif

/* eml22__MassPerVolumeMeasureExt * has binding name 'PointerToeml22__MassPerVolumeMeasureExt' for type 'eml22:MassPerVolumeMeasureExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerVolumeMeasureExt
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MassPerVolumeMeasureExt (-1354)

#endif

/* eml22__AbstractActivityParameter * has binding name 'PointerToeml22__AbstractActivityParameter' for type 'eml22:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractActivityParameter (-1351)

#endif

/* eml22__AbstractParameterKey * has binding name 'PointerToeml22__AbstractParameterKey' for type 'eml22:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractParameterKey (-1347)

#endif

/* LONG64 * has binding name 'PointerToLONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToLONG64
#define SOAP_TYPE_gsoap_eml2_2_PointerToLONG64 (-1346)

#endif

/* eml22__ExternalDatasetPart * has binding name 'PointerToeml22__ExternalDatasetPart' for type 'eml22:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExternalDatasetPart (-1344)

#endif

/* std::string * has binding name 'PointerToxsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__anyURI
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__anyURI (-1343)

#endif

/* eml22__LengthMeasure * has binding name 'PointerToeml22__LengthMeasure' for type 'eml22:LengthMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__LengthMeasure (-1342)

#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToint
#define SOAP_TYPE_gsoap_eml2_2_PointerToint (-1341)

#endif

/* std::string * has binding name 'PointerToeml22__TimeStamp' for type 'eml22:TimeStamp' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeStamp
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeStamp (-1340)

#endif

/* enum eml22__MeasureClass * has binding name 'PointerToeml22__MeasureClass' for type 'eml22:MeasureClass' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MeasureClass
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__MeasureClass (-1339)

#endif

/* eml22__StringMeasure * has binding name 'PointerToeml22__StringMeasure' for type 'eml22:StringMeasure' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__StringMeasure
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__StringMeasure (-1338)

#endif

/* std::string * has binding name 'PointerToeml22__String2000' for type 'eml22:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String2000 (-1336)

#endif

/* struct tm * has binding name 'PointerToxsd__dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__dateTime
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__dateTime (-1335)

#endif

/* enum eml22__ExistenceKind * has binding name 'PointerToeml22__ExistenceKind' for type 'eml22:ExistenceKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExistenceKind
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExistenceKind (-1334)

#endif

/* std::string * has binding name 'PointerToeml22__String64' for type 'eml22:String64' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String64
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__String64 (-1333)

#endif

/* eml22__ExtensionNameValue * has binding name 'PointerToeml22__ExtensionNameValue' for type 'eml22:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ExtensionNameValue (-1331)

#endif

/* eml22__CustomData * has binding name 'PointerToeml22__CustomData' for type 'eml22:CustomData' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__CustomData
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__CustomData (-1330)

#endif

/* eml22__Citation * has binding name 'PointerToeml22__Citation' for type 'eml22:Citation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__Citation
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__Citation (-1329)

#endif

/* eml22__ObjectAlias * has binding name 'PointerToeml22__ObjectAlias' for type 'eml22:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__ObjectAlias (-1327)

#endif

/* resqml2__ElementIdentity * has binding name 'PointerToresqml2__ElementIdentity' for type 'resqml2:ElementIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ElementIdentity
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ElementIdentity (-1325)

#endif

/* resqml2__AdditionalGridTopology * has binding name 'PointerToresqml2__AdditionalGridTopology' for type 'resqml2:AdditionalGridTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AdditionalGridTopology
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AdditionalGridTopology (-1324)

#endif

/* resqml2__AbstractGeometry * has binding name 'PointerToresqml2__AbstractGeometry' for type 'resqml2:AbstractGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractGeometry
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractGeometry (-1323)

#endif

/* struct __resqml2__ElementIndices_sequence * has binding name 'PointerTo__resqml2__ElementIndices_sequence' for type '-resqml2:ElementIndices-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__ElementIndices_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__ElementIndices_sequence (-1322)

#endif

/* resqml2__UniformSubnodePatch * has binding name 'PointerToresqml2__UniformSubnodePatch' for type 'resqml2:UniformSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UniformSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UniformSubnodePatch (-1319)

#endif

/* resqml2__VariableSubnodePatch * has binding name 'PointerToresqml2__VariableSubnodePatch' for type 'resqml2:VariableSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__VariableSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__VariableSubnodePatch (-1317)

#endif

/* resqml2__Intervals * has binding name 'PointerToresqml2__Intervals' for type 'resqml2:Intervals' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Intervals
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Intervals (-1316)

#endif

/* struct __resqml2__OverlapVolume_sequence * has binding name 'PointerTo__resqml2__OverlapVolume_sequence' for type '-resqml2:OverlapVolume-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__OverlapVolume_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__OverlapVolume_sequence (-1315)

#endif

/* struct __resqml2__KGaps_sequence * has binding name 'PointerTo__resqml2__KGaps_sequence' for type '-resqml2:KGaps-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__KGaps_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__KGaps_sequence (-1313)

#endif

/* eml22__AbstractBooleanArray * has binding name 'PointerToeml22__AbstractBooleanArray' for type 'eml22:AbstractBooleanArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractBooleanArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractBooleanArray (-1312)

#endif

/* struct __resqml2__IjGaps_sequence * has binding name 'PointerTo__resqml2__IjGaps_sequence' for type '-resqml2:IjGaps-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__IjGaps_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__IjGaps_sequence (-1310)

#endif

/* resqml2__IjkGpGridPatch * has binding name 'PointerToresqml2__IjkGpGridPatch' for type 'resqml2:IjkGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IjkGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__IjkGpGridPatch (-1307)

#endif

/* resqml2__UnstructuredColumnLayerGpGridPatch * has binding name 'PointerToresqml2__UnstructuredColumnLayerGpGridPatch' for type 'resqml2:UnstructuredColumnLayerGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredColumnLayerGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredColumnLayerGpGridPatch (-1305)

#endif

/* resqml2__KGaps * has binding name 'PointerToresqml2__KGaps' for type 'resqml2:KGaps' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__KGaps
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__KGaps (-1304)

#endif

/* struct __resqml2__CellOverlap_sequence * has binding name 'PointerTo__resqml2__CellOverlap_sequence' for type '-resqml2:CellOverlap-sequence' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__CellOverlap_sequence
#define SOAP_TYPE_gsoap_eml2_2_PointerTo__resqml2__CellOverlap_sequence (-1303)

#endif

/* resqml2__OverlapVolume * has binding name 'PointerToresqml2__OverlapVolume' for type 'resqml2:OverlapVolume' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__OverlapVolume
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__OverlapVolume (-1302)

#endif

/* eml22__JaggedArray * has binding name 'PointerToeml22__JaggedArray' for type 'eml22:JaggedArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__JaggedArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__JaggedArray (-1300)

#endif

/* resqml2__ColumnLayerSubnodeTopology * has binding name 'PointerToresqml2__ColumnLayerSubnodeTopology' for type 'resqml2:ColumnLayerSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnLayerSubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__ColumnLayerSubnodeTopology (-1299)

#endif

/* resqml2__UnstructuredSubnodeTopology * has binding name 'PointerToresqml2__UnstructuredSubnodeTopology' for type 'resqml2:UnstructuredSubnodeTopology' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredSubnodeTopology
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredSubnodeTopology (-1298)

#endif

/* resqml2__SplitFaces * has binding name 'PointerToresqml2__SplitFaces' for type 'resqml2:SplitFaces' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitFaces
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitFaces (-1297)

#endif

/* resqml2__UnstructuredColumnEdges * has binding name 'PointerToresqml2__UnstructuredColumnEdges' for type 'resqml2:UnstructuredColumnEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredColumnEdges
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__UnstructuredColumnEdges (-1296)

#endif

/* resqml2__SplitColumnEdges * has binding name 'PointerToresqml2__SplitColumnEdges' for type 'resqml2:SplitColumnEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitColumnEdges
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitColumnEdges (-1295)

#endif

/* resqml2__SplitNodePatch * has binding name 'PointerToresqml2__SplitNodePatch' for type 'resqml2:SplitNodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitNodePatch
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitNodePatch (-1294)

#endif

/* resqml2__SplitEdges * has binding name 'PointerToresqml2__SplitEdges' for type 'resqml2:SplitEdges' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitEdges
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__SplitEdges (-1293)

#endif

/* resqml2__AbstractPoint3dArray * has binding name 'PointerToresqml2__AbstractPoint3dArray' for type 'resqml2:AbstractPoint3dArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractPoint3dArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractPoint3dArray (-1292)

#endif

/* eml22__TimeSeries * has binding name 'PointerToeml22__TimeSeries' for type 'eml22:TimeSeries' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeSeries
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeSeries (-1291)

#endif

/* resqml2__CellOverlap * has binding name 'PointerToresqml2__CellOverlap' for type 'resqml2:CellOverlap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__CellOverlap
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__CellOverlap (-1290)

#endif

/* resqml2__Point3d * has binding name 'PointerToresqml2__Point3d' for type 'resqml2:Point3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Point3d
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__Point3d (-1288)

#endif

/* eml22__AbstractValueArray * has binding name 'PointerToeml22__AbstractValueArray' for type 'eml22:AbstractValueArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractValueArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractValueArray (-1287)

#endif

/* eml22__TimeIndex * has binding name 'PointerToeml22__TimeIndex' for type 'eml22:TimeIndex' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeIndex
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__TimeIndex (-1286)

#endif

/* resqml2__OrientedMacroFace * has binding name 'PointerToresqml2__OrientedMacroFace' for type 'resqml2:OrientedMacroFace' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__OrientedMacroFace
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__OrientedMacroFace (-1284)

#endif

/* resqml2__VolumeShell * has binding name 'PointerToresqml2__VolumeShell' for type 'resqml2:VolumeShell' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__VolumeShell
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__VolumeShell (-1282)

#endif

/* eml22__AbstractIntegerArray * has binding name 'PointerToeml22__AbstractIntegerArray' for type 'eml22:AbstractIntegerArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractIntegerArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractIntegerArray (-1280)

#endif

/* eml22__AbstractFloatingPointArray * has binding name 'PointerToeml22__AbstractFloatingPointArray' for type 'eml22:AbstractFloatingPointArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractFloatingPointArray
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__AbstractFloatingPointArray (-1279)

#endif

/* resqml2__AbstractTimeInterval * has binding name 'PointerToresqml2__AbstractTimeInterval' for type 'resqml2:AbstractTimeInterval' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractTimeInterval
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__AbstractTimeInterval (-1278)

#endif

/* resqml2__FeatureInterpretationSet * has binding name 'PointerToresqml2__FeatureInterpretationSet' for type 'resqml2:FeatureInterpretationSet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FeatureInterpretationSet
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__FeatureInterpretationSet (-1276)

#endif

/* LONG64 * has binding name 'PointerToeml22__NonNegativeLong' for type 'eml22:NonNegativeLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__NonNegativeLong
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__NonNegativeLong (-1275)

#endif

/* eml22__DataObjectReference * has binding name 'PointerToeml22__DataObjectReference' for type 'eml22:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_PointerToeml22__DataObjectReference (-1274)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTostd__string
#define SOAP_TYPE_gsoap_eml2_2_PointerTostd__string (-1273)

#endif

/* resqml2__HsvColor * has binding name 'PointerToresqml2__HsvColor' for type 'resqml2:HsvColor' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__HsvColor
#define SOAP_TYPE_gsoap_eml2_2_PointerToresqml2__HsvColor (-1271)

#endif

/* bool * has binding name 'PointerTobool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTobool
#define SOAP_TYPE_gsoap_eml2_2_PointerTobool (-1270)

#endif

/* double * has binding name 'PointerTodouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerTodouble
#define SOAP_TYPE_gsoap_eml2_2_PointerTodouble (-1268)

#endif

/* LONG64 * has binding name 'PointerToxsd__integer' for type 'xsd:integer' */
#ifndef SOAP_TYPE_gsoap_eml2_2_PointerToxsd__integer
#define SOAP_TYPE_gsoap_eml2_2_PointerToxsd__integer (-1267)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_gsoap_eml2_2__QName
#define SOAP_TYPE_gsoap_eml2_2__QName (-6)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2__XML
#define SOAP_TYPE_gsoap_eml2_2__XML (-5)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_string
#define SOAP_TYPE_gsoap_eml2_2_string (-4)

#endif

/* std::vector<_gml__coordinateOperationAccuracy *>  has binding name 'std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__coordinateOperationAccuracy (-1708)

#endif

/* std::vector<gml__CoordinateSystemAxisPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType' for type 'gml:CoordinateSystemAxisPropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CoordinateSystemAxisPropertyType (-1702)

#endif

/* std::vector<_gml__domainOfValidity *>  has binding name 'std__vectorTemplateOfPointerTo_gml__domainOfValidity' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__domainOfValidity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTo_gml__domainOfValidity (-1700)

#endif

/* std::vector<resqml2__SealedContactRepresentationPart *>  has binding name 'std__vectorTemplateOfPointerToresqml2__SealedContactRepresentationPart' for type 'resqml2:SealedContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__SealedContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__SealedContactRepresentationPart (-1695)

#endif

/* std::vector<resqml2__AbstractContactRepresentationPart *>  has binding name 'std__vectorTemplateOfPointerToresqml2__AbstractContactRepresentationPart' for type 'resqml2:AbstractContactRepresentationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractContactRepresentationPart
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractContactRepresentationPart (-1693)

#endif

/* std::vector<eml22__IntegerConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml22__IntegerConstantArray' for type 'eml22:IntegerConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__IntegerConstantArray
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__IntegerConstantArray (-1690)

#endif

/* std::vector<eml22__FloatingPointConstantArray *>  has binding name 'std__vectorTemplateOfPointerToeml22__FloatingPointConstantArray' for type 'eml22:FloatingPointConstantArray' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FloatingPointConstantArray
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FloatingPointConstantArray (-1688)

#endif

/* std::vector<LONG64>  has binding name 'std__vectorTemplateOfLONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfLONG64
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfLONG64 (-1686)

#endif

/* std::vector<resqml2__ColumnLayerGpGrid *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ColumnLayerGpGrid' for type 'resqml2:ColumnLayerGpGrid' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ColumnLayerGpGrid
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ColumnLayerGpGrid (-1683)

#endif

/* std::vector<resqml2__UnstructuredGpGridPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__UnstructuredGpGridPatch' for type 'resqml2:UnstructuredGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__UnstructuredGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__UnstructuredGpGridPatch (-1681)

#endif

/* std::vector<resqml2__TrianglePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__TrianglePatch' for type 'resqml2:TrianglePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__TrianglePatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__TrianglePatch (-1678)

#endif

/* std::vector<resqml2__VolumeRegion *>  has binding name 'std__vectorTemplateOfPointerToresqml2__VolumeRegion' for type 'resqml2:VolumeRegion' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__VolumeRegion
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__VolumeRegion (-1676)

#endif

/* std::vector<resqml2__AbstractPlaneGeometry *>  has binding name 'std__vectorTemplateOfPointerToresqml2__AbstractPlaneGeometry' for type 'resqml2:AbstractPlaneGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractPlaneGeometry
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractPlaneGeometry (-1674)

#endif

/* std::vector<resqml2__Grid2dPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__Grid2dPatch' for type 'resqml2:Grid2dPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__Grid2dPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__Grid2dPatch (-1672)

#endif

/* std::vector<resqml2__ContactIdentity *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ContactIdentity' for type 'resqml2:ContactIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContactIdentity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContactIdentity (-1670)

#endif

/* std::vector<resqml2__WellboreMarker *>  has binding name 'std__vectorTemplateOfPointerToresqml2__WellboreMarker' for type 'resqml2:WellboreMarker' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__WellboreMarker
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__WellboreMarker (-1668)

#endif

/* std::vector<resqml2__BoundaryFeatureInterpretationPlusItsRank *>  has binding name 'std__vectorTemplateOfPointerToresqml2__BoundaryFeatureInterpretationPlusItsRank' for type 'resqml2:BoundaryFeatureInterpretationPlusItsRank' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__BoundaryFeatureInterpretationPlusItsRank
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__BoundaryFeatureInterpretationPlusItsRank (-1663)

#endif

/* std::vector<enum resqml2__HorizonStratigraphicRole>  has binding name 'std__vectorTemplateOfresqml2__HorizonStratigraphicRole' for type 'resqml2:HorizonStratigraphicRole' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfresqml2__HorizonStratigraphicRole
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfresqml2__HorizonStratigraphicRole (-1656)

#endif

/* std::vector<enum resqml2__BoundaryRelation>  has binding name 'std__vectorTemplateOfresqml2__BoundaryRelation' for type 'resqml2:BoundaryRelation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfresqml2__BoundaryRelation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfresqml2__BoundaryRelation (-1654)

#endif

/* std::vector<resqml2__FaultThrow *>  has binding name 'std__vectorTemplateOfPointerToresqml2__FaultThrow' for type 'resqml2:FaultThrow' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__FaultThrow
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__FaultThrow (-1653)

#endif

/* std::vector<gml__RelatedTimeType *>  has binding name 'std__vectorTemplateOfPointerTogml__RelatedTimeType' for type 'gml:RelatedTimeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__RelatedTimeType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__RelatedTimeType (-1651)

#endif

/* std::vector<resqml2__StringLookup *>  has binding name 'std__vectorTemplateOfPointerToresqml2__StringLookup' for type 'resqml2:StringLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__StringLookup
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__StringLookup (-1647)

#endif

/* std::vector<resqml2__PatchOfPoints *>  has binding name 'std__vectorTemplateOfPointerToresqml2__PatchOfPoints' for type 'resqml2:PatchOfPoints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchOfPoints
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchOfPoints (-1645)

#endif

/* std::vector<resqml2__DoubleLookup *>  has binding name 'std__vectorTemplateOfPointerToresqml2__DoubleLookup' for type 'resqml2:DoubleLookup' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__DoubleLookup
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__DoubleLookup (-1643)

#endif

/* std::vector<resqml2__PropertyKindFacet *>  has binding name 'std__vectorTemplateOfPointerToresqml2__PropertyKindFacet' for type 'resqml2:PropertyKindFacet' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PropertyKindFacet
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PropertyKindFacet (-1641)

#endif

/* std::vector<resqml2__PatchOfValues *>  has binding name 'std__vectorTemplateOfPointerToresqml2__PatchOfValues' for type 'resqml2:PatchOfValues' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchOfValues
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchOfValues (-1639)

#endif

/* std::vector<resqml2__ElementIndices *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ElementIndices' for type 'resqml2:ElementIndices' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ElementIndices
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ElementIndices (-1637)

#endif

/* std::vector<resqml2__SubRepresentationPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__SubRepresentationPatch' for type 'resqml2:SubRepresentationPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__SubRepresentationPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__SubRepresentationPatch (-1635)

#endif

/* std::vector<resqml2__PatchOfGeometry *>  has binding name 'std__vectorTemplateOfPointerToresqml2__PatchOfGeometry' for type 'resqml2:PatchOfGeometry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchOfGeometry
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchOfGeometry (-1633)

#endif

/* std::vector<resqml2__PolylineSetPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__PolylineSetPatch' for type 'resqml2:PolylineSetPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PolylineSetPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PolylineSetPatch (-1631)

#endif

/* std::vector<resqml2__AdditionalGridPoints *>  has binding name 'std__vectorTemplateOfPointerToresqml2__AdditionalGridPoints' for type 'resqml2:AdditionalGridPoints' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AdditionalGridPoints
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AdditionalGridPoints (-1627)

#endif

/* std::vector<resqml2__ThreePoint3d *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ThreePoint3d' for type 'resqml2:ThreePoint3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ThreePoint3d
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ThreePoint3d (-1624)

#endif

/* std::vector<resqml2__EdgePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__EdgePatch' for type 'resqml2:EdgePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__EdgePatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__EdgePatch (-1622)

#endif

/* std::vector<resqml2__NodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__NodePatch' for type 'resqml2:NodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__NodePatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__NodePatch (-1619)

#endif

/* std::vector<resqml2__PatchBoundaries *>  has binding name 'std__vectorTemplateOfPointerToresqml2__PatchBoundaries' for type 'resqml2:PatchBoundaries' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchBoundaries
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__PatchBoundaries (-1617)

#endif

/* std::vector<resqml2__IntervalStratigraphicUnits *>  has binding name 'std__vectorTemplateOfPointerToresqml2__IntervalStratigraphicUnits' for type 'resqml2:IntervalStratigraphicUnits' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__IntervalStratigraphicUnits
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__IntervalStratigraphicUnits (-1611)

#endif

/* std::vector<resqml2__AbstractContactInterpretationPart *>  has binding name 'std__vectorTemplateOfPointerToresqml2__AbstractContactInterpretationPart' for type 'resqml2:AbstractContactInterpretationPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractContactInterpretationPart
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractContactInterpretationPart (-1606)

#endif

/* std::vector<gmd__CI_USCOREPresentationFormCode_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType' for type 'gmd:CI_PresentationFormCode_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREPresentationFormCode_USCOREPropertyType (-1595)

#endif

/* std::vector<gmd__CI_USCOREResponsibleParty_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType' for type 'gmd:CI_ResponsibleParty_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREResponsibleParty_USCOREPropertyType (-1593)

#endif

/* std::vector<gmd__MD_USCOREIdentifier_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType' for type 'gmd:MD_Identifier_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__MD_USCOREIdentifier_USCOREPropertyType (-1591)

#endif

/* std::vector<gmd__CI_USCOREDate_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType' for type 'gmd:CI_Date_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__CI_USCOREDate_USCOREPropertyType (-1589)

#endif

/* std::vector<gmd__DQ_USCOREResult_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType' for type 'gmd:DQ_Result_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__DQ_USCOREResult_USCOREPropertyType (-1587)

#endif

/* std::vector<gco__DateTime_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType' for type 'gco:DateTime_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__DateTime_USCOREPropertyType (-1585)

#endif

/* std::vector<gco__CharacterString_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType' for type 'gco:CharacterString_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogco__CharacterString_USCOREPropertyType (-1580)

#endif

/* std::vector<gmd__EX_USCOREVerticalExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType' for type 'gmd:EX_VerticalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREVerticalExtent_USCOREPropertyType (-1575)

#endif

/* std::vector<gmd__EX_USCORETemporalExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType' for type 'gmd:EX_TemporalExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCORETemporalExtent_USCOREPropertyType (-1573)

#endif

/* std::vector<gmd__EX_USCOREGeographicExtent_USCOREPropertyType *>  has binding name 'std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType' for type 'gmd:EX_GeographicExtent_PropertyType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogmd__EX_USCOREGeographicExtent_USCOREPropertyType (-1571)

#endif

/* std::vector<eml22__AbstractGraphicalInformation *>  has binding name 'std__vectorTemplateOfPointerToeml22__AbstractGraphicalInformation' for type 'eml22:AbstractGraphicalInformation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractGraphicalInformation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractGraphicalInformation (-1566)

#endif

/* std::vector<eml22__FailingRule *>  has binding name 'std__vectorTemplateOfPointerToeml22__FailingRule' for type 'eml22:FailingRule' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FailingRule
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__FailingRule (-1563)

#endif

/* std::vector<eml22__GeologicTime *>  has binding name 'std__vectorTemplateOfPointerToeml22__GeologicTime' for type 'eml22:GeologicTime' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__GeologicTime
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__GeologicTime (-1549)

#endif

/* std::vector<eml22__PropertyKind *>  has binding name 'std__vectorTemplateOfPointerToeml22__PropertyKind' for type 'eml22:PropertyKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__PropertyKind
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__PropertyKind (-1548)

#endif

/* std::vector<eml22__ParameterTemplate *>  has binding name 'std__vectorTemplateOfPointerToeml22__ParameterTemplate' for type 'eml22:ParameterTemplate' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ParameterTemplate
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ParameterTemplate (-1546)

#endif

/* std::vector<resqml2__RepresentationIdentity *>  has binding name 'std__vectorTemplateOfPointerToresqml2__RepresentationIdentity' for type 'resqml2:RepresentationIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__RepresentationIdentity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__RepresentationIdentity (-1542)

#endif

/* std::vector<resqml2__ColumnSubnodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ColumnSubnodePatch' for type 'resqml2:ColumnSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ColumnSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ColumnSubnodePatch (-1533)

#endif

/* std::vector<resqml2__Point3dOffset *>  has binding name 'std__vectorTemplateOfPointerToresqml2__Point3dOffset' for type 'resqml2:Point3dOffset' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__Point3dOffset
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__Point3dOffset (-1528)

#endif

/* std::vector<resqml2__ContactPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ContactPatch' for type 'resqml2:ContactPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContactPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContactPatch (-1523)

#endif

/* std::vector<resqml2__StratigraphicUnitInterpretation *>  has binding name 'std__vectorTemplateOfPointerToresqml2__StratigraphicUnitInterpretation' for type 'resqml2:StratigraphicUnitInterpretation' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__StratigraphicUnitInterpretation
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__StratigraphicUnitInterpretation (-1516)

#endif

/* std::vector<LONG64>  has binding name 'std__vectorTemplateOfeml22__NonNegativeLong' for type 'eml22:NonNegativeLong' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__NonNegativeLong
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__NonNegativeLong (-1514)

#endif

/* std::vector<resqml2__RockVolumeFeature *>  has binding name 'std__vectorTemplateOfPointerToresqml2__RockVolumeFeature' for type 'resqml2:RockVolumeFeature' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__RockVolumeFeature
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__RockVolumeFeature (-1508)

#endif

/* std::vector<resqml2__DiscreteColorMapEntry *>  has binding name 'std__vectorTemplateOfPointerToresqml2__DiscreteColorMapEntry' for type 'resqml2:DiscreteColorMapEntry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__DiscreteColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__DiscreteColorMapEntry (-1499)

#endif

/* std::vector<resqml2__AbstractGraphicalInformationForIndexableElement *>  has binding name 'std__vectorTemplateOfPointerToresqml2__AbstractGraphicalInformationForIndexableElement' for type 'resqml2:AbstractGraphicalInformationForIndexableElement' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractGraphicalInformationForIndexableElement
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__AbstractGraphicalInformationForIndexableElement (-1497)

#endif

/* std::vector<resqml2__ContinuousColorMapEntry *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ContinuousColorMapEntry' for type 'resqml2:ContinuousColorMapEntry' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContinuousColorMapEntry
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContinuousColorMapEntry (-1494)

#endif

/* std::vector<resqml2__ContinuousColorMap *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ContinuousColorMap' for type 'resqml2:ContinuousColorMap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContinuousColorMap
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ContinuousColorMap (-1492)

#endif

/* std::vector<resqml2__DiscreteColorMap *>  has binding name 'std__vectorTemplateOfPointerToresqml2__DiscreteColorMap' for type 'resqml2:DiscreteColorMap' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__DiscreteColorMap
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__DiscreteColorMap (-1490)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfstd__string
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfstd__string (-1487)

#endif

/* std::vector<double>  has binding name 'std__vectorTemplateOfdouble' for type 'xsd:double' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfdouble
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfdouble (-1486)

#endif

/* std::vector<gml__CodeType *>  has binding name 'std__vectorTemplateOfPointerTogml__CodeType' for type 'gml:CodeType' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CodeType
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerTogml__CodeType (-1363)

#endif

/* std::vector<eml22__AbstractActivityParameter *>  has binding name 'std__vectorTemplateOfPointerToeml22__AbstractActivityParameter' for type 'eml22:AbstractActivityParameter' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractActivityParameter
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractActivityParameter (-1352)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfeml22__String2000' for type 'eml22:String2000' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__String2000
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__String2000 (-1350)

#endif

/* std::vector<enum eml22__ParameterKind>  has binding name 'std__vectorTemplateOfeml22__ParameterKind' for type 'eml22:ParameterKind' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__ParameterKind
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfeml22__ParameterKind (-1349)

#endif

/* std::vector<eml22__AbstractParameterKey *>  has binding name 'std__vectorTemplateOfPointerToeml22__AbstractParameterKey' for type 'eml22:AbstractParameterKey' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractParameterKey
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__AbstractParameterKey (-1348)

#endif

/* std::vector<eml22__ExternalDatasetPart *>  has binding name 'std__vectorTemplateOfPointerToeml22__ExternalDatasetPart' for type 'eml22:ExternalDatasetPart' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExternalDatasetPart
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExternalDatasetPart (-1345)

#endif

/* std::vector<char *>  has binding name 'std__vectorTemplateOf_XML' for type '' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOf_XML
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOf_XML (-1337)

#endif

/* std::vector<eml22__ExtensionNameValue *>  has binding name 'std__vectorTemplateOfPointerToeml22__ExtensionNameValue' for type 'eml22:ExtensionNameValue' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExtensionNameValue
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ExtensionNameValue (-1332)

#endif

/* std::vector<eml22__ObjectAlias *>  has binding name 'std__vectorTemplateOfPointerToeml22__ObjectAlias' for type 'eml22:ObjectAlias' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ObjectAlias
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__ObjectAlias (-1328)

#endif

/* std::vector<resqml2__ElementIdentity *>  has binding name 'std__vectorTemplateOfPointerToresqml2__ElementIdentity' for type 'resqml2:ElementIdentity' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ElementIdentity
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__ElementIdentity (-1326)

#endif

/* std::vector<resqml2__UniformSubnodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__UniformSubnodePatch' for type 'resqml2:UniformSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__UniformSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__UniformSubnodePatch (-1320)

#endif

/* std::vector<resqml2__VariableSubnodePatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__VariableSubnodePatch' for type 'resqml2:VariableSubnodePatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__VariableSubnodePatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__VariableSubnodePatch (-1318)

#endif

/* std::vector<resqml2__IjkGpGridPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__IjkGpGridPatch' for type 'resqml2:IjkGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__IjkGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__IjkGpGridPatch (-1308)

#endif

/* std::vector<resqml2__UnstructuredColumnLayerGpGridPatch *>  has binding name 'std__vectorTemplateOfPointerToresqml2__UnstructuredColumnLayerGpGridPatch' for type 'resqml2:UnstructuredColumnLayerGpGridPatch' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__UnstructuredColumnLayerGpGridPatch
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__UnstructuredColumnLayerGpGridPatch (-1306)

#endif

/* std::vector<resqml2__Point3d *>  has binding name 'std__vectorTemplateOfPointerToresqml2__Point3d' for type 'resqml2:Point3d' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__Point3d
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__Point3d (-1289)

#endif

/* std::vector<resqml2__OrientedMacroFace *>  has binding name 'std__vectorTemplateOfPointerToresqml2__OrientedMacroFace' for type 'resqml2:OrientedMacroFace' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__OrientedMacroFace
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__OrientedMacroFace (-1285)

#endif

/* std::vector<resqml2__VolumeShell *>  has binding name 'std__vectorTemplateOfPointerToresqml2__VolumeShell' for type 'resqml2:VolumeShell' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__VolumeShell
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToresqml2__VolumeShell (-1283)

#endif

/* std::vector<eml22__DataObjectReference *>  has binding name 'std__vectorTemplateOfPointerToeml22__DataObjectReference' for type 'eml22:DataObjectReference' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__DataObjectReference
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfPointerToeml22__DataObjectReference (-1281)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfresqml2__ThrowKindExt' for type 'resqml2:ThrowKindExt' */
#ifndef SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfresqml2__ThrowKindExt
#define SOAP_TYPE_gsoap_eml2_2_std__vectorTemplateOfresqml2__ThrowKindExt (-1277)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace gsoap_eml2_2


#endif

/* End of gsoap_eml2_2Stub.h */
