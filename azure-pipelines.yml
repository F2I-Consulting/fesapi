jobs:
  - job:
    displayName: Windows VS2019 with HDF5 1.12.0
    pool:
      vmImage: 'windows-2019'
    timeoutInMinutes: 150
    strategy:
      matrix:
        # 64-bit Debug:
        #   BuildType: Debug
        #   Generator: '-G"Visual Studio 16 2019" -A x64" -T host=x64'
        #   JFlag: -j 4

        64-bit Release:
          BuildType: Release
          Generator: '-G"Visual Studio 16 2019" -A x64 -T host=x64'
          JFlag: '-j 2'
    steps:
      - powershell: |
          Invoke-WebRequest https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.0/bin/hdf5-1.12.0-Std-win10_64-vs16.zip -OutFile C:\hdf5-1.12.0-Std-win10_64-vs16.zip
          Expand-Archive C:\hdf5-1.12.0-Std-win10_64-vs16.zip -DestinationPath C:\
          msiexec.exe /i "C:\hdf\HDF5-1.12.0-win64.msi" /qn INSTALL_ROOT=C:\hdf5-1.12.0-win64-vs2019
        displayName: 'Install HDF5 1.12.0'

      # Minizip
      - powershell: |
          git clone https://github.com/F2I-Consulting/Minizip.git C:/Minizip
        displayName: 'Cloning Minizip'
      - task: CMake@1
        displayName: 'CMake configure Minizip'
        inputs:
          workingDirectory: C:/Minizip-build
          cmakeArgs:
            ../Minizip
            $(Generator)
            -Wno-dev -Wno-deprecated
            -DZLIB_INCLUDE_DIR=C:/hdf5-1.12.0-win64-vs2019/include
            -DZLIB_LIBRARY_RELEASE=C:/hdf5-1.12.0-win64-vs2019/lib/zlib.lib
            -DCMAKE_INSTALL_PREFIX=C:/Minizip-install
      - task: CMake@1
        displayName: "CMake build Minizip --config $(BuildType)"
        inputs:
          workingDirectory: C:/Minizip-build
          cmakeArgs: --build . --config $(BuildType) -- /verbosity:minimal
      - task: CMake@1
        displayName: "CMake Install Minizip --config $(BuildType)"
        inputs:
          workingDirectory: C:/Minizip-build
          cmakeArgs: --build . --config $(BuildType) --target INSTALL -- /verbosity:minimal
        
      # Boost
      # Use the boost_1_75_0-msvc-14.2-64.exe for Windows 2019
      - powershell: |
          $Url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.75.0/boost_1_75_0-msvc-14.2-64.exe"
          (New-Object System.Net.WebClient).DownloadFile($Url, "$env:TEMP\boost.exe")
          Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=$(Agent.TempDirectory)\Boost\1.75.0\x86_64"  
        displayName: 'Install Boost 1.75'
          
      - task: CMake@1
        displayName: 'CMake .. $(Generator)'
        inputs:
          cmakeArgs:
            ..
            $(Generator)
            -Wno-dev -Wno-deprecated
            -DHDF5_BUILT_AS_DYNAMIC_LIB=TRUE
            -DHDF5_C_INCLUDE_DIR=C:/hdf5-1.12.0-win64-vs2019/include
            -DHDF5_C_LIBRARY_RELEASE=C:/hdf5-1.12.0-win64-vs2019/lib/hdf5.lib
            -DMINIZIP_INCLUDE_DIR=C:/Minizip-install/include
            -DMINIZIP_LIBRARY_RELEASE=C:/Minizip-install/lib/minizip.lib
            -DZLIB_INCLUDE_DIR=C:/hdf5-1.12.0-win64-vs2019/include
            -DZLIB_LIBRARY_RELEASE=C:/hdf5-1.12.0-win64-vs2019/lib/zlib.lib
            -DSZIP_LIBRARY_RELEASE=C:/hdf5-1.12.0-win64-vs2019/lib/szip.lib
            -DBoost_INCLUDE_DIR=$(Agent.TempDirectory)/Boost/1.75.0/x86_64
            -DWITH_EXAMPLE=TRUE
            -DWITH_RESQML2_2=TRUE
            -DWITH_TEST=TRUE

      - task: CMake@1
        displayName: "Build --config $(BuildType)"
        inputs:
          cmakeArgs: --build . --config $(BuildType) -- /verbosity:minimal

      - powershell: |
          Copy-Item C:\hdf5-1.12.0-win64-vs2019\bin\hdf5.dll -Destination $(Build.SourcesDirectory)\build\$(BuildType)
          Copy-Item C:\hdf5-1.12.0-win64-vs2019\bin\zlib.dll -Destination $(Build.SourcesDirectory)\build\$(BuildType)
          ctest -C $(BuildType) -V
        failOnStderr: true
        workingDirectory: $(Build.SourcesDirectory)\build
        displayName: 'Test'

      - script: |
          $(Build.SourcesDirectory)\build\$(BuildType)\example.exe
        displayName: 'Example'
        
  - job:
    displayName: Ubuntu 20.04 with valgrind and unit test
    pool:
      vmImage: 'ubuntu-20.04'
    timeoutInMinutes: 120
    steps:
      - script: |
          sudo apt update
          sudo apt install -y libhdf5-dev libminizip-dev libboost-all-dev valgrind
        displayName: 'APT install'

      - task: CMake@1
        displayName: 'Configure FESAPI build'
        inputs:
          cmakeArgs:
            -Wno-dev -Wno-deprecated
            -DHDF5_C_INCLUDE_DIR=/usr/include/hdf5/serial/
            -DHDF5_C_LIBRARY_RELEASE=/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so
            -DMINIZIP_INCLUDE_DIR=/usr/include/minizip
            -DMINIZIP_LIBRARY_RELEASE=/usr/lib/x86_64-linux-gnu/libminizip.so
            -DZLIB_INCLUDE_DIR=/usr/include
            -DZLIB_LIBRARY_RELEASE=/usr/lib/x86_64-linux-gnu/libz.so
            -DWITH_EXAMPLE=TRUE
            -DWITH_RESQML2_2=TRUE
            -DWITH_TEST=TRUE
            -DCMAKE_BUILD_TYPE=Release
            -S $(Build.SourcesDirectory)
            -B $(Build.BinariesDirectory)

      - task: CMake@1
        displayName: "Build FESAPI"
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)
        
      - script: |
          valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all $(Build.BinariesDirectory)/example/example
        displayName: 'Valgrind on Example'

      - script: |
          $(Build.BinariesDirectory)/test/unitTest
        displayName: 'Unit test'

  - job:
    displayName: Ubuntu 20.04 with Python3 wrappers
    pool:
      vmImage: 'ubuntu-20.04'
    timeoutInMinutes: 120
    steps:
      - script: |
          sudo apt update
          sudo apt install -y libhdf5-dev libminizip-dev libboost-all-dev
        displayName: 'APT install'

      - task: CMake@1
        displayName: 'Configure FESAPI build'
        inputs:
          cmakeArgs:
            -Wno-dev -Wno-deprecated
            -DHDF5_C_INCLUDE_DIR=/usr/include/hdf5/serial/
            -DHDF5_C_LIBRARY_RELEASE=/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so
            -DMINIZIP_INCLUDE_DIR=/usr/include/minizip
            -DMINIZIP_LIBRARY_RELEASE=/usr/lib/x86_64-linux-gnu/libminizip.so
            -DZLIB_INCLUDE_DIR=/usr/include
            -DZLIB_LIBRARY_RELEASE=/usr/lib/x86_64-linux-gnu/libz.so
            -DWITH_EXAMPLE=FALSE
            -DWITH_RESQML2_2=TRUE
            -DWITH_PYTHON_WRAPPING=TRUE
            -DSWIG_EXECUTABLE=/usr/bin/swig
            -DCMAKE_BUILD_TYPE=Release
            -S $(Build.SourcesDirectory)
            -B $(Build.BinariesDirectory)

      - task: CMake@1
        displayName: "Build FESAPI"
        inputs:
          cmakeArgs: --build $(Build.BinariesDirectory)
         
      - task: CMake@1
        displayName: "Install FESAPI"
        inputs:
          cmakeArgs: --install $(Build.BinariesDirectory)
        
      - script: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(Build.BinariesDirectory)/install/lib
          pip3 install $(Build.SourcesDirectory)/python/dist/*.whl
          python3 $(Build.SourcesDirectory)/python/example/example.py
        displayName: 'Run Python example'
